// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/v2x/proto/v2x_traffic_light.proto

#include "modules/v2x/proto/v2x_traffic_light.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto;
namespace apollo {
namespace v2x {
class SingleTrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleTrafficLight> _instance;
} _SingleTrafficLight_default_instance_;
class CurrentLaneTrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentLaneTrafficLight> _instance;
} _CurrentLaneTrafficLight_default_instance_;
class IntersectionTrafficLightDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntersectionTrafficLightData> _instance;
} _IntersectionTrafficLightData_default_instance_;
}  // namespace v2x
}  // namespace apollo
static void InitDefaultsscc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_CurrentLaneTrafficLight_default_instance_;
    new (ptr) ::apollo::v2x::CurrentLaneTrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::v2x::CurrentLaneTrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto}, {
      &scc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base,}};

static void InitDefaultsscc_info_IntersectionTrafficLightData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_IntersectionTrafficLightData_default_instance_;
    new (ptr) ::apollo::v2x::IntersectionTrafficLightData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::v2x::IntersectionTrafficLightData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntersectionTrafficLightData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntersectionTrafficLightData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base,}};

static void InitDefaultsscc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::v2x::_SingleTrafficLight_default_instance_;
    new (ptr) ::apollo::v2x::SingleTrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::v2x::SingleTrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, trafficlight_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, color_remaining_time_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::SingleTrafficLight, right_turn_light_),
  1,
  ~0u,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::CurrentLaneTrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::CurrentLaneTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::CurrentLaneTrafficLight, gps_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::CurrentLaneTrafficLight, gps_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::CurrentLaneTrafficLight, single_traffic_light_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, current_lane_trafficlight_),
  PROTOBUF_FIELD_OFFSET(::apollo::v2x::IntersectionTrafficLightData, intersection_id_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::v2x::SingleTrafficLight)},
  { 15, 23, sizeof(::apollo::v2x::CurrentLaneTrafficLight)},
  { 26, 34, sizeof(::apollo::v2x::IntersectionTrafficLightData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_SingleTrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_CurrentLaneTrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::v2x::_IntersectionTrafficLightData_default_instance_),
};

const char descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/v2x/proto/v2x_traffic_light.pr"
  "oto\022\napollo.v2x\032!modules/common/proto/he"
  "ader.proto\"\330\002\n\022SingleTrafficLight\0223\n\005col"
  "or\030\001 \001(\0162$.apollo.v2x.SingleTrafficLight"
  ".Color\022>\n\021trafficlight_type\030\002 \003(\0162#.apol"
  "lo.v2x.SingleTrafficLight.Type\022\n\n\002id\030\003 \001"
  "(\t\022\036\n\026color_remaining_time_s\030\004 \001(\005\022\030\n\020ri"
  "ght_turn_light\030\005 \001(\010\"P\n\005Color\022\013\n\007UNKNOWN"
  "\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005GREEN\020\003\022\t\n\005BL"
  "ACK\020\004\022\017\n\013FLASH_GREEN\020\005\"5\n\004Type\022\014\n\010STRAIG"
  "HT\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\n\n\006U_TURN\020\003\"y\n"
  "\027CurrentLaneTrafficLight\022\017\n\007gps_x_m\030\001 \001("
  "\001\022\017\n\007gps_y_m\030\002 \001(\001\022<\n\024single_traffic_lig"
  "ht\030\003 \003(\0132\036.apollo.v2x.SingleTrafficLight"
  "\"\246\001\n\034IntersectionTrafficLightData\022%\n\006hea"
  "der\030\001 \001(\0132\025.apollo.common.Header\022F\n\031curr"
  "ent_lane_trafficlight\030\002 \001(\0132#.apollo.v2x"
  ".CurrentLaneTrafficLight\022\027\n\017intersection"
  "_id\030\003 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_sccs[3] = {
  &scc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base,
  &scc_info_IntersectionTrafficLightData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base,
  &scc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once;
static bool descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto = {
  &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_initialized, descriptor_table_protodef_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto, "modules/v2x/proto/v2x_traffic_light.proto", 729,
  &descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_once, descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_sccs, descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto::offsets,
  file_level_metadata_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto, 3, file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto, file_level_service_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto), true);
namespace apollo {
namespace v2x {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[0];
}
bool SingleTrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SingleTrafficLight_Color SingleTrafficLight::UNKNOWN;
constexpr SingleTrafficLight_Color SingleTrafficLight::RED;
constexpr SingleTrafficLight_Color SingleTrafficLight::YELLOW;
constexpr SingleTrafficLight_Color SingleTrafficLight::GREEN;
constexpr SingleTrafficLight_Color SingleTrafficLight::BLACK;
constexpr SingleTrafficLight_Color SingleTrafficLight::FLASH_GREEN;
constexpr SingleTrafficLight_Color SingleTrafficLight::Color_MIN;
constexpr SingleTrafficLight_Color SingleTrafficLight::Color_MAX;
constexpr int SingleTrafficLight::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SingleTrafficLight_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto);
  return file_level_enum_descriptors_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto[1];
}
bool SingleTrafficLight_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SingleTrafficLight_Type SingleTrafficLight::STRAIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight::LEFT;
constexpr SingleTrafficLight_Type SingleTrafficLight::RIGHT;
constexpr SingleTrafficLight_Type SingleTrafficLight::U_TURN;
constexpr SingleTrafficLight_Type SingleTrafficLight::Type_MIN;
constexpr SingleTrafficLight_Type SingleTrafficLight::Type_MAX;
constexpr int SingleTrafficLight::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SingleTrafficLight::InitAsDefaultInstance() {
}
class SingleTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleTrafficLight>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color_remaining_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_right_turn_light(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SingleTrafficLight::SingleTrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.v2x.SingleTrafficLight)
}
SingleTrafficLight::SingleTrafficLight(const SingleTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trafficlight_type_(from.trafficlight_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_turn_light_) -
    reinterpret_cast<char*>(&color_)) + sizeof(right_turn_light_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.SingleTrafficLight)
}

void SingleTrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_turn_light_) -
      reinterpret_cast<char*>(&color_)) + sizeof(right_turn_light_));
}

SingleTrafficLight::~SingleTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.SingleTrafficLight)
  SharedDtor();
}

void SingleTrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SingleTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleTrafficLight& SingleTrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base);
  return *internal_default_instance();
}


void SingleTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.SingleTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trafficlight_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_turn_light_) -
        reinterpret_cast<char*>(&color_)) + sizeof(right_turn_light_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SingleTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::v2x::SingleTrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.SingleTrafficLight.Type trafficlight_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::v2x::SingleTrafficLight_Type_IsValid(val))) {
              _internal_add_trafficlight_type(static_cast<::apollo::v2x::SingleTrafficLight_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_trafficlight_type(), ptr, ctx, ::apollo::v2x::SingleTrafficLight_Type_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.v2x.SingleTrafficLight.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 color_remaining_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_color_remaining_time_s(&has_bits);
          color_remaining_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_turn_light = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_right_turn_light(&has_bits);
          right_turn_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.SingleTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // repeated .apollo.v2x.SingleTrafficLight.Type trafficlight_type = 2;
  for (int i = 0, n = this->_internal_trafficlight_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_trafficlight_type(i), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.v2x.SingleTrafficLight.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional int32 color_remaining_time_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_color_remaining_time_s(), target);
  }

  // optional bool right_turn_light = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_right_turn_light(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.SingleTrafficLight)
  return target;
}

size_t SingleTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.SingleTrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.SingleTrafficLight.Type trafficlight_type = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_trafficlight_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_trafficlight_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.v2x.SingleTrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional int32 color_remaining_time_s = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_color_remaining_time_s());
    }

    // optional bool right_turn_light = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.SingleTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleTrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.SingleTrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.SingleTrafficLight)
    MergeFrom(*source);
  }
}

void SingleTrafficLight::MergeFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.SingleTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trafficlight_type_.MergeFrom(from.trafficlight_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_remaining_time_s_ = from.color_remaining_time_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      right_turn_light_ = from.right_turn_light_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleTrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.SingleTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTrafficLight::CopyFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.SingleTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTrafficLight::IsInitialized() const {
  return true;
}

void SingleTrafficLight::InternalSwap(SingleTrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trafficlight_type_.InternalSwap(&other->trafficlight_type_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(color_remaining_time_s_, other->color_remaining_time_s_);
  swap(right_turn_light_, other->right_turn_light_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentLaneTrafficLight::InitAsDefaultInstance() {
}
class CurrentLaneTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrentLaneTrafficLight>()._has_bits_);
  static void set_has_gps_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gps_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CurrentLaneTrafficLight::CurrentLaneTrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.v2x.CurrentLaneTrafficLight)
}
CurrentLaneTrafficLight::CurrentLaneTrafficLight(const CurrentLaneTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      single_traffic_light_(from.single_traffic_light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gps_x_m_, &from.gps_x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_y_m_) -
    reinterpret_cast<char*>(&gps_x_m_)) + sizeof(gps_y_m_));
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.CurrentLaneTrafficLight)
}

void CurrentLaneTrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base);
  ::memset(&gps_x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_y_m_) -
      reinterpret_cast<char*>(&gps_x_m_)) + sizeof(gps_y_m_));
}

CurrentLaneTrafficLight::~CurrentLaneTrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.v2x.CurrentLaneTrafficLight)
  SharedDtor();
}

void CurrentLaneTrafficLight::SharedDtor() {
}

void CurrentLaneTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentLaneTrafficLight& CurrentLaneTrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentLaneTrafficLight_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base);
  return *internal_default_instance();
}


void CurrentLaneTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.CurrentLaneTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_traffic_light_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gps_x_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_y_m_) -
        reinterpret_cast<char*>(&gps_x_m_)) + sizeof(gps_y_m_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CurrentLaneTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double gps_x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gps_x_m(&has_bits);
          gps_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gps_y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_gps_y_m(&has_bits);
          gps_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_single_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentLaneTrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.CurrentLaneTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gps_x_m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_gps_x_m(), target);
  }

  // optional double gps_y_m = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gps_y_m(), target);
  }

  // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_single_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_single_traffic_light(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.CurrentLaneTrafficLight)
  return target;
}

size_t CurrentLaneTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.CurrentLaneTrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.v2x.SingleTrafficLight single_traffic_light = 3;
  total_size += 1UL * this->_internal_single_traffic_light_size();
  for (const auto& msg : this->single_traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double gps_x_m = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double gps_y_m = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentLaneTrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.CurrentLaneTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentLaneTrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentLaneTrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.CurrentLaneTrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.CurrentLaneTrafficLight)
    MergeFrom(*source);
  }
}

void CurrentLaneTrafficLight::MergeFrom(const CurrentLaneTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.CurrentLaneTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  single_traffic_light_.MergeFrom(from.single_traffic_light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gps_x_m_ = from.gps_x_m_;
    }
    if (cached_has_bits & 0x00000002u) {
      gps_y_m_ = from.gps_y_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrentLaneTrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.CurrentLaneTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentLaneTrafficLight::CopyFrom(const CurrentLaneTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.CurrentLaneTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentLaneTrafficLight::IsInitialized() const {
  return true;
}

void CurrentLaneTrafficLight::InternalSwap(CurrentLaneTrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  single_traffic_light_.InternalSwap(&other->single_traffic_light_);
  swap(gps_x_m_, other->gps_x_m_);
  swap(gps_y_m_, other->gps_y_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentLaneTrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntersectionTrafficLightData::InitAsDefaultInstance() {
  ::apollo::v2x::_IntersectionTrafficLightData_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::v2x::_IntersectionTrafficLightData_default_instance_._instance.get_mutable()->current_lane_trafficlight_ = const_cast< ::apollo::v2x::CurrentLaneTrafficLight*>(
      ::apollo::v2x::CurrentLaneTrafficLight::internal_default_instance());
}
class IntersectionTrafficLightData::_Internal {
 public:
  using HasBits = decltype(std::declval<IntersectionTrafficLightData>()._has_bits_);
  static const ::apollo::common::Header& header(const IntersectionTrafficLightData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::v2x::CurrentLaneTrafficLight& current_lane_trafficlight(const IntersectionTrafficLightData* msg);
  static void set_has_current_lane_trafficlight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intersection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
IntersectionTrafficLightData::_Internal::header(const IntersectionTrafficLightData* msg) {
  return *msg->header_;
}
const ::apollo::v2x::CurrentLaneTrafficLight&
IntersectionTrafficLightData::_Internal::current_lane_trafficlight(const IntersectionTrafficLightData* msg) {
  return *msg->current_lane_trafficlight_;
}
void IntersectionTrafficLightData::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IntersectionTrafficLightData::IntersectionTrafficLightData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.v2x.IntersectionTrafficLightData)
}
IntersectionTrafficLightData::IntersectionTrafficLightData(const IntersectionTrafficLightData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_current_lane_trafficlight()) {
    current_lane_trafficlight_ = new ::apollo::v2x::CurrentLaneTrafficLight(*from.current_lane_trafficlight_);
  } else {
    current_lane_trafficlight_ = nullptr;
  }
  intersection_id_ = from.intersection_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.v2x.IntersectionTrafficLightData)
}

void IntersectionTrafficLightData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntersectionTrafficLightData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intersection_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(intersection_id_));
}

IntersectionTrafficLightData::~IntersectionTrafficLightData() {
  // @@protoc_insertion_point(destructor:apollo.v2x.IntersectionTrafficLightData)
  SharedDtor();
}

void IntersectionTrafficLightData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete current_lane_trafficlight_;
}

void IntersectionTrafficLightData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntersectionTrafficLightData& IntersectionTrafficLightData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntersectionTrafficLightData_modules_2fv2x_2fproto_2fv2x_5ftraffic_5flight_2eproto.base);
  return *internal_default_instance();
}


void IntersectionTrafficLightData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.v2x.IntersectionTrafficLightData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_lane_trafficlight_ != nullptr);
      current_lane_trafficlight_->Clear();
    }
  }
  intersection_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IntersectionTrafficLightData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.v2x.CurrentLaneTrafficLight current_lane_trafficlight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_lane_trafficlight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 intersection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_intersection_id(&has_bits);
          intersection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntersectionTrafficLightData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.v2x.IntersectionTrafficLightData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.v2x.CurrentLaneTrafficLight current_lane_trafficlight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::current_lane_trafficlight(this), target, stream);
  }

  // optional int32 intersection_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_intersection_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.v2x.IntersectionTrafficLightData)
  return target;
}

size_t IntersectionTrafficLightData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.v2x.IntersectionTrafficLightData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.v2x.CurrentLaneTrafficLight current_lane_trafficlight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_lane_trafficlight_);
    }

    // optional int32 intersection_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_intersection_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntersectionTrafficLightData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.v2x.IntersectionTrafficLightData)
  GOOGLE_DCHECK_NE(&from, this);
  const IntersectionTrafficLightData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntersectionTrafficLightData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.v2x.IntersectionTrafficLightData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.v2x.IntersectionTrafficLightData)
    MergeFrom(*source);
  }
}

void IntersectionTrafficLightData::MergeFrom(const IntersectionTrafficLightData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.v2x.IntersectionTrafficLightData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_current_lane_trafficlight()->::apollo::v2x::CurrentLaneTrafficLight::MergeFrom(from._internal_current_lane_trafficlight());
    }
    if (cached_has_bits & 0x00000004u) {
      intersection_id_ = from.intersection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntersectionTrafficLightData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.v2x.IntersectionTrafficLightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntersectionTrafficLightData::CopyFrom(const IntersectionTrafficLightData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.v2x.IntersectionTrafficLightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionTrafficLightData::IsInitialized() const {
  return true;
}

void IntersectionTrafficLightData::InternalSwap(IntersectionTrafficLightData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(current_lane_trafficlight_, other->current_lane_trafficlight_);
  swap(intersection_id_, other->intersection_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionTrafficLightData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2x
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::v2x::SingleTrafficLight* Arena::CreateMaybeMessage< ::apollo::v2x::SingleTrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::v2x::SingleTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::CurrentLaneTrafficLight* Arena::CreateMaybeMessage< ::apollo::v2x::CurrentLaneTrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::v2x::CurrentLaneTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::v2x::IntersectionTrafficLightData* Arena::CreateMaybeMessage< ::apollo::v2x::IntersectionTrafficLightData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::v2x::IntersectionTrafficLightData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
