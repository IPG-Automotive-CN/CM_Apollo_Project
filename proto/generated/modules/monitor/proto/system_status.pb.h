// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/monitor/proto/system_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
namespace apollo {
namespace monitor {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class ComponentStatus;
class ComponentStatusDefaultTypeInternal;
extern ComponentStatusDefaultTypeInternal _ComponentStatus_default_instance_;
class SystemStatus;
class SystemStatusDefaultTypeInternal;
extern SystemStatusDefaultTypeInternal _SystemStatus_default_instance_;
class SystemStatus_ComponentsEntry_DoNotUse;
class SystemStatus_ComponentsEntry_DoNotUseDefaultTypeInternal;
extern SystemStatus_ComponentsEntry_DoNotUseDefaultTypeInternal _SystemStatus_ComponentsEntry_DoNotUse_default_instance_;
class SystemStatus_HmiModulesEntry_DoNotUse;
class SystemStatus_HmiModulesEntry_DoNotUseDefaultTypeInternal;
extern SystemStatus_HmiModulesEntry_DoNotUseDefaultTypeInternal _SystemStatus_HmiModulesEntry_DoNotUse_default_instance_;
}  // namespace monitor
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::monitor::Component* Arena::CreateMaybeMessage<::apollo::monitor::Component>(Arena*);
template<> ::apollo::monitor::ComponentStatus* Arena::CreateMaybeMessage<::apollo::monitor::ComponentStatus>(Arena*);
template<> ::apollo::monitor::SystemStatus* Arena::CreateMaybeMessage<::apollo::monitor::SystemStatus>(Arena*);
template<> ::apollo::monitor::SystemStatus_ComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::monitor::SystemStatus_ComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::monitor::SystemStatus_HmiModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::monitor::SystemStatus_HmiModulesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace monitor {

enum ComponentStatus_Status : int {
  ComponentStatus_Status_UNKNOWN = 0,
  ComponentStatus_Status_OK = 1,
  ComponentStatus_Status_WARN = 2,
  ComponentStatus_Status_ERROR = 3,
  ComponentStatus_Status_FATAL = 4
};
bool ComponentStatus_Status_IsValid(int value);
constexpr ComponentStatus_Status ComponentStatus_Status_Status_MIN = ComponentStatus_Status_UNKNOWN;
constexpr ComponentStatus_Status ComponentStatus_Status_Status_MAX = ComponentStatus_Status_FATAL;
constexpr int ComponentStatus_Status_Status_ARRAYSIZE = ComponentStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentStatus_Status_descriptor();
template<typename T>
inline const std::string& ComponentStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentStatus_Status_descriptor(), enum_t_value);
}
inline bool ComponentStatus_Status_Parse(
    const std::string& name, ComponentStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentStatus_Status>(
    ComponentStatus_Status_descriptor(), name, value);
}
// ===================================================================

class ComponentStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ComponentStatus) */ {
 public:
  ComponentStatus();
  virtual ~ComponentStatus();

  ComponentStatus(const ComponentStatus& from);
  ComponentStatus(ComponentStatus&& from) noexcept
    : ComponentStatus() {
    *this = ::std::move(from);
  }

  inline ComponentStatus& operator=(const ComponentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentStatus& operator=(ComponentStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentStatus* internal_default_instance() {
    return reinterpret_cast<const ComponentStatus*>(
               &_ComponentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComponentStatus& a, ComponentStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentStatus* New() const final {
    return CreateMaybeMessage<ComponentStatus>(nullptr);
  }

  ComponentStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentStatus& from);
  void MergeFrom(const ComponentStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.ComponentStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
    return ::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComponentStatus_Status Status;
  static constexpr Status UNKNOWN =
    ComponentStatus_Status_UNKNOWN;
  static constexpr Status OK =
    ComponentStatus_Status_OK;
  static constexpr Status WARN =
    ComponentStatus_Status_WARN;
  static constexpr Status ERROR =
    ComponentStatus_Status_ERROR;
  static constexpr Status FATAL =
    ComponentStatus_Status_FATAL;
  static inline bool Status_IsValid(int value) {
    return ComponentStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ComponentStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ComponentStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ComponentStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ComponentStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ComponentStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ComponentStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .apollo.monitor.ComponentStatus.Status status = 1 [default = UNKNOWN];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::apollo::monitor::ComponentStatus_Status status() const;
  void set_status(::apollo::monitor::ComponentStatus_Status value);
  private:
  ::apollo::monitor::ComponentStatus_Status _internal_status() const;
  void _internal_set_status(::apollo::monitor::ComponentStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.ComponentStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class Component :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.Component";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
    return ::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
    kProcessStatusFieldNumber = 2,
    kChannelStatusFieldNumber = 3,
    kResourceStatusFieldNumber = 4,
    kOtherStatusFieldNumber = 5,
  };
  // optional .apollo.monitor.ComponentStatus summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::apollo::monitor::ComponentStatus& summary() const;
  ::apollo::monitor::ComponentStatus* release_summary();
  ::apollo::monitor::ComponentStatus* mutable_summary();
  void set_allocated_summary(::apollo::monitor::ComponentStatus* summary);
  private:
  const ::apollo::monitor::ComponentStatus& _internal_summary() const;
  ::apollo::monitor::ComponentStatus* _internal_mutable_summary();
  public:

  // optional .apollo.monitor.ComponentStatus process_status = 2;
  bool has_process_status() const;
  private:
  bool _internal_has_process_status() const;
  public:
  void clear_process_status();
  const ::apollo::monitor::ComponentStatus& process_status() const;
  ::apollo::monitor::ComponentStatus* release_process_status();
  ::apollo::monitor::ComponentStatus* mutable_process_status();
  void set_allocated_process_status(::apollo::monitor::ComponentStatus* process_status);
  private:
  const ::apollo::monitor::ComponentStatus& _internal_process_status() const;
  ::apollo::monitor::ComponentStatus* _internal_mutable_process_status();
  public:

  // optional .apollo.monitor.ComponentStatus channel_status = 3;
  bool has_channel_status() const;
  private:
  bool _internal_has_channel_status() const;
  public:
  void clear_channel_status();
  const ::apollo::monitor::ComponentStatus& channel_status() const;
  ::apollo::monitor::ComponentStatus* release_channel_status();
  ::apollo::monitor::ComponentStatus* mutable_channel_status();
  void set_allocated_channel_status(::apollo::monitor::ComponentStatus* channel_status);
  private:
  const ::apollo::monitor::ComponentStatus& _internal_channel_status() const;
  ::apollo::monitor::ComponentStatus* _internal_mutable_channel_status();
  public:

  // optional .apollo.monitor.ComponentStatus resource_status = 4;
  bool has_resource_status() const;
  private:
  bool _internal_has_resource_status() const;
  public:
  void clear_resource_status();
  const ::apollo::monitor::ComponentStatus& resource_status() const;
  ::apollo::monitor::ComponentStatus* release_resource_status();
  ::apollo::monitor::ComponentStatus* mutable_resource_status();
  void set_allocated_resource_status(::apollo::monitor::ComponentStatus* resource_status);
  private:
  const ::apollo::monitor::ComponentStatus& _internal_resource_status() const;
  ::apollo::monitor::ComponentStatus* _internal_mutable_resource_status();
  public:

  // optional .apollo.monitor.ComponentStatus other_status = 5;
  bool has_other_status() const;
  private:
  bool _internal_has_other_status() const;
  public:
  void clear_other_status();
  const ::apollo::monitor::ComponentStatus& other_status() const;
  ::apollo::monitor::ComponentStatus* release_other_status();
  ::apollo::monitor::ComponentStatus* mutable_other_status();
  void set_allocated_other_status(::apollo::monitor::ComponentStatus* other_status);
  private:
  const ::apollo::monitor::ComponentStatus& _internal_other_status() const;
  ::apollo::monitor::ComponentStatus* _internal_mutable_other_status();
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.Component)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::monitor::ComponentStatus* summary_;
  ::apollo::monitor::ComponentStatus* process_status_;
  ::apollo::monitor::ComponentStatus* channel_status_;
  ::apollo::monitor::ComponentStatus* resource_status_;
  ::apollo::monitor::ComponentStatus* other_status_;
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class SystemStatus_HmiModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemStatus_HmiModulesEntry_DoNotUse, 
    std::string, ::apollo::monitor::ComponentStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemStatus_HmiModulesEntry_DoNotUse, 
    std::string, ::apollo::monitor::ComponentStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SystemStatus_HmiModulesEntry_DoNotUse();
  SystemStatus_HmiModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SystemStatus_HmiModulesEntry_DoNotUse& other);
  static const SystemStatus_HmiModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SystemStatus_HmiModulesEntry_DoNotUse*>(&_SystemStatus_HmiModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.monitor.SystemStatus.HmiModulesEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
    return ::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class SystemStatus_ComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemStatus_ComponentsEntry_DoNotUse, 
    std::string, ::apollo::monitor::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SystemStatus_ComponentsEntry_DoNotUse, 
    std::string, ::apollo::monitor::Component,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SystemStatus_ComponentsEntry_DoNotUse();
  SystemStatus_ComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SystemStatus_ComponentsEntry_DoNotUse& other);
  static const SystemStatus_ComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SystemStatus_ComponentsEntry_DoNotUse*>(&_SystemStatus_ComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.monitor.SystemStatus.ComponentsEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
    return ::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class SystemStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.SystemStatus) */ {
 public:
  SystemStatus();
  virtual ~SystemStatus();

  SystemStatus(const SystemStatus& from);
  SystemStatus(SystemStatus&& from) noexcept
    : SystemStatus() {
    *this = ::std::move(from);
  }

  inline SystemStatus& operator=(const SystemStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemStatus& operator=(SystemStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemStatus* internal_default_instance() {
    return reinterpret_cast<const SystemStatus*>(
               &_SystemStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemStatus& a, SystemStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemStatus* New() const final {
    return CreateMaybeMessage<SystemStatus>(nullptr);
  }

  SystemStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemStatus& from);
  void MergeFrom(const SystemStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.SystemStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
    return ::descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHmiModulesFieldNumber = 7,
    kComponentsFieldNumber = 8,
    kPassengerMsgFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kSafetyModeTriggerTimeFieldNumber = 5,
    kRequireEmergencyStopFieldNumber = 6,
    kIsRealtimeInSimulationFieldNumber = 9,
  };
  // map<string, .apollo.monitor.ComponentStatus> hmi_modules = 7;
  int hmi_modules_size() const;
  private:
  int _internal_hmi_modules_size() const;
  public:
  void clear_hmi_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
      _internal_hmi_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
      _internal_mutable_hmi_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
      hmi_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
      mutable_hmi_modules();

  // map<string, .apollo.monitor.Component> components = 8;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >&
      _internal_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >*
      _internal_mutable_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >&
      components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >*
      mutable_components();

  // optional string passenger_msg = 4;
  bool has_passenger_msg() const;
  private:
  bool _internal_has_passenger_msg() const;
  public:
  void clear_passenger_msg();
  const std::string& passenger_msg() const;
  void set_passenger_msg(const std::string& value);
  void set_passenger_msg(std::string&& value);
  void set_passenger_msg(const char* value);
  void set_passenger_msg(const char* value, size_t size);
  std::string* mutable_passenger_msg();
  std::string* release_passenger_msg();
  void set_allocated_passenger_msg(std::string* passenger_msg);
  private:
  const std::string& _internal_passenger_msg() const;
  void _internal_set_passenger_msg(const std::string& value);
  std::string* _internal_mutable_passenger_msg();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional double safety_mode_trigger_time = 5;
  bool has_safety_mode_trigger_time() const;
  private:
  bool _internal_has_safety_mode_trigger_time() const;
  public:
  void clear_safety_mode_trigger_time();
  double safety_mode_trigger_time() const;
  void set_safety_mode_trigger_time(double value);
  private:
  double _internal_safety_mode_trigger_time() const;
  void _internal_set_safety_mode_trigger_time(double value);
  public:

  // optional bool require_emergency_stop = 6;
  bool has_require_emergency_stop() const;
  private:
  bool _internal_has_require_emergency_stop() const;
  public:
  void clear_require_emergency_stop();
  bool require_emergency_stop() const;
  void set_require_emergency_stop(bool value);
  private:
  bool _internal_require_emergency_stop() const;
  void _internal_set_require_emergency_stop(bool value);
  public:

  // optional bool is_realtime_in_simulation = 9;
  bool has_is_realtime_in_simulation() const;
  private:
  bool _internal_has_is_realtime_in_simulation() const;
  public:
  void clear_is_realtime_in_simulation();
  bool is_realtime_in_simulation() const;
  void set_is_realtime_in_simulation(bool value);
  private:
  bool _internal_is_realtime_in_simulation() const;
  void _internal_set_is_realtime_in_simulation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.SystemStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SystemStatus_HmiModulesEntry_DoNotUse,
      std::string, ::apollo::monitor::ComponentStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > hmi_modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SystemStatus_ComponentsEntry_DoNotUse,
      std::string, ::apollo::monitor::Component,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > components_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passenger_msg_;
  ::apollo::common::Header* header_;
  double safety_mode_trigger_time_;
  bool require_emergency_stop_;
  bool is_realtime_in_simulation_;
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentStatus

// optional .apollo.monitor.ComponentStatus.Status status = 1 [default = UNKNOWN];
inline bool ComponentStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentStatus::has_status() const {
  return _internal_has_status();
}
inline void ComponentStatus::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::monitor::ComponentStatus_Status ComponentStatus::_internal_status() const {
  return static_cast< ::apollo::monitor::ComponentStatus_Status >(status_);
}
inline ::apollo::monitor::ComponentStatus_Status ComponentStatus::status() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ComponentStatus.status)
  return _internal_status();
}
inline void ComponentStatus::_internal_set_status(::apollo::monitor::ComponentStatus_Status value) {
  assert(::apollo::monitor::ComponentStatus_Status_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void ComponentStatus::set_status(::apollo::monitor::ComponentStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.ComponentStatus.status)
}

// optional string message = 2;
inline bool ComponentStatus::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentStatus::has_message() const {
  return _internal_has_message();
}
inline void ComponentStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentStatus::message() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ComponentStatus.message)
  return _internal_message();
}
inline void ComponentStatus::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.ComponentStatus.message)
}
inline std::string* ComponentStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ComponentStatus.message)
  return _internal_mutable_message();
}
inline const std::string& ComponentStatus::_internal_message() const {
  return message_.GetNoArena();
}
inline void ComponentStatus::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ComponentStatus::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.monitor.ComponentStatus.message)
}
inline void ComponentStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.ComponentStatus.message)
}
inline void ComponentStatus::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.ComponentStatus.message)
}
inline std::string* ComponentStatus::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ComponentStatus::release_message() {
  // @@protoc_insertion_point(field_release:apollo.monitor.ComponentStatus.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ComponentStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.ComponentStatus.message)
}

// -------------------------------------------------------------------

// Component

// optional .apollo.monitor.ComponentStatus summary = 1;
inline bool Component::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool Component::has_summary() const {
  return _internal_has_summary();
}
inline void Component::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::monitor::ComponentStatus& Component::_internal_summary() const {
  const ::apollo::monitor::ComponentStatus* p = summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::monitor::ComponentStatus*>(
      &::apollo::monitor::_ComponentStatus_default_instance_);
}
inline const ::apollo::monitor::ComponentStatus& Component::summary() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.Component.summary)
  return _internal_summary();
}
inline ::apollo::monitor::ComponentStatus* Component::release_summary() {
  // @@protoc_insertion_point(field_release:apollo.monitor.Component.summary)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::monitor::ComponentStatus* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::apollo::monitor::ComponentStatus* Component::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::ComponentStatus>(GetArenaNoVirtual());
    summary_ = p;
  }
  return summary_;
}
inline ::apollo::monitor::ComponentStatus* Component::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.Component.summary)
  return _internal_mutable_summary();
}
inline void Component::set_allocated_summary(::apollo::monitor::ComponentStatus* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.Component.summary)
}

// optional .apollo.monitor.ComponentStatus process_status = 2;
inline bool Component::_internal_has_process_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || process_status_ != nullptr);
  return value;
}
inline bool Component::has_process_status() const {
  return _internal_has_process_status();
}
inline void Component::clear_process_status() {
  if (process_status_ != nullptr) process_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::monitor::ComponentStatus& Component::_internal_process_status() const {
  const ::apollo::monitor::ComponentStatus* p = process_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::monitor::ComponentStatus*>(
      &::apollo::monitor::_ComponentStatus_default_instance_);
}
inline const ::apollo::monitor::ComponentStatus& Component::process_status() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.Component.process_status)
  return _internal_process_status();
}
inline ::apollo::monitor::ComponentStatus* Component::release_process_status() {
  // @@protoc_insertion_point(field_release:apollo.monitor.Component.process_status)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::monitor::ComponentStatus* temp = process_status_;
  process_status_ = nullptr;
  return temp;
}
inline ::apollo::monitor::ComponentStatus* Component::_internal_mutable_process_status() {
  _has_bits_[0] |= 0x00000002u;
  if (process_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::ComponentStatus>(GetArenaNoVirtual());
    process_status_ = p;
  }
  return process_status_;
}
inline ::apollo::monitor::ComponentStatus* Component::mutable_process_status() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.Component.process_status)
  return _internal_mutable_process_status();
}
inline void Component::set_allocated_process_status(::apollo::monitor::ComponentStatus* process_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_status_;
  }
  if (process_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_status_ = process_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.Component.process_status)
}

// optional .apollo.monitor.ComponentStatus channel_status = 3;
inline bool Component::_internal_has_channel_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || channel_status_ != nullptr);
  return value;
}
inline bool Component::has_channel_status() const {
  return _internal_has_channel_status();
}
inline void Component::clear_channel_status() {
  if (channel_status_ != nullptr) channel_status_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::monitor::ComponentStatus& Component::_internal_channel_status() const {
  const ::apollo::monitor::ComponentStatus* p = channel_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::monitor::ComponentStatus*>(
      &::apollo::monitor::_ComponentStatus_default_instance_);
}
inline const ::apollo::monitor::ComponentStatus& Component::channel_status() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.Component.channel_status)
  return _internal_channel_status();
}
inline ::apollo::monitor::ComponentStatus* Component::release_channel_status() {
  // @@protoc_insertion_point(field_release:apollo.monitor.Component.channel_status)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::monitor::ComponentStatus* temp = channel_status_;
  channel_status_ = nullptr;
  return temp;
}
inline ::apollo::monitor::ComponentStatus* Component::_internal_mutable_channel_status() {
  _has_bits_[0] |= 0x00000004u;
  if (channel_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::ComponentStatus>(GetArenaNoVirtual());
    channel_status_ = p;
  }
  return channel_status_;
}
inline ::apollo::monitor::ComponentStatus* Component::mutable_channel_status() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.Component.channel_status)
  return _internal_mutable_channel_status();
}
inline void Component::set_allocated_channel_status(::apollo::monitor::ComponentStatus* channel_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_status_;
  }
  if (channel_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  channel_status_ = channel_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.Component.channel_status)
}

// optional .apollo.monitor.ComponentStatus resource_status = 4;
inline bool Component::_internal_has_resource_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || resource_status_ != nullptr);
  return value;
}
inline bool Component::has_resource_status() const {
  return _internal_has_resource_status();
}
inline void Component::clear_resource_status() {
  if (resource_status_ != nullptr) resource_status_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::monitor::ComponentStatus& Component::_internal_resource_status() const {
  const ::apollo::monitor::ComponentStatus* p = resource_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::monitor::ComponentStatus*>(
      &::apollo::monitor::_ComponentStatus_default_instance_);
}
inline const ::apollo::monitor::ComponentStatus& Component::resource_status() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.Component.resource_status)
  return _internal_resource_status();
}
inline ::apollo::monitor::ComponentStatus* Component::release_resource_status() {
  // @@protoc_insertion_point(field_release:apollo.monitor.Component.resource_status)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::monitor::ComponentStatus* temp = resource_status_;
  resource_status_ = nullptr;
  return temp;
}
inline ::apollo::monitor::ComponentStatus* Component::_internal_mutable_resource_status() {
  _has_bits_[0] |= 0x00000008u;
  if (resource_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::ComponentStatus>(GetArenaNoVirtual());
    resource_status_ = p;
  }
  return resource_status_;
}
inline ::apollo::monitor::ComponentStatus* Component::mutable_resource_status() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.Component.resource_status)
  return _internal_mutable_resource_status();
}
inline void Component::set_allocated_resource_status(::apollo::monitor::ComponentStatus* resource_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_status_;
  }
  if (resource_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  resource_status_ = resource_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.Component.resource_status)
}

// optional .apollo.monitor.ComponentStatus other_status = 5;
inline bool Component::_internal_has_other_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || other_status_ != nullptr);
  return value;
}
inline bool Component::has_other_status() const {
  return _internal_has_other_status();
}
inline void Component::clear_other_status() {
  if (other_status_ != nullptr) other_status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::monitor::ComponentStatus& Component::_internal_other_status() const {
  const ::apollo::monitor::ComponentStatus* p = other_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::monitor::ComponentStatus*>(
      &::apollo::monitor::_ComponentStatus_default_instance_);
}
inline const ::apollo::monitor::ComponentStatus& Component::other_status() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.Component.other_status)
  return _internal_other_status();
}
inline ::apollo::monitor::ComponentStatus* Component::release_other_status() {
  // @@protoc_insertion_point(field_release:apollo.monitor.Component.other_status)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::monitor::ComponentStatus* temp = other_status_;
  other_status_ = nullptr;
  return temp;
}
inline ::apollo::monitor::ComponentStatus* Component::_internal_mutable_other_status() {
  _has_bits_[0] |= 0x00000010u;
  if (other_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::ComponentStatus>(GetArenaNoVirtual());
    other_status_ = p;
  }
  return other_status_;
}
inline ::apollo::monitor::ComponentStatus* Component::mutable_other_status() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.Component.other_status)
  return _internal_mutable_other_status();
}
inline void Component::set_allocated_other_status(::apollo::monitor::ComponentStatus* other_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete other_status_;
  }
  if (other_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  other_status_ = other_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.Component.other_status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemStatus

// optional .apollo.common.Header header = 1;
inline bool SystemStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool SystemStatus::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& SystemStatus::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& SystemStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.SystemStatus.header)
  return _internal_header();
}
inline ::apollo::common::Header* SystemStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.monitor.SystemStatus.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* SystemStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* SystemStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.SystemStatus.header)
  return _internal_mutable_header();
}
inline void SystemStatus::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.SystemStatus.header)
}

// map<string, .apollo.monitor.ComponentStatus> hmi_modules = 7;
inline int SystemStatus::_internal_hmi_modules_size() const {
  return hmi_modules_.size();
}
inline int SystemStatus::hmi_modules_size() const {
  return _internal_hmi_modules_size();
}
inline void SystemStatus::clear_hmi_modules() {
  hmi_modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
SystemStatus::_internal_hmi_modules() const {
  return hmi_modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
SystemStatus::hmi_modules() const {
  // @@protoc_insertion_point(field_map:apollo.monitor.SystemStatus.hmi_modules)
  return _internal_hmi_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
SystemStatus::_internal_mutable_hmi_modules() {
  return hmi_modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
SystemStatus::mutable_hmi_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.monitor.SystemStatus.hmi_modules)
  return _internal_mutable_hmi_modules();
}

// map<string, .apollo.monitor.Component> components = 8;
inline int SystemStatus::_internal_components_size() const {
  return components_.size();
}
inline int SystemStatus::components_size() const {
  return _internal_components_size();
}
inline void SystemStatus::clear_components() {
  components_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >&
SystemStatus::_internal_components() const {
  return components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >&
SystemStatus::components() const {
  // @@protoc_insertion_point(field_map:apollo.monitor.SystemStatus.components)
  return _internal_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >*
SystemStatus::_internal_mutable_components() {
  return components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::Component >*
SystemStatus::mutable_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.monitor.SystemStatus.components)
  return _internal_mutable_components();
}

// optional string passenger_msg = 4;
inline bool SystemStatus::_internal_has_passenger_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SystemStatus::has_passenger_msg() const {
  return _internal_has_passenger_msg();
}
inline void SystemStatus::clear_passenger_msg() {
  passenger_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemStatus::passenger_msg() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.SystemStatus.passenger_msg)
  return _internal_passenger_msg();
}
inline void SystemStatus::set_passenger_msg(const std::string& value) {
  _internal_set_passenger_msg(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.SystemStatus.passenger_msg)
}
inline std::string* SystemStatus::mutable_passenger_msg() {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.SystemStatus.passenger_msg)
  return _internal_mutable_passenger_msg();
}
inline const std::string& SystemStatus::_internal_passenger_msg() const {
  return passenger_msg_.GetNoArena();
}
inline void SystemStatus::_internal_set_passenger_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  passenger_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SystemStatus::set_passenger_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  passenger_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.monitor.SystemStatus.passenger_msg)
}
inline void SystemStatus::set_passenger_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  passenger_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.monitor.SystemStatus.passenger_msg)
}
inline void SystemStatus::set_passenger_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  passenger_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.SystemStatus.passenger_msg)
}
inline std::string* SystemStatus::_internal_mutable_passenger_msg() {
  _has_bits_[0] |= 0x00000001u;
  return passenger_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemStatus::release_passenger_msg() {
  // @@protoc_insertion_point(field_release:apollo.monitor.SystemStatus.passenger_msg)
  if (!_internal_has_passenger_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return passenger_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemStatus::set_allocated_passenger_msg(std::string* passenger_msg) {
  if (passenger_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  passenger_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passenger_msg);
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.SystemStatus.passenger_msg)
}

// optional double safety_mode_trigger_time = 5;
inline bool SystemStatus::_internal_has_safety_mode_trigger_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SystemStatus::has_safety_mode_trigger_time() const {
  return _internal_has_safety_mode_trigger_time();
}
inline void SystemStatus::clear_safety_mode_trigger_time() {
  safety_mode_trigger_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SystemStatus::_internal_safety_mode_trigger_time() const {
  return safety_mode_trigger_time_;
}
inline double SystemStatus::safety_mode_trigger_time() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.SystemStatus.safety_mode_trigger_time)
  return _internal_safety_mode_trigger_time();
}
inline void SystemStatus::_internal_set_safety_mode_trigger_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  safety_mode_trigger_time_ = value;
}
inline void SystemStatus::set_safety_mode_trigger_time(double value) {
  _internal_set_safety_mode_trigger_time(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.SystemStatus.safety_mode_trigger_time)
}

// optional bool require_emergency_stop = 6;
inline bool SystemStatus::_internal_has_require_emergency_stop() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SystemStatus::has_require_emergency_stop() const {
  return _internal_has_require_emergency_stop();
}
inline void SystemStatus::clear_require_emergency_stop() {
  require_emergency_stop_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SystemStatus::_internal_require_emergency_stop() const {
  return require_emergency_stop_;
}
inline bool SystemStatus::require_emergency_stop() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.SystemStatus.require_emergency_stop)
  return _internal_require_emergency_stop();
}
inline void SystemStatus::_internal_set_require_emergency_stop(bool value) {
  _has_bits_[0] |= 0x00000008u;
  require_emergency_stop_ = value;
}
inline void SystemStatus::set_require_emergency_stop(bool value) {
  _internal_set_require_emergency_stop(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.SystemStatus.require_emergency_stop)
}

// optional bool is_realtime_in_simulation = 9;
inline bool SystemStatus::_internal_has_is_realtime_in_simulation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SystemStatus::has_is_realtime_in_simulation() const {
  return _internal_has_is_realtime_in_simulation();
}
inline void SystemStatus::clear_is_realtime_in_simulation() {
  is_realtime_in_simulation_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SystemStatus::_internal_is_realtime_in_simulation() const {
  return is_realtime_in_simulation_;
}
inline bool SystemStatus::is_realtime_in_simulation() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.SystemStatus.is_realtime_in_simulation)
  return _internal_is_realtime_in_simulation();
}
inline void SystemStatus::_internal_set_is_realtime_in_simulation(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_realtime_in_simulation_ = value;
}
inline void SystemStatus::set_is_realtime_in_simulation(bool value) {
  _internal_set_is_realtime_in_simulation(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.SystemStatus.is_realtime_in_simulation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::monitor::ComponentStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::monitor::ComponentStatus_Status>() {
  return ::apollo::monitor::ComponentStatus_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto
