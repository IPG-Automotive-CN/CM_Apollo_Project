// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/vehicle_state/proto/vehicle_state.proto

#include "modules/common/vehicle_state/proto/vehicle_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2fpose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Pose_modules_2flocalization_2fproto_2fpose_2eproto;
namespace apollo {
namespace common {
class VehicleStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleState> _instance;
} _VehicleState_default_instance_;
}  // namespace common
}  // namespace apollo
static void InitDefaultsscc_info_VehicleState_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_VehicleState_default_instance_;
    new (ptr) ::apollo::common::VehicleState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::VehicleState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleState_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleState_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto}, {
      &scc_info_Pose_modules_2flocalization_2fproto_2fpose_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, roll_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, pitch_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, yaw_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::VehicleState, pose_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::apollo::common::VehicleState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::common::_VehicleState_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/common/vehicle_state/proto/veh"
  "icle_state.proto\022\rapollo.common\032\"modules"
  "/canbus/proto/chassis.proto\032%modules/loc"
  "alization/proto/pose.proto\"\226\003\n\014VehicleSt"
  "ate\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001"
  "(\001:\0010\022\024\n\ttimestamp\030\004 \001(\001:\0010\022\017\n\004roll\030\005 \001("
  "\001:\0010\022\020\n\005pitch\030\006 \001(\001:\0010\022\016\n\003yaw\030\007 \001(\001:\0010\022\022"
  "\n\007heading\030\010 \001(\001:\0010\022\020\n\005kappa\030\t \001(\001:\0010\022\032\n\017"
  "linear_velocity\030\n \001(\001:\0010\022\033\n\020angular_velo"
  "city\030\013 \001(\001:\0010\022\036\n\023linear_acceleration\030\014 \001"
  "(\001:\0010\0221\n\004gear\030\r \001(\0162#.apollo.canbus.Chas"
  "sis.GearPosition\0228\n\014driving_mode\030\016 \001(\0162\""
  ".apollo.canbus.Chassis.DrivingMode\022\'\n\004po"
  "se\030\017 \001(\0132\031.apollo.localization.Pose"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2fpose_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_sccs[1] = {
  &scc_info_VehicleState_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_once;
static bool descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto = {
  &descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_initialized, descriptor_table_protodef_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto, "modules/common/vehicle_state/proto/vehicle_state.proto", 555,
  &descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_once, descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_sccs, descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto::offsets,
  file_level_metadata_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto, 1, file_level_enum_descriptors_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto, file_level_service_descriptors_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto), true);
namespace apollo {
namespace common {

// ===================================================================

void VehicleState::InitAsDefaultInstance() {
  ::apollo::common::_VehicleState_default_instance_._instance.get_mutable()->pose_ = const_cast< ::apollo::localization::Pose*>(
      ::apollo::localization::Pose::internal_default_instance());
}
class VehicleState::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleState>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_linear_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::localization::Pose& pose(const VehicleState* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::localization::Pose&
VehicleState::_Internal::pose(const VehicleState* msg) {
  return *msg->pose_;
}
void VehicleState::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
VehicleState::VehicleState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::apollo::localization::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&driving_mode_) -
    reinterpret_cast<char*>(&x_)) + sizeof(driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleState)
}

void VehicleState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleState_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driving_mode_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(driving_mode_));
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void VehicleState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleState& VehicleState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleState_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto.base);
  return *internal_default_instance();
}


void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pose_ != nullptr);
    pose_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driving_mode_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(driving_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roll = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pitch = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double yaw = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_kappa(&has_bits);
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double linear_velocity = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_linear_velocity(&has_bits);
          linear_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double angular_velocity = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_angular_velocity(&has_bits);
          angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double linear_acceleration = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_linear_acceleration(&has_bits);
          linear_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.localization.Pose pose = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double timestamp = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_timestamp(), target);
  }

  // optional double roll = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_roll(), target);
  }

  // optional double pitch = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pitch(), target);
  }

  // optional double yaw = 7 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_yaw(), target);
  }

  // optional double heading = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_heading(), target);
  }

  // optional double kappa = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_kappa(), target);
  }

  // optional double linear_velocity = 10 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_linear_velocity(), target);
  }

  // optional double angular_velocity = 11 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_angular_velocity(), target);
  }

  // optional double linear_acceleration = 12 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_linear_acceleration(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_gear(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_driving_mode(), target);
  }

  // optional .apollo.localization.Pose pose = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.localization.Pose pose = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional double x = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double roll = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double pitch = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double yaw = 7 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double heading = 8 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 9 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double linear_velocity = 10 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double angular_velocity = 11 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double linear_acceleration = 12 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear());
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pose()->::apollo::localization::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000040u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000080u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000200u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000400u) {
      linear_velocity_ = from.linear_velocity_;
    }
    if (cached_has_bits & 0x00000800u) {
      angular_velocity_ = from.angular_velocity_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_acceleration_ = from.linear_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00004000u) {
      driving_mode_ = from.driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pose_, other->pose_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(timestamp_, other->timestamp_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(heading_, other->heading_);
  swap(kappa_, other->kappa_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(gear_, other->gear_);
  swap(driving_mode_, other->driving_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::VehicleState* Arena::CreateMaybeMessage< ::apollo::common::VehicleState >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::VehicleState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
