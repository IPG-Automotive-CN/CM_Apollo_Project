// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/vehicle_state/proto/vehicle_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/localization/proto/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto;
namespace apollo {
namespace common {
class VehicleState;
class VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::VehicleState* Arena::CreateMaybeMessage<::apollo::common::VehicleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {

// ===================================================================

class VehicleState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleState) */ {
 public:
  VehicleState();
  virtual ~VehicleState();

  VehicleState(const VehicleState& from);
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleState* New() const final {
    return CreateMaybeMessage<VehicleState>(nullptr);
  }

  VehicleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleState& from);
  void MergeFrom(const VehicleState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.VehicleState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto);
    return ::descriptor_table_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 15,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kRollFieldNumber = 5,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kHeadingFieldNumber = 8,
    kKappaFieldNumber = 9,
    kLinearVelocityFieldNumber = 10,
    kAngularVelocityFieldNumber = 11,
    kLinearAccelerationFieldNumber = 12,
    kGearFieldNumber = 13,
    kDrivingModeFieldNumber = 14,
  };
  // optional .apollo.localization.Pose pose = 15;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::apollo::localization::Pose& pose() const;
  ::apollo::localization::Pose* release_pose();
  ::apollo::localization::Pose* mutable_pose();
  void set_allocated_pose(::apollo::localization::Pose* pose);
  private:
  const ::apollo::localization::Pose& _internal_pose() const;
  ::apollo::localization::Pose* _internal_mutable_pose();
  public:

  // optional double x = 1 [default = 0];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = 0];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3 [default = 0];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double timestamp = 4 [default = 0];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double roll = 5 [default = 0];
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // optional double pitch = 6 [default = 0];
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // optional double yaw = 7 [default = 0];
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // optional double heading = 8 [default = 0];
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double kappa = 9 [default = 0];
  bool has_kappa() const;
  private:
  bool _internal_has_kappa() const;
  public:
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);
  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);
  public:

  // optional double linear_velocity = 10 [default = 0];
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  double linear_velocity() const;
  void set_linear_velocity(double value);
  private:
  double _internal_linear_velocity() const;
  void _internal_set_linear_velocity(double value);
  public:

  // optional double angular_velocity = 11 [default = 0];
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  double angular_velocity() const;
  void set_angular_velocity(double value);
  private:
  double _internal_angular_velocity() const;
  void _internal_set_angular_velocity(double value);
  public:

  // optional double linear_acceleration = 12 [default = 0];
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  double linear_acceleration() const;
  void set_linear_acceleration(double value);
  private:
  double _internal_linear_acceleration() const;
  void _internal_set_linear_acceleration(double value);
  public:

  // optional .apollo.canbus.Chassis.GearPosition gear = 13;
  bool has_gear() const;
  private:
  bool _internal_has_gear() const;
  public:
  void clear_gear();
  ::apollo::canbus::Chassis_GearPosition gear() const;
  void set_gear(::apollo::canbus::Chassis_GearPosition value);
  private:
  ::apollo::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::apollo::canbus::Chassis_GearPosition value);
  public:

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
  bool has_driving_mode() const;
  private:
  bool _internal_has_driving_mode() const;
  public:
  void clear_driving_mode();
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  private:
  ::apollo::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::localization::Pose* pose_;
  double x_;
  double y_;
  double z_;
  double timestamp_;
  double roll_;
  double pitch_;
  double yaw_;
  double heading_;
  double kappa_;
  double linear_velocity_;
  double angular_velocity_;
  double linear_acceleration_;
  int gear_;
  int driving_mode_;
  friend struct ::TableStruct_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleState

// optional double x = 1 [default = 0];
inline bool VehicleState::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleState::has_x() const {
  return _internal_has_x();
}
inline void VehicleState::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VehicleState::_internal_x() const {
  return x_;
}
inline double VehicleState::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.x)
  return _internal_x();
}
inline void VehicleState::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void VehicleState::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.x)
}

// optional double y = 2 [default = 0];
inline bool VehicleState::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleState::has_y() const {
  return _internal_has_y();
}
inline void VehicleState::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double VehicleState::_internal_y() const {
  return y_;
}
inline double VehicleState::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.y)
  return _internal_y();
}
inline void VehicleState::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void VehicleState::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.y)
}

// optional double z = 3 [default = 0];
inline bool VehicleState::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleState::has_z() const {
  return _internal_has_z();
}
inline void VehicleState::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double VehicleState::_internal_z() const {
  return z_;
}
inline double VehicleState::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.z)
  return _internal_z();
}
inline void VehicleState::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
}
inline void VehicleState::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.z)
}

// optional double timestamp = 4 [default = 0];
inline bool VehicleState::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleState::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void VehicleState::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double VehicleState::_internal_timestamp() const {
  return timestamp_;
}
inline double VehicleState::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.timestamp)
  return _internal_timestamp();
}
inline void VehicleState::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void VehicleState::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.timestamp)
}

// optional double roll = 5 [default = 0];
inline bool VehicleState::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehicleState::has_roll() const {
  return _internal_has_roll();
}
inline void VehicleState::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double VehicleState::_internal_roll() const {
  return roll_;
}
inline double VehicleState::roll() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.roll)
  return _internal_roll();
}
inline void VehicleState::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000020u;
  roll_ = value;
}
inline void VehicleState::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.roll)
}

// optional double pitch = 6 [default = 0];
inline bool VehicleState::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehicleState::has_pitch() const {
  return _internal_has_pitch();
}
inline void VehicleState::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double VehicleState::_internal_pitch() const {
  return pitch_;
}
inline double VehicleState::pitch() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.pitch)
  return _internal_pitch();
}
inline void VehicleState::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000040u;
  pitch_ = value;
}
inline void VehicleState::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.pitch)
}

// optional double yaw = 7 [default = 0];
inline bool VehicleState::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehicleState::has_yaw() const {
  return _internal_has_yaw();
}
inline void VehicleState::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double VehicleState::_internal_yaw() const {
  return yaw_;
}
inline double VehicleState::yaw() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.yaw)
  return _internal_yaw();
}
inline void VehicleState::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000080u;
  yaw_ = value;
}
inline void VehicleState::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.yaw)
}

// optional double heading = 8 [default = 0];
inline bool VehicleState::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehicleState::has_heading() const {
  return _internal_has_heading();
}
inline void VehicleState::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double VehicleState::_internal_heading() const {
  return heading_;
}
inline double VehicleState::heading() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.heading)
  return _internal_heading();
}
inline void VehicleState::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000100u;
  heading_ = value;
}
inline void VehicleState::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.heading)
}

// optional double kappa = 9 [default = 0];
inline bool VehicleState::_internal_has_kappa() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehicleState::has_kappa() const {
  return _internal_has_kappa();
}
inline void VehicleState::clear_kappa() {
  kappa_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double VehicleState::_internal_kappa() const {
  return kappa_;
}
inline double VehicleState::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.kappa)
  return _internal_kappa();
}
inline void VehicleState::_internal_set_kappa(double value) {
  _has_bits_[0] |= 0x00000200u;
  kappa_ = value;
}
inline void VehicleState::set_kappa(double value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.kappa)
}

// optional double linear_velocity = 10 [default = 0];
inline bool VehicleState::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehicleState::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline void VehicleState::clear_linear_velocity() {
  linear_velocity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double VehicleState::_internal_linear_velocity() const {
  return linear_velocity_;
}
inline double VehicleState::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.linear_velocity)
  return _internal_linear_velocity();
}
inline void VehicleState::_internal_set_linear_velocity(double value) {
  _has_bits_[0] |= 0x00000400u;
  linear_velocity_ = value;
}
inline void VehicleState::set_linear_velocity(double value) {
  _internal_set_linear_velocity(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.linear_velocity)
}

// optional double angular_velocity = 11 [default = 0];
inline bool VehicleState::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehicleState::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void VehicleState::clear_angular_velocity() {
  angular_velocity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double VehicleState::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline double VehicleState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.angular_velocity)
  return _internal_angular_velocity();
}
inline void VehicleState::_internal_set_angular_velocity(double value) {
  _has_bits_[0] |= 0x00000800u;
  angular_velocity_ = value;
}
inline void VehicleState::set_angular_velocity(double value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.angular_velocity)
}

// optional double linear_acceleration = 12 [default = 0];
inline bool VehicleState::_internal_has_linear_acceleration() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehicleState::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline void VehicleState::clear_linear_acceleration() {
  linear_acceleration_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double VehicleState::_internal_linear_acceleration() const {
  return linear_acceleration_;
}
inline double VehicleState::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void VehicleState::_internal_set_linear_acceleration(double value) {
  _has_bits_[0] |= 0x00001000u;
  linear_acceleration_ = value;
}
inline void VehicleState::set_linear_acceleration(double value) {
  _internal_set_linear_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.linear_acceleration)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 13;
inline bool VehicleState::_internal_has_gear() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehicleState::has_gear() const {
  return _internal_has_gear();
}
inline void VehicleState::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::Chassis_GearPosition VehicleState::_internal_gear() const {
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
inline ::apollo::canbus::Chassis_GearPosition VehicleState::gear() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.gear)
  return _internal_gear();
}
inline void VehicleState::_internal_set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  gear_ = value;
}
inline void VehicleState::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.gear)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 14;
inline bool VehicleState::_internal_has_driving_mode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VehicleState::has_driving_mode() const {
  return _internal_has_driving_mode();
}
inline void VehicleState::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::apollo::canbus::Chassis_DrivingMode VehicleState::_internal_driving_mode() const {
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline ::apollo::canbus::Chassis_DrivingMode VehicleState::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.driving_mode)
  return _internal_driving_mode();
}
inline void VehicleState::_internal_set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  driving_mode_ = value;
}
inline void VehicleState::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleState.driving_mode)
}

// optional .apollo.localization.Pose pose = 15;
inline bool VehicleState::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool VehicleState::has_pose() const {
  return _internal_has_pose();
}
inline const ::apollo::localization::Pose& VehicleState::_internal_pose() const {
  const ::apollo::localization::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::localization::Pose*>(
      &::apollo::localization::_Pose_default_instance_);
}
inline const ::apollo::localization::Pose& VehicleState::pose() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleState.pose)
  return _internal_pose();
}
inline ::apollo::localization::Pose* VehicleState::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleState.pose)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::localization::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::apollo::localization::Pose* VehicleState::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::localization::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::apollo::localization::Pose* VehicleState::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleState.pose)
  return _internal_mutable_pose();
}
inline void VehicleState::set_allocated_pose(::apollo::localization::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleState.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fvehicle_5fstate_2fproto_2fvehicle_5fstate_2eproto
