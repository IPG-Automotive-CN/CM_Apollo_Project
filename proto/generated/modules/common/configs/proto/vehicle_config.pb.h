// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/configs/proto/vehicle_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
namespace apollo {
namespace common {
class Extrinsics;
class ExtrinsicsDefaultTypeInternal;
extern ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class VehicleConfig;
class VehicleConfigDefaultTypeInternal;
extern VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
class VehicleID;
class VehicleIDDefaultTypeInternal;
extern VehicleIDDefaultTypeInternal _VehicleID_default_instance_;
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::Extrinsics* Arena::CreateMaybeMessage<::apollo::common::Extrinsics>(Arena*);
template<> ::apollo::common::Transform* Arena::CreateMaybeMessage<::apollo::common::Transform>(Arena*);
template<> ::apollo::common::VehicleConfig* Arena::CreateMaybeMessage<::apollo::common::VehicleConfig>(Arena*);
template<> ::apollo::common::VehicleID* Arena::CreateMaybeMessage<::apollo::common::VehicleID>(Arena*);
template<> ::apollo::common::VehicleParam* Arena::CreateMaybeMessage<::apollo::common::VehicleParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {

enum VehicleBrand : int {
  LINCOLN_MKZ = 0,
  GEM = 1,
  LEXUS = 2,
  TRANSIT = 3,
  GE3 = 4,
  WEY = 5,
  ZHONGYUN = 6,
  CH = 7
};
bool VehicleBrand_IsValid(int value);
constexpr VehicleBrand VehicleBrand_MIN = LINCOLN_MKZ;
constexpr VehicleBrand VehicleBrand_MAX = CH;
constexpr int VehicleBrand_ARRAYSIZE = VehicleBrand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleBrand_descriptor();
template<typename T>
inline const std::string& VehicleBrand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleBrand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleBrand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleBrand_descriptor(), enum_t_value);
}
inline bool VehicleBrand_Parse(
    const std::string& name, VehicleBrand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleBrand>(
    VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFrameFieldNumber = 1,
    kTargetFrameFieldNumber = 2,
    kTranslationFieldNumber = 3,
    kRotationFieldNumber = 4,
  };
  // optional bytes source_frame = 1;
  bool has_source_frame() const;
  private:
  bool _internal_has_source_frame() const;
  public:
  void clear_source_frame();
  const std::string& source_frame() const;
  void set_source_frame(const std::string& value);
  void set_source_frame(std::string&& value);
  void set_source_frame(const char* value);
  void set_source_frame(const void* value, size_t size);
  std::string* mutable_source_frame();
  std::string* release_source_frame();
  void set_allocated_source_frame(std::string* source_frame);
  private:
  const std::string& _internal_source_frame() const;
  void _internal_set_source_frame(const std::string& value);
  std::string* _internal_mutable_source_frame();
  public:

  // optional bytes target_frame = 2;
  bool has_target_frame() const;
  private:
  bool _internal_has_target_frame() const;
  public:
  void clear_target_frame();
  const std::string& target_frame() const;
  void set_target_frame(const std::string& value);
  void set_target_frame(std::string&& value);
  void set_target_frame(const char* value);
  void set_target_frame(const void* value, size_t size);
  std::string* mutable_target_frame();
  std::string* release_target_frame();
  void set_allocated_target_frame(std::string* target_frame);
  private:
  const std::string& _internal_target_frame() const;
  void _internal_set_target_frame(const std::string& value);
  std::string* _internal_mutable_target_frame();
  public:

  // optional .apollo.common.Point3D translation = 3;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::apollo::common::Point3D& translation() const;
  ::apollo::common::Point3D* release_translation();
  ::apollo::common::Point3D* mutable_translation();
  void set_allocated_translation(::apollo::common::Point3D* translation);
  private:
  const ::apollo::common::Point3D& _internal_translation() const;
  ::apollo::common::Point3D* _internal_mutable_translation();
  public:

  // optional .apollo.common.Quaternion rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::apollo::common::Quaternion& rotation() const;
  ::apollo::common::Quaternion* release_rotation();
  ::apollo::common::Quaternion* mutable_rotation();
  void set_allocated_rotation(::apollo::common::Quaternion* rotation);
  private:
  const ::apollo::common::Quaternion& _internal_rotation() const;
  ::apollo::common::Quaternion* _internal_mutable_rotation();
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.Transform)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_frame_;
  ::apollo::common::Point3D* translation_;
  ::apollo::common::Quaternion* rotation_;
  friend struct ::TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Extrinsics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.Extrinsics) */ {
 public:
  Extrinsics();
  virtual ~Extrinsics();

  Extrinsics(const Extrinsics& from);
  Extrinsics(Extrinsics&& from) noexcept
    : Extrinsics() {
    *this = ::std::move(from);
  }

  inline Extrinsics& operator=(const Extrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extrinsics& operator=(Extrinsics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extrinsics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extrinsics* internal_default_instance() {
    return reinterpret_cast<const Extrinsics*>(
               &_Extrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Extrinsics& a, Extrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(Extrinsics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extrinsics* New() const final {
    return CreateMaybeMessage<Extrinsics>(nullptr);
  }

  Extrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extrinsics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extrinsics& from);
  void MergeFrom(const Extrinsics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extrinsics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.Extrinsics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTansformsFieldNumber = 1,
  };
  // repeated .apollo.common.Transform tansforms = 1;
  int tansforms_size() const;
  private:
  int _internal_tansforms_size() const;
  public:
  void clear_tansforms();
  ::apollo::common::Transform* mutable_tansforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Transform >*
      mutable_tansforms();
  private:
  const ::apollo::common::Transform& _internal_tansforms(int index) const;
  ::apollo::common::Transform* _internal_add_tansforms();
  public:
  const ::apollo::common::Transform& tansforms(int index) const;
  ::apollo::common::Transform* add_tansforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Transform >&
      tansforms() const;

  // @@protoc_insertion_point(class_scope:apollo.common.Extrinsics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Transform > tansforms_;
  friend struct ::TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleID) */ {
 public:
  VehicleID();
  virtual ~VehicleID();

  VehicleID(const VehicleID& from);
  VehicleID(VehicleID&& from) noexcept
    : VehicleID() {
    *this = ::std::move(from);
  }

  inline VehicleID& operator=(const VehicleID& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleID& operator=(VehicleID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleID* internal_default_instance() {
    return reinterpret_cast<const VehicleID*>(
               &_VehicleID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VehicleID& a, VehicleID& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleID* New() const final {
    return CreateMaybeMessage<VehicleID>(nullptr);
  }

  VehicleID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleID& from);
  void MergeFrom(const VehicleID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.VehicleID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinFieldNumber = 1,
    kPlateFieldNumber = 2,
    kOtherUniqueIdFieldNumber = 3,
  };
  // optional string vin = 1;
  bool has_vin() const;
  private:
  bool _internal_has_vin() const;
  public:
  void clear_vin();
  const std::string& vin() const;
  void set_vin(const std::string& value);
  void set_vin(std::string&& value);
  void set_vin(const char* value);
  void set_vin(const char* value, size_t size);
  std::string* mutable_vin();
  std::string* release_vin();
  void set_allocated_vin(std::string* vin);
  private:
  const std::string& _internal_vin() const;
  void _internal_set_vin(const std::string& value);
  std::string* _internal_mutable_vin();
  public:

  // optional string plate = 2;
  bool has_plate() const;
  private:
  bool _internal_has_plate() const;
  public:
  void clear_plate();
  const std::string& plate() const;
  void set_plate(const std::string& value);
  void set_plate(std::string&& value);
  void set_plate(const char* value);
  void set_plate(const char* value, size_t size);
  std::string* mutable_plate();
  std::string* release_plate();
  void set_allocated_plate(std::string* plate);
  private:
  const std::string& _internal_plate() const;
  void _internal_set_plate(const std::string& value);
  std::string* _internal_mutable_plate();
  public:

  // optional string other_unique_id = 3;
  bool has_other_unique_id() const;
  private:
  bool _internal_has_other_unique_id() const;
  public:
  void clear_other_unique_id();
  const std::string& other_unique_id() const;
  void set_other_unique_id(const std::string& value);
  void set_other_unique_id(std::string&& value);
  void set_other_unique_id(const char* value);
  void set_other_unique_id(const char* value, size_t size);
  std::string* mutable_other_unique_id();
  std::string* release_other_unique_id();
  void set_allocated_other_unique_id(std::string* other_unique_id);
  private:
  const std::string& _internal_other_unique_id() const;
  void _internal_set_other_unique_id(const std::string& value);
  std::string* _internal_mutable_other_unique_id();
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_unique_id_;
  friend struct ::TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(nullptr);
  }

  VehicleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.VehicleParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 2,
    kBrandFieldNumber = 1,
    kMaxAbsSpeedWhenStoppedFieldNumber = 19,
    kFrontEdgeToCenterFieldNumber = 3,
    kBackEdgeToCenterFieldNumber = 4,
    kLeftEdgeToCenterFieldNumber = 5,
    kRightEdgeToCenterFieldNumber = 6,
    kLengthFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
    kMinTurnRadiusFieldNumber = 10,
    kMaxAccelerationFieldNumber = 11,
    kMaxDecelerationFieldNumber = 12,
    kMaxSteerAngleFieldNumber = 13,
    kMaxSteerAngleRateFieldNumber = 14,
    kMinSteerAngleRateFieldNumber = 15,
    kSteerRatioFieldNumber = 16,
    kWheelBaseFieldNumber = 17,
    kWheelRollingRadiusFieldNumber = 18,
    kBrakeDeadzoneFieldNumber = 20,
    kThrottleDeadzoneFieldNumber = 21,
  };
  // optional .apollo.common.VehicleID vehicle_id = 2;
  bool has_vehicle_id() const;
  private:
  bool _internal_has_vehicle_id() const;
  public:
  void clear_vehicle_id();
  const ::apollo::common::VehicleID& vehicle_id() const;
  ::apollo::common::VehicleID* release_vehicle_id();
  ::apollo::common::VehicleID* mutable_vehicle_id();
  void set_allocated_vehicle_id(::apollo::common::VehicleID* vehicle_id);
  private:
  const ::apollo::common::VehicleID& _internal_vehicle_id() const;
  ::apollo::common::VehicleID* _internal_mutable_vehicle_id();
  public:

  // optional .apollo.common.VehicleBrand brand = 1;
  bool has_brand() const;
  private:
  bool _internal_has_brand() const;
  public:
  void clear_brand();
  ::apollo::common::VehicleBrand brand() const;
  void set_brand(::apollo::common::VehicleBrand value);
  private:
  ::apollo::common::VehicleBrand _internal_brand() const;
  void _internal_set_brand(::apollo::common::VehicleBrand value);
  public:

  // optional float max_abs_speed_when_stopped = 19 [default = nan];
  bool has_max_abs_speed_when_stopped() const;
  private:
  bool _internal_has_max_abs_speed_when_stopped() const;
  public:
  void clear_max_abs_speed_when_stopped();
  float max_abs_speed_when_stopped() const;
  void set_max_abs_speed_when_stopped(float value);
  private:
  float _internal_max_abs_speed_when_stopped() const;
  void _internal_set_max_abs_speed_when_stopped(float value);
  public:

  // optional double front_edge_to_center = 3 [default = nan];
  bool has_front_edge_to_center() const;
  private:
  bool _internal_has_front_edge_to_center() const;
  public:
  void clear_front_edge_to_center();
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);
  private:
  double _internal_front_edge_to_center() const;
  void _internal_set_front_edge_to_center(double value);
  public:

  // optional double back_edge_to_center = 4 [default = nan];
  bool has_back_edge_to_center() const;
  private:
  bool _internal_has_back_edge_to_center() const;
  public:
  void clear_back_edge_to_center();
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);
  private:
  double _internal_back_edge_to_center() const;
  void _internal_set_back_edge_to_center(double value);
  public:

  // optional double left_edge_to_center = 5 [default = nan];
  bool has_left_edge_to_center() const;
  private:
  bool _internal_has_left_edge_to_center() const;
  public:
  void clear_left_edge_to_center();
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);
  private:
  double _internal_left_edge_to_center() const;
  void _internal_set_left_edge_to_center(double value);
  public:

  // optional double right_edge_to_center = 6 [default = nan];
  bool has_right_edge_to_center() const;
  private:
  bool _internal_has_right_edge_to_center() const;
  public:
  void clear_right_edge_to_center();
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);
  private:
  double _internal_right_edge_to_center() const;
  void _internal_set_right_edge_to_center(double value);
  public:

  // optional double length = 7 [default = nan];
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 8 [default = nan];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 9 [default = nan];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double min_turn_radius = 10 [default = nan];
  bool has_min_turn_radius() const;
  private:
  bool _internal_has_min_turn_radius() const;
  public:
  void clear_min_turn_radius();
  double min_turn_radius() const;
  void set_min_turn_radius(double value);
  private:
  double _internal_min_turn_radius() const;
  void _internal_set_min_turn_radius(double value);
  public:

  // optional double max_acceleration = 11 [default = nan];
  bool has_max_acceleration() const;
  private:
  bool _internal_has_max_acceleration() const;
  public:
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // optional double max_deceleration = 12 [default = nan];
  bool has_max_deceleration() const;
  private:
  bool _internal_has_max_deceleration() const;
  public:
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // optional double max_steer_angle = 13 [default = nan];
  bool has_max_steer_angle() const;
  private:
  bool _internal_has_max_steer_angle() const;
  public:
  void clear_max_steer_angle();
  double max_steer_angle() const;
  void set_max_steer_angle(double value);
  private:
  double _internal_max_steer_angle() const;
  void _internal_set_max_steer_angle(double value);
  public:

  // optional double max_steer_angle_rate = 14 [default = nan];
  bool has_max_steer_angle_rate() const;
  private:
  bool _internal_has_max_steer_angle_rate() const;
  public:
  void clear_max_steer_angle_rate();
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);
  private:
  double _internal_max_steer_angle_rate() const;
  void _internal_set_max_steer_angle_rate(double value);
  public:

  // optional double min_steer_angle_rate = 15 [default = nan];
  bool has_min_steer_angle_rate() const;
  private:
  bool _internal_has_min_steer_angle_rate() const;
  public:
  void clear_min_steer_angle_rate();
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);
  private:
  double _internal_min_steer_angle_rate() const;
  void _internal_set_min_steer_angle_rate(double value);
  public:

  // optional double steer_ratio = 16 [default = nan];
  bool has_steer_ratio() const;
  private:
  bool _internal_has_steer_ratio() const;
  public:
  void clear_steer_ratio();
  double steer_ratio() const;
  void set_steer_ratio(double value);
  private:
  double _internal_steer_ratio() const;
  void _internal_set_steer_ratio(double value);
  public:

  // optional double wheel_base = 17 [default = nan];
  bool has_wheel_base() const;
  private:
  bool _internal_has_wheel_base() const;
  public:
  void clear_wheel_base();
  double wheel_base() const;
  void set_wheel_base(double value);
  private:
  double _internal_wheel_base() const;
  void _internal_set_wheel_base(double value);
  public:

  // optional double wheel_rolling_radius = 18 [default = nan];
  bool has_wheel_rolling_radius() const;
  private:
  bool _internal_has_wheel_rolling_radius() const;
  public:
  void clear_wheel_rolling_radius();
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);
  private:
  double _internal_wheel_rolling_radius() const;
  void _internal_set_wheel_rolling_radius(double value);
  public:

  // optional double brake_deadzone = 20 [default = nan];
  bool has_brake_deadzone() const;
  private:
  bool _internal_has_brake_deadzone() const;
  public:
  void clear_brake_deadzone();
  double brake_deadzone() const;
  void set_brake_deadzone(double value);
  private:
  double _internal_brake_deadzone() const;
  void _internal_set_brake_deadzone(double value);
  public:

  // optional double throttle_deadzone = 21 [default = nan];
  bool has_throttle_deadzone() const;
  private:
  bool _internal_has_throttle_deadzone() const;
  public:
  void clear_throttle_deadzone();
  double throttle_deadzone() const;
  void set_throttle_deadzone(double value);
  private:
  double _internal_throttle_deadzone() const;
  void _internal_set_throttle_deadzone(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::VehicleID* vehicle_id_;
  int brand_;
  float max_abs_speed_when_stopped_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  double brake_deadzone_;
  double throttle_deadzone_;
  friend struct ::TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VehicleConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.VehicleConfig) */ {
 public:
  VehicleConfig();
  virtual ~VehicleConfig();

  VehicleConfig(const VehicleConfig& from);
  VehicleConfig(VehicleConfig&& from) noexcept
    : VehicleConfig() {
    *this = ::std::move(from);
  }

  inline VehicleConfig& operator=(const VehicleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleConfig& operator=(VehicleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleConfig* internal_default_instance() {
    return reinterpret_cast<const VehicleConfig*>(
               &_VehicleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleConfig& a, VehicleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleConfig* New() const final {
    return CreateMaybeMessage<VehicleConfig>(nullptr);
  }

  VehicleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleConfig& from);
  void MergeFrom(const VehicleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.VehicleConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto);
    return ::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kVehicleParamFieldNumber = 2,
    kExtrinsicsFieldNumber = 3,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.common.VehicleParam vehicle_param = 2;
  bool has_vehicle_param() const;
  private:
  bool _internal_has_vehicle_param() const;
  public:
  void clear_vehicle_param();
  const ::apollo::common::VehicleParam& vehicle_param() const;
  ::apollo::common::VehicleParam* release_vehicle_param();
  ::apollo::common::VehicleParam* mutable_vehicle_param();
  void set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param);
  private:
  const ::apollo::common::VehicleParam& _internal_vehicle_param() const;
  ::apollo::common::VehicleParam* _internal_mutable_vehicle_param();
  public:

  // optional .apollo.common.Extrinsics extrinsics = 3;
  bool has_extrinsics() const;
  private:
  bool _internal_has_extrinsics() const;
  public:
  void clear_extrinsics();
  const ::apollo::common::Extrinsics& extrinsics() const;
  ::apollo::common::Extrinsics* release_extrinsics();
  ::apollo::common::Extrinsics* mutable_extrinsics();
  void set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics);
  private:
  const ::apollo::common::Extrinsics& _internal_extrinsics() const;
  ::apollo::common::Extrinsics* _internal_mutable_extrinsics();
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.VehicleConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::VehicleParam* vehicle_param_;
  ::apollo::common::Extrinsics* extrinsics_;
  friend struct ::TableStruct_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transform

// optional bytes source_frame = 1;
inline bool Transform::_internal_has_source_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transform::has_source_frame() const {
  return _internal_has_source_frame();
}
inline void Transform::clear_source_frame() {
  source_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transform::source_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.source_frame)
  return _internal_source_frame();
}
inline void Transform::set_source_frame(const std::string& value) {
  _internal_set_source_frame(value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.source_frame)
}
inline std::string* Transform::mutable_source_frame() {
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.source_frame)
  return _internal_mutable_source_frame();
}
inline const std::string& Transform::_internal_source_frame() const {
  return source_frame_.GetNoArena();
}
inline void Transform::_internal_set_source_frame(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transform::set_source_frame(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Transform.source_frame)
}
inline void Transform::set_source_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.source_frame)
}
inline void Transform::set_source_frame(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.source_frame)
}
inline std::string* Transform::_internal_mutable_source_frame() {
  _has_bits_[0] |= 0x00000001u;
  return source_frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transform::release_source_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.source_frame)
  if (!_internal_has_source_frame()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_frame_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_source_frame(std::string* source_frame) {
  if (source_frame != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.source_frame)
}

// optional bytes target_frame = 2;
inline bool Transform::_internal_has_target_frame() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transform::has_target_frame() const {
  return _internal_has_target_frame();
}
inline void Transform::clear_target_frame() {
  target_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transform::target_frame() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.target_frame)
  return _internal_target_frame();
}
inline void Transform::set_target_frame(const std::string& value) {
  _internal_set_target_frame(value);
  // @@protoc_insertion_point(field_set:apollo.common.Transform.target_frame)
}
inline std::string* Transform::mutable_target_frame() {
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.target_frame)
  return _internal_mutable_target_frame();
}
inline const std::string& Transform::_internal_target_frame() const {
  return target_frame_.GetNoArena();
}
inline void Transform::_internal_set_target_frame(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transform::set_target_frame(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  target_frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Transform.target_frame)
}
inline void Transform::set_target_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  target_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Transform.target_frame)
}
inline void Transform::set_target_frame(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  target_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Transform.target_frame)
}
inline std::string* Transform::_internal_mutable_target_frame() {
  _has_bits_[0] |= 0x00000002u;
  return target_frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transform::release_target_frame() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.target_frame)
  if (!_internal_has_target_frame()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return target_frame_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transform::set_allocated_target_frame(std::string* target_frame) {
  if (target_frame != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_frame);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.target_frame)
}

// optional .apollo.common.Point3D translation = 3;
inline bool Transform::_internal_has_translation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || translation_ != nullptr);
  return value;
}
inline bool Transform::has_translation() const {
  return _internal_has_translation();
}
inline const ::apollo::common::Point3D& Transform::_internal_translation() const {
  const ::apollo::common::Point3D* p = translation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Transform::translation() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.translation)
  return _internal_translation();
}
inline ::apollo::common::Point3D* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.translation)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Transform::_internal_mutable_translation() {
  _has_bits_[0] |= 0x00000004u;
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    translation_ = p;
  }
  return translation_;
}
inline ::apollo::common::Point3D* Transform::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.translation)
  return _internal_mutable_translation();
}
inline void Transform::set_allocated_translation(::apollo::common::Point3D* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.translation)
}

// optional .apollo.common.Quaternion rotation = 4;
inline bool Transform::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rotation_ != nullptr);
  return value;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::apollo::common::Quaternion& Transform::_internal_rotation() const {
  const ::apollo::common::Quaternion* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Quaternion*>(
      &::apollo::common::_Quaternion_default_instance_);
}
inline const ::apollo::common::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:apollo.common.Transform.rotation)
  return _internal_rotation();
}
inline ::apollo::common::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:apollo.common.Transform.rotation)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::apollo::common::Quaternion* Transform::_internal_mutable_rotation() {
  _has_bits_[0] |= 0x00000008u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Quaternion>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::apollo::common::Quaternion* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:apollo.common.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::apollo::common::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Transform.rotation)
}

// -------------------------------------------------------------------

// Extrinsics

// repeated .apollo.common.Transform tansforms = 1;
inline int Extrinsics::_internal_tansforms_size() const {
  return tansforms_.size();
}
inline int Extrinsics::tansforms_size() const {
  return _internal_tansforms_size();
}
inline void Extrinsics::clear_tansforms() {
  tansforms_.Clear();
}
inline ::apollo::common::Transform* Extrinsics::mutable_tansforms(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Extrinsics.tansforms)
  return tansforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Transform >*
Extrinsics::mutable_tansforms() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Extrinsics.tansforms)
  return &tansforms_;
}
inline const ::apollo::common::Transform& Extrinsics::_internal_tansforms(int index) const {
  return tansforms_.Get(index);
}
inline const ::apollo::common::Transform& Extrinsics::tansforms(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Extrinsics.tansforms)
  return _internal_tansforms(index);
}
inline ::apollo::common::Transform* Extrinsics::_internal_add_tansforms() {
  return tansforms_.Add();
}
inline ::apollo::common::Transform* Extrinsics::add_tansforms() {
  // @@protoc_insertion_point(field_add:apollo.common.Extrinsics.tansforms)
  return _internal_add_tansforms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Transform >&
Extrinsics::tansforms() const {
  // @@protoc_insertion_point(field_list:apollo.common.Extrinsics.tansforms)
  return tansforms_;
}

// -------------------------------------------------------------------

// VehicleID

// optional string vin = 1;
inline bool VehicleID::_internal_has_vin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleID::has_vin() const {
  return _internal_has_vin();
}
inline void VehicleID::clear_vin() {
  vin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleID::vin() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleID.vin)
  return _internal_vin();
}
inline void VehicleID::set_vin(const std::string& value) {
  _internal_set_vin(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleID.vin)
}
inline std::string* VehicleID::mutable_vin() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleID.vin)
  return _internal_mutable_vin();
}
inline const std::string& VehicleID::_internal_vin() const {
  return vin_.GetNoArena();
}
inline void VehicleID::_internal_set_vin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleID::set_vin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleID.vin)
}
inline void VehicleID::set_vin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleID.vin)
}
inline void VehicleID::set_vin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleID.vin)
}
inline std::string* VehicleID::_internal_mutable_vin() {
  _has_bits_[0] |= 0x00000001u;
  return vin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleID::release_vin() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleID.vin)
  if (!_internal_has_vin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleID::set_allocated_vin(std::string* vin) {
  if (vin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleID.vin)
}

// optional string plate = 2;
inline bool VehicleID::_internal_has_plate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleID::has_plate() const {
  return _internal_has_plate();
}
inline void VehicleID::clear_plate() {
  plate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VehicleID::plate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleID.plate)
  return _internal_plate();
}
inline void VehicleID::set_plate(const std::string& value) {
  _internal_set_plate(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleID.plate)
}
inline std::string* VehicleID::mutable_plate() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleID.plate)
  return _internal_mutable_plate();
}
inline const std::string& VehicleID::_internal_plate() const {
  return plate_.GetNoArena();
}
inline void VehicleID::_internal_set_plate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleID::set_plate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleID.plate)
}
inline void VehicleID::set_plate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleID.plate)
}
inline void VehicleID::set_plate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleID.plate)
}
inline std::string* VehicleID::_internal_mutable_plate() {
  _has_bits_[0] |= 0x00000002u;
  return plate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleID::release_plate() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleID.plate)
  if (!_internal_has_plate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleID::set_allocated_plate(std::string* plate) {
  if (plate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plate);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleID.plate)
}

// optional string other_unique_id = 3;
inline bool VehicleID::_internal_has_other_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleID::has_other_unique_id() const {
  return _internal_has_other_unique_id();
}
inline void VehicleID::clear_other_unique_id() {
  other_unique_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VehicleID::other_unique_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleID.other_unique_id)
  return _internal_other_unique_id();
}
inline void VehicleID::set_other_unique_id(const std::string& value) {
  _internal_set_other_unique_id(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleID.other_unique_id)
}
inline std::string* VehicleID::mutable_other_unique_id() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleID.other_unique_id)
  return _internal_mutable_other_unique_id();
}
inline const std::string& VehicleID::_internal_other_unique_id() const {
  return other_unique_id_.GetNoArena();
}
inline void VehicleID::_internal_set_other_unique_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VehicleID::set_other_unique_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleID.other_unique_id)
}
inline void VehicleID::set_other_unique_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleID.other_unique_id)
}
inline void VehicleID::set_other_unique_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  other_unique_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleID.other_unique_id)
}
inline std::string* VehicleID::_internal_mutable_other_unique_id() {
  _has_bits_[0] |= 0x00000004u;
  return other_unique_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VehicleID::release_other_unique_id() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleID.other_unique_id)
  if (!_internal_has_other_unique_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return other_unique_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleID::set_allocated_other_unique_id(std::string* other_unique_id) {
  if (other_unique_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  other_unique_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other_unique_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleID.other_unique_id)
}

// -------------------------------------------------------------------

// VehicleParam

// optional .apollo.common.VehicleBrand brand = 1;
inline bool VehicleParam::_internal_has_brand() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleParam::has_brand() const {
  return _internal_has_brand();
}
inline void VehicleParam::clear_brand() {
  brand_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::common::VehicleBrand VehicleParam::_internal_brand() const {
  return static_cast< ::apollo::common::VehicleBrand >(brand_);
}
inline ::apollo::common::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brand)
  return _internal_brand();
}
inline void VehicleParam::_internal_set_brand(::apollo::common::VehicleBrand value) {
  assert(::apollo::common::VehicleBrand_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  brand_ = value;
}
inline void VehicleParam::set_brand(::apollo::common::VehicleBrand value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brand)
}

// optional .apollo.common.VehicleID vehicle_id = 2;
inline bool VehicleParam::_internal_has_vehicle_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_id_ != nullptr);
  return value;
}
inline bool VehicleParam::has_vehicle_id() const {
  return _internal_has_vehicle_id();
}
inline void VehicleParam::clear_vehicle_id() {
  if (vehicle_id_ != nullptr) vehicle_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::VehicleID& VehicleParam::_internal_vehicle_id() const {
  const ::apollo::common::VehicleID* p = vehicle_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::VehicleID*>(
      &::apollo::common::_VehicleID_default_instance_);
}
inline const ::apollo::common::VehicleID& VehicleParam::vehicle_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.vehicle_id)
  return _internal_vehicle_id();
}
inline ::apollo::common::VehicleID* VehicleParam::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleParam.vehicle_id)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::VehicleID* temp = vehicle_id_;
  vehicle_id_ = nullptr;
  return temp;
}
inline ::apollo::common::VehicleID* VehicleParam::_internal_mutable_vehicle_id() {
  _has_bits_[0] |= 0x00000001u;
  if (vehicle_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::VehicleID>(GetArenaNoVirtual());
    vehicle_id_ = p;
  }
  return vehicle_id_;
}
inline ::apollo::common::VehicleID* VehicleParam::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleParam.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline void VehicleParam::set_allocated_vehicle_id(::apollo::common::VehicleID* vehicle_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_id_;
  }
  if (vehicle_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vehicle_id_ = vehicle_id;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleParam.vehicle_id)
}

// optional double front_edge_to_center = 3 [default = nan];
inline bool VehicleParam::_internal_has_front_edge_to_center() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleParam::has_front_edge_to_center() const {
  return _internal_has_front_edge_to_center();
}
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000008u;
}
inline double VehicleParam::_internal_front_edge_to_center() const {
  return front_edge_to_center_;
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.front_edge_to_center)
  return _internal_front_edge_to_center();
}
inline void VehicleParam::_internal_set_front_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000008u;
  front_edge_to_center_ = value;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  _internal_set_front_edge_to_center(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.front_edge_to_center)
}

// optional double back_edge_to_center = 4 [default = nan];
inline bool VehicleParam::_internal_has_back_edge_to_center() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleParam::has_back_edge_to_center() const {
  return _internal_has_back_edge_to_center();
}
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000010u;
}
inline double VehicleParam::_internal_back_edge_to_center() const {
  return back_edge_to_center_;
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.back_edge_to_center)
  return _internal_back_edge_to_center();
}
inline void VehicleParam::_internal_set_back_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000010u;
  back_edge_to_center_ = value;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  _internal_set_back_edge_to_center(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.back_edge_to_center)
}

// optional double left_edge_to_center = 5 [default = nan];
inline bool VehicleParam::_internal_has_left_edge_to_center() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehicleParam::has_left_edge_to_center() const {
  return _internal_has_left_edge_to_center();
}
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000020u;
}
inline double VehicleParam::_internal_left_edge_to_center() const {
  return left_edge_to_center_;
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.left_edge_to_center)
  return _internal_left_edge_to_center();
}
inline void VehicleParam::_internal_set_left_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000020u;
  left_edge_to_center_ = value;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  _internal_set_left_edge_to_center(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.left_edge_to_center)
}

// optional double right_edge_to_center = 6 [default = nan];
inline bool VehicleParam::_internal_has_right_edge_to_center() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehicleParam::has_right_edge_to_center() const {
  return _internal_has_right_edge_to_center();
}
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000040u;
}
inline double VehicleParam::_internal_right_edge_to_center() const {
  return right_edge_to_center_;
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.right_edge_to_center)
  return _internal_right_edge_to_center();
}
inline void VehicleParam::_internal_set_right_edge_to_center(double value) {
  _has_bits_[0] |= 0x00000040u;
  right_edge_to_center_ = value;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  _internal_set_right_edge_to_center(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.right_edge_to_center)
}

// optional double length = 7 [default = nan];
inline bool VehicleParam::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehicleParam::has_length() const {
  return _internal_has_length();
}
inline void VehicleParam::clear_length() {
  length_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000080u;
}
inline double VehicleParam::_internal_length() const {
  return length_;
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.length)
  return _internal_length();
}
inline void VehicleParam::_internal_set_length(double value) {
  _has_bits_[0] |= 0x00000080u;
  length_ = value;
}
inline void VehicleParam::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.length)
}

// optional double width = 8 [default = nan];
inline bool VehicleParam::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehicleParam::has_width() const {
  return _internal_has_width();
}
inline void VehicleParam::clear_width() {
  width_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000100u;
}
inline double VehicleParam::_internal_width() const {
  return width_;
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.width)
  return _internal_width();
}
inline void VehicleParam::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
}
inline void VehicleParam::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.width)
}

// optional double height = 9 [default = nan];
inline bool VehicleParam::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehicleParam::has_height() const {
  return _internal_has_height();
}
inline void VehicleParam::clear_height() {
  height_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000200u;
}
inline double VehicleParam::_internal_height() const {
  return height_;
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.height)
  return _internal_height();
}
inline void VehicleParam::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
}
inline void VehicleParam::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.height)
}

// optional double min_turn_radius = 10 [default = nan];
inline bool VehicleParam::_internal_has_min_turn_radius() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehicleParam::has_min_turn_radius() const {
  return _internal_has_min_turn_radius();
}
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000400u;
}
inline double VehicleParam::_internal_min_turn_radius() const {
  return min_turn_radius_;
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_turn_radius)
  return _internal_min_turn_radius();
}
inline void VehicleParam::_internal_set_min_turn_radius(double value) {
  _has_bits_[0] |= 0x00000400u;
  min_turn_radius_ = value;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  _internal_set_min_turn_radius(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_turn_radius)
}

// optional double max_acceleration = 11 [default = nan];
inline bool VehicleParam::_internal_has_max_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehicleParam::has_max_acceleration() const {
  return _internal_has_max_acceleration();
}
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00000800u;
}
inline double VehicleParam::_internal_max_acceleration() const {
  return max_acceleration_;
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_acceleration)
  return _internal_max_acceleration();
}
inline void VehicleParam::_internal_set_max_acceleration(double value) {
  _has_bits_[0] |= 0x00000800u;
  max_acceleration_ = value;
}
inline void VehicleParam::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_acceleration)
}

// optional double max_deceleration = 12 [default = nan];
inline bool VehicleParam::_internal_has_max_deceleration() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehicleParam::has_max_deceleration() const {
  return _internal_has_max_deceleration();
}
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00001000u;
}
inline double VehicleParam::_internal_max_deceleration() const {
  return max_deceleration_;
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_deceleration)
  return _internal_max_deceleration();
}
inline void VehicleParam::_internal_set_max_deceleration(double value) {
  _has_bits_[0] |= 0x00001000u;
  max_deceleration_ = value;
}
inline void VehicleParam::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_deceleration)
}

// optional double max_steer_angle = 13 [default = nan];
inline bool VehicleParam::_internal_has_max_steer_angle() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehicleParam::has_max_steer_angle() const {
  return _internal_has_max_steer_angle();
}
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00002000u;
}
inline double VehicleParam::_internal_max_steer_angle() const {
  return max_steer_angle_;
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle)
  return _internal_max_steer_angle();
}
inline void VehicleParam::_internal_set_max_steer_angle(double value) {
  _has_bits_[0] |= 0x00002000u;
  max_steer_angle_ = value;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  _internal_set_max_steer_angle(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle)
}

// optional double max_steer_angle_rate = 14 [default = nan];
inline bool VehicleParam::_internal_has_max_steer_angle_rate() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VehicleParam::has_max_steer_angle_rate() const {
  return _internal_has_max_steer_angle_rate();
}
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00004000u;
}
inline double VehicleParam::_internal_max_steer_angle_rate() const {
  return max_steer_angle_rate_;
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_steer_angle_rate)
  return _internal_max_steer_angle_rate();
}
inline void VehicleParam::_internal_set_max_steer_angle_rate(double value) {
  _has_bits_[0] |= 0x00004000u;
  max_steer_angle_rate_ = value;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  _internal_set_max_steer_angle_rate(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_steer_angle_rate)
}

// optional double min_steer_angle_rate = 15 [default = nan];
inline bool VehicleParam::_internal_has_min_steer_angle_rate() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VehicleParam::has_min_steer_angle_rate() const {
  return _internal_has_min_steer_angle_rate();
}
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00008000u;
}
inline double VehicleParam::_internal_min_steer_angle_rate() const {
  return min_steer_angle_rate_;
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.min_steer_angle_rate)
  return _internal_min_steer_angle_rate();
}
inline void VehicleParam::_internal_set_min_steer_angle_rate(double value) {
  _has_bits_[0] |= 0x00008000u;
  min_steer_angle_rate_ = value;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  _internal_set_min_steer_angle_rate(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.min_steer_angle_rate)
}

// optional double steer_ratio = 16 [default = nan];
inline bool VehicleParam::_internal_has_steer_ratio() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool VehicleParam::has_steer_ratio() const {
  return _internal_has_steer_ratio();
}
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00010000u;
}
inline double VehicleParam::_internal_steer_ratio() const {
  return steer_ratio_;
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.steer_ratio)
  return _internal_steer_ratio();
}
inline void VehicleParam::_internal_set_steer_ratio(double value) {
  _has_bits_[0] |= 0x00010000u;
  steer_ratio_ = value;
}
inline void VehicleParam::set_steer_ratio(double value) {
  _internal_set_steer_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.steer_ratio)
}

// optional double wheel_base = 17 [default = nan];
inline bool VehicleParam::_internal_has_wheel_base() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool VehicleParam::has_wheel_base() const {
  return _internal_has_wheel_base();
}
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00020000u;
}
inline double VehicleParam::_internal_wheel_base() const {
  return wheel_base_;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_base)
  return _internal_wheel_base();
}
inline void VehicleParam::_internal_set_wheel_base(double value) {
  _has_bits_[0] |= 0x00020000u;
  wheel_base_ = value;
}
inline void VehicleParam::set_wheel_base(double value) {
  _internal_set_wheel_base(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_base)
}

// optional double wheel_rolling_radius = 18 [default = nan];
inline bool VehicleParam::_internal_has_wheel_rolling_radius() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool VehicleParam::has_wheel_rolling_radius() const {
  return _internal_has_wheel_rolling_radius();
}
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00040000u;
}
inline double VehicleParam::_internal_wheel_rolling_radius() const {
  return wheel_rolling_radius_;
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.wheel_rolling_radius)
  return _internal_wheel_rolling_radius();
}
inline void VehicleParam::_internal_set_wheel_rolling_radius(double value) {
  _has_bits_[0] |= 0x00040000u;
  wheel_rolling_radius_ = value;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  _internal_set_wheel_rolling_radius(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.wheel_rolling_radius)
}

// optional float max_abs_speed_when_stopped = 19 [default = nan];
inline bool VehicleParam::_internal_has_max_abs_speed_when_stopped() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleParam::has_max_abs_speed_when_stopped() const {
  return _internal_has_max_abs_speed_when_stopped();
}
inline void VehicleParam::clear_max_abs_speed_when_stopped() {
  max_abs_speed_when_stopped_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000004u;
}
inline float VehicleParam::_internal_max_abs_speed_when_stopped() const {
  return max_abs_speed_when_stopped_;
}
inline float VehicleParam::max_abs_speed_when_stopped() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.max_abs_speed_when_stopped)
  return _internal_max_abs_speed_when_stopped();
}
inline void VehicleParam::_internal_set_max_abs_speed_when_stopped(float value) {
  _has_bits_[0] |= 0x00000004u;
  max_abs_speed_when_stopped_ = value;
}
inline void VehicleParam::set_max_abs_speed_when_stopped(float value) {
  _internal_set_max_abs_speed_when_stopped(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.max_abs_speed_when_stopped)
}

// optional double brake_deadzone = 20 [default = nan];
inline bool VehicleParam::_internal_has_brake_deadzone() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool VehicleParam::has_brake_deadzone() const {
  return _internal_has_brake_deadzone();
}
inline void VehicleParam::clear_brake_deadzone() {
  brake_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00080000u;
}
inline double VehicleParam::_internal_brake_deadzone() const {
  return brake_deadzone_;
}
inline double VehicleParam::brake_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.brake_deadzone)
  return _internal_brake_deadzone();
}
inline void VehicleParam::_internal_set_brake_deadzone(double value) {
  _has_bits_[0] |= 0x00080000u;
  brake_deadzone_ = value;
}
inline void VehicleParam::set_brake_deadzone(double value) {
  _internal_set_brake_deadzone(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.brake_deadzone)
}

// optional double throttle_deadzone = 21 [default = nan];
inline bool VehicleParam::_internal_has_throttle_deadzone() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool VehicleParam::has_throttle_deadzone() const {
  return _internal_has_throttle_deadzone();
}
inline void VehicleParam::clear_throttle_deadzone() {
  throttle_deadzone_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00100000u;
}
inline double VehicleParam::_internal_throttle_deadzone() const {
  return throttle_deadzone_;
}
inline double VehicleParam::throttle_deadzone() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleParam.throttle_deadzone)
  return _internal_throttle_deadzone();
}
inline void VehicleParam::_internal_set_throttle_deadzone(double value) {
  _has_bits_[0] |= 0x00100000u;
  throttle_deadzone_ = value;
}
inline void VehicleParam::set_throttle_deadzone(double value) {
  _internal_set_throttle_deadzone(value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleParam.throttle_deadzone)
}

// -------------------------------------------------------------------

// VehicleConfig

// optional .apollo.common.Header header = 1;
inline bool VehicleConfig::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool VehicleConfig::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& VehicleConfig::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& VehicleConfig::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.header)
  return _internal_header();
}
inline ::apollo::common::Header* VehicleConfig::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* VehicleConfig::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* VehicleConfig::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.header)
  return _internal_mutable_header();
}
inline void VehicleConfig::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.header)
}

// optional .apollo.common.VehicleParam vehicle_param = 2;
inline bool VehicleConfig::_internal_has_vehicle_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_param_ != nullptr);
  return value;
}
inline bool VehicleConfig::has_vehicle_param() const {
  return _internal_has_vehicle_param();
}
inline void VehicleConfig::clear_vehicle_param() {
  if (vehicle_param_ != nullptr) vehicle_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::VehicleParam& VehicleConfig::_internal_vehicle_param() const {
  const ::apollo::common::VehicleParam* p = vehicle_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::VehicleParam*>(
      &::apollo::common::_VehicleParam_default_instance_);
}
inline const ::apollo::common::VehicleParam& VehicleConfig::vehicle_param() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.vehicle_param)
  return _internal_vehicle_param();
}
inline ::apollo::common::VehicleParam* VehicleConfig::release_vehicle_param() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.vehicle_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::VehicleParam* temp = vehicle_param_;
  vehicle_param_ = nullptr;
  return temp;
}
inline ::apollo::common::VehicleParam* VehicleConfig::_internal_mutable_vehicle_param() {
  _has_bits_[0] |= 0x00000002u;
  if (vehicle_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::VehicleParam>(GetArenaNoVirtual());
    vehicle_param_ = p;
  }
  return vehicle_param_;
}
inline ::apollo::common::VehicleParam* VehicleConfig::mutable_vehicle_param() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.vehicle_param)
  return _internal_mutable_vehicle_param();
}
inline void VehicleConfig::set_allocated_vehicle_param(::apollo::common::VehicleParam* vehicle_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_param_;
  }
  if (vehicle_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_param_ = vehicle_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.vehicle_param)
}

// optional .apollo.common.Extrinsics extrinsics = 3;
inline bool VehicleConfig::_internal_has_extrinsics() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || extrinsics_ != nullptr);
  return value;
}
inline bool VehicleConfig::has_extrinsics() const {
  return _internal_has_extrinsics();
}
inline void VehicleConfig::clear_extrinsics() {
  if (extrinsics_ != nullptr) extrinsics_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::common::Extrinsics& VehicleConfig::_internal_extrinsics() const {
  const ::apollo::common::Extrinsics* p = extrinsics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Extrinsics*>(
      &::apollo::common::_Extrinsics_default_instance_);
}
inline const ::apollo::common::Extrinsics& VehicleConfig::extrinsics() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleConfig.extrinsics)
  return _internal_extrinsics();
}
inline ::apollo::common::Extrinsics* VehicleConfig::release_extrinsics() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleConfig.extrinsics)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Extrinsics* temp = extrinsics_;
  extrinsics_ = nullptr;
  return temp;
}
inline ::apollo::common::Extrinsics* VehicleConfig::_internal_mutable_extrinsics() {
  _has_bits_[0] |= 0x00000004u;
  if (extrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Extrinsics>(GetArenaNoVirtual());
    extrinsics_ = p;
  }
  return extrinsics_;
}
inline ::apollo::common::Extrinsics* VehicleConfig::mutable_extrinsics() {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleConfig.extrinsics)
  return _internal_mutable_extrinsics();
}
inline void VehicleConfig::set_allocated_extrinsics(::apollo::common::Extrinsics* extrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extrinsics_;
  }
  if (extrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrinsics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  extrinsics_ = extrinsics;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleConfig.extrinsics)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::common::VehicleBrand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::VehicleBrand>() {
  return ::apollo::common::VehicleBrand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto
