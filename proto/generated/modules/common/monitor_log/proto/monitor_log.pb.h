// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/monitor_log/proto/monitor_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto;
namespace apollo {
namespace common {
namespace monitor {
class MonitorMessage;
class MonitorMessageDefaultTypeInternal;
extern MonitorMessageDefaultTypeInternal _MonitorMessage_default_instance_;
class MonitorMessageItem;
class MonitorMessageItemDefaultTypeInternal;
extern MonitorMessageItemDefaultTypeInternal _MonitorMessageItem_default_instance_;
}  // namespace monitor
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::monitor::MonitorMessage* Arena::CreateMaybeMessage<::apollo::common::monitor::MonitorMessage>(Arena*);
template<> ::apollo::common::monitor::MonitorMessageItem* Arena::CreateMaybeMessage<::apollo::common::monitor::MonitorMessageItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {
namespace monitor {

enum MonitorMessageItem_MessageSource : int {
  MonitorMessageItem_MessageSource_UNKNOWN = 1,
  MonitorMessageItem_MessageSource_CANBUS = 2,
  MonitorMessageItem_MessageSource_CONTROL = 3,
  MonitorMessageItem_MessageSource_DECISION = 4,
  MonitorMessageItem_MessageSource_LOCALIZATION = 5,
  MonitorMessageItem_MessageSource_PLANNING = 6,
  MonitorMessageItem_MessageSource_PREDICTION = 7,
  MonitorMessageItem_MessageSource_SIMULATOR = 8,
  MonitorMessageItem_MessageSource_HWSYS = 9,
  MonitorMessageItem_MessageSource_ROUTING = 10,
  MonitorMessageItem_MessageSource_MONITOR = 11,
  MonitorMessageItem_MessageSource_HMI = 12,
  MonitorMessageItem_MessageSource_RELATIVE_MAP = 13,
  MonitorMessageItem_MessageSource_GNSS = 14,
  MonitorMessageItem_MessageSource_CONTI_RADAR = 15,
  MonitorMessageItem_MessageSource_RACOBIT_RADAR = 16,
  MonitorMessageItem_MessageSource_ULTRASONIC_RADAR = 17,
  MonitorMessageItem_MessageSource_MOBILEYE = 18,
  MonitorMessageItem_MessageSource_DELPHI_ESR = 19
};
bool MonitorMessageItem_MessageSource_IsValid(int value);
constexpr MonitorMessageItem_MessageSource MonitorMessageItem_MessageSource_MessageSource_MIN = MonitorMessageItem_MessageSource_UNKNOWN;
constexpr MonitorMessageItem_MessageSource MonitorMessageItem_MessageSource_MessageSource_MAX = MonitorMessageItem_MessageSource_DELPHI_ESR;
constexpr int MonitorMessageItem_MessageSource_MessageSource_ARRAYSIZE = MonitorMessageItem_MessageSource_MessageSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonitorMessageItem_MessageSource_descriptor();
template<typename T>
inline const std::string& MonitorMessageItem_MessageSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonitorMessageItem_MessageSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonitorMessageItem_MessageSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonitorMessageItem_MessageSource_descriptor(), enum_t_value);
}
inline bool MonitorMessageItem_MessageSource_Parse(
    const std::string& name, MonitorMessageItem_MessageSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonitorMessageItem_MessageSource>(
    MonitorMessageItem_MessageSource_descriptor(), name, value);
}
enum MonitorMessageItem_LogLevel : int {
  MonitorMessageItem_LogLevel_INFO = 0,
  MonitorMessageItem_LogLevel_WARN = 1,
  MonitorMessageItem_LogLevel_ERROR = 2,
  MonitorMessageItem_LogLevel_FATAL = 3
};
bool MonitorMessageItem_LogLevel_IsValid(int value);
constexpr MonitorMessageItem_LogLevel MonitorMessageItem_LogLevel_LogLevel_MIN = MonitorMessageItem_LogLevel_INFO;
constexpr MonitorMessageItem_LogLevel MonitorMessageItem_LogLevel_LogLevel_MAX = MonitorMessageItem_LogLevel_FATAL;
constexpr int MonitorMessageItem_LogLevel_LogLevel_ARRAYSIZE = MonitorMessageItem_LogLevel_LogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MonitorMessageItem_LogLevel_descriptor();
template<typename T>
inline const std::string& MonitorMessageItem_LogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MonitorMessageItem_LogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MonitorMessageItem_LogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MonitorMessageItem_LogLevel_descriptor(), enum_t_value);
}
inline bool MonitorMessageItem_LogLevel_Parse(
    const std::string& name, MonitorMessageItem_LogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MonitorMessageItem_LogLevel>(
    MonitorMessageItem_LogLevel_descriptor(), name, value);
}
// ===================================================================

class MonitorMessageItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.monitor.MonitorMessageItem) */ {
 public:
  MonitorMessageItem();
  virtual ~MonitorMessageItem();

  MonitorMessageItem(const MonitorMessageItem& from);
  MonitorMessageItem(MonitorMessageItem&& from) noexcept
    : MonitorMessageItem() {
    *this = ::std::move(from);
  }

  inline MonitorMessageItem& operator=(const MonitorMessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorMessageItem& operator=(MonitorMessageItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorMessageItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorMessageItem* internal_default_instance() {
    return reinterpret_cast<const MonitorMessageItem*>(
               &_MonitorMessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MonitorMessageItem& a, MonitorMessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorMessageItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorMessageItem* New() const final {
    return CreateMaybeMessage<MonitorMessageItem>(nullptr);
  }

  MonitorMessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorMessageItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorMessageItem& from);
  void MergeFrom(const MonitorMessageItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorMessageItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.monitor.MonitorMessageItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto);
    return ::descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MonitorMessageItem_MessageSource MessageSource;
  static constexpr MessageSource UNKNOWN =
    MonitorMessageItem_MessageSource_UNKNOWN;
  static constexpr MessageSource CANBUS =
    MonitorMessageItem_MessageSource_CANBUS;
  static constexpr MessageSource CONTROL =
    MonitorMessageItem_MessageSource_CONTROL;
  static constexpr MessageSource DECISION =
    MonitorMessageItem_MessageSource_DECISION;
  static constexpr MessageSource LOCALIZATION =
    MonitorMessageItem_MessageSource_LOCALIZATION;
  static constexpr MessageSource PLANNING =
    MonitorMessageItem_MessageSource_PLANNING;
  static constexpr MessageSource PREDICTION =
    MonitorMessageItem_MessageSource_PREDICTION;
  static constexpr MessageSource SIMULATOR =
    MonitorMessageItem_MessageSource_SIMULATOR;
  static constexpr MessageSource HWSYS =
    MonitorMessageItem_MessageSource_HWSYS;
  static constexpr MessageSource ROUTING =
    MonitorMessageItem_MessageSource_ROUTING;
  static constexpr MessageSource MONITOR =
    MonitorMessageItem_MessageSource_MONITOR;
  static constexpr MessageSource HMI =
    MonitorMessageItem_MessageSource_HMI;
  static constexpr MessageSource RELATIVE_MAP =
    MonitorMessageItem_MessageSource_RELATIVE_MAP;
  static constexpr MessageSource GNSS =
    MonitorMessageItem_MessageSource_GNSS;
  static constexpr MessageSource CONTI_RADAR =
    MonitorMessageItem_MessageSource_CONTI_RADAR;
  static constexpr MessageSource RACOBIT_RADAR =
    MonitorMessageItem_MessageSource_RACOBIT_RADAR;
  static constexpr MessageSource ULTRASONIC_RADAR =
    MonitorMessageItem_MessageSource_ULTRASONIC_RADAR;
  static constexpr MessageSource MOBILEYE =
    MonitorMessageItem_MessageSource_MOBILEYE;
  static constexpr MessageSource DELPHI_ESR =
    MonitorMessageItem_MessageSource_DELPHI_ESR;
  static inline bool MessageSource_IsValid(int value) {
    return MonitorMessageItem_MessageSource_IsValid(value);
  }
  static constexpr MessageSource MessageSource_MIN =
    MonitorMessageItem_MessageSource_MessageSource_MIN;
  static constexpr MessageSource MessageSource_MAX =
    MonitorMessageItem_MessageSource_MessageSource_MAX;
  static constexpr int MessageSource_ARRAYSIZE =
    MonitorMessageItem_MessageSource_MessageSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageSource_descriptor() {
    return MonitorMessageItem_MessageSource_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageSource_Name.");
    return MonitorMessageItem_MessageSource_Name(enum_t_value);
  }
  static inline bool MessageSource_Parse(const std::string& name,
      MessageSource* value) {
    return MonitorMessageItem_MessageSource_Parse(name, value);
  }

  typedef MonitorMessageItem_LogLevel LogLevel;
  static constexpr LogLevel INFO =
    MonitorMessageItem_LogLevel_INFO;
  static constexpr LogLevel WARN =
    MonitorMessageItem_LogLevel_WARN;
  static constexpr LogLevel ERROR =
    MonitorMessageItem_LogLevel_ERROR;
  static constexpr LogLevel FATAL =
    MonitorMessageItem_LogLevel_FATAL;
  static inline bool LogLevel_IsValid(int value) {
    return MonitorMessageItem_LogLevel_IsValid(value);
  }
  static constexpr LogLevel LogLevel_MIN =
    MonitorMessageItem_LogLevel_LogLevel_MIN;
  static constexpr LogLevel LogLevel_MAX =
    MonitorMessageItem_LogLevel_LogLevel_MAX;
  static constexpr int LogLevel_ARRAYSIZE =
    MonitorMessageItem_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogLevel_descriptor() {
    return MonitorMessageItem_LogLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& LogLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLevel_Name.");
    return MonitorMessageItem_LogLevel_Name(enum_t_value);
  }
  static inline bool LogLevel_Parse(const std::string& name,
      LogLevel* value) {
    return MonitorMessageItem_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kLogLevelFieldNumber = 3,
    kSourceFieldNumber = 1,
  };
  // optional string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional .apollo.common.monitor.MonitorMessageItem.LogLevel log_level = 3 [default = INFO];
  bool has_log_level() const;
  private:
  bool _internal_has_log_level() const;
  public:
  void clear_log_level();
  ::apollo::common::monitor::MonitorMessageItem_LogLevel log_level() const;
  void set_log_level(::apollo::common::monitor::MonitorMessageItem_LogLevel value);
  private:
  ::apollo::common::monitor::MonitorMessageItem_LogLevel _internal_log_level() const;
  void _internal_set_log_level(::apollo::common::monitor::MonitorMessageItem_LogLevel value);
  public:

  // optional .apollo.common.monitor.MonitorMessageItem.MessageSource source = 1 [default = UNKNOWN];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::apollo::common::monitor::MonitorMessageItem_MessageSource source() const;
  void set_source(::apollo::common::monitor::MonitorMessageItem_MessageSource value);
  private:
  ::apollo::common::monitor::MonitorMessageItem_MessageSource _internal_source() const;
  void _internal_set_source(::apollo::common::monitor::MonitorMessageItem_MessageSource value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.monitor.MonitorMessageItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int log_level_;
  int source_;
  friend struct ::TableStruct_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto;
};
// -------------------------------------------------------------------

class MonitorMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.monitor.MonitorMessage) */ {
 public:
  MonitorMessage();
  virtual ~MonitorMessage();

  MonitorMessage(const MonitorMessage& from);
  MonitorMessage(MonitorMessage&& from) noexcept
    : MonitorMessage() {
    *this = ::std::move(from);
  }

  inline MonitorMessage& operator=(const MonitorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorMessage& operator=(MonitorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorMessage* internal_default_instance() {
    return reinterpret_cast<const MonitorMessage*>(
               &_MonitorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonitorMessage& a, MonitorMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorMessage* New() const final {
    return CreateMaybeMessage<MonitorMessage>(nullptr);
  }

  MonitorMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorMessage& from);
  void MergeFrom(const MonitorMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.monitor.MonitorMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto);
    return ::descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .apollo.common.monitor.MonitorMessageItem item = 2;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::apollo::common::monitor::MonitorMessageItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::monitor::MonitorMessageItem >*
      mutable_item();
  private:
  const ::apollo::common::monitor::MonitorMessageItem& _internal_item(int index) const;
  ::apollo::common::monitor::MonitorMessageItem* _internal_add_item();
  public:
  const ::apollo::common::monitor::MonitorMessageItem& item(int index) const;
  ::apollo::common::monitor::MonitorMessageItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::monitor::MonitorMessageItem >&
      item() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:apollo.common.monitor.MonitorMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::monitor::MonitorMessageItem > item_;
  ::apollo::common::Header* header_;
  friend struct ::TableStruct_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MonitorMessageItem

// optional .apollo.common.monitor.MonitorMessageItem.MessageSource source = 1 [default = UNKNOWN];
inline bool MonitorMessageItem::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MonitorMessageItem::has_source() const {
  return _internal_has_source();
}
inline void MonitorMessageItem::clear_source() {
  source_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::common::monitor::MonitorMessageItem_MessageSource MonitorMessageItem::_internal_source() const {
  return static_cast< ::apollo::common::monitor::MonitorMessageItem_MessageSource >(source_);
}
inline ::apollo::common::monitor::MonitorMessageItem_MessageSource MonitorMessageItem::source() const {
  // @@protoc_insertion_point(field_get:apollo.common.monitor.MonitorMessageItem.source)
  return _internal_source();
}
inline void MonitorMessageItem::_internal_set_source(::apollo::common::monitor::MonitorMessageItem_MessageSource value) {
  assert(::apollo::common::monitor::MonitorMessageItem_MessageSource_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  source_ = value;
}
inline void MonitorMessageItem::set_source(::apollo::common::monitor::MonitorMessageItem_MessageSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:apollo.common.monitor.MonitorMessageItem.source)
}

// optional string msg = 2;
inline bool MonitorMessageItem::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MonitorMessageItem::has_msg() const {
  return _internal_has_msg();
}
inline void MonitorMessageItem::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MonitorMessageItem::msg() const {
  // @@protoc_insertion_point(field_get:apollo.common.monitor.MonitorMessageItem.msg)
  return _internal_msg();
}
inline void MonitorMessageItem::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:apollo.common.monitor.MonitorMessageItem.msg)
}
inline std::string* MonitorMessageItem::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:apollo.common.monitor.MonitorMessageItem.msg)
  return _internal_mutable_msg();
}
inline const std::string& MonitorMessageItem::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void MonitorMessageItem::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MonitorMessageItem::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.monitor.MonitorMessageItem.msg)
}
inline void MonitorMessageItem::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.monitor.MonitorMessageItem.msg)
}
inline void MonitorMessageItem::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.monitor.MonitorMessageItem.msg)
}
inline std::string* MonitorMessageItem::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MonitorMessageItem::release_msg() {
  // @@protoc_insertion_point(field_release:apollo.common.monitor.MonitorMessageItem.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorMessageItem::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.monitor.MonitorMessageItem.msg)
}

// optional .apollo.common.monitor.MonitorMessageItem.LogLevel log_level = 3 [default = INFO];
inline bool MonitorMessageItem::_internal_has_log_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MonitorMessageItem::has_log_level() const {
  return _internal_has_log_level();
}
inline void MonitorMessageItem::clear_log_level() {
  log_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::common::monitor::MonitorMessageItem_LogLevel MonitorMessageItem::_internal_log_level() const {
  return static_cast< ::apollo::common::monitor::MonitorMessageItem_LogLevel >(log_level_);
}
inline ::apollo::common::monitor::MonitorMessageItem_LogLevel MonitorMessageItem::log_level() const {
  // @@protoc_insertion_point(field_get:apollo.common.monitor.MonitorMessageItem.log_level)
  return _internal_log_level();
}
inline void MonitorMessageItem::_internal_set_log_level(::apollo::common::monitor::MonitorMessageItem_LogLevel value) {
  assert(::apollo::common::monitor::MonitorMessageItem_LogLevel_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  log_level_ = value;
}
inline void MonitorMessageItem::set_log_level(::apollo::common::monitor::MonitorMessageItem_LogLevel value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:apollo.common.monitor.MonitorMessageItem.log_level)
}

// -------------------------------------------------------------------

// MonitorMessage

// optional .apollo.common.Header header = 1;
inline bool MonitorMessage::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool MonitorMessage::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& MonitorMessage::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& MonitorMessage::header() const {
  // @@protoc_insertion_point(field_get:apollo.common.monitor.MonitorMessage.header)
  return _internal_header();
}
inline ::apollo::common::Header* MonitorMessage::release_header() {
  // @@protoc_insertion_point(field_release:apollo.common.monitor.MonitorMessage.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* MonitorMessage::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* MonitorMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.common.monitor.MonitorMessage.header)
  return _internal_mutable_header();
}
inline void MonitorMessage::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.monitor.MonitorMessage.header)
}

// repeated .apollo.common.monitor.MonitorMessageItem item = 2;
inline int MonitorMessage::_internal_item_size() const {
  return item_.size();
}
inline int MonitorMessage::item_size() const {
  return _internal_item_size();
}
inline void MonitorMessage::clear_item() {
  item_.Clear();
}
inline ::apollo::common::monitor::MonitorMessageItem* MonitorMessage::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.monitor.MonitorMessage.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::monitor::MonitorMessageItem >*
MonitorMessage::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.monitor.MonitorMessage.item)
  return &item_;
}
inline const ::apollo::common::monitor::MonitorMessageItem& MonitorMessage::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::apollo::common::monitor::MonitorMessageItem& MonitorMessage::item(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.monitor.MonitorMessage.item)
  return _internal_item(index);
}
inline ::apollo::common::monitor::MonitorMessageItem* MonitorMessage::_internal_add_item() {
  return item_.Add();
}
inline ::apollo::common::monitor::MonitorMessageItem* MonitorMessage::add_item() {
  // @@protoc_insertion_point(field_add:apollo.common.monitor.MonitorMessage.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::monitor::MonitorMessageItem >&
MonitorMessage::item() const {
  // @@protoc_insertion_point(field_list:apollo.common.monitor.MonitorMessage.item)
  return item_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace common
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::common::monitor::MonitorMessageItem_MessageSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::monitor::MonitorMessageItem_MessageSource>() {
  return ::apollo::common::monitor::MonitorMessageItem_MessageSource_descriptor();
}
template <> struct is_proto_enum< ::apollo::common::monitor::MonitorMessageItem_LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::common::monitor::MonitorMessageItem_LogLevel>() {
  return ::apollo::common::monitor::MonitorMessageItem_LogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto
