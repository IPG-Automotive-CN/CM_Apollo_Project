// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/lane/common/denseline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace denseline {
class DenselineParam;
class DenselineParamDefaultTypeInternal;
extern DenselineParamDefaultTypeInternal _DenselineParam_default_instance_;
class ModelParam;
class ModelParamDefaultTypeInternal;
extern ModelParamDefaultTypeInternal _ModelParam_default_instance_;
class NetworkParam;
class NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
}  // namespace denseline
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::denseline::DenselineParam* Arena::CreateMaybeMessage<::apollo::perception::camera::denseline::DenselineParam>(Arena*);
template<> ::apollo::perception::camera::denseline::ModelParam* Arena::CreateMaybeMessage<::apollo::perception::camera::denseline::ModelParam>(Arena*);
template<> ::apollo::perception::camera::denseline::NetworkParam* Arena::CreateMaybeMessage<::apollo::perception::camera::denseline::NetworkParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace denseline {

// ===================================================================

class DenselineParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.denseline.DenselineParam) */ {
 public:
  DenselineParam();
  virtual ~DenselineParam();

  DenselineParam(const DenselineParam& from);
  DenselineParam(DenselineParam&& from) noexcept
    : DenselineParam() {
    *this = ::std::move(from);
  }

  inline DenselineParam& operator=(const DenselineParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenselineParam& operator=(DenselineParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenselineParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenselineParam* internal_default_instance() {
    return reinterpret_cast<const DenselineParam*>(
               &_DenselineParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DenselineParam& a, DenselineParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DenselineParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenselineParam* New() const final {
    return CreateMaybeMessage<DenselineParam>(nullptr);
  }

  DenselineParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenselineParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenselineParam& from);
  void MergeFrom(const DenselineParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenselineParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.denseline.DenselineParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelParamFieldNumber = 1,
    kNetParamFieldNumber = 2,
  };
  // optional .apollo.perception.camera.denseline.ModelParam model_param = 1;
  bool has_model_param() const;
  private:
  bool _internal_has_model_param() const;
  public:
  void clear_model_param();
  const ::apollo::perception::camera::denseline::ModelParam& model_param() const;
  ::apollo::perception::camera::denseline::ModelParam* release_model_param();
  ::apollo::perception::camera::denseline::ModelParam* mutable_model_param();
  void set_allocated_model_param(::apollo::perception::camera::denseline::ModelParam* model_param);
  private:
  const ::apollo::perception::camera::denseline::ModelParam& _internal_model_param() const;
  ::apollo::perception::camera::denseline::ModelParam* _internal_mutable_model_param();
  public:

  // optional .apollo.perception.camera.denseline.NetworkParam net_param = 2;
  bool has_net_param() const;
  private:
  bool _internal_has_net_param() const;
  public:
  void clear_net_param();
  const ::apollo::perception::camera::denseline::NetworkParam& net_param() const;
  ::apollo::perception::camera::denseline::NetworkParam* release_net_param();
  ::apollo::perception::camera::denseline::NetworkParam* mutable_net_param();
  void set_allocated_net_param(::apollo::perception::camera::denseline::NetworkParam* net_param);
  private:
  const ::apollo::perception::camera::denseline::NetworkParam& _internal_net_param() const;
  ::apollo::perception::camera::denseline::NetworkParam* _internal_mutable_net_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.denseline.DenselineParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::denseline::ModelParam* model_param_;
  ::apollo::perception::camera::denseline::NetworkParam* net_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto;
};
// -------------------------------------------------------------------

class ModelParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.denseline.ModelParam) */ {
 public:
  ModelParam();
  virtual ~ModelParam();

  ModelParam(const ModelParam& from);
  ModelParam(ModelParam&& from) noexcept
    : ModelParam() {
    *this = ::std::move(from);
  }

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelParam& operator=(ModelParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelParam* internal_default_instance() {
    return reinterpret_cast<const ModelParam*>(
               &_ModelParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelParam& a, ModelParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelParam* New() const final {
    return CreateMaybeMessage<ModelParam>(nullptr);
  }

  ModelParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelParam& from);
  void MergeFrom(const ModelParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.denseline.ModelParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kProtoFileFieldNumber = 2,
    kWeightFileFieldNumber = 3,
    kModelTypeFieldNumber = 13,
    kInputOffsetYFieldNumber = 5,
    kInputOffsetXFieldNumber = 6,
    kIsBgrFieldNumber = 12,
    kResizeScaleFieldNumber = 4,
    kCropHeightFieldNumber = 7,
    kCropWidthFieldNumber = 8,
    kMeanBFieldNumber = 9,
    kMeanGFieldNumber = 10,
    kMeanRFieldNumber = 11,
  };
  // optional string model_name = 1 [default = "denseline"];
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string proto_file = 2 [default = "caffe.pt"];
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  void set_proto_file(const std::string& value);
  void set_proto_file(std::string&& value);
  void set_proto_file(const char* value);
  void set_proto_file(const char* value, size_t size);
  std::string* mutable_proto_file();
  std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional string weight_file = 3 [default = "caffe.model"];
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  void set_weight_file(const std::string& value);
  void set_weight_file(std::string&& value);
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  std::string* mutable_weight_file();
  std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional string model_type = 13 [default = "RTNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional uint32 input_offset_y = 5 [default = 0];
  bool has_input_offset_y() const;
  private:
  bool _internal_has_input_offset_y() const;
  public:
  void clear_input_offset_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_y() const;
  void set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_offset_y() const;
  void _internal_set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 input_offset_x = 6 [default = 0];
  bool has_input_offset_x() const;
  private:
  bool _internal_has_input_offset_x() const;
  public:
  void clear_input_offset_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_x() const;
  void set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_offset_x() const;
  void _internal_set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_bgr = 12 [default = true];
  bool has_is_bgr() const;
  private:
  bool _internal_has_is_bgr() const;
  public:
  void clear_is_bgr();
  bool is_bgr() const;
  void set_is_bgr(bool value);
  private:
  bool _internal_is_bgr() const;
  void _internal_set_is_bgr(bool value);
  public:

  // optional float resize_scale = 4 [default = 1];
  bool has_resize_scale() const;
  private:
  bool _internal_has_resize_scale() const;
  public:
  void clear_resize_scale();
  float resize_scale() const;
  void set_resize_scale(float value);
  private:
  float _internal_resize_scale() const;
  void _internal_set_resize_scale(float value);
  public:

  // optional uint32 crop_height = 7 [default = 512];
  bool has_crop_height() const;
  private:
  bool _internal_has_crop_height() const;
  public:
  void clear_crop_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_height() const;
  void set_crop_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_height() const;
  void _internal_set_crop_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crop_width = 8 [default = 512];
  bool has_crop_width() const;
  private:
  bool _internal_has_crop_width() const;
  public:
  void clear_crop_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_width() const;
  void set_crop_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crop_width() const;
  void _internal_set_crop_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mean_b = 9 [default = 95];
  bool has_mean_b() const;
  private:
  bool _internal_has_mean_b() const;
  public:
  void clear_mean_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 mean_b() const;
  void set_mean_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mean_b() const;
  void _internal_set_mean_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mean_g = 10 [default = 99];
  bool has_mean_g() const;
  private:
  bool _internal_has_mean_g() const;
  public:
  void clear_mean_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 mean_g() const;
  void set_mean_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mean_g() const;
  void _internal_set_mean_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mean_r = 11 [default = 96];
  bool has_mean_r() const;
  private:
  bool _internal_has_mean_r() const;
  public:
  void clear_mean_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 mean_r() const;
  void set_mean_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mean_r() const;
  void _internal_set_mean_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.denseline.ModelParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_proto_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_weight_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_x_;
  bool is_bgr_;
  float resize_scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crop_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mean_b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mean_g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mean_r_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto;
};
// -------------------------------------------------------------------

class NetworkParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.denseline.NetworkParam) */ {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);
  NetworkParam(NetworkParam&& from) noexcept
    : NetworkParam() {
    *this = ::std::move(from);
  }

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParam& operator=(NetworkParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkParam& a, NetworkParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParam* New() const final {
    return CreateMaybeMessage<NetworkParam>(nullptr);
  }

  NetworkParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.denseline.NetworkParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalBlobInt8FieldNumber = 3,
    kInBlobFieldNumber = 1,
    kOutBlobFieldNumber = 2,
  };
  // repeated string internal_blob_int8 = 3;
  int internal_blob_int8_size() const;
  private:
  int _internal_internal_blob_int8_size() const;
  public:
  void clear_internal_blob_int8();
  const std::string& internal_blob_int8(int index) const;
  std::string* mutable_internal_blob_int8(int index);
  void set_internal_blob_int8(int index, const std::string& value);
  void set_internal_blob_int8(int index, std::string&& value);
  void set_internal_blob_int8(int index, const char* value);
  void set_internal_blob_int8(int index, const char* value, size_t size);
  std::string* add_internal_blob_int8();
  void add_internal_blob_int8(const std::string& value);
  void add_internal_blob_int8(std::string&& value);
  void add_internal_blob_int8(const char* value);
  void add_internal_blob_int8(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& internal_blob_int8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_internal_blob_int8();
  private:
  const std::string& _internal_internal_blob_int8(int index) const;
  std::string* _internal_add_internal_blob_int8();
  public:

  // optional string in_blob = 1 [default = "data"];
  bool has_in_blob() const;
  private:
  bool _internal_has_in_blob() const;
  public:
  void clear_in_blob();
  const std::string& in_blob() const;
  void set_in_blob(const std::string& value);
  void set_in_blob(std::string&& value);
  void set_in_blob(const char* value);
  void set_in_blob(const char* value, size_t size);
  std::string* mutable_in_blob();
  std::string* release_in_blob();
  void set_allocated_in_blob(std::string* in_blob);
  private:
  const std::string& _internal_in_blob() const;
  void _internal_set_in_blob(const std::string& value);
  std::string* _internal_mutable_in_blob();
  public:

  // optional string out_blob = 2 [default = "conv_out"];
  bool has_out_blob() const;
  private:
  bool _internal_has_out_blob() const;
  public:
  void clear_out_blob();
  const std::string& out_blob() const;
  void set_out_blob(const std::string& value);
  void set_out_blob(std::string&& value);
  void set_out_blob(const char* value);
  void set_out_blob(const char* value, size_t size);
  std::string* mutable_out_blob();
  std::string* release_out_blob();
  void set_allocated_out_blob(std::string* out_blob);
  private:
  const std::string& _internal_out_blob() const;
  void _internal_set_out_blob(const std::string& value);
  std::string* _internal_mutable_out_blob();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.denseline.NetworkParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> internal_blob_int8_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_in_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr in_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_out_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_blob_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DenselineParam

// optional .apollo.perception.camera.denseline.ModelParam model_param = 1;
inline bool DenselineParam::_internal_has_model_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || model_param_ != nullptr);
  return value;
}
inline bool DenselineParam::has_model_param() const {
  return _internal_has_model_param();
}
inline void DenselineParam::clear_model_param() {
  if (model_param_ != nullptr) model_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::denseline::ModelParam& DenselineParam::_internal_model_param() const {
  const ::apollo::perception::camera::denseline::ModelParam* p = model_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::denseline::ModelParam*>(
      &::apollo::perception::camera::denseline::_ModelParam_default_instance_);
}
inline const ::apollo::perception::camera::denseline::ModelParam& DenselineParam::model_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.DenselineParam.model_param)
  return _internal_model_param();
}
inline ::apollo::perception::camera::denseline::ModelParam* DenselineParam::release_model_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.DenselineParam.model_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::denseline::ModelParam* temp = model_param_;
  model_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::denseline::ModelParam* DenselineParam::_internal_mutable_model_param() {
  _has_bits_[0] |= 0x00000001u;
  if (model_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::denseline::ModelParam>(GetArenaNoVirtual());
    model_param_ = p;
  }
  return model_param_;
}
inline ::apollo::perception::camera::denseline::ModelParam* DenselineParam::mutable_model_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.DenselineParam.model_param)
  return _internal_mutable_model_param();
}
inline void DenselineParam::set_allocated_model_param(::apollo::perception::camera::denseline::ModelParam* model_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_param_;
  }
  if (model_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_param_ = model_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.DenselineParam.model_param)
}

// optional .apollo.perception.camera.denseline.NetworkParam net_param = 2;
inline bool DenselineParam::_internal_has_net_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || net_param_ != nullptr);
  return value;
}
inline bool DenselineParam::has_net_param() const {
  return _internal_has_net_param();
}
inline void DenselineParam::clear_net_param() {
  if (net_param_ != nullptr) net_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::denseline::NetworkParam& DenselineParam::_internal_net_param() const {
  const ::apollo::perception::camera::denseline::NetworkParam* p = net_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::denseline::NetworkParam*>(
      &::apollo::perception::camera::denseline::_NetworkParam_default_instance_);
}
inline const ::apollo::perception::camera::denseline::NetworkParam& DenselineParam::net_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.DenselineParam.net_param)
  return _internal_net_param();
}
inline ::apollo::perception::camera::denseline::NetworkParam* DenselineParam::release_net_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.DenselineParam.net_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::denseline::NetworkParam* temp = net_param_;
  net_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::denseline::NetworkParam* DenselineParam::_internal_mutable_net_param() {
  _has_bits_[0] |= 0x00000002u;
  if (net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::denseline::NetworkParam>(GetArenaNoVirtual());
    net_param_ = p;
  }
  return net_param_;
}
inline ::apollo::perception::camera::denseline::NetworkParam* DenselineParam::mutable_net_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.DenselineParam.net_param)
  return _internal_mutable_net_param();
}
inline void DenselineParam::set_allocated_net_param(::apollo::perception::camera::denseline::NetworkParam* net_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete net_param_;
  }
  if (net_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      net_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.DenselineParam.net_param)
}

// -------------------------------------------------------------------

// ModelParam

// optional string model_name = 1 [default = "denseline"];
inline bool ModelParam::_internal_has_model_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelParam::has_model_name() const {
  return _internal_has_model_name();
}
inline void ModelParam::clear_model_name() {
  model_name_.ClearToDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.model_name)
  return _internal_model_name();
}
inline void ModelParam::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.model_name)
}
inline std::string* ModelParam::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.ModelParam.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ModelParam::_internal_model_name() const {
  return model_name_.GetNoArena();
}
inline void ModelParam::_internal_set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), value);
}
inline void ModelParam::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(
    &::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.denseline.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.ModelParam.model_name)
}
inline std::string* ModelParam::_internal_mutable_model_name() {
  _has_bits_[0] |= 0x00000001u;
  return model_name_.MutableNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get());
}
inline std::string* ModelParam::release_model_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.ModelParam.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_name_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get());
}
inline void ModelParam::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_name_.SetAllocatedNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), model_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "caffe.pt"];
inline bool ModelParam::_internal_has_proto_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void ModelParam::clear_proto_file() {
  proto_file_.ClearToDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.proto_file)
  return _internal_proto_file();
}
inline void ModelParam::set_proto_file(const std::string& value) {
  _internal_set_proto_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.proto_file)
}
inline std::string* ModelParam::mutable_proto_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.ModelParam.proto_file)
  return _internal_mutable_proto_file();
}
inline const std::string& ModelParam::_internal_proto_file() const {
  return proto_file_.GetNoArena();
}
inline void ModelParam::_internal_set_proto_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), value);
}
inline void ModelParam::set_proto_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(
    &::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.denseline.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.ModelParam.proto_file)
}
inline std::string* ModelParam::_internal_mutable_proto_file() {
  _has_bits_[0] |= 0x00000002u;
  return proto_file_.MutableNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
}
inline std::string* ModelParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.ModelParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
}
inline void ModelParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_file_.SetAllocatedNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), proto_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "caffe.model"];
inline bool ModelParam::_internal_has_weight_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void ModelParam::clear_weight_file() {
  weight_file_.ClearToDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.weight_file)
  return _internal_weight_file();
}
inline void ModelParam::set_weight_file(const std::string& value) {
  _internal_set_weight_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.weight_file)
}
inline std::string* ModelParam::mutable_weight_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.ModelParam.weight_file)
  return _internal_mutable_weight_file();
}
inline const std::string& ModelParam::_internal_weight_file() const {
  return weight_file_.GetNoArena();
}
inline void ModelParam::_internal_set_weight_file(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), value);
}
inline void ModelParam::set_weight_file(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(
    &::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.denseline.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.ModelParam.weight_file)
}
inline std::string* ModelParam::_internal_mutable_weight_file() {
  _has_bits_[0] |= 0x00000004u;
  return weight_file_.MutableNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
}
inline std::string* ModelParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.ModelParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return weight_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
}
inline void ModelParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  weight_file_.SetAllocatedNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.ModelParam.weight_file)
}

// optional float resize_scale = 4 [default = 1];
inline bool ModelParam::_internal_has_resize_scale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelParam::has_resize_scale() const {
  return _internal_has_resize_scale();
}
inline void ModelParam::clear_resize_scale() {
  resize_scale_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ModelParam::_internal_resize_scale() const {
  return resize_scale_;
}
inline float ModelParam::resize_scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.resize_scale)
  return _internal_resize_scale();
}
inline void ModelParam::_internal_set_resize_scale(float value) {
  _has_bits_[0] |= 0x00000080u;
  resize_scale_ = value;
}
inline void ModelParam::set_resize_scale(float value) {
  _internal_set_resize_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.resize_scale)
}

// optional uint32 input_offset_y = 5 [default = 0];
inline bool ModelParam::_internal_has_input_offset_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelParam::has_input_offset_y() const {
  return _internal_has_input_offset_y();
}
inline void ModelParam::clear_input_offset_y() {
  input_offset_y_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_input_offset_y() const {
  return input_offset_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::input_offset_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.input_offset_y)
  return _internal_input_offset_y();
}
inline void ModelParam::_internal_set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  input_offset_y_ = value;
}
inline void ModelParam::set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_offset_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.input_offset_y)
}

// optional uint32 input_offset_x = 6 [default = 0];
inline bool ModelParam::_internal_has_input_offset_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelParam::has_input_offset_x() const {
  return _internal_has_input_offset_x();
}
inline void ModelParam::clear_input_offset_x() {
  input_offset_x_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_input_offset_x() const {
  return input_offset_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::input_offset_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.input_offset_x)
  return _internal_input_offset_x();
}
inline void ModelParam::_internal_set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  input_offset_x_ = value;
}
inline void ModelParam::set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_offset_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.input_offset_x)
}

// optional uint32 crop_height = 7 [default = 512];
inline bool ModelParam::_internal_has_crop_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelParam::has_crop_height() const {
  return _internal_has_crop_height();
}
inline void ModelParam::clear_crop_height() {
  crop_height_ = 512u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_crop_height() const {
  return crop_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::crop_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.crop_height)
  return _internal_crop_height();
}
inline void ModelParam::_internal_set_crop_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  crop_height_ = value;
}
inline void ModelParam::set_crop_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.crop_height)
}

// optional uint32 crop_width = 8 [default = 512];
inline bool ModelParam::_internal_has_crop_width() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelParam::has_crop_width() const {
  return _internal_has_crop_width();
}
inline void ModelParam::clear_crop_width() {
  crop_width_ = 512u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_crop_width() const {
  return crop_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::crop_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.crop_width)
  return _internal_crop_width();
}
inline void ModelParam::_internal_set_crop_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  crop_width_ = value;
}
inline void ModelParam::set_crop_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crop_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.crop_width)
}

// optional uint32 mean_b = 9 [default = 95];
inline bool ModelParam::_internal_has_mean_b() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelParam::has_mean_b() const {
  return _internal_has_mean_b();
}
inline void ModelParam::clear_mean_b() {
  mean_b_ = 95u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_mean_b() const {
  return mean_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::mean_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.mean_b)
  return _internal_mean_b();
}
inline void ModelParam::_internal_set_mean_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  mean_b_ = value;
}
inline void ModelParam::set_mean_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mean_b(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.mean_b)
}

// optional uint32 mean_g = 10 [default = 99];
inline bool ModelParam::_internal_has_mean_g() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelParam::has_mean_g() const {
  return _internal_has_mean_g();
}
inline void ModelParam::clear_mean_g() {
  mean_g_ = 99u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_mean_g() const {
  return mean_g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::mean_g() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.mean_g)
  return _internal_mean_g();
}
inline void ModelParam::_internal_set_mean_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  mean_g_ = value;
}
inline void ModelParam::set_mean_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mean_g(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.mean_g)
}

// optional uint32 mean_r = 11 [default = 96];
inline bool ModelParam::_internal_has_mean_r() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelParam::has_mean_r() const {
  return _internal_has_mean_r();
}
inline void ModelParam::clear_mean_r() {
  mean_r_ = 96u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::_internal_mean_r() const {
  return mean_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelParam::mean_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.mean_r)
  return _internal_mean_r();
}
inline void ModelParam::_internal_set_mean_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  mean_r_ = value;
}
inline void ModelParam::set_mean_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mean_r(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.mean_r)
}

// optional bool is_bgr = 12 [default = true];
inline bool ModelParam::_internal_has_is_bgr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelParam::has_is_bgr() const {
  return _internal_has_is_bgr();
}
inline void ModelParam::clear_is_bgr() {
  is_bgr_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ModelParam::_internal_is_bgr() const {
  return is_bgr_;
}
inline bool ModelParam::is_bgr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.is_bgr)
  return _internal_is_bgr();
}
inline void ModelParam::_internal_set_is_bgr(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_bgr_ = value;
}
inline void ModelParam::set_is_bgr(bool value) {
  _internal_set_is_bgr(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.is_bgr)
}

// optional string model_type = 13 [default = "RTNet"];
inline bool ModelParam::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void ModelParam::clear_model_type() {
  model_type_.ClearToDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.ModelParam.model_type)
  return _internal_model_type();
}
inline void ModelParam::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.ModelParam.model_type)
}
inline std::string* ModelParam::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.ModelParam.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& ModelParam::_internal_model_type() const {
  return model_type_.GetNoArena();
}
inline void ModelParam::_internal_set_model_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  model_type_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), value);
}
inline void ModelParam::set_model_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  model_type_.SetNoArena(
    &::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.denseline.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  model_type_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  model_type_.SetNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.ModelParam.model_type)
}
inline std::string* ModelParam::_internal_mutable_model_type() {
  _has_bits_[0] |= 0x00000008u;
  return model_type_.MutableNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline std::string* ModelParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.ModelParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return model_type_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline void ModelParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  model_type_.SetAllocatedNoArena(&::apollo::perception::camera::denseline::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), model_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.ModelParam.model_type)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string in_blob = 1 [default = "data"];
inline bool NetworkParam::_internal_has_in_blob() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_in_blob() const {
  return _internal_has_in_blob();
}
inline void NetworkParam::clear_in_blob() {
  in_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkParam::in_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.NetworkParam.in_blob)
  return _internal_in_blob();
}
inline void NetworkParam::set_in_blob(const std::string& value) {
  _internal_set_in_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.NetworkParam.in_blob)
}
inline std::string* NetworkParam::mutable_in_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.NetworkParam.in_blob)
  return _internal_mutable_in_blob();
}
inline const std::string& NetworkParam::_internal_in_blob() const {
  return in_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_in_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  in_blob_.SetNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get(), value);
}
inline void NetworkParam::set_in_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  in_blob_.SetNoArena(
    &::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.denseline.NetworkParam.in_blob)
}
inline void NetworkParam::set_in_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  in_blob_.SetNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.NetworkParam.in_blob)
}
inline void NetworkParam::set_in_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  in_blob_.SetNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.NetworkParam.in_blob)
}
inline std::string* NetworkParam::_internal_mutable_in_blob() {
  _has_bits_[0] |= 0x00000001u;
  return in_blob_.MutableNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get());
}
inline std::string* NetworkParam::release_in_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.NetworkParam.in_blob)
  if (!_internal_has_in_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return in_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get());
}
inline void NetworkParam::set_allocated_in_blob(std::string* in_blob) {
  if (in_blob != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  in_blob_.SetAllocatedNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_in_blob_.get(), in_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.NetworkParam.in_blob)
}

// optional string out_blob = 2 [default = "conv_out"];
inline bool NetworkParam::_internal_has_out_blob() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_out_blob() const {
  return _internal_has_out_blob();
}
inline void NetworkParam::clear_out_blob() {
  out_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkParam::out_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.NetworkParam.out_blob)
  return _internal_out_blob();
}
inline void NetworkParam::set_out_blob(const std::string& value) {
  _internal_set_out_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.NetworkParam.out_blob)
}
inline std::string* NetworkParam::mutable_out_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.NetworkParam.out_blob)
  return _internal_mutable_out_blob();
}
inline const std::string& NetworkParam::_internal_out_blob() const {
  return out_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_out_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  out_blob_.SetNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get(), value);
}
inline void NetworkParam::set_out_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  out_blob_.SetNoArena(
    &::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.denseline.NetworkParam.out_blob)
}
inline void NetworkParam::set_out_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  out_blob_.SetNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.NetworkParam.out_blob)
}
inline void NetworkParam::set_out_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  out_blob_.SetNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.NetworkParam.out_blob)
}
inline std::string* NetworkParam::_internal_mutable_out_blob() {
  _has_bits_[0] |= 0x00000002u;
  return out_blob_.MutableNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get());
}
inline std::string* NetworkParam::release_out_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.denseline.NetworkParam.out_blob)
  if (!_internal_has_out_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return out_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get());
}
inline void NetworkParam::set_allocated_out_blob(std::string* out_blob) {
  if (out_blob != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  out_blob_.SetAllocatedNoArena(&::apollo::perception::camera::denseline::NetworkParam::_i_give_permission_to_break_this_code_default_out_blob_.get(), out_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.denseline.NetworkParam.out_blob)
}

// repeated string internal_blob_int8 = 3;
inline int NetworkParam::_internal_internal_blob_int8_size() const {
  return internal_blob_int8_.size();
}
inline int NetworkParam::internal_blob_int8_size() const {
  return _internal_internal_blob_int8_size();
}
inline void NetworkParam::clear_internal_blob_int8() {
  internal_blob_int8_.Clear();
}
inline std::string* NetworkParam::add_internal_blob_int8() {
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  return _internal_add_internal_blob_int8();
}
inline const std::string& NetworkParam::_internal_internal_blob_int8(int index) const {
  return internal_blob_int8_.Get(index);
}
inline const std::string& NetworkParam::internal_blob_int8(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  return _internal_internal_blob_int8(index);
}
inline std::string* NetworkParam::mutable_internal_blob_int8(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  return internal_blob_int8_.Mutable(index);
}
inline void NetworkParam::set_internal_blob_int8(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  internal_blob_int8_.Mutable(index)->assign(value);
}
inline void NetworkParam::set_internal_blob_int8(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  internal_blob_int8_.Mutable(index)->assign(std::move(value));
}
inline void NetworkParam::set_internal_blob_int8(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  internal_blob_int8_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
}
inline void NetworkParam::set_internal_blob_int8(int index, const char* value, size_t size) {
  internal_blob_int8_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
}
inline std::string* NetworkParam::_internal_add_internal_blob_int8() {
  return internal_blob_int8_.Add();
}
inline void NetworkParam::add_internal_blob_int8(const std::string& value) {
  internal_blob_int8_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
}
inline void NetworkParam::add_internal_blob_int8(std::string&& value) {
  internal_blob_int8_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
}
inline void NetworkParam::add_internal_blob_int8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  internal_blob_int8_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
}
inline void NetworkParam::add_internal_blob_int8(const char* value, size_t size) {
  internal_blob_int8_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetworkParam::internal_blob_int8() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  return internal_blob_int8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetworkParam::mutable_internal_blob_int8() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.denseline.NetworkParam.internal_blob_int8)
  return &internal_blob_int8_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace denseline
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2flane_2fcommon_2fdenseline_2eproto
