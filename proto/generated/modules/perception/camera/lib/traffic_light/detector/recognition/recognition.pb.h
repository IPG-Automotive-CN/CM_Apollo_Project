// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/traffic_light/detector/recognition/recognition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace recognition {
class ClassifyParam;
class ClassifyParamDefaultTypeInternal;
extern ClassifyParamDefaultTypeInternal _ClassifyParam_default_instance_;
class RecognizeBoxParam;
class RecognizeBoxParamDefaultTypeInternal;
extern RecognizeBoxParamDefaultTypeInternal _RecognizeBoxParam_default_instance_;
}  // namespace recognition
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* Arena::CreateMaybeMessage<::apollo::perception::camera::traffic_light::recognition::ClassifyParam>(Arena*);
template<> ::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam* Arena::CreateMaybeMessage<::apollo::perception::camera::traffic_light::recognition::RecognizeBoxParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace traffic_light {
namespace recognition {

// ===================================================================

class ClassifyParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.traffic_light.recognition.ClassifyParam) */ {
 public:
  ClassifyParam();
  virtual ~ClassifyParam();

  ClassifyParam(const ClassifyParam& from);
  ClassifyParam(ClassifyParam&& from) noexcept
    : ClassifyParam() {
    *this = ::std::move(from);
  }

  inline ClassifyParam& operator=(const ClassifyParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassifyParam& operator=(ClassifyParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassifyParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassifyParam* internal_default_instance() {
    return reinterpret_cast<const ClassifyParam*>(
               &_ClassifyParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClassifyParam& a, ClassifyParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassifyParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassifyParam* New() const final {
    return CreateMaybeMessage<ClassifyParam>(nullptr);
  }

  ClassifyParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassifyParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassifyParam& from);
  void MergeFrom(const ClassifyParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassifyParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.traffic_light.recognition.ClassifyParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kModelTypeFieldNumber = 2,
    kInputBlobFieldNumber = 3,
    kOutputBlobFieldNumber = 4,
    kWeightFileFieldNumber = 5,
    kProtoFileFieldNumber = 6,
    kClassifyThresholdFieldNumber = 7,
    kClassifyResizeWidthFieldNumber = 8,
    kClassifyResizeHeightFieldNumber = 9,
    kScaleFieldNumber = 10,
    kMeanBFieldNumber = 12,
    kMeanGFieldNumber = 13,
    kMeanRFieldNumber = 14,
    kIsBgrFieldNumber = 15,
  };
  // optional string model_name = 1;
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string model_type = 2 [default = "CaffeNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional string input_blob = 3;
  bool has_input_blob() const;
  private:
  bool _internal_has_input_blob() const;
  public:
  void clear_input_blob();
  const std::string& input_blob() const;
  void set_input_blob(const std::string& value);
  void set_input_blob(std::string&& value);
  void set_input_blob(const char* value);
  void set_input_blob(const char* value, size_t size);
  std::string* mutable_input_blob();
  std::string* release_input_blob();
  void set_allocated_input_blob(std::string* input_blob);
  private:
  const std::string& _internal_input_blob() const;
  void _internal_set_input_blob(const std::string& value);
  std::string* _internal_mutable_input_blob();
  public:

  // optional string output_blob = 4;
  bool has_output_blob() const;
  private:
  bool _internal_has_output_blob() const;
  public:
  void clear_output_blob();
  const std::string& output_blob() const;
  void set_output_blob(const std::string& value);
  void set_output_blob(std::string&& value);
  void set_output_blob(const char* value);
  void set_output_blob(const char* value, size_t size);
  std::string* mutable_output_blob();
  std::string* release_output_blob();
  void set_allocated_output_blob(std::string* output_blob);
  private:
  const std::string& _internal_output_blob() const;
  void _internal_set_output_blob(const std::string& value);
  std::string* _internal_mutable_output_blob();
  public:

  // optional string weight_file = 5;
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  void set_weight_file(const std::string& value);
  void set_weight_file(std::string&& value);
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  std::string* mutable_weight_file();
  std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional string proto_file = 6;
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  void set_proto_file(const std::string& value);
  void set_proto_file(std::string&& value);
  void set_proto_file(const char* value);
  void set_proto_file(const char* value, size_t size);
  std::string* mutable_proto_file();
  std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional float classify_threshold = 7;
  bool has_classify_threshold() const;
  private:
  bool _internal_has_classify_threshold() const;
  public:
  void clear_classify_threshold();
  float classify_threshold() const;
  void set_classify_threshold(float value);
  private:
  float _internal_classify_threshold() const;
  void _internal_set_classify_threshold(float value);
  public:

  // optional int32 classify_resize_width = 8;
  bool has_classify_resize_width() const;
  private:
  bool _internal_has_classify_resize_width() const;
  public:
  void clear_classify_resize_width();
  ::PROTOBUF_NAMESPACE_ID::int32 classify_resize_width() const;
  void set_classify_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_classify_resize_width() const;
  void _internal_set_classify_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 classify_resize_height = 9;
  bool has_classify_resize_height() const;
  private:
  bool _internal_has_classify_resize_height() const;
  public:
  void clear_classify_resize_height();
  ::PROTOBUF_NAMESPACE_ID::int32 classify_resize_height() const;
  void set_classify_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_classify_resize_height() const;
  void _internal_set_classify_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float scale = 10;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float mean_b = 12 [default = 95];
  bool has_mean_b() const;
  private:
  bool _internal_has_mean_b() const;
  public:
  void clear_mean_b();
  float mean_b() const;
  void set_mean_b(float value);
  private:
  float _internal_mean_b() const;
  void _internal_set_mean_b(float value);
  public:

  // optional float mean_g = 13 [default = 99];
  bool has_mean_g() const;
  private:
  bool _internal_has_mean_g() const;
  public:
  void clear_mean_g();
  float mean_g() const;
  void set_mean_g(float value);
  private:
  float _internal_mean_g() const;
  void _internal_set_mean_g(float value);
  public:

  // optional float mean_r = 14 [default = 96];
  bool has_mean_r() const;
  private:
  bool _internal_has_mean_r() const;
  public:
  void clear_mean_r();
  float mean_r() const;
  void set_mean_r(float value);
  private:
  float _internal_mean_r() const;
  void _internal_set_mean_r(float value);
  public:

  // optional bool is_bgr = 15 [default = true];
  bool has_is_bgr() const;
  private:
  bool _internal_has_is_bgr() const;
  public:
  void clear_is_bgr();
  bool is_bgr() const;
  void set_is_bgr(bool value);
  private:
  bool _internal_is_bgr() const;
  void _internal_set_is_bgr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.traffic_light.recognition.ClassifyParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
  float classify_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 classify_resize_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 classify_resize_height_;
  float scale_;
  float mean_b_;
  float mean_g_;
  float mean_r_;
  bool is_bgr_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto;
};
// -------------------------------------------------------------------

class RecognizeBoxParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam) */ {
 public:
  RecognizeBoxParam();
  virtual ~RecognizeBoxParam();

  RecognizeBoxParam(const RecognizeBoxParam& from);
  RecognizeBoxParam(RecognizeBoxParam&& from) noexcept
    : RecognizeBoxParam() {
    *this = ::std::move(from);
  }

  inline RecognizeBoxParam& operator=(const RecognizeBoxParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeBoxParam& operator=(RecognizeBoxParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecognizeBoxParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecognizeBoxParam* internal_default_instance() {
    return reinterpret_cast<const RecognizeBoxParam*>(
               &_RecognizeBoxParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecognizeBoxParam& a, RecognizeBoxParam& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeBoxParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecognizeBoxParam* New() const final {
    return CreateMaybeMessage<RecognizeBoxParam>(nullptr);
  }

  RecognizeBoxParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecognizeBoxParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecognizeBoxParam& from);
  void MergeFrom(const RecognizeBoxParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeBoxParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticalModelFieldNumber = 1,
    kQuadrateModelFieldNumber = 2,
    kHorizontalModelFieldNumber = 3,
  };
  // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam vertical_model = 1;
  bool has_vertical_model() const;
  private:
  bool _internal_has_vertical_model() const;
  public:
  void clear_vertical_model();
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& vertical_model() const;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* release_vertical_model();
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* mutable_vertical_model();
  void set_allocated_vertical_model(::apollo::perception::camera::traffic_light::recognition::ClassifyParam* vertical_model);
  private:
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& _internal_vertical_model() const;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* _internal_mutable_vertical_model();
  public:

  // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam quadrate_model = 2;
  bool has_quadrate_model() const;
  private:
  bool _internal_has_quadrate_model() const;
  public:
  void clear_quadrate_model();
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& quadrate_model() const;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* release_quadrate_model();
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* mutable_quadrate_model();
  void set_allocated_quadrate_model(::apollo::perception::camera::traffic_light::recognition::ClassifyParam* quadrate_model);
  private:
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& _internal_quadrate_model() const;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* _internal_mutable_quadrate_model();
  public:

  // optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam horizontal_model = 3;
  bool has_horizontal_model() const;
  private:
  bool _internal_has_horizontal_model() const;
  public:
  void clear_horizontal_model();
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& horizontal_model() const;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* release_horizontal_model();
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* mutable_horizontal_model();
  void set_allocated_horizontal_model(::apollo::perception::camera::traffic_light::recognition::ClassifyParam* horizontal_model);
  private:
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& _internal_horizontal_model() const;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* _internal_mutable_horizontal_model();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* vertical_model_;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* quadrate_model_;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* horizontal_model_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClassifyParam

// optional string model_name = 1;
inline bool ClassifyParam::_internal_has_model_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassifyParam::has_model_name() const {
  return _internal_has_model_name();
}
inline void ClassifyParam::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClassifyParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
  return _internal_model_name();
}
inline void ClassifyParam::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
}
inline std::string* ClassifyParam::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ClassifyParam::_internal_model_name() const {
  return model_name_.GetNoArena();
}
inline void ClassifyParam::_internal_set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClassifyParam::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
}
inline void ClassifyParam::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
}
inline void ClassifyParam::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
}
inline std::string* ClassifyParam::_internal_mutable_model_name() {
  _has_bits_[0] |= 0x00000001u;
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClassifyParam::release_model_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClassifyParam::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_name)
}

// optional string model_type = 2 [default = "CaffeNet"];
inline bool ClassifyParam::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClassifyParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void ClassifyParam::clear_model_type() {
  model_type_.ClearToDefaultNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClassifyParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
  return _internal_model_type();
}
inline void ClassifyParam::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
}
inline std::string* ClassifyParam::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& ClassifyParam::_internal_model_type() const {
  return model_type_.GetNoArena();
}
inline void ClassifyParam::_internal_set_model_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_type_.SetNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get(), value);
}
inline void ClassifyParam::set_model_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_type_.SetNoArena(
    &::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
}
inline void ClassifyParam::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_type_.SetNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
}
inline void ClassifyParam::set_model_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_type_.SetNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
}
inline std::string* ClassifyParam::_internal_mutable_model_type() {
  _has_bits_[0] |= 0x00000002u;
  return model_type_.MutableNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline std::string* ClassifyParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_type_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline void ClassifyParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_type_.SetAllocatedNoArena(&::apollo::perception::camera::traffic_light::recognition::ClassifyParam::_i_give_permission_to_break_this_code_default_model_type_.get(), model_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.ClassifyParam.model_type)
}

// optional string input_blob = 3;
inline bool ClassifyParam::_internal_has_input_blob() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClassifyParam::has_input_blob() const {
  return _internal_has_input_blob();
}
inline void ClassifyParam::clear_input_blob() {
  input_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClassifyParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
  return _internal_input_blob();
}
inline void ClassifyParam::set_input_blob(const std::string& value) {
  _internal_set_input_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
}
inline std::string* ClassifyParam::mutable_input_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
  return _internal_mutable_input_blob();
}
inline const std::string& ClassifyParam::_internal_input_blob() const {
  return input_blob_.GetNoArena();
}
inline void ClassifyParam::_internal_set_input_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  input_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClassifyParam::set_input_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  input_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
}
inline void ClassifyParam::set_input_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  input_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
}
inline void ClassifyParam::set_input_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  input_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
}
inline std::string* ClassifyParam::_internal_mutable_input_blob() {
  _has_bits_[0] |= 0x00000004u;
  return input_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClassifyParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
  if (!_internal_has_input_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return input_blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClassifyParam::set_allocated_input_blob(std::string* input_blob) {
  if (input_blob != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.ClassifyParam.input_blob)
}

// optional string output_blob = 4;
inline bool ClassifyParam::_internal_has_output_blob() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ClassifyParam::has_output_blob() const {
  return _internal_has_output_blob();
}
inline void ClassifyParam::clear_output_blob() {
  output_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClassifyParam::output_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
  return _internal_output_blob();
}
inline void ClassifyParam::set_output_blob(const std::string& value) {
  _internal_set_output_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
}
inline std::string* ClassifyParam::mutable_output_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
  return _internal_mutable_output_blob();
}
inline const std::string& ClassifyParam::_internal_output_blob() const {
  return output_blob_.GetNoArena();
}
inline void ClassifyParam::_internal_set_output_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  output_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClassifyParam::set_output_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  output_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
}
inline void ClassifyParam::set_output_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  output_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
}
inline void ClassifyParam::set_output_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  output_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
}
inline std::string* ClassifyParam::_internal_mutable_output_blob() {
  _has_bits_[0] |= 0x00000008u;
  return output_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClassifyParam::release_output_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
  if (!_internal_has_output_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return output_blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClassifyParam::set_allocated_output_blob(std::string* output_blob) {
  if (output_blob != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  output_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.ClassifyParam.output_blob)
}

// optional string weight_file = 5;
inline bool ClassifyParam::_internal_has_weight_file() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ClassifyParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void ClassifyParam::clear_weight_file() {
  weight_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClassifyParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
  return _internal_weight_file();
}
inline void ClassifyParam::set_weight_file(const std::string& value) {
  _internal_set_weight_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
}
inline std::string* ClassifyParam::mutable_weight_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
  return _internal_mutable_weight_file();
}
inline const std::string& ClassifyParam::_internal_weight_file() const {
  return weight_file_.GetNoArena();
}
inline void ClassifyParam::_internal_set_weight_file(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  weight_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClassifyParam::set_weight_file(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  weight_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
}
inline void ClassifyParam::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  weight_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
}
inline void ClassifyParam::set_weight_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  weight_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
}
inline std::string* ClassifyParam::_internal_mutable_weight_file() {
  _has_bits_[0] |= 0x00000010u;
  return weight_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClassifyParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return weight_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClassifyParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  weight_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.ClassifyParam.weight_file)
}

// optional string proto_file = 6;
inline bool ClassifyParam::_internal_has_proto_file() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ClassifyParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void ClassifyParam::clear_proto_file() {
  proto_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ClassifyParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
  return _internal_proto_file();
}
inline void ClassifyParam::set_proto_file(const std::string& value) {
  _internal_set_proto_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
}
inline std::string* ClassifyParam::mutable_proto_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
  return _internal_mutable_proto_file();
}
inline const std::string& ClassifyParam::_internal_proto_file() const {
  return proto_file_.GetNoArena();
}
inline void ClassifyParam::_internal_set_proto_file(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  proto_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClassifyParam::set_proto_file(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  proto_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
}
inline void ClassifyParam::set_proto_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  proto_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
}
inline void ClassifyParam::set_proto_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  proto_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
}
inline std::string* ClassifyParam::_internal_mutable_proto_file() {
  _has_bits_[0] |= 0x00000020u;
  return proto_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClassifyParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return proto_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClassifyParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  proto_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.ClassifyParam.proto_file)
}

// optional float classify_threshold = 7;
inline bool ClassifyParam::_internal_has_classify_threshold() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ClassifyParam::has_classify_threshold() const {
  return _internal_has_classify_threshold();
}
inline void ClassifyParam::clear_classify_threshold() {
  classify_threshold_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ClassifyParam::_internal_classify_threshold() const {
  return classify_threshold_;
}
inline float ClassifyParam::classify_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.classify_threshold)
  return _internal_classify_threshold();
}
inline void ClassifyParam::_internal_set_classify_threshold(float value) {
  _has_bits_[0] |= 0x00000040u;
  classify_threshold_ = value;
}
inline void ClassifyParam::set_classify_threshold(float value) {
  _internal_set_classify_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.classify_threshold)
}

// optional int32 classify_resize_width = 8;
inline bool ClassifyParam::_internal_has_classify_resize_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClassifyParam::has_classify_resize_width() const {
  return _internal_has_classify_resize_width();
}
inline void ClassifyParam::clear_classify_resize_width() {
  classify_resize_width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyParam::_internal_classify_resize_width() const {
  return classify_resize_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyParam::classify_resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.classify_resize_width)
  return _internal_classify_resize_width();
}
inline void ClassifyParam::_internal_set_classify_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  classify_resize_width_ = value;
}
inline void ClassifyParam::set_classify_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_classify_resize_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.classify_resize_width)
}

// optional int32 classify_resize_height = 9;
inline bool ClassifyParam::_internal_has_classify_resize_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClassifyParam::has_classify_resize_height() const {
  return _internal_has_classify_resize_height();
}
inline void ClassifyParam::clear_classify_resize_height() {
  classify_resize_height_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyParam::_internal_classify_resize_height() const {
  return classify_resize_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClassifyParam::classify_resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.classify_resize_height)
  return _internal_classify_resize_height();
}
inline void ClassifyParam::_internal_set_classify_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  classify_resize_height_ = value;
}
inline void ClassifyParam::set_classify_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_classify_resize_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.classify_resize_height)
}

// optional float scale = 10;
inline bool ClassifyParam::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ClassifyParam::has_scale() const {
  return _internal_has_scale();
}
inline void ClassifyParam::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ClassifyParam::_internal_scale() const {
  return scale_;
}
inline float ClassifyParam::scale() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.scale)
  return _internal_scale();
}
inline void ClassifyParam::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000200u;
  scale_ = value;
}
inline void ClassifyParam::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.scale)
}

// optional float mean_b = 12 [default = 95];
inline bool ClassifyParam::_internal_has_mean_b() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ClassifyParam::has_mean_b() const {
  return _internal_has_mean_b();
}
inline void ClassifyParam::clear_mean_b() {
  mean_b_ = 95;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ClassifyParam::_internal_mean_b() const {
  return mean_b_;
}
inline float ClassifyParam::mean_b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.mean_b)
  return _internal_mean_b();
}
inline void ClassifyParam::_internal_set_mean_b(float value) {
  _has_bits_[0] |= 0x00000400u;
  mean_b_ = value;
}
inline void ClassifyParam::set_mean_b(float value) {
  _internal_set_mean_b(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.mean_b)
}

// optional float mean_g = 13 [default = 99];
inline bool ClassifyParam::_internal_has_mean_g() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ClassifyParam::has_mean_g() const {
  return _internal_has_mean_g();
}
inline void ClassifyParam::clear_mean_g() {
  mean_g_ = 99;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ClassifyParam::_internal_mean_g() const {
  return mean_g_;
}
inline float ClassifyParam::mean_g() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.mean_g)
  return _internal_mean_g();
}
inline void ClassifyParam::_internal_set_mean_g(float value) {
  _has_bits_[0] |= 0x00000800u;
  mean_g_ = value;
}
inline void ClassifyParam::set_mean_g(float value) {
  _internal_set_mean_g(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.mean_g)
}

// optional float mean_r = 14 [default = 96];
inline bool ClassifyParam::_internal_has_mean_r() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ClassifyParam::has_mean_r() const {
  return _internal_has_mean_r();
}
inline void ClassifyParam::clear_mean_r() {
  mean_r_ = 96;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ClassifyParam::_internal_mean_r() const {
  return mean_r_;
}
inline float ClassifyParam::mean_r() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.mean_r)
  return _internal_mean_r();
}
inline void ClassifyParam::_internal_set_mean_r(float value) {
  _has_bits_[0] |= 0x00001000u;
  mean_r_ = value;
}
inline void ClassifyParam::set_mean_r(float value) {
  _internal_set_mean_r(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.mean_r)
}

// optional bool is_bgr = 15 [default = true];
inline bool ClassifyParam::_internal_has_is_bgr() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ClassifyParam::has_is_bgr() const {
  return _internal_has_is_bgr();
}
inline void ClassifyParam::clear_is_bgr() {
  is_bgr_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ClassifyParam::_internal_is_bgr() const {
  return is_bgr_;
}
inline bool ClassifyParam::is_bgr() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.ClassifyParam.is_bgr)
  return _internal_is_bgr();
}
inline void ClassifyParam::_internal_set_is_bgr(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_bgr_ = value;
}
inline void ClassifyParam::set_is_bgr(bool value) {
  _internal_set_is_bgr(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.traffic_light.recognition.ClassifyParam.is_bgr)
}

// -------------------------------------------------------------------

// RecognizeBoxParam

// optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam vertical_model = 1;
inline bool RecognizeBoxParam::_internal_has_vertical_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vertical_model_ != nullptr);
  return value;
}
inline bool RecognizeBoxParam::has_vertical_model() const {
  return _internal_has_vertical_model();
}
inline void RecognizeBoxParam::clear_vertical_model() {
  if (vertical_model_ != nullptr) vertical_model_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& RecognizeBoxParam::_internal_vertical_model() const {
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* p = vertical_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam*>(
      &::apollo::perception::camera::traffic_light::recognition::_ClassifyParam_default_instance_);
}
inline const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& RecognizeBoxParam::vertical_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.vertical_model)
  return _internal_vertical_model();
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::release_vertical_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.vertical_model)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* temp = vertical_model_;
  vertical_model_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::_internal_mutable_vertical_model() {
  _has_bits_[0] |= 0x00000001u;
  if (vertical_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::traffic_light::recognition::ClassifyParam>(GetArenaNoVirtual());
    vertical_model_ = p;
  }
  return vertical_model_;
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::mutable_vertical_model() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.vertical_model)
  return _internal_mutable_vertical_model();
}
inline void RecognizeBoxParam::set_allocated_vertical_model(::apollo::perception::camera::traffic_light::recognition::ClassifyParam* vertical_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vertical_model_;
  }
  if (vertical_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertical_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertical_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vertical_model_ = vertical_model;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.vertical_model)
}

// optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam quadrate_model = 2;
inline bool RecognizeBoxParam::_internal_has_quadrate_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || quadrate_model_ != nullptr);
  return value;
}
inline bool RecognizeBoxParam::has_quadrate_model() const {
  return _internal_has_quadrate_model();
}
inline void RecognizeBoxParam::clear_quadrate_model() {
  if (quadrate_model_ != nullptr) quadrate_model_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& RecognizeBoxParam::_internal_quadrate_model() const {
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* p = quadrate_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam*>(
      &::apollo::perception::camera::traffic_light::recognition::_ClassifyParam_default_instance_);
}
inline const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& RecognizeBoxParam::quadrate_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.quadrate_model)
  return _internal_quadrate_model();
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::release_quadrate_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.quadrate_model)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* temp = quadrate_model_;
  quadrate_model_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::_internal_mutable_quadrate_model() {
  _has_bits_[0] |= 0x00000002u;
  if (quadrate_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::traffic_light::recognition::ClassifyParam>(GetArenaNoVirtual());
    quadrate_model_ = p;
  }
  return quadrate_model_;
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::mutable_quadrate_model() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.quadrate_model)
  return _internal_mutable_quadrate_model();
}
inline void RecognizeBoxParam::set_allocated_quadrate_model(::apollo::perception::camera::traffic_light::recognition::ClassifyParam* quadrate_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quadrate_model_;
  }
  if (quadrate_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quadrate_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quadrate_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  quadrate_model_ = quadrate_model;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.quadrate_model)
}

// optional .apollo.perception.camera.traffic_light.recognition.ClassifyParam horizontal_model = 3;
inline bool RecognizeBoxParam::_internal_has_horizontal_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || horizontal_model_ != nullptr);
  return value;
}
inline bool RecognizeBoxParam::has_horizontal_model() const {
  return _internal_has_horizontal_model();
}
inline void RecognizeBoxParam::clear_horizontal_model() {
  if (horizontal_model_ != nullptr) horizontal_model_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& RecognizeBoxParam::_internal_horizontal_model() const {
  const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* p = horizontal_model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam*>(
      &::apollo::perception::camera::traffic_light::recognition::_ClassifyParam_default_instance_);
}
inline const ::apollo::perception::camera::traffic_light::recognition::ClassifyParam& RecognizeBoxParam::horizontal_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.horizontal_model)
  return _internal_horizontal_model();
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::release_horizontal_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.horizontal_model)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* temp = horizontal_model_;
  horizontal_model_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::_internal_mutable_horizontal_model() {
  _has_bits_[0] |= 0x00000004u;
  if (horizontal_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::traffic_light::recognition::ClassifyParam>(GetArenaNoVirtual());
    horizontal_model_ = p;
  }
  return horizontal_model_;
}
inline ::apollo::perception::camera::traffic_light::recognition::ClassifyParam* RecognizeBoxParam::mutable_horizontal_model() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.horizontal_model)
  return _internal_mutable_horizontal_model();
}
inline void RecognizeBoxParam::set_allocated_horizontal_model(::apollo::perception::camera::traffic_light::recognition::ClassifyParam* horizontal_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete horizontal_model_;
  }
  if (horizontal_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horizontal_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontal_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  horizontal_model_ = horizontal_model;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.traffic_light.recognition.RecognizeBoxParam.horizontal_model)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace recognition
}  // namespace traffic_light
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ftraffic_5flight_2fdetector_2frecognition_2frecognition_2eproto
