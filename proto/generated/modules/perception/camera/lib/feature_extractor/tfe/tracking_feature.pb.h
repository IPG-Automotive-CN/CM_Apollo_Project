// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/feature_extractor/tfe/tracking_feature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace tracking_feature {
class ExternalParam;
class ExternalParamDefaultTypeInternal;
extern ExternalParamDefaultTypeInternal _ExternalParam_default_instance_;
class ExtractorParam;
class ExtractorParamDefaultTypeInternal;
extern ExtractorParamDefaultTypeInternal _ExtractorParam_default_instance_;
class FeatureParam;
class FeatureParamDefaultTypeInternal;
extern FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
class PSROIPoolingParam;
class PSROIPoolingParamDefaultTypeInternal;
extern PSROIPoolingParamDefaultTypeInternal _PSROIPoolingParam_default_instance_;
class ROIPoolingParam;
class ROIPoolingParamDefaultTypeInternal;
extern ROIPoolingParamDefaultTypeInternal _ROIPoolingParam_default_instance_;
}  // namespace tracking_feature
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::tracking_feature::ExternalParam* Arena::CreateMaybeMessage<::apollo::perception::camera::tracking_feature::ExternalParam>(Arena*);
template<> ::apollo::perception::camera::tracking_feature::ExtractorParam* Arena::CreateMaybeMessage<::apollo::perception::camera::tracking_feature::ExtractorParam>(Arena*);
template<> ::apollo::perception::camera::tracking_feature::FeatureParam* Arena::CreateMaybeMessage<::apollo::perception::camera::tracking_feature::FeatureParam>(Arena*);
template<> ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* Arena::CreateMaybeMessage<::apollo::perception::camera::tracking_feature::PSROIPoolingParam>(Arena*);
template<> ::apollo::perception::camera::tracking_feature::ROIPoolingParam* Arena::CreateMaybeMessage<::apollo::perception::camera::tracking_feature::ROIPoolingParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace tracking_feature {

enum ExtractorParam_FeatureType : int {
  ExtractorParam_FeatureType_ROIPooling = 0
};
bool ExtractorParam_FeatureType_IsValid(int value);
constexpr ExtractorParam_FeatureType ExtractorParam_FeatureType_FeatureType_MIN = ExtractorParam_FeatureType_ROIPooling;
constexpr ExtractorParam_FeatureType ExtractorParam_FeatureType_FeatureType_MAX = ExtractorParam_FeatureType_ROIPooling;
constexpr int ExtractorParam_FeatureType_FeatureType_ARRAYSIZE = ExtractorParam_FeatureType_FeatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtractorParam_FeatureType_descriptor();
template<typename T>
inline const std::string& ExtractorParam_FeatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtractorParam_FeatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtractorParam_FeatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExtractorParam_FeatureType_descriptor(), enum_t_value);
}
inline bool ExtractorParam_FeatureType_Parse(
    const std::string& name, ExtractorParam_FeatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExtractorParam_FeatureType>(
    ExtractorParam_FeatureType_descriptor(), name, value);
}
// ===================================================================

class FeatureParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.tracking_feature.FeatureParam) */ {
 public:
  FeatureParam();
  virtual ~FeatureParam();

  FeatureParam(const FeatureParam& from);
  FeatureParam(FeatureParam&& from) noexcept
    : FeatureParam() {
    *this = ::std::move(from);
  }

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureParam& operator=(FeatureParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureParam* internal_default_instance() {
    return reinterpret_cast<const FeatureParam*>(
               &_FeatureParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeatureParam& a, FeatureParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureParam* New() const final {
    return CreateMaybeMessage<FeatureParam>(nullptr);
  }

  FeatureParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureParam& from);
  void MergeFrom(const FeatureParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.tracking_feature.FeatureParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtractorFieldNumber = 2,
    kRemapModelFieldNumber = 3,
    kFeatStrideFieldNumber = 1,
  };
  // repeated .apollo.perception.camera.tracking_feature.ExtractorParam extractor = 2;
  int extractor_size() const;
  private:
  int _internal_extractor_size() const;
  public:
  void clear_extractor();
  ::apollo::perception::camera::tracking_feature::ExtractorParam* mutable_extractor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::tracking_feature::ExtractorParam >*
      mutable_extractor();
  private:
  const ::apollo::perception::camera::tracking_feature::ExtractorParam& _internal_extractor(int index) const;
  ::apollo::perception::camera::tracking_feature::ExtractorParam* _internal_add_extractor();
  public:
  const ::apollo::perception::camera::tracking_feature::ExtractorParam& extractor(int index) const;
  ::apollo::perception::camera::tracking_feature::ExtractorParam* add_extractor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::tracking_feature::ExtractorParam >&
      extractor() const;

  // optional string remap_model = 3;
  bool has_remap_model() const;
  private:
  bool _internal_has_remap_model() const;
  public:
  void clear_remap_model();
  const std::string& remap_model() const;
  void set_remap_model(const std::string& value);
  void set_remap_model(std::string&& value);
  void set_remap_model(const char* value);
  void set_remap_model(const char* value, size_t size);
  std::string* mutable_remap_model();
  std::string* release_remap_model();
  void set_allocated_remap_model(std::string* remap_model);
  private:
  const std::string& _internal_remap_model() const;
  void _internal_set_remap_model(const std::string& value);
  std::string* _internal_mutable_remap_model();
  public:

  // optional int32 feat_stride = 1 [default = 32];
  bool has_feat_stride() const;
  private:
  bool _internal_has_feat_stride() const;
  public:
  void clear_feat_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 feat_stride() const;
  void set_feat_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_feat_stride() const;
  void _internal_set_feat_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.tracking_feature.FeatureParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::tracking_feature::ExtractorParam > extractor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remap_model_;
  ::PROTOBUF_NAMESPACE_ID::int32 feat_stride_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ExtractorParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.tracking_feature.ExtractorParam) */ {
 public:
  ExtractorParam();
  virtual ~ExtractorParam();

  ExtractorParam(const ExtractorParam& from);
  ExtractorParam(ExtractorParam&& from) noexcept
    : ExtractorParam() {
    *this = ::std::move(from);
  }

  inline ExtractorParam& operator=(const ExtractorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractorParam& operator=(ExtractorParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtractorParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtractorParam* internal_default_instance() {
    return reinterpret_cast<const ExtractorParam*>(
               &_ExtractorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtractorParam& a, ExtractorParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractorParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtractorParam* New() const final {
    return CreateMaybeMessage<ExtractorParam>(nullptr);
  }

  ExtractorParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtractorParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtractorParam& from);
  void MergeFrom(const ExtractorParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractorParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.tracking_feature.ExtractorParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ExtractorParam_FeatureType FeatureType;
  static constexpr FeatureType ROIPooling =
    ExtractorParam_FeatureType_ROIPooling;
  static inline bool FeatureType_IsValid(int value) {
    return ExtractorParam_FeatureType_IsValid(value);
  }
  static constexpr FeatureType FeatureType_MIN =
    ExtractorParam_FeatureType_FeatureType_MIN;
  static constexpr FeatureType FeatureType_MAX =
    ExtractorParam_FeatureType_FeatureType_MAX;
  static constexpr int FeatureType_ARRAYSIZE =
    ExtractorParam_FeatureType_FeatureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FeatureType_descriptor() {
    return ExtractorParam_FeatureType_descriptor();
  }
  template<typename T>
  static inline const std::string& FeatureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FeatureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FeatureType_Name.");
    return ExtractorParam_FeatureType_Name(enum_t_value);
  }
  static inline bool FeatureType_Parse(const std::string& name,
      FeatureType* value) {
    return ExtractorParam_FeatureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeatBlobFieldNumber = 1,
    kRoiPoolingParamFieldNumber = 3,
    kPsRoiPoolingParamFieldNumber = 4,
    kFeatTypeFieldNumber = 2,
  };
  // optional string feat_blob = 1;
  bool has_feat_blob() const;
  private:
  bool _internal_has_feat_blob() const;
  public:
  void clear_feat_blob();
  const std::string& feat_blob() const;
  void set_feat_blob(const std::string& value);
  void set_feat_blob(std::string&& value);
  void set_feat_blob(const char* value);
  void set_feat_blob(const char* value, size_t size);
  std::string* mutable_feat_blob();
  std::string* release_feat_blob();
  void set_allocated_feat_blob(std::string* feat_blob);
  private:
  const std::string& _internal_feat_blob() const;
  void _internal_set_feat_blob(const std::string& value);
  std::string* _internal_mutable_feat_blob();
  public:

  // optional .apollo.perception.camera.tracking_feature.ROIPoolingParam roi_pooling_param = 3;
  bool has_roi_pooling_param() const;
  private:
  bool _internal_has_roi_pooling_param() const;
  public:
  void clear_roi_pooling_param();
  const ::apollo::perception::camera::tracking_feature::ROIPoolingParam& roi_pooling_param() const;
  ::apollo::perception::camera::tracking_feature::ROIPoolingParam* release_roi_pooling_param();
  ::apollo::perception::camera::tracking_feature::ROIPoolingParam* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::apollo::perception::camera::tracking_feature::ROIPoolingParam* roi_pooling_param);
  private:
  const ::apollo::perception::camera::tracking_feature::ROIPoolingParam& _internal_roi_pooling_param() const;
  ::apollo::perception::camera::tracking_feature::ROIPoolingParam* _internal_mutable_roi_pooling_param();
  public:

  // optional .apollo.perception.camera.tracking_feature.PSROIPoolingParam ps_roi_pooling_param = 4;
  bool has_ps_roi_pooling_param() const;
  private:
  bool _internal_has_ps_roi_pooling_param() const;
  public:
  void clear_ps_roi_pooling_param();
  const ::apollo::perception::camera::tracking_feature::PSROIPoolingParam& ps_roi_pooling_param() const;
  ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* release_ps_roi_pooling_param();
  ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* mutable_ps_roi_pooling_param();
  void set_allocated_ps_roi_pooling_param(::apollo::perception::camera::tracking_feature::PSROIPoolingParam* ps_roi_pooling_param);
  private:
  const ::apollo::perception::camera::tracking_feature::PSROIPoolingParam& _internal_ps_roi_pooling_param() const;
  ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* _internal_mutable_ps_roi_pooling_param();
  public:

  // optional .apollo.perception.camera.tracking_feature.ExtractorParam.FeatureType feat_type = 2 [default = ROIPooling];
  bool has_feat_type() const;
  private:
  bool _internal_has_feat_type() const;
  public:
  void clear_feat_type();
  ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType feat_type() const;
  void set_feat_type(::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType value);
  private:
  ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType _internal_feat_type() const;
  void _internal_set_feat_type(::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.tracking_feature.ExtractorParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feat_blob_;
  ::apollo::perception::camera::tracking_feature::ROIPoolingParam* roi_pooling_param_;
  ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* ps_roi_pooling_param_;
  int feat_type_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ROIPoolingParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.tracking_feature.ROIPoolingParam) */ {
 public:
  ROIPoolingParam();
  virtual ~ROIPoolingParam();

  ROIPoolingParam(const ROIPoolingParam& from);
  ROIPoolingParam(ROIPoolingParam&& from) noexcept
    : ROIPoolingParam() {
    *this = ::std::move(from);
  }

  inline ROIPoolingParam& operator=(const ROIPoolingParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIPoolingParam& operator=(ROIPoolingParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIPoolingParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIPoolingParam* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParam*>(
               &_ROIPoolingParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ROIPoolingParam& a, ROIPoolingParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIPoolingParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIPoolingParam* New() const final {
    return CreateMaybeMessage<ROIPoolingParam>(nullptr);
  }

  ROIPoolingParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIPoolingParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIPoolingParam& from);
  void MergeFrom(const ROIPoolingParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIPoolingParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.tracking_feature.ROIPoolingParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseFloorFieldNumber = 3,
    kPooledHFieldNumber = 1,
    kPooledWFieldNumber = 2,
  };
  // optional bool use_floor = 3 [default = false];
  bool has_use_floor() const;
  private:
  bool _internal_has_use_floor() const;
  public:
  void clear_use_floor();
  bool use_floor() const;
  void set_use_floor(bool value);
  private:
  bool _internal_use_floor() const;
  void _internal_set_use_floor(bool value);
  public:

  // optional int32 pooled_h = 1 [default = 3];
  bool has_pooled_h() const;
  private:
  bool _internal_has_pooled_h() const;
  public:
  void clear_pooled_h();
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_h() const;
  void set_pooled_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pooled_h() const;
  void _internal_set_pooled_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pooled_w = 2 [default = 3];
  bool has_pooled_w() const;
  private:
  bool _internal_has_pooled_w() const;
  public:
  void clear_pooled_w();
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_w() const;
  void set_pooled_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pooled_w() const;
  void _internal_set_pooled_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.tracking_feature.ROIPoolingParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool use_floor_;
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_h_;
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_w_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class PSROIPoolingParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.tracking_feature.PSROIPoolingParam) */ {
 public:
  PSROIPoolingParam();
  virtual ~PSROIPoolingParam();

  PSROIPoolingParam(const PSROIPoolingParam& from);
  PSROIPoolingParam(PSROIPoolingParam&& from) noexcept
    : PSROIPoolingParam() {
    *this = ::std::move(from);
  }

  inline PSROIPoolingParam& operator=(const PSROIPoolingParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSROIPoolingParam& operator=(PSROIPoolingParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PSROIPoolingParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSROIPoolingParam* internal_default_instance() {
    return reinterpret_cast<const PSROIPoolingParam*>(
               &_PSROIPoolingParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PSROIPoolingParam& a, PSROIPoolingParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PSROIPoolingParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PSROIPoolingParam* New() const final {
    return CreateMaybeMessage<PSROIPoolingParam>(nullptr);
  }

  PSROIPoolingParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PSROIPoolingParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PSROIPoolingParam& from);
  void MergeFrom(const PSROIPoolingParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSROIPoolingParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.tracking_feature.PSROIPoolingParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplePerPartFieldNumber = 7,
    kHeatMapAFieldNumber = 1,
    kOutputDimFieldNumber = 2,
    kGroupHeightFieldNumber = 3,
    kGroupWidthFieldNumber = 4,
    kPooledHeightFieldNumber = 5,
    kPooledWidthFieldNumber = 6,
  };
  // optional int32 sample_per_part = 7 [default = 4];
  bool has_sample_per_part() const;
  private:
  bool _internal_has_sample_per_part() const;
  public:
  void clear_sample_per_part();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_per_part() const;
  void set_sample_per_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_per_part() const;
  void _internal_set_sample_per_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 heat_map_a = 1 [default = 16];
  bool has_heat_map_a() const;
  private:
  bool _internal_has_heat_map_a() const;
  public:
  void clear_heat_map_a();
  ::PROTOBUF_NAMESPACE_ID::int32 heat_map_a() const;
  void set_heat_map_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heat_map_a() const;
  void _internal_set_heat_map_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 output_dim = 2 [default = 10];
  bool has_output_dim() const;
  private:
  bool _internal_has_output_dim() const;
  public:
  void clear_output_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 output_dim() const;
  void set_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_dim() const;
  void _internal_set_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 group_height = 3 [default = 7];
  bool has_group_height() const;
  private:
  bool _internal_has_group_height() const;
  public:
  void clear_group_height();
  ::PROTOBUF_NAMESPACE_ID::int32 group_height() const;
  void set_group_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_height() const;
  void _internal_set_group_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 group_width = 4 [default = 7];
  bool has_group_width() const;
  private:
  bool _internal_has_group_width() const;
  public:
  void clear_group_width();
  ::PROTOBUF_NAMESPACE_ID::int32 group_width() const;
  void set_group_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_width() const;
  void _internal_set_group_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pooled_height = 5 [default = 7];
  bool has_pooled_height() const;
  private:
  bool _internal_has_pooled_height() const;
  public:
  void clear_pooled_height();
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_height() const;
  void set_pooled_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pooled_height() const;
  void _internal_set_pooled_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pooled_width = 6 [default = 7];
  bool has_pooled_width() const;
  private:
  bool _internal_has_pooled_width() const;
  public:
  void clear_pooled_width();
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_width() const;
  void set_pooled_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pooled_width() const;
  void _internal_set_pooled_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.tracking_feature.PSROIPoolingParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_per_part_;
  ::PROTOBUF_NAMESPACE_ID::int32 heat_map_a_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_dim_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 pooled_width_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ExternalParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.tracking_feature.ExternalParam) */ {
 public:
  ExternalParam();
  virtual ~ExternalParam();

  ExternalParam(const ExternalParam& from);
  ExternalParam(ExternalParam&& from) noexcept
    : ExternalParam() {
    *this = ::std::move(from);
  }

  inline ExternalParam& operator=(const ExternalParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalParam& operator=(ExternalParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalParam* internal_default_instance() {
    return reinterpret_cast<const ExternalParam*>(
               &_ExternalParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExternalParam& a, ExternalParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalParam* New() const final {
    return CreateMaybeMessage<ExternalParam>(nullptr);
  }

  ExternalParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalParam& from);
  void MergeFrom(const ExternalParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.tracking_feature.ExternalParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeFieldNumber = 1,
    kProtoFileFieldNumber = 2,
    kWeightFileFieldNumber = 3,
    kInputBlobFieldNumber = 6,
    kFeatBlobFieldNumber = 7,
    kFeatureFileFieldNumber = 9,
    kOffsetRatioFieldNumber = 8,
    kResizeHeightFieldNumber = 4,
    kResizeWidthFieldNumber = 5,
  };
  // optional string model_type = 1 [default = "CaffeNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional string proto_file = 2 [default = "caffe.pt"];
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  void set_proto_file(const std::string& value);
  void set_proto_file(std::string&& value);
  void set_proto_file(const char* value);
  void set_proto_file(const char* value, size_t size);
  std::string* mutable_proto_file();
  std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional string weight_file = 3 [default = "caffe.model"];
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  void set_weight_file(const std::string& value);
  void set_weight_file(std::string&& value);
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  std::string* mutable_weight_file();
  std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional string input_blob = 6;
  bool has_input_blob() const;
  private:
  bool _internal_has_input_blob() const;
  public:
  void clear_input_blob();
  const std::string& input_blob() const;
  void set_input_blob(const std::string& value);
  void set_input_blob(std::string&& value);
  void set_input_blob(const char* value);
  void set_input_blob(const char* value, size_t size);
  std::string* mutable_input_blob();
  std::string* release_input_blob();
  void set_allocated_input_blob(std::string* input_blob);
  private:
  const std::string& _internal_input_blob() const;
  void _internal_set_input_blob(const std::string& value);
  std::string* _internal_mutable_input_blob();
  public:

  // optional string feat_blob = 7;
  bool has_feat_blob() const;
  private:
  bool _internal_has_feat_blob() const;
  public:
  void clear_feat_blob();
  const std::string& feat_blob() const;
  void set_feat_blob(const std::string& value);
  void set_feat_blob(std::string&& value);
  void set_feat_blob(const char* value);
  void set_feat_blob(const char* value, size_t size);
  std::string* mutable_feat_blob();
  std::string* release_feat_blob();
  void set_allocated_feat_blob(std::string* feat_blob);
  private:
  const std::string& _internal_feat_blob() const;
  void _internal_set_feat_blob(const std::string& value);
  std::string* _internal_mutable_feat_blob();
  public:

  // optional string feature_file = 9 [default = "feature.pt"];
  bool has_feature_file() const;
  private:
  bool _internal_has_feature_file() const;
  public:
  void clear_feature_file();
  const std::string& feature_file() const;
  void set_feature_file(const std::string& value);
  void set_feature_file(std::string&& value);
  void set_feature_file(const char* value);
  void set_feature_file(const char* value, size_t size);
  std::string* mutable_feature_file();
  std::string* release_feature_file();
  void set_allocated_feature_file(std::string* feature_file);
  private:
  const std::string& _internal_feature_file() const;
  void _internal_set_feature_file(const std::string& value);
  std::string* _internal_mutable_feature_file();
  public:

  // optional float offset_ratio = 8 [default = 0.288889];
  bool has_offset_ratio() const;
  private:
  bool _internal_has_offset_ratio() const;
  public:
  void clear_offset_ratio();
  float offset_ratio() const;
  void set_offset_ratio(float value);
  private:
  float _internal_offset_ratio() const;
  void _internal_set_offset_ratio(float value);
  public:

  // optional int32 resize_height = 4 [default = 1080];
  bool has_resize_height() const;
  private:
  bool _internal_has_resize_height() const;
  public:
  void clear_resize_height();
  ::PROTOBUF_NAMESPACE_ID::int32 resize_height() const;
  void set_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resize_height() const;
  void _internal_set_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 resize_width = 5 [default = 1920];
  bool has_resize_width() const;
  private:
  bool _internal_has_resize_width() const;
  public:
  void clear_resize_width();
  ::PROTOBUF_NAMESPACE_ID::int32 resize_width() const;
  void set_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resize_width() const;
  void _internal_set_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.tracking_feature.ExternalParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_proto_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_weight_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feat_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_feature_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_file_;
  float offset_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 resize_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 resize_width_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeatureParam

// optional int32 feat_stride = 1 [default = 32];
inline bool FeatureParam::_internal_has_feat_stride() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureParam::has_feat_stride() const {
  return _internal_has_feat_stride();
}
inline void FeatureParam::clear_feat_stride() {
  feat_stride_ = 32;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureParam::_internal_feat_stride() const {
  return feat_stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FeatureParam::feat_stride() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.FeatureParam.feat_stride)
  return _internal_feat_stride();
}
inline void FeatureParam::_internal_set_feat_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  feat_stride_ = value;
}
inline void FeatureParam::set_feat_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_feat_stride(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.FeatureParam.feat_stride)
}

// repeated .apollo.perception.camera.tracking_feature.ExtractorParam extractor = 2;
inline int FeatureParam::_internal_extractor_size() const {
  return extractor_.size();
}
inline int FeatureParam::extractor_size() const {
  return _internal_extractor_size();
}
inline void FeatureParam::clear_extractor() {
  extractor_.Clear();
}
inline ::apollo::perception::camera::tracking_feature::ExtractorParam* FeatureParam::mutable_extractor(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.FeatureParam.extractor)
  return extractor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::tracking_feature::ExtractorParam >*
FeatureParam::mutable_extractor() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.tracking_feature.FeatureParam.extractor)
  return &extractor_;
}
inline const ::apollo::perception::camera::tracking_feature::ExtractorParam& FeatureParam::_internal_extractor(int index) const {
  return extractor_.Get(index);
}
inline const ::apollo::perception::camera::tracking_feature::ExtractorParam& FeatureParam::extractor(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.FeatureParam.extractor)
  return _internal_extractor(index);
}
inline ::apollo::perception::camera::tracking_feature::ExtractorParam* FeatureParam::_internal_add_extractor() {
  return extractor_.Add();
}
inline ::apollo::perception::camera::tracking_feature::ExtractorParam* FeatureParam::add_extractor() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.tracking_feature.FeatureParam.extractor)
  return _internal_add_extractor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::tracking_feature::ExtractorParam >&
FeatureParam::extractor() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.tracking_feature.FeatureParam.extractor)
  return extractor_;
}

// optional string remap_model = 3;
inline bool FeatureParam::_internal_has_remap_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureParam::has_remap_model() const {
  return _internal_has_remap_model();
}
inline void FeatureParam::clear_remap_model() {
  remap_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeatureParam::remap_model() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
  return _internal_remap_model();
}
inline void FeatureParam::set_remap_model(const std::string& value) {
  _internal_set_remap_model(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
}
inline std::string* FeatureParam::mutable_remap_model() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
  return _internal_mutable_remap_model();
}
inline const std::string& FeatureParam::_internal_remap_model() const {
  return remap_model_.GetNoArena();
}
inline void FeatureParam::_internal_set_remap_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  remap_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FeatureParam::set_remap_model(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  remap_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
}
inline void FeatureParam::set_remap_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  remap_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
}
inline void FeatureParam::set_remap_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  remap_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
}
inline std::string* FeatureParam::_internal_mutable_remap_model() {
  _has_bits_[0] |= 0x00000001u;
  return remap_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeatureParam::release_remap_model() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
  if (!_internal_has_remap_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return remap_model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureParam::set_allocated_remap_model(std::string* remap_model) {
  if (remap_model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remap_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remap_model);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.FeatureParam.remap_model)
}

// -------------------------------------------------------------------

// ExtractorParam

// optional string feat_blob = 1;
inline bool ExtractorParam::_internal_has_feat_blob() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExtractorParam::has_feat_blob() const {
  return _internal_has_feat_blob();
}
inline void ExtractorParam::clear_feat_blob() {
  feat_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtractorParam::feat_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
  return _internal_feat_blob();
}
inline void ExtractorParam::set_feat_blob(const std::string& value) {
  _internal_set_feat_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
}
inline std::string* ExtractorParam::mutable_feat_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
  return _internal_mutable_feat_blob();
}
inline const std::string& ExtractorParam::_internal_feat_blob() const {
  return feat_blob_.GetNoArena();
}
inline void ExtractorParam::_internal_set_feat_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  feat_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExtractorParam::set_feat_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  feat_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
}
inline void ExtractorParam::set_feat_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  feat_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
}
inline void ExtractorParam::set_feat_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  feat_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
}
inline std::string* ExtractorParam::_internal_mutable_feat_blob() {
  _has_bits_[0] |= 0x00000001u;
  return feat_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtractorParam::release_feat_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
  if (!_internal_has_feat_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return feat_blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtractorParam::set_allocated_feat_blob(std::string* feat_blob) {
  if (feat_blob != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feat_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feat_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExtractorParam.feat_blob)
}

// optional .apollo.perception.camera.tracking_feature.ExtractorParam.FeatureType feat_type = 2 [default = ROIPooling];
inline bool ExtractorParam::_internal_has_feat_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExtractorParam::has_feat_type() const {
  return _internal_has_feat_type();
}
inline void ExtractorParam::clear_feat_type() {
  feat_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType ExtractorParam::_internal_feat_type() const {
  return static_cast< ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType >(feat_type_);
}
inline ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType ExtractorParam::feat_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExtractorParam.feat_type)
  return _internal_feat_type();
}
inline void ExtractorParam::_internal_set_feat_type(::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType value) {
  assert(::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  feat_type_ = value;
}
inline void ExtractorParam::set_feat_type(::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType value) {
  _internal_set_feat_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExtractorParam.feat_type)
}

// optional .apollo.perception.camera.tracking_feature.ROIPoolingParam roi_pooling_param = 3;
inline bool ExtractorParam::_internal_has_roi_pooling_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || roi_pooling_param_ != nullptr);
  return value;
}
inline bool ExtractorParam::has_roi_pooling_param() const {
  return _internal_has_roi_pooling_param();
}
inline void ExtractorParam::clear_roi_pooling_param() {
  if (roi_pooling_param_ != nullptr) roi_pooling_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::tracking_feature::ROIPoolingParam& ExtractorParam::_internal_roi_pooling_param() const {
  const ::apollo::perception::camera::tracking_feature::ROIPoolingParam* p = roi_pooling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::tracking_feature::ROIPoolingParam*>(
      &::apollo::perception::camera::tracking_feature::_ROIPoolingParam_default_instance_);
}
inline const ::apollo::perception::camera::tracking_feature::ROIPoolingParam& ExtractorParam::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExtractorParam.roi_pooling_param)
  return _internal_roi_pooling_param();
}
inline ::apollo::perception::camera::tracking_feature::ROIPoolingParam* ExtractorParam::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExtractorParam.roi_pooling_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::tracking_feature::ROIPoolingParam* temp = roi_pooling_param_;
  roi_pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::tracking_feature::ROIPoolingParam* ExtractorParam::_internal_mutable_roi_pooling_param() {
  _has_bits_[0] |= 0x00000002u;
  if (roi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::tracking_feature::ROIPoolingParam>(GetArenaNoVirtual());
    roi_pooling_param_ = p;
  }
  return roi_pooling_param_;
}
inline ::apollo::perception::camera::tracking_feature::ROIPoolingParam* ExtractorParam::mutable_roi_pooling_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExtractorParam.roi_pooling_param)
  return _internal_mutable_roi_pooling_param();
}
inline void ExtractorParam::set_allocated_roi_pooling_param(::apollo::perception::camera::tracking_feature::ROIPoolingParam* roi_pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roi_pooling_param_;
  }
  if (roi_pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roi_pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_pooling_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roi_pooling_param_ = roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExtractorParam.roi_pooling_param)
}

// optional .apollo.perception.camera.tracking_feature.PSROIPoolingParam ps_roi_pooling_param = 4;
inline bool ExtractorParam::_internal_has_ps_roi_pooling_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ps_roi_pooling_param_ != nullptr);
  return value;
}
inline bool ExtractorParam::has_ps_roi_pooling_param() const {
  return _internal_has_ps_roi_pooling_param();
}
inline void ExtractorParam::clear_ps_roi_pooling_param() {
  if (ps_roi_pooling_param_ != nullptr) ps_roi_pooling_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::camera::tracking_feature::PSROIPoolingParam& ExtractorParam::_internal_ps_roi_pooling_param() const {
  const ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* p = ps_roi_pooling_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::tracking_feature::PSROIPoolingParam*>(
      &::apollo::perception::camera::tracking_feature::_PSROIPoolingParam_default_instance_);
}
inline const ::apollo::perception::camera::tracking_feature::PSROIPoolingParam& ExtractorParam::ps_roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExtractorParam.ps_roi_pooling_param)
  return _internal_ps_roi_pooling_param();
}
inline ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* ExtractorParam::release_ps_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExtractorParam.ps_roi_pooling_param)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* temp = ps_roi_pooling_param_;
  ps_roi_pooling_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* ExtractorParam::_internal_mutable_ps_roi_pooling_param() {
  _has_bits_[0] |= 0x00000004u;
  if (ps_roi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::tracking_feature::PSROIPoolingParam>(GetArenaNoVirtual());
    ps_roi_pooling_param_ = p;
  }
  return ps_roi_pooling_param_;
}
inline ::apollo::perception::camera::tracking_feature::PSROIPoolingParam* ExtractorParam::mutable_ps_roi_pooling_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExtractorParam.ps_roi_pooling_param)
  return _internal_mutable_ps_roi_pooling_param();
}
inline void ExtractorParam::set_allocated_ps_roi_pooling_param(::apollo::perception::camera::tracking_feature::PSROIPoolingParam* ps_roi_pooling_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ps_roi_pooling_param_;
  }
  if (ps_roi_pooling_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ps_roi_pooling_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ps_roi_pooling_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ps_roi_pooling_param_ = ps_roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExtractorParam.ps_roi_pooling_param)
}

// -------------------------------------------------------------------

// ROIPoolingParam

// optional int32 pooled_h = 1 [default = 3];
inline bool ROIPoolingParam::_internal_has_pooled_h() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROIPoolingParam::has_pooled_h() const {
  return _internal_has_pooled_h();
}
inline void ROIPoolingParam::clear_pooled_h() {
  pooled_h_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROIPoolingParam::_internal_pooled_h() const {
  return pooled_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROIPoolingParam::pooled_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ROIPoolingParam.pooled_h)
  return _internal_pooled_h();
}
inline void ROIPoolingParam::_internal_set_pooled_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pooled_h_ = value;
}
inline void ROIPoolingParam::set_pooled_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pooled_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ROIPoolingParam.pooled_h)
}

// optional int32 pooled_w = 2 [default = 3];
inline bool ROIPoolingParam::_internal_has_pooled_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIPoolingParam::has_pooled_w() const {
  return _internal_has_pooled_w();
}
inline void ROIPoolingParam::clear_pooled_w() {
  pooled_w_ = 3;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROIPoolingParam::_internal_pooled_w() const {
  return pooled_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROIPoolingParam::pooled_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ROIPoolingParam.pooled_w)
  return _internal_pooled_w();
}
inline void ROIPoolingParam::_internal_set_pooled_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pooled_w_ = value;
}
inline void ROIPoolingParam::set_pooled_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pooled_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ROIPoolingParam.pooled_w)
}

// optional bool use_floor = 3 [default = false];
inline bool ROIPoolingParam::_internal_has_use_floor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROIPoolingParam::has_use_floor() const {
  return _internal_has_use_floor();
}
inline void ROIPoolingParam::clear_use_floor() {
  use_floor_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ROIPoolingParam::_internal_use_floor() const {
  return use_floor_;
}
inline bool ROIPoolingParam::use_floor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ROIPoolingParam.use_floor)
  return _internal_use_floor();
}
inline void ROIPoolingParam::_internal_set_use_floor(bool value) {
  _has_bits_[0] |= 0x00000001u;
  use_floor_ = value;
}
inline void ROIPoolingParam::set_use_floor(bool value) {
  _internal_set_use_floor(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ROIPoolingParam.use_floor)
}

// -------------------------------------------------------------------

// PSROIPoolingParam

// optional int32 heat_map_a = 1 [default = 16];
inline bool PSROIPoolingParam::_internal_has_heat_map_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_heat_map_a() const {
  return _internal_has_heat_map_a();
}
inline void PSROIPoolingParam::clear_heat_map_a() {
  heat_map_a_ = 16;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_heat_map_a() const {
  return heat_map_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::heat_map_a() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.heat_map_a)
  return _internal_heat_map_a();
}
inline void PSROIPoolingParam::_internal_set_heat_map_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  heat_map_a_ = value;
}
inline void PSROIPoolingParam::set_heat_map_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heat_map_a(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.heat_map_a)
}

// optional int32 output_dim = 2 [default = 10];
inline bool PSROIPoolingParam::_internal_has_output_dim() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_output_dim() const {
  return _internal_has_output_dim();
}
inline void PSROIPoolingParam::clear_output_dim() {
  output_dim_ = 10;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_output_dim() const {
  return output_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::output_dim() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.output_dim)
  return _internal_output_dim();
}
inline void PSROIPoolingParam::_internal_set_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  output_dim_ = value;
}
inline void PSROIPoolingParam::set_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_dim(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.output_dim)
}

// optional int32 group_height = 3 [default = 7];
inline bool PSROIPoolingParam::_internal_has_group_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_group_height() const {
  return _internal_has_group_height();
}
inline void PSROIPoolingParam::clear_group_height() {
  group_height_ = 7;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_group_height() const {
  return group_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::group_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.group_height)
  return _internal_group_height();
}
inline void PSROIPoolingParam::_internal_set_group_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  group_height_ = value;
}
inline void PSROIPoolingParam::set_group_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.group_height)
}

// optional int32 group_width = 4 [default = 7];
inline bool PSROIPoolingParam::_internal_has_group_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_group_width() const {
  return _internal_has_group_width();
}
inline void PSROIPoolingParam::clear_group_width() {
  group_width_ = 7;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_group_width() const {
  return group_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::group_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.group_width)
  return _internal_group_width();
}
inline void PSROIPoolingParam::_internal_set_group_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  group_width_ = value;
}
inline void PSROIPoolingParam::set_group_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.group_width)
}

// optional int32 pooled_height = 5 [default = 7];
inline bool PSROIPoolingParam::_internal_has_pooled_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_pooled_height() const {
  return _internal_has_pooled_height();
}
inline void PSROIPoolingParam::clear_pooled_height() {
  pooled_height_ = 7;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_pooled_height() const {
  return pooled_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::pooled_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.pooled_height)
  return _internal_pooled_height();
}
inline void PSROIPoolingParam::_internal_set_pooled_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  pooled_height_ = value;
}
inline void PSROIPoolingParam::set_pooled_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pooled_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.pooled_height)
}

// optional int32 pooled_width = 6 [default = 7];
inline bool PSROIPoolingParam::_internal_has_pooled_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_pooled_width() const {
  return _internal_has_pooled_width();
}
inline void PSROIPoolingParam::clear_pooled_width() {
  pooled_width_ = 7;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_pooled_width() const {
  return pooled_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::pooled_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.pooled_width)
  return _internal_pooled_width();
}
inline void PSROIPoolingParam::_internal_set_pooled_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pooled_width_ = value;
}
inline void PSROIPoolingParam::set_pooled_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pooled_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.pooled_width)
}

// optional int32 sample_per_part = 7 [default = 4];
inline bool PSROIPoolingParam::_internal_has_sample_per_part() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PSROIPoolingParam::has_sample_per_part() const {
  return _internal_has_sample_per_part();
}
inline void PSROIPoolingParam::clear_sample_per_part() {
  sample_per_part_ = 4;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::_internal_sample_per_part() const {
  return sample_per_part_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PSROIPoolingParam::sample_per_part() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.PSROIPoolingParam.sample_per_part)
  return _internal_sample_per_part();
}
inline void PSROIPoolingParam::_internal_set_sample_per_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sample_per_part_ = value;
}
inline void PSROIPoolingParam::set_sample_per_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_per_part(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.PSROIPoolingParam.sample_per_part)
}

// -------------------------------------------------------------------

// ExternalParam

// optional string model_type = 1 [default = "CaffeNet"];
inline bool ExternalParam::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExternalParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void ExternalParam::clear_model_type() {
  model_type_.ClearToDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExternalParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
  return _internal_model_type();
}
inline void ExternalParam::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
}
inline std::string* ExternalParam::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& ExternalParam::_internal_model_type() const {
  return model_type_.GetNoArena();
}
inline void ExternalParam::_internal_set_model_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get(), value);
}
inline void ExternalParam::set_model_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(
    &::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
}
inline void ExternalParam::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
}
inline void ExternalParam::set_model_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
}
inline std::string* ExternalParam::_internal_mutable_model_type() {
  _has_bits_[0] |= 0x00000001u;
  return model_type_.MutableNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline std::string* ExternalParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_type_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline void ExternalParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_type_.SetAllocatedNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_model_type_.get(), model_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExternalParam.model_type)
}

// optional string proto_file = 2 [default = "caffe.pt"];
inline bool ExternalParam::_internal_has_proto_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExternalParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void ExternalParam::clear_proto_file() {
  proto_file_.ClearToDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExternalParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
  return _internal_proto_file();
}
inline void ExternalParam::set_proto_file(const std::string& value) {
  _internal_set_proto_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
}
inline std::string* ExternalParam::mutable_proto_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
  return _internal_mutable_proto_file();
}
inline const std::string& ExternalParam::_internal_proto_file() const {
  return proto_file_.GetNoArena();
}
inline void ExternalParam::_internal_set_proto_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), value);
}
inline void ExternalParam::set_proto_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(
    &::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
}
inline void ExternalParam::set_proto_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
}
inline void ExternalParam::set_proto_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
}
inline std::string* ExternalParam::_internal_mutable_proto_file() {
  _has_bits_[0] |= 0x00000002u;
  return proto_file_.MutableNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
}
inline std::string* ExternalParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
}
inline void ExternalParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_file_.SetAllocatedNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), proto_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExternalParam.proto_file)
}

// optional string weight_file = 3 [default = "caffe.model"];
inline bool ExternalParam::_internal_has_weight_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExternalParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void ExternalParam::clear_weight_file() {
  weight_file_.ClearToDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExternalParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
  return _internal_weight_file();
}
inline void ExternalParam::set_weight_file(const std::string& value) {
  _internal_set_weight_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
}
inline std::string* ExternalParam::mutable_weight_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
  return _internal_mutable_weight_file();
}
inline const std::string& ExternalParam::_internal_weight_file() const {
  return weight_file_.GetNoArena();
}
inline void ExternalParam::_internal_set_weight_file(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), value);
}
inline void ExternalParam::set_weight_file(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(
    &::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
}
inline void ExternalParam::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
}
inline void ExternalParam::set_weight_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
}
inline std::string* ExternalParam::_internal_mutable_weight_file() {
  _has_bits_[0] |= 0x00000004u;
  return weight_file_.MutableNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
}
inline std::string* ExternalParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return weight_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
}
inline void ExternalParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  weight_file_.SetAllocatedNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExternalParam.weight_file)
}

// optional int32 resize_height = 4 [default = 1080];
inline bool ExternalParam::_internal_has_resize_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExternalParam::has_resize_height() const {
  return _internal_has_resize_height();
}
inline void ExternalParam::clear_resize_height() {
  resize_height_ = 1080;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExternalParam::_internal_resize_height() const {
  return resize_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExternalParam::resize_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.resize_height)
  return _internal_resize_height();
}
inline void ExternalParam::_internal_set_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  resize_height_ = value;
}
inline void ExternalParam::set_resize_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resize_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.resize_height)
}

// optional int32 resize_width = 5 [default = 1920];
inline bool ExternalParam::_internal_has_resize_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ExternalParam::has_resize_width() const {
  return _internal_has_resize_width();
}
inline void ExternalParam::clear_resize_width() {
  resize_width_ = 1920;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExternalParam::_internal_resize_width() const {
  return resize_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExternalParam::resize_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.resize_width)
  return _internal_resize_width();
}
inline void ExternalParam::_internal_set_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  resize_width_ = value;
}
inline void ExternalParam::set_resize_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resize_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.resize_width)
}

// optional string input_blob = 6;
inline bool ExternalParam::_internal_has_input_blob() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExternalParam::has_input_blob() const {
  return _internal_has_input_blob();
}
inline void ExternalParam::clear_input_blob() {
  input_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ExternalParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
  return _internal_input_blob();
}
inline void ExternalParam::set_input_blob(const std::string& value) {
  _internal_set_input_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
}
inline std::string* ExternalParam::mutable_input_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
  return _internal_mutable_input_blob();
}
inline const std::string& ExternalParam::_internal_input_blob() const {
  return input_blob_.GetNoArena();
}
inline void ExternalParam::_internal_set_input_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  input_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExternalParam::set_input_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  input_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
}
inline void ExternalParam::set_input_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  input_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
}
inline void ExternalParam::set_input_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  input_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
}
inline std::string* ExternalParam::_internal_mutable_input_blob() {
  _has_bits_[0] |= 0x00000008u;
  return input_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExternalParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
  if (!_internal_has_input_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return input_blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalParam::set_allocated_input_blob(std::string* input_blob) {
  if (input_blob != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  input_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExternalParam.input_blob)
}

// optional string feat_blob = 7;
inline bool ExternalParam::_internal_has_feat_blob() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExternalParam::has_feat_blob() const {
  return _internal_has_feat_blob();
}
inline void ExternalParam::clear_feat_blob() {
  feat_blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ExternalParam::feat_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
  return _internal_feat_blob();
}
inline void ExternalParam::set_feat_blob(const std::string& value) {
  _internal_set_feat_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
}
inline std::string* ExternalParam::mutable_feat_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
  return _internal_mutable_feat_blob();
}
inline const std::string& ExternalParam::_internal_feat_blob() const {
  return feat_blob_.GetNoArena();
}
inline void ExternalParam::_internal_set_feat_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  feat_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExternalParam::set_feat_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  feat_blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
}
inline void ExternalParam::set_feat_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  feat_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
}
inline void ExternalParam::set_feat_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  feat_blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
}
inline std::string* ExternalParam::_internal_mutable_feat_blob() {
  _has_bits_[0] |= 0x00000010u;
  return feat_blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExternalParam::release_feat_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
  if (!_internal_has_feat_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return feat_blob_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalParam::set_allocated_feat_blob(std::string* feat_blob) {
  if (feat_blob != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  feat_blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feat_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExternalParam.feat_blob)
}

// optional float offset_ratio = 8 [default = 0.288889];
inline bool ExternalParam::_internal_has_offset_ratio() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExternalParam::has_offset_ratio() const {
  return _internal_has_offset_ratio();
}
inline void ExternalParam::clear_offset_ratio() {
  offset_ratio_ = 0.288889f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ExternalParam::_internal_offset_ratio() const {
  return offset_ratio_;
}
inline float ExternalParam::offset_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.offset_ratio)
  return _internal_offset_ratio();
}
inline void ExternalParam::_internal_set_offset_ratio(float value) {
  _has_bits_[0] |= 0x00000040u;
  offset_ratio_ = value;
}
inline void ExternalParam::set_offset_ratio(float value) {
  _internal_set_offset_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.offset_ratio)
}

// optional string feature_file = 9 [default = "feature.pt"];
inline bool ExternalParam::_internal_has_feature_file() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExternalParam::has_feature_file() const {
  return _internal_has_feature_file();
}
inline void ExternalParam::clear_feature_file() {
  feature_file_.ClearToDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ExternalParam::feature_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
  return _internal_feature_file();
}
inline void ExternalParam::set_feature_file(const std::string& value) {
  _internal_set_feature_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
}
inline std::string* ExternalParam::mutable_feature_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
  return _internal_mutable_feature_file();
}
inline const std::string& ExternalParam::_internal_feature_file() const {
  return feature_file_.GetNoArena();
}
inline void ExternalParam::_internal_set_feature_file(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), value);
}
inline void ExternalParam::set_feature_file(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(
    &::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
}
inline void ExternalParam::set_feature_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
}
inline void ExternalParam::set_feature_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
}
inline std::string* ExternalParam::_internal_mutable_feature_file() {
  _has_bits_[0] |= 0x00000020u;
  return feature_file_.MutableNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get());
}
inline std::string* ExternalParam::release_feature_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
  if (!_internal_has_feature_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return feature_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get());
}
inline void ExternalParam::set_allocated_feature_file(std::string* feature_file) {
  if (feature_file != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  feature_file_.SetAllocatedNoArena(&::apollo::perception::camera::tracking_feature::ExternalParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), feature_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.tracking_feature.ExternalParam.feature_file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracking_feature
}  // namespace camera
}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType>() {
  return ::apollo::perception::camera::tracking_feature::ExtractorParam_FeatureType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2ffeature_5fextractor_2ftfe_2ftracking_5ffeature_2eproto
