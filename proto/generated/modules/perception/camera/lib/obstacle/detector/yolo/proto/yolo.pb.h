// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/detector/yolo/proto/yolo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace yolo {
class BBoxStatistics;
class BBoxStatisticsDefaultTypeInternal;
extern BBoxStatisticsDefaultTypeInternal _BBoxStatistics_default_instance_;
class DimensionStatistics;
class DimensionStatisticsDefaultTypeInternal;
extern DimensionStatisticsDefaultTypeInternal _DimensionStatistics_default_instance_;
class ModelParam;
class ModelParamDefaultTypeInternal;
extern ModelParamDefaultTypeInternal _ModelParam_default_instance_;
class NMSParam;
class NMSParamDefaultTypeInternal;
extern NMSParamDefaultTypeInternal _NMSParam_default_instance_;
class NetworkParam;
class NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
class YoloParam;
class YoloParamDefaultTypeInternal;
extern YoloParamDefaultTypeInternal _YoloParam_default_instance_;
}  // namespace yolo
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::yolo::BBoxStatistics* Arena::CreateMaybeMessage<::apollo::perception::camera::yolo::BBoxStatistics>(Arena*);
template<> ::apollo::perception::camera::yolo::DimensionStatistics* Arena::CreateMaybeMessage<::apollo::perception::camera::yolo::DimensionStatistics>(Arena*);
template<> ::apollo::perception::camera::yolo::ModelParam* Arena::CreateMaybeMessage<::apollo::perception::camera::yolo::ModelParam>(Arena*);
template<> ::apollo::perception::camera::yolo::NMSParam* Arena::CreateMaybeMessage<::apollo::perception::camera::yolo::NMSParam>(Arena*);
template<> ::apollo::perception::camera::yolo::NetworkParam* Arena::CreateMaybeMessage<::apollo::perception::camera::yolo::NetworkParam>(Arena*);
template<> ::apollo::perception::camera::yolo::YoloParam* Arena::CreateMaybeMessage<::apollo::perception::camera::yolo::YoloParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace yolo {

// ===================================================================

class YoloParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.yolo.YoloParam) */ {
 public:
  YoloParam();
  virtual ~YoloParam();

  YoloParam(const YoloParam& from);
  YoloParam(YoloParam&& from) noexcept
    : YoloParam() {
    *this = ::std::move(from);
  }

  inline YoloParam& operator=(const YoloParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline YoloParam& operator=(YoloParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const YoloParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YoloParam* internal_default_instance() {
    return reinterpret_cast<const YoloParam*>(
               &_YoloParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(YoloParam& a, YoloParam& b) {
    a.Swap(&b);
  }
  inline void Swap(YoloParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline YoloParam* New() const final {
    return CreateMaybeMessage<YoloParam>(nullptr);
  }

  YoloParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<YoloParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const YoloParam& from);
  void MergeFrom(const YoloParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YoloParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.yolo.YoloParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelParamFieldNumber = 1,
    kNetParamFieldNumber = 2,
    kNmsParamFieldNumber = 3,
  };
  // optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
  bool has_model_param() const;
  private:
  bool _internal_has_model_param() const;
  public:
  void clear_model_param();
  const ::apollo::perception::camera::yolo::ModelParam& model_param() const;
  ::apollo::perception::camera::yolo::ModelParam* release_model_param();
  ::apollo::perception::camera::yolo::ModelParam* mutable_model_param();
  void set_allocated_model_param(::apollo::perception::camera::yolo::ModelParam* model_param);
  private:
  const ::apollo::perception::camera::yolo::ModelParam& _internal_model_param() const;
  ::apollo::perception::camera::yolo::ModelParam* _internal_mutable_model_param();
  public:

  // optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
  bool has_net_param() const;
  private:
  bool _internal_has_net_param() const;
  public:
  void clear_net_param();
  const ::apollo::perception::camera::yolo::NetworkParam& net_param() const;
  ::apollo::perception::camera::yolo::NetworkParam* release_net_param();
  ::apollo::perception::camera::yolo::NetworkParam* mutable_net_param();
  void set_allocated_net_param(::apollo::perception::camera::yolo::NetworkParam* net_param);
  private:
  const ::apollo::perception::camera::yolo::NetworkParam& _internal_net_param() const;
  ::apollo::perception::camera::yolo::NetworkParam* _internal_mutable_net_param();
  public:

  // optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
  bool has_nms_param() const;
  private:
  bool _internal_has_nms_param() const;
  public:
  void clear_nms_param();
  const ::apollo::perception::camera::yolo::NMSParam& nms_param() const;
  ::apollo::perception::camera::yolo::NMSParam* release_nms_param();
  ::apollo::perception::camera::yolo::NMSParam* mutable_nms_param();
  void set_allocated_nms_param(::apollo::perception::camera::yolo::NMSParam* nms_param);
  private:
  const ::apollo::perception::camera::yolo::NMSParam& _internal_nms_param() const;
  ::apollo::perception::camera::yolo::NMSParam* _internal_mutable_nms_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.YoloParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::yolo::ModelParam* model_param_;
  ::apollo::perception::camera::yolo::NetworkParam* net_param_;
  ::apollo::perception::camera::yolo::NMSParam* nms_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class ModelParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.yolo.ModelParam) */ {
 public:
  ModelParam();
  virtual ~ModelParam();

  ModelParam(const ModelParam& from);
  ModelParam(ModelParam&& from) noexcept
    : ModelParam() {
    *this = ::std::move(from);
  }

  inline ModelParam& operator=(const ModelParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelParam& operator=(ModelParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelParam* internal_default_instance() {
    return reinterpret_cast<const ModelParam*>(
               &_ModelParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelParam& a, ModelParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelParam* New() const final {
    return CreateMaybeMessage<ModelParam>(nullptr);
  }

  ModelParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelParam& from);
  void MergeFrom(const ModelParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.yolo.ModelParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionStatisticsFieldNumber = 18,
    kBboxStatisticsFieldNumber = 19,
    kModelNameFieldNumber = 1,
    kProtoFileFieldNumber = 2,
    kWeightFileFieldNumber = 3,
    kAnchorsFileFieldNumber = 4,
    kTypesFileFieldNumber = 5,
    kFeatureFileFieldNumber = 6,
    kCalibratetableRootFieldNumber = 11,
    kModelTypeFieldNumber = 12,
    kExpandFileFieldNumber = 20,
    kStage1PtFieldNumber = 21,
    kStage1MdFieldNumber = 22,
    kStage2PtFieldNumber = 23,
    kStage2MdFieldNumber = 24,
    kMin2DHeightFieldNumber = 9,
    kMin3DHeightFieldNumber = 30,
    kMin3DWidthFieldNumber = 31,
    kMin3DLengthFieldNumber = 32,
    kPerClsRegFieldNumber = 17,
    kWithBox3DFieldNumber = 41,
    kWithFrboxFieldNumber = 42,
    kWithLightsFieldNumber = 43,
    kWithRatiosFieldNumber = 44,
    kNumAreasFieldNumber = 46,
    kOffsetRatioFieldNumber = 7,
    kConfidenceThresholdFieldNumber = 8,
    kCroppedRatioFieldNumber = 13,
    kResizedWidthFieldNumber = 14,
    kAlignedPixelFieldNumber = 15,
    kOriCycleFieldNumber = 16,
    kRoiConfThresholdFieldNumber = 25,
    kBoxConfThresholdFieldNumber = 26,
    kStage2NmsThresholdFieldNumber = 27,
    kLightVisConfThresholdFieldNumber = 33,
    kLightSwtConfThresholdFieldNumber = 34,
    kBorderRatioFieldNumber = 45,
  };
  // repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
  int dimension_statistics_size() const;
  private:
  int _internal_dimension_statistics_size() const;
  public:
  void clear_dimension_statistics();
  ::apollo::perception::camera::yolo::DimensionStatistics* mutable_dimension_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >*
      mutable_dimension_statistics();
  private:
  const ::apollo::perception::camera::yolo::DimensionStatistics& _internal_dimension_statistics(int index) const;
  ::apollo::perception::camera::yolo::DimensionStatistics* _internal_add_dimension_statistics();
  public:
  const ::apollo::perception::camera::yolo::DimensionStatistics& dimension_statistics(int index) const;
  ::apollo::perception::camera::yolo::DimensionStatistics* add_dimension_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >&
      dimension_statistics() const;

  // repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
  int bbox_statistics_size() const;
  private:
  int _internal_bbox_statistics_size() const;
  public:
  void clear_bbox_statistics();
  ::apollo::perception::camera::yolo::BBoxStatistics* mutable_bbox_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >*
      mutable_bbox_statistics();
  private:
  const ::apollo::perception::camera::yolo::BBoxStatistics& _internal_bbox_statistics(int index) const;
  ::apollo::perception::camera::yolo::BBoxStatistics* _internal_add_bbox_statistics();
  public:
  const ::apollo::perception::camera::yolo::BBoxStatistics& bbox_statistics(int index) const;
  ::apollo::perception::camera::yolo::BBoxStatistics* add_bbox_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >&
      bbox_statistics() const;

  // optional string model_name = 1 [default = "yolo-2d"];
  bool has_model_name() const;
  private:
  bool _internal_has_model_name() const;
  public:
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // optional string proto_file = 2 [default = "caffe.pt"];
  bool has_proto_file() const;
  private:
  bool _internal_has_proto_file() const;
  public:
  void clear_proto_file();
  const std::string& proto_file() const;
  void set_proto_file(const std::string& value);
  void set_proto_file(std::string&& value);
  void set_proto_file(const char* value);
  void set_proto_file(const char* value, size_t size);
  std::string* mutable_proto_file();
  std::string* release_proto_file();
  void set_allocated_proto_file(std::string* proto_file);
  private:
  const std::string& _internal_proto_file() const;
  void _internal_set_proto_file(const std::string& value);
  std::string* _internal_mutable_proto_file();
  public:

  // optional string weight_file = 3 [default = "caffe.model"];
  bool has_weight_file() const;
  private:
  bool _internal_has_weight_file() const;
  public:
  void clear_weight_file();
  const std::string& weight_file() const;
  void set_weight_file(const std::string& value);
  void set_weight_file(std::string&& value);
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  std::string* mutable_weight_file();
  std::string* release_weight_file();
  void set_allocated_weight_file(std::string* weight_file);
  private:
  const std::string& _internal_weight_file() const;
  void _internal_set_weight_file(const std::string& value);
  std::string* _internal_mutable_weight_file();
  public:

  // optional string anchors_file = 4 [default = "anchors.txt"];
  bool has_anchors_file() const;
  private:
  bool _internal_has_anchors_file() const;
  public:
  void clear_anchors_file();
  const std::string& anchors_file() const;
  void set_anchors_file(const std::string& value);
  void set_anchors_file(std::string&& value);
  void set_anchors_file(const char* value);
  void set_anchors_file(const char* value, size_t size);
  std::string* mutable_anchors_file();
  std::string* release_anchors_file();
  void set_allocated_anchors_file(std::string* anchors_file);
  private:
  const std::string& _internal_anchors_file() const;
  void _internal_set_anchors_file(const std::string& value);
  std::string* _internal_mutable_anchors_file();
  public:

  // optional string types_file = 5 [default = "types.txt"];
  bool has_types_file() const;
  private:
  bool _internal_has_types_file() const;
  public:
  void clear_types_file();
  const std::string& types_file() const;
  void set_types_file(const std::string& value);
  void set_types_file(std::string&& value);
  void set_types_file(const char* value);
  void set_types_file(const char* value, size_t size);
  std::string* mutable_types_file();
  std::string* release_types_file();
  void set_allocated_types_file(std::string* types_file);
  private:
  const std::string& _internal_types_file() const;
  void _internal_set_types_file(const std::string& value);
  std::string* _internal_mutable_types_file();
  public:

  // optional string feature_file = 6 [default = "feature.pt"];
  bool has_feature_file() const;
  private:
  bool _internal_has_feature_file() const;
  public:
  void clear_feature_file();
  const std::string& feature_file() const;
  void set_feature_file(const std::string& value);
  void set_feature_file(std::string&& value);
  void set_feature_file(const char* value);
  void set_feature_file(const char* value, size_t size);
  std::string* mutable_feature_file();
  std::string* release_feature_file();
  void set_allocated_feature_file(std::string* feature_file);
  private:
  const std::string& _internal_feature_file() const;
  void _internal_set_feature_file(const std::string& value);
  std::string* _internal_mutable_feature_file();
  public:

  // optional string calibratetable_root = 11 [default = "./"];
  bool has_calibratetable_root() const;
  private:
  bool _internal_has_calibratetable_root() const;
  public:
  void clear_calibratetable_root();
  const std::string& calibratetable_root() const;
  void set_calibratetable_root(const std::string& value);
  void set_calibratetable_root(std::string&& value);
  void set_calibratetable_root(const char* value);
  void set_calibratetable_root(const char* value, size_t size);
  std::string* mutable_calibratetable_root();
  std::string* release_calibratetable_root();
  void set_allocated_calibratetable_root(std::string* calibratetable_root);
  private:
  const std::string& _internal_calibratetable_root() const;
  void _internal_set_calibratetable_root(const std::string& value);
  std::string* _internal_mutable_calibratetable_root();
  public:

  // optional string model_type = 12 [default = "CaffeNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional string expand_file = 20 [default = "expand.txt"];
  bool has_expand_file() const;
  private:
  bool _internal_has_expand_file() const;
  public:
  void clear_expand_file();
  const std::string& expand_file() const;
  void set_expand_file(const std::string& value);
  void set_expand_file(std::string&& value);
  void set_expand_file(const char* value);
  void set_expand_file(const char* value, size_t size);
  std::string* mutable_expand_file();
  std::string* release_expand_file();
  void set_allocated_expand_file(std::string* expand_file);
  private:
  const std::string& _internal_expand_file() const;
  void _internal_set_expand_file(const std::string& value);
  std::string* _internal_mutable_expand_file();
  public:

  // optional string stage1_pt = 21 [default = "caffe.pt"];
  bool has_stage1_pt() const;
  private:
  bool _internal_has_stage1_pt() const;
  public:
  void clear_stage1_pt();
  const std::string& stage1_pt() const;
  void set_stage1_pt(const std::string& value);
  void set_stage1_pt(std::string&& value);
  void set_stage1_pt(const char* value);
  void set_stage1_pt(const char* value, size_t size);
  std::string* mutable_stage1_pt();
  std::string* release_stage1_pt();
  void set_allocated_stage1_pt(std::string* stage1_pt);
  private:
  const std::string& _internal_stage1_pt() const;
  void _internal_set_stage1_pt(const std::string& value);
  std::string* _internal_mutable_stage1_pt();
  public:

  // optional string stage1_md = 22 [default = "caffe.model"];
  bool has_stage1_md() const;
  private:
  bool _internal_has_stage1_md() const;
  public:
  void clear_stage1_md();
  const std::string& stage1_md() const;
  void set_stage1_md(const std::string& value);
  void set_stage1_md(std::string&& value);
  void set_stage1_md(const char* value);
  void set_stage1_md(const char* value, size_t size);
  std::string* mutable_stage1_md();
  std::string* release_stage1_md();
  void set_allocated_stage1_md(std::string* stage1_md);
  private:
  const std::string& _internal_stage1_md() const;
  void _internal_set_stage1_md(const std::string& value);
  std::string* _internal_mutable_stage1_md();
  public:

  // optional string stage2_pt = 23 [default = "caffe.pt"];
  bool has_stage2_pt() const;
  private:
  bool _internal_has_stage2_pt() const;
  public:
  void clear_stage2_pt();
  const std::string& stage2_pt() const;
  void set_stage2_pt(const std::string& value);
  void set_stage2_pt(std::string&& value);
  void set_stage2_pt(const char* value);
  void set_stage2_pt(const char* value, size_t size);
  std::string* mutable_stage2_pt();
  std::string* release_stage2_pt();
  void set_allocated_stage2_pt(std::string* stage2_pt);
  private:
  const std::string& _internal_stage2_pt() const;
  void _internal_set_stage2_pt(const std::string& value);
  std::string* _internal_mutable_stage2_pt();
  public:

  // optional string stage2_md = 24 [default = "caffe.model"];
  bool has_stage2_md() const;
  private:
  bool _internal_has_stage2_md() const;
  public:
  void clear_stage2_md();
  const std::string& stage2_md() const;
  void set_stage2_md(const std::string& value);
  void set_stage2_md(std::string&& value);
  void set_stage2_md(const char* value);
  void set_stage2_md(const char* value, size_t size);
  std::string* mutable_stage2_md();
  std::string* release_stage2_md();
  void set_allocated_stage2_md(std::string* stage2_md);
  private:
  const std::string& _internal_stage2_md() const;
  void _internal_set_stage2_md(const std::string& value);
  std::string* _internal_mutable_stage2_md();
  public:

  // optional float min_2d_height = 9 [default = 0];
  bool has_min_2d_height() const;
  private:
  bool _internal_has_min_2d_height() const;
  public:
  void clear_min_2d_height();
  float min_2d_height() const;
  void set_min_2d_height(float value);
  private:
  float _internal_min_2d_height() const;
  void _internal_set_min_2d_height(float value);
  public:

  // optional float min_3d_height = 30 [default = 0];
  bool has_min_3d_height() const;
  private:
  bool _internal_has_min_3d_height() const;
  public:
  void clear_min_3d_height();
  float min_3d_height() const;
  void set_min_3d_height(float value);
  private:
  float _internal_min_3d_height() const;
  void _internal_set_min_3d_height(float value);
  public:

  // optional float min_3d_width = 31 [default = 0];
  bool has_min_3d_width() const;
  private:
  bool _internal_has_min_3d_width() const;
  public:
  void clear_min_3d_width();
  float min_3d_width() const;
  void set_min_3d_width(float value);
  private:
  float _internal_min_3d_width() const;
  void _internal_set_min_3d_width(float value);
  public:

  // optional float min_3d_length = 32 [default = 0];
  bool has_min_3d_length() const;
  private:
  bool _internal_has_min_3d_length() const;
  public:
  void clear_min_3d_length();
  float min_3d_length() const;
  void set_min_3d_length(float value);
  private:
  float _internal_min_3d_length() const;
  void _internal_set_min_3d_length(float value);
  public:

  // optional bool per_cls_reg = 17 [default = false];
  bool has_per_cls_reg() const;
  private:
  bool _internal_has_per_cls_reg() const;
  public:
  void clear_per_cls_reg();
  bool per_cls_reg() const;
  void set_per_cls_reg(bool value);
  private:
  bool _internal_per_cls_reg() const;
  void _internal_set_per_cls_reg(bool value);
  public:

  // optional bool with_box3d = 41 [default = false];
  bool has_with_box3d() const;
  private:
  bool _internal_has_with_box3d() const;
  public:
  void clear_with_box3d();
  bool with_box3d() const;
  void set_with_box3d(bool value);
  private:
  bool _internal_with_box3d() const;
  void _internal_set_with_box3d(bool value);
  public:

  // optional bool with_frbox = 42 [default = false];
  bool has_with_frbox() const;
  private:
  bool _internal_has_with_frbox() const;
  public:
  void clear_with_frbox();
  bool with_frbox() const;
  void set_with_frbox(bool value);
  private:
  bool _internal_with_frbox() const;
  void _internal_set_with_frbox(bool value);
  public:

  // optional bool with_lights = 43 [default = false];
  bool has_with_lights() const;
  private:
  bool _internal_has_with_lights() const;
  public:
  void clear_with_lights();
  bool with_lights() const;
  void set_with_lights(bool value);
  private:
  bool _internal_with_lights() const;
  void _internal_set_with_lights(bool value);
  public:

  // optional bool with_ratios = 44 [default = false];
  bool has_with_ratios() const;
  private:
  bool _internal_has_with_ratios() const;
  public:
  void clear_with_ratios();
  bool with_ratios() const;
  void set_with_ratios(bool value);
  private:
  bool _internal_with_ratios() const;
  void _internal_set_with_ratios(bool value);
  public:

  // optional int32 num_areas = 46 [default = 0];
  bool has_num_areas() const;
  private:
  bool _internal_has_num_areas() const;
  public:
  void clear_num_areas();
  ::PROTOBUF_NAMESPACE_ID::int32 num_areas() const;
  void set_num_areas(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_areas() const;
  void _internal_set_num_areas(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float offset_ratio = 7 [default = 0.288889];
  bool has_offset_ratio() const;
  private:
  bool _internal_has_offset_ratio() const;
  public:
  void clear_offset_ratio();
  float offset_ratio() const;
  void set_offset_ratio(float value);
  private:
  float _internal_offset_ratio() const;
  void _internal_set_offset_ratio(float value);
  public:

  // optional float confidence_threshold = 8 [default = 0.1];
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional float cropped_ratio = 13 [default = 0.711111];
  bool has_cropped_ratio() const;
  private:
  bool _internal_has_cropped_ratio() const;
  public:
  void clear_cropped_ratio();
  float cropped_ratio() const;
  void set_cropped_ratio(float value);
  private:
  float _internal_cropped_ratio() const;
  void _internal_set_cropped_ratio(float value);
  public:

  // optional int32 resized_width = 14 [default = 1440];
  bool has_resized_width() const;
  private:
  bool _internal_has_resized_width() const;
  public:
  void clear_resized_width();
  ::PROTOBUF_NAMESPACE_ID::int32 resized_width() const;
  void set_resized_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resized_width() const;
  void _internal_set_resized_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 aligned_pixel = 15 [default = 32];
  bool has_aligned_pixel() const;
  private:
  bool _internal_has_aligned_pixel() const;
  public:
  void clear_aligned_pixel();
  ::PROTOBUF_NAMESPACE_ID::int32 aligned_pixel() const;
  void set_aligned_pixel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aligned_pixel() const;
  void _internal_set_aligned_pixel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ori_cycle = 16 [default = 1];
  bool has_ori_cycle() const;
  private:
  bool _internal_has_ori_cycle() const;
  public:
  void clear_ori_cycle();
  ::PROTOBUF_NAMESPACE_ID::int32 ori_cycle() const;
  void set_ori_cycle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ori_cycle() const;
  void _internal_set_ori_cycle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float roi_conf_threshold = 25 [default = 0.1];
  bool has_roi_conf_threshold() const;
  private:
  bool _internal_has_roi_conf_threshold() const;
  public:
  void clear_roi_conf_threshold();
  float roi_conf_threshold() const;
  void set_roi_conf_threshold(float value);
  private:
  float _internal_roi_conf_threshold() const;
  void _internal_set_roi_conf_threshold(float value);
  public:

  // optional float box_conf_threshold = 26 [default = 0.5];
  bool has_box_conf_threshold() const;
  private:
  bool _internal_has_box_conf_threshold() const;
  public:
  void clear_box_conf_threshold();
  float box_conf_threshold() const;
  void set_box_conf_threshold(float value);
  private:
  float _internal_box_conf_threshold() const;
  void _internal_set_box_conf_threshold(float value);
  public:

  // optional float stage2_nms_threshold = 27 [default = 0.4];
  bool has_stage2_nms_threshold() const;
  private:
  bool _internal_has_stage2_nms_threshold() const;
  public:
  void clear_stage2_nms_threshold();
  float stage2_nms_threshold() const;
  void set_stage2_nms_threshold(float value);
  private:
  float _internal_stage2_nms_threshold() const;
  void _internal_set_stage2_nms_threshold(float value);
  public:

  // optional float light_vis_conf_threshold = 33 [default = 0.5];
  bool has_light_vis_conf_threshold() const;
  private:
  bool _internal_has_light_vis_conf_threshold() const;
  public:
  void clear_light_vis_conf_threshold();
  float light_vis_conf_threshold() const;
  void set_light_vis_conf_threshold(float value);
  private:
  float _internal_light_vis_conf_threshold() const;
  void _internal_set_light_vis_conf_threshold(float value);
  public:

  // optional float light_swt_conf_threshold = 34 [default = 0.5];
  bool has_light_swt_conf_threshold() const;
  private:
  bool _internal_has_light_swt_conf_threshold() const;
  public:
  void clear_light_swt_conf_threshold();
  float light_swt_conf_threshold() const;
  void set_light_swt_conf_threshold(float value);
  private:
  float _internal_light_swt_conf_threshold() const;
  void _internal_set_light_swt_conf_threshold(float value);
  public:

  // optional float border_ratio = 45 [default = 0.01];
  bool has_border_ratio() const;
  private:
  bool _internal_has_border_ratio() const;
  public:
  void clear_border_ratio();
  float border_ratio() const;
  void set_border_ratio(float value);
  private:
  float _internal_border_ratio() const;
  void _internal_set_border_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.ModelParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics > dimension_statistics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics > bbox_statistics_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_proto_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_weight_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_anchors_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anchors_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_types_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr types_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_feature_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_calibratetable_root_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibratetable_root_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_expand_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expand_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_stage1_pt_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage1_pt_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_stage1_md_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage1_md_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_stage2_pt_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage2_pt_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_stage2_md_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage2_md_;
  float min_2d_height_;
  float min_3d_height_;
  float min_3d_width_;
  float min_3d_length_;
  bool per_cls_reg_;
  bool with_box3d_;
  bool with_frbox_;
  bool with_lights_;
  bool with_ratios_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_areas_;
  float offset_ratio_;
  float confidence_threshold_;
  float cropped_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 resized_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 aligned_pixel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ori_cycle_;
  float roi_conf_threshold_;
  float box_conf_threshold_;
  float stage2_nms_threshold_;
  float light_vis_conf_threshold_;
  float light_swt_conf_threshold_;
  float border_ratio_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class NetworkParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.yolo.NetworkParam) */ {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);
  NetworkParam(NetworkParam&& from) noexcept
    : NetworkParam() {
    *this = ::std::move(from);
  }

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParam& operator=(NetworkParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkParam& a, NetworkParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParam* New() const final {
    return CreateMaybeMessage<NetworkParam>(nullptr);
  }

  NetworkParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.yolo.NetworkParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDet1LocBlobFieldNumber = 1,
    kDet1ObjBlobFieldNumber = 2,
    kDet1ClsBlobFieldNumber = 3,
    kDet1OriBlobFieldNumber = 4,
    kDet1OriConfBlobFieldNumber = 5,
    kDet1DimBlobFieldNumber = 6,
    kDet2LocBlobFieldNumber = 7,
    kDet2ObjBlobFieldNumber = 8,
    kDet2ClsBlobFieldNumber = 9,
    kDet2OriBlobFieldNumber = 10,
    kDet2OriConfBlobFieldNumber = 11,
    kDet2DimBlobFieldNumber = 12,
    kDet3LocBlobFieldNumber = 13,
    kDet3ObjBlobFieldNumber = 14,
    kDet3ClsBlobFieldNumber = 15,
    kDet3OriBlobFieldNumber = 16,
    kDet3OriConfBlobFieldNumber = 17,
    kDet3DimBlobFieldNumber = 18,
    kLofBlobFieldNumber = 19,
    kLorBlobFieldNumber = 20,
    kInputBlobFieldNumber = 21,
    kRoisBlobFieldNumber = 22,
    kFeatBlobFieldNumber = 23,
    kBoxBlobFieldNumber = 24,
    kIouBlobFieldNumber = 25,
    kBrvisBlobFieldNumber = 26,
    kBrswtBlobFieldNumber = 27,
    kLtvisBlobFieldNumber = 28,
    kLtswtBlobFieldNumber = 29,
    kRtvisBlobFieldNumber = 30,
    kRtswtBlobFieldNumber = 31,
    kAreaIdBlobFieldNumber = 32,
    kVisibleRatioBlobFieldNumber = 33,
    kCutOffRatioBlobFieldNumber = 34,
  };
  // optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
  bool has_det1_loc_blob() const;
  private:
  bool _internal_has_det1_loc_blob() const;
  public:
  void clear_det1_loc_blob();
  const std::string& det1_loc_blob() const;
  void set_det1_loc_blob(const std::string& value);
  void set_det1_loc_blob(std::string&& value);
  void set_det1_loc_blob(const char* value);
  void set_det1_loc_blob(const char* value, size_t size);
  std::string* mutable_det1_loc_blob();
  std::string* release_det1_loc_blob();
  void set_allocated_det1_loc_blob(std::string* det1_loc_blob);
  private:
  const std::string& _internal_det1_loc_blob() const;
  void _internal_set_det1_loc_blob(const std::string& value);
  std::string* _internal_mutable_det1_loc_blob();
  public:

  // optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
  bool has_det1_obj_blob() const;
  private:
  bool _internal_has_det1_obj_blob() const;
  public:
  void clear_det1_obj_blob();
  const std::string& det1_obj_blob() const;
  void set_det1_obj_blob(const std::string& value);
  void set_det1_obj_blob(std::string&& value);
  void set_det1_obj_blob(const char* value);
  void set_det1_obj_blob(const char* value, size_t size);
  std::string* mutable_det1_obj_blob();
  std::string* release_det1_obj_blob();
  void set_allocated_det1_obj_blob(std::string* det1_obj_blob);
  private:
  const std::string& _internal_det1_obj_blob() const;
  void _internal_set_det1_obj_blob(const std::string& value);
  std::string* _internal_mutable_det1_obj_blob();
  public:

  // optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
  bool has_det1_cls_blob() const;
  private:
  bool _internal_has_det1_cls_blob() const;
  public:
  void clear_det1_cls_blob();
  const std::string& det1_cls_blob() const;
  void set_det1_cls_blob(const std::string& value);
  void set_det1_cls_blob(std::string&& value);
  void set_det1_cls_blob(const char* value);
  void set_det1_cls_blob(const char* value, size_t size);
  std::string* mutable_det1_cls_blob();
  std::string* release_det1_cls_blob();
  void set_allocated_det1_cls_blob(std::string* det1_cls_blob);
  private:
  const std::string& _internal_det1_cls_blob() const;
  void _internal_set_det1_cls_blob(const std::string& value);
  std::string* _internal_mutable_det1_cls_blob();
  public:

  // optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
  bool has_det1_ori_blob() const;
  private:
  bool _internal_has_det1_ori_blob() const;
  public:
  void clear_det1_ori_blob();
  const std::string& det1_ori_blob() const;
  void set_det1_ori_blob(const std::string& value);
  void set_det1_ori_blob(std::string&& value);
  void set_det1_ori_blob(const char* value);
  void set_det1_ori_blob(const char* value, size_t size);
  std::string* mutable_det1_ori_blob();
  std::string* release_det1_ori_blob();
  void set_allocated_det1_ori_blob(std::string* det1_ori_blob);
  private:
  const std::string& _internal_det1_ori_blob() const;
  void _internal_set_det1_ori_blob(const std::string& value);
  std::string* _internal_mutable_det1_ori_blob();
  public:

  // optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
  bool has_det1_ori_conf_blob() const;
  private:
  bool _internal_has_det1_ori_conf_blob() const;
  public:
  void clear_det1_ori_conf_blob();
  const std::string& det1_ori_conf_blob() const;
  void set_det1_ori_conf_blob(const std::string& value);
  void set_det1_ori_conf_blob(std::string&& value);
  void set_det1_ori_conf_blob(const char* value);
  void set_det1_ori_conf_blob(const char* value, size_t size);
  std::string* mutable_det1_ori_conf_blob();
  std::string* release_det1_ori_conf_blob();
  void set_allocated_det1_ori_conf_blob(std::string* det1_ori_conf_blob);
  private:
  const std::string& _internal_det1_ori_conf_blob() const;
  void _internal_set_det1_ori_conf_blob(const std::string& value);
  std::string* _internal_mutable_det1_ori_conf_blob();
  public:

  // optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
  bool has_det1_dim_blob() const;
  private:
  bool _internal_has_det1_dim_blob() const;
  public:
  void clear_det1_dim_blob();
  const std::string& det1_dim_blob() const;
  void set_det1_dim_blob(const std::string& value);
  void set_det1_dim_blob(std::string&& value);
  void set_det1_dim_blob(const char* value);
  void set_det1_dim_blob(const char* value, size_t size);
  std::string* mutable_det1_dim_blob();
  std::string* release_det1_dim_blob();
  void set_allocated_det1_dim_blob(std::string* det1_dim_blob);
  private:
  const std::string& _internal_det1_dim_blob() const;
  void _internal_set_det1_dim_blob(const std::string& value);
  std::string* _internal_mutable_det1_dim_blob();
  public:

  // optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
  bool has_det2_loc_blob() const;
  private:
  bool _internal_has_det2_loc_blob() const;
  public:
  void clear_det2_loc_blob();
  const std::string& det2_loc_blob() const;
  void set_det2_loc_blob(const std::string& value);
  void set_det2_loc_blob(std::string&& value);
  void set_det2_loc_blob(const char* value);
  void set_det2_loc_blob(const char* value, size_t size);
  std::string* mutable_det2_loc_blob();
  std::string* release_det2_loc_blob();
  void set_allocated_det2_loc_blob(std::string* det2_loc_blob);
  private:
  const std::string& _internal_det2_loc_blob() const;
  void _internal_set_det2_loc_blob(const std::string& value);
  std::string* _internal_mutable_det2_loc_blob();
  public:

  // optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
  bool has_det2_obj_blob() const;
  private:
  bool _internal_has_det2_obj_blob() const;
  public:
  void clear_det2_obj_blob();
  const std::string& det2_obj_blob() const;
  void set_det2_obj_blob(const std::string& value);
  void set_det2_obj_blob(std::string&& value);
  void set_det2_obj_blob(const char* value);
  void set_det2_obj_blob(const char* value, size_t size);
  std::string* mutable_det2_obj_blob();
  std::string* release_det2_obj_blob();
  void set_allocated_det2_obj_blob(std::string* det2_obj_blob);
  private:
  const std::string& _internal_det2_obj_blob() const;
  void _internal_set_det2_obj_blob(const std::string& value);
  std::string* _internal_mutable_det2_obj_blob();
  public:

  // optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
  bool has_det2_cls_blob() const;
  private:
  bool _internal_has_det2_cls_blob() const;
  public:
  void clear_det2_cls_blob();
  const std::string& det2_cls_blob() const;
  void set_det2_cls_blob(const std::string& value);
  void set_det2_cls_blob(std::string&& value);
  void set_det2_cls_blob(const char* value);
  void set_det2_cls_blob(const char* value, size_t size);
  std::string* mutable_det2_cls_blob();
  std::string* release_det2_cls_blob();
  void set_allocated_det2_cls_blob(std::string* det2_cls_blob);
  private:
  const std::string& _internal_det2_cls_blob() const;
  void _internal_set_det2_cls_blob(const std::string& value);
  std::string* _internal_mutable_det2_cls_blob();
  public:

  // optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
  bool has_det2_ori_blob() const;
  private:
  bool _internal_has_det2_ori_blob() const;
  public:
  void clear_det2_ori_blob();
  const std::string& det2_ori_blob() const;
  void set_det2_ori_blob(const std::string& value);
  void set_det2_ori_blob(std::string&& value);
  void set_det2_ori_blob(const char* value);
  void set_det2_ori_blob(const char* value, size_t size);
  std::string* mutable_det2_ori_blob();
  std::string* release_det2_ori_blob();
  void set_allocated_det2_ori_blob(std::string* det2_ori_blob);
  private:
  const std::string& _internal_det2_ori_blob() const;
  void _internal_set_det2_ori_blob(const std::string& value);
  std::string* _internal_mutable_det2_ori_blob();
  public:

  // optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
  bool has_det2_ori_conf_blob() const;
  private:
  bool _internal_has_det2_ori_conf_blob() const;
  public:
  void clear_det2_ori_conf_blob();
  const std::string& det2_ori_conf_blob() const;
  void set_det2_ori_conf_blob(const std::string& value);
  void set_det2_ori_conf_blob(std::string&& value);
  void set_det2_ori_conf_blob(const char* value);
  void set_det2_ori_conf_blob(const char* value, size_t size);
  std::string* mutable_det2_ori_conf_blob();
  std::string* release_det2_ori_conf_blob();
  void set_allocated_det2_ori_conf_blob(std::string* det2_ori_conf_blob);
  private:
  const std::string& _internal_det2_ori_conf_blob() const;
  void _internal_set_det2_ori_conf_blob(const std::string& value);
  std::string* _internal_mutable_det2_ori_conf_blob();
  public:

  // optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
  bool has_det2_dim_blob() const;
  private:
  bool _internal_has_det2_dim_blob() const;
  public:
  void clear_det2_dim_blob();
  const std::string& det2_dim_blob() const;
  void set_det2_dim_blob(const std::string& value);
  void set_det2_dim_blob(std::string&& value);
  void set_det2_dim_blob(const char* value);
  void set_det2_dim_blob(const char* value, size_t size);
  std::string* mutable_det2_dim_blob();
  std::string* release_det2_dim_blob();
  void set_allocated_det2_dim_blob(std::string* det2_dim_blob);
  private:
  const std::string& _internal_det2_dim_blob() const;
  void _internal_set_det2_dim_blob(const std::string& value);
  std::string* _internal_mutable_det2_dim_blob();
  public:

  // optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
  bool has_det3_loc_blob() const;
  private:
  bool _internal_has_det3_loc_blob() const;
  public:
  void clear_det3_loc_blob();
  const std::string& det3_loc_blob() const;
  void set_det3_loc_blob(const std::string& value);
  void set_det3_loc_blob(std::string&& value);
  void set_det3_loc_blob(const char* value);
  void set_det3_loc_blob(const char* value, size_t size);
  std::string* mutable_det3_loc_blob();
  std::string* release_det3_loc_blob();
  void set_allocated_det3_loc_blob(std::string* det3_loc_blob);
  private:
  const std::string& _internal_det3_loc_blob() const;
  void _internal_set_det3_loc_blob(const std::string& value);
  std::string* _internal_mutable_det3_loc_blob();
  public:

  // optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
  bool has_det3_obj_blob() const;
  private:
  bool _internal_has_det3_obj_blob() const;
  public:
  void clear_det3_obj_blob();
  const std::string& det3_obj_blob() const;
  void set_det3_obj_blob(const std::string& value);
  void set_det3_obj_blob(std::string&& value);
  void set_det3_obj_blob(const char* value);
  void set_det3_obj_blob(const char* value, size_t size);
  std::string* mutable_det3_obj_blob();
  std::string* release_det3_obj_blob();
  void set_allocated_det3_obj_blob(std::string* det3_obj_blob);
  private:
  const std::string& _internal_det3_obj_blob() const;
  void _internal_set_det3_obj_blob(const std::string& value);
  std::string* _internal_mutable_det3_obj_blob();
  public:

  // optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
  bool has_det3_cls_blob() const;
  private:
  bool _internal_has_det3_cls_blob() const;
  public:
  void clear_det3_cls_blob();
  const std::string& det3_cls_blob() const;
  void set_det3_cls_blob(const std::string& value);
  void set_det3_cls_blob(std::string&& value);
  void set_det3_cls_blob(const char* value);
  void set_det3_cls_blob(const char* value, size_t size);
  std::string* mutable_det3_cls_blob();
  std::string* release_det3_cls_blob();
  void set_allocated_det3_cls_blob(std::string* det3_cls_blob);
  private:
  const std::string& _internal_det3_cls_blob() const;
  void _internal_set_det3_cls_blob(const std::string& value);
  std::string* _internal_mutable_det3_cls_blob();
  public:

  // optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
  bool has_det3_ori_blob() const;
  private:
  bool _internal_has_det3_ori_blob() const;
  public:
  void clear_det3_ori_blob();
  const std::string& det3_ori_blob() const;
  void set_det3_ori_blob(const std::string& value);
  void set_det3_ori_blob(std::string&& value);
  void set_det3_ori_blob(const char* value);
  void set_det3_ori_blob(const char* value, size_t size);
  std::string* mutable_det3_ori_blob();
  std::string* release_det3_ori_blob();
  void set_allocated_det3_ori_blob(std::string* det3_ori_blob);
  private:
  const std::string& _internal_det3_ori_blob() const;
  void _internal_set_det3_ori_blob(const std::string& value);
  std::string* _internal_mutable_det3_ori_blob();
  public:

  // optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
  bool has_det3_ori_conf_blob() const;
  private:
  bool _internal_has_det3_ori_conf_blob() const;
  public:
  void clear_det3_ori_conf_blob();
  const std::string& det3_ori_conf_blob() const;
  void set_det3_ori_conf_blob(const std::string& value);
  void set_det3_ori_conf_blob(std::string&& value);
  void set_det3_ori_conf_blob(const char* value);
  void set_det3_ori_conf_blob(const char* value, size_t size);
  std::string* mutable_det3_ori_conf_blob();
  std::string* release_det3_ori_conf_blob();
  void set_allocated_det3_ori_conf_blob(std::string* det3_ori_conf_blob);
  private:
  const std::string& _internal_det3_ori_conf_blob() const;
  void _internal_set_det3_ori_conf_blob(const std::string& value);
  std::string* _internal_mutable_det3_ori_conf_blob();
  public:

  // optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
  bool has_det3_dim_blob() const;
  private:
  bool _internal_has_det3_dim_blob() const;
  public:
  void clear_det3_dim_blob();
  const std::string& det3_dim_blob() const;
  void set_det3_dim_blob(const std::string& value);
  void set_det3_dim_blob(std::string&& value);
  void set_det3_dim_blob(const char* value);
  void set_det3_dim_blob(const char* value, size_t size);
  std::string* mutable_det3_dim_blob();
  std::string* release_det3_dim_blob();
  void set_allocated_det3_dim_blob(std::string* det3_dim_blob);
  private:
  const std::string& _internal_det3_dim_blob() const;
  void _internal_set_det3_dim_blob(const std::string& value);
  std::string* _internal_mutable_det3_dim_blob();
  public:

  // optional string lof_blob = 19 [default = "lof_pred"];
  bool has_lof_blob() const;
  private:
  bool _internal_has_lof_blob() const;
  public:
  void clear_lof_blob();
  const std::string& lof_blob() const;
  void set_lof_blob(const std::string& value);
  void set_lof_blob(std::string&& value);
  void set_lof_blob(const char* value);
  void set_lof_blob(const char* value, size_t size);
  std::string* mutable_lof_blob();
  std::string* release_lof_blob();
  void set_allocated_lof_blob(std::string* lof_blob);
  private:
  const std::string& _internal_lof_blob() const;
  void _internal_set_lof_blob(const std::string& value);
  std::string* _internal_mutable_lof_blob();
  public:

  // optional string lor_blob = 20 [default = "lor_pred"];
  bool has_lor_blob() const;
  private:
  bool _internal_has_lor_blob() const;
  public:
  void clear_lor_blob();
  const std::string& lor_blob() const;
  void set_lor_blob(const std::string& value);
  void set_lor_blob(std::string&& value);
  void set_lor_blob(const char* value);
  void set_lor_blob(const char* value, size_t size);
  std::string* mutable_lor_blob();
  std::string* release_lor_blob();
  void set_allocated_lor_blob(std::string* lor_blob);
  private:
  const std::string& _internal_lor_blob() const;
  void _internal_set_lor_blob(const std::string& value);
  std::string* _internal_mutable_lor_blob();
  public:

  // optional string input_blob = 21 [default = "data"];
  bool has_input_blob() const;
  private:
  bool _internal_has_input_blob() const;
  public:
  void clear_input_blob();
  const std::string& input_blob() const;
  void set_input_blob(const std::string& value);
  void set_input_blob(std::string&& value);
  void set_input_blob(const char* value);
  void set_input_blob(const char* value, size_t size);
  std::string* mutable_input_blob();
  std::string* release_input_blob();
  void set_allocated_input_blob(std::string* input_blob);
  private:
  const std::string& _internal_input_blob() const;
  void _internal_set_input_blob(const std::string& value);
  std::string* _internal_mutable_input_blob();
  public:

  // optional string rois_blob = 22 [default = "rois_pred"];
  bool has_rois_blob() const;
  private:
  bool _internal_has_rois_blob() const;
  public:
  void clear_rois_blob();
  const std::string& rois_blob() const;
  void set_rois_blob(const std::string& value);
  void set_rois_blob(std::string&& value);
  void set_rois_blob(const char* value);
  void set_rois_blob(const char* value, size_t size);
  std::string* mutable_rois_blob();
  std::string* release_rois_blob();
  void set_allocated_rois_blob(std::string* rois_blob);
  private:
  const std::string& _internal_rois_blob() const;
  void _internal_set_rois_blob(const std::string& value);
  std::string* _internal_mutable_rois_blob();
  public:

  // optional string feat_blob = 23 [default = "conv_feat"];
  bool has_feat_blob() const;
  private:
  bool _internal_has_feat_blob() const;
  public:
  void clear_feat_blob();
  const std::string& feat_blob() const;
  void set_feat_blob(const std::string& value);
  void set_feat_blob(std::string&& value);
  void set_feat_blob(const char* value);
  void set_feat_blob(const char* value, size_t size);
  std::string* mutable_feat_blob();
  std::string* release_feat_blob();
  void set_allocated_feat_blob(std::string* feat_blob);
  private:
  const std::string& _internal_feat_blob() const;
  void _internal_set_feat_blob(const std::string& value);
  std::string* _internal_mutable_feat_blob();
  public:

  // optional string box_blob = 24 [default = "box_pred"];
  bool has_box_blob() const;
  private:
  bool _internal_has_box_blob() const;
  public:
  void clear_box_blob();
  const std::string& box_blob() const;
  void set_box_blob(const std::string& value);
  void set_box_blob(std::string&& value);
  void set_box_blob(const char* value);
  void set_box_blob(const char* value, size_t size);
  std::string* mutable_box_blob();
  std::string* release_box_blob();
  void set_allocated_box_blob(std::string* box_blob);
  private:
  const std::string& _internal_box_blob() const;
  void _internal_set_box_blob(const std::string& value);
  std::string* _internal_mutable_box_blob();
  public:

  // optional string iou_blob = 25 [default = "iou_pred"];
  bool has_iou_blob() const;
  private:
  bool _internal_has_iou_blob() const;
  public:
  void clear_iou_blob();
  const std::string& iou_blob() const;
  void set_iou_blob(const std::string& value);
  void set_iou_blob(std::string&& value);
  void set_iou_blob(const char* value);
  void set_iou_blob(const char* value, size_t size);
  std::string* mutable_iou_blob();
  std::string* release_iou_blob();
  void set_allocated_iou_blob(std::string* iou_blob);
  private:
  const std::string& _internal_iou_blob() const;
  void _internal_set_iou_blob(const std::string& value);
  std::string* _internal_mutable_iou_blob();
  public:

  // optional string brvis_blob = 26 [default = "brvis_pred"];
  bool has_brvis_blob() const;
  private:
  bool _internal_has_brvis_blob() const;
  public:
  void clear_brvis_blob();
  const std::string& brvis_blob() const;
  void set_brvis_blob(const std::string& value);
  void set_brvis_blob(std::string&& value);
  void set_brvis_blob(const char* value);
  void set_brvis_blob(const char* value, size_t size);
  std::string* mutable_brvis_blob();
  std::string* release_brvis_blob();
  void set_allocated_brvis_blob(std::string* brvis_blob);
  private:
  const std::string& _internal_brvis_blob() const;
  void _internal_set_brvis_blob(const std::string& value);
  std::string* _internal_mutable_brvis_blob();
  public:

  // optional string brswt_blob = 27 [default = "brswt_pred"];
  bool has_brswt_blob() const;
  private:
  bool _internal_has_brswt_blob() const;
  public:
  void clear_brswt_blob();
  const std::string& brswt_blob() const;
  void set_brswt_blob(const std::string& value);
  void set_brswt_blob(std::string&& value);
  void set_brswt_blob(const char* value);
  void set_brswt_blob(const char* value, size_t size);
  std::string* mutable_brswt_blob();
  std::string* release_brswt_blob();
  void set_allocated_brswt_blob(std::string* brswt_blob);
  private:
  const std::string& _internal_brswt_blob() const;
  void _internal_set_brswt_blob(const std::string& value);
  std::string* _internal_mutable_brswt_blob();
  public:

  // optional string ltvis_blob = 28 [default = "ltvis_pred"];
  bool has_ltvis_blob() const;
  private:
  bool _internal_has_ltvis_blob() const;
  public:
  void clear_ltvis_blob();
  const std::string& ltvis_blob() const;
  void set_ltvis_blob(const std::string& value);
  void set_ltvis_blob(std::string&& value);
  void set_ltvis_blob(const char* value);
  void set_ltvis_blob(const char* value, size_t size);
  std::string* mutable_ltvis_blob();
  std::string* release_ltvis_blob();
  void set_allocated_ltvis_blob(std::string* ltvis_blob);
  private:
  const std::string& _internal_ltvis_blob() const;
  void _internal_set_ltvis_blob(const std::string& value);
  std::string* _internal_mutable_ltvis_blob();
  public:

  // optional string ltswt_blob = 29 [default = "ltswt_pred"];
  bool has_ltswt_blob() const;
  private:
  bool _internal_has_ltswt_blob() const;
  public:
  void clear_ltswt_blob();
  const std::string& ltswt_blob() const;
  void set_ltswt_blob(const std::string& value);
  void set_ltswt_blob(std::string&& value);
  void set_ltswt_blob(const char* value);
  void set_ltswt_blob(const char* value, size_t size);
  std::string* mutable_ltswt_blob();
  std::string* release_ltswt_blob();
  void set_allocated_ltswt_blob(std::string* ltswt_blob);
  private:
  const std::string& _internal_ltswt_blob() const;
  void _internal_set_ltswt_blob(const std::string& value);
  std::string* _internal_mutable_ltswt_blob();
  public:

  // optional string rtvis_blob = 30 [default = "rtvis_pred"];
  bool has_rtvis_blob() const;
  private:
  bool _internal_has_rtvis_blob() const;
  public:
  void clear_rtvis_blob();
  const std::string& rtvis_blob() const;
  void set_rtvis_blob(const std::string& value);
  void set_rtvis_blob(std::string&& value);
  void set_rtvis_blob(const char* value);
  void set_rtvis_blob(const char* value, size_t size);
  std::string* mutable_rtvis_blob();
  std::string* release_rtvis_blob();
  void set_allocated_rtvis_blob(std::string* rtvis_blob);
  private:
  const std::string& _internal_rtvis_blob() const;
  void _internal_set_rtvis_blob(const std::string& value);
  std::string* _internal_mutable_rtvis_blob();
  public:

  // optional string rtswt_blob = 31 [default = "rtswt_pred"];
  bool has_rtswt_blob() const;
  private:
  bool _internal_has_rtswt_blob() const;
  public:
  void clear_rtswt_blob();
  const std::string& rtswt_blob() const;
  void set_rtswt_blob(const std::string& value);
  void set_rtswt_blob(std::string&& value);
  void set_rtswt_blob(const char* value);
  void set_rtswt_blob(const char* value, size_t size);
  std::string* mutable_rtswt_blob();
  std::string* release_rtswt_blob();
  void set_allocated_rtswt_blob(std::string* rtswt_blob);
  private:
  const std::string& _internal_rtswt_blob() const;
  void _internal_set_rtswt_blob(const std::string& value);
  std::string* _internal_mutable_rtswt_blob();
  public:

  // optional string area_id_blob = 32 [default = "area_id_pred"];
  bool has_area_id_blob() const;
  private:
  bool _internal_has_area_id_blob() const;
  public:
  void clear_area_id_blob();
  const std::string& area_id_blob() const;
  void set_area_id_blob(const std::string& value);
  void set_area_id_blob(std::string&& value);
  void set_area_id_blob(const char* value);
  void set_area_id_blob(const char* value, size_t size);
  std::string* mutable_area_id_blob();
  std::string* release_area_id_blob();
  void set_allocated_area_id_blob(std::string* area_id_blob);
  private:
  const std::string& _internal_area_id_blob() const;
  void _internal_set_area_id_blob(const std::string& value);
  std::string* _internal_mutable_area_id_blob();
  public:

  // optional string visible_ratio_blob = 33 [default = "vis_pred"];
  bool has_visible_ratio_blob() const;
  private:
  bool _internal_has_visible_ratio_blob() const;
  public:
  void clear_visible_ratio_blob();
  const std::string& visible_ratio_blob() const;
  void set_visible_ratio_blob(const std::string& value);
  void set_visible_ratio_blob(std::string&& value);
  void set_visible_ratio_blob(const char* value);
  void set_visible_ratio_blob(const char* value, size_t size);
  std::string* mutable_visible_ratio_blob();
  std::string* release_visible_ratio_blob();
  void set_allocated_visible_ratio_blob(std::string* visible_ratio_blob);
  private:
  const std::string& _internal_visible_ratio_blob() const;
  void _internal_set_visible_ratio_blob(const std::string& value);
  std::string* _internal_mutable_visible_ratio_blob();
  public:

  // optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
  bool has_cut_off_ratio_blob() const;
  private:
  bool _internal_has_cut_off_ratio_blob() const;
  public:
  void clear_cut_off_ratio_blob();
  const std::string& cut_off_ratio_blob() const;
  void set_cut_off_ratio_blob(const std::string& value);
  void set_cut_off_ratio_blob(std::string&& value);
  void set_cut_off_ratio_blob(const char* value);
  void set_cut_off_ratio_blob(const char* value, size_t size);
  std::string* mutable_cut_off_ratio_blob();
  std::string* release_cut_off_ratio_blob();
  void set_allocated_cut_off_ratio_blob(std::string* cut_off_ratio_blob);
  private:
  const std::string& _internal_cut_off_ratio_blob() const;
  void _internal_set_cut_off_ratio_blob(const std::string& value);
  std::string* _internal_mutable_cut_off_ratio_blob();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.NetworkParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det1_loc_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det1_loc_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det1_obj_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det1_obj_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det1_cls_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det1_cls_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det1_ori_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det1_ori_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det1_ori_conf_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det1_ori_conf_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det1_dim_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det1_dim_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det2_loc_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det2_loc_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det2_obj_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det2_obj_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det2_cls_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det2_cls_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det2_ori_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det2_ori_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det2_ori_conf_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det2_ori_conf_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det2_dim_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det2_dim_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det3_loc_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det3_loc_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det3_obj_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det3_obj_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det3_cls_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det3_cls_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det3_ori_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det3_ori_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det3_ori_conf_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det3_ori_conf_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_det3_dim_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr det3_dim_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_lof_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lof_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_lor_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lor_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_input_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_rois_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rois_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_feat_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feat_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_box_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr box_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_iou_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iou_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_brvis_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brvis_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_brswt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brswt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_ltvis_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ltvis_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_ltswt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ltswt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_rtvis_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtvis_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_rtswt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtswt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_area_id_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_id_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_visible_ratio_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visible_ratio_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_cut_off_ratio_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cut_off_ratio_blob_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class NMSParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.yolo.NMSParam) */ {
 public:
  NMSParam();
  virtual ~NMSParam();

  NMSParam(const NMSParam& from);
  NMSParam(NMSParam&& from) noexcept
    : NMSParam() {
    *this = ::std::move(from);
  }

  inline NMSParam& operator=(const NMSParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NMSParam& operator=(NMSParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NMSParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NMSParam* internal_default_instance() {
    return reinterpret_cast<const NMSParam*>(
               &_NMSParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NMSParam& a, NMSParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NMSParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NMSParam* New() const final {
    return CreateMaybeMessage<NMSParam>(nullptr);
  }

  NMSParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NMSParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NMSParam& from);
  void MergeFrom(const NMSParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NMSParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.yolo.NMSParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kThresholdFieldNumber = 2,
    kSigmaFieldNumber = 3,
    kInterClsConfThreshFieldNumber = 4,
    kInterClsNmsThreshFieldNumber = 5,
  };
  // optional string type = 1 [default = "NormalNMS"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional float threshold = 2 [default = 0.4];
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // optional float sigma = 3 [default = 0.4];
  bool has_sigma() const;
  private:
  bool _internal_has_sigma() const;
  public:
  void clear_sigma();
  float sigma() const;
  void set_sigma(float value);
  private:
  float _internal_sigma() const;
  void _internal_set_sigma(float value);
  public:

  // optional float inter_cls_conf_thresh = 4 [default = 0.1];
  bool has_inter_cls_conf_thresh() const;
  private:
  bool _internal_has_inter_cls_conf_thresh() const;
  public:
  void clear_inter_cls_conf_thresh();
  float inter_cls_conf_thresh() const;
  void set_inter_cls_conf_thresh(float value);
  private:
  float _internal_inter_cls_conf_thresh() const;
  void _internal_set_inter_cls_conf_thresh(float value);
  public:

  // optional float inter_cls_nms_thresh = 5 [default = 1];
  bool has_inter_cls_nms_thresh() const;
  private:
  bool _internal_has_inter_cls_nms_thresh() const;
  public:
  void clear_inter_cls_nms_thresh();
  float inter_cls_nms_thresh() const;
  void set_inter_cls_nms_thresh(float value);
  private:
  float _internal_inter_cls_nms_thresh() const;
  void _internal_set_inter_cls_nms_thresh(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.NMSParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float threshold_;
  float sigma_;
  float inter_cls_conf_thresh_;
  float inter_cls_nms_thresh_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class BBoxStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.yolo.BBoxStatistics) */ {
 public:
  BBoxStatistics();
  virtual ~BBoxStatistics();

  BBoxStatistics(const BBoxStatistics& from);
  BBoxStatistics(BBoxStatistics&& from) noexcept
    : BBoxStatistics() {
    *this = ::std::move(from);
  }

  inline BBoxStatistics& operator=(const BBoxStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBoxStatistics& operator=(BBoxStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BBoxStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBoxStatistics* internal_default_instance() {
    return reinterpret_cast<const BBoxStatistics*>(
               &_BBoxStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BBoxStatistics& a, BBoxStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(BBoxStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBoxStatistics* New() const final {
    return CreateMaybeMessage<BBoxStatistics>(nullptr);
  }

  BBoxStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBoxStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBoxStatistics& from);
  void MergeFrom(const BBoxStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBoxStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.yolo.BBoxStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kStdFieldNumber = 2,
  };
  // repeated float mean = 1;
  int mean_size() const;
  private:
  int _internal_mean_size() const;
  public:
  void clear_mean();
  private:
  float _internal_mean(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mean() const;
  void _internal_add_mean(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mean();
  public:
  float mean(int index) const;
  void set_mean(int index, float value);
  void add_mean(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mean() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mean();

  // repeated float std = 2;
  int std_size() const;
  private:
  int _internal_std_size() const;
  public:
  void clear_std();
  private:
  float _internal_std(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_std() const;
  void _internal_add_std(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_std();
  public:
  float std(int index) const;
  void set_std(int index, float value);
  void add_std(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      std() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_std();

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.BBoxStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mean_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > std_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
};
// -------------------------------------------------------------------

class DimensionStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.yolo.DimensionStatistics) */ {
 public:
  DimensionStatistics();
  virtual ~DimensionStatistics();

  DimensionStatistics(const DimensionStatistics& from);
  DimensionStatistics(DimensionStatistics&& from) noexcept
    : DimensionStatistics() {
    *this = ::std::move(from);
  }

  inline DimensionStatistics& operator=(const DimensionStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionStatistics& operator=(DimensionStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DimensionStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionStatistics* internal_default_instance() {
    return reinterpret_cast<const DimensionStatistics*>(
               &_DimensionStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DimensionStatistics& a, DimensionStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DimensionStatistics* New() const final {
    return CreateMaybeMessage<DimensionStatistics>(nullptr);
  }

  DimensionStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DimensionStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DimensionStatistics& from);
  void MergeFrom(const DimensionStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.yolo.DimensionStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanHFieldNumber = 1,
    kMeanWFieldNumber = 2,
    kMeanLFieldNumber = 3,
    kStdLFieldNumber = 6,
    kStdHFieldNumber = 4,
    kStdWFieldNumber = 5,
  };
  // optional float mean_h = 1 [default = 0];
  bool has_mean_h() const;
  private:
  bool _internal_has_mean_h() const;
  public:
  void clear_mean_h();
  float mean_h() const;
  void set_mean_h(float value);
  private:
  float _internal_mean_h() const;
  void _internal_set_mean_h(float value);
  public:

  // optional float mean_w = 2 [default = 0];
  bool has_mean_w() const;
  private:
  bool _internal_has_mean_w() const;
  public:
  void clear_mean_w();
  float mean_w() const;
  void set_mean_w(float value);
  private:
  float _internal_mean_w() const;
  void _internal_set_mean_w(float value);
  public:

  // optional float mean_l = 3 [default = 0];
  bool has_mean_l() const;
  private:
  bool _internal_has_mean_l() const;
  public:
  void clear_mean_l();
  float mean_l() const;
  void set_mean_l(float value);
  private:
  float _internal_mean_l() const;
  void _internal_set_mean_l(float value);
  public:

  // optional float std_l = 6 [default = 1];
  bool has_std_l() const;
  private:
  bool _internal_has_std_l() const;
  public:
  void clear_std_l();
  float std_l() const;
  void set_std_l(float value);
  private:
  float _internal_std_l() const;
  void _internal_set_std_l(float value);
  public:

  // optional float std_h = 4 [default = 1];
  bool has_std_h() const;
  private:
  bool _internal_has_std_h() const;
  public:
  void clear_std_h();
  float std_h() const;
  void set_std_h(float value);
  private:
  float _internal_std_h() const;
  void _internal_set_std_h(float value);
  public:

  // optional float std_w = 5 [default = 1];
  bool has_std_w() const;
  private:
  bool _internal_has_std_w() const;
  public:
  void clear_std_w();
  float std_w() const;
  void set_std_w(float value);
  private:
  float _internal_std_w() const;
  void _internal_set_std_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.yolo.DimensionStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float mean_h_;
  float mean_w_;
  float mean_l_;
  float std_l_;
  float std_h_;
  float std_w_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// YoloParam

// optional .apollo.perception.camera.yolo.ModelParam model_param = 1;
inline bool YoloParam::_internal_has_model_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || model_param_ != nullptr);
  return value;
}
inline bool YoloParam::has_model_param() const {
  return _internal_has_model_param();
}
inline void YoloParam::clear_model_param() {
  if (model_param_ != nullptr) model_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::yolo::ModelParam& YoloParam::_internal_model_param() const {
  const ::apollo::perception::camera::yolo::ModelParam* p = model_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::yolo::ModelParam*>(
      &::apollo::perception::camera::yolo::_ModelParam_default_instance_);
}
inline const ::apollo::perception::camera::yolo::ModelParam& YoloParam::model_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.YoloParam.model_param)
  return _internal_model_param();
}
inline ::apollo::perception::camera::yolo::ModelParam* YoloParam::release_model_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.YoloParam.model_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::yolo::ModelParam* temp = model_param_;
  model_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::yolo::ModelParam* YoloParam::_internal_mutable_model_param() {
  _has_bits_[0] |= 0x00000001u;
  if (model_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::yolo::ModelParam>(GetArenaNoVirtual());
    model_param_ = p;
  }
  return model_param_;
}
inline ::apollo::perception::camera::yolo::ModelParam* YoloParam::mutable_model_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.YoloParam.model_param)
  return _internal_mutable_model_param();
}
inline void YoloParam::set_allocated_model_param(::apollo::perception::camera::yolo::ModelParam* model_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_param_;
  }
  if (model_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_param_ = model_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.YoloParam.model_param)
}

// optional .apollo.perception.camera.yolo.NetworkParam net_param = 2;
inline bool YoloParam::_internal_has_net_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || net_param_ != nullptr);
  return value;
}
inline bool YoloParam::has_net_param() const {
  return _internal_has_net_param();
}
inline void YoloParam::clear_net_param() {
  if (net_param_ != nullptr) net_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::yolo::NetworkParam& YoloParam::_internal_net_param() const {
  const ::apollo::perception::camera::yolo::NetworkParam* p = net_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::yolo::NetworkParam*>(
      &::apollo::perception::camera::yolo::_NetworkParam_default_instance_);
}
inline const ::apollo::perception::camera::yolo::NetworkParam& YoloParam::net_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.YoloParam.net_param)
  return _internal_net_param();
}
inline ::apollo::perception::camera::yolo::NetworkParam* YoloParam::release_net_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.YoloParam.net_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::yolo::NetworkParam* temp = net_param_;
  net_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::yolo::NetworkParam* YoloParam::_internal_mutable_net_param() {
  _has_bits_[0] |= 0x00000002u;
  if (net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::yolo::NetworkParam>(GetArenaNoVirtual());
    net_param_ = p;
  }
  return net_param_;
}
inline ::apollo::perception::camera::yolo::NetworkParam* YoloParam::mutable_net_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.YoloParam.net_param)
  return _internal_mutable_net_param();
}
inline void YoloParam::set_allocated_net_param(::apollo::perception::camera::yolo::NetworkParam* net_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete net_param_;
  }
  if (net_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      net_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.YoloParam.net_param)
}

// optional .apollo.perception.camera.yolo.NMSParam nms_param = 3;
inline bool YoloParam::_internal_has_nms_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || nms_param_ != nullptr);
  return value;
}
inline bool YoloParam::has_nms_param() const {
  return _internal_has_nms_param();
}
inline void YoloParam::clear_nms_param() {
  if (nms_param_ != nullptr) nms_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::camera::yolo::NMSParam& YoloParam::_internal_nms_param() const {
  const ::apollo::perception::camera::yolo::NMSParam* p = nms_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::yolo::NMSParam*>(
      &::apollo::perception::camera::yolo::_NMSParam_default_instance_);
}
inline const ::apollo::perception::camera::yolo::NMSParam& YoloParam::nms_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.YoloParam.nms_param)
  return _internal_nms_param();
}
inline ::apollo::perception::camera::yolo::NMSParam* YoloParam::release_nms_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.YoloParam.nms_param)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::yolo::NMSParam* temp = nms_param_;
  nms_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::yolo::NMSParam* YoloParam::_internal_mutable_nms_param() {
  _has_bits_[0] |= 0x00000004u;
  if (nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::yolo::NMSParam>(GetArenaNoVirtual());
    nms_param_ = p;
  }
  return nms_param_;
}
inline ::apollo::perception::camera::yolo::NMSParam* YoloParam::mutable_nms_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.YoloParam.nms_param)
  return _internal_mutable_nms_param();
}
inline void YoloParam::set_allocated_nms_param(::apollo::perception::camera::yolo::NMSParam* nms_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nms_param_;
  }
  if (nms_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nms_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nms_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  nms_param_ = nms_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.YoloParam.nms_param)
}

// -------------------------------------------------------------------

// ModelParam

// optional string model_name = 1 [default = "yolo-2d"];
inline bool ModelParam::_internal_has_model_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelParam::has_model_name() const {
  return _internal_has_model_name();
}
inline void ModelParam::clear_model_name() {
  model_name_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelParam::model_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.model_name)
  return _internal_model_name();
}
inline void ModelParam::set_model_name(const std::string& value) {
  _internal_set_model_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline std::string* ModelParam::mutable_model_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.model_name)
  return _internal_mutable_model_name();
}
inline const std::string& ModelParam::_internal_model_name() const {
  return model_name_.GetNoArena();
}
inline void ModelParam::_internal_set_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), value);
}
inline void ModelParam::set_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline void ModelParam::set_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_name_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.model_name)
}
inline std::string* ModelParam::_internal_mutable_model_name() {
  _has_bits_[0] |= 0x00000001u;
  return model_name_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get());
}
inline std::string* ModelParam::release_model_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.model_name)
  if (!_internal_has_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_name_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get());
}
inline void ModelParam::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_name_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_name_.get(), model_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.model_name)
}

// optional string proto_file = 2 [default = "caffe.pt"];
inline bool ModelParam::_internal_has_proto_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelParam::has_proto_file() const {
  return _internal_has_proto_file();
}
inline void ModelParam::clear_proto_file() {
  proto_file_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModelParam::proto_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.proto_file)
  return _internal_proto_file();
}
inline void ModelParam::set_proto_file(const std::string& value) {
  _internal_set_proto_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline std::string* ModelParam::mutable_proto_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.proto_file)
  return _internal_mutable_proto_file();
}
inline const std::string& ModelParam::_internal_proto_file() const {
  return proto_file_.GetNoArena();
}
inline void ModelParam::_internal_set_proto_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), value);
}
inline void ModelParam::set_proto_file(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline void ModelParam::set_proto_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.proto_file)
}
inline std::string* ModelParam::_internal_mutable_proto_file() {
  _has_bits_[0] |= 0x00000002u;
  return proto_file_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
}
inline std::string* ModelParam::release_proto_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.proto_file)
  if (!_internal_has_proto_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get());
}
inline void ModelParam::set_allocated_proto_file(std::string* proto_file) {
  if (proto_file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_file_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_proto_file_.get(), proto_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.proto_file)
}

// optional string weight_file = 3 [default = "caffe.model"];
inline bool ModelParam::_internal_has_weight_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelParam::has_weight_file() const {
  return _internal_has_weight_file();
}
inline void ModelParam::clear_weight_file() {
  weight_file_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModelParam::weight_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.weight_file)
  return _internal_weight_file();
}
inline void ModelParam::set_weight_file(const std::string& value) {
  _internal_set_weight_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline std::string* ModelParam::mutable_weight_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.weight_file)
  return _internal_mutable_weight_file();
}
inline const std::string& ModelParam::_internal_weight_file() const {
  return weight_file_.GetNoArena();
}
inline void ModelParam::_internal_set_weight_file(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), value);
}
inline void ModelParam::set_weight_file(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline void ModelParam::set_weight_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  weight_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.weight_file)
}
inline std::string* ModelParam::_internal_mutable_weight_file() {
  _has_bits_[0] |= 0x00000004u;
  return weight_file_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
}
inline std::string* ModelParam::release_weight_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.weight_file)
  if (!_internal_has_weight_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return weight_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get());
}
inline void ModelParam::set_allocated_weight_file(std::string* weight_file) {
  if (weight_file != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  weight_file_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_weight_file_.get(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.weight_file)
}

// optional string stage1_pt = 21 [default = "caffe.pt"];
inline bool ModelParam::_internal_has_stage1_pt() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ModelParam::has_stage1_pt() const {
  return _internal_has_stage1_pt();
}
inline void ModelParam::clear_stage1_pt() {
  stage1_pt_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& ModelParam::stage1_pt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage1_pt)
  return _internal_stage1_pt();
}
inline void ModelParam::set_stage1_pt(const std::string& value) {
  _internal_set_stage1_pt(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline std::string* ModelParam::mutable_stage1_pt() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage1_pt)
  return _internal_mutable_stage1_pt();
}
inline const std::string& ModelParam::_internal_stage1_pt() const {
  return stage1_pt_.GetNoArena();
}
inline void ModelParam::_internal_set_stage1_pt(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  stage1_pt_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get(), value);
}
inline void ModelParam::set_stage1_pt(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  stage1_pt_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline void ModelParam::set_stage1_pt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  stage1_pt_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline void ModelParam::set_stage1_pt(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  stage1_pt_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}
inline std::string* ModelParam::_internal_mutable_stage1_pt() {
  _has_bits_[0] |= 0x00000200u;
  return stage1_pt_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get());
}
inline std::string* ModelParam::release_stage1_pt() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.stage1_pt)
  if (!_internal_has_stage1_pt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return stage1_pt_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get());
}
inline void ModelParam::set_allocated_stage1_pt(std::string* stage1_pt) {
  if (stage1_pt != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  stage1_pt_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_pt_.get(), stage1_pt);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage1_pt)
}

// optional string stage1_md = 22 [default = "caffe.model"];
inline bool ModelParam::_internal_has_stage1_md() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ModelParam::has_stage1_md() const {
  return _internal_has_stage1_md();
}
inline void ModelParam::clear_stage1_md() {
  stage1_md_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& ModelParam::stage1_md() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage1_md)
  return _internal_stage1_md();
}
inline void ModelParam::set_stage1_md(const std::string& value) {
  _internal_set_stage1_md(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline std::string* ModelParam::mutable_stage1_md() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage1_md)
  return _internal_mutable_stage1_md();
}
inline const std::string& ModelParam::_internal_stage1_md() const {
  return stage1_md_.GetNoArena();
}
inline void ModelParam::_internal_set_stage1_md(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  stage1_md_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get(), value);
}
inline void ModelParam::set_stage1_md(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  stage1_md_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline void ModelParam::set_stage1_md(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  stage1_md_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline void ModelParam::set_stage1_md(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  stage1_md_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage1_md)
}
inline std::string* ModelParam::_internal_mutable_stage1_md() {
  _has_bits_[0] |= 0x00000400u;
  return stage1_md_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get());
}
inline std::string* ModelParam::release_stage1_md() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.stage1_md)
  if (!_internal_has_stage1_md()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return stage1_md_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get());
}
inline void ModelParam::set_allocated_stage1_md(std::string* stage1_md) {
  if (stage1_md != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  stage1_md_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage1_md_.get(), stage1_md);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage1_md)
}

// optional string stage2_pt = 23 [default = "caffe.pt"];
inline bool ModelParam::_internal_has_stage2_pt() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ModelParam::has_stage2_pt() const {
  return _internal_has_stage2_pt();
}
inline void ModelParam::clear_stage2_pt() {
  stage2_pt_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& ModelParam::stage2_pt() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage2_pt)
  return _internal_stage2_pt();
}
inline void ModelParam::set_stage2_pt(const std::string& value) {
  _internal_set_stage2_pt(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline std::string* ModelParam::mutable_stage2_pt() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage2_pt)
  return _internal_mutable_stage2_pt();
}
inline const std::string& ModelParam::_internal_stage2_pt() const {
  return stage2_pt_.GetNoArena();
}
inline void ModelParam::_internal_set_stage2_pt(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  stage2_pt_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get(), value);
}
inline void ModelParam::set_stage2_pt(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  stage2_pt_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline void ModelParam::set_stage2_pt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  stage2_pt_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline void ModelParam::set_stage2_pt(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  stage2_pt_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}
inline std::string* ModelParam::_internal_mutable_stage2_pt() {
  _has_bits_[0] |= 0x00000800u;
  return stage2_pt_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get());
}
inline std::string* ModelParam::release_stage2_pt() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.stage2_pt)
  if (!_internal_has_stage2_pt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return stage2_pt_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get());
}
inline void ModelParam::set_allocated_stage2_pt(std::string* stage2_pt) {
  if (stage2_pt != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  stage2_pt_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_pt_.get(), stage2_pt);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage2_pt)
}

// optional string stage2_md = 24 [default = "caffe.model"];
inline bool ModelParam::_internal_has_stage2_md() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ModelParam::has_stage2_md() const {
  return _internal_has_stage2_md();
}
inline void ModelParam::clear_stage2_md() {
  stage2_md_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& ModelParam::stage2_md() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage2_md)
  return _internal_stage2_md();
}
inline void ModelParam::set_stage2_md(const std::string& value) {
  _internal_set_stage2_md(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline std::string* ModelParam::mutable_stage2_md() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.stage2_md)
  return _internal_mutable_stage2_md();
}
inline const std::string& ModelParam::_internal_stage2_md() const {
  return stage2_md_.GetNoArena();
}
inline void ModelParam::_internal_set_stage2_md(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  stage2_md_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get(), value);
}
inline void ModelParam::set_stage2_md(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  stage2_md_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline void ModelParam::set_stage2_md(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  stage2_md_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline void ModelParam::set_stage2_md(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  stage2_md_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.stage2_md)
}
inline std::string* ModelParam::_internal_mutable_stage2_md() {
  _has_bits_[0] |= 0x00001000u;
  return stage2_md_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get());
}
inline std::string* ModelParam::release_stage2_md() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.stage2_md)
  if (!_internal_has_stage2_md()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return stage2_md_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get());
}
inline void ModelParam::set_allocated_stage2_md(std::string* stage2_md) {
  if (stage2_md != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  stage2_md_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_stage2_md_.get(), stage2_md);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.stage2_md)
}

// optional string anchors_file = 4 [default = "anchors.txt"];
inline bool ModelParam::_internal_has_anchors_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelParam::has_anchors_file() const {
  return _internal_has_anchors_file();
}
inline void ModelParam::clear_anchors_file() {
  anchors_file_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ModelParam::anchors_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.anchors_file)
  return _internal_anchors_file();
}
inline void ModelParam::set_anchors_file(const std::string& value) {
  _internal_set_anchors_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline std::string* ModelParam::mutable_anchors_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.anchors_file)
  return _internal_mutable_anchors_file();
}
inline const std::string& ModelParam::_internal_anchors_file() const {
  return anchors_file_.GetNoArena();
}
inline void ModelParam::_internal_set_anchors_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  anchors_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get(), value);
}
inline void ModelParam::set_anchors_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  anchors_file_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline void ModelParam::set_anchors_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  anchors_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline void ModelParam::set_anchors_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  anchors_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.anchors_file)
}
inline std::string* ModelParam::_internal_mutable_anchors_file() {
  _has_bits_[0] |= 0x00000008u;
  return anchors_file_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get());
}
inline std::string* ModelParam::release_anchors_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.anchors_file)
  if (!_internal_has_anchors_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return anchors_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get());
}
inline void ModelParam::set_allocated_anchors_file(std::string* anchors_file) {
  if (anchors_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  anchors_file_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_anchors_file_.get(), anchors_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.anchors_file)
}

// optional string types_file = 5 [default = "types.txt"];
inline bool ModelParam::_internal_has_types_file() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelParam::has_types_file() const {
  return _internal_has_types_file();
}
inline void ModelParam::clear_types_file() {
  types_file_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ModelParam::types_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.types_file)
  return _internal_types_file();
}
inline void ModelParam::set_types_file(const std::string& value) {
  _internal_set_types_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline std::string* ModelParam::mutable_types_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.types_file)
  return _internal_mutable_types_file();
}
inline const std::string& ModelParam::_internal_types_file() const {
  return types_file_.GetNoArena();
}
inline void ModelParam::_internal_set_types_file(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  types_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get(), value);
}
inline void ModelParam::set_types_file(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  types_file_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline void ModelParam::set_types_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  types_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline void ModelParam::set_types_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  types_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.types_file)
}
inline std::string* ModelParam::_internal_mutable_types_file() {
  _has_bits_[0] |= 0x00000010u;
  return types_file_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get());
}
inline std::string* ModelParam::release_types_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.types_file)
  if (!_internal_has_types_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return types_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get());
}
inline void ModelParam::set_allocated_types_file(std::string* types_file) {
  if (types_file != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  types_file_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_types_file_.get(), types_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.types_file)
}

// optional string feature_file = 6 [default = "feature.pt"];
inline bool ModelParam::_internal_has_feature_file() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ModelParam::has_feature_file() const {
  return _internal_has_feature_file();
}
inline void ModelParam::clear_feature_file() {
  feature_file_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ModelParam::feature_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.feature_file)
  return _internal_feature_file();
}
inline void ModelParam::set_feature_file(const std::string& value) {
  _internal_set_feature_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline std::string* ModelParam::mutable_feature_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.feature_file)
  return _internal_mutable_feature_file();
}
inline const std::string& ModelParam::_internal_feature_file() const {
  return feature_file_.GetNoArena();
}
inline void ModelParam::_internal_set_feature_file(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), value);
}
inline void ModelParam::set_feature_file(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline void ModelParam::set_feature_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline void ModelParam::set_feature_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  feature_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.feature_file)
}
inline std::string* ModelParam::_internal_mutable_feature_file() {
  _has_bits_[0] |= 0x00000020u;
  return feature_file_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get());
}
inline std::string* ModelParam::release_feature_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.feature_file)
  if (!_internal_has_feature_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return feature_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get());
}
inline void ModelParam::set_allocated_feature_file(std::string* feature_file) {
  if (feature_file != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  feature_file_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_feature_file_.get(), feature_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.feature_file)
}

// optional float offset_ratio = 7 [default = 0.288889];
inline bool ModelParam::_internal_has_offset_ratio() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ModelParam::has_offset_ratio() const {
  return _internal_has_offset_ratio();
}
inline void ModelParam::clear_offset_ratio() {
  offset_ratio_ = 0.288889f;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ModelParam::_internal_offset_ratio() const {
  return offset_ratio_;
}
inline float ModelParam::offset_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.offset_ratio)
  return _internal_offset_ratio();
}
inline void ModelParam::_internal_set_offset_ratio(float value) {
  _has_bits_[0] |= 0x00800000u;
  offset_ratio_ = value;
}
inline void ModelParam::set_offset_ratio(float value) {
  _internal_set_offset_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.offset_ratio)
}

// optional float cropped_ratio = 13 [default = 0.711111];
inline bool ModelParam::_internal_has_cropped_ratio() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ModelParam::has_cropped_ratio() const {
  return _internal_has_cropped_ratio();
}
inline void ModelParam::clear_cropped_ratio() {
  cropped_ratio_ = 0.711111f;
  _has_bits_[0] &= ~0x02000000u;
}
inline float ModelParam::_internal_cropped_ratio() const {
  return cropped_ratio_;
}
inline float ModelParam::cropped_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.cropped_ratio)
  return _internal_cropped_ratio();
}
inline void ModelParam::_internal_set_cropped_ratio(float value) {
  _has_bits_[0] |= 0x02000000u;
  cropped_ratio_ = value;
}
inline void ModelParam::set_cropped_ratio(float value) {
  _internal_set_cropped_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.cropped_ratio)
}

// optional int32 resized_width = 14 [default = 1440];
inline bool ModelParam::_internal_has_resized_width() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ModelParam::has_resized_width() const {
  return _internal_has_resized_width();
}
inline void ModelParam::clear_resized_width() {
  resized_width_ = 1440;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::_internal_resized_width() const {
  return resized_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::resized_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.resized_width)
  return _internal_resized_width();
}
inline void ModelParam::_internal_set_resized_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  resized_width_ = value;
}
inline void ModelParam::set_resized_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resized_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.resized_width)
}

// optional int32 aligned_pixel = 15 [default = 32];
inline bool ModelParam::_internal_has_aligned_pixel() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ModelParam::has_aligned_pixel() const {
  return _internal_has_aligned_pixel();
}
inline void ModelParam::clear_aligned_pixel() {
  aligned_pixel_ = 32;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::_internal_aligned_pixel() const {
  return aligned_pixel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::aligned_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.aligned_pixel)
  return _internal_aligned_pixel();
}
inline void ModelParam::_internal_set_aligned_pixel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  aligned_pixel_ = value;
}
inline void ModelParam::set_aligned_pixel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aligned_pixel(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.aligned_pixel)
}

// optional float confidence_threshold = 8 [default = 0.1];
inline bool ModelParam::_internal_has_confidence_threshold() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ModelParam::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void ModelParam::clear_confidence_threshold() {
  confidence_threshold_ = 0.1f;
  _has_bits_[0] &= ~0x01000000u;
}
inline float ModelParam::_internal_confidence_threshold() const {
  return confidence_threshold_;
}
inline float ModelParam::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void ModelParam::_internal_set_confidence_threshold(float value) {
  _has_bits_[0] |= 0x01000000u;
  confidence_threshold_ = value;
}
inline void ModelParam::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.confidence_threshold)
}

// optional float light_vis_conf_threshold = 33 [default = 0.5];
inline bool ModelParam::_internal_has_light_vis_conf_threshold() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool ModelParam::has_light_vis_conf_threshold() const {
  return _internal_has_light_vis_conf_threshold();
}
inline void ModelParam::clear_light_vis_conf_threshold() {
  light_vis_conf_threshold_ = 0.5f;
  _has_bits_[1] &= ~0x00000001u;
}
inline float ModelParam::_internal_light_vis_conf_threshold() const {
  return light_vis_conf_threshold_;
}
inline float ModelParam::light_vis_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.light_vis_conf_threshold)
  return _internal_light_vis_conf_threshold();
}
inline void ModelParam::_internal_set_light_vis_conf_threshold(float value) {
  _has_bits_[1] |= 0x00000001u;
  light_vis_conf_threshold_ = value;
}
inline void ModelParam::set_light_vis_conf_threshold(float value) {
  _internal_set_light_vis_conf_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.light_vis_conf_threshold)
}

// optional float light_swt_conf_threshold = 34 [default = 0.5];
inline bool ModelParam::_internal_has_light_swt_conf_threshold() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool ModelParam::has_light_swt_conf_threshold() const {
  return _internal_has_light_swt_conf_threshold();
}
inline void ModelParam::clear_light_swt_conf_threshold() {
  light_swt_conf_threshold_ = 0.5f;
  _has_bits_[1] &= ~0x00000002u;
}
inline float ModelParam::_internal_light_swt_conf_threshold() const {
  return light_swt_conf_threshold_;
}
inline float ModelParam::light_swt_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.light_swt_conf_threshold)
  return _internal_light_swt_conf_threshold();
}
inline void ModelParam::_internal_set_light_swt_conf_threshold(float value) {
  _has_bits_[1] |= 0x00000002u;
  light_swt_conf_threshold_ = value;
}
inline void ModelParam::set_light_swt_conf_threshold(float value) {
  _internal_set_light_swt_conf_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.light_swt_conf_threshold)
}

// optional float roi_conf_threshold = 25 [default = 0.1];
inline bool ModelParam::_internal_has_roi_conf_threshold() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool ModelParam::has_roi_conf_threshold() const {
  return _internal_has_roi_conf_threshold();
}
inline void ModelParam::clear_roi_conf_threshold() {
  roi_conf_threshold_ = 0.1f;
  _has_bits_[0] &= ~0x20000000u;
}
inline float ModelParam::_internal_roi_conf_threshold() const {
  return roi_conf_threshold_;
}
inline float ModelParam::roi_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.roi_conf_threshold)
  return _internal_roi_conf_threshold();
}
inline void ModelParam::_internal_set_roi_conf_threshold(float value) {
  _has_bits_[0] |= 0x20000000u;
  roi_conf_threshold_ = value;
}
inline void ModelParam::set_roi_conf_threshold(float value) {
  _internal_set_roi_conf_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.roi_conf_threshold)
}

// optional float box_conf_threshold = 26 [default = 0.5];
inline bool ModelParam::_internal_has_box_conf_threshold() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool ModelParam::has_box_conf_threshold() const {
  return _internal_has_box_conf_threshold();
}
inline void ModelParam::clear_box_conf_threshold() {
  box_conf_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x40000000u;
}
inline float ModelParam::_internal_box_conf_threshold() const {
  return box_conf_threshold_;
}
inline float ModelParam::box_conf_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.box_conf_threshold)
  return _internal_box_conf_threshold();
}
inline void ModelParam::_internal_set_box_conf_threshold(float value) {
  _has_bits_[0] |= 0x40000000u;
  box_conf_threshold_ = value;
}
inline void ModelParam::set_box_conf_threshold(float value) {
  _internal_set_box_conf_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.box_conf_threshold)
}

// optional float stage2_nms_threshold = 27 [default = 0.4];
inline bool ModelParam::_internal_has_stage2_nms_threshold() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool ModelParam::has_stage2_nms_threshold() const {
  return _internal_has_stage2_nms_threshold();
}
inline void ModelParam::clear_stage2_nms_threshold() {
  stage2_nms_threshold_ = 0.4f;
  _has_bits_[0] &= ~0x80000000u;
}
inline float ModelParam::_internal_stage2_nms_threshold() const {
  return stage2_nms_threshold_;
}
inline float ModelParam::stage2_nms_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.stage2_nms_threshold)
  return _internal_stage2_nms_threshold();
}
inline void ModelParam::_internal_set_stage2_nms_threshold(float value) {
  _has_bits_[0] |= 0x80000000u;
  stage2_nms_threshold_ = value;
}
inline void ModelParam::set_stage2_nms_threshold(float value) {
  _internal_set_stage2_nms_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.stage2_nms_threshold)
}

// optional float min_2d_height = 9 [default = 0];
inline bool ModelParam::_internal_has_min_2d_height() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ModelParam::has_min_2d_height() const {
  return _internal_has_min_2d_height();
}
inline void ModelParam::clear_min_2d_height() {
  min_2d_height_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ModelParam::_internal_min_2d_height() const {
  return min_2d_height_;
}
inline float ModelParam::min_2d_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_2d_height)
  return _internal_min_2d_height();
}
inline void ModelParam::_internal_set_min_2d_height(float value) {
  _has_bits_[0] |= 0x00002000u;
  min_2d_height_ = value;
}
inline void ModelParam::set_min_2d_height(float value) {
  _internal_set_min_2d_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_2d_height)
}

// optional float min_3d_height = 30 [default = 0];
inline bool ModelParam::_internal_has_min_3d_height() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ModelParam::has_min_3d_height() const {
  return _internal_has_min_3d_height();
}
inline void ModelParam::clear_min_3d_height() {
  min_3d_height_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ModelParam::_internal_min_3d_height() const {
  return min_3d_height_;
}
inline float ModelParam::min_3d_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_3d_height)
  return _internal_min_3d_height();
}
inline void ModelParam::_internal_set_min_3d_height(float value) {
  _has_bits_[0] |= 0x00004000u;
  min_3d_height_ = value;
}
inline void ModelParam::set_min_3d_height(float value) {
  _internal_set_min_3d_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_3d_height)
}

// optional float min_3d_width = 31 [default = 0];
inline bool ModelParam::_internal_has_min_3d_width() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ModelParam::has_min_3d_width() const {
  return _internal_has_min_3d_width();
}
inline void ModelParam::clear_min_3d_width() {
  min_3d_width_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ModelParam::_internal_min_3d_width() const {
  return min_3d_width_;
}
inline float ModelParam::min_3d_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_3d_width)
  return _internal_min_3d_width();
}
inline void ModelParam::_internal_set_min_3d_width(float value) {
  _has_bits_[0] |= 0x00008000u;
  min_3d_width_ = value;
}
inline void ModelParam::set_min_3d_width(float value) {
  _internal_set_min_3d_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_3d_width)
}

// optional float min_3d_length = 32 [default = 0];
inline bool ModelParam::_internal_has_min_3d_length() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ModelParam::has_min_3d_length() const {
  return _internal_has_min_3d_length();
}
inline void ModelParam::clear_min_3d_length() {
  min_3d_length_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ModelParam::_internal_min_3d_length() const {
  return min_3d_length_;
}
inline float ModelParam::min_3d_length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.min_3d_length)
  return _internal_min_3d_length();
}
inline void ModelParam::_internal_set_min_3d_length(float value) {
  _has_bits_[0] |= 0x00010000u;
  min_3d_length_ = value;
}
inline void ModelParam::set_min_3d_length(float value) {
  _internal_set_min_3d_length(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.min_3d_length)
}

// optional string calibratetable_root = 11 [default = "./"];
inline bool ModelParam::_internal_has_calibratetable_root() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ModelParam::has_calibratetable_root() const {
  return _internal_has_calibratetable_root();
}
inline void ModelParam::clear_calibratetable_root() {
  calibratetable_root_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ModelParam::calibratetable_root() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
  return _internal_calibratetable_root();
}
inline void ModelParam::set_calibratetable_root(const std::string& value) {
  _internal_set_calibratetable_root(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline std::string* ModelParam::mutable_calibratetable_root() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
  return _internal_mutable_calibratetable_root();
}
inline const std::string& ModelParam::_internal_calibratetable_root() const {
  return calibratetable_root_.GetNoArena();
}
inline void ModelParam::_internal_set_calibratetable_root(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  calibratetable_root_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get(), value);
}
inline void ModelParam::set_calibratetable_root(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  calibratetable_root_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline void ModelParam::set_calibratetable_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  calibratetable_root_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline void ModelParam::set_calibratetable_root(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  calibratetable_root_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}
inline std::string* ModelParam::_internal_mutable_calibratetable_root() {
  _has_bits_[0] |= 0x00000040u;
  return calibratetable_root_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get());
}
inline std::string* ModelParam::release_calibratetable_root() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
  if (!_internal_has_calibratetable_root()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return calibratetable_root_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get());
}
inline void ModelParam::set_allocated_calibratetable_root(std::string* calibratetable_root) {
  if (calibratetable_root != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  calibratetable_root_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_calibratetable_root_.get(), calibratetable_root);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.calibratetable_root)
}

// optional string model_type = 12 [default = "CaffeNet"];
inline bool ModelParam::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ModelParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void ModelParam::clear_model_type() {
  model_type_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ModelParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.model_type)
  return _internal_model_type();
}
inline void ModelParam::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline std::string* ModelParam::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& ModelParam::_internal_model_type() const {
  return model_type_.GetNoArena();
}
inline void ModelParam::_internal_set_model_type(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  model_type_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), value);
}
inline void ModelParam::set_model_type(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  model_type_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  model_type_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline void ModelParam::set_model_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  model_type_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.model_type)
}
inline std::string* ModelParam::_internal_mutable_model_type() {
  _has_bits_[0] |= 0x00000080u;
  return model_type_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline std::string* ModelParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return model_type_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline void ModelParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  model_type_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_model_type_.get(), model_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.model_type)
}

// optional int32 ori_cycle = 16 [default = 1];
inline bool ModelParam::_internal_has_ori_cycle() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool ModelParam::has_ori_cycle() const {
  return _internal_has_ori_cycle();
}
inline void ModelParam::clear_ori_cycle() {
  ori_cycle_ = 1;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::_internal_ori_cycle() const {
  return ori_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::ori_cycle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.ori_cycle)
  return _internal_ori_cycle();
}
inline void ModelParam::_internal_set_ori_cycle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  ori_cycle_ = value;
}
inline void ModelParam::set_ori_cycle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ori_cycle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.ori_cycle)
}

// optional bool per_cls_reg = 17 [default = false];
inline bool ModelParam::_internal_has_per_cls_reg() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ModelParam::has_per_cls_reg() const {
  return _internal_has_per_cls_reg();
}
inline void ModelParam::clear_per_cls_reg() {
  per_cls_reg_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool ModelParam::_internal_per_cls_reg() const {
  return per_cls_reg_;
}
inline bool ModelParam::per_cls_reg() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.per_cls_reg)
  return _internal_per_cls_reg();
}
inline void ModelParam::_internal_set_per_cls_reg(bool value) {
  _has_bits_[0] |= 0x00020000u;
  per_cls_reg_ = value;
}
inline void ModelParam::set_per_cls_reg(bool value) {
  _internal_set_per_cls_reg(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.per_cls_reg)
}

// repeated .apollo.perception.camera.yolo.DimensionStatistics dimension_statistics = 18;
inline int ModelParam::_internal_dimension_statistics_size() const {
  return dimension_statistics_.size();
}
inline int ModelParam::dimension_statistics_size() const {
  return _internal_dimension_statistics_size();
}
inline void ModelParam::clear_dimension_statistics() {
  dimension_statistics_.Clear();
}
inline ::apollo::perception::camera::yolo::DimensionStatistics* ModelParam::mutable_dimension_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return dimension_statistics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >*
ModelParam::mutable_dimension_statistics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return &dimension_statistics_;
}
inline const ::apollo::perception::camera::yolo::DimensionStatistics& ModelParam::_internal_dimension_statistics(int index) const {
  return dimension_statistics_.Get(index);
}
inline const ::apollo::perception::camera::yolo::DimensionStatistics& ModelParam::dimension_statistics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return _internal_dimension_statistics(index);
}
inline ::apollo::perception::camera::yolo::DimensionStatistics* ModelParam::_internal_add_dimension_statistics() {
  return dimension_statistics_.Add();
}
inline ::apollo::perception::camera::yolo::DimensionStatistics* ModelParam::add_dimension_statistics() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return _internal_add_dimension_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::DimensionStatistics >&
ModelParam::dimension_statistics() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.ModelParam.dimension_statistics)
  return dimension_statistics_;
}

// repeated .apollo.perception.camera.yolo.BBoxStatistics bbox_statistics = 19;
inline int ModelParam::_internal_bbox_statistics_size() const {
  return bbox_statistics_.size();
}
inline int ModelParam::bbox_statistics_size() const {
  return _internal_bbox_statistics_size();
}
inline void ModelParam::clear_bbox_statistics() {
  bbox_statistics_.Clear();
}
inline ::apollo::perception::camera::yolo::BBoxStatistics* ModelParam::mutable_bbox_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return bbox_statistics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >*
ModelParam::mutable_bbox_statistics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return &bbox_statistics_;
}
inline const ::apollo::perception::camera::yolo::BBoxStatistics& ModelParam::_internal_bbox_statistics(int index) const {
  return bbox_statistics_.Get(index);
}
inline const ::apollo::perception::camera::yolo::BBoxStatistics& ModelParam::bbox_statistics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return _internal_bbox_statistics(index);
}
inline ::apollo::perception::camera::yolo::BBoxStatistics* ModelParam::_internal_add_bbox_statistics() {
  return bbox_statistics_.Add();
}
inline ::apollo::perception::camera::yolo::BBoxStatistics* ModelParam::add_bbox_statistics() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return _internal_add_bbox_statistics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::yolo::BBoxStatistics >&
ModelParam::bbox_statistics() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.ModelParam.bbox_statistics)
  return bbox_statistics_;
}

// optional string expand_file = 20 [default = "expand.txt"];
inline bool ModelParam::_internal_has_expand_file() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ModelParam::has_expand_file() const {
  return _internal_has_expand_file();
}
inline void ModelParam::clear_expand_file() {
  expand_file_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ModelParam::expand_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.expand_file)
  return _internal_expand_file();
}
inline void ModelParam::set_expand_file(const std::string& value) {
  _internal_set_expand_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline std::string* ModelParam::mutable_expand_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.ModelParam.expand_file)
  return _internal_mutable_expand_file();
}
inline const std::string& ModelParam::_internal_expand_file() const {
  return expand_file_.GetNoArena();
}
inline void ModelParam::_internal_set_expand_file(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  expand_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get(), value);
}
inline void ModelParam::set_expand_file(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  expand_file_.SetNoArena(
    &::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline void ModelParam::set_expand_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  expand_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline void ModelParam::set_expand_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  expand_file_.SetNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.ModelParam.expand_file)
}
inline std::string* ModelParam::_internal_mutable_expand_file() {
  _has_bits_[0] |= 0x00000100u;
  return expand_file_.MutableNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get());
}
inline std::string* ModelParam::release_expand_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.ModelParam.expand_file)
  if (!_internal_has_expand_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return expand_file_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get());
}
inline void ModelParam::set_allocated_expand_file(std::string* expand_file) {
  if (expand_file != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  expand_file_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::ModelParam::_i_give_permission_to_break_this_code_default_expand_file_.get(), expand_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.ModelParam.expand_file)
}

// optional bool with_box3d = 41 [default = false];
inline bool ModelParam::_internal_has_with_box3d() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ModelParam::has_with_box3d() const {
  return _internal_has_with_box3d();
}
inline void ModelParam::clear_with_box3d() {
  with_box3d_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ModelParam::_internal_with_box3d() const {
  return with_box3d_;
}
inline bool ModelParam::with_box3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_box3d)
  return _internal_with_box3d();
}
inline void ModelParam::_internal_set_with_box3d(bool value) {
  _has_bits_[0] |= 0x00040000u;
  with_box3d_ = value;
}
inline void ModelParam::set_with_box3d(bool value) {
  _internal_set_with_box3d(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_box3d)
}

// optional bool with_frbox = 42 [default = false];
inline bool ModelParam::_internal_has_with_frbox() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ModelParam::has_with_frbox() const {
  return _internal_has_with_frbox();
}
inline void ModelParam::clear_with_frbox() {
  with_frbox_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ModelParam::_internal_with_frbox() const {
  return with_frbox_;
}
inline bool ModelParam::with_frbox() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_frbox)
  return _internal_with_frbox();
}
inline void ModelParam::_internal_set_with_frbox(bool value) {
  _has_bits_[0] |= 0x00080000u;
  with_frbox_ = value;
}
inline void ModelParam::set_with_frbox(bool value) {
  _internal_set_with_frbox(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_frbox)
}

// optional bool with_lights = 43 [default = false];
inline bool ModelParam::_internal_has_with_lights() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ModelParam::has_with_lights() const {
  return _internal_has_with_lights();
}
inline void ModelParam::clear_with_lights() {
  with_lights_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ModelParam::_internal_with_lights() const {
  return with_lights_;
}
inline bool ModelParam::with_lights() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_lights)
  return _internal_with_lights();
}
inline void ModelParam::_internal_set_with_lights(bool value) {
  _has_bits_[0] |= 0x00100000u;
  with_lights_ = value;
}
inline void ModelParam::set_with_lights(bool value) {
  _internal_set_with_lights(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_lights)
}

// optional bool with_ratios = 44 [default = false];
inline bool ModelParam::_internal_has_with_ratios() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ModelParam::has_with_ratios() const {
  return _internal_has_with_ratios();
}
inline void ModelParam::clear_with_ratios() {
  with_ratios_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ModelParam::_internal_with_ratios() const {
  return with_ratios_;
}
inline bool ModelParam::with_ratios() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.with_ratios)
  return _internal_with_ratios();
}
inline void ModelParam::_internal_set_with_ratios(bool value) {
  _has_bits_[0] |= 0x00200000u;
  with_ratios_ = value;
}
inline void ModelParam::set_with_ratios(bool value) {
  _internal_set_with_ratios(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.with_ratios)
}

// optional int32 num_areas = 46 [default = 0];
inline bool ModelParam::_internal_has_num_areas() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ModelParam::has_num_areas() const {
  return _internal_has_num_areas();
}
inline void ModelParam::clear_num_areas() {
  num_areas_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::_internal_num_areas() const {
  return num_areas_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModelParam::num_areas() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.num_areas)
  return _internal_num_areas();
}
inline void ModelParam::_internal_set_num_areas(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  num_areas_ = value;
}
inline void ModelParam::set_num_areas(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_areas(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.num_areas)
}

// optional float border_ratio = 45 [default = 0.01];
inline bool ModelParam::_internal_has_border_ratio() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool ModelParam::has_border_ratio() const {
  return _internal_has_border_ratio();
}
inline void ModelParam::clear_border_ratio() {
  border_ratio_ = 0.01f;
  _has_bits_[1] &= ~0x00000004u;
}
inline float ModelParam::_internal_border_ratio() const {
  return border_ratio_;
}
inline float ModelParam::border_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.ModelParam.border_ratio)
  return _internal_border_ratio();
}
inline void ModelParam::_internal_set_border_ratio(float value) {
  _has_bits_[1] |= 0x00000004u;
  border_ratio_ = value;
}
inline void ModelParam::set_border_ratio(float value) {
  _internal_set_border_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.ModelParam.border_ratio)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string det1_loc_blob = 1 [default = "detect1_loc_pred"];
inline bool NetworkParam::_internal_has_det1_loc_blob() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_det1_loc_blob() const {
  return _internal_has_det1_loc_blob();
}
inline void NetworkParam::clear_det1_loc_blob() {
  det1_loc_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkParam::det1_loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
  return _internal_det1_loc_blob();
}
inline void NetworkParam::set_det1_loc_blob(const std::string& value) {
  _internal_set_det1_loc_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline std::string* NetworkParam::mutable_det1_loc_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
  return _internal_mutable_det1_loc_blob();
}
inline const std::string& NetworkParam::_internal_det1_loc_blob() const {
  return det1_loc_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det1_loc_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  det1_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get(), value);
}
inline void NetworkParam::set_det1_loc_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  det1_loc_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline void NetworkParam::set_det1_loc_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  det1_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline void NetworkParam::set_det1_loc_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  det1_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}
inline std::string* NetworkParam::_internal_mutable_det1_loc_blob() {
  _has_bits_[0] |= 0x00000001u;
  return det1_loc_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get());
}
inline std::string* NetworkParam::release_det1_loc_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
  if (!_internal_has_det1_loc_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return det1_loc_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get());
}
inline void NetworkParam::set_allocated_det1_loc_blob(std::string* det1_loc_blob) {
  if (det1_loc_blob != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  det1_loc_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_loc_blob_.get(), det1_loc_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_loc_blob)
}

// optional string det1_obj_blob = 2 [default = "detect1_obj_pred"];
inline bool NetworkParam::_internal_has_det1_obj_blob() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_det1_obj_blob() const {
  return _internal_has_det1_obj_blob();
}
inline void NetworkParam::clear_det1_obj_blob() {
  det1_obj_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkParam::det1_obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
  return _internal_det1_obj_blob();
}
inline void NetworkParam::set_det1_obj_blob(const std::string& value) {
  _internal_set_det1_obj_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline std::string* NetworkParam::mutable_det1_obj_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
  return _internal_mutable_det1_obj_blob();
}
inline const std::string& NetworkParam::_internal_det1_obj_blob() const {
  return det1_obj_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det1_obj_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  det1_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get(), value);
}
inline void NetworkParam::set_det1_obj_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  det1_obj_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline void NetworkParam::set_det1_obj_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  det1_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline void NetworkParam::set_det1_obj_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  det1_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}
inline std::string* NetworkParam::_internal_mutable_det1_obj_blob() {
  _has_bits_[0] |= 0x00000002u;
  return det1_obj_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get());
}
inline std::string* NetworkParam::release_det1_obj_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
  if (!_internal_has_det1_obj_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return det1_obj_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get());
}
inline void NetworkParam::set_allocated_det1_obj_blob(std::string* det1_obj_blob) {
  if (det1_obj_blob != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  det1_obj_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_obj_blob_.get(), det1_obj_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_obj_blob)
}

// optional string det1_cls_blob = 3 [default = "detect1_cls_pred"];
inline bool NetworkParam::_internal_has_det1_cls_blob() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkParam::has_det1_cls_blob() const {
  return _internal_has_det1_cls_blob();
}
inline void NetworkParam::clear_det1_cls_blob() {
  det1_cls_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkParam::det1_cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
  return _internal_det1_cls_blob();
}
inline void NetworkParam::set_det1_cls_blob(const std::string& value) {
  _internal_set_det1_cls_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline std::string* NetworkParam::mutable_det1_cls_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
  return _internal_mutable_det1_cls_blob();
}
inline const std::string& NetworkParam::_internal_det1_cls_blob() const {
  return det1_cls_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det1_cls_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  det1_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get(), value);
}
inline void NetworkParam::set_det1_cls_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  det1_cls_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline void NetworkParam::set_det1_cls_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  det1_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline void NetworkParam::set_det1_cls_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  det1_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}
inline std::string* NetworkParam::_internal_mutable_det1_cls_blob() {
  _has_bits_[0] |= 0x00000004u;
  return det1_cls_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get());
}
inline std::string* NetworkParam::release_det1_cls_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
  if (!_internal_has_det1_cls_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return det1_cls_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get());
}
inline void NetworkParam::set_allocated_det1_cls_blob(std::string* det1_cls_blob) {
  if (det1_cls_blob != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  det1_cls_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_cls_blob_.get(), det1_cls_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_cls_blob)
}

// optional string det1_ori_blob = 4 [default = "detect1_ori_pred"];
inline bool NetworkParam::_internal_has_det1_ori_blob() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkParam::has_det1_ori_blob() const {
  return _internal_has_det1_ori_blob();
}
inline void NetworkParam::clear_det1_ori_blob() {
  det1_ori_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NetworkParam::det1_ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
  return _internal_det1_ori_blob();
}
inline void NetworkParam::set_det1_ori_blob(const std::string& value) {
  _internal_set_det1_ori_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline std::string* NetworkParam::mutable_det1_ori_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
  return _internal_mutable_det1_ori_blob();
}
inline const std::string& NetworkParam::_internal_det1_ori_blob() const {
  return det1_ori_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det1_ori_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  det1_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get(), value);
}
inline void NetworkParam::set_det1_ori_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  det1_ori_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline void NetworkParam::set_det1_ori_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  det1_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline void NetworkParam::set_det1_ori_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  det1_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}
inline std::string* NetworkParam::_internal_mutable_det1_ori_blob() {
  _has_bits_[0] |= 0x00000008u;
  return det1_ori_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get());
}
inline std::string* NetworkParam::release_det1_ori_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
  if (!_internal_has_det1_ori_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return det1_ori_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get());
}
inline void NetworkParam::set_allocated_det1_ori_blob(std::string* det1_ori_blob) {
  if (det1_ori_blob != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  det1_ori_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_blob_.get(), det1_ori_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_ori_blob)
}

// optional string det1_ori_conf_blob = 5 [default = "detect1_ori_conf_pred"];
inline bool NetworkParam::_internal_has_det1_ori_conf_blob() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkParam::has_det1_ori_conf_blob() const {
  return _internal_has_det1_ori_conf_blob();
}
inline void NetworkParam::clear_det1_ori_conf_blob() {
  det1_ori_conf_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NetworkParam::det1_ori_conf_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
  return _internal_det1_ori_conf_blob();
}
inline void NetworkParam::set_det1_ori_conf_blob(const std::string& value) {
  _internal_set_det1_ori_conf_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline std::string* NetworkParam::mutable_det1_ori_conf_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
  return _internal_mutable_det1_ori_conf_blob();
}
inline const std::string& NetworkParam::_internal_det1_ori_conf_blob() const {
  return det1_ori_conf_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det1_ori_conf_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  det1_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get(), value);
}
inline void NetworkParam::set_det1_ori_conf_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  det1_ori_conf_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline void NetworkParam::set_det1_ori_conf_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  det1_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline void NetworkParam::set_det1_ori_conf_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  det1_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}
inline std::string* NetworkParam::_internal_mutable_det1_ori_conf_blob() {
  _has_bits_[0] |= 0x00000010u;
  return det1_ori_conf_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get());
}
inline std::string* NetworkParam::release_det1_ori_conf_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
  if (!_internal_has_det1_ori_conf_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return det1_ori_conf_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get());
}
inline void NetworkParam::set_allocated_det1_ori_conf_blob(std::string* det1_ori_conf_blob) {
  if (det1_ori_conf_blob != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  det1_ori_conf_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_ori_conf_blob_.get(), det1_ori_conf_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_ori_conf_blob)
}

// optional string det1_dim_blob = 6 [default = "detect1_dim_pred"];
inline bool NetworkParam::_internal_has_det1_dim_blob() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkParam::has_det1_dim_blob() const {
  return _internal_has_det1_dim_blob();
}
inline void NetworkParam::clear_det1_dim_blob() {
  det1_dim_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NetworkParam::det1_dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
  return _internal_det1_dim_blob();
}
inline void NetworkParam::set_det1_dim_blob(const std::string& value) {
  _internal_set_det1_dim_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline std::string* NetworkParam::mutable_det1_dim_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
  return _internal_mutable_det1_dim_blob();
}
inline const std::string& NetworkParam::_internal_det1_dim_blob() const {
  return det1_dim_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det1_dim_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  det1_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get(), value);
}
inline void NetworkParam::set_det1_dim_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  det1_dim_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline void NetworkParam::set_det1_dim_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  det1_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline void NetworkParam::set_det1_dim_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  det1_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}
inline std::string* NetworkParam::_internal_mutable_det1_dim_blob() {
  _has_bits_[0] |= 0x00000020u;
  return det1_dim_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get());
}
inline std::string* NetworkParam::release_det1_dim_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
  if (!_internal_has_det1_dim_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return det1_dim_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get());
}
inline void NetworkParam::set_allocated_det1_dim_blob(std::string* det1_dim_blob) {
  if (det1_dim_blob != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  det1_dim_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det1_dim_blob_.get(), det1_dim_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det1_dim_blob)
}

// optional string det2_loc_blob = 7 [default = "detect2_loc_pred"];
inline bool NetworkParam::_internal_has_det2_loc_blob() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NetworkParam::has_det2_loc_blob() const {
  return _internal_has_det2_loc_blob();
}
inline void NetworkParam::clear_det2_loc_blob() {
  det2_loc_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& NetworkParam::det2_loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
  return _internal_det2_loc_blob();
}
inline void NetworkParam::set_det2_loc_blob(const std::string& value) {
  _internal_set_det2_loc_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline std::string* NetworkParam::mutable_det2_loc_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
  return _internal_mutable_det2_loc_blob();
}
inline const std::string& NetworkParam::_internal_det2_loc_blob() const {
  return det2_loc_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det2_loc_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  det2_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get(), value);
}
inline void NetworkParam::set_det2_loc_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  det2_loc_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline void NetworkParam::set_det2_loc_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  det2_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline void NetworkParam::set_det2_loc_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  det2_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}
inline std::string* NetworkParam::_internal_mutable_det2_loc_blob() {
  _has_bits_[0] |= 0x00000040u;
  return det2_loc_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get());
}
inline std::string* NetworkParam::release_det2_loc_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
  if (!_internal_has_det2_loc_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return det2_loc_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get());
}
inline void NetworkParam::set_allocated_det2_loc_blob(std::string* det2_loc_blob) {
  if (det2_loc_blob != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  det2_loc_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_loc_blob_.get(), det2_loc_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_loc_blob)
}

// optional string det2_obj_blob = 8 [default = "detect2_obj_pred"];
inline bool NetworkParam::_internal_has_det2_obj_blob() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NetworkParam::has_det2_obj_blob() const {
  return _internal_has_det2_obj_blob();
}
inline void NetworkParam::clear_det2_obj_blob() {
  det2_obj_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& NetworkParam::det2_obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
  return _internal_det2_obj_blob();
}
inline void NetworkParam::set_det2_obj_blob(const std::string& value) {
  _internal_set_det2_obj_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline std::string* NetworkParam::mutable_det2_obj_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
  return _internal_mutable_det2_obj_blob();
}
inline const std::string& NetworkParam::_internal_det2_obj_blob() const {
  return det2_obj_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det2_obj_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  det2_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get(), value);
}
inline void NetworkParam::set_det2_obj_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  det2_obj_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline void NetworkParam::set_det2_obj_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  det2_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline void NetworkParam::set_det2_obj_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  det2_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}
inline std::string* NetworkParam::_internal_mutable_det2_obj_blob() {
  _has_bits_[0] |= 0x00000080u;
  return det2_obj_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get());
}
inline std::string* NetworkParam::release_det2_obj_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
  if (!_internal_has_det2_obj_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return det2_obj_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get());
}
inline void NetworkParam::set_allocated_det2_obj_blob(std::string* det2_obj_blob) {
  if (det2_obj_blob != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  det2_obj_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_obj_blob_.get(), det2_obj_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_obj_blob)
}

// optional string det2_cls_blob = 9 [default = "detect2_cls_pred"];
inline bool NetworkParam::_internal_has_det2_cls_blob() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NetworkParam::has_det2_cls_blob() const {
  return _internal_has_det2_cls_blob();
}
inline void NetworkParam::clear_det2_cls_blob() {
  det2_cls_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& NetworkParam::det2_cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
  return _internal_det2_cls_blob();
}
inline void NetworkParam::set_det2_cls_blob(const std::string& value) {
  _internal_set_det2_cls_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline std::string* NetworkParam::mutable_det2_cls_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
  return _internal_mutable_det2_cls_blob();
}
inline const std::string& NetworkParam::_internal_det2_cls_blob() const {
  return det2_cls_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det2_cls_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  det2_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get(), value);
}
inline void NetworkParam::set_det2_cls_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  det2_cls_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline void NetworkParam::set_det2_cls_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  det2_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline void NetworkParam::set_det2_cls_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  det2_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}
inline std::string* NetworkParam::_internal_mutable_det2_cls_blob() {
  _has_bits_[0] |= 0x00000100u;
  return det2_cls_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get());
}
inline std::string* NetworkParam::release_det2_cls_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
  if (!_internal_has_det2_cls_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return det2_cls_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get());
}
inline void NetworkParam::set_allocated_det2_cls_blob(std::string* det2_cls_blob) {
  if (det2_cls_blob != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  det2_cls_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_cls_blob_.get(), det2_cls_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_cls_blob)
}

// optional string det2_ori_blob = 10 [default = "detect2_ori_pred"];
inline bool NetworkParam::_internal_has_det2_ori_blob() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NetworkParam::has_det2_ori_blob() const {
  return _internal_has_det2_ori_blob();
}
inline void NetworkParam::clear_det2_ori_blob() {
  det2_ori_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& NetworkParam::det2_ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
  return _internal_det2_ori_blob();
}
inline void NetworkParam::set_det2_ori_blob(const std::string& value) {
  _internal_set_det2_ori_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline std::string* NetworkParam::mutable_det2_ori_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
  return _internal_mutable_det2_ori_blob();
}
inline const std::string& NetworkParam::_internal_det2_ori_blob() const {
  return det2_ori_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det2_ori_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  det2_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get(), value);
}
inline void NetworkParam::set_det2_ori_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  det2_ori_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline void NetworkParam::set_det2_ori_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  det2_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline void NetworkParam::set_det2_ori_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  det2_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}
inline std::string* NetworkParam::_internal_mutable_det2_ori_blob() {
  _has_bits_[0] |= 0x00000200u;
  return det2_ori_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get());
}
inline std::string* NetworkParam::release_det2_ori_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
  if (!_internal_has_det2_ori_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return det2_ori_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get());
}
inline void NetworkParam::set_allocated_det2_ori_blob(std::string* det2_ori_blob) {
  if (det2_ori_blob != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  det2_ori_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_blob_.get(), det2_ori_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_ori_blob)
}

// optional string det2_ori_conf_blob = 11 [default = "detect2_ori_conf_pred"];
inline bool NetworkParam::_internal_has_det2_ori_conf_blob() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NetworkParam::has_det2_ori_conf_blob() const {
  return _internal_has_det2_ori_conf_blob();
}
inline void NetworkParam::clear_det2_ori_conf_blob() {
  det2_ori_conf_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& NetworkParam::det2_ori_conf_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
  return _internal_det2_ori_conf_blob();
}
inline void NetworkParam::set_det2_ori_conf_blob(const std::string& value) {
  _internal_set_det2_ori_conf_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline std::string* NetworkParam::mutable_det2_ori_conf_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
  return _internal_mutable_det2_ori_conf_blob();
}
inline const std::string& NetworkParam::_internal_det2_ori_conf_blob() const {
  return det2_ori_conf_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det2_ori_conf_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  det2_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get(), value);
}
inline void NetworkParam::set_det2_ori_conf_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  det2_ori_conf_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline void NetworkParam::set_det2_ori_conf_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  det2_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline void NetworkParam::set_det2_ori_conf_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  det2_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}
inline std::string* NetworkParam::_internal_mutable_det2_ori_conf_blob() {
  _has_bits_[0] |= 0x00000400u;
  return det2_ori_conf_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get());
}
inline std::string* NetworkParam::release_det2_ori_conf_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
  if (!_internal_has_det2_ori_conf_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return det2_ori_conf_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get());
}
inline void NetworkParam::set_allocated_det2_ori_conf_blob(std::string* det2_ori_conf_blob) {
  if (det2_ori_conf_blob != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  det2_ori_conf_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_ori_conf_blob_.get(), det2_ori_conf_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_ori_conf_blob)
}

// optional string det2_dim_blob = 12 [default = "detect2_dim_pred"];
inline bool NetworkParam::_internal_has_det2_dim_blob() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NetworkParam::has_det2_dim_blob() const {
  return _internal_has_det2_dim_blob();
}
inline void NetworkParam::clear_det2_dim_blob() {
  det2_dim_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& NetworkParam::det2_dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
  return _internal_det2_dim_blob();
}
inline void NetworkParam::set_det2_dim_blob(const std::string& value) {
  _internal_set_det2_dim_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline std::string* NetworkParam::mutable_det2_dim_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
  return _internal_mutable_det2_dim_blob();
}
inline const std::string& NetworkParam::_internal_det2_dim_blob() const {
  return det2_dim_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det2_dim_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  det2_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get(), value);
}
inline void NetworkParam::set_det2_dim_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  det2_dim_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline void NetworkParam::set_det2_dim_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  det2_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline void NetworkParam::set_det2_dim_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  det2_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}
inline std::string* NetworkParam::_internal_mutable_det2_dim_blob() {
  _has_bits_[0] |= 0x00000800u;
  return det2_dim_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get());
}
inline std::string* NetworkParam::release_det2_dim_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
  if (!_internal_has_det2_dim_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return det2_dim_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get());
}
inline void NetworkParam::set_allocated_det2_dim_blob(std::string* det2_dim_blob) {
  if (det2_dim_blob != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  det2_dim_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det2_dim_blob_.get(), det2_dim_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det2_dim_blob)
}

// optional string det3_loc_blob = 13 [default = "detect3_loc_pred"];
inline bool NetworkParam::_internal_has_det3_loc_blob() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NetworkParam::has_det3_loc_blob() const {
  return _internal_has_det3_loc_blob();
}
inline void NetworkParam::clear_det3_loc_blob() {
  det3_loc_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& NetworkParam::det3_loc_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
  return _internal_det3_loc_blob();
}
inline void NetworkParam::set_det3_loc_blob(const std::string& value) {
  _internal_set_det3_loc_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline std::string* NetworkParam::mutable_det3_loc_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
  return _internal_mutable_det3_loc_blob();
}
inline const std::string& NetworkParam::_internal_det3_loc_blob() const {
  return det3_loc_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det3_loc_blob(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  det3_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get(), value);
}
inline void NetworkParam::set_det3_loc_blob(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  det3_loc_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline void NetworkParam::set_det3_loc_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  det3_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline void NetworkParam::set_det3_loc_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  det3_loc_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}
inline std::string* NetworkParam::_internal_mutable_det3_loc_blob() {
  _has_bits_[0] |= 0x00001000u;
  return det3_loc_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get());
}
inline std::string* NetworkParam::release_det3_loc_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
  if (!_internal_has_det3_loc_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return det3_loc_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get());
}
inline void NetworkParam::set_allocated_det3_loc_blob(std::string* det3_loc_blob) {
  if (det3_loc_blob != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  det3_loc_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_loc_blob_.get(), det3_loc_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_loc_blob)
}

// optional string det3_obj_blob = 14 [default = "detect3_obj_pred"];
inline bool NetworkParam::_internal_has_det3_obj_blob() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool NetworkParam::has_det3_obj_blob() const {
  return _internal_has_det3_obj_blob();
}
inline void NetworkParam::clear_det3_obj_blob() {
  det3_obj_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& NetworkParam::det3_obj_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
  return _internal_det3_obj_blob();
}
inline void NetworkParam::set_det3_obj_blob(const std::string& value) {
  _internal_set_det3_obj_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline std::string* NetworkParam::mutable_det3_obj_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
  return _internal_mutable_det3_obj_blob();
}
inline const std::string& NetworkParam::_internal_det3_obj_blob() const {
  return det3_obj_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det3_obj_blob(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  det3_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get(), value);
}
inline void NetworkParam::set_det3_obj_blob(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  det3_obj_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline void NetworkParam::set_det3_obj_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  det3_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline void NetworkParam::set_det3_obj_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  det3_obj_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}
inline std::string* NetworkParam::_internal_mutable_det3_obj_blob() {
  _has_bits_[0] |= 0x00002000u;
  return det3_obj_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get());
}
inline std::string* NetworkParam::release_det3_obj_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
  if (!_internal_has_det3_obj_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return det3_obj_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get());
}
inline void NetworkParam::set_allocated_det3_obj_blob(std::string* det3_obj_blob) {
  if (det3_obj_blob != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  det3_obj_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_obj_blob_.get(), det3_obj_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_obj_blob)
}

// optional string det3_cls_blob = 15 [default = "detect3_cls_pred"];
inline bool NetworkParam::_internal_has_det3_cls_blob() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool NetworkParam::has_det3_cls_blob() const {
  return _internal_has_det3_cls_blob();
}
inline void NetworkParam::clear_det3_cls_blob() {
  det3_cls_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& NetworkParam::det3_cls_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
  return _internal_det3_cls_blob();
}
inline void NetworkParam::set_det3_cls_blob(const std::string& value) {
  _internal_set_det3_cls_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline std::string* NetworkParam::mutable_det3_cls_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
  return _internal_mutable_det3_cls_blob();
}
inline const std::string& NetworkParam::_internal_det3_cls_blob() const {
  return det3_cls_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det3_cls_blob(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  det3_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get(), value);
}
inline void NetworkParam::set_det3_cls_blob(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  det3_cls_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline void NetworkParam::set_det3_cls_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  det3_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline void NetworkParam::set_det3_cls_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  det3_cls_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}
inline std::string* NetworkParam::_internal_mutable_det3_cls_blob() {
  _has_bits_[0] |= 0x00004000u;
  return det3_cls_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get());
}
inline std::string* NetworkParam::release_det3_cls_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
  if (!_internal_has_det3_cls_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return det3_cls_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get());
}
inline void NetworkParam::set_allocated_det3_cls_blob(std::string* det3_cls_blob) {
  if (det3_cls_blob != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  det3_cls_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_cls_blob_.get(), det3_cls_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_cls_blob)
}

// optional string det3_ori_blob = 16 [default = "detect3_ori_pred"];
inline bool NetworkParam::_internal_has_det3_ori_blob() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool NetworkParam::has_det3_ori_blob() const {
  return _internal_has_det3_ori_blob();
}
inline void NetworkParam::clear_det3_ori_blob() {
  det3_ori_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& NetworkParam::det3_ori_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
  return _internal_det3_ori_blob();
}
inline void NetworkParam::set_det3_ori_blob(const std::string& value) {
  _internal_set_det3_ori_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline std::string* NetworkParam::mutable_det3_ori_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
  return _internal_mutable_det3_ori_blob();
}
inline const std::string& NetworkParam::_internal_det3_ori_blob() const {
  return det3_ori_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det3_ori_blob(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  det3_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get(), value);
}
inline void NetworkParam::set_det3_ori_blob(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  det3_ori_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline void NetworkParam::set_det3_ori_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  det3_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline void NetworkParam::set_det3_ori_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00008000u;
  det3_ori_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}
inline std::string* NetworkParam::_internal_mutable_det3_ori_blob() {
  _has_bits_[0] |= 0x00008000u;
  return det3_ori_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get());
}
inline std::string* NetworkParam::release_det3_ori_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
  if (!_internal_has_det3_ori_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return det3_ori_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get());
}
inline void NetworkParam::set_allocated_det3_ori_blob(std::string* det3_ori_blob) {
  if (det3_ori_blob != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  det3_ori_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_blob_.get(), det3_ori_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_ori_blob)
}

// optional string det3_ori_conf_blob = 17 [default = "detect3_ori_conf_pred"];
inline bool NetworkParam::_internal_has_det3_ori_conf_blob() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool NetworkParam::has_det3_ori_conf_blob() const {
  return _internal_has_det3_ori_conf_blob();
}
inline void NetworkParam::clear_det3_ori_conf_blob() {
  det3_ori_conf_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& NetworkParam::det3_ori_conf_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
  return _internal_det3_ori_conf_blob();
}
inline void NetworkParam::set_det3_ori_conf_blob(const std::string& value) {
  _internal_set_det3_ori_conf_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline std::string* NetworkParam::mutable_det3_ori_conf_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
  return _internal_mutable_det3_ori_conf_blob();
}
inline const std::string& NetworkParam::_internal_det3_ori_conf_blob() const {
  return det3_ori_conf_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det3_ori_conf_blob(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  det3_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get(), value);
}
inline void NetworkParam::set_det3_ori_conf_blob(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  det3_ori_conf_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline void NetworkParam::set_det3_ori_conf_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  det3_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline void NetworkParam::set_det3_ori_conf_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00010000u;
  det3_ori_conf_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}
inline std::string* NetworkParam::_internal_mutable_det3_ori_conf_blob() {
  _has_bits_[0] |= 0x00010000u;
  return det3_ori_conf_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get());
}
inline std::string* NetworkParam::release_det3_ori_conf_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
  if (!_internal_has_det3_ori_conf_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return det3_ori_conf_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get());
}
inline void NetworkParam::set_allocated_det3_ori_conf_blob(std::string* det3_ori_conf_blob) {
  if (det3_ori_conf_blob != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  det3_ori_conf_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_ori_conf_blob_.get(), det3_ori_conf_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_ori_conf_blob)
}

// optional string det3_dim_blob = 18 [default = "detect3_dim_pred"];
inline bool NetworkParam::_internal_has_det3_dim_blob() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool NetworkParam::has_det3_dim_blob() const {
  return _internal_has_det3_dim_blob();
}
inline void NetworkParam::clear_det3_dim_blob() {
  det3_dim_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& NetworkParam::det3_dim_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
  return _internal_det3_dim_blob();
}
inline void NetworkParam::set_det3_dim_blob(const std::string& value) {
  _internal_set_det3_dim_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline std::string* NetworkParam::mutable_det3_dim_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
  return _internal_mutable_det3_dim_blob();
}
inline const std::string& NetworkParam::_internal_det3_dim_blob() const {
  return det3_dim_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_det3_dim_blob(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  det3_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get(), value);
}
inline void NetworkParam::set_det3_dim_blob(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  det3_dim_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline void NetworkParam::set_det3_dim_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  det3_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline void NetworkParam::set_det3_dim_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00020000u;
  det3_dim_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}
inline std::string* NetworkParam::_internal_mutable_det3_dim_blob() {
  _has_bits_[0] |= 0x00020000u;
  return det3_dim_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get());
}
inline std::string* NetworkParam::release_det3_dim_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
  if (!_internal_has_det3_dim_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return det3_dim_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get());
}
inline void NetworkParam::set_allocated_det3_dim_blob(std::string* det3_dim_blob) {
  if (det3_dim_blob != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  det3_dim_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_det3_dim_blob_.get(), det3_dim_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.det3_dim_blob)
}

// optional string lof_blob = 19 [default = "lof_pred"];
inline bool NetworkParam::_internal_has_lof_blob() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool NetworkParam::has_lof_blob() const {
  return _internal_has_lof_blob();
}
inline void NetworkParam::clear_lof_blob() {
  lof_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& NetworkParam::lof_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.lof_blob)
  return _internal_lof_blob();
}
inline void NetworkParam::set_lof_blob(const std::string& value) {
  _internal_set_lof_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline std::string* NetworkParam::mutable_lof_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.lof_blob)
  return _internal_mutable_lof_blob();
}
inline const std::string& NetworkParam::_internal_lof_blob() const {
  return lof_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_lof_blob(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  lof_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get(), value);
}
inline void NetworkParam::set_lof_blob(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  lof_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline void NetworkParam::set_lof_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  lof_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline void NetworkParam::set_lof_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00040000u;
  lof_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}
inline std::string* NetworkParam::_internal_mutable_lof_blob() {
  _has_bits_[0] |= 0x00040000u;
  return lof_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get());
}
inline std::string* NetworkParam::release_lof_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.lof_blob)
  if (!_internal_has_lof_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return lof_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get());
}
inline void NetworkParam::set_allocated_lof_blob(std::string* lof_blob) {
  if (lof_blob != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  lof_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lof_blob_.get(), lof_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.lof_blob)
}

// optional string lor_blob = 20 [default = "lor_pred"];
inline bool NetworkParam::_internal_has_lor_blob() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool NetworkParam::has_lor_blob() const {
  return _internal_has_lor_blob();
}
inline void NetworkParam::clear_lor_blob() {
  lor_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& NetworkParam::lor_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.lor_blob)
  return _internal_lor_blob();
}
inline void NetworkParam::set_lor_blob(const std::string& value) {
  _internal_set_lor_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline std::string* NetworkParam::mutable_lor_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.lor_blob)
  return _internal_mutable_lor_blob();
}
inline const std::string& NetworkParam::_internal_lor_blob() const {
  return lor_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_lor_blob(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  lor_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get(), value);
}
inline void NetworkParam::set_lor_blob(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  lor_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline void NetworkParam::set_lor_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  lor_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline void NetworkParam::set_lor_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00080000u;
  lor_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}
inline std::string* NetworkParam::_internal_mutable_lor_blob() {
  _has_bits_[0] |= 0x00080000u;
  return lor_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get());
}
inline std::string* NetworkParam::release_lor_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.lor_blob)
  if (!_internal_has_lor_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return lor_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get());
}
inline void NetworkParam::set_allocated_lor_blob(std::string* lor_blob) {
  if (lor_blob != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  lor_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_lor_blob_.get(), lor_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.lor_blob)
}

// optional string input_blob = 21 [default = "data"];
inline bool NetworkParam::_internal_has_input_blob() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool NetworkParam::has_input_blob() const {
  return _internal_has_input_blob();
}
inline void NetworkParam::clear_input_blob() {
  input_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& NetworkParam::input_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.input_blob)
  return _internal_input_blob();
}
inline void NetworkParam::set_input_blob(const std::string& value) {
  _internal_set_input_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline std::string* NetworkParam::mutable_input_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.input_blob)
  return _internal_mutable_input_blob();
}
inline const std::string& NetworkParam::_internal_input_blob() const {
  return input_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_input_blob(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  input_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get(), value);
}
inline void NetworkParam::set_input_blob(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  input_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  input_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline void NetworkParam::set_input_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00100000u;
  input_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.input_blob)
}
inline std::string* NetworkParam::_internal_mutable_input_blob() {
  _has_bits_[0] |= 0x00100000u;
  return input_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get());
}
inline std::string* NetworkParam::release_input_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.input_blob)
  if (!_internal_has_input_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return input_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get());
}
inline void NetworkParam::set_allocated_input_blob(std::string* input_blob) {
  if (input_blob != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  input_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_input_blob_.get(), input_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.input_blob)
}

// optional string rois_blob = 22 [default = "rois_pred"];
inline bool NetworkParam::_internal_has_rois_blob() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool NetworkParam::has_rois_blob() const {
  return _internal_has_rois_blob();
}
inline void NetworkParam::clear_rois_blob() {
  rois_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get());
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& NetworkParam::rois_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.rois_blob)
  return _internal_rois_blob();
}
inline void NetworkParam::set_rois_blob(const std::string& value) {
  _internal_set_rois_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline std::string* NetworkParam::mutable_rois_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.rois_blob)
  return _internal_mutable_rois_blob();
}
inline const std::string& NetworkParam::_internal_rois_blob() const {
  return rois_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_rois_blob(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  rois_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get(), value);
}
inline void NetworkParam::set_rois_blob(std::string&& value) {
  _has_bits_[0] |= 0x00200000u;
  rois_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline void NetworkParam::set_rois_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00200000u;
  rois_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline void NetworkParam::set_rois_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00200000u;
  rois_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}
inline std::string* NetworkParam::_internal_mutable_rois_blob() {
  _has_bits_[0] |= 0x00200000u;
  return rois_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get());
}
inline std::string* NetworkParam::release_rois_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.rois_blob)
  if (!_internal_has_rois_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return rois_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get());
}
inline void NetworkParam::set_allocated_rois_blob(std::string* rois_blob) {
  if (rois_blob != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  rois_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rois_blob_.get(), rois_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.rois_blob)
}

// optional string feat_blob = 23 [default = "conv_feat"];
inline bool NetworkParam::_internal_has_feat_blob() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool NetworkParam::has_feat_blob() const {
  return _internal_has_feat_blob();
}
inline void NetworkParam::clear_feat_blob() {
  feat_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get());
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& NetworkParam::feat_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.feat_blob)
  return _internal_feat_blob();
}
inline void NetworkParam::set_feat_blob(const std::string& value) {
  _internal_set_feat_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline std::string* NetworkParam::mutable_feat_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.feat_blob)
  return _internal_mutable_feat_blob();
}
inline const std::string& NetworkParam::_internal_feat_blob() const {
  return feat_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_feat_blob(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  feat_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get(), value);
}
inline void NetworkParam::set_feat_blob(std::string&& value) {
  _has_bits_[0] |= 0x00400000u;
  feat_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline void NetworkParam::set_feat_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00400000u;
  feat_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline void NetworkParam::set_feat_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00400000u;
  feat_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}
inline std::string* NetworkParam::_internal_mutable_feat_blob() {
  _has_bits_[0] |= 0x00400000u;
  return feat_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get());
}
inline std::string* NetworkParam::release_feat_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.feat_blob)
  if (!_internal_has_feat_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  return feat_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get());
}
inline void NetworkParam::set_allocated_feat_blob(std::string* feat_blob) {
  if (feat_blob != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  feat_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_feat_blob_.get(), feat_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.feat_blob)
}

// optional string box_blob = 24 [default = "box_pred"];
inline bool NetworkParam::_internal_has_box_blob() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool NetworkParam::has_box_blob() const {
  return _internal_has_box_blob();
}
inline void NetworkParam::clear_box_blob() {
  box_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get());
  _has_bits_[0] &= ~0x00800000u;
}
inline const std::string& NetworkParam::box_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.box_blob)
  return _internal_box_blob();
}
inline void NetworkParam::set_box_blob(const std::string& value) {
  _internal_set_box_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline std::string* NetworkParam::mutable_box_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.box_blob)
  return _internal_mutable_box_blob();
}
inline const std::string& NetworkParam::_internal_box_blob() const {
  return box_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_box_blob(const std::string& value) {
  _has_bits_[0] |= 0x00800000u;
  box_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get(), value);
}
inline void NetworkParam::set_box_blob(std::string&& value) {
  _has_bits_[0] |= 0x00800000u;
  box_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline void NetworkParam::set_box_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00800000u;
  box_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline void NetworkParam::set_box_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00800000u;
  box_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.box_blob)
}
inline std::string* NetworkParam::_internal_mutable_box_blob() {
  _has_bits_[0] |= 0x00800000u;
  return box_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get());
}
inline std::string* NetworkParam::release_box_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.box_blob)
  if (!_internal_has_box_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00800000u;
  return box_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get());
}
inline void NetworkParam::set_allocated_box_blob(std::string* box_blob) {
  if (box_blob != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  box_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_box_blob_.get(), box_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.box_blob)
}

// optional string iou_blob = 25 [default = "iou_pred"];
inline bool NetworkParam::_internal_has_iou_blob() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool NetworkParam::has_iou_blob() const {
  return _internal_has_iou_blob();
}
inline void NetworkParam::clear_iou_blob() {
  iou_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get());
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& NetworkParam::iou_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.iou_blob)
  return _internal_iou_blob();
}
inline void NetworkParam::set_iou_blob(const std::string& value) {
  _internal_set_iou_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline std::string* NetworkParam::mutable_iou_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.iou_blob)
  return _internal_mutable_iou_blob();
}
inline const std::string& NetworkParam::_internal_iou_blob() const {
  return iou_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_iou_blob(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  iou_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get(), value);
}
inline void NetworkParam::set_iou_blob(std::string&& value) {
  _has_bits_[0] |= 0x01000000u;
  iou_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline void NetworkParam::set_iou_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x01000000u;
  iou_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline void NetworkParam::set_iou_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x01000000u;
  iou_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}
inline std::string* NetworkParam::_internal_mutable_iou_blob() {
  _has_bits_[0] |= 0x01000000u;
  return iou_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get());
}
inline std::string* NetworkParam::release_iou_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.iou_blob)
  if (!_internal_has_iou_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  return iou_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get());
}
inline void NetworkParam::set_allocated_iou_blob(std::string* iou_blob) {
  if (iou_blob != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  iou_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_iou_blob_.get(), iou_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.iou_blob)
}

// optional string brvis_blob = 26 [default = "brvis_pred"];
inline bool NetworkParam::_internal_has_brvis_blob() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool NetworkParam::has_brvis_blob() const {
  return _internal_has_brvis_blob();
}
inline void NetworkParam::clear_brvis_blob() {
  brvis_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get());
  _has_bits_[0] &= ~0x02000000u;
}
inline const std::string& NetworkParam::brvis_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
  return _internal_brvis_blob();
}
inline void NetworkParam::set_brvis_blob(const std::string& value) {
  _internal_set_brvis_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline std::string* NetworkParam::mutable_brvis_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
  return _internal_mutable_brvis_blob();
}
inline const std::string& NetworkParam::_internal_brvis_blob() const {
  return brvis_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_brvis_blob(const std::string& value) {
  _has_bits_[0] |= 0x02000000u;
  brvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get(), value);
}
inline void NetworkParam::set_brvis_blob(std::string&& value) {
  _has_bits_[0] |= 0x02000000u;
  brvis_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline void NetworkParam::set_brvis_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x02000000u;
  brvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline void NetworkParam::set_brvis_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x02000000u;
  brvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}
inline std::string* NetworkParam::_internal_mutable_brvis_blob() {
  _has_bits_[0] |= 0x02000000u;
  return brvis_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get());
}
inline std::string* NetworkParam::release_brvis_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
  if (!_internal_has_brvis_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x02000000u;
  return brvis_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get());
}
inline void NetworkParam::set_allocated_brvis_blob(std::string* brvis_blob) {
  if (brvis_blob != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  brvis_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brvis_blob_.get(), brvis_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.brvis_blob)
}

// optional string brswt_blob = 27 [default = "brswt_pred"];
inline bool NetworkParam::_internal_has_brswt_blob() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool NetworkParam::has_brswt_blob() const {
  return _internal_has_brswt_blob();
}
inline void NetworkParam::clear_brswt_blob() {
  brswt_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get());
  _has_bits_[0] &= ~0x04000000u;
}
inline const std::string& NetworkParam::brswt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
  return _internal_brswt_blob();
}
inline void NetworkParam::set_brswt_blob(const std::string& value) {
  _internal_set_brswt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline std::string* NetworkParam::mutable_brswt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
  return _internal_mutable_brswt_blob();
}
inline const std::string& NetworkParam::_internal_brswt_blob() const {
  return brswt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_brswt_blob(const std::string& value) {
  _has_bits_[0] |= 0x04000000u;
  brswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get(), value);
}
inline void NetworkParam::set_brswt_blob(std::string&& value) {
  _has_bits_[0] |= 0x04000000u;
  brswt_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline void NetworkParam::set_brswt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x04000000u;
  brswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline void NetworkParam::set_brswt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x04000000u;
  brswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}
inline std::string* NetworkParam::_internal_mutable_brswt_blob() {
  _has_bits_[0] |= 0x04000000u;
  return brswt_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get());
}
inline std::string* NetworkParam::release_brswt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
  if (!_internal_has_brswt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x04000000u;
  return brswt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get());
}
inline void NetworkParam::set_allocated_brswt_blob(std::string* brswt_blob) {
  if (brswt_blob != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  brswt_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_brswt_blob_.get(), brswt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.brswt_blob)
}

// optional string ltvis_blob = 28 [default = "ltvis_pred"];
inline bool NetworkParam::_internal_has_ltvis_blob() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool NetworkParam::has_ltvis_blob() const {
  return _internal_has_ltvis_blob();
}
inline void NetworkParam::clear_ltvis_blob() {
  ltvis_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get());
  _has_bits_[0] &= ~0x08000000u;
}
inline const std::string& NetworkParam::ltvis_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
  return _internal_ltvis_blob();
}
inline void NetworkParam::set_ltvis_blob(const std::string& value) {
  _internal_set_ltvis_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline std::string* NetworkParam::mutable_ltvis_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
  return _internal_mutable_ltvis_blob();
}
inline const std::string& NetworkParam::_internal_ltvis_blob() const {
  return ltvis_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_ltvis_blob(const std::string& value) {
  _has_bits_[0] |= 0x08000000u;
  ltvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get(), value);
}
inline void NetworkParam::set_ltvis_blob(std::string&& value) {
  _has_bits_[0] |= 0x08000000u;
  ltvis_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline void NetworkParam::set_ltvis_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x08000000u;
  ltvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline void NetworkParam::set_ltvis_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x08000000u;
  ltvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}
inline std::string* NetworkParam::_internal_mutable_ltvis_blob() {
  _has_bits_[0] |= 0x08000000u;
  return ltvis_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get());
}
inline std::string* NetworkParam::release_ltvis_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
  if (!_internal_has_ltvis_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x08000000u;
  return ltvis_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get());
}
inline void NetworkParam::set_allocated_ltvis_blob(std::string* ltvis_blob) {
  if (ltvis_blob != nullptr) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  ltvis_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltvis_blob_.get(), ltvis_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.ltvis_blob)
}

// optional string ltswt_blob = 29 [default = "ltswt_pred"];
inline bool NetworkParam::_internal_has_ltswt_blob() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool NetworkParam::has_ltswt_blob() const {
  return _internal_has_ltswt_blob();
}
inline void NetworkParam::clear_ltswt_blob() {
  ltswt_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get());
  _has_bits_[0] &= ~0x10000000u;
}
inline const std::string& NetworkParam::ltswt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
  return _internal_ltswt_blob();
}
inline void NetworkParam::set_ltswt_blob(const std::string& value) {
  _internal_set_ltswt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline std::string* NetworkParam::mutable_ltswt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
  return _internal_mutable_ltswt_blob();
}
inline const std::string& NetworkParam::_internal_ltswt_blob() const {
  return ltswt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_ltswt_blob(const std::string& value) {
  _has_bits_[0] |= 0x10000000u;
  ltswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get(), value);
}
inline void NetworkParam::set_ltswt_blob(std::string&& value) {
  _has_bits_[0] |= 0x10000000u;
  ltswt_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline void NetworkParam::set_ltswt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x10000000u;
  ltswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline void NetworkParam::set_ltswt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x10000000u;
  ltswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}
inline std::string* NetworkParam::_internal_mutable_ltswt_blob() {
  _has_bits_[0] |= 0x10000000u;
  return ltswt_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get());
}
inline std::string* NetworkParam::release_ltswt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
  if (!_internal_has_ltswt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x10000000u;
  return ltswt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get());
}
inline void NetworkParam::set_allocated_ltswt_blob(std::string* ltswt_blob) {
  if (ltswt_blob != nullptr) {
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  ltswt_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_ltswt_blob_.get(), ltswt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.ltswt_blob)
}

// optional string rtvis_blob = 30 [default = "rtvis_pred"];
inline bool NetworkParam::_internal_has_rtvis_blob() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool NetworkParam::has_rtvis_blob() const {
  return _internal_has_rtvis_blob();
}
inline void NetworkParam::clear_rtvis_blob() {
  rtvis_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get());
  _has_bits_[0] &= ~0x20000000u;
}
inline const std::string& NetworkParam::rtvis_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
  return _internal_rtvis_blob();
}
inline void NetworkParam::set_rtvis_blob(const std::string& value) {
  _internal_set_rtvis_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline std::string* NetworkParam::mutable_rtvis_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
  return _internal_mutable_rtvis_blob();
}
inline const std::string& NetworkParam::_internal_rtvis_blob() const {
  return rtvis_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_rtvis_blob(const std::string& value) {
  _has_bits_[0] |= 0x20000000u;
  rtvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get(), value);
}
inline void NetworkParam::set_rtvis_blob(std::string&& value) {
  _has_bits_[0] |= 0x20000000u;
  rtvis_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline void NetworkParam::set_rtvis_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x20000000u;
  rtvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline void NetworkParam::set_rtvis_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x20000000u;
  rtvis_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}
inline std::string* NetworkParam::_internal_mutable_rtvis_blob() {
  _has_bits_[0] |= 0x20000000u;
  return rtvis_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get());
}
inline std::string* NetworkParam::release_rtvis_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
  if (!_internal_has_rtvis_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x20000000u;
  return rtvis_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get());
}
inline void NetworkParam::set_allocated_rtvis_blob(std::string* rtvis_blob) {
  if (rtvis_blob != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  rtvis_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtvis_blob_.get(), rtvis_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.rtvis_blob)
}

// optional string rtswt_blob = 31 [default = "rtswt_pred"];
inline bool NetworkParam::_internal_has_rtswt_blob() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool NetworkParam::has_rtswt_blob() const {
  return _internal_has_rtswt_blob();
}
inline void NetworkParam::clear_rtswt_blob() {
  rtswt_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get());
  _has_bits_[0] &= ~0x40000000u;
}
inline const std::string& NetworkParam::rtswt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
  return _internal_rtswt_blob();
}
inline void NetworkParam::set_rtswt_blob(const std::string& value) {
  _internal_set_rtswt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline std::string* NetworkParam::mutable_rtswt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
  return _internal_mutable_rtswt_blob();
}
inline const std::string& NetworkParam::_internal_rtswt_blob() const {
  return rtswt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_rtswt_blob(const std::string& value) {
  _has_bits_[0] |= 0x40000000u;
  rtswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get(), value);
}
inline void NetworkParam::set_rtswt_blob(std::string&& value) {
  _has_bits_[0] |= 0x40000000u;
  rtswt_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline void NetworkParam::set_rtswt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x40000000u;
  rtswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline void NetworkParam::set_rtswt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x40000000u;
  rtswt_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}
inline std::string* NetworkParam::_internal_mutable_rtswt_blob() {
  _has_bits_[0] |= 0x40000000u;
  return rtswt_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get());
}
inline std::string* NetworkParam::release_rtswt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
  if (!_internal_has_rtswt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x40000000u;
  return rtswt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get());
}
inline void NetworkParam::set_allocated_rtswt_blob(std::string* rtswt_blob) {
  if (rtswt_blob != nullptr) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  rtswt_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_rtswt_blob_.get(), rtswt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.rtswt_blob)
}

// optional string area_id_blob = 32 [default = "area_id_pred"];
inline bool NetworkParam::_internal_has_area_id_blob() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool NetworkParam::has_area_id_blob() const {
  return _internal_has_area_id_blob();
}
inline void NetworkParam::clear_area_id_blob() {
  area_id_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get());
  _has_bits_[0] &= ~0x80000000u;
}
inline const std::string& NetworkParam::area_id_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
  return _internal_area_id_blob();
}
inline void NetworkParam::set_area_id_blob(const std::string& value) {
  _internal_set_area_id_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline std::string* NetworkParam::mutable_area_id_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
  return _internal_mutable_area_id_blob();
}
inline const std::string& NetworkParam::_internal_area_id_blob() const {
  return area_id_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_area_id_blob(const std::string& value) {
  _has_bits_[0] |= 0x80000000u;
  area_id_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get(), value);
}
inline void NetworkParam::set_area_id_blob(std::string&& value) {
  _has_bits_[0] |= 0x80000000u;
  area_id_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline void NetworkParam::set_area_id_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x80000000u;
  area_id_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline void NetworkParam::set_area_id_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x80000000u;
  area_id_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}
inline std::string* NetworkParam::_internal_mutable_area_id_blob() {
  _has_bits_[0] |= 0x80000000u;
  return area_id_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get());
}
inline std::string* NetworkParam::release_area_id_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
  if (!_internal_has_area_id_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x80000000u;
  return area_id_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get());
}
inline void NetworkParam::set_allocated_area_id_blob(std::string* area_id_blob) {
  if (area_id_blob != nullptr) {
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  area_id_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_area_id_blob_.get(), area_id_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.area_id_blob)
}

// optional string visible_ratio_blob = 33 [default = "vis_pred"];
inline bool NetworkParam::_internal_has_visible_ratio_blob() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_visible_ratio_blob() const {
  return _internal_has_visible_ratio_blob();
}
inline void NetworkParam::clear_visible_ratio_blob() {
  visible_ratio_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get());
  _has_bits_[1] &= ~0x00000001u;
}
inline const std::string& NetworkParam::visible_ratio_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
  return _internal_visible_ratio_blob();
}
inline void NetworkParam::set_visible_ratio_blob(const std::string& value) {
  _internal_set_visible_ratio_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline std::string* NetworkParam::mutable_visible_ratio_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
  return _internal_mutable_visible_ratio_blob();
}
inline const std::string& NetworkParam::_internal_visible_ratio_blob() const {
  return visible_ratio_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_visible_ratio_blob(const std::string& value) {
  _has_bits_[1] |= 0x00000001u;
  visible_ratio_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get(), value);
}
inline void NetworkParam::set_visible_ratio_blob(std::string&& value) {
  _has_bits_[1] |= 0x00000001u;
  visible_ratio_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline void NetworkParam::set_visible_ratio_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000001u;
  visible_ratio_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline void NetworkParam::set_visible_ratio_blob(const char* value, size_t size) {
  _has_bits_[1] |= 0x00000001u;
  visible_ratio_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}
inline std::string* NetworkParam::_internal_mutable_visible_ratio_blob() {
  _has_bits_[1] |= 0x00000001u;
  return visible_ratio_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get());
}
inline std::string* NetworkParam::release_visible_ratio_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
  if (!_internal_has_visible_ratio_blob()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000001u;
  return visible_ratio_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get());
}
inline void NetworkParam::set_allocated_visible_ratio_blob(std::string* visible_ratio_blob) {
  if (visible_ratio_blob != nullptr) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  visible_ratio_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_visible_ratio_blob_.get(), visible_ratio_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.visible_ratio_blob)
}

// optional string cut_off_ratio_blob = 34 [default = "cut_pred"];
inline bool NetworkParam::_internal_has_cut_off_ratio_blob() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_cut_off_ratio_blob() const {
  return _internal_has_cut_off_ratio_blob();
}
inline void NetworkParam::clear_cut_off_ratio_blob() {
  cut_off_ratio_blob_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get());
  _has_bits_[1] &= ~0x00000002u;
}
inline const std::string& NetworkParam::cut_off_ratio_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
  return _internal_cut_off_ratio_blob();
}
inline void NetworkParam::set_cut_off_ratio_blob(const std::string& value) {
  _internal_set_cut_off_ratio_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline std::string* NetworkParam::mutable_cut_off_ratio_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
  return _internal_mutable_cut_off_ratio_blob();
}
inline const std::string& NetworkParam::_internal_cut_off_ratio_blob() const {
  return cut_off_ratio_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_cut_off_ratio_blob(const std::string& value) {
  _has_bits_[1] |= 0x00000002u;
  cut_off_ratio_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get(), value);
}
inline void NetworkParam::set_cut_off_ratio_blob(std::string&& value) {
  _has_bits_[1] |= 0x00000002u;
  cut_off_ratio_blob_.SetNoArena(
    &::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline void NetworkParam::set_cut_off_ratio_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000002u;
  cut_off_ratio_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline void NetworkParam::set_cut_off_ratio_blob(const char* value, size_t size) {
  _has_bits_[1] |= 0x00000002u;
  cut_off_ratio_blob_.SetNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}
inline std::string* NetworkParam::_internal_mutable_cut_off_ratio_blob() {
  _has_bits_[1] |= 0x00000002u;
  return cut_off_ratio_blob_.MutableNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get());
}
inline std::string* NetworkParam::release_cut_off_ratio_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
  if (!_internal_has_cut_off_ratio_blob()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000002u;
  return cut_off_ratio_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get());
}
inline void NetworkParam::set_allocated_cut_off_ratio_blob(std::string* cut_off_ratio_blob) {
  if (cut_off_ratio_blob != nullptr) {
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  cut_off_ratio_blob_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NetworkParam::_i_give_permission_to_break_this_code_default_cut_off_ratio_blob_.get(), cut_off_ratio_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NetworkParam.cut_off_ratio_blob)
}

// -------------------------------------------------------------------

// NMSParam

// optional string type = 1 [default = "NormalNMS"];
inline bool NMSParam::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NMSParam::has_type() const {
  return _internal_has_type();
}
inline void NMSParam::clear_type() {
  type_.ClearToDefaultNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NMSParam::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.type)
  return _internal_type();
}
inline void NMSParam::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.type)
}
inline std::string* NMSParam::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.yolo.NMSParam.type)
  return _internal_mutable_type();
}
inline const std::string& NMSParam::_internal_type() const {
  return type_.GetNoArena();
}
inline void NMSParam::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get(), value);
}
inline void NMSParam::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.yolo.NMSParam.type)
}
inline void NMSParam::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.yolo.NMSParam.type)
}
inline void NMSParam::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.yolo.NMSParam.type)
}
inline std::string* NMSParam::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get());
}
inline std::string* NMSParam::release_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.yolo.NMSParam.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void NMSParam::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::apollo::perception::camera::yolo::NMSParam::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.yolo.NMSParam.type)
}

// optional float threshold = 2 [default = 0.4];
inline bool NMSParam::_internal_has_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NMSParam::has_threshold() const {
  return _internal_has_threshold();
}
inline void NMSParam::clear_threshold() {
  threshold_ = 0.4f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NMSParam::_internal_threshold() const {
  return threshold_;
}
inline float NMSParam::threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.threshold)
  return _internal_threshold();
}
inline void NMSParam::_internal_set_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  threshold_ = value;
}
inline void NMSParam::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.threshold)
}

// optional float sigma = 3 [default = 0.4];
inline bool NMSParam::_internal_has_sigma() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NMSParam::has_sigma() const {
  return _internal_has_sigma();
}
inline void NMSParam::clear_sigma() {
  sigma_ = 0.4f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NMSParam::_internal_sigma() const {
  return sigma_;
}
inline float NMSParam::sigma() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.sigma)
  return _internal_sigma();
}
inline void NMSParam::_internal_set_sigma(float value) {
  _has_bits_[0] |= 0x00000004u;
  sigma_ = value;
}
inline void NMSParam::set_sigma(float value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.sigma)
}

// optional float inter_cls_conf_thresh = 4 [default = 0.1];
inline bool NMSParam::_internal_has_inter_cls_conf_thresh() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NMSParam::has_inter_cls_conf_thresh() const {
  return _internal_has_inter_cls_conf_thresh();
}
inline void NMSParam::clear_inter_cls_conf_thresh() {
  inter_cls_conf_thresh_ = 0.1f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NMSParam::_internal_inter_cls_conf_thresh() const {
  return inter_cls_conf_thresh_;
}
inline float NMSParam::inter_cls_conf_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.inter_cls_conf_thresh)
  return _internal_inter_cls_conf_thresh();
}
inline void NMSParam::_internal_set_inter_cls_conf_thresh(float value) {
  _has_bits_[0] |= 0x00000008u;
  inter_cls_conf_thresh_ = value;
}
inline void NMSParam::set_inter_cls_conf_thresh(float value) {
  _internal_set_inter_cls_conf_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.inter_cls_conf_thresh)
}

// optional float inter_cls_nms_thresh = 5 [default = 1];
inline bool NMSParam::_internal_has_inter_cls_nms_thresh() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NMSParam::has_inter_cls_nms_thresh() const {
  return _internal_has_inter_cls_nms_thresh();
}
inline void NMSParam::clear_inter_cls_nms_thresh() {
  inter_cls_nms_thresh_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline float NMSParam::_internal_inter_cls_nms_thresh() const {
  return inter_cls_nms_thresh_;
}
inline float NMSParam::inter_cls_nms_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.NMSParam.inter_cls_nms_thresh)
  return _internal_inter_cls_nms_thresh();
}
inline void NMSParam::_internal_set_inter_cls_nms_thresh(float value) {
  _has_bits_[0] |= 0x00000010u;
  inter_cls_nms_thresh_ = value;
}
inline void NMSParam::set_inter_cls_nms_thresh(float value) {
  _internal_set_inter_cls_nms_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.NMSParam.inter_cls_nms_thresh)
}

// -------------------------------------------------------------------

// BBoxStatistics

// repeated float mean = 1;
inline int BBoxStatistics::_internal_mean_size() const {
  return mean_.size();
}
inline int BBoxStatistics::mean_size() const {
  return _internal_mean_size();
}
inline void BBoxStatistics::clear_mean() {
  mean_.Clear();
}
inline float BBoxStatistics::_internal_mean(int index) const {
  return mean_.Get(index);
}
inline float BBoxStatistics::mean(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.BBoxStatistics.mean)
  return _internal_mean(index);
}
inline void BBoxStatistics::set_mean(int index, float value) {
  mean_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.BBoxStatistics.mean)
}
inline void BBoxStatistics::_internal_add_mean(float value) {
  mean_.Add(value);
}
inline void BBoxStatistics::add_mean(float value) {
  _internal_add_mean(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.BBoxStatistics.mean)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxStatistics::_internal_mean() const {
  return mean_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxStatistics::mean() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.BBoxStatistics.mean)
  return _internal_mean();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxStatistics::_internal_mutable_mean() {
  return &mean_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxStatistics::mutable_mean() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.BBoxStatistics.mean)
  return _internal_mutable_mean();
}

// repeated float std = 2;
inline int BBoxStatistics::_internal_std_size() const {
  return std_.size();
}
inline int BBoxStatistics::std_size() const {
  return _internal_std_size();
}
inline void BBoxStatistics::clear_std() {
  std_.Clear();
}
inline float BBoxStatistics::_internal_std(int index) const {
  return std_.Get(index);
}
inline float BBoxStatistics::std(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.BBoxStatistics.std)
  return _internal_std(index);
}
inline void BBoxStatistics::set_std(int index, float value) {
  std_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.BBoxStatistics.std)
}
inline void BBoxStatistics::_internal_add_std(float value) {
  std_.Add(value);
}
inline void BBoxStatistics::add_std(float value) {
  _internal_add_std(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.yolo.BBoxStatistics.std)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxStatistics::_internal_std() const {
  return std_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBoxStatistics::std() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.yolo.BBoxStatistics.std)
  return _internal_std();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxStatistics::_internal_mutable_std() {
  return &std_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBoxStatistics::mutable_std() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.yolo.BBoxStatistics.std)
  return _internal_mutable_std();
}

// -------------------------------------------------------------------

// DimensionStatistics

// optional float mean_h = 1 [default = 0];
inline bool DimensionStatistics::_internal_has_mean_h() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DimensionStatistics::has_mean_h() const {
  return _internal_has_mean_h();
}
inline void DimensionStatistics::clear_mean_h() {
  mean_h_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DimensionStatistics::_internal_mean_h() const {
  return mean_h_;
}
inline float DimensionStatistics::mean_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.mean_h)
  return _internal_mean_h();
}
inline void DimensionStatistics::_internal_set_mean_h(float value) {
  _has_bits_[0] |= 0x00000001u;
  mean_h_ = value;
}
inline void DimensionStatistics::set_mean_h(float value) {
  _internal_set_mean_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.mean_h)
}

// optional float mean_w = 2 [default = 0];
inline bool DimensionStatistics::_internal_has_mean_w() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DimensionStatistics::has_mean_w() const {
  return _internal_has_mean_w();
}
inline void DimensionStatistics::clear_mean_w() {
  mean_w_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float DimensionStatistics::_internal_mean_w() const {
  return mean_w_;
}
inline float DimensionStatistics::mean_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.mean_w)
  return _internal_mean_w();
}
inline void DimensionStatistics::_internal_set_mean_w(float value) {
  _has_bits_[0] |= 0x00000002u;
  mean_w_ = value;
}
inline void DimensionStatistics::set_mean_w(float value) {
  _internal_set_mean_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.mean_w)
}

// optional float mean_l = 3 [default = 0];
inline bool DimensionStatistics::_internal_has_mean_l() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DimensionStatistics::has_mean_l() const {
  return _internal_has_mean_l();
}
inline void DimensionStatistics::clear_mean_l() {
  mean_l_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DimensionStatistics::_internal_mean_l() const {
  return mean_l_;
}
inline float DimensionStatistics::mean_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.mean_l)
  return _internal_mean_l();
}
inline void DimensionStatistics::_internal_set_mean_l(float value) {
  _has_bits_[0] |= 0x00000004u;
  mean_l_ = value;
}
inline void DimensionStatistics::set_mean_l(float value) {
  _internal_set_mean_l(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.mean_l)
}

// optional float std_h = 4 [default = 1];
inline bool DimensionStatistics::_internal_has_std_h() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DimensionStatistics::has_std_h() const {
  return _internal_has_std_h();
}
inline void DimensionStatistics::clear_std_h() {
  std_h_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DimensionStatistics::_internal_std_h() const {
  return std_h_;
}
inline float DimensionStatistics::std_h() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.std_h)
  return _internal_std_h();
}
inline void DimensionStatistics::_internal_set_std_h(float value) {
  _has_bits_[0] |= 0x00000010u;
  std_h_ = value;
}
inline void DimensionStatistics::set_std_h(float value) {
  _internal_set_std_h(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.std_h)
}

// optional float std_w = 5 [default = 1];
inline bool DimensionStatistics::_internal_has_std_w() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DimensionStatistics::has_std_w() const {
  return _internal_has_std_w();
}
inline void DimensionStatistics::clear_std_w() {
  std_w_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float DimensionStatistics::_internal_std_w() const {
  return std_w_;
}
inline float DimensionStatistics::std_w() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.std_w)
  return _internal_std_w();
}
inline void DimensionStatistics::_internal_set_std_w(float value) {
  _has_bits_[0] |= 0x00000020u;
  std_w_ = value;
}
inline void DimensionStatistics::set_std_w(float value) {
  _internal_set_std_w(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.std_w)
}

// optional float std_l = 6 [default = 1];
inline bool DimensionStatistics::_internal_has_std_l() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DimensionStatistics::has_std_l() const {
  return _internal_has_std_l();
}
inline void DimensionStatistics::clear_std_l() {
  std_l_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DimensionStatistics::_internal_std_l() const {
  return std_l_;
}
inline float DimensionStatistics::std_l() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.yolo.DimensionStatistics.std_l)
  return _internal_std_l();
}
inline void DimensionStatistics::_internal_set_std_l(float value) {
  _has_bits_[0] |= 0x00000008u;
  std_l_ = value;
}
inline void DimensionStatistics::set_std_l(float value) {
  _internal_set_std_l(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.yolo.DimensionStatistics.std_l)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yolo
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2flib_2fobstacle_2fdetector_2fyolo_2fproto_2fyolo_2eproto
