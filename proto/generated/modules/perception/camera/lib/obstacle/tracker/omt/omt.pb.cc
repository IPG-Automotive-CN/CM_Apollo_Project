// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/lib/obstacle/tracker/omt/omt.proto

#include "modules/perception/camera/lib/obstacle/tracker/omt/omt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace omt {
class KalmanParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KalmanParam> _instance;
} _KalmanParam_default_instance_;
class TargetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetParam> _instance;
} _TargetParam_default_instance_;
class ReferenceParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceParam> _instance;
} _ReferenceParam_default_instance_;
class WeightParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WeightParam> _instance;
} _WeightParam_default_instance_;
class OmtParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OmtParam> _instance;
} _OmtParam_default_instance_;
}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::omt::_KalmanParam_default_instance_;
    new (ptr) ::apollo::perception::camera::omt::KalmanParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::omt::KalmanParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto}, {}};

static void InitDefaultsscc_info_OmtParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::omt::_OmtParam_default_instance_;
    new (ptr) ::apollo::perception::camera::omt::OmtParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::omt::OmtParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OmtParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OmtParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto}, {
      &scc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
      &scc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
      &scc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,}};

static void InitDefaultsscc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::omt::_ReferenceParam_default_instance_;
    new (ptr) ::apollo::perception::camera::omt::ReferenceParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::omt::ReferenceParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto}, {}};

static void InitDefaultsscc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::omt::_TargetParam_default_instance_;
    new (ptr) ::apollo::perception::camera::omt::TargetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::omt::TargetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto}, {
      &scc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,}};

static void InitDefaultsscc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::omt::_WeightParam_default_instance_;
    new (ptr) ::apollo::perception::camera::omt::WeightParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::omt::WeightParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, init_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, process_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::KalmanParam, measure_variance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, velocity_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, velocity_output_delay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, world_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, image_center_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, image_wh_update_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, world_lhw_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, height_diff_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, world_state_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, min_cached_world_state_history_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, min_cached_velocity_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, min_cached_position_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, calc_avg_position_window_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, static_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, static_speed_threshold_ped_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, min_moving_avg_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, min_moving_avg_speed_ped_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, abnormal_acc_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, abnormal_acc_threshold_ped_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, abnormal_velocity_heading_angle_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, clapping_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, world_mean_velocity_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, tracked_life_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, type_filter_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, large_velocity_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, too_large_velocity_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, mean_filter_window_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, direction_filter_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, displacement_theta_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, velocity_theta_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::TargetParam, stable_moving_speed_),
  4,
  5,
  0,
  1,
  2,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  3,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, margin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, min_allow_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, area_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, down_sampling_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::ReferenceParam, height_diff_ratio_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, appearance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, motion_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, tracklet_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::WeightParam, overlap_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, img_capability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, lost_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, reserve_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, weight_same_camera_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, weight_diff_camera_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, border_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, target_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, correct_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, target_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, min_init_height_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, target_combine_iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, fusion_target_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, image_displacement_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, abnormal_movement_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, same_ts_eps_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::omt::OmtParam, type_change_cost_),
  6,
  7,
  8,
  1,
  2,
  9,
  10,
  5,
  3,
  11,
  12,
  13,
  14,
  15,
  16,
  4,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::perception::camera::omt::KalmanParam)},
  { 11, 46, sizeof(::apollo::perception::camera::omt::TargetParam)},
  { 76, 86, sizeof(::apollo::perception::camera::omt::ReferenceParam)},
  { 91, 101, sizeof(::apollo::perception::camera::omt::WeightParam)},
  { 106, 128, sizeof(::apollo::perception::camera::omt::OmtParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::omt::_KalmanParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::omt::_TargetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::omt::_ReferenceParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::omt::_WeightParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::omt::_OmtParam_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n<modules/perception/camera/lib/obstacle"
  "/tracker/omt/omt.proto\022\034apollo.perceptio"
  "n.camera.omt\"X\n\013KalmanParam\022\025\n\rinit_vari"
  "ance\030\001 \001(\002\022\030\n\020process_variance\030\002 \001(\002\022\030\n\020"
  "measure_variance\030\003 \001(\002\"\210\t\n\013TargetParam\022\035"
  "\n\022velocity_threshold\030\001 \001(\002:\0012\022 \n\025velocit"
  "y_output_delay\030\002 \001(\005:\0012\022\?\n\014world_center\030"
  "\003 \001(\0132).apollo.perception.camera.omt.Kal"
  "manParam\022\?\n\014image_center\030\004 \001(\0132).apollo."
  "perception.camera.omt.KalmanParam\022\034\n\024ima"
  "ge_wh_update_rate\030\005 \001(\002\022\035\n\021world_lhw_his"
  "tory\030\006 \001(\005:\00215\022\036\n\021height_diff_ratio\030\007 \001("
  "\002:\0030.1\022\037\n\023world_state_history\030\010 \001(\005:\00230\022"
  ".\n#min_cached_world_state_history_size\030\t"
  " \001(\005:\0015\022$\n\030min_cached_velocity_size\030\n \001("
  "\005:\00210\022$\n\030min_cached_position_size\030\013 \001(\005:"
  "\00225\022(\n\035calc_avg_position_window_size\030\014 \001"
  "(\005:\0017\022#\n\026static_speed_threshold\030\r \001(\002:\0030"
  ".5\022\'\n\032static_speed_threshold_ped\030\016 \001(\002:\003"
  "0.3\022\037\n\024min_moving_avg_speed\030\017 \001(\002:\0011\022%\n\030"
  "min_moving_avg_speed_ped\030\020 \001(\002:\0030.5\022!\n\026a"
  "bnormal_acc_threshold\030\021 \001(\002:\0016\022%\n\032abnorm"
  "al_acc_threshold_ped\030\022 \001(\002:\0013\0229\n)abnorma"
  "l_velocity_heading_angle_threshold\030\023 \001(\002"
  ":\0060.7854\022 \n\021clapping_velocity\030\024 \001(\010:\005fal"
  "se\022(\n\034world_mean_velocity_duration\030\025 \001(\005"
  ":\00210\022\027\n\014tracked_life\030\026 \001(\005:\0013\022\034\n\017type_fi"
  "lter_var\030\027 \001(\002:\0030.3\022!\n\024large_velocity_ra"
  "tio\030\030 \001(\002:\0032.5\022%\n\030too_large_velocity_rat"
  "io\030\031 \001(\002:\0031.5\022\036\n\022mean_filter_window\030\032 \001("
  "\005:\00210\022#\n\026direction_filter_ratio\030\033 \001(\002:\0030"
  ".7\022$\n\026displacement_theta_var\030\034 \001(\002:\0040.25"
  "\022\037\n\022velocity_theta_var\030\035 \001(\002:\0030.5\022\036\n\023sta"
  "ble_moving_speed\030\036 \001(\002:\0012\"\226\001\n\016ReferenceP"
  "aram\022\021\n\006margin\030\001 \001(\005:\0012\022\034\n\020min_allow_hei"
  "ght\030\002 \001(\005:\00250\022\030\n\narea_decay\030\003 \001(\002:\0040.99\022"
  "\031\n\rdown_sampling\030\004 \001(\005:\00240\022\036\n\021height_dif"
  "f_ratio\030\005 \001(\002:\0030.1\"r\n\013WeightParam\022\025\n\napp"
  "earance\030\001 \001(\002:\0010\022\021\n\006motion\030\002 \001(\002:\0010\022\020\n\005s"
  "hape\030\003 \001(\002:\0010\022\023\n\010tracklet\030\004 \001(\002:\0010\022\022\n\007ov"
  "erlap\030\005 \001(\002:\0010\"\227\005\n\010OmtParam\022\031\n\016img_capab"
  "ility\030\001 \001(\005:\0017\022\023\n\010lost_age\030\002 \001(\005:\0012\022\026\n\013r"
  "eserve_age\030\003 \001(\005:\0013\022E\n\022weight_same_camer"
  "a\030\004 \001(\0132).apollo.perception.camera.omt.W"
  "eightParam\022E\n\022weight_diff_camera\030\005 \001(\0132)"
  ".apollo.perception.camera.omt.WeightPara"
  "m\022\022\n\006border\030\t \001(\002:\00230\022\033\n\rtarget_thresh\030\n"
  " \001(\002:\0040.65\022\033\n\014correct_type\030\013 \001(\010:\005false\022"
  "\?\n\014target_param\030\014 \001(\0132).apollo.perceptio"
  "n.camera.omt.TargetParam\022!\n\025min_init_hei"
  "ght_ratio\030\r \001(\002:\00217\022)\n\034target_combine_io"
  "u_threshold\030\016 \001(\002:\0030.5\022\"\n\024fusion_target_"
  "thresh\030\017 \001(\002:\0040.45\022\036\n\022image_displacement"
  "\030\020 \001(\002:\00250\022\036\n\021abnormal_movement\030\021 \001(\002:\0030"
  ".3\022\031\n\013same_ts_eps\030\022 \001(\001:\0040.05\022\?\n\treferen"
  "ce\030\023 \001(\0132,.apollo.perception.camera.omt."
  "ReferenceParam\022\030\n\020type_change_cost\030\024 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_sccs[5] = {
  &scc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
  &scc_info_OmtParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
  &scc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
  &scc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
  &scc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_once;
static bool descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto = {
  &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto, "modules/perception/camera/lib/obstacle/tracker/omt/omt.proto", 2280,
  &descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_once, descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_sccs, descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto, 5, file_level_enum_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto, file_level_service_descriptors_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto), true);
namespace apollo {
namespace perception {
namespace camera {
namespace omt {

// ===================================================================

void KalmanParam::InitAsDefaultInstance() {
}
class KalmanParam::_Internal {
 public:
  using HasBits = decltype(std::declval<KalmanParam>()._has_bits_);
  static void set_has_init_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_measure_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KalmanParam::KalmanParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.KalmanParam)
}
KalmanParam::KalmanParam(const KalmanParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&init_variance_, &from.init_variance_,
    static_cast<size_t>(reinterpret_cast<char*>(&measure_variance_) -
    reinterpret_cast<char*>(&init_variance_)) + sizeof(measure_variance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.KalmanParam)
}

void KalmanParam::SharedCtor() {
  ::memset(&init_variance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measure_variance_) -
      reinterpret_cast<char*>(&init_variance_)) + sizeof(measure_variance_));
}

KalmanParam::~KalmanParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.KalmanParam)
  SharedDtor();
}

void KalmanParam::SharedDtor() {
}

void KalmanParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KalmanParam& KalmanParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KalmanParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  return *internal_default_instance();
}


void KalmanParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.KalmanParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&init_variance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&measure_variance_) -
        reinterpret_cast<char*>(&init_variance_)) + sizeof(measure_variance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KalmanParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float init_variance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_init_variance(&has_bits);
          init_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float process_variance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_process_variance(&has_bits);
          process_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float measure_variance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_measure_variance(&has_bits);
          measure_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KalmanParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.KalmanParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float init_variance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_init_variance(), target);
  }

  // optional float process_variance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_process_variance(), target);
  }

  // optional float measure_variance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_measure_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.KalmanParam)
  return target;
}

size_t KalmanParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.KalmanParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float init_variance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float process_variance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float measure_variance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KalmanParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.omt.KalmanParam)
  GOOGLE_DCHECK_NE(&from, this);
  const KalmanParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KalmanParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.omt.KalmanParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.omt.KalmanParam)
    MergeFrom(*source);
  }
}

void KalmanParam::MergeFrom(const KalmanParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.KalmanParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      init_variance_ = from.init_variance_;
    }
    if (cached_has_bits & 0x00000002u) {
      process_variance_ = from.process_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      measure_variance_ = from.measure_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KalmanParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.omt.KalmanParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KalmanParam::CopyFrom(const KalmanParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.KalmanParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KalmanParam::IsInitialized() const {
  return true;
}

void KalmanParam::InternalSwap(KalmanParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(init_variance_, other->init_variance_);
  swap(process_variance_, other->process_variance_);
  swap(measure_variance_, other->measure_variance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KalmanParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetParam::InitAsDefaultInstance() {
  ::apollo::perception::camera::omt::_TargetParam_default_instance_._instance.get_mutable()->world_center_ = const_cast< ::apollo::perception::camera::omt::KalmanParam*>(
      ::apollo::perception::camera::omt::KalmanParam::internal_default_instance());
  ::apollo::perception::camera::omt::_TargetParam_default_instance_._instance.get_mutable()->image_center_ = const_cast< ::apollo::perception::camera::omt::KalmanParam*>(
      ::apollo::perception::camera::omt::KalmanParam::internal_default_instance());
}
class TargetParam::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetParam>()._has_bits_);
  static void set_has_velocity_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_velocity_output_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::camera::omt::KalmanParam& world_center(const TargetParam* msg);
  static void set_has_world_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::omt::KalmanParam& image_center(const TargetParam* msg);
  static void set_has_image_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_wh_update_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_world_lhw_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height_diff_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_world_state_history(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_min_cached_world_state_history_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_cached_velocity_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_min_cached_position_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_calc_avg_position_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_static_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_static_speed_threshold_ped(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_min_moving_avg_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_min_moving_avg_speed_ped(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_abnormal_acc_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_abnormal_acc_threshold_ped(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_abnormal_velocity_heading_angle_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_clapping_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_world_mean_velocity_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tracked_life(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_type_filter_var(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_large_velocity_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_too_large_velocity_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_mean_filter_window(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_direction_filter_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_displacement_theta_var(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_velocity_theta_var(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_stable_moving_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::apollo::perception::camera::omt::KalmanParam&
TargetParam::_Internal::world_center(const TargetParam* msg) {
  return *msg->world_center_;
}
const ::apollo::perception::camera::omt::KalmanParam&
TargetParam::_Internal::image_center(const TargetParam* msg) {
  return *msg->image_center_;
}
TargetParam::TargetParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.TargetParam)
}
TargetParam::TargetParam(const TargetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_world_center()) {
    world_center_ = new ::apollo::perception::camera::omt::KalmanParam(*from.world_center_);
  } else {
    world_center_ = nullptr;
  }
  if (from._internal_has_image_center()) {
    image_center_ = new ::apollo::perception::camera::omt::KalmanParam(*from.image_center_);
  } else {
    image_center_ = nullptr;
  }
  ::memcpy(&image_wh_update_rate_, &from.image_wh_update_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&stable_moving_speed_) -
    reinterpret_cast<char*>(&image_wh_update_rate_)) + sizeof(stable_moving_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.TargetParam)
}

void TargetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  ::memset(&world_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clapping_velocity_) -
      reinterpret_cast<char*>(&world_center_)) + sizeof(clapping_velocity_));
  velocity_threshold_ = 2;
  velocity_output_delay_ = 2;
  world_lhw_history_ = 15;
  height_diff_ratio_ = 0.1f;
  world_state_history_ = 30;
  min_cached_world_state_history_size_ = 5;
  min_cached_velocity_size_ = 10;
  min_cached_position_size_ = 25;
  calc_avg_position_window_size_ = 7;
  static_speed_threshold_ = 0.5f;
  static_speed_threshold_ped_ = 0.3f;
  min_moving_avg_speed_ = 1;
  min_moving_avg_speed_ped_ = 0.5f;
  abnormal_acc_threshold_ = 6;
  abnormal_acc_threshold_ped_ = 3;
  abnormal_velocity_heading_angle_threshold_ = 0.7854f;
  world_mean_velocity_duration_ = 10;
  tracked_life_ = 3;
  type_filter_var_ = 0.3f;
  large_velocity_ratio_ = 2.5f;
  too_large_velocity_ratio_ = 1.5f;
  mean_filter_window_ = 10;
  direction_filter_ratio_ = 0.7f;
  displacement_theta_var_ = 0.25f;
  velocity_theta_var_ = 0.5f;
  stable_moving_speed_ = 2;
}

TargetParam::~TargetParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.TargetParam)
  SharedDtor();
}

void TargetParam::SharedDtor() {
  if (this != internal_default_instance()) delete world_center_;
  if (this != internal_default_instance()) delete image_center_;
}

void TargetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetParam& TargetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  return *internal_default_instance();
}


void TargetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.TargetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(world_center_ != nullptr);
      world_center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(image_center_ != nullptr);
      image_center_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&image_wh_update_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clapping_velocity_) -
        reinterpret_cast<char*>(&image_wh_update_rate_)) + sizeof(clapping_velocity_));
    velocity_threshold_ = 2;
    velocity_output_delay_ = 2;
    world_lhw_history_ = 15;
    height_diff_ratio_ = 0.1f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    world_state_history_ = 30;
    min_cached_world_state_history_size_ = 5;
    min_cached_velocity_size_ = 10;
    min_cached_position_size_ = 25;
    calc_avg_position_window_size_ = 7;
    static_speed_threshold_ = 0.5f;
    static_speed_threshold_ped_ = 0.3f;
    min_moving_avg_speed_ = 1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    min_moving_avg_speed_ped_ = 0.5f;
    abnormal_acc_threshold_ = 6;
    abnormal_acc_threshold_ped_ = 3;
    abnormal_velocity_heading_angle_threshold_ = 0.7854f;
    world_mean_velocity_duration_ = 10;
    tracked_life_ = 3;
    type_filter_var_ = 0.3f;
    large_velocity_ratio_ = 2.5f;
  }
  if (cached_has_bits & 0x3f000000u) {
    too_large_velocity_ratio_ = 1.5f;
    mean_filter_window_ = 10;
    direction_filter_ratio_ = 0.7f;
    displacement_theta_var_ = 0.25f;
    velocity_theta_var_ = 0.5f;
    stable_moving_speed_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TargetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float velocity_threshold = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_velocity_threshold(&has_bits);
          velocity_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 velocity_output_delay = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_velocity_output_delay(&has_bits);
          velocity_output_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float image_wh_update_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_image_wh_update_rate(&has_bits);
          image_wh_update_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 world_lhw_history = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_world_lhw_history(&has_bits);
          world_lhw_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float height_diff_ratio = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_height_diff_ratio(&has_bits);
          height_diff_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 world_state_history = 8 [default = 30];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_world_state_history(&has_bits);
          world_state_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_cached_world_state_history_size = 9 [default = 5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_min_cached_world_state_history_size(&has_bits);
          min_cached_world_state_history_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_cached_velocity_size = 10 [default = 10];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_cached_velocity_size(&has_bits);
          min_cached_velocity_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_cached_position_size = 11 [default = 25];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_min_cached_position_size(&has_bits);
          min_cached_position_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 calc_avg_position_window_size = 12 [default = 7];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_calc_avg_position_window_size(&has_bits);
          calc_avg_position_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float static_speed_threshold = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_static_speed_threshold(&has_bits);
          static_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float static_speed_threshold_ped = 14 [default = 0.3];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_static_speed_threshold_ped(&has_bits);
          static_speed_threshold_ped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_moving_avg_speed = 15 [default = 1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_min_moving_avg_speed(&has_bits);
          min_moving_avg_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_min_moving_avg_speed_ped(&has_bits);
          min_moving_avg_speed_ped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float abnormal_acc_threshold = 17 [default = 6];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_abnormal_acc_threshold(&has_bits);
          abnormal_acc_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float abnormal_acc_threshold_ped = 18 [default = 3];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_abnormal_acc_threshold_ped(&has_bits);
          abnormal_acc_threshold_ped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_abnormal_velocity_heading_angle_threshold(&has_bits);
          abnormal_velocity_heading_angle_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool clapping_velocity = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_clapping_velocity(&has_bits);
          clapping_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 world_mean_velocity_duration = 21 [default = 10];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_world_mean_velocity_duration(&has_bits);
          world_mean_velocity_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tracked_life = 22 [default = 3];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tracked_life(&has_bits);
          tracked_life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float type_filter_var = 23 [default = 0.3];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_type_filter_var(&has_bits);
          type_filter_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float large_velocity_ratio = 24 [default = 2.5];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_large_velocity_ratio(&has_bits);
          large_velocity_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float too_large_velocity_ratio = 25 [default = 1.5];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          _Internal::set_has_too_large_velocity_ratio(&has_bits);
          too_large_velocity_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 mean_filter_window = 26 [default = 10];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_mean_filter_window(&has_bits);
          mean_filter_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float direction_filter_ratio = 27 [default = 0.7];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_direction_filter_ratio(&has_bits);
          direction_filter_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float displacement_theta_var = 28 [default = 0.25];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_displacement_theta_var(&has_bits);
          displacement_theta_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity_theta_var = 29 [default = 0.5];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_velocity_theta_var(&has_bits);
          velocity_theta_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stable_moving_speed = 30 [default = 2];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_stable_moving_speed(&has_bits);
          stable_moving_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.TargetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float velocity_threshold = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_velocity_threshold(), target);
  }

  // optional int32 velocity_output_delay = 2 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_velocity_output_delay(), target);
  }

  // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::world_center(this), target, stream);
  }

  // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::image_center(this), target, stream);
  }

  // optional float image_wh_update_rate = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_image_wh_update_rate(), target);
  }

  // optional int32 world_lhw_history = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_lhw_history(), target);
  }

  // optional float height_diff_ratio = 7 [default = 0.1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_height_diff_ratio(), target);
  }

  // optional int32 world_state_history = 8 [default = 30];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_world_state_history(), target);
  }

  // optional int32 min_cached_world_state_history_size = 9 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_min_cached_world_state_history_size(), target);
  }

  // optional int32 min_cached_velocity_size = 10 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_min_cached_velocity_size(), target);
  }

  // optional int32 min_cached_position_size = 11 [default = 25];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_min_cached_position_size(), target);
  }

  // optional int32 calc_avg_position_window_size = 12 [default = 7];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_calc_avg_position_window_size(), target);
  }

  // optional float static_speed_threshold = 13 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_static_speed_threshold(), target);
  }

  // optional float static_speed_threshold_ped = 14 [default = 0.3];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_static_speed_threshold_ped(), target);
  }

  // optional float min_moving_avg_speed = 15 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_min_moving_avg_speed(), target);
  }

  // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_min_moving_avg_speed_ped(), target);
  }

  // optional float abnormal_acc_threshold = 17 [default = 6];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_abnormal_acc_threshold(), target);
  }

  // optional float abnormal_acc_threshold_ped = 18 [default = 3];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_abnormal_acc_threshold_ped(), target);
  }

  // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_abnormal_velocity_heading_angle_threshold(), target);
  }

  // optional bool clapping_velocity = 20 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_clapping_velocity(), target);
  }

  // optional int32 world_mean_velocity_duration = 21 [default = 10];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_world_mean_velocity_duration(), target);
  }

  // optional int32 tracked_life = 22 [default = 3];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_tracked_life(), target);
  }

  // optional float type_filter_var = 23 [default = 0.3];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_type_filter_var(), target);
  }

  // optional float large_velocity_ratio = 24 [default = 2.5];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_large_velocity_ratio(), target);
  }

  // optional float too_large_velocity_ratio = 25 [default = 1.5];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_too_large_velocity_ratio(), target);
  }

  // optional int32 mean_filter_window = 26 [default = 10];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_mean_filter_window(), target);
  }

  // optional float direction_filter_ratio = 27 [default = 0.7];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_direction_filter_ratio(), target);
  }

  // optional float displacement_theta_var = 28 [default = 0.25];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_displacement_theta_var(), target);
  }

  // optional float velocity_theta_var = 29 [default = 0.5];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_velocity_theta_var(), target);
  }

  // optional float stable_moving_speed = 30 [default = 2];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_stable_moving_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.TargetParam)
  return target;
}

size_t TargetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.TargetParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.camera.omt.KalmanParam world_center = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_center_);
    }

    // optional .apollo.perception.camera.omt.KalmanParam image_center = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_center_);
    }

    // optional float image_wh_update_rate = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool clapping_velocity = 20 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional float velocity_threshold = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 velocity_output_delay = 2 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_velocity_output_delay());
    }

    // optional int32 world_lhw_history = 6 [default = 15];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_world_lhw_history());
    }

    // optional float height_diff_ratio = 7 [default = 0.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 world_state_history = 8 [default = 30];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_world_state_history());
    }

    // optional int32 min_cached_world_state_history_size = 9 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_cached_world_state_history_size());
    }

    // optional int32 min_cached_velocity_size = 10 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_cached_velocity_size());
    }

    // optional int32 min_cached_position_size = 11 [default = 25];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_cached_position_size());
    }

    // optional int32 calc_avg_position_window_size = 12 [default = 7];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_calc_avg_position_window_size());
    }

    // optional float static_speed_threshold = 13 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float static_speed_threshold_ped = 14 [default = 0.3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float min_moving_avg_speed = 15 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float min_moving_avg_speed_ped = 16 [default = 0.5];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_acc_threshold = 17 [default = 6];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_acc_threshold_ped = 18 [default = 3];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_velocity_heading_angle_threshold = 19 [default = 0.7854];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 world_mean_velocity_duration = 21 [default = 10];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_world_mean_velocity_duration());
    }

    // optional int32 tracked_life = 22 [default = 3];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tracked_life());
    }

    // optional float type_filter_var = 23 [default = 0.3];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float large_velocity_ratio = 24 [default = 2.5];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional float too_large_velocity_ratio = 25 [default = 1.5];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 mean_filter_window = 26 [default = 10];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window());
    }

    // optional float direction_filter_ratio = 27 [default = 0.7];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float displacement_theta_var = 28 [default = 0.25];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional float velocity_theta_var = 29 [default = 0.5];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float stable_moving_speed = 30 [default = 2];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.omt.TargetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.omt.TargetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.omt.TargetParam)
    MergeFrom(*source);
  }
}

void TargetParam::MergeFrom(const TargetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.TargetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_world_center()->::apollo::perception::camera::omt::KalmanParam::MergeFrom(from._internal_world_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_image_center()->::apollo::perception::camera::omt::KalmanParam::MergeFrom(from._internal_image_center());
    }
    if (cached_has_bits & 0x00000004u) {
      image_wh_update_rate_ = from.image_wh_update_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      clapping_velocity_ = from.clapping_velocity_;
    }
    if (cached_has_bits & 0x00000010u) {
      velocity_threshold_ = from.velocity_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      velocity_output_delay_ = from.velocity_output_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      world_lhw_history_ = from.world_lhw_history_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_diff_ratio_ = from.height_diff_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      world_state_history_ = from.world_state_history_;
    }
    if (cached_has_bits & 0x00000200u) {
      min_cached_world_state_history_size_ = from.min_cached_world_state_history_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_cached_velocity_size_ = from.min_cached_velocity_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_cached_position_size_ = from.min_cached_position_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      calc_avg_position_window_size_ = from.calc_avg_position_window_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      static_speed_threshold_ = from.static_speed_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      static_speed_threshold_ped_ = from.static_speed_threshold_ped_;
    }
    if (cached_has_bits & 0x00008000u) {
      min_moving_avg_speed_ = from.min_moving_avg_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      min_moving_avg_speed_ped_ = from.min_moving_avg_speed_ped_;
    }
    if (cached_has_bits & 0x00020000u) {
      abnormal_acc_threshold_ = from.abnormal_acc_threshold_;
    }
    if (cached_has_bits & 0x00040000u) {
      abnormal_acc_threshold_ped_ = from.abnormal_acc_threshold_ped_;
    }
    if (cached_has_bits & 0x00080000u) {
      abnormal_velocity_heading_angle_threshold_ = from.abnormal_velocity_heading_angle_threshold_;
    }
    if (cached_has_bits & 0x00100000u) {
      world_mean_velocity_duration_ = from.world_mean_velocity_duration_;
    }
    if (cached_has_bits & 0x00200000u) {
      tracked_life_ = from.tracked_life_;
    }
    if (cached_has_bits & 0x00400000u) {
      type_filter_var_ = from.type_filter_var_;
    }
    if (cached_has_bits & 0x00800000u) {
      large_velocity_ratio_ = from.large_velocity_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      too_large_velocity_ratio_ = from.too_large_velocity_ratio_;
    }
    if (cached_has_bits & 0x02000000u) {
      mean_filter_window_ = from.mean_filter_window_;
    }
    if (cached_has_bits & 0x04000000u) {
      direction_filter_ratio_ = from.direction_filter_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      displacement_theta_var_ = from.displacement_theta_var_;
    }
    if (cached_has_bits & 0x10000000u) {
      velocity_theta_var_ = from.velocity_theta_var_;
    }
    if (cached_has_bits & 0x20000000u) {
      stable_moving_speed_ = from.stable_moving_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.omt.TargetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParam::CopyFrom(const TargetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.TargetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParam::IsInitialized() const {
  return true;
}

void TargetParam::InternalSwap(TargetParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(world_center_, other->world_center_);
  swap(image_center_, other->image_center_);
  swap(image_wh_update_rate_, other->image_wh_update_rate_);
  swap(clapping_velocity_, other->clapping_velocity_);
  swap(velocity_threshold_, other->velocity_threshold_);
  swap(velocity_output_delay_, other->velocity_output_delay_);
  swap(world_lhw_history_, other->world_lhw_history_);
  swap(height_diff_ratio_, other->height_diff_ratio_);
  swap(world_state_history_, other->world_state_history_);
  swap(min_cached_world_state_history_size_, other->min_cached_world_state_history_size_);
  swap(min_cached_velocity_size_, other->min_cached_velocity_size_);
  swap(min_cached_position_size_, other->min_cached_position_size_);
  swap(calc_avg_position_window_size_, other->calc_avg_position_window_size_);
  swap(static_speed_threshold_, other->static_speed_threshold_);
  swap(static_speed_threshold_ped_, other->static_speed_threshold_ped_);
  swap(min_moving_avg_speed_, other->min_moving_avg_speed_);
  swap(min_moving_avg_speed_ped_, other->min_moving_avg_speed_ped_);
  swap(abnormal_acc_threshold_, other->abnormal_acc_threshold_);
  swap(abnormal_acc_threshold_ped_, other->abnormal_acc_threshold_ped_);
  swap(abnormal_velocity_heading_angle_threshold_, other->abnormal_velocity_heading_angle_threshold_);
  swap(world_mean_velocity_duration_, other->world_mean_velocity_duration_);
  swap(tracked_life_, other->tracked_life_);
  swap(type_filter_var_, other->type_filter_var_);
  swap(large_velocity_ratio_, other->large_velocity_ratio_);
  swap(too_large_velocity_ratio_, other->too_large_velocity_ratio_);
  swap(mean_filter_window_, other->mean_filter_window_);
  swap(direction_filter_ratio_, other->direction_filter_ratio_);
  swap(displacement_theta_var_, other->displacement_theta_var_);
  swap(velocity_theta_var_, other->velocity_theta_var_);
  swap(stable_moving_speed_, other->stable_moving_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceParam::InitAsDefaultInstance() {
}
class ReferenceParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceParam>()._has_bits_);
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_allow_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_area_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_down_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height_diff_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReferenceParam::ReferenceParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.ReferenceParam)
}
ReferenceParam::ReferenceParam(const ReferenceParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_diff_ratio_, &from.height_diff_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_sampling_) -
    reinterpret_cast<char*>(&height_diff_ratio_)) + sizeof(down_sampling_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.ReferenceParam)
}

void ReferenceParam::SharedCtor() {
  height_diff_ratio_ = 0.1f;
  margin_ = 2;
  min_allow_height_ = 50;
  area_decay_ = 0.99f;
  down_sampling_ = 40;
}

ReferenceParam::~ReferenceParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.ReferenceParam)
  SharedDtor();
}

void ReferenceParam::SharedDtor() {
}

void ReferenceParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceParam& ReferenceParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  return *internal_default_instance();
}


void ReferenceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.ReferenceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    height_diff_ratio_ = 0.1f;
    margin_ = 2;
    min_allow_height_ = 50;
    area_decay_ = 0.99f;
    down_sampling_ = 40;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReferenceParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 margin = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_margin(&has_bits);
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_allow_height = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_allow_height(&has_bits);
          min_allow_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float area_decay = 3 [default = 0.99];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_area_decay(&has_bits);
          area_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 down_sampling = 4 [default = 40];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_down_sampling(&has_bits);
          down_sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float height_diff_ratio = 5 [default = 0.1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_height_diff_ratio(&has_bits);
          height_diff_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.ReferenceParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 margin = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_margin(), target);
  }

  // optional int32 min_allow_height = 2 [default = 50];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_allow_height(), target);
  }

  // optional float area_decay = 3 [default = 0.99];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_area_decay(), target);
  }

  // optional int32 down_sampling = 4 [default = 40];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_down_sampling(), target);
  }

  // optional float height_diff_ratio = 5 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_height_diff_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.ReferenceParam)
  return target;
}

size_t ReferenceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.ReferenceParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float height_diff_ratio = 5 [default = 0.1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 margin = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_margin());
    }

    // optional int32 min_allow_height = 2 [default = 50];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_allow_height());
    }

    // optional float area_decay = 3 [default = 0.99];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 down_sampling = 4 [default = 40];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_down_sampling());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.omt.ReferenceParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.omt.ReferenceParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.omt.ReferenceParam)
    MergeFrom(*source);
  }
}

void ReferenceParam::MergeFrom(const ReferenceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.ReferenceParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      height_diff_ratio_ = from.height_diff_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_ = from.margin_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_allow_height_ = from.min_allow_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      area_decay_ = from.area_decay_;
    }
    if (cached_has_bits & 0x00000010u) {
      down_sampling_ = from.down_sampling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.omt.ReferenceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceParam::CopyFrom(const ReferenceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.ReferenceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceParam::IsInitialized() const {
  return true;
}

void ReferenceParam::InternalSwap(ReferenceParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(height_diff_ratio_, other->height_diff_ratio_);
  swap(margin_, other->margin_);
  swap(min_allow_height_, other->min_allow_height_);
  swap(area_decay_, other->area_decay_);
  swap(down_sampling_, other->down_sampling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WeightParam::InitAsDefaultInstance() {
}
class WeightParam::_Internal {
 public:
  using HasBits = decltype(std::declval<WeightParam>()._has_bits_);
  static void set_has_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracklet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

WeightParam::WeightParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.WeightParam)
}
WeightParam::WeightParam(const WeightParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appearance_, &from.appearance_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_) -
    reinterpret_cast<char*>(&appearance_)) + sizeof(overlap_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.WeightParam)
}

void WeightParam::SharedCtor() {
  ::memset(&appearance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlap_) -
      reinterpret_cast<char*>(&appearance_)) + sizeof(overlap_));
}

WeightParam::~WeightParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.WeightParam)
  SharedDtor();
}

void WeightParam::SharedDtor() {
}

void WeightParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WeightParam& WeightParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WeightParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  return *internal_default_instance();
}


void WeightParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.WeightParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&appearance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&overlap_) -
        reinterpret_cast<char*>(&appearance_)) + sizeof(overlap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WeightParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float appearance = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_appearance(&has_bits);
          appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float motion = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_motion(&has_bits);
          motion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shape = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_shape(&has_bits);
          shape_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tracklet = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tracklet(&has_bits);
          tracklet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_overlap(&has_bits);
          overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WeightParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.WeightParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float appearance = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_appearance(), target);
  }

  // optional float motion = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_motion(), target);
  }

  // optional float shape = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shape(), target);
  }

  // optional float tracklet = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_tracklet(), target);
  }

  // optional float overlap = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.WeightParam)
  return target;
}

size_t WeightParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.WeightParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float appearance = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float motion = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float shape = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float tracklet = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float overlap = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeightParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.omt.WeightParam)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WeightParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.omt.WeightParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.omt.WeightParam)
    MergeFrom(*source);
  }
}

void WeightParam::MergeFrom(const WeightParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.WeightParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      appearance_ = from.appearance_;
    }
    if (cached_has_bits & 0x00000002u) {
      motion_ = from.motion_;
    }
    if (cached_has_bits & 0x00000004u) {
      shape_ = from.shape_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracklet_ = from.tracklet_;
    }
    if (cached_has_bits & 0x00000010u) {
      overlap_ = from.overlap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.omt.WeightParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightParam::CopyFrom(const WeightParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.WeightParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightParam::IsInitialized() const {
  return true;
}

void WeightParam::InternalSwap(WeightParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appearance_, other->appearance_);
  swap(motion_, other->motion_);
  swap(shape_, other->shape_);
  swap(tracklet_, other->tracklet_);
  swap(overlap_, other->overlap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OmtParam::InitAsDefaultInstance() {
  ::apollo::perception::camera::omt::_OmtParam_default_instance_._instance.get_mutable()->weight_same_camera_ = const_cast< ::apollo::perception::camera::omt::WeightParam*>(
      ::apollo::perception::camera::omt::WeightParam::internal_default_instance());
  ::apollo::perception::camera::omt::_OmtParam_default_instance_._instance.get_mutable()->weight_diff_camera_ = const_cast< ::apollo::perception::camera::omt::WeightParam*>(
      ::apollo::perception::camera::omt::WeightParam::internal_default_instance());
  ::apollo::perception::camera::omt::_OmtParam_default_instance_._instance.get_mutable()->target_param_ = const_cast< ::apollo::perception::camera::omt::TargetParam*>(
      ::apollo::perception::camera::omt::TargetParam::internal_default_instance());
  ::apollo::perception::camera::omt::_OmtParam_default_instance_._instance.get_mutable()->reference_ = const_cast< ::apollo::perception::camera::omt::ReferenceParam*>(
      ::apollo::perception::camera::omt::ReferenceParam::internal_default_instance());
}
class OmtParam::_Internal {
 public:
  using HasBits = decltype(std::declval<OmtParam>()._has_bits_);
  static void set_has_img_capability(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lost_age(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reserve_age(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::camera::omt::WeightParam& weight_same_camera(const OmtParam* msg);
  static void set_has_weight_same_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::camera::omt::WeightParam& weight_diff_camera(const OmtParam* msg);
  static void set_has_weight_diff_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_target_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_correct_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::camera::omt::TargetParam& target_param(const OmtParam* msg);
  static void set_has_target_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_init_height_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_target_combine_iou_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fusion_target_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_image_displacement(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_abnormal_movement(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_same_ts_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::perception::camera::omt::ReferenceParam& reference(const OmtParam* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type_change_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::camera::omt::WeightParam&
OmtParam::_Internal::weight_same_camera(const OmtParam* msg) {
  return *msg->weight_same_camera_;
}
const ::apollo::perception::camera::omt::WeightParam&
OmtParam::_Internal::weight_diff_camera(const OmtParam* msg) {
  return *msg->weight_diff_camera_;
}
const ::apollo::perception::camera::omt::TargetParam&
OmtParam::_Internal::target_param(const OmtParam* msg) {
  return *msg->target_param_;
}
const ::apollo::perception::camera::omt::ReferenceParam&
OmtParam::_Internal::reference(const OmtParam* msg) {
  return *msg->reference_;
}
OmtParam::OmtParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.omt.OmtParam)
}
OmtParam::OmtParam(const OmtParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_change_cost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type_change_cost()) {
    type_change_cost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_change_cost_);
  }
  if (from._internal_has_weight_same_camera()) {
    weight_same_camera_ = new ::apollo::perception::camera::omt::WeightParam(*from.weight_same_camera_);
  } else {
    weight_same_camera_ = nullptr;
  }
  if (from._internal_has_weight_diff_camera()) {
    weight_diff_camera_ = new ::apollo::perception::camera::omt::WeightParam(*from.weight_diff_camera_);
  } else {
    weight_diff_camera_ = nullptr;
  }
  if (from._internal_has_target_param()) {
    target_param_ = new ::apollo::perception::camera::omt::TargetParam(*from.target_param_);
  } else {
    target_param_ = nullptr;
  }
  if (from._internal_has_reference()) {
    reference_ = new ::apollo::perception::camera::omt::ReferenceParam(*from.reference_);
  } else {
    reference_ = nullptr;
  }
  ::memcpy(&correct_type_, &from.correct_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&same_ts_eps_) -
    reinterpret_cast<char*>(&correct_type_)) + sizeof(same_ts_eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.omt.OmtParam)
}

void OmtParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OmtParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  type_change_cost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&weight_same_camera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correct_type_) -
      reinterpret_cast<char*>(&weight_same_camera_)) + sizeof(correct_type_));
  img_capability_ = 7;
  lost_age_ = 2;
  reserve_age_ = 3;
  border_ = 30;
  target_thresh_ = 0.65f;
  min_init_height_ratio_ = 17;
  target_combine_iou_threshold_ = 0.5f;
  fusion_target_thresh_ = 0.45f;
  image_displacement_ = 50;
  abnormal_movement_ = 0.3f;
  same_ts_eps_ = 0.05;
}

OmtParam::~OmtParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.omt.OmtParam)
  SharedDtor();
}

void OmtParam::SharedDtor() {
  type_change_cost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete weight_same_camera_;
  if (this != internal_default_instance()) delete weight_diff_camera_;
  if (this != internal_default_instance()) delete target_param_;
  if (this != internal_default_instance()) delete reference_;
}

void OmtParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OmtParam& OmtParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OmtParam_modules_2fperception_2fcamera_2flib_2fobstacle_2ftracker_2fomt_2fomt_2eproto.base);
  return *internal_default_instance();
}


void OmtParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.omt.OmtParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_change_cost_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(weight_same_camera_ != nullptr);
      weight_same_camera_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(weight_diff_camera_ != nullptr);
      weight_diff_camera_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(target_param_ != nullptr);
      target_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reference_ != nullptr);
      reference_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    correct_type_ = false;
    img_capability_ = 7;
    lost_age_ = 2;
  }
  if (cached_has_bits & 0x0000ff00u) {
    reserve_age_ = 3;
    border_ = 30;
    target_thresh_ = 0.65f;
    min_init_height_ratio_ = 17;
    target_combine_iou_threshold_ = 0.5f;
    fusion_target_thresh_ = 0.45f;
    image_displacement_ = 50;
    abnormal_movement_ = 0.3f;
  }
  same_ts_eps_ = 0.05;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OmtParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 img_capability = 1 [default = 7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_img_capability(&has_bits);
          img_capability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lost_age = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lost_age(&has_bits);
          lost_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reserve_age = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reserve_age(&has_bits);
          reserve_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_same_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_diff_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float border = 9 [default = 30];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_border(&has_bits);
          border_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_thresh = 10 [default = 0.65];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_target_thresh(&has_bits);
          target_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool correct_type = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_correct_type(&has_bits);
          correct_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_init_height_ratio = 13 [default = 17];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_min_init_height_ratio(&has_bits);
          min_init_height_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_combine_iou_threshold = 14 [default = 0.5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_target_combine_iou_threshold(&has_bits);
          target_combine_iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fusion_target_thresh = 15 [default = 0.45];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_fusion_target_thresh(&has_bits);
          fusion_target_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float image_displacement = 16 [default = 50];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_image_displacement(&has_bits);
          image_displacement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float abnormal_movement = 17 [default = 0.3];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_abnormal_movement(&has_bits);
          abnormal_movement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double same_ts_eps = 18 [default = 0.05];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_same_ts_eps(&has_bits);
          same_ts_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type_change_cost = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_type_change_cost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.omt.OmtParam.type_change_cost");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OmtParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.omt.OmtParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 img_capability = 1 [default = 7];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_img_capability(), target);
  }

  // optional int32 lost_age = 2 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lost_age(), target);
  }

  // optional int32 reserve_age = 3 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reserve_age(), target);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weight_same_camera(this), target, stream);
  }

  // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::weight_diff_camera(this), target, stream);
  }

  // optional float border = 9 [default = 30];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_border(), target);
  }

  // optional float target_thresh = 10 [default = 0.65];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_target_thresh(), target);
  }

  // optional bool correct_type = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_correct_type(), target);
  }

  // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::target_param(this), target, stream);
  }

  // optional float min_init_height_ratio = 13 [default = 17];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_min_init_height_ratio(), target);
  }

  // optional float target_combine_iou_threshold = 14 [default = 0.5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_target_combine_iou_threshold(), target);
  }

  // optional float fusion_target_thresh = 15 [default = 0.45];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_fusion_target_thresh(), target);
  }

  // optional float image_displacement = 16 [default = 50];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_image_displacement(), target);
  }

  // optional float abnormal_movement = 17 [default = 0.3];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_abnormal_movement(), target);
  }

  // optional double same_ts_eps = 18 [default = 0.05];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_same_ts_eps(), target);
  }

  // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::reference(this), target, stream);
  }

  // optional string type_change_cost = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type_change_cost().data(), static_cast<int>(this->_internal_type_change_cost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.omt.OmtParam.type_change_cost");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_type_change_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.omt.OmtParam)
  return target;
}

size_t OmtParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.omt.OmtParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type_change_cost = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_change_cost());
    }

    // optional .apollo.perception.camera.omt.WeightParam weight_same_camera = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_same_camera_);
    }

    // optional .apollo.perception.camera.omt.WeightParam weight_diff_camera = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_diff_camera_);
    }

    // optional .apollo.perception.camera.omt.TargetParam target_param = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_param_);
    }

    // optional .apollo.perception.camera.omt.ReferenceParam reference = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_);
    }

    // optional bool correct_type = 11 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 img_capability = 1 [default = 7];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_img_capability());
    }

    // optional int32 lost_age = 2 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lost_age());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 reserve_age = 3 [default = 3];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reserve_age());
    }

    // optional float border = 9 [default = 30];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float target_thresh = 10 [default = 0.65];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float min_init_height_ratio = 13 [default = 17];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float target_combine_iou_threshold = 14 [default = 0.5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float fusion_target_thresh = 15 [default = 0.45];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float image_displacement = 16 [default = 50];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float abnormal_movement = 17 [default = 0.3];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  // optional double same_ts_eps = 18 [default = 0.05];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OmtParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.omt.OmtParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OmtParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OmtParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.omt.OmtParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.omt.OmtParam)
    MergeFrom(*source);
  }
}

void OmtParam::MergeFrom(const OmtParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.omt.OmtParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_change_cost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_change_cost_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weight_same_camera()->::apollo::perception::camera::omt::WeightParam::MergeFrom(from._internal_weight_same_camera());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_weight_diff_camera()->::apollo::perception::camera::omt::WeightParam::MergeFrom(from._internal_weight_diff_camera());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_target_param()->::apollo::perception::camera::omt::TargetParam::MergeFrom(from._internal_target_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reference()->::apollo::perception::camera::omt::ReferenceParam::MergeFrom(from._internal_reference());
    }
    if (cached_has_bits & 0x00000020u) {
      correct_type_ = from.correct_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      img_capability_ = from.img_capability_;
    }
    if (cached_has_bits & 0x00000080u) {
      lost_age_ = from.lost_age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      reserve_age_ = from.reserve_age_;
    }
    if (cached_has_bits & 0x00000200u) {
      border_ = from.border_;
    }
    if (cached_has_bits & 0x00000400u) {
      target_thresh_ = from.target_thresh_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_init_height_ratio_ = from.min_init_height_ratio_;
    }
    if (cached_has_bits & 0x00001000u) {
      target_combine_iou_threshold_ = from.target_combine_iou_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      fusion_target_thresh_ = from.fusion_target_thresh_;
    }
    if (cached_has_bits & 0x00004000u) {
      image_displacement_ = from.image_displacement_;
    }
    if (cached_has_bits & 0x00008000u) {
      abnormal_movement_ = from.abnormal_movement_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_same_ts_eps(from._internal_same_ts_eps());
  }
}

void OmtParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.omt.OmtParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OmtParam::CopyFrom(const OmtParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.omt.OmtParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OmtParam::IsInitialized() const {
  return true;
}

void OmtParam::InternalSwap(OmtParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_change_cost_.Swap(&other->type_change_cost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weight_same_camera_, other->weight_same_camera_);
  swap(weight_diff_camera_, other->weight_diff_camera_);
  swap(target_param_, other->target_param_);
  swap(reference_, other->reference_);
  swap(correct_type_, other->correct_type_);
  swap(img_capability_, other->img_capability_);
  swap(lost_age_, other->lost_age_);
  swap(reserve_age_, other->reserve_age_);
  swap(border_, other->border_);
  swap(target_thresh_, other->target_thresh_);
  swap(min_init_height_ratio_, other->min_init_height_ratio_);
  swap(target_combine_iou_threshold_, other->target_combine_iou_threshold_);
  swap(fusion_target_thresh_, other->fusion_target_thresh_);
  swap(image_displacement_, other->image_displacement_);
  swap(abnormal_movement_, other->abnormal_movement_);
  swap(same_ts_eps_, other->same_ts_eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OmtParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace omt
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::KalmanParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::KalmanParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::omt::KalmanParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::TargetParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::TargetParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::omt::TargetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::ReferenceParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::ReferenceParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::omt::ReferenceParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::WeightParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::WeightParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::omt::WeightParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::omt::OmtParam* Arena::CreateMaybeMessage< ::apollo::perception::camera::omt::OmtParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::omt::OmtParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
