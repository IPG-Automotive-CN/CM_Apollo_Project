// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/camera/app/perception.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2fapp_2fperception_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2fapp_2fperception_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fcamera_2fapp_2fperception_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
namespace apollo {
namespace perception {
namespace camera {
namespace app {
class CalibrationServiceParam;
class CalibrationServiceParamDefaultTypeInternal;
extern CalibrationServiceParamDefaultTypeInternal _CalibrationServiceParam_default_instance_;
class DebugParam;
class DebugParamDefaultTypeInternal;
extern DebugParamDefaultTypeInternal _DebugParam_default_instance_;
class DetectorParam;
class DetectorParamDefaultTypeInternal;
extern DetectorParamDefaultTypeInternal _DetectorParam_default_instance_;
class FeatureParam;
class FeatureParamDefaultTypeInternal;
extern FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
class LanePerceptionParam;
class LanePerceptionParamDefaultTypeInternal;
extern LanePerceptionParamDefaultTypeInternal _LanePerceptionParam_default_instance_;
class ObjectTemplateParam;
class ObjectTemplateParamDefaultTypeInternal;
extern ObjectTemplateParamDefaultTypeInternal _ObjectTemplateParam_default_instance_;
class PerceptionParam;
class PerceptionParamDefaultTypeInternal;
extern PerceptionParamDefaultTypeInternal _PerceptionParam_default_instance_;
class PluginParam;
class PluginParamDefaultTypeInternal;
extern PluginParamDefaultTypeInternal _PluginParam_default_instance_;
class PostprocessorParam;
class PostprocessorParamDefaultTypeInternal;
extern PostprocessorParamDefaultTypeInternal _PostprocessorParam_default_instance_;
class TrackerParam;
class TrackerParamDefaultTypeInternal;
extern TrackerParamDefaultTypeInternal _TrackerParam_default_instance_;
class TrafficLightParam;
class TrafficLightParamDefaultTypeInternal;
extern TrafficLightParamDefaultTypeInternal _TrafficLightParam_default_instance_;
class TransformerParam;
class TransformerParamDefaultTypeInternal;
extern TransformerParamDefaultTypeInternal _TransformerParam_default_instance_;
}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::camera::app::CalibrationServiceParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::CalibrationServiceParam>(Arena*);
template<> ::apollo::perception::camera::app::DebugParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::DebugParam>(Arena*);
template<> ::apollo::perception::camera::app::DetectorParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::DetectorParam>(Arena*);
template<> ::apollo::perception::camera::app::FeatureParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::FeatureParam>(Arena*);
template<> ::apollo::perception::camera::app::LanePerceptionParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::LanePerceptionParam>(Arena*);
template<> ::apollo::perception::camera::app::ObjectTemplateParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::ObjectTemplateParam>(Arena*);
template<> ::apollo::perception::camera::app::PerceptionParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::PerceptionParam>(Arena*);
template<> ::apollo::perception::camera::app::PluginParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(Arena*);
template<> ::apollo::perception::camera::app::PostprocessorParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::PostprocessorParam>(Arena*);
template<> ::apollo::perception::camera::app::TrackerParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::TrackerParam>(Arena*);
template<> ::apollo::perception::camera::app::TrafficLightParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::TrafficLightParam>(Arena*);
template<> ::apollo::perception::camera::app::TransformerParam* Arena::CreateMaybeMessage<::apollo::perception::camera::app::TransformerParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace camera {
namespace app {

// ===================================================================

class PluginParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.PluginParam) */ {
 public:
  PluginParam();
  virtual ~PluginParam();

  PluginParam(const PluginParam& from);
  PluginParam(PluginParam&& from) noexcept
    : PluginParam() {
    *this = ::std::move(from);
  }

  inline PluginParam& operator=(const PluginParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginParam& operator=(PluginParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PluginParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PluginParam* internal_default_instance() {
    return reinterpret_cast<const PluginParam*>(
               &_PluginParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PluginParam& a, PluginParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PluginParam* New() const final {
    return CreateMaybeMessage<PluginParam>(nullptr);
  }

  PluginParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PluginParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PluginParam& from);
  void MergeFrom(const PluginParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.PluginParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRootDirFieldNumber = 2,
    kConfigFileFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string root_dir = 2;
  bool has_root_dir() const;
  private:
  bool _internal_has_root_dir() const;
  public:
  void clear_root_dir();
  const std::string& root_dir() const;
  void set_root_dir(const std::string& value);
  void set_root_dir(std::string&& value);
  void set_root_dir(const char* value);
  void set_root_dir(const char* value, size_t size);
  std::string* mutable_root_dir();
  std::string* release_root_dir();
  void set_allocated_root_dir(std::string* root_dir);
  private:
  const std::string& _internal_root_dir() const;
  void _internal_set_root_dir(const std::string& value);
  std::string* _internal_mutable_root_dir();
  public:

  // optional string config_file = 3;
  bool has_config_file() const;
  private:
  bool _internal_has_config_file() const;
  public:
  void clear_config_file();
  const std::string& config_file() const;
  void set_config_file(const std::string& value);
  void set_config_file(std::string&& value);
  void set_config_file(const char* value);
  void set_config_file(const char* value, size_t size);
  std::string* mutable_config_file();
  std::string* release_config_file();
  void set_allocated_config_file(std::string* config_file);
  private:
  const std::string& _internal_config_file() const;
  void _internal_set_config_file(const std::string& value);
  std::string* _internal_mutable_config_file();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.PluginParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_file_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class DetectorParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.DetectorParam) */ {
 public:
  DetectorParam();
  virtual ~DetectorParam();

  DetectorParam(const DetectorParam& from);
  DetectorParam(DetectorParam&& from) noexcept
    : DetectorParam() {
    *this = ::std::move(from);
  }

  inline DetectorParam& operator=(const DetectorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectorParam& operator=(DetectorParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectorParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectorParam* internal_default_instance() {
    return reinterpret_cast<const DetectorParam*>(
               &_DetectorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectorParam& a, DetectorParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectorParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectorParam* New() const final {
    return CreateMaybeMessage<DetectorParam>(nullptr);
  }

  DetectorParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectorParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectorParam& from);
  void MergeFrom(const DetectorParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectorParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.DetectorParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNameFieldNumber = 2,
    kPluginParamFieldNumber = 1,
  };
  // optional string camera_name = 2;
  bool has_camera_name() const;
  private:
  bool _internal_has_camera_name() const;
  public:
  void clear_camera_name();
  const std::string& camera_name() const;
  void set_camera_name(const std::string& value);
  void set_camera_name(std::string&& value);
  void set_camera_name(const char* value);
  void set_camera_name(const char* value, size_t size);
  std::string* mutable_camera_name();
  std::string* release_camera_name();
  void set_allocated_camera_name(std::string* camera_name);
  private:
  const std::string& _internal_camera_name() const;
  void _internal_set_camera_name(const std::string& value);
  std::string* _internal_mutable_camera_name();
  public:

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.DetectorParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_name_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class TrackerParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.TrackerParam) */ {
 public:
  TrackerParam();
  virtual ~TrackerParam();

  TrackerParam(const TrackerParam& from);
  TrackerParam(TrackerParam&& from) noexcept
    : TrackerParam() {
    *this = ::std::move(from);
  }

  inline TrackerParam& operator=(const TrackerParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerParam& operator=(TrackerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackerParam* internal_default_instance() {
    return reinterpret_cast<const TrackerParam*>(
               &_TrackerParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackerParam& a, TrackerParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackerParam* New() const final {
    return CreateMaybeMessage<TrackerParam>(nullptr);
  }

  TrackerParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackerParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackerParam& from);
  void MergeFrom(const TrackerParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.TrackerParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginParamFieldNumber = 1,
  };
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.TrackerParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class TransformerParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.TransformerParam) */ {
 public:
  TransformerParam();
  virtual ~TransformerParam();

  TransformerParam(const TransformerParam& from);
  TransformerParam(TransformerParam&& from) noexcept
    : TransformerParam() {
    *this = ::std::move(from);
  }

  inline TransformerParam& operator=(const TransformerParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformerParam& operator=(TransformerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransformerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformerParam* internal_default_instance() {
    return reinterpret_cast<const TransformerParam*>(
               &_TransformerParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransformerParam& a, TransformerParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformerParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransformerParam* New() const final {
    return CreateMaybeMessage<TransformerParam>(nullptr);
  }

  TransformerParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransformerParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransformerParam& from);
  void MergeFrom(const TransformerParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformerParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.TransformerParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginParamFieldNumber = 1,
  };
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.TransformerParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class PostprocessorParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.PostprocessorParam) */ {
 public:
  PostprocessorParam();
  virtual ~PostprocessorParam();

  PostprocessorParam(const PostprocessorParam& from);
  PostprocessorParam(PostprocessorParam&& from) noexcept
    : PostprocessorParam() {
    *this = ::std::move(from);
  }

  inline PostprocessorParam& operator=(const PostprocessorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostprocessorParam& operator=(PostprocessorParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostprocessorParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostprocessorParam* internal_default_instance() {
    return reinterpret_cast<const PostprocessorParam*>(
               &_PostprocessorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostprocessorParam& a, PostprocessorParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PostprocessorParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostprocessorParam* New() const final {
    return CreateMaybeMessage<PostprocessorParam>(nullptr);
  }

  PostprocessorParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostprocessorParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostprocessorParam& from);
  void MergeFrom(const PostprocessorParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostprocessorParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.PostprocessorParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginParamFieldNumber = 1,
  };
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.PostprocessorParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class FeatureParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.FeatureParam) */ {
 public:
  FeatureParam();
  virtual ~FeatureParam();

  FeatureParam(const FeatureParam& from);
  FeatureParam(FeatureParam&& from) noexcept
    : FeatureParam() {
    *this = ::std::move(from);
  }

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureParam& operator=(FeatureParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureParam* internal_default_instance() {
    return reinterpret_cast<const FeatureParam*>(
               &_FeatureParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FeatureParam& a, FeatureParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureParam* New() const final {
    return CreateMaybeMessage<FeatureParam>(nullptr);
  }

  FeatureParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureParam& from);
  void MergeFrom(const FeatureParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.FeatureParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginParamFieldNumber = 1,
  };
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.FeatureParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class DebugParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.DebugParam) */ {
 public:
  DebugParam();
  virtual ~DebugParam();

  DebugParam(const DebugParam& from);
  DebugParam(DebugParam&& from) noexcept
    : DebugParam() {
    *this = ::std::move(from);
  }

  inline DebugParam& operator=(const DebugParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugParam& operator=(DebugParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DebugParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugParam* internal_default_instance() {
    return reinterpret_cast<const DebugParam*>(
               &_DebugParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DebugParam& a, DebugParam& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugParam* New() const final {
    return CreateMaybeMessage<DebugParam>(nullptr);
  }

  DebugParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DebugParam& from);
  void MergeFrom(const DebugParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.DebugParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionOutDirFieldNumber = 1,
    kTrackedDetectionOutDirFieldNumber = 2,
    kTrackOutFileFieldNumber = 3,
    kDetectFeatureDirFieldNumber = 4,
    kLaneOutDirFieldNumber = 5,
    kCamera2WorldOutFileFieldNumber = 6,
    kCalibrationOutDirFieldNumber = 7,
  };
  // optional string detection_out_dir = 1;
  bool has_detection_out_dir() const;
  private:
  bool _internal_has_detection_out_dir() const;
  public:
  void clear_detection_out_dir();
  const std::string& detection_out_dir() const;
  void set_detection_out_dir(const std::string& value);
  void set_detection_out_dir(std::string&& value);
  void set_detection_out_dir(const char* value);
  void set_detection_out_dir(const char* value, size_t size);
  std::string* mutable_detection_out_dir();
  std::string* release_detection_out_dir();
  void set_allocated_detection_out_dir(std::string* detection_out_dir);
  private:
  const std::string& _internal_detection_out_dir() const;
  void _internal_set_detection_out_dir(const std::string& value);
  std::string* _internal_mutable_detection_out_dir();
  public:

  // optional string tracked_detection_out_dir = 2;
  bool has_tracked_detection_out_dir() const;
  private:
  bool _internal_has_tracked_detection_out_dir() const;
  public:
  void clear_tracked_detection_out_dir();
  const std::string& tracked_detection_out_dir() const;
  void set_tracked_detection_out_dir(const std::string& value);
  void set_tracked_detection_out_dir(std::string&& value);
  void set_tracked_detection_out_dir(const char* value);
  void set_tracked_detection_out_dir(const char* value, size_t size);
  std::string* mutable_tracked_detection_out_dir();
  std::string* release_tracked_detection_out_dir();
  void set_allocated_tracked_detection_out_dir(std::string* tracked_detection_out_dir);
  private:
  const std::string& _internal_tracked_detection_out_dir() const;
  void _internal_set_tracked_detection_out_dir(const std::string& value);
  std::string* _internal_mutable_tracked_detection_out_dir();
  public:

  // optional string track_out_file = 3;
  bool has_track_out_file() const;
  private:
  bool _internal_has_track_out_file() const;
  public:
  void clear_track_out_file();
  const std::string& track_out_file() const;
  void set_track_out_file(const std::string& value);
  void set_track_out_file(std::string&& value);
  void set_track_out_file(const char* value);
  void set_track_out_file(const char* value, size_t size);
  std::string* mutable_track_out_file();
  std::string* release_track_out_file();
  void set_allocated_track_out_file(std::string* track_out_file);
  private:
  const std::string& _internal_track_out_file() const;
  void _internal_set_track_out_file(const std::string& value);
  std::string* _internal_mutable_track_out_file();
  public:

  // optional string detect_feature_dir = 4;
  bool has_detect_feature_dir() const;
  private:
  bool _internal_has_detect_feature_dir() const;
  public:
  void clear_detect_feature_dir();
  const std::string& detect_feature_dir() const;
  void set_detect_feature_dir(const std::string& value);
  void set_detect_feature_dir(std::string&& value);
  void set_detect_feature_dir(const char* value);
  void set_detect_feature_dir(const char* value, size_t size);
  std::string* mutable_detect_feature_dir();
  std::string* release_detect_feature_dir();
  void set_allocated_detect_feature_dir(std::string* detect_feature_dir);
  private:
  const std::string& _internal_detect_feature_dir() const;
  void _internal_set_detect_feature_dir(const std::string& value);
  std::string* _internal_mutable_detect_feature_dir();
  public:

  // optional string lane_out_dir = 5;
  bool has_lane_out_dir() const;
  private:
  bool _internal_has_lane_out_dir() const;
  public:
  void clear_lane_out_dir();
  const std::string& lane_out_dir() const;
  void set_lane_out_dir(const std::string& value);
  void set_lane_out_dir(std::string&& value);
  void set_lane_out_dir(const char* value);
  void set_lane_out_dir(const char* value, size_t size);
  std::string* mutable_lane_out_dir();
  std::string* release_lane_out_dir();
  void set_allocated_lane_out_dir(std::string* lane_out_dir);
  private:
  const std::string& _internal_lane_out_dir() const;
  void _internal_set_lane_out_dir(const std::string& value);
  std::string* _internal_mutable_lane_out_dir();
  public:

  // optional string camera2world_out_file = 6;
  bool has_camera2world_out_file() const;
  private:
  bool _internal_has_camera2world_out_file() const;
  public:
  void clear_camera2world_out_file();
  const std::string& camera2world_out_file() const;
  void set_camera2world_out_file(const std::string& value);
  void set_camera2world_out_file(std::string&& value);
  void set_camera2world_out_file(const char* value);
  void set_camera2world_out_file(const char* value, size_t size);
  std::string* mutable_camera2world_out_file();
  std::string* release_camera2world_out_file();
  void set_allocated_camera2world_out_file(std::string* camera2world_out_file);
  private:
  const std::string& _internal_camera2world_out_file() const;
  void _internal_set_camera2world_out_file(const std::string& value);
  std::string* _internal_mutable_camera2world_out_file();
  public:

  // optional string calibration_out_dir = 7;
  bool has_calibration_out_dir() const;
  private:
  bool _internal_has_calibration_out_dir() const;
  public:
  void clear_calibration_out_dir();
  const std::string& calibration_out_dir() const;
  void set_calibration_out_dir(const std::string& value);
  void set_calibration_out_dir(std::string&& value);
  void set_calibration_out_dir(const char* value);
  void set_calibration_out_dir(const char* value, size_t size);
  std::string* mutable_calibration_out_dir();
  std::string* release_calibration_out_dir();
  void set_allocated_calibration_out_dir(std::string* calibration_out_dir);
  private:
  const std::string& _internal_calibration_out_dir() const;
  void _internal_set_calibration_out_dir(const std::string& value);
  std::string* _internal_mutable_calibration_out_dir();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.DebugParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detection_out_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracked_detection_out_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_out_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detect_feature_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_out_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera2world_out_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibration_out_dir_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class LanePerceptionParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.LanePerceptionParam) */ {
 public:
  LanePerceptionParam();
  virtual ~LanePerceptionParam();

  LanePerceptionParam(const LanePerceptionParam& from);
  LanePerceptionParam(LanePerceptionParam&& from) noexcept
    : LanePerceptionParam() {
    *this = ::std::move(from);
  }

  inline LanePerceptionParam& operator=(const LanePerceptionParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanePerceptionParam& operator=(LanePerceptionParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LanePerceptionParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LanePerceptionParam* internal_default_instance() {
    return reinterpret_cast<const LanePerceptionParam*>(
               &_LanePerceptionParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LanePerceptionParam& a, LanePerceptionParam& b) {
    a.Swap(&b);
  }
  inline void Swap(LanePerceptionParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LanePerceptionParam* New() const final {
    return CreateMaybeMessage<LanePerceptionParam>(nullptr);
  }

  LanePerceptionParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LanePerceptionParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LanePerceptionParam& from);
  void MergeFrom(const LanePerceptionParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanePerceptionParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.LanePerceptionParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneDetectorParamFieldNumber = 1,
    kLanePostprocessorParamFieldNumber = 2,
    kLaneTrackerParamFieldNumber = 3,
    kGpuIdFieldNumber = 4,
  };
  // optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
  bool has_lane_detector_param() const;
  private:
  bool _internal_has_lane_detector_param() const;
  public:
  void clear_lane_detector_param();
  const ::apollo::perception::camera::app::DetectorParam& lane_detector_param() const;
  ::apollo::perception::camera::app::DetectorParam* release_lane_detector_param();
  ::apollo::perception::camera::app::DetectorParam* mutable_lane_detector_param();
  void set_allocated_lane_detector_param(::apollo::perception::camera::app::DetectorParam* lane_detector_param);
  private:
  const ::apollo::perception::camera::app::DetectorParam& _internal_lane_detector_param() const;
  ::apollo::perception::camera::app::DetectorParam* _internal_mutable_lane_detector_param();
  public:

  // optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
  bool has_lane_postprocessor_param() const;
  private:
  bool _internal_has_lane_postprocessor_param() const;
  public:
  void clear_lane_postprocessor_param();
  const ::apollo::perception::camera::app::PluginParam& lane_postprocessor_param() const;
  ::apollo::perception::camera::app::PluginParam* release_lane_postprocessor_param();
  ::apollo::perception::camera::app::PluginParam* mutable_lane_postprocessor_param();
  void set_allocated_lane_postprocessor_param(::apollo::perception::camera::app::PluginParam* lane_postprocessor_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_lane_postprocessor_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_lane_postprocessor_param();
  public:

  // optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
  bool has_lane_tracker_param() const;
  private:
  bool _internal_has_lane_tracker_param() const;
  public:
  void clear_lane_tracker_param();
  const ::apollo::perception::camera::app::PluginParam& lane_tracker_param() const;
  ::apollo::perception::camera::app::PluginParam* release_lane_tracker_param();
  ::apollo::perception::camera::app::PluginParam* mutable_lane_tracker_param();
  void set_allocated_lane_tracker_param(::apollo::perception::camera::app::PluginParam* lane_tracker_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_lane_tracker_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_lane_tracker_param();
  public:

  // optional int32 gpu_id = 4;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.LanePerceptionParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::app::DetectorParam* lane_detector_param_;
  ::apollo::perception::camera::app::PluginParam* lane_postprocessor_param_;
  ::apollo::perception::camera::app::PluginParam* lane_tracker_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class CalibrationServiceParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.CalibrationServiceParam) */ {
 public:
  CalibrationServiceParam();
  virtual ~CalibrationServiceParam();

  CalibrationServiceParam(const CalibrationServiceParam& from);
  CalibrationServiceParam(CalibrationServiceParam&& from) noexcept
    : CalibrationServiceParam() {
    *this = ::std::move(from);
  }

  inline CalibrationServiceParam& operator=(const CalibrationServiceParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationServiceParam& operator=(CalibrationServiceParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibrationServiceParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationServiceParam* internal_default_instance() {
    return reinterpret_cast<const CalibrationServiceParam*>(
               &_CalibrationServiceParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CalibrationServiceParam& a, CalibrationServiceParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationServiceParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibrationServiceParam* New() const final {
    return CreateMaybeMessage<CalibrationServiceParam>(nullptr);
  }

  CalibrationServiceParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibrationServiceParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibrationServiceParam& from);
  void MergeFrom(const CalibrationServiceParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationServiceParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.CalibrationServiceParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibratorMethodFieldNumber = 2,
    kPluginParamFieldNumber = 3,
  };
  // optional string calibrator_method = 2;
  bool has_calibrator_method() const;
  private:
  bool _internal_has_calibrator_method() const;
  public:
  void clear_calibrator_method();
  const std::string& calibrator_method() const;
  void set_calibrator_method(const std::string& value);
  void set_calibrator_method(std::string&& value);
  void set_calibrator_method(const char* value);
  void set_calibrator_method(const char* value, size_t size);
  std::string* mutable_calibrator_method();
  std::string* release_calibrator_method();
  void set_allocated_calibrator_method(std::string* calibrator_method);
  private:
  const std::string& _internal_calibrator_method() const;
  void _internal_set_calibrator_method(const std::string& value);
  std::string* _internal_mutable_calibrator_method();
  public:

  // optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.CalibrationServiceParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibrator_method_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class ObjectTemplateParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.ObjectTemplateParam) */ {
 public:
  ObjectTemplateParam();
  virtual ~ObjectTemplateParam();

  ObjectTemplateParam(const ObjectTemplateParam& from);
  ObjectTemplateParam(ObjectTemplateParam&& from) noexcept
    : ObjectTemplateParam() {
    *this = ::std::move(from);
  }

  inline ObjectTemplateParam& operator=(const ObjectTemplateParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTemplateParam& operator=(ObjectTemplateParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectTemplateParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTemplateParam* internal_default_instance() {
    return reinterpret_cast<const ObjectTemplateParam*>(
               &_ObjectTemplateParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ObjectTemplateParam& a, ObjectTemplateParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTemplateParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectTemplateParam* New() const final {
    return CreateMaybeMessage<ObjectTemplateParam>(nullptr);
  }

  ObjectTemplateParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTemplateParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectTemplateParam& from);
  void MergeFrom(const ObjectTemplateParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTemplateParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.ObjectTemplateParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginParamFieldNumber = 1,
  };
  // optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
  bool has_plugin_param() const;
  private:
  bool _internal_has_plugin_param() const;
  public:
  void clear_plugin_param();
  const ::apollo::perception::camera::app::PluginParam& plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* release_plugin_param();
  ::apollo::perception::camera::app::PluginParam* mutable_plugin_param();
  void set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param);
  private:
  const ::apollo::perception::camera::app::PluginParam& _internal_plugin_param() const;
  ::apollo::perception::camera::app::PluginParam* _internal_mutable_plugin_param();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.ObjectTemplateParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::perception::camera::app::PluginParam* plugin_param_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class PerceptionParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.PerceptionParam) */ {
 public:
  PerceptionParam();
  virtual ~PerceptionParam();

  PerceptionParam(const PerceptionParam& from);
  PerceptionParam(PerceptionParam&& from) noexcept
    : PerceptionParam() {
    *this = ::std::move(from);
  }

  inline PerceptionParam& operator=(const PerceptionParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionParam& operator=(PerceptionParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerceptionParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionParam* internal_default_instance() {
    return reinterpret_cast<const PerceptionParam*>(
               &_PerceptionParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PerceptionParam& a, PerceptionParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerceptionParam* New() const final {
    return CreateMaybeMessage<PerceptionParam>(nullptr);
  }

  PerceptionParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerceptionParam& from);
  void MergeFrom(const PerceptionParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.PerceptionParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectorParamFieldNumber = 1,
    kCameraIntrinsicsFieldNumber = 6,
    kTrackerParamFieldNumber = 2,
    kTransformerParamFieldNumber = 3,
    kPostprocessorParamFieldNumber = 4,
    kFeatureParamFieldNumber = 7,
    kLaneParamFieldNumber = 8,
    kCalibrationServiceParamFieldNumber = 9,
    kDebugParamFieldNumber = 10,
    kObjectTemplateParamFieldNumber = 11,
    kGpuIdFieldNumber = 5,
  };
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  int detector_param_size() const;
  private:
  int _internal_detector_param_size() const;
  public:
  void clear_detector_param();
  ::apollo::perception::camera::app::DetectorParam* mutable_detector_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
      mutable_detector_param();
  private:
  const ::apollo::perception::camera::app::DetectorParam& _internal_detector_param(int index) const;
  ::apollo::perception::camera::app::DetectorParam* _internal_add_detector_param();
  public:
  const ::apollo::perception::camera::app::DetectorParam& detector_param(int index) const;
  ::apollo::perception::camera::app::DetectorParam* add_detector_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
      detector_param() const;

  // optional string camera_intrinsics = 6;
  bool has_camera_intrinsics() const;
  private:
  bool _internal_has_camera_intrinsics() const;
  public:
  void clear_camera_intrinsics();
  const std::string& camera_intrinsics() const;
  void set_camera_intrinsics(const std::string& value);
  void set_camera_intrinsics(std::string&& value);
  void set_camera_intrinsics(const char* value);
  void set_camera_intrinsics(const char* value, size_t size);
  std::string* mutable_camera_intrinsics();
  std::string* release_camera_intrinsics();
  void set_allocated_camera_intrinsics(std::string* camera_intrinsics);
  private:
  const std::string& _internal_camera_intrinsics() const;
  void _internal_set_camera_intrinsics(const std::string& value);
  std::string* _internal_mutable_camera_intrinsics();
  public:

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  bool has_tracker_param() const;
  private:
  bool _internal_has_tracker_param() const;
  public:
  void clear_tracker_param();
  const ::apollo::perception::camera::app::TrackerParam& tracker_param() const;
  ::apollo::perception::camera::app::TrackerParam* release_tracker_param();
  ::apollo::perception::camera::app::TrackerParam* mutable_tracker_param();
  void set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param);
  private:
  const ::apollo::perception::camera::app::TrackerParam& _internal_tracker_param() const;
  ::apollo::perception::camera::app::TrackerParam* _internal_mutable_tracker_param();
  public:

  // optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
  bool has_transformer_param() const;
  private:
  bool _internal_has_transformer_param() const;
  public:
  void clear_transformer_param();
  const ::apollo::perception::camera::app::TransformerParam& transformer_param() const;
  ::apollo::perception::camera::app::TransformerParam* release_transformer_param();
  ::apollo::perception::camera::app::TransformerParam* mutable_transformer_param();
  void set_allocated_transformer_param(::apollo::perception::camera::app::TransformerParam* transformer_param);
  private:
  const ::apollo::perception::camera::app::TransformerParam& _internal_transformer_param() const;
  ::apollo::perception::camera::app::TransformerParam* _internal_mutable_transformer_param();
  public:

  // optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
  bool has_postprocessor_param() const;
  private:
  bool _internal_has_postprocessor_param() const;
  public:
  void clear_postprocessor_param();
  const ::apollo::perception::camera::app::PostprocessorParam& postprocessor_param() const;
  ::apollo::perception::camera::app::PostprocessorParam* release_postprocessor_param();
  ::apollo::perception::camera::app::PostprocessorParam* mutable_postprocessor_param();
  void set_allocated_postprocessor_param(::apollo::perception::camera::app::PostprocessorParam* postprocessor_param);
  private:
  const ::apollo::perception::camera::app::PostprocessorParam& _internal_postprocessor_param() const;
  ::apollo::perception::camera::app::PostprocessorParam* _internal_mutable_postprocessor_param();
  public:

  // optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
  bool has_feature_param() const;
  private:
  bool _internal_has_feature_param() const;
  public:
  void clear_feature_param();
  const ::apollo::perception::camera::app::FeatureParam& feature_param() const;
  ::apollo::perception::camera::app::FeatureParam* release_feature_param();
  ::apollo::perception::camera::app::FeatureParam* mutable_feature_param();
  void set_allocated_feature_param(::apollo::perception::camera::app::FeatureParam* feature_param);
  private:
  const ::apollo::perception::camera::app::FeatureParam& _internal_feature_param() const;
  ::apollo::perception::camera::app::FeatureParam* _internal_mutable_feature_param();
  public:

  // optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
  bool has_lane_param() const;
  private:
  bool _internal_has_lane_param() const;
  public:
  void clear_lane_param();
  const ::apollo::perception::camera::app::LanePerceptionParam& lane_param() const;
  ::apollo::perception::camera::app::LanePerceptionParam* release_lane_param();
  ::apollo::perception::camera::app::LanePerceptionParam* mutable_lane_param();
  void set_allocated_lane_param(::apollo::perception::camera::app::LanePerceptionParam* lane_param);
  private:
  const ::apollo::perception::camera::app::LanePerceptionParam& _internal_lane_param() const;
  ::apollo::perception::camera::app::LanePerceptionParam* _internal_mutable_lane_param();
  public:

  // optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
  bool has_calibration_service_param() const;
  private:
  bool _internal_has_calibration_service_param() const;
  public:
  void clear_calibration_service_param();
  const ::apollo::perception::camera::app::CalibrationServiceParam& calibration_service_param() const;
  ::apollo::perception::camera::app::CalibrationServiceParam* release_calibration_service_param();
  ::apollo::perception::camera::app::CalibrationServiceParam* mutable_calibration_service_param();
  void set_allocated_calibration_service_param(::apollo::perception::camera::app::CalibrationServiceParam* calibration_service_param);
  private:
  const ::apollo::perception::camera::app::CalibrationServiceParam& _internal_calibration_service_param() const;
  ::apollo::perception::camera::app::CalibrationServiceParam* _internal_mutable_calibration_service_param();
  public:

  // optional .apollo.perception.camera.app.DebugParam debug_param = 10;
  bool has_debug_param() const;
  private:
  bool _internal_has_debug_param() const;
  public:
  void clear_debug_param();
  const ::apollo::perception::camera::app::DebugParam& debug_param() const;
  ::apollo::perception::camera::app::DebugParam* release_debug_param();
  ::apollo::perception::camera::app::DebugParam* mutable_debug_param();
  void set_allocated_debug_param(::apollo::perception::camera::app::DebugParam* debug_param);
  private:
  const ::apollo::perception::camera::app::DebugParam& _internal_debug_param() const;
  ::apollo::perception::camera::app::DebugParam* _internal_mutable_debug_param();
  public:

  // optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
  bool has_object_template_param() const;
  private:
  bool _internal_has_object_template_param() const;
  public:
  void clear_object_template_param();
  const ::apollo::perception::camera::app::ObjectTemplateParam& object_template_param() const;
  ::apollo::perception::camera::app::ObjectTemplateParam* release_object_template_param();
  ::apollo::perception::camera::app::ObjectTemplateParam* mutable_object_template_param();
  void set_allocated_object_template_param(::apollo::perception::camera::app::ObjectTemplateParam* object_template_param);
  private:
  const ::apollo::perception::camera::app::ObjectTemplateParam& _internal_object_template_param() const;
  ::apollo::perception::camera::app::ObjectTemplateParam* _internal_mutable_object_template_param();
  public:

  // optional int32 gpu_id = 5;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.PerceptionParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam > detector_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_intrinsics_;
  ::apollo::perception::camera::app::TrackerParam* tracker_param_;
  ::apollo::perception::camera::app::TransformerParam* transformer_param_;
  ::apollo::perception::camera::app::PostprocessorParam* postprocessor_param_;
  ::apollo::perception::camera::app::FeatureParam* feature_param_;
  ::apollo::perception::camera::app::LanePerceptionParam* lane_param_;
  ::apollo::perception::camera::app::CalibrationServiceParam* calibration_service_param_;
  ::apollo::perception::camera::app::DebugParam* debug_param_;
  ::apollo::perception::camera::app::ObjectTemplateParam* object_template_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// -------------------------------------------------------------------

class TrafficLightParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.app.TrafficLightParam) */ {
 public:
  TrafficLightParam();
  virtual ~TrafficLightParam();

  TrafficLightParam(const TrafficLightParam& from);
  TrafficLightParam(TrafficLightParam&& from) noexcept
    : TrafficLightParam() {
    *this = ::std::move(from);
  }

  inline TrafficLightParam& operator=(const TrafficLightParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLightParam& operator=(TrafficLightParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLightParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightParam* internal_default_instance() {
    return reinterpret_cast<const TrafficLightParam*>(
               &_TrafficLightParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TrafficLightParam& a, TrafficLightParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLightParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightParam* New() const final {
    return CreateMaybeMessage<TrafficLightParam>(nullptr);
  }

  TrafficLightParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLightParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLightParam& from);
  void MergeFrom(const TrafficLightParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLightParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.camera.app.TrafficLightParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto);
    return ::descriptor_table_modules_2fperception_2fcamera_2fapp_2fperception_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectorParamFieldNumber = 1,
    kTrackerParamFieldNumber = 2,
    kGpuIdFieldNumber = 3,
  };
  // repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
  int detector_param_size() const;
  private:
  int _internal_detector_param_size() const;
  public:
  void clear_detector_param();
  ::apollo::perception::camera::app::DetectorParam* mutable_detector_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
      mutable_detector_param();
  private:
  const ::apollo::perception::camera::app::DetectorParam& _internal_detector_param(int index) const;
  ::apollo::perception::camera::app::DetectorParam* _internal_add_detector_param();
  public:
  const ::apollo::perception::camera::app::DetectorParam& detector_param(int index) const;
  ::apollo::perception::camera::app::DetectorParam* add_detector_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
      detector_param() const;

  // optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
  bool has_tracker_param() const;
  private:
  bool _internal_has_tracker_param() const;
  public:
  void clear_tracker_param();
  const ::apollo::perception::camera::app::TrackerParam& tracker_param() const;
  ::apollo::perception::camera::app::TrackerParam* release_tracker_param();
  ::apollo::perception::camera::app::TrackerParam* mutable_tracker_param();
  void set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param);
  private:
  const ::apollo::perception::camera::app::TrackerParam& _internal_tracker_param() const;
  ::apollo::perception::camera::app::TrackerParam* _internal_mutable_tracker_param();
  public:

  // optional int32 gpu_id = 3;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.app.TrafficLightParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam > detector_param_;
  ::apollo::perception::camera::app::TrackerParam* tracker_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  friend struct ::TableStruct_modules_2fperception_2fcamera_2fapp_2fperception_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PluginParam

// optional string name = 1;
inline bool PluginParam::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginParam::has_name() const {
  return _internal_has_name();
}
inline void PluginParam::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginParam::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PluginParam.name)
  return _internal_name();
}
inline void PluginParam::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PluginParam.name)
}
inline std::string* PluginParam::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PluginParam.name)
  return _internal_mutable_name();
}
inline const std::string& PluginParam::_internal_name() const {
  return name_.GetNoArena();
}
inline void PluginParam::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PluginParam::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.PluginParam.name)
}
inline void PluginParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PluginParam.name)
}
inline void PluginParam::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PluginParam.name)
}
inline std::string* PluginParam::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PluginParam::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PluginParam.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PluginParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PluginParam.name)
}

// optional string root_dir = 2;
inline bool PluginParam::_internal_has_root_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PluginParam::has_root_dir() const {
  return _internal_has_root_dir();
}
inline void PluginParam::clear_root_dir() {
  root_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PluginParam::root_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PluginParam.root_dir)
  return _internal_root_dir();
}
inline void PluginParam::set_root_dir(const std::string& value) {
  _internal_set_root_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PluginParam.root_dir)
}
inline std::string* PluginParam::mutable_root_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PluginParam.root_dir)
  return _internal_mutable_root_dir();
}
inline const std::string& PluginParam::_internal_root_dir() const {
  return root_dir_.GetNoArena();
}
inline void PluginParam::_internal_set_root_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  root_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PluginParam::set_root_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  root_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.PluginParam.root_dir)
}
inline void PluginParam::set_root_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  root_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PluginParam.root_dir)
}
inline void PluginParam::set_root_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  root_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PluginParam.root_dir)
}
inline std::string* PluginParam::_internal_mutable_root_dir() {
  _has_bits_[0] |= 0x00000002u;
  return root_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PluginParam::release_root_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PluginParam.root_dir)
  if (!_internal_has_root_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return root_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PluginParam::set_allocated_root_dir(std::string* root_dir) {
  if (root_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  root_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PluginParam.root_dir)
}

// optional string config_file = 3;
inline bool PluginParam::_internal_has_config_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PluginParam::has_config_file() const {
  return _internal_has_config_file();
}
inline void PluginParam::clear_config_file() {
  config_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PluginParam::config_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PluginParam.config_file)
  return _internal_config_file();
}
inline void PluginParam::set_config_file(const std::string& value) {
  _internal_set_config_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PluginParam.config_file)
}
inline std::string* PluginParam::mutable_config_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PluginParam.config_file)
  return _internal_mutable_config_file();
}
inline const std::string& PluginParam::_internal_config_file() const {
  return config_file_.GetNoArena();
}
inline void PluginParam::_internal_set_config_file(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  config_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PluginParam::set_config_file(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  config_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.PluginParam.config_file)
}
inline void PluginParam::set_config_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  config_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PluginParam.config_file)
}
inline void PluginParam::set_config_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  config_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PluginParam.config_file)
}
inline std::string* PluginParam::_internal_mutable_config_file() {
  _has_bits_[0] |= 0x00000004u;
  return config_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PluginParam::release_config_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PluginParam.config_file)
  if (!_internal_has_config_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return config_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PluginParam::set_allocated_config_file(std::string* config_file) {
  if (config_file != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  config_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PluginParam.config_file)
}

// -------------------------------------------------------------------

// DetectorParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool DetectorParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool DetectorParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void DetectorParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::app::PluginParam& DetectorParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& DetectorParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DetectorParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* DetectorParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DetectorParam.plugin_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* DetectorParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000002u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* DetectorParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DetectorParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void DetectorParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DetectorParam.plugin_param)
}

// optional string camera_name = 2;
inline bool DetectorParam::_internal_has_camera_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectorParam::has_camera_name() const {
  return _internal_has_camera_name();
}
inline void DetectorParam::clear_camera_name() {
  camera_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetectorParam::camera_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DetectorParam.camera_name)
  return _internal_camera_name();
}
inline void DetectorParam::set_camera_name(const std::string& value) {
  _internal_set_camera_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline std::string* DetectorParam::mutable_camera_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DetectorParam.camera_name)
  return _internal_mutable_camera_name();
}
inline const std::string& DetectorParam::_internal_camera_name() const {
  return camera_name_.GetNoArena();
}
inline void DetectorParam::_internal_set_camera_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DetectorParam::set_camera_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline void DetectorParam::set_camera_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline void DetectorParam::set_camera_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DetectorParam.camera_name)
}
inline std::string* DetectorParam::_internal_mutable_camera_name() {
  _has_bits_[0] |= 0x00000001u;
  return camera_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectorParam::release_camera_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DetectorParam.camera_name)
  if (!_internal_has_camera_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectorParam::set_allocated_camera_name(std::string* camera_name) {
  if (camera_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DetectorParam.camera_name)
}

// -------------------------------------------------------------------

// TrackerParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool TrackerParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool TrackerParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void TrackerParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::PluginParam& TrackerParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& TrackerParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrackerParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* TrackerParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.TrackerParam.plugin_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* TrackerParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* TrackerParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TrackerParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void TrackerParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.TrackerParam.plugin_param)
}

// -------------------------------------------------------------------

// TransformerParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool TransformerParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool TransformerParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void TransformerParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::PluginParam& TransformerParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& TransformerParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TransformerParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* TransformerParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.TransformerParam.plugin_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* TransformerParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* TransformerParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TransformerParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void TransformerParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.TransformerParam.plugin_param)
}

// -------------------------------------------------------------------

// PostprocessorParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool PostprocessorParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool PostprocessorParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void PostprocessorParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::PluginParam& PostprocessorParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& PostprocessorParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PostprocessorParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* PostprocessorParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PostprocessorParam.plugin_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* PostprocessorParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* PostprocessorParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PostprocessorParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void PostprocessorParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PostprocessorParam.plugin_param)
}

// -------------------------------------------------------------------

// FeatureParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool FeatureParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool FeatureParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void FeatureParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::PluginParam& FeatureParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& FeatureParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.FeatureParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* FeatureParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.FeatureParam.plugin_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* FeatureParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* FeatureParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.FeatureParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void FeatureParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.FeatureParam.plugin_param)
}

// -------------------------------------------------------------------

// DebugParam

// optional string detection_out_dir = 1;
inline bool DebugParam::_internal_has_detection_out_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DebugParam::has_detection_out_dir() const {
  return _internal_has_detection_out_dir();
}
inline void DebugParam::clear_detection_out_dir() {
  detection_out_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DebugParam::detection_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.detection_out_dir)
  return _internal_detection_out_dir();
}
inline void DebugParam::set_detection_out_dir(const std::string& value) {
  _internal_set_detection_out_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline std::string* DebugParam::mutable_detection_out_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.detection_out_dir)
  return _internal_mutable_detection_out_dir();
}
inline const std::string& DebugParam::_internal_detection_out_dir() const {
  return detection_out_dir_.GetNoArena();
}
inline void DebugParam::_internal_set_detection_out_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  detection_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_detection_out_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  detection_out_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline void DebugParam::set_detection_out_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  detection_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline void DebugParam::set_detection_out_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  detection_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.detection_out_dir)
}
inline std::string* DebugParam::_internal_mutable_detection_out_dir() {
  _has_bits_[0] |= 0x00000001u;
  return detection_out_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_detection_out_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.detection_out_dir)
  if (!_internal_has_detection_out_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return detection_out_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_detection_out_dir(std::string* detection_out_dir) {
  if (detection_out_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  detection_out_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detection_out_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.detection_out_dir)
}

// optional string tracked_detection_out_dir = 2;
inline bool DebugParam::_internal_has_tracked_detection_out_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DebugParam::has_tracked_detection_out_dir() const {
  return _internal_has_tracked_detection_out_dir();
}
inline void DebugParam::clear_tracked_detection_out_dir() {
  tracked_detection_out_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DebugParam::tracked_detection_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
  return _internal_tracked_detection_out_dir();
}
inline void DebugParam::set_tracked_detection_out_dir(const std::string& value) {
  _internal_set_tracked_detection_out_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline std::string* DebugParam::mutable_tracked_detection_out_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
  return _internal_mutable_tracked_detection_out_dir();
}
inline const std::string& DebugParam::_internal_tracked_detection_out_dir() const {
  return tracked_detection_out_dir_.GetNoArena();
}
inline void DebugParam::_internal_set_tracked_detection_out_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tracked_detection_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_tracked_detection_out_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tracked_detection_out_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline void DebugParam::set_tracked_detection_out_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tracked_detection_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline void DebugParam::set_tracked_detection_out_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tracked_detection_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}
inline std::string* DebugParam::_internal_mutable_tracked_detection_out_dir() {
  _has_bits_[0] |= 0x00000002u;
  return tracked_detection_out_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_tracked_detection_out_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
  if (!_internal_has_tracked_detection_out_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tracked_detection_out_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_tracked_detection_out_dir(std::string* tracked_detection_out_dir) {
  if (tracked_detection_out_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tracked_detection_out_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracked_detection_out_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.tracked_detection_out_dir)
}

// optional string track_out_file = 3;
inline bool DebugParam::_internal_has_track_out_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DebugParam::has_track_out_file() const {
  return _internal_has_track_out_file();
}
inline void DebugParam::clear_track_out_file() {
  track_out_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DebugParam::track_out_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.track_out_file)
  return _internal_track_out_file();
}
inline void DebugParam::set_track_out_file(const std::string& value) {
  _internal_set_track_out_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline std::string* DebugParam::mutable_track_out_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.track_out_file)
  return _internal_mutable_track_out_file();
}
inline const std::string& DebugParam::_internal_track_out_file() const {
  return track_out_file_.GetNoArena();
}
inline void DebugParam::_internal_set_track_out_file(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  track_out_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_track_out_file(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  track_out_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline void DebugParam::set_track_out_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  track_out_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline void DebugParam::set_track_out_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  track_out_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.track_out_file)
}
inline std::string* DebugParam::_internal_mutable_track_out_file() {
  _has_bits_[0] |= 0x00000004u;
  return track_out_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_track_out_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.track_out_file)
  if (!_internal_has_track_out_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return track_out_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_track_out_file(std::string* track_out_file) {
  if (track_out_file != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  track_out_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_out_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.track_out_file)
}

// optional string detect_feature_dir = 4;
inline bool DebugParam::_internal_has_detect_feature_dir() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DebugParam::has_detect_feature_dir() const {
  return _internal_has_detect_feature_dir();
}
inline void DebugParam::clear_detect_feature_dir() {
  detect_feature_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DebugParam::detect_feature_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.detect_feature_dir)
  return _internal_detect_feature_dir();
}
inline void DebugParam::set_detect_feature_dir(const std::string& value) {
  _internal_set_detect_feature_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline std::string* DebugParam::mutable_detect_feature_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.detect_feature_dir)
  return _internal_mutable_detect_feature_dir();
}
inline const std::string& DebugParam::_internal_detect_feature_dir() const {
  return detect_feature_dir_.GetNoArena();
}
inline void DebugParam::_internal_set_detect_feature_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  detect_feature_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_detect_feature_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  detect_feature_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline void DebugParam::set_detect_feature_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  detect_feature_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline void DebugParam::set_detect_feature_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  detect_feature_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}
inline std::string* DebugParam::_internal_mutable_detect_feature_dir() {
  _has_bits_[0] |= 0x00000008u;
  return detect_feature_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_detect_feature_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.detect_feature_dir)
  if (!_internal_has_detect_feature_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return detect_feature_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_detect_feature_dir(std::string* detect_feature_dir) {
  if (detect_feature_dir != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  detect_feature_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detect_feature_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.detect_feature_dir)
}

// optional string lane_out_dir = 5;
inline bool DebugParam::_internal_has_lane_out_dir() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DebugParam::has_lane_out_dir() const {
  return _internal_has_lane_out_dir();
}
inline void DebugParam::clear_lane_out_dir() {
  lane_out_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DebugParam::lane_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.lane_out_dir)
  return _internal_lane_out_dir();
}
inline void DebugParam::set_lane_out_dir(const std::string& value) {
  _internal_set_lane_out_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline std::string* DebugParam::mutable_lane_out_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.lane_out_dir)
  return _internal_mutable_lane_out_dir();
}
inline const std::string& DebugParam::_internal_lane_out_dir() const {
  return lane_out_dir_.GetNoArena();
}
inline void DebugParam::_internal_set_lane_out_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  lane_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_lane_out_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  lane_out_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline void DebugParam::set_lane_out_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  lane_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline void DebugParam::set_lane_out_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  lane_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.lane_out_dir)
}
inline std::string* DebugParam::_internal_mutable_lane_out_dir() {
  _has_bits_[0] |= 0x00000010u;
  return lane_out_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_lane_out_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.lane_out_dir)
  if (!_internal_has_lane_out_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return lane_out_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_lane_out_dir(std::string* lane_out_dir) {
  if (lane_out_dir != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lane_out_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_out_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.lane_out_dir)
}

// optional string camera2world_out_file = 6;
inline bool DebugParam::_internal_has_camera2world_out_file() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DebugParam::has_camera2world_out_file() const {
  return _internal_has_camera2world_out_file();
}
inline void DebugParam::clear_camera2world_out_file() {
  camera2world_out_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DebugParam::camera2world_out_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.camera2world_out_file)
  return _internal_camera2world_out_file();
}
inline void DebugParam::set_camera2world_out_file(const std::string& value) {
  _internal_set_camera2world_out_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline std::string* DebugParam::mutable_camera2world_out_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.camera2world_out_file)
  return _internal_mutable_camera2world_out_file();
}
inline const std::string& DebugParam::_internal_camera2world_out_file() const {
  return camera2world_out_file_.GetNoArena();
}
inline void DebugParam::_internal_set_camera2world_out_file(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  camera2world_out_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_camera2world_out_file(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  camera2world_out_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline void DebugParam::set_camera2world_out_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  camera2world_out_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline void DebugParam::set_camera2world_out_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  camera2world_out_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}
inline std::string* DebugParam::_internal_mutable_camera2world_out_file() {
  _has_bits_[0] |= 0x00000020u;
  return camera2world_out_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_camera2world_out_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.camera2world_out_file)
  if (!_internal_has_camera2world_out_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return camera2world_out_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_camera2world_out_file(std::string* camera2world_out_file) {
  if (camera2world_out_file != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  camera2world_out_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera2world_out_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.camera2world_out_file)
}

// optional string calibration_out_dir = 7;
inline bool DebugParam::_internal_has_calibration_out_dir() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DebugParam::has_calibration_out_dir() const {
  return _internal_has_calibration_out_dir();
}
inline void DebugParam::clear_calibration_out_dir() {
  calibration_out_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DebugParam::calibration_out_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.DebugParam.calibration_out_dir)
  return _internal_calibration_out_dir();
}
inline void DebugParam::set_calibration_out_dir(const std::string& value) {
  _internal_set_calibration_out_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline std::string* DebugParam::mutable_calibration_out_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.DebugParam.calibration_out_dir)
  return _internal_mutable_calibration_out_dir();
}
inline const std::string& DebugParam::_internal_calibration_out_dir() const {
  return calibration_out_dir_.GetNoArena();
}
inline void DebugParam::_internal_set_calibration_out_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  calibration_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugParam::set_calibration_out_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  calibration_out_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline void DebugParam::set_calibration_out_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  calibration_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline void DebugParam::set_calibration_out_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  calibration_out_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}
inline std::string* DebugParam::_internal_mutable_calibration_out_dir() {
  _has_bits_[0] |= 0x00000040u;
  return calibration_out_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugParam::release_calibration_out_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.DebugParam.calibration_out_dir)
  if (!_internal_has_calibration_out_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return calibration_out_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugParam::set_allocated_calibration_out_dir(std::string* calibration_out_dir) {
  if (calibration_out_dir != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  calibration_out_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calibration_out_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.DebugParam.calibration_out_dir)
}

// -------------------------------------------------------------------

// LanePerceptionParam

// optional .apollo.perception.camera.app.DetectorParam lane_detector_param = 1;
inline bool LanePerceptionParam::_internal_has_lane_detector_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lane_detector_param_ != nullptr);
  return value;
}
inline bool LanePerceptionParam::has_lane_detector_param() const {
  return _internal_has_lane_detector_param();
}
inline void LanePerceptionParam::clear_lane_detector_param() {
  if (lane_detector_param_ != nullptr) lane_detector_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::DetectorParam& LanePerceptionParam::_internal_lane_detector_param() const {
  const ::apollo::perception::camera::app::DetectorParam* p = lane_detector_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::DetectorParam*>(
      &::apollo::perception::camera::app::_DetectorParam_default_instance_);
}
inline const ::apollo::perception::camera::app::DetectorParam& LanePerceptionParam::lane_detector_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
  return _internal_lane_detector_param();
}
inline ::apollo::perception::camera::app::DetectorParam* LanePerceptionParam::release_lane_detector_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::DetectorParam* temp = lane_detector_param_;
  lane_detector_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::DetectorParam* LanePerceptionParam::_internal_mutable_lane_detector_param() {
  _has_bits_[0] |= 0x00000001u;
  if (lane_detector_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::DetectorParam>(GetArenaNoVirtual());
    lane_detector_param_ = p;
  }
  return lane_detector_param_;
}
inline ::apollo::perception::camera::app::DetectorParam* LanePerceptionParam::mutable_lane_detector_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
  return _internal_mutable_lane_detector_param();
}
inline void LanePerceptionParam::set_allocated_lane_detector_param(::apollo::perception::camera::app::DetectorParam* lane_detector_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_detector_param_;
  }
  if (lane_detector_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_detector_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_detector_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lane_detector_param_ = lane_detector_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.LanePerceptionParam.lane_detector_param)
}

// optional .apollo.perception.camera.app.PluginParam lane_postprocessor_param = 2;
inline bool LanePerceptionParam::_internal_has_lane_postprocessor_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lane_postprocessor_param_ != nullptr);
  return value;
}
inline bool LanePerceptionParam::has_lane_postprocessor_param() const {
  return _internal_has_lane_postprocessor_param();
}
inline void LanePerceptionParam::clear_lane_postprocessor_param() {
  if (lane_postprocessor_param_ != nullptr) lane_postprocessor_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::app::PluginParam& LanePerceptionParam::_internal_lane_postprocessor_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = lane_postprocessor_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& LanePerceptionParam::lane_postprocessor_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
  return _internal_lane_postprocessor_param();
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::release_lane_postprocessor_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::app::PluginParam* temp = lane_postprocessor_param_;
  lane_postprocessor_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::_internal_mutable_lane_postprocessor_param() {
  _has_bits_[0] |= 0x00000002u;
  if (lane_postprocessor_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    lane_postprocessor_param_ = p;
  }
  return lane_postprocessor_param_;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::mutable_lane_postprocessor_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
  return _internal_mutable_lane_postprocessor_param();
}
inline void LanePerceptionParam::set_allocated_lane_postprocessor_param(::apollo::perception::camera::app::PluginParam* lane_postprocessor_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_postprocessor_param_;
  }
  if (lane_postprocessor_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_postprocessor_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_postprocessor_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lane_postprocessor_param_ = lane_postprocessor_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.LanePerceptionParam.lane_postprocessor_param)
}

// optional .apollo.perception.camera.app.PluginParam lane_tracker_param = 3;
inline bool LanePerceptionParam::_internal_has_lane_tracker_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lane_tracker_param_ != nullptr);
  return value;
}
inline bool LanePerceptionParam::has_lane_tracker_param() const {
  return _internal_has_lane_tracker_param();
}
inline void LanePerceptionParam::clear_lane_tracker_param() {
  if (lane_tracker_param_ != nullptr) lane_tracker_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::camera::app::PluginParam& LanePerceptionParam::_internal_lane_tracker_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = lane_tracker_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& LanePerceptionParam::lane_tracker_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
  return _internal_lane_tracker_param();
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::release_lane_tracker_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::app::PluginParam* temp = lane_tracker_param_;
  lane_tracker_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::_internal_mutable_lane_tracker_param() {
  _has_bits_[0] |= 0x00000004u;
  if (lane_tracker_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    lane_tracker_param_ = p;
  }
  return lane_tracker_param_;
}
inline ::apollo::perception::camera::app::PluginParam* LanePerceptionParam::mutable_lane_tracker_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
  return _internal_mutable_lane_tracker_param();
}
inline void LanePerceptionParam::set_allocated_lane_tracker_param(::apollo::perception::camera::app::PluginParam* lane_tracker_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_tracker_param_;
  }
  if (lane_tracker_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_tracker_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_tracker_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lane_tracker_param_ = lane_tracker_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.LanePerceptionParam.lane_tracker_param)
}

// optional int32 gpu_id = 4;
inline bool LanePerceptionParam::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LanePerceptionParam::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void LanePerceptionParam::clear_gpu_id() {
  gpu_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LanePerceptionParam::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LanePerceptionParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.LanePerceptionParam.gpu_id)
  return _internal_gpu_id();
}
inline void LanePerceptionParam::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gpu_id_ = value;
}
inline void LanePerceptionParam::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.LanePerceptionParam.gpu_id)
}

// -------------------------------------------------------------------

// CalibrationServiceParam

// optional string calibrator_method = 2;
inline bool CalibrationServiceParam::_internal_has_calibrator_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CalibrationServiceParam::has_calibrator_method() const {
  return _internal_has_calibrator_method();
}
inline void CalibrationServiceParam::clear_calibrator_method() {
  calibrator_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CalibrationServiceParam::calibrator_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
  return _internal_calibrator_method();
}
inline void CalibrationServiceParam::set_calibrator_method(const std::string& value) {
  _internal_set_calibrator_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline std::string* CalibrationServiceParam::mutable_calibrator_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
  return _internal_mutable_calibrator_method();
}
inline const std::string& CalibrationServiceParam::_internal_calibrator_method() const {
  return calibrator_method_.GetNoArena();
}
inline void CalibrationServiceParam::_internal_set_calibrator_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  calibrator_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CalibrationServiceParam::set_calibrator_method(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  calibrator_method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline void CalibrationServiceParam::set_calibrator_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  calibrator_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline void CalibrationServiceParam::set_calibrator_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  calibrator_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}
inline std::string* CalibrationServiceParam::_internal_mutable_calibrator_method() {
  _has_bits_[0] |= 0x00000001u;
  return calibrator_method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalibrationServiceParam::release_calibrator_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
  if (!_internal_has_calibrator_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return calibrator_method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationServiceParam::set_allocated_calibrator_method(std::string* calibrator_method) {
  if (calibrator_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  calibrator_method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calibrator_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.CalibrationServiceParam.calibrator_method)
}

// optional .apollo.perception.camera.app.PluginParam plugin_param = 3;
inline bool CalibrationServiceParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool CalibrationServiceParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void CalibrationServiceParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::app::PluginParam& CalibrationServiceParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& CalibrationServiceParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* CalibrationServiceParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* CalibrationServiceParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000002u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* CalibrationServiceParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void CalibrationServiceParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.CalibrationServiceParam.plugin_param)
}

// -------------------------------------------------------------------

// ObjectTemplateParam

// optional .apollo.perception.camera.app.PluginParam plugin_param = 1;
inline bool ObjectTemplateParam::_internal_has_plugin_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plugin_param_ != nullptr);
  return value;
}
inline bool ObjectTemplateParam::has_plugin_param() const {
  return _internal_has_plugin_param();
}
inline void ObjectTemplateParam::clear_plugin_param() {
  if (plugin_param_ != nullptr) plugin_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::PluginParam& ObjectTemplateParam::_internal_plugin_param() const {
  const ::apollo::perception::camera::app::PluginParam* p = plugin_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PluginParam*>(
      &::apollo::perception::camera::app::_PluginParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PluginParam& ObjectTemplateParam::plugin_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
  return _internal_plugin_param();
}
inline ::apollo::perception::camera::app::PluginParam* ObjectTemplateParam::release_plugin_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::PluginParam* temp = plugin_param_;
  plugin_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PluginParam* ObjectTemplateParam::_internal_mutable_plugin_param() {
  _has_bits_[0] |= 0x00000001u;
  if (plugin_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PluginParam>(GetArenaNoVirtual());
    plugin_param_ = p;
  }
  return plugin_param_;
}
inline ::apollo::perception::camera::app::PluginParam* ObjectTemplateParam::mutable_plugin_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
  return _internal_mutable_plugin_param();
}
inline void ObjectTemplateParam::set_allocated_plugin_param(::apollo::perception::camera::app::PluginParam* plugin_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_param_;
  }
  if (plugin_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_param_ = plugin_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.ObjectTemplateParam.plugin_param)
}

// -------------------------------------------------------------------

// PerceptionParam

// repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
inline int PerceptionParam::_internal_detector_param_size() const {
  return detector_param_.size();
}
inline int PerceptionParam::detector_param_size() const {
  return _internal_detector_param_size();
}
inline void PerceptionParam::clear_detector_param() {
  detector_param_.Clear();
}
inline ::apollo::perception::camera::app::DetectorParam* PerceptionParam::mutable_detector_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.detector_param)
  return detector_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
PerceptionParam::mutable_detector_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.app.PerceptionParam.detector_param)
  return &detector_param_;
}
inline const ::apollo::perception::camera::app::DetectorParam& PerceptionParam::_internal_detector_param(int index) const {
  return detector_param_.Get(index);
}
inline const ::apollo::perception::camera::app::DetectorParam& PerceptionParam::detector_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.detector_param)
  return _internal_detector_param(index);
}
inline ::apollo::perception::camera::app::DetectorParam* PerceptionParam::_internal_add_detector_param() {
  return detector_param_.Add();
}
inline ::apollo::perception::camera::app::DetectorParam* PerceptionParam::add_detector_param() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.app.PerceptionParam.detector_param)
  return _internal_add_detector_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
PerceptionParam::detector_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.app.PerceptionParam.detector_param)
  return detector_param_;
}

// optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
inline bool PerceptionParam::_internal_has_tracker_param() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tracker_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_tracker_param() const {
  return _internal_has_tracker_param();
}
inline void PerceptionParam::clear_tracker_param() {
  if (tracker_param_ != nullptr) tracker_param_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::camera::app::TrackerParam& PerceptionParam::_internal_tracker_param() const {
  const ::apollo::perception::camera::app::TrackerParam* p = tracker_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::TrackerParam*>(
      &::apollo::perception::camera::app::_TrackerParam_default_instance_);
}
inline const ::apollo::perception::camera::app::TrackerParam& PerceptionParam::tracker_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.tracker_param)
  return _internal_tracker_param();
}
inline ::apollo::perception::camera::app::TrackerParam* PerceptionParam::release_tracker_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.tracker_param)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::camera::app::TrackerParam* temp = tracker_param_;
  tracker_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::TrackerParam* PerceptionParam::_internal_mutable_tracker_param() {
  _has_bits_[0] |= 0x00000002u;
  if (tracker_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::TrackerParam>(GetArenaNoVirtual());
    tracker_param_ = p;
  }
  return tracker_param_;
}
inline ::apollo::perception::camera::app::TrackerParam* PerceptionParam::mutable_tracker_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.tracker_param)
  return _internal_mutable_tracker_param();
}
inline void PerceptionParam::set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tracker_param_;
  }
  if (tracker_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracker_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tracker_param_ = tracker_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.tracker_param)
}

// optional .apollo.perception.camera.app.TransformerParam transformer_param = 3;
inline bool PerceptionParam::_internal_has_transformer_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || transformer_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_transformer_param() const {
  return _internal_has_transformer_param();
}
inline void PerceptionParam::clear_transformer_param() {
  if (transformer_param_ != nullptr) transformer_param_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::camera::app::TransformerParam& PerceptionParam::_internal_transformer_param() const {
  const ::apollo::perception::camera::app::TransformerParam* p = transformer_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::TransformerParam*>(
      &::apollo::perception::camera::app::_TransformerParam_default_instance_);
}
inline const ::apollo::perception::camera::app::TransformerParam& PerceptionParam::transformer_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.transformer_param)
  return _internal_transformer_param();
}
inline ::apollo::perception::camera::app::TransformerParam* PerceptionParam::release_transformer_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.transformer_param)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::app::TransformerParam* temp = transformer_param_;
  transformer_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::TransformerParam* PerceptionParam::_internal_mutable_transformer_param() {
  _has_bits_[0] |= 0x00000004u;
  if (transformer_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::TransformerParam>(GetArenaNoVirtual());
    transformer_param_ = p;
  }
  return transformer_param_;
}
inline ::apollo::perception::camera::app::TransformerParam* PerceptionParam::mutable_transformer_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.transformer_param)
  return _internal_mutable_transformer_param();
}
inline void PerceptionParam::set_allocated_transformer_param(::apollo::perception::camera::app::TransformerParam* transformer_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transformer_param_;
  }
  if (transformer_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transformer_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  transformer_param_ = transformer_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.transformer_param)
}

// optional .apollo.perception.camera.app.PostprocessorParam postprocessor_param = 4;
inline bool PerceptionParam::_internal_has_postprocessor_param() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || postprocessor_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_postprocessor_param() const {
  return _internal_has_postprocessor_param();
}
inline void PerceptionParam::clear_postprocessor_param() {
  if (postprocessor_param_ != nullptr) postprocessor_param_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::camera::app::PostprocessorParam& PerceptionParam::_internal_postprocessor_param() const {
  const ::apollo::perception::camera::app::PostprocessorParam* p = postprocessor_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::PostprocessorParam*>(
      &::apollo::perception::camera::app::_PostprocessorParam_default_instance_);
}
inline const ::apollo::perception::camera::app::PostprocessorParam& PerceptionParam::postprocessor_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
  return _internal_postprocessor_param();
}
inline ::apollo::perception::camera::app::PostprocessorParam* PerceptionParam::release_postprocessor_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::camera::app::PostprocessorParam* temp = postprocessor_param_;
  postprocessor_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::PostprocessorParam* PerceptionParam::_internal_mutable_postprocessor_param() {
  _has_bits_[0] |= 0x00000008u;
  if (postprocessor_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::PostprocessorParam>(GetArenaNoVirtual());
    postprocessor_param_ = p;
  }
  return postprocessor_param_;
}
inline ::apollo::perception::camera::app::PostprocessorParam* PerceptionParam::mutable_postprocessor_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
  return _internal_mutable_postprocessor_param();
}
inline void PerceptionParam::set_allocated_postprocessor_param(::apollo::perception::camera::app::PostprocessorParam* postprocessor_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete postprocessor_param_;
  }
  if (postprocessor_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      postprocessor_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postprocessor_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  postprocessor_param_ = postprocessor_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.postprocessor_param)
}

// optional int32 gpu_id = 5;
inline bool PerceptionParam::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerceptionParam::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void PerceptionParam::clear_gpu_id() {
  gpu_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerceptionParam::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerceptionParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.gpu_id)
  return _internal_gpu_id();
}
inline void PerceptionParam::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  gpu_id_ = value;
}
inline void PerceptionParam::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PerceptionParam.gpu_id)
}

// optional string camera_intrinsics = 6;
inline bool PerceptionParam::_internal_has_camera_intrinsics() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerceptionParam::has_camera_intrinsics() const {
  return _internal_has_camera_intrinsics();
}
inline void PerceptionParam::clear_camera_intrinsics() {
  camera_intrinsics_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerceptionParam::camera_intrinsics() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
  return _internal_camera_intrinsics();
}
inline void PerceptionParam::set_camera_intrinsics(const std::string& value) {
  _internal_set_camera_intrinsics(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline std::string* PerceptionParam::mutable_camera_intrinsics() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
  return _internal_mutable_camera_intrinsics();
}
inline const std::string& PerceptionParam::_internal_camera_intrinsics() const {
  return camera_intrinsics_.GetNoArena();
}
inline void PerceptionParam::_internal_set_camera_intrinsics(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_intrinsics_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerceptionParam::set_camera_intrinsics(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_intrinsics_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline void PerceptionParam::set_camera_intrinsics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_intrinsics_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline void PerceptionParam::set_camera_intrinsics(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_intrinsics_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}
inline std::string* PerceptionParam::_internal_mutable_camera_intrinsics() {
  _has_bits_[0] |= 0x00000001u;
  return camera_intrinsics_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerceptionParam::release_camera_intrinsics() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
  if (!_internal_has_camera_intrinsics()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_intrinsics_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerceptionParam::set_allocated_camera_intrinsics(std::string* camera_intrinsics) {
  if (camera_intrinsics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_intrinsics_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_intrinsics);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.camera_intrinsics)
}

// optional .apollo.perception.camera.app.FeatureParam feature_param = 7;
inline bool PerceptionParam::_internal_has_feature_param() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || feature_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_feature_param() const {
  return _internal_has_feature_param();
}
inline void PerceptionParam::clear_feature_param() {
  if (feature_param_ != nullptr) feature_param_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::camera::app::FeatureParam& PerceptionParam::_internal_feature_param() const {
  const ::apollo::perception::camera::app::FeatureParam* p = feature_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::FeatureParam*>(
      &::apollo::perception::camera::app::_FeatureParam_default_instance_);
}
inline const ::apollo::perception::camera::app::FeatureParam& PerceptionParam::feature_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.feature_param)
  return _internal_feature_param();
}
inline ::apollo::perception::camera::app::FeatureParam* PerceptionParam::release_feature_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.feature_param)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::camera::app::FeatureParam* temp = feature_param_;
  feature_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::FeatureParam* PerceptionParam::_internal_mutable_feature_param() {
  _has_bits_[0] |= 0x00000010u;
  if (feature_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::FeatureParam>(GetArenaNoVirtual());
    feature_param_ = p;
  }
  return feature_param_;
}
inline ::apollo::perception::camera::app::FeatureParam* PerceptionParam::mutable_feature_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.feature_param)
  return _internal_mutable_feature_param();
}
inline void PerceptionParam::set_allocated_feature_param(::apollo::perception::camera::app::FeatureParam* feature_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete feature_param_;
  }
  if (feature_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feature_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  feature_param_ = feature_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.feature_param)
}

// optional .apollo.perception.camera.app.LanePerceptionParam lane_param = 8;
inline bool PerceptionParam::_internal_has_lane_param() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || lane_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_lane_param() const {
  return _internal_has_lane_param();
}
inline void PerceptionParam::clear_lane_param() {
  if (lane_param_ != nullptr) lane_param_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::camera::app::LanePerceptionParam& PerceptionParam::_internal_lane_param() const {
  const ::apollo::perception::camera::app::LanePerceptionParam* p = lane_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::LanePerceptionParam*>(
      &::apollo::perception::camera::app::_LanePerceptionParam_default_instance_);
}
inline const ::apollo::perception::camera::app::LanePerceptionParam& PerceptionParam::lane_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.lane_param)
  return _internal_lane_param();
}
inline ::apollo::perception::camera::app::LanePerceptionParam* PerceptionParam::release_lane_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.lane_param)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::camera::app::LanePerceptionParam* temp = lane_param_;
  lane_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::LanePerceptionParam* PerceptionParam::_internal_mutable_lane_param() {
  _has_bits_[0] |= 0x00000020u;
  if (lane_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::LanePerceptionParam>(GetArenaNoVirtual());
    lane_param_ = p;
  }
  return lane_param_;
}
inline ::apollo::perception::camera::app::LanePerceptionParam* PerceptionParam::mutable_lane_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.lane_param)
  return _internal_mutable_lane_param();
}
inline void PerceptionParam::set_allocated_lane_param(::apollo::perception::camera::app::LanePerceptionParam* lane_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_param_;
  }
  if (lane_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lane_param_ = lane_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.lane_param)
}

// optional .apollo.perception.camera.app.CalibrationServiceParam calibration_service_param = 9;
inline bool PerceptionParam::_internal_has_calibration_service_param() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || calibration_service_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_calibration_service_param() const {
  return _internal_has_calibration_service_param();
}
inline void PerceptionParam::clear_calibration_service_param() {
  if (calibration_service_param_ != nullptr) calibration_service_param_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::perception::camera::app::CalibrationServiceParam& PerceptionParam::_internal_calibration_service_param() const {
  const ::apollo::perception::camera::app::CalibrationServiceParam* p = calibration_service_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::CalibrationServiceParam*>(
      &::apollo::perception::camera::app::_CalibrationServiceParam_default_instance_);
}
inline const ::apollo::perception::camera::app::CalibrationServiceParam& PerceptionParam::calibration_service_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
  return _internal_calibration_service_param();
}
inline ::apollo::perception::camera::app::CalibrationServiceParam* PerceptionParam::release_calibration_service_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::perception::camera::app::CalibrationServiceParam* temp = calibration_service_param_;
  calibration_service_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::CalibrationServiceParam* PerceptionParam::_internal_mutable_calibration_service_param() {
  _has_bits_[0] |= 0x00000040u;
  if (calibration_service_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::CalibrationServiceParam>(GetArenaNoVirtual());
    calibration_service_param_ = p;
  }
  return calibration_service_param_;
}
inline ::apollo::perception::camera::app::CalibrationServiceParam* PerceptionParam::mutable_calibration_service_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
  return _internal_mutable_calibration_service_param();
}
inline void PerceptionParam::set_allocated_calibration_service_param(::apollo::perception::camera::app::CalibrationServiceParam* calibration_service_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete calibration_service_param_;
  }
  if (calibration_service_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calibration_service_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_service_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  calibration_service_param_ = calibration_service_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.calibration_service_param)
}

// optional .apollo.perception.camera.app.DebugParam debug_param = 10;
inline bool PerceptionParam::_internal_has_debug_param() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || debug_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_debug_param() const {
  return _internal_has_debug_param();
}
inline void PerceptionParam::clear_debug_param() {
  if (debug_param_ != nullptr) debug_param_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::perception::camera::app::DebugParam& PerceptionParam::_internal_debug_param() const {
  const ::apollo::perception::camera::app::DebugParam* p = debug_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::DebugParam*>(
      &::apollo::perception::camera::app::_DebugParam_default_instance_);
}
inline const ::apollo::perception::camera::app::DebugParam& PerceptionParam::debug_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.debug_param)
  return _internal_debug_param();
}
inline ::apollo::perception::camera::app::DebugParam* PerceptionParam::release_debug_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.debug_param)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::perception::camera::app::DebugParam* temp = debug_param_;
  debug_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::DebugParam* PerceptionParam::_internal_mutable_debug_param() {
  _has_bits_[0] |= 0x00000080u;
  if (debug_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::DebugParam>(GetArenaNoVirtual());
    debug_param_ = p;
  }
  return debug_param_;
}
inline ::apollo::perception::camera::app::DebugParam* PerceptionParam::mutable_debug_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.debug_param)
  return _internal_mutable_debug_param();
}
inline void PerceptionParam::set_allocated_debug_param(::apollo::perception::camera::app::DebugParam* debug_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debug_param_;
  }
  if (debug_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  debug_param_ = debug_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.debug_param)
}

// optional .apollo.perception.camera.app.ObjectTemplateParam object_template_param = 11;
inline bool PerceptionParam::_internal_has_object_template_param() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || object_template_param_ != nullptr);
  return value;
}
inline bool PerceptionParam::has_object_template_param() const {
  return _internal_has_object_template_param();
}
inline void PerceptionParam::clear_object_template_param() {
  if (object_template_param_ != nullptr) object_template_param_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::perception::camera::app::ObjectTemplateParam& PerceptionParam::_internal_object_template_param() const {
  const ::apollo::perception::camera::app::ObjectTemplateParam* p = object_template_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::ObjectTemplateParam*>(
      &::apollo::perception::camera::app::_ObjectTemplateParam_default_instance_);
}
inline const ::apollo::perception::camera::app::ObjectTemplateParam& PerceptionParam::object_template_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.PerceptionParam.object_template_param)
  return _internal_object_template_param();
}
inline ::apollo::perception::camera::app::ObjectTemplateParam* PerceptionParam::release_object_template_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.PerceptionParam.object_template_param)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::perception::camera::app::ObjectTemplateParam* temp = object_template_param_;
  object_template_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::ObjectTemplateParam* PerceptionParam::_internal_mutable_object_template_param() {
  _has_bits_[0] |= 0x00000100u;
  if (object_template_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::ObjectTemplateParam>(GetArenaNoVirtual());
    object_template_param_ = p;
  }
  return object_template_param_;
}
inline ::apollo::perception::camera::app::ObjectTemplateParam* PerceptionParam::mutable_object_template_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.PerceptionParam.object_template_param)
  return _internal_mutable_object_template_param();
}
inline void PerceptionParam::set_allocated_object_template_param(::apollo::perception::camera::app::ObjectTemplateParam* object_template_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete object_template_param_;
  }
  if (object_template_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_template_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_template_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  object_template_param_ = object_template_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.PerceptionParam.object_template_param)
}

// -------------------------------------------------------------------

// TrafficLightParam

// repeated .apollo.perception.camera.app.DetectorParam detector_param = 1;
inline int TrafficLightParam::_internal_detector_param_size() const {
  return detector_param_.size();
}
inline int TrafficLightParam::detector_param_size() const {
  return _internal_detector_param_size();
}
inline void TrafficLightParam::clear_detector_param() {
  detector_param_.Clear();
}
inline ::apollo::perception::camera::app::DetectorParam* TrafficLightParam::mutable_detector_param(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return detector_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >*
TrafficLightParam::mutable_detector_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return &detector_param_;
}
inline const ::apollo::perception::camera::app::DetectorParam& TrafficLightParam::_internal_detector_param(int index) const {
  return detector_param_.Get(index);
}
inline const ::apollo::perception::camera::app::DetectorParam& TrafficLightParam::detector_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return _internal_detector_param(index);
}
inline ::apollo::perception::camera::app::DetectorParam* TrafficLightParam::_internal_add_detector_param() {
  return detector_param_.Add();
}
inline ::apollo::perception::camera::app::DetectorParam* TrafficLightParam::add_detector_param() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return _internal_add_detector_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::app::DetectorParam >&
TrafficLightParam::detector_param() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.app.TrafficLightParam.detector_param)
  return detector_param_;
}

// optional .apollo.perception.camera.app.TrackerParam tracker_param = 2;
inline bool TrafficLightParam::_internal_has_tracker_param() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tracker_param_ != nullptr);
  return value;
}
inline bool TrafficLightParam::has_tracker_param() const {
  return _internal_has_tracker_param();
}
inline void TrafficLightParam::clear_tracker_param() {
  if (tracker_param_ != nullptr) tracker_param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::camera::app::TrackerParam& TrafficLightParam::_internal_tracker_param() const {
  const ::apollo::perception::camera::app::TrackerParam* p = tracker_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::camera::app::TrackerParam*>(
      &::apollo::perception::camera::app::_TrackerParam_default_instance_);
}
inline const ::apollo::perception::camera::app::TrackerParam& TrafficLightParam::tracker_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrafficLightParam.tracker_param)
  return _internal_tracker_param();
}
inline ::apollo::perception::camera::app::TrackerParam* TrafficLightParam::release_tracker_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.app.TrafficLightParam.tracker_param)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::camera::app::TrackerParam* temp = tracker_param_;
  tracker_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::app::TrackerParam* TrafficLightParam::_internal_mutable_tracker_param() {
  _has_bits_[0] |= 0x00000001u;
  if (tracker_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::app::TrackerParam>(GetArenaNoVirtual());
    tracker_param_ = p;
  }
  return tracker_param_;
}
inline ::apollo::perception::camera::app::TrackerParam* TrafficLightParam::mutable_tracker_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.app.TrafficLightParam.tracker_param)
  return _internal_mutable_tracker_param();
}
inline void TrafficLightParam::set_allocated_tracker_param(::apollo::perception::camera::app::TrackerParam* tracker_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tracker_param_;
  }
  if (tracker_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tracker_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracker_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tracker_param_ = tracker_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.app.TrafficLightParam.tracker_param)
}

// optional int32 gpu_id = 3;
inline bool TrafficLightParam::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficLightParam::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void TrafficLightParam::clear_gpu_id() {
  gpu_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightParam::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLightParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.app.TrafficLightParam.gpu_id)
  return _internal_gpu_id();
}
inline void TrafficLightParam::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  gpu_id_ = value;
}
inline void TrafficLightParam::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.app.TrafficLightParam.gpu_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace camera
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fcamera_2fapp_2fperception_2eproto
