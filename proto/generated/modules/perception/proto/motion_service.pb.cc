// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/motion_service.proto

#include "modules/perception/proto/motion_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fmotion_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fmotion_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto;
namespace apollo {
namespace perception {
class MotionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionType> _instance;
} _MotionType_default_instance_;
class VehicleStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleStatus> _instance;
} _VehicleStatus_default_instance_;
class Motion_ServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Motion_Service> _instance;
} _Motion_Service_default_instance_;
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_MotionType_default_instance_;
    new (ptr) ::apollo::perception::MotionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::MotionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_Motion_Service_modules_2fperception_2fproto_2fmotion_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_Motion_Service_default_instance_;
    new (ptr) ::apollo::perception::Motion_Service();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::Motion_Service::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Motion_Service_modules_2fperception_2fproto_2fmotion_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Motion_Service_modules_2fperception_2fproto_2fmotion_5fservice_2eproto}, {
      &scc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base,
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_VehicleStatus_default_instance_;
    new (ptr) ::apollo::perception::VehicleStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::VehicleStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto}, {
      &scc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m00_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m01_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m02_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m03_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m10_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m11_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m12_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m13_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m20_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m21_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m22_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m23_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m30_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m31_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m32_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MotionType, m33_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, roll_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, pitch_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, velocity_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, velocity_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, velocity_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, time_ts_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, time_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::VehicleStatus, motion_),
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, vehicle_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::Motion_Service, header_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::apollo::perception::MotionType)},
  { 37, 52, sizeof(::apollo::perception::VehicleStatus)},
  { 62, 69, sizeof(::apollo::perception::Motion_Service)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_MotionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_VehicleStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_Motion_Service_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fmotion_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/perception/proto/motion_servic"
  "e.proto\022\021apollo.perception\032!modules/comm"
  "on/proto/header.proto\"\334\001\n\nMotionType\022\013\n\003"
  "m00\030\001 \001(\002\022\013\n\003m01\030\002 \001(\002\022\013\n\003m02\030\003 \001(\002\022\013\n\003m"
  "03\030\004 \001(\002\022\013\n\003m10\030\005 \001(\002\022\013\n\003m11\030\006 \001(\002\022\013\n\003m1"
  "2\030\007 \001(\002\022\013\n\003m13\030\010 \001(\002\022\013\n\003m20\030\t \001(\002\022\013\n\003m21"
  "\030\n \001(\002\022\013\n\003m22\030\013 \001(\002\022\013\n\003m23\030\014 \001(\002\022\013\n\003m30\030"
  "\r \001(\002\022\013\n\003m31\030\016 \001(\002\022\013\n\003m32\030\017 \001(\002\022\013\n\003m33\030\020"
  " \001(\002\"\346\001\n\rVehicleStatus\022\021\n\troll_rate\030\001 \001("
  "\002\022\022\n\npitch_rate\030\002 \001(\002\022\020\n\010yaw_rate\030\003 \001(\002\022"
  "\020\n\010velocity\030\004 \001(\002\022\022\n\nvelocity_x\030\005 \001(\002\022\022\n"
  "\nvelocity_y\030\006 \001(\002\022\022\n\nvelocity_z\030\007 \001(\002\022\017\n"
  "\007time_ts\030\010 \001(\001\022\016\n\006time_d\030\t \001(\001\022-\n\006motion"
  "\030\n \001(\0132\035.apollo.perception.MotionType\"q\n"
  "\016Motion_Service\0228\n\016vehicle_status\030\001 \003(\0132"
  " .apollo.perception.VehicleStatus\022%\n\006hea"
  "der\030\002 \001(\0132\025.apollo.common.Header"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_sccs[3] = {
  &scc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base,
  &scc_info_Motion_Service_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base,
  &scc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2fmotion_5fservice_2eproto, "modules/perception/proto/motion_service.proto", 672,
  &descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2fmotion_5fservice_2eproto, 3, file_level_enum_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2fmotion_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2fmotion_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2fmotion_5fservice_2eproto), true);
namespace apollo {
namespace perception {

// ===================================================================

void MotionType::InitAsDefaultInstance() {
}
class MotionType::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionType>()._has_bits_);
  static void set_has_m00(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m01(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m02(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m03(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m10(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m11(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_m12(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_m13(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_m20(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_m21(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_m22(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_m23(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_m30(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_m31(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_m32(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_m33(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

MotionType::MotionType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.MotionType)
}
MotionType::MotionType(const MotionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m00_, &from.m00_,
    static_cast<size_t>(reinterpret_cast<char*>(&m33_) -
    reinterpret_cast<char*>(&m00_)) + sizeof(m33_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.MotionType)
}

void MotionType::SharedCtor() {
  ::memset(&m00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m33_) -
      reinterpret_cast<char*>(&m00_)) + sizeof(m33_));
}

MotionType::~MotionType() {
  // @@protoc_insertion_point(destructor:apollo.perception.MotionType)
  SharedDtor();
}

void MotionType::SharedDtor() {
}

void MotionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionType& MotionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionType_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MotionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.MotionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&m00_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m13_) -
        reinterpret_cast<char*>(&m00_)) + sizeof(m13_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&m20_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m33_) -
        reinterpret_cast<char*>(&m20_)) + sizeof(m33_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MotionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float m00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_m00(&has_bits);
          m00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_m01(&has_bits);
          m01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_m02(&has_bits);
          m02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m03 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_m03(&has_bits);
          m03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m10 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_m10(&has_bits);
          m10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m11 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_m11(&has_bits);
          m11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m12 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_m12(&has_bits);
          m12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m13 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_m13(&has_bits);
          m13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m20 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_m20(&has_bits);
          m20_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m21 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_m21(&has_bits);
          m21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m22 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_m22(&has_bits);
          m22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m23 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_m23(&has_bits);
          m23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m30 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_m30(&has_bits);
          m30_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m31 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_m31(&has_bits);
          m31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m32 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_m32(&has_bits);
          m32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float m33 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_m33(&has_bits);
          m33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.MotionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float m00 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_m00(), target);
  }

  // optional float m01 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_m01(), target);
  }

  // optional float m02 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m02(), target);
  }

  // optional float m03 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_m03(), target);
  }

  // optional float m10 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_m10(), target);
  }

  // optional float m11 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_m11(), target);
  }

  // optional float m12 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_m12(), target);
  }

  // optional float m13 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_m13(), target);
  }

  // optional float m20 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_m20(), target);
  }

  // optional float m21 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_m21(), target);
  }

  // optional float m22 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_m22(), target);
  }

  // optional float m23 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_m23(), target);
  }

  // optional float m30 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_m30(), target);
  }

  // optional float m31 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_m31(), target);
  }

  // optional float m32 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_m32(), target);
  }

  // optional float m33 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_m33(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.MotionType)
  return target;
}

size_t MotionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.MotionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float m00 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float m01 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float m02 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float m03 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float m10 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float m11 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float m12 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float m13 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float m20 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float m21 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float m22 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float m23 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float m30 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float m31 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float m32 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float m33 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.MotionType)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.MotionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.MotionType)
    MergeFrom(*source);
  }
}

void MotionType::MergeFrom(const MotionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.MotionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      m00_ = from.m00_;
    }
    if (cached_has_bits & 0x00000002u) {
      m01_ = from.m01_;
    }
    if (cached_has_bits & 0x00000004u) {
      m02_ = from.m02_;
    }
    if (cached_has_bits & 0x00000008u) {
      m03_ = from.m03_;
    }
    if (cached_has_bits & 0x00000010u) {
      m10_ = from.m10_;
    }
    if (cached_has_bits & 0x00000020u) {
      m11_ = from.m11_;
    }
    if (cached_has_bits & 0x00000040u) {
      m12_ = from.m12_;
    }
    if (cached_has_bits & 0x00000080u) {
      m13_ = from.m13_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      m20_ = from.m20_;
    }
    if (cached_has_bits & 0x00000200u) {
      m21_ = from.m21_;
    }
    if (cached_has_bits & 0x00000400u) {
      m22_ = from.m22_;
    }
    if (cached_has_bits & 0x00000800u) {
      m23_ = from.m23_;
    }
    if (cached_has_bits & 0x00001000u) {
      m30_ = from.m30_;
    }
    if (cached_has_bits & 0x00002000u) {
      m31_ = from.m31_;
    }
    if (cached_has_bits & 0x00004000u) {
      m32_ = from.m32_;
    }
    if (cached_has_bits & 0x00008000u) {
      m33_ = from.m33_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.MotionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionType::CopyFrom(const MotionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.MotionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionType::IsInitialized() const {
  return true;
}

void MotionType::InternalSwap(MotionType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m00_, other->m00_);
  swap(m01_, other->m01_);
  swap(m02_, other->m02_);
  swap(m03_, other->m03_);
  swap(m10_, other->m10_);
  swap(m11_, other->m11_);
  swap(m12_, other->m12_);
  swap(m13_, other->m13_);
  swap(m20_, other->m20_);
  swap(m21_, other->m21_);
  swap(m22_, other->m22_);
  swap(m23_, other->m23_);
  swap(m30_, other->m30_);
  swap(m31_, other->m31_);
  swap(m32_, other->m32_);
  swap(m33_, other->m33_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleStatus::InitAsDefaultInstance() {
  ::apollo::perception::_VehicleStatus_default_instance_._instance.get_mutable()->motion_ = const_cast< ::apollo::perception::MotionType*>(
      ::apollo::perception::MotionType::internal_default_instance());
}
class VehicleStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleStatus>()._has_bits_);
  static void set_has_roll_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pitch_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_velocity_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_velocity_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_velocity_z(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_d(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::MotionType& motion(const VehicleStatus* msg);
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::MotionType&
VehicleStatus::_Internal::motion(const VehicleStatus* msg) {
  return *msg->motion_;
}
VehicleStatus::VehicleStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.VehicleStatus)
}
VehicleStatus::VehicleStatus(const VehicleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_motion()) {
    motion_ = new ::apollo::perception::MotionType(*from.motion_);
  } else {
    motion_ = nullptr;
  }
  ::memcpy(&roll_rate_, &from.roll_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_z_) -
    reinterpret_cast<char*>(&roll_rate_)) + sizeof(velocity_z_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.VehicleStatus)
}

void VehicleStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base);
  ::memset(&motion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_z_) -
      reinterpret_cast<char*>(&motion_)) + sizeof(velocity_z_));
}

VehicleStatus::~VehicleStatus() {
  // @@protoc_insertion_point(destructor:apollo.perception.VehicleStatus)
  SharedDtor();
}

void VehicleStatus::SharedDtor() {
  if (this != internal_default_instance()) delete motion_;
}

void VehicleStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleStatus& VehicleStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleStatus_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base);
  return *internal_default_instance();
}


void VehicleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.VehicleStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(motion_ != nullptr);
    motion_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&roll_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_ts_) -
        reinterpret_cast<char*>(&roll_rate_)) + sizeof(time_ts_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&time_d_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocity_z_) -
        reinterpret_cast<char*>(&time_d_)) + sizeof(velocity_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float roll_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_roll_rate(&has_bits);
          roll_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitch_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pitch_rate(&has_bits);
          pitch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_velocity(&has_bits);
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_velocity_x(&has_bits);
          velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_velocity_y(&has_bits);
          velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float velocity_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_velocity_z(&has_bits);
          velocity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double time_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_time_ts(&has_bits);
          time_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_d = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_time_d(&has_bits);
          time_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.MotionType motion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.VehicleStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float roll_rate = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rate(), target);
  }

  // optional float pitch_rate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rate(), target);
  }

  // optional float yaw_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rate(), target);
  }

  // optional float velocity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_velocity(), target);
  }

  // optional float velocity_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_velocity_x(), target);
  }

  // optional float velocity_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_velocity_y(), target);
  }

  // optional float velocity_z = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_velocity_z(), target);
  }

  // optional double time_ts = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_time_ts(), target);
  }

  // optional double time_d = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_time_d(), target);
  }

  // optional .apollo.perception.MotionType motion = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::motion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.VehicleStatus)
  return target;
}

size_t VehicleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.VehicleStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.MotionType motion = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_);
    }

    // optional float roll_rate = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pitch_rate = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float velocity = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float velocity_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float velocity_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional double time_ts = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double time_d = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional float velocity_z = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.VehicleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.VehicleStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.VehicleStatus)
    MergeFrom(*source);
  }
}

void VehicleStatus::MergeFrom(const VehicleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.VehicleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_motion()->::apollo::perception::MotionType::MergeFrom(from._internal_motion());
    }
    if (cached_has_bits & 0x00000002u) {
      roll_rate_ = from.roll_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitch_rate_ = from.pitch_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00000020u) {
      velocity_x_ = from.velocity_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      velocity_y_ = from.velocity_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_ts_ = from.time_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      time_d_ = from.time_d_;
    }
    if (cached_has_bits & 0x00000200u) {
      velocity_z_ = from.velocity_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.VehicleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleStatus::CopyFrom(const VehicleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.VehicleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleStatus::IsInitialized() const {
  return true;
}

void VehicleStatus::InternalSwap(VehicleStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motion_, other->motion_);
  swap(roll_rate_, other->roll_rate_);
  swap(pitch_rate_, other->pitch_rate_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(velocity_, other->velocity_);
  swap(velocity_x_, other->velocity_x_);
  swap(velocity_y_, other->velocity_y_);
  swap(time_ts_, other->time_ts_);
  swap(time_d_, other->time_d_);
  swap(velocity_z_, other->velocity_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Motion_Service::InitAsDefaultInstance() {
  ::apollo::perception::_Motion_Service_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class Motion_Service::_Internal {
 public:
  using HasBits = decltype(std::declval<Motion_Service>()._has_bits_);
  static const ::apollo::common::Header& header(const Motion_Service* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
Motion_Service::_Internal::header(const Motion_Service* msg) {
  return *msg->header_;
}
void Motion_Service::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Motion_Service::Motion_Service()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.Motion_Service)
}
Motion_Service::Motion_Service(const Motion_Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vehicle_status_(from.vehicle_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.Motion_Service)
}

void Motion_Service::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Motion_Service_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base);
  header_ = nullptr;
}

Motion_Service::~Motion_Service() {
  // @@protoc_insertion_point(destructor:apollo.perception.Motion_Service)
  SharedDtor();
}

void Motion_Service::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Motion_Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Motion_Service& Motion_Service::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Motion_Service_modules_2fperception_2fproto_2fmotion_5fservice_2eproto.base);
  return *internal_default_instance();
}


void Motion_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.Motion_Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Motion_Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Motion_Service::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.Motion_Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicle_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vehicle_status(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.Motion_Service)
  return target;
}

size_t Motion_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.Motion_Service)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
  total_size += 1UL * this->_internal_vehicle_status_size();
  for (const auto& msg : this->vehicle_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.common.Header header = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Motion_Service::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.Motion_Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Motion_Service* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Motion_Service>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.Motion_Service)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.Motion_Service)
    MergeFrom(*source);
  }
}

void Motion_Service::MergeFrom(const Motion_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.Motion_Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_status_.MergeFrom(from.vehicle_status_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
  }
}

void Motion_Service::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.Motion_Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Motion_Service::CopyFrom(const Motion_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.Motion_Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion_Service::IsInitialized() const {
  return true;
}

void Motion_Service::InternalSwap(Motion_Service* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vehicle_status_.InternalSwap(&other->vehicle_status_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Motion_Service::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::MotionType* Arena::CreateMaybeMessage< ::apollo::perception::MotionType >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::MotionType >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::VehicleStatus* Arena::CreateMaybeMessage< ::apollo::perception::VehicleStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::VehicleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::Motion_Service* Arena::CreateMaybeMessage< ::apollo::perception::Motion_Service >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::Motion_Service >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
