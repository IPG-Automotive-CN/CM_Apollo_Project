// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/fused_classifier_config.proto

#include "modules/perception/proto/fused_classifier_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace perception {
namespace lidar {
class FusedClassifierConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FusedClassifierConfig> _instance;
} _FusedClassifierConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_FusedClassifierConfig_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.DefaultConstruct();
  *::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get_mutable() = std::string("CCRFOneShotTypeFusion", 21);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get_mutable());
  ::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.DefaultConstruct();
  *::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get_mutable() = std::string("CCRFSequenceTypeFusion", 22);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_FusedClassifierConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::FusedClassifierConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::FusedClassifierConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FusedClassifierConfig_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FusedClassifierConfig_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, temporal_window_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, enable_temporal_fusion_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, one_shot_fusion_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, sequence_fusion_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FusedClassifierConfig, use_tracked_objects_),
  4,
  2,
  0,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::perception::lidar::FusedClassifierConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_FusedClassifierConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/perception/proto/fused_classif"
  "ier_config.proto\022\027apollo.perception.lida"
  "r\"\354\001\n\025FusedClassifierConfig\022\033\n\017temporal_"
  "window\030\001 \001(\001:\00220\022$\n\026enable_temporal_fusi"
  "on\030\002 \001(\010:\004true\0225\n\026one_shot_fusion_method"
  "\030\003 \001(\t:\025CCRFOneShotTypeFusion\0226\n\026sequenc"
  "e_fusion_method\030\004 \001(\t:\026CCRFSequenceTypeF"
  "usion\022!\n\023use_tracked_objects\030\005 \001(\010:\004true"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_sccs[1] = {
  &scc_info_FusedClassifierConfig_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto, "modules/perception/proto/fused_classifier_config.proto", 320,
  &descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_once, descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto), true);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void FusedClassifierConfig::InitAsDefaultInstance() {
}
class FusedClassifierConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FusedClassifierConfig>()._has_bits_);
  static void set_has_temporal_window(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enable_temporal_fusion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_one_shot_fusion_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_fusion_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_tracked_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_;
FusedClassifierConfig::FusedClassifierConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.FusedClassifierConfig)
}
FusedClassifierConfig::FusedClassifierConfig(const FusedClassifierConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  one_shot_fusion_method_.UnsafeSetDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get());
  if (from._internal_has_one_shot_fusion_method()) {
    one_shot_fusion_method_.AssignWithDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get(), from.one_shot_fusion_method_);
  }
  sequence_fusion_method_.UnsafeSetDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get());
  if (from._internal_has_sequence_fusion_method()) {
    sequence_fusion_method_.AssignWithDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get(), from.sequence_fusion_method_);
  }
  ::memcpy(&enable_temporal_fusion_, &from.enable_temporal_fusion_,
    static_cast<size_t>(reinterpret_cast<char*>(&temporal_window_) -
    reinterpret_cast<char*>(&enable_temporal_fusion_)) + sizeof(temporal_window_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.FusedClassifierConfig)
}

void FusedClassifierConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FusedClassifierConfig_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto.base);
  one_shot_fusion_method_.UnsafeSetDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get());
  sequence_fusion_method_.UnsafeSetDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get());
  enable_temporal_fusion_ = true;
  use_tracked_objects_ = true;
  temporal_window_ = 20;
}

FusedClassifierConfig::~FusedClassifierConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.FusedClassifierConfig)
  SharedDtor();
}

void FusedClassifierConfig::SharedDtor() {
  one_shot_fusion_method_.DestroyNoArena(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get());
  sequence_fusion_method_.DestroyNoArena(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get());
}

void FusedClassifierConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FusedClassifierConfig& FusedClassifierConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FusedClassifierConfig_modules_2fperception_2fproto_2ffused_5fclassifier_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FusedClassifierConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.FusedClassifierConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      one_shot_fusion_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_fusion_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get());
    }
    enable_temporal_fusion_ = true;
    use_tracked_objects_ = true;
    temporal_window_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FusedClassifierConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double temporal_window = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_temporal_window(&has_bits);
          temporal_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_temporal_fusion = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_temporal_fusion(&has_bits);
          enable_temporal_fusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string one_shot_fusion_method = 3 [default = "CCRFOneShotTypeFusion"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_one_shot_fusion_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.FusedClassifierConfig.one_shot_fusion_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sequence_fusion_method = 4 [default = "CCRFSequenceTypeFusion"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sequence_fusion_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.FusedClassifierConfig.sequence_fusion_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_tracked_objects = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_tracked_objects(&has_bits);
          use_tracked_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FusedClassifierConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.FusedClassifierConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double temporal_window = 1 [default = 20];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_temporal_window(), target);
  }

  // optional bool enable_temporal_fusion = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_temporal_fusion(), target);
  }

  // optional string one_shot_fusion_method = 3 [default = "CCRFOneShotTypeFusion"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_one_shot_fusion_method().data(), static_cast<int>(this->_internal_one_shot_fusion_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.FusedClassifierConfig.one_shot_fusion_method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_one_shot_fusion_method(), target);
  }

  // optional string sequence_fusion_method = 4 [default = "CCRFSequenceTypeFusion"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequence_fusion_method().data(), static_cast<int>(this->_internal_sequence_fusion_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.FusedClassifierConfig.sequence_fusion_method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sequence_fusion_method(), target);
  }

  // optional bool use_tracked_objects = 5 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_tracked_objects(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.FusedClassifierConfig)
  return target;
}

size_t FusedClassifierConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.FusedClassifierConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string one_shot_fusion_method = 3 [default = "CCRFOneShotTypeFusion"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_one_shot_fusion_method());
    }

    // optional string sequence_fusion_method = 4 [default = "CCRFSequenceTypeFusion"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sequence_fusion_method());
    }

    // optional bool enable_temporal_fusion = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_tracked_objects = 5 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double temporal_window = 1 [default = 20];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FusedClassifierConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.FusedClassifierConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FusedClassifierConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FusedClassifierConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.FusedClassifierConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.FusedClassifierConfig)
    MergeFrom(*source);
  }
}

void FusedClassifierConfig::MergeFrom(const FusedClassifierConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.FusedClassifierConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      one_shot_fusion_method_.AssignWithDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get(), from.one_shot_fusion_method_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sequence_fusion_method_.AssignWithDefault(&::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get(), from.sequence_fusion_method_);
    }
    if (cached_has_bits & 0x00000004u) {
      enable_temporal_fusion_ = from.enable_temporal_fusion_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_tracked_objects_ = from.use_tracked_objects_;
    }
    if (cached_has_bits & 0x00000010u) {
      temporal_window_ = from.temporal_window_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FusedClassifierConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.FusedClassifierConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusedClassifierConfig::CopyFrom(const FusedClassifierConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.FusedClassifierConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusedClassifierConfig::IsInitialized() const {
  return true;
}

void FusedClassifierConfig::InternalSwap(FusedClassifierConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  one_shot_fusion_method_.Swap(&other->one_shot_fusion_method_, &::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_one_shot_fusion_method_.get(),
    GetArenaNoVirtual());
  sequence_fusion_method_.Swap(&other->sequence_fusion_method_, &::apollo::perception::lidar::FusedClassifierConfig::_i_give_permission_to_break_this_code_default_sequence_fusion_method_.get(),
    GetArenaNoVirtual());
  swap(enable_temporal_fusion_, other->enable_temporal_fusion_);
  swap(use_tracked_objects_, other->use_tracked_objects_);
  swap(temporal_window_, other->temporal_window_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FusedClassifierConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::FusedClassifierConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::FusedClassifierConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::FusedClassifierConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
