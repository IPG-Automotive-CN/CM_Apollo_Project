// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto

#include "modules/perception/proto/traffic_light_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto;
namespace apollo {
namespace perception {
class TrafficLightBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightBox> _instance;
} _TrafficLightBox_default_instance_;
class TrafficLightDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightDebug> _instance;
} _TrafficLightDebug_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
class TrafficLightDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightDetection> _instance;
} _TrafficLightDetection_default_instance_;
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLight_default_instance_;
    new (ptr) ::apollo::perception::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto}, {}};

static void InitDefaultsscc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLightBox_default_instance_;
    new (ptr) ::apollo::perception::TrafficLightBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLightBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto}, {}};

static void InitDefaultsscc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLightDebug_default_instance_;
    new (ptr) ::apollo::perception::TrafficLightDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLightDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto}, {
      &scc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLightDetection_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLightDetection_default_instance_;
    new (ptr) ::apollo::perception::TrafficLightDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLightDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrafficLightDetection_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrafficLightDetection_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,
      &scc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, selected_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightBox, camera_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, cropbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, box_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, signal_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, valid_pos_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, ts_diff_pos_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, ts_diff_sys_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, project_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, distance_to_stop_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, camera_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, crop_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, projected_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, rectified_roi_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, debug_roi_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, blink_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLight, remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, traffic_light_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, contain_lights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, camera_id_),
  0,
  ~0u,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::perception::TrafficLightBox)},
  { 19, 37, sizeof(::apollo::perception::TrafficLightDebug)},
  { 50, 61, sizeof(::apollo::perception::TrafficLight)},
  { 67, 77, sizeof(::apollo::perception::TrafficLightDetection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_TrafficLightBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_TrafficLightDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_TrafficLightDetection_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/perception/proto/traffic_light"
  "_detection.proto\022\021apollo.perception\032!mod"
  "ules/common/proto/header.proto\"\243\001\n\017Traff"
  "icLightBox\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005widt"
  "h\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\0224\n\005color\030\005 \001(\0162%"
  ".apollo.perception.TrafficLight.Color\022\020\n"
  "\010selected\030\006 \001(\010\022\023\n\013camera_name\030\007 \001(\t\"\372\003\n"
  "\021TrafficLightDebug\0223\n\007cropbox\030\001 \001(\0132\".ap"
  "ollo.perception.TrafficLightBox\022/\n\003box\030\002"
  " \003(\0132\".apollo.perception.TrafficLightBox"
  "\022\022\n\nsignal_num\030\003 \001(\005\022\021\n\tvalid_pos\030\004 \001(\005\022"
  "\023\n\013ts_diff_pos\030\005 \001(\001\022\023\n\013ts_diff_sys\030\006 \001("
  "\001\022\025\n\rproject_error\030\007 \001(\005\022\035\n\025distance_to_"
  "stop_line\030\010 \001(\001\022\025\n\tcamera_id\030\t \001(\005B\002\030\001\0224"
  "\n\010crop_roi\030\n \003(\0132\".apollo.perception.Tra"
  "fficLightBox\0229\n\rprojected_roi\030\013 \003(\0132\".ap"
  "ollo.perception.TrafficLightBox\0229\n\rrecti"
  "fied_roi\030\014 \003(\0132\".apollo.perception.Traff"
  "icLightBox\0225\n\tdebug_roi\030\r \003(\0132\".apollo.p"
  "erception.TrafficLightBox\"\346\001\n\014TrafficLig"
  "ht\0224\n\005color\030\001 \001(\0162%.apollo.perception.Tr"
  "afficLight.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfiden"
  "ce\030\003 \001(\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005bl"
  "ink\030\005 \001(\010\022\026\n\016remaining_time\030\006 \001(\001\"\?\n\005Col"
  "or\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005"
  "GREEN\020\003\022\t\n\005BLACK\020\004\"\202\003\n\025TrafficLightDetec"
  "tion\022%\n\006header\030\002 \001(\0132\025.apollo.common.Hea"
  "der\0226\n\rtraffic_light\030\001 \003(\0132\037.apollo.perc"
  "eption.TrafficLight\022A\n\023traffic_light_deb"
  "ug\030\003 \001(\0132$.apollo.perception.TrafficLigh"
  "tDebug\022\026\n\016contain_lights\030\004 \001(\010\022D\n\tcamera"
  "_id\030\005 \001(\01621.apollo.perception.TrafficLig"
  "htDetection.CameraID\"i\n\010CameraID\022\025\n\021CAME"
  "RA_FRONT_LONG\020\000\022\027\n\023CAMERA_FRONT_NARROW\020\001"
  "\022\026\n\022CAMERA_FRONT_SHORT\020\002\022\025\n\021CAMERA_FRONT"
  "_WIDE\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_sccs[4] = {
  &scc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,
  &scc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,
  &scc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,
  &scc_info_TrafficLightDetection_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto, "modules/perception/proto/traffic_light_detection.proto", 1407,
  &descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_once, descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto, 4, file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto), true);
namespace apollo {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[0];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Color TrafficLight::UNKNOWN;
constexpr TrafficLight_Color TrafficLight::RED;
constexpr TrafficLight_Color TrafficLight::YELLOW;
constexpr TrafficLight_Color TrafficLight::GREEN;
constexpr TrafficLight_Color TrafficLight::BLACK;
constexpr TrafficLight_Color TrafficLight::Color_MIN;
constexpr TrafficLight_Color TrafficLight::Color_MAX;
constexpr int TrafficLight::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLightDetection_CameraID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto[1];
}
bool TrafficLightDetection_CameraID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_LONG;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_NARROW;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_SHORT;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_WIDE;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CameraID_MIN;
constexpr TrafficLightDetection_CameraID TrafficLightDetection::CameraID_MAX;
constexpr int TrafficLightDetection::CameraID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrafficLightBox::InitAsDefaultInstance() {
}
class TrafficLightBox::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightBox>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrafficLightBox::TrafficLightBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightBox)
}
TrafficLightBox::TrafficLightBox(const TrafficLightBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera_name()) {
    camera_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&selected_) -
    reinterpret_cast<char*>(&x_)) + sizeof(selected_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightBox)
}

void TrafficLightBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selected_) -
      reinterpret_cast<char*>(&x_)) + sizeof(selected_));
}

TrafficLightBox::~TrafficLightBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightBox)
  SharedDtor();
}

void TrafficLightBox::SharedDtor() {
  camera_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightBox& TrafficLightBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightBox_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    camera_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_) -
        reinterpret_cast<char*>(&x_)) + sizeof(selected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLightBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLight.Color color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool selected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_selected(&has_bits);
          selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string camera_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.TrafficLightBox.camera_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_color(), target);
  }

  // optional bool selected = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_selected(), target);
  }

  // optional string camera_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLightBox.camera_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_camera_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightBox)
  return target;
}

size_t TrafficLightBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string camera_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_name());
    }

    // optional int32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional .apollo.perception.TrafficLight.Color color = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool selected = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightBox)
    MergeFrom(*source);
  }
}

void TrafficLightBox::MergeFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      camera_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      selected_ = from.selected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightBox::CopyFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightBox::IsInitialized() const {
  return true;
}

void TrafficLightBox::InternalSwap(TrafficLightBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  camera_name_.Swap(&other->camera_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(color_, other->color_);
  swap(selected_, other->selected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightDebug::InitAsDefaultInstance() {
  ::apollo::perception::_TrafficLightDebug_default_instance_._instance.get_mutable()->cropbox_ = const_cast< ::apollo::perception::TrafficLightBox*>(
      ::apollo::perception::TrafficLightBox::internal_default_instance());
}
class TrafficLightDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightDebug>()._has_bits_);
  static const ::apollo::perception::TrafficLightBox& cropbox(const TrafficLightDebug* msg);
  static void set_has_cropbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signal_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valid_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ts_diff_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ts_diff_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_project_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_distance_to_stop_line(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::perception::TrafficLightBox&
TrafficLightDebug::_Internal::cropbox(const TrafficLightDebug* msg) {
  return *msg->cropbox_;
}
TrafficLightDebug::TrafficLightDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDebug)
}
TrafficLightDebug::TrafficLightDebug(const TrafficLightDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      box_(from.box_),
      crop_roi_(from.crop_roi_),
      projected_roi_(from.projected_roi_),
      rectified_roi_(from.rectified_roi_),
      debug_roi_(from.debug_roi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cropbox()) {
    cropbox_ = new ::apollo::perception::TrafficLightBox(*from.cropbox_);
  } else {
    cropbox_ = nullptr;
  }
  ::memcpy(&signal_num_, &from.signal_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&signal_num_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDebug)
}

void TrafficLightDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  ::memset(&cropbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&cropbox_)) + sizeof(camera_id_));
}

TrafficLightDebug::~TrafficLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDebug)
  SharedDtor();
}

void TrafficLightDebug::SharedDtor() {
  if (this != internal_default_instance()) delete cropbox_;
}

void TrafficLightDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightDebug& TrafficLightDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightDebug_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_.Clear();
  crop_roi_.Clear();
  projected_roi_.Clear();
  rectified_roi_.Clear();
  debug_roi_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cropbox_ != nullptr);
    cropbox_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&signal_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&signal_num_)) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLightDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.TrafficLightBox cropbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cropbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 signal_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_signal_num(&has_bits);
          signal_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 valid_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_valid_pos(&has_bits);
          valid_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ts_diff_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ts_diff_pos(&has_bits);
          ts_diff_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ts_diff_sys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ts_diff_sys(&has_bits);
          ts_diff_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 project_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_project_error(&has_bits);
          project_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double distance_to_stop_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_distance_to_stop_line(&has_bits);
          distance_to_stop_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 camera_id = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_camera_id(&has_bits);
          camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crop_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_projected_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rectified_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_roi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cropbox(this), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_box_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_box(i), target, stream);
  }

  // optional int32 signal_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_signal_num(), target);
  }

  // optional int32 valid_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_valid_pos(), target);
  }

  // optional double ts_diff_pos = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ts_diff_pos(), target);
  }

  // optional double ts_diff_sys = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ts_diff_sys(), target);
  }

  // optional int32 project_error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_project_error(), target);
  }

  // optional double distance_to_stop_line = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_distance_to_stop_line(), target);
  }

  // optional int32 camera_id = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_camera_id(), target);
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crop_roi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_crop_roi(i), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_projected_roi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_projected_roi(i), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rectified_roi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_rectified_roi(i), target, stream);
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_debug_roi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_debug_roi(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDebug)
  return target;
}

size_t TrafficLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLightBox box = 2;
  total_size += 1UL * this->_internal_box_size();
  for (const auto& msg : this->box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  total_size += 1UL * this->_internal_crop_roi_size();
  for (const auto& msg : this->crop_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  total_size += 1UL * this->_internal_projected_roi_size();
  for (const auto& msg : this->projected_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  total_size += 1UL * this->_internal_rectified_roi_size();
  for (const auto& msg : this->rectified_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  total_size += 1UL * this->_internal_debug_roi_size();
  for (const auto& msg : this->debug_roi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.TrafficLightBox cropbox = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cropbox_);
    }

    // optional int32 signal_num = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_signal_num());
    }

    // optional int32 valid_pos = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_valid_pos());
    }

    // optional double ts_diff_pos = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ts_diff_sys = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double distance_to_stop_line = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 project_error = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_project_error());
    }

    // optional int32 camera_id = 9 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_camera_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDebug)
    MergeFrom(*source);
  }
}

void TrafficLightDebug::MergeFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_.MergeFrom(from.box_);
  crop_roi_.MergeFrom(from.crop_roi_);
  projected_roi_.MergeFrom(from.projected_roi_);
  rectified_roi_.MergeFrom(from.rectified_roi_);
  debug_roi_.MergeFrom(from.debug_roi_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cropbox()->::apollo::perception::TrafficLightBox::MergeFrom(from._internal_cropbox());
    }
    if (cached_has_bits & 0x00000002u) {
      signal_num_ = from.signal_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_pos_ = from.valid_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      ts_diff_pos_ = from.ts_diff_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      ts_diff_sys_ = from.ts_diff_sys_;
    }
    if (cached_has_bits & 0x00000020u) {
      distance_to_stop_line_ = from.distance_to_stop_line_;
    }
    if (cached_has_bits & 0x00000040u) {
      project_error_ = from.project_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDebug::CopyFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDebug::IsInitialized() const {
  return true;
}

void TrafficLightDebug::InternalSwap(TrafficLightDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_.InternalSwap(&other->box_);
  crop_roi_.InternalSwap(&other->crop_roi_);
  projected_roi_.InternalSwap(&other->projected_roi_);
  rectified_roi_.InternalSwap(&other->rectified_roi_);
  debug_roi_.InternalSwap(&other->debug_roi_);
  swap(cropbox_, other->cropbox_);
  swap(signal_num_, other->signal_num_);
  swap(valid_pos_, other->valid_pos_);
  swap(ts_diff_pos_, other->ts_diff_pos_);
  swap(ts_diff_sys_, other->ts_diff_sys_);
  swap(distance_to_stop_line_, other->distance_to_stop_line_);
  swap(project_error_, other->project_error_);
  swap(camera_id_, other->camera_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remaining_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrafficLight::TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_time_) -
      reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
  confidence_ = 1;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remaining_time_) -
        reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.TrafficLight.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double confidence = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double tracking_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_tracking_time(&has_bits);
          tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool blink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_blink(&has_bits);
          blink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double remaining_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_remaining_time(&has_bits);
          remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool blink = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_time_ = from.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(blink_, other->blink_);
  swap(tracking_time_, other->tracking_time_);
  swap(remaining_time_, other->remaining_time_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightDetection::InitAsDefaultInstance() {
  ::apollo::perception::_TrafficLightDetection_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::perception::_TrafficLightDetection_default_instance_._instance.get_mutable()->traffic_light_debug_ = const_cast< ::apollo::perception::TrafficLightDebug*>(
      ::apollo::perception::TrafficLightDebug::internal_default_instance());
}
class TrafficLightDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightDetection>()._has_bits_);
  static const ::apollo::common::Header& header(const TrafficLightDetection* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::TrafficLightDebug& traffic_light_debug(const TrafficLightDetection* msg);
  static void set_has_traffic_light_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contain_lights(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
TrafficLightDetection::_Internal::header(const TrafficLightDetection* msg) {
  return *msg->header_;
}
const ::apollo::perception::TrafficLightDebug&
TrafficLightDetection::_Internal::traffic_light_debug(const TrafficLightDetection* msg) {
  return *msg->traffic_light_debug_;
}
void TrafficLightDetection::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TrafficLightDetection::TrafficLightDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDetection)
}
TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      traffic_light_(from.traffic_light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_traffic_light_debug()) {
    traffic_light_debug_ = new ::apollo::perception::TrafficLightDebug(*from.traffic_light_debug_);
  } else {
    traffic_light_debug_ = nullptr;
  }
  ::memcpy(&contain_lights_, &from.contain_lights_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&contain_lights_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightDetection_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(camera_id_));
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete traffic_light_debug_;
}

void TrafficLightDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightDetection& TrafficLightDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightDetection_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(traffic_light_debug_ != nullptr);
      traffic_light_debug_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&contain_lights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&contain_lights_)) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLightDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.TrafficLight traffic_light = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contain_lights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_contain_lights(&has_bits);
          contain_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLightDetection_CameraID_IsValid(val))) {
            _internal_set_camera_id(static_cast<::apollo::perception::TrafficLightDetection_CameraID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightDetection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_light_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_traffic_light(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::traffic_light_debug(this), target, stream);
  }

  // optional bool contain_lights = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_contain_lights(), target);
  }

  // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDetection)
  return target;
}

size_t TrafficLightDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDetection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  total_size += 1UL * this->_internal_traffic_light_size();
  for (const auto& msg : this->traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_light_debug_);
    }

    // optional bool contain_lights = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_camera_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_traffic_light_debug()->::apollo::perception::TrafficLightDebug::MergeFrom(from._internal_traffic_light_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      contain_lights_ = from.contain_lights_;
    }
    if (cached_has_bits & 0x00000008u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {
  return true;
}

void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  traffic_light_.InternalSwap(&other->traffic_light_);
  swap(header_, other->header_);
  swap(traffic_light_debug_, other->traffic_light_debug_);
  swap(contain_lights_, other->contain_lights_);
  swap(camera_id_, other->camera_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLightBox* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightBox >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLightBox >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLightDebug* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLightDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLight* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::TrafficLightDetection* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightDetection >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLightDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
