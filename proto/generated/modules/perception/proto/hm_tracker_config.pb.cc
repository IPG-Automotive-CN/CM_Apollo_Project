// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/hm_tracker_config.proto

#include "modules/perception/proto/hm_tracker_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace perception {
namespace lidar {
class ObjectTrackMatcherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTrackMatcherConfig> _instance;
} _ObjectTrackMatcherConfig_default_instance_;
class KalmanFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KalmanFilterConfig> _instance;
} _KalmanFilterConfig_default_instance_;
class TrackerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackerConfig> _instance;
} _TrackerConfig_default_instance_;
class HmMultiTargetTrackerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HmMultiTargetTrackerConfig> _instance;
} _HmMultiTargetTrackerConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_HmMultiTargetTrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.DefaultConstruct();
  *::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get_mutable() = std::string("KalmanFilter", 12);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get_mutable());
  ::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.DefaultConstruct();
  *::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get_mutable() = std::string("MultiHmBipartiteGraphMatcher", 28);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get_mutable());
  ::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.DefaultConstruct();
  *::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get_mutable() = std::string("GnnBipartiteGraphMatcher", 24);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_HmMultiTargetTrackerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::HmMultiTargetTrackerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::HmMultiTargetTrackerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HmMultiTargetTrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HmMultiTargetTrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_KalmanFilterConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_KalmanFilterConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::KalmanFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::KalmanFilterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KalmanFilterConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KalmanFilterConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ObjectTrackMatcherConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_ObjectTrackMatcherConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::ObjectTrackMatcherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::ObjectTrackMatcherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectTrackMatcherConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectTrackMatcherConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.DefaultConstruct();
  *::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get_mutable() = std::string("KalmanFilter", 12);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_TrackerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::TrackerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::TrackerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, max_match_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_location_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_direction_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_bbox_size_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_point_num_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_histogram_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_centroid_shift_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_weight_bbox_iou_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bg_background_object_match_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_location_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_direction_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_bbox_size_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_point_num_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_histogram_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_centroid_shift_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, fg_weight_bbox_iou_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::ObjectTrackMatcherConfig, bound_value_),
  7,
  0,
  1,
  2,
  3,
  4,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  5,
  6,
  16,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, noise_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, use_adaptive_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, centroid_measurement_noise_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, centroid_init_velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, propagation_variance_xy_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, propagation_variance_z_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, use_convergence_boostup_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, boostup_history_size_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::KalmanFilterConfig, converged_confidence_minimum_),
  3,
  0,
  4,
  5,
  6,
  7,
  1,
  8,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::TrackerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::TrackerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::TrackerConfig, filter_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::TrackerConfig, separate_fore_background_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, filter_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, foreground_mathcer_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, background_matcher_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, use_histogram_for_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::HmMultiTargetTrackerConfig, histogram_bin_size_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::apollo::perception::lidar::ObjectTrackMatcherConfig)},
  { 39, 53, sizeof(::apollo::perception::lidar::KalmanFilterConfig)},
  { 62, 69, sizeof(::apollo::perception::lidar::TrackerConfig)},
  { 71, 81, sizeof(::apollo::perception::lidar::HmMultiTargetTrackerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_ObjectTrackMatcherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_KalmanFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_TrackerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_HmMultiTargetTrackerConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/perception/proto/hm_tracker_co"
  "nfig.proto\022\027apollo.perception.lidar\"\232\005\n\030"
  "ObjectTrackMatcherConfig\022\031\n\016max_match_di"
  "st\030\001 \001(\002:\0014\022\"\n\027bg_weight_location_dist\030\002"
  " \001(\002:\0010\022#\n\030bg_weight_direction_dist\030\003 \001("
  "\002:\0010\022#\n\030bg_weight_bbox_size_dist\030\004 \001(\002:\001"
  "0\022#\n\030bg_weight_point_num_dist\030\005 \001(\002:\0010\022#"
  "\n\030bg_weight_histogram_dist\030\006 \001(\002:\0010\022*\n\035b"
  "g_weight_centroid_shift_dist\030\007 \001(\002:\0030.2\022"
  "$\n\027bg_weight_bbox_iou_dist\030\010 \001(\002:\0030.8\022/\n"
  "$bg_background_object_match_threshold\030\t "
  "\001(\002:\0014\022$\n\027fg_weight_location_dist\030\n \001(\002:"
  "\0030.6\022%\n\030fg_weight_direction_dist\030\013 \001(\002:\003"
  "0.2\022%\n\030fg_weight_bbox_size_dist\030\014 \001(\002:\0030"
  ".1\022%\n\030fg_weight_point_num_dist\030\r \001(\002:\0030."
  "1\022%\n\030fg_weight_histogram_dist\030\016 \001(\002:\0030.5"
  "\022(\n\035fg_weight_centroid_shift_dist\030\017 \001(\002:"
  "\0010\022\"\n\027fg_weight_bbox_iou_dist\030\020 \001(\002:\0010\022\030"
  "\n\013bound_value\030\021 \001(\002:\003100\"\347\002\n\022KalmanFilte"
  "rConfig\022\032\n\rnoise_maximum\030\001 \001(\002:\0030.1\022\033\n\014u"
  "se_adaptive\030\002 \001(\010:\005false\022\'\n\032centroid_mea"
  "surement_noise\030\003 \001(\002:\0030.4\022*\n\037centroid_in"
  "it_velocity_variance\030\004 \001(\002:\0015\022#\n\027propaga"
  "tion_variance_xy\030\005 \001(\002:\00210\022\"\n\026propagatio"
  "n_variance_z\030\006 \001(\002:\00210\022&\n\027use_convergenc"
  "e_boostup\030\007 \001(\010:\005false\022\'\n\034boostup_histor"
  "y_size_minimum\030\010 \001(\005:\0013\022)\n\034converged_con"
  "fidence_minimum\030\t \001(\002:\0030.9\"[\n\rTrackerCon"
  "fig\022!\n\013filter_name\030\001 \001(\t:\014KalmanFilter\022\'"
  "\n\030separate_fore_background\030\002 \001(\010:\005false\""
  "\206\002\n\032HmMultiTargetTrackerConfig\022#\n\rfilter"
  "_method\030\001 \001(\t:\014KalmanFilter\022\?\n\031foregroun"
  "d_mathcer_method\030\002 \001(\t:\034MultiHmBipartite"
  "GraphMatcher\022;\n\031background_matcher_metho"
  "d\030\003 \001(\t:\030GnnBipartiteGraphMatcher\022%\n\027use"
  "_histogram_for_match\030\004 \001(\010:\004true\022\036\n\022hist"
  "ogram_bin_size\030\005 \001(\002:\00210"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_sccs[4] = {
  &scc_info_HmMultiTargetTrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base,
  &scc_info_KalmanFilterConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base,
  &scc_info_ObjectTrackMatcherConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base,
  &scc_info_TrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto, "modules/perception/proto/hm_tracker_config.proto", 1464,
  &descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto, 4, file_level_enum_descriptors_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto), true);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void ObjectTrackMatcherConfig::InitAsDefaultInstance() {
}
class ObjectTrackMatcherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectTrackMatcherConfig>()._has_bits_);
  static void set_has_max_match_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bg_weight_location_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bg_weight_direction_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bg_weight_bbox_size_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bg_weight_point_num_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bg_weight_histogram_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bg_weight_centroid_shift_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bg_weight_bbox_iou_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bg_background_object_match_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fg_weight_location_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fg_weight_direction_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fg_weight_bbox_size_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_fg_weight_point_num_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_fg_weight_histogram_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fg_weight_centroid_shift_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fg_weight_bbox_iou_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bound_value(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

ObjectTrackMatcherConfig::ObjectTrackMatcherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.ObjectTrackMatcherConfig)
}
ObjectTrackMatcherConfig::ObjectTrackMatcherConfig(const ObjectTrackMatcherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bg_weight_location_dist_, &from.bg_weight_location_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_value_) -
    reinterpret_cast<char*>(&bg_weight_location_dist_)) + sizeof(bound_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.ObjectTrackMatcherConfig)
}

void ObjectTrackMatcherConfig::SharedCtor() {
  ::memset(&bg_weight_location_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fg_weight_bbox_iou_dist_) -
      reinterpret_cast<char*>(&bg_weight_location_dist_)) + sizeof(fg_weight_bbox_iou_dist_));
  max_match_dist_ = 4;
  bg_weight_centroid_shift_dist_ = 0.2f;
  bg_weight_bbox_iou_dist_ = 0.8f;
  bg_background_object_match_threshold_ = 4;
  fg_weight_location_dist_ = 0.6f;
  fg_weight_direction_dist_ = 0.2f;
  fg_weight_bbox_size_dist_ = 0.1f;
  fg_weight_point_num_dist_ = 0.1f;
  fg_weight_histogram_dist_ = 0.5f;
  bound_value_ = 100;
}

ObjectTrackMatcherConfig::~ObjectTrackMatcherConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.ObjectTrackMatcherConfig)
  SharedDtor();
}

void ObjectTrackMatcherConfig::SharedDtor() {
}

void ObjectTrackMatcherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTrackMatcherConfig& ObjectTrackMatcherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTrackMatcherConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ObjectTrackMatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bg_weight_location_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fg_weight_bbox_iou_dist_) -
        reinterpret_cast<char*>(&bg_weight_location_dist_)) + sizeof(fg_weight_bbox_iou_dist_));
    max_match_dist_ = 4;
  }
  if (cached_has_bits & 0x0000ff00u) {
    bg_weight_centroid_shift_dist_ = 0.2f;
    bg_weight_bbox_iou_dist_ = 0.8f;
    bg_background_object_match_threshold_ = 4;
    fg_weight_location_dist_ = 0.6f;
    fg_weight_direction_dist_ = 0.2f;
    fg_weight_bbox_size_dist_ = 0.1f;
    fg_weight_point_num_dist_ = 0.1f;
    fg_weight_histogram_dist_ = 0.5f;
  }
  bound_value_ = 100;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectTrackMatcherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float max_match_dist = 1 [default = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_max_match_dist(&has_bits);
          max_match_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_location_dist = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bg_weight_location_dist(&has_bits);
          bg_weight_location_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_direction_dist = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bg_weight_direction_dist(&has_bits);
          bg_weight_direction_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_bbox_size_dist = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_bg_weight_bbox_size_dist(&has_bits);
          bg_weight_bbox_size_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_point_num_dist = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_bg_weight_point_num_dist(&has_bits);
          bg_weight_point_num_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_histogram_dist = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_bg_weight_histogram_dist(&has_bits);
          bg_weight_histogram_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_centroid_shift_dist = 7 [default = 0.2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_bg_weight_centroid_shift_dist(&has_bits);
          bg_weight_centroid_shift_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_weight_bbox_iou_dist = 8 [default = 0.8];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_bg_weight_bbox_iou_dist(&has_bits);
          bg_weight_bbox_iou_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_background_object_match_threshold = 9 [default = 4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_bg_background_object_match_threshold(&has_bits);
          bg_background_object_match_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_location_dist = 10 [default = 0.6];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_fg_weight_location_dist(&has_bits);
          fg_weight_location_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_direction_dist = 11 [default = 0.2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_fg_weight_direction_dist(&has_bits);
          fg_weight_direction_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_bbox_size_dist = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_fg_weight_bbox_size_dist(&has_bits);
          fg_weight_bbox_size_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_point_num_dist = 13 [default = 0.1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_fg_weight_point_num_dist(&has_bits);
          fg_weight_point_num_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_histogram_dist = 14 [default = 0.5];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_fg_weight_histogram_dist(&has_bits);
          fg_weight_histogram_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_centroid_shift_dist = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_fg_weight_centroid_shift_dist(&has_bits);
          fg_weight_centroid_shift_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_weight_bbox_iou_dist = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_fg_weight_bbox_iou_dist(&has_bits);
          fg_weight_bbox_iou_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bound_value = 17 [default = 100];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_bound_value(&has_bits);
          bound_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTrackMatcherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_match_dist = 1 [default = 4];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_match_dist(), target);
  }

  // optional float bg_weight_location_dist = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bg_weight_location_dist(), target);
  }

  // optional float bg_weight_direction_dist = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bg_weight_direction_dist(), target);
  }

  // optional float bg_weight_bbox_size_dist = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bg_weight_bbox_size_dist(), target);
  }

  // optional float bg_weight_point_num_dist = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bg_weight_point_num_dist(), target);
  }

  // optional float bg_weight_histogram_dist = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_bg_weight_histogram_dist(), target);
  }

  // optional float bg_weight_centroid_shift_dist = 7 [default = 0.2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_bg_weight_centroid_shift_dist(), target);
  }

  // optional float bg_weight_bbox_iou_dist = 8 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bg_weight_bbox_iou_dist(), target);
  }

  // optional float bg_background_object_match_threshold = 9 [default = 4];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_bg_background_object_match_threshold(), target);
  }

  // optional float fg_weight_location_dist = 10 [default = 0.6];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_fg_weight_location_dist(), target);
  }

  // optional float fg_weight_direction_dist = 11 [default = 0.2];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_fg_weight_direction_dist(), target);
  }

  // optional float fg_weight_bbox_size_dist = 12 [default = 0.1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_fg_weight_bbox_size_dist(), target);
  }

  // optional float fg_weight_point_num_dist = 13 [default = 0.1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_fg_weight_point_num_dist(), target);
  }

  // optional float fg_weight_histogram_dist = 14 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_fg_weight_histogram_dist(), target);
  }

  // optional float fg_weight_centroid_shift_dist = 15 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_fg_weight_centroid_shift_dist(), target);
  }

  // optional float fg_weight_bbox_iou_dist = 16 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_fg_weight_bbox_iou_dist(), target);
  }

  // optional float bound_value = 17 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_bound_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.ObjectTrackMatcherConfig)
  return target;
}

size_t ObjectTrackMatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float bg_weight_location_dist = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float bg_weight_direction_dist = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bg_weight_bbox_size_dist = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bg_weight_point_num_dist = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float bg_weight_histogram_dist = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_centroid_shift_dist = 15 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_bbox_iou_dist = 16 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float max_match_dist = 1 [default = 4];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float bg_weight_centroid_shift_dist = 7 [default = 0.2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float bg_weight_bbox_iou_dist = 8 [default = 0.8];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float bg_background_object_match_threshold = 9 [default = 4];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_location_dist = 10 [default = 0.6];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_direction_dist = 11 [default = 0.2];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_bbox_size_dist = 12 [default = 0.1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_point_num_dist = 13 [default = 0.1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float fg_weight_histogram_dist = 14 [default = 0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  // optional float bound_value = 17 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTrackMatcherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTrackMatcherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTrackMatcherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.ObjectTrackMatcherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.ObjectTrackMatcherConfig)
    MergeFrom(*source);
  }
}

void ObjectTrackMatcherConfig::MergeFrom(const ObjectTrackMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bg_weight_location_dist_ = from.bg_weight_location_dist_;
    }
    if (cached_has_bits & 0x00000002u) {
      bg_weight_direction_dist_ = from.bg_weight_direction_dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      bg_weight_bbox_size_dist_ = from.bg_weight_bbox_size_dist_;
    }
    if (cached_has_bits & 0x00000008u) {
      bg_weight_point_num_dist_ = from.bg_weight_point_num_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      bg_weight_histogram_dist_ = from.bg_weight_histogram_dist_;
    }
    if (cached_has_bits & 0x00000020u) {
      fg_weight_centroid_shift_dist_ = from.fg_weight_centroid_shift_dist_;
    }
    if (cached_has_bits & 0x00000040u) {
      fg_weight_bbox_iou_dist_ = from.fg_weight_bbox_iou_dist_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_match_dist_ = from.max_match_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bg_weight_centroid_shift_dist_ = from.bg_weight_centroid_shift_dist_;
    }
    if (cached_has_bits & 0x00000200u) {
      bg_weight_bbox_iou_dist_ = from.bg_weight_bbox_iou_dist_;
    }
    if (cached_has_bits & 0x00000400u) {
      bg_background_object_match_threshold_ = from.bg_background_object_match_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      fg_weight_location_dist_ = from.fg_weight_location_dist_;
    }
    if (cached_has_bits & 0x00001000u) {
      fg_weight_direction_dist_ = from.fg_weight_direction_dist_;
    }
    if (cached_has_bits & 0x00002000u) {
      fg_weight_bbox_size_dist_ = from.fg_weight_bbox_size_dist_;
    }
    if (cached_has_bits & 0x00004000u) {
      fg_weight_point_num_dist_ = from.fg_weight_point_num_dist_;
    }
    if (cached_has_bits & 0x00008000u) {
      fg_weight_histogram_dist_ = from.fg_weight_histogram_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_bound_value(from._internal_bound_value());
  }
}

void ObjectTrackMatcherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTrackMatcherConfig::CopyFrom(const ObjectTrackMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.ObjectTrackMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTrackMatcherConfig::IsInitialized() const {
  return true;
}

void ObjectTrackMatcherConfig::InternalSwap(ObjectTrackMatcherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bg_weight_location_dist_, other->bg_weight_location_dist_);
  swap(bg_weight_direction_dist_, other->bg_weight_direction_dist_);
  swap(bg_weight_bbox_size_dist_, other->bg_weight_bbox_size_dist_);
  swap(bg_weight_point_num_dist_, other->bg_weight_point_num_dist_);
  swap(bg_weight_histogram_dist_, other->bg_weight_histogram_dist_);
  swap(fg_weight_centroid_shift_dist_, other->fg_weight_centroid_shift_dist_);
  swap(fg_weight_bbox_iou_dist_, other->fg_weight_bbox_iou_dist_);
  swap(max_match_dist_, other->max_match_dist_);
  swap(bg_weight_centroid_shift_dist_, other->bg_weight_centroid_shift_dist_);
  swap(bg_weight_bbox_iou_dist_, other->bg_weight_bbox_iou_dist_);
  swap(bg_background_object_match_threshold_, other->bg_background_object_match_threshold_);
  swap(fg_weight_location_dist_, other->fg_weight_location_dist_);
  swap(fg_weight_direction_dist_, other->fg_weight_direction_dist_);
  swap(fg_weight_bbox_size_dist_, other->fg_weight_bbox_size_dist_);
  swap(fg_weight_point_num_dist_, other->fg_weight_point_num_dist_);
  swap(fg_weight_histogram_dist_, other->fg_weight_histogram_dist_);
  swap(bound_value_, other->bound_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTrackMatcherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KalmanFilterConfig::InitAsDefaultInstance() {
}
class KalmanFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<KalmanFilterConfig>()._has_bits_);
  static void set_has_noise_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_adaptive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_centroid_measurement_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_centroid_init_velocity_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_propagation_variance_xy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_propagation_variance_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_convergence_boostup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_boostup_history_size_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_converged_confidence_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KalmanFilterConfig::KalmanFilterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.KalmanFilterConfig)
}
KalmanFilterConfig::KalmanFilterConfig(const KalmanFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_adaptive_, &from.use_adaptive_,
    static_cast<size_t>(reinterpret_cast<char*>(&boostup_history_size_minimum_) -
    reinterpret_cast<char*>(&use_adaptive_)) + sizeof(boostup_history_size_minimum_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.KalmanFilterConfig)
}

void KalmanFilterConfig::SharedCtor() {
  ::memset(&use_adaptive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_convergence_boostup_) -
      reinterpret_cast<char*>(&use_adaptive_)) + sizeof(use_convergence_boostup_));
  converged_confidence_minimum_ = 0.9f;
  noise_maximum_ = 0.1f;
  centroid_measurement_noise_ = 0.4f;
  centroid_init_velocity_variance_ = 5;
  propagation_variance_xy_ = 10;
  propagation_variance_z_ = 10;
  boostup_history_size_minimum_ = 3;
}

KalmanFilterConfig::~KalmanFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.KalmanFilterConfig)
  SharedDtor();
}

void KalmanFilterConfig::SharedDtor() {
}

void KalmanFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KalmanFilterConfig& KalmanFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KalmanFilterConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void KalmanFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.KalmanFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_adaptive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_convergence_boostup_) -
      reinterpret_cast<char*>(&use_adaptive_)) + sizeof(use_convergence_boostup_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    converged_confidence_minimum_ = 0.9f;
    noise_maximum_ = 0.1f;
    centroid_measurement_noise_ = 0.4f;
    centroid_init_velocity_variance_ = 5;
    propagation_variance_xy_ = 10;
    propagation_variance_z_ = 10;
  }
  boostup_history_size_minimum_ = 3;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KalmanFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float noise_maximum = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_noise_maximum(&has_bits);
          noise_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_adaptive = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_adaptive(&has_bits);
          use_adaptive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float centroid_measurement_noise = 3 [default = 0.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_centroid_measurement_noise(&has_bits);
          centroid_measurement_noise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float centroid_init_velocity_variance = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_centroid_init_velocity_variance(&has_bits);
          centroid_init_velocity_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float propagation_variance_xy = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_propagation_variance_xy(&has_bits);
          propagation_variance_xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float propagation_variance_z = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_propagation_variance_z(&has_bits);
          propagation_variance_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_convergence_boostup = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_convergence_boostup(&has_bits);
          use_convergence_boostup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 boostup_history_size_minimum = 8 [default = 3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_boostup_history_size_minimum(&has_bits);
          boostup_history_size_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float converged_confidence_minimum = 9 [default = 0.9];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_converged_confidence_minimum(&has_bits);
          converged_confidence_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KalmanFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.KalmanFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float noise_maximum = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_noise_maximum(), target);
  }

  // optional bool use_adaptive = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_adaptive(), target);
  }

  // optional float centroid_measurement_noise = 3 [default = 0.4];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_centroid_measurement_noise(), target);
  }

  // optional float centroid_init_velocity_variance = 4 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_centroid_init_velocity_variance(), target);
  }

  // optional float propagation_variance_xy = 5 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_propagation_variance_xy(), target);
  }

  // optional float propagation_variance_z = 6 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_propagation_variance_z(), target);
  }

  // optional bool use_convergence_boostup = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_convergence_boostup(), target);
  }

  // optional int32 boostup_history_size_minimum = 8 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_boostup_history_size_minimum(), target);
  }

  // optional float converged_confidence_minimum = 9 [default = 0.9];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_converged_confidence_minimum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.KalmanFilterConfig)
  return target;
}

size_t KalmanFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.KalmanFilterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool use_adaptive = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool use_convergence_boostup = 7 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float converged_confidence_minimum = 9 [default = 0.9];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float noise_maximum = 1 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float centroid_measurement_noise = 3 [default = 0.4];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float centroid_init_velocity_variance = 4 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float propagation_variance_xy = 5 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float propagation_variance_z = 6 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional int32 boostup_history_size_minimum = 8 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boostup_history_size_minimum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KalmanFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.KalmanFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const KalmanFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KalmanFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.KalmanFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.KalmanFilterConfig)
    MergeFrom(*source);
  }
}

void KalmanFilterConfig::MergeFrom(const KalmanFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.KalmanFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      use_adaptive_ = from.use_adaptive_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_convergence_boostup_ = from.use_convergence_boostup_;
    }
    if (cached_has_bits & 0x00000004u) {
      converged_confidence_minimum_ = from.converged_confidence_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      noise_maximum_ = from.noise_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      centroid_measurement_noise_ = from.centroid_measurement_noise_;
    }
    if (cached_has_bits & 0x00000020u) {
      centroid_init_velocity_variance_ = from.centroid_init_velocity_variance_;
    }
    if (cached_has_bits & 0x00000040u) {
      propagation_variance_xy_ = from.propagation_variance_xy_;
    }
    if (cached_has_bits & 0x00000080u) {
      propagation_variance_z_ = from.propagation_variance_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_boostup_history_size_minimum(from._internal_boostup_history_size_minimum());
  }
}

void KalmanFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.KalmanFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KalmanFilterConfig::CopyFrom(const KalmanFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.KalmanFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KalmanFilterConfig::IsInitialized() const {
  return true;
}

void KalmanFilterConfig::InternalSwap(KalmanFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_adaptive_, other->use_adaptive_);
  swap(use_convergence_boostup_, other->use_convergence_boostup_);
  swap(converged_confidence_minimum_, other->converged_confidence_minimum_);
  swap(noise_maximum_, other->noise_maximum_);
  swap(centroid_measurement_noise_, other->centroid_measurement_noise_);
  swap(centroid_init_velocity_variance_, other->centroid_init_velocity_variance_);
  swap(propagation_variance_xy_, other->propagation_variance_xy_);
  swap(propagation_variance_z_, other->propagation_variance_z_);
  swap(boostup_history_size_minimum_, other->boostup_history_size_minimum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KalmanFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackerConfig::InitAsDefaultInstance() {
}
class TrackerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackerConfig>()._has_bits_);
  static void set_has_filter_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_separate_fore_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_;
TrackerConfig::TrackerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.TrackerConfig)
}
TrackerConfig::TrackerConfig(const TrackerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_name_.UnsafeSetDefault(&::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get());
  if (from._internal_has_filter_name()) {
    filter_name_.AssignWithDefault(&::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get(), from.filter_name_);
  }
  separate_fore_background_ = from.separate_fore_background_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.TrackerConfig)
}

void TrackerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base);
  filter_name_.UnsafeSetDefault(&::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get());
  separate_fore_background_ = false;
}

TrackerConfig::~TrackerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.TrackerConfig)
  SharedDtor();
}

void TrackerConfig::SharedDtor() {
  filter_name_.DestroyNoArena(&::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get());
}

void TrackerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackerConfig& TrackerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrackerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.TrackerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filter_name_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get());
  }
  separate_fore_background_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrackerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string filter_name = 1 [default = "KalmanFilter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.TrackerConfig.filter_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool separate_fore_background = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_separate_fore_background(&has_bits);
          separate_fore_background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.TrackerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter_name = 1 [default = "KalmanFilter"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_name().data(), static_cast<int>(this->_internal_filter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.TrackerConfig.filter_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_name(), target);
  }

  // optional bool separate_fore_background = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_separate_fore_background(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.TrackerConfig)
  return target;
}

size_t TrackerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.TrackerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filter_name = 1 [default = "KalmanFilter"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_name());
    }

    // optional bool separate_fore_background = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.TrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.TrackerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.TrackerConfig)
    MergeFrom(*source);
  }
}

void TrackerConfig::MergeFrom(const TrackerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.TrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filter_name_.AssignWithDefault(&::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get(), from.filter_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      separate_fore_background_ = from.separate_fore_background_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.TrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerConfig::CopyFrom(const TrackerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.TrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerConfig::IsInitialized() const {
  return true;
}

void TrackerConfig::InternalSwap(TrackerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_name_.Swap(&other->filter_name_, &::apollo::perception::lidar::TrackerConfig::_i_give_permission_to_break_this_code_default_filter_name_.get(),
    GetArenaNoVirtual());
  swap(separate_fore_background_, other->separate_fore_background_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HmMultiTargetTrackerConfig::InitAsDefaultInstance() {
}
class HmMultiTargetTrackerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HmMultiTargetTrackerConfig>()._has_bits_);
  static void set_has_filter_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_foreground_mathcer_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_background_matcher_method(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_histogram_for_match(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_histogram_bin_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_;
HmMultiTargetTrackerConfig::HmMultiTargetTrackerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.HmMultiTargetTrackerConfig)
}
HmMultiTargetTrackerConfig::HmMultiTargetTrackerConfig(const HmMultiTargetTrackerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_method_.UnsafeSetDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get());
  if (from._internal_has_filter_method()) {
    filter_method_.AssignWithDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get(), from.filter_method_);
  }
  foreground_mathcer_method_.UnsafeSetDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  if (from._internal_has_foreground_mathcer_method()) {
    foreground_mathcer_method_.AssignWithDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(), from.foreground_mathcer_method_);
  }
  background_matcher_method_.UnsafeSetDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
  if (from._internal_has_background_matcher_method()) {
    background_matcher_method_.AssignWithDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(), from.background_matcher_method_);
  }
  ::memcpy(&use_histogram_for_match_, &from.use_histogram_for_match_,
    static_cast<size_t>(reinterpret_cast<char*>(&histogram_bin_size_) -
    reinterpret_cast<char*>(&use_histogram_for_match_)) + sizeof(histogram_bin_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.HmMultiTargetTrackerConfig)
}

void HmMultiTargetTrackerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HmMultiTargetTrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base);
  filter_method_.UnsafeSetDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get());
  foreground_mathcer_method_.UnsafeSetDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  background_matcher_method_.UnsafeSetDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
  use_histogram_for_match_ = true;
  histogram_bin_size_ = 10;
}

HmMultiTargetTrackerConfig::~HmMultiTargetTrackerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  SharedDtor();
}

void HmMultiTargetTrackerConfig::SharedDtor() {
  filter_method_.DestroyNoArena(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get());
  foreground_mathcer_method_.DestroyNoArena(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  background_matcher_method_.DestroyNoArena(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
}

void HmMultiTargetTrackerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HmMultiTargetTrackerConfig& HmMultiTargetTrackerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HmMultiTargetTrackerConfig_modules_2fperception_2fproto_2fhm_5ftracker_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HmMultiTargetTrackerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      filter_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      foreground_mathcer_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      background_matcher_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
    }
    use_histogram_for_match_ = true;
    histogram_bin_size_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HmMultiTargetTrackerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string filter_method = 1 [default = "KalmanFilter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.HmMultiTargetTrackerConfig.filter_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string foreground_mathcer_method = 2 [default = "MultiHmBipartiteGraphMatcher"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_foreground_mathcer_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.HmMultiTargetTrackerConfig.foreground_mathcer_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string background_matcher_method = 3 [default = "GnnBipartiteGraphMatcher"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_background_matcher_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.HmMultiTargetTrackerConfig.background_matcher_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_histogram_for_match = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_histogram_for_match(&has_bits);
          use_histogram_for_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float histogram_bin_size = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_histogram_bin_size(&has_bits);
          histogram_bin_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HmMultiTargetTrackerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter_method = 1 [default = "KalmanFilter"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filter_method().data(), static_cast<int>(this->_internal_filter_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.HmMultiTargetTrackerConfig.filter_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_method(), target);
  }

  // optional string foreground_mathcer_method = 2 [default = "MultiHmBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_foreground_mathcer_method().data(), static_cast<int>(this->_internal_foreground_mathcer_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.HmMultiTargetTrackerConfig.foreground_mathcer_method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_foreground_mathcer_method(), target);
  }

  // optional string background_matcher_method = 3 [default = "GnnBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background_matcher_method().data(), static_cast<int>(this->_internal_background_matcher_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.HmMultiTargetTrackerConfig.background_matcher_method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_background_matcher_method(), target);
  }

  // optional bool use_histogram_for_match = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_histogram_for_match(), target);
  }

  // optional float histogram_bin_size = 5 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_histogram_bin_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  return target;
}

size_t HmMultiTargetTrackerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string filter_method = 1 [default = "KalmanFilter"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filter_method());
    }

    // optional string foreground_mathcer_method = 2 [default = "MultiHmBipartiteGraphMatcher"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foreground_mathcer_method());
    }

    // optional string background_matcher_method = 3 [default = "GnnBipartiteGraphMatcher"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_matcher_method());
    }

    // optional bool use_histogram_for_match = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float histogram_bin_size = 5 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HmMultiTargetTrackerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HmMultiTargetTrackerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HmMultiTargetTrackerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.HmMultiTargetTrackerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.HmMultiTargetTrackerConfig)
    MergeFrom(*source);
  }
}

void HmMultiTargetTrackerConfig::MergeFrom(const HmMultiTargetTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filter_method_.AssignWithDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get(), from.filter_method_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      foreground_mathcer_method_.AssignWithDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(), from.foreground_mathcer_method_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      background_matcher_method_.AssignWithDefault(&::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(), from.background_matcher_method_);
    }
    if (cached_has_bits & 0x00000008u) {
      use_histogram_for_match_ = from.use_histogram_for_match_;
    }
    if (cached_has_bits & 0x00000010u) {
      histogram_bin_size_ = from.histogram_bin_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HmMultiTargetTrackerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmMultiTargetTrackerConfig::CopyFrom(const HmMultiTargetTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.HmMultiTargetTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmMultiTargetTrackerConfig::IsInitialized() const {
  return true;
}

void HmMultiTargetTrackerConfig::InternalSwap(HmMultiTargetTrackerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_method_.Swap(&other->filter_method_, &::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_filter_method_.get(),
    GetArenaNoVirtual());
  foreground_mathcer_method_.Swap(&other->foreground_mathcer_method_, &::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(),
    GetArenaNoVirtual());
  background_matcher_method_.Swap(&other->background_matcher_method_, &::apollo::perception::lidar::HmMultiTargetTrackerConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(),
    GetArenaNoVirtual());
  swap(use_histogram_for_match_, other->use_histogram_for_match_);
  swap(histogram_bin_size_, other->histogram_bin_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HmMultiTargetTrackerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::ObjectTrackMatcherConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::ObjectTrackMatcherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::ObjectTrackMatcherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::KalmanFilterConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::KalmanFilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::KalmanFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::TrackerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::TrackerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::TrackerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::HmMultiTargetTrackerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::HmMultiTargetTrackerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::HmMultiTargetTrackerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
