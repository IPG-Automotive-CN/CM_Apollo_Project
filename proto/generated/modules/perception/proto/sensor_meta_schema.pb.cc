// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/sensor_meta_schema.proto

#include "modules/perception/proto/sensor_meta_schema.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto;
namespace apollo {
namespace perception {
class SensorMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorMeta> _instance;
} _SensorMeta_default_instance_;
class MultiSensorMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiSensorMeta> _instance;
} _MultiSensorMeta_default_instance_;
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_MultiSensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_MultiSensorMeta_default_instance_;
    new (ptr) ::apollo::perception::MultiSensorMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::MultiSensorMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiSensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiSensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto}, {
      &scc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base,}};

static void InitDefaultsscc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_SensorMeta_default_instance_;
    new (ptr) ::apollo::perception::SensorMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::SensorMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::SensorMeta, orientation_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MultiSensorMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MultiSensorMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::MultiSensorMeta, sensor_meta_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::perception::SensorMeta)},
  { 11, 17, sizeof(::apollo::perception::MultiSensorMeta)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_SensorMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::_MultiSensorMeta_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/perception/proto/sensor_meta_s"
  "chema.proto\022\021apollo.perception\"\255\004\n\nSenso"
  "rMeta\022\014\n\004name\030\001 \001(\t\0226\n\004type\030\002 \001(\0162(.apol"
  "lo.perception.SensorMeta.SensorType\022D\n\013o"
  "rientation\030\003 \001(\0162/.apollo.perception.Sen"
  "sorMeta.SensorOrientation\"\367\001\n\nSensorType"
  "\022 \n\023UNKNOWN_SENSOR_TYPE\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013VE"
  "LODYNE_64\020\000\022\017\n\013VELODYNE_32\020\001\022\017\n\013VELODYNE"
  "_16\020\002\022\r\n\tLDLIDAR_4\020\003\022\r\n\tLDLIDAR_1\020\004\022\025\n\021S"
  "HORT_RANGE_RADAR\020\005\022\024\n\020LONG_RANGE_RADAR\020\006"
  "\022\024\n\020MONOCULAR_CAMERA\020\007\022\021\n\rSTEREO_CAMERA\020"
  "\010\022\016\n\nULTRASONIC\020\t\022\020\n\014VELODYNE_128\020\n\"\230\001\n\021"
  "SensorOrientation\022\t\n\005FRONT\020\000\022\020\n\014LEFT_FOR"
  "WARD\020\001\022\010\n\004LEFT\020\002\022\021\n\rLEFT_BACKWARD\020\003\022\010\n\004R"
  "EAR\020\004\022\022\n\016RIGHT_BACKWARD\020\005\022\t\n\005RIGHT\020\006\022\021\n\r"
  "RIGHT_FORWARD\020\007\022\r\n\tPANORAMIC\020\010\"E\n\017MultiS"
  "ensorMeta\0222\n\013sensor_meta\030\001 \003(\0132\035.apollo."
  "perception.SensorMeta"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_sccs[2] = {
  &scc_info_MultiSensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base,
  &scc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto, "modules/perception/proto/sensor_meta_schema.proto", 701,
  &descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto, 2, file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto), true);
namespace apollo {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMeta_SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[0];
}
bool SensorMeta_SensorType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorMeta_SensorType SensorMeta::UNKNOWN_SENSOR_TYPE;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_64;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_32;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_16;
constexpr SensorMeta_SensorType SensorMeta::LDLIDAR_4;
constexpr SensorMeta_SensorType SensorMeta::LDLIDAR_1;
constexpr SensorMeta_SensorType SensorMeta::SHORT_RANGE_RADAR;
constexpr SensorMeta_SensorType SensorMeta::LONG_RANGE_RADAR;
constexpr SensorMeta_SensorType SensorMeta::MONOCULAR_CAMERA;
constexpr SensorMeta_SensorType SensorMeta::STEREO_CAMERA;
constexpr SensorMeta_SensorType SensorMeta::ULTRASONIC;
constexpr SensorMeta_SensorType SensorMeta::VELODYNE_128;
constexpr SensorMeta_SensorType SensorMeta::SensorType_MIN;
constexpr SensorMeta_SensorType SensorMeta::SensorType_MAX;
constexpr int SensorMeta::SensorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorMeta_SensorOrientation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto[1];
}
bool SensorMeta_SensorOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorMeta_SensorOrientation SensorMeta::FRONT;
constexpr SensorMeta_SensorOrientation SensorMeta::LEFT_FORWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::LEFT;
constexpr SensorMeta_SensorOrientation SensorMeta::LEFT_BACKWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::REAR;
constexpr SensorMeta_SensorOrientation SensorMeta::RIGHT_BACKWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::RIGHT;
constexpr SensorMeta_SensorOrientation SensorMeta::RIGHT_FORWARD;
constexpr SensorMeta_SensorOrientation SensorMeta::PANORAMIC;
constexpr SensorMeta_SensorOrientation SensorMeta::SensorOrientation_MIN;
constexpr SensorMeta_SensorOrientation SensorMeta::SensorOrientation_MAX;
constexpr int SensorMeta::SensorOrientation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SensorMeta::InitAsDefaultInstance() {
}
class SensorMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorMeta>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorMeta::SensorMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.SensorMeta)
}
SensorMeta::SensorMeta(const SensorMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&orientation_, &from.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&orientation_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.SensorMeta)
}

void SensorMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orientation_ = 0;
  type_ = -1;
}

SensorMeta::~SensorMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.SensorMeta)
  SharedDtor();
}

void SensorMeta::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorMeta& SensorMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base);
  return *internal_default_instance();
}


void SensorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.SensorMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    orientation_ = 0;
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SensorMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.SensorMeta.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.SensorMeta.SensorType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::SensorMeta_SensorType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::SensorMeta_SensorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::SensorMeta_SensorOrientation_IsValid(val))) {
            _internal_set_orientation(static_cast<::apollo::perception::SensorMeta_SensorOrientation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.SensorMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.perception.SensorMeta.SensorType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.SensorMeta)
  return target;
}

size_t SensorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.SensorMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orientation());
    }

    // optional .apollo.perception.SensorMeta.SensorType type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.SensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.SensorMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.SensorMeta)
    MergeFrom(*source);
  }
}

void SensorMeta::MergeFrom(const SensorMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.SensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.SensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMeta::CopyFrom(const SensorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.SensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeta::IsInitialized() const {
  return true;
}

void SensorMeta::InternalSwap(SensorMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orientation_, other->orientation_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiSensorMeta::InitAsDefaultInstance() {
}
class MultiSensorMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiSensorMeta>()._has_bits_);
};

MultiSensorMeta::MultiSensorMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.MultiSensorMeta)
}
MultiSensorMeta::MultiSensorMeta(const MultiSensorMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensor_meta_(from.sensor_meta_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.MultiSensorMeta)
}

void MultiSensorMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiSensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base);
}

MultiSensorMeta::~MultiSensorMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.MultiSensorMeta)
  SharedDtor();
}

void MultiSensorMeta::SharedDtor() {
}

void MultiSensorMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiSensorMeta& MultiSensorMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiSensorMeta_modules_2fperception_2fproto_2fsensor_5fmeta_5fschema_2eproto.base);
  return *internal_default_instance();
}


void MultiSensorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.MultiSensorMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_meta_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MultiSensorMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.SensorMeta sensor_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_meta(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiSensorMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.MultiSensorMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sensor_meta_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sensor_meta(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.MultiSensorMeta)
  return target;
}

size_t MultiSensorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.MultiSensorMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  total_size += 1UL * this->_internal_sensor_meta_size();
  for (const auto& msg : this->sensor_meta_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiSensorMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.MultiSensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiSensorMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiSensorMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.MultiSensorMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.MultiSensorMeta)
    MergeFrom(*source);
  }
}

void MultiSensorMeta::MergeFrom(const MultiSensorMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.MultiSensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_meta_.MergeFrom(from.sensor_meta_);
}

void MultiSensorMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.MultiSensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSensorMeta::CopyFrom(const MultiSensorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.MultiSensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSensorMeta::IsInitialized() const {
  return true;
}

void MultiSensorMeta::InternalSwap(MultiSensorMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_meta_.InternalSwap(&other->sensor_meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSensorMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::SensorMeta* Arena::CreateMaybeMessage< ::apollo::perception::SensorMeta >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::SensorMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::MultiSensorMeta* Arena::CreateMaybeMessage< ::apollo::perception::MultiSensorMeta >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::MultiSensorMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
