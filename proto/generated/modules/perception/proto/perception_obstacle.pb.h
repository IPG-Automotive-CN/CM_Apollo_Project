// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/map/proto/map_lane.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
namespace apollo {
namespace perception {
class BBox2D;
class BBox2DDefaultTypeInternal;
extern BBox2DDefaultTypeInternal _BBox2D_default_instance_;
class CIPVInfo;
class CIPVInfoDefaultTypeInternal;
extern CIPVInfoDefaultTypeInternal _CIPVInfo_default_instance_;
class LaneMarker;
class LaneMarkerDefaultTypeInternal;
extern LaneMarkerDefaultTypeInternal _LaneMarker_default_instance_;
class LaneMarkers;
class LaneMarkersDefaultTypeInternal;
extern LaneMarkersDefaultTypeInternal _LaneMarkers_default_instance_;
class LightStatus;
class LightStatusDefaultTypeInternal;
extern LightStatusDefaultTypeInternal _LightStatus_default_instance_;
class PerceptionObstacle;
class PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class PerceptionObstacles;
class PerceptionObstaclesDefaultTypeInternal;
extern PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
class SensorMeasurement;
class SensorMeasurementDefaultTypeInternal;
extern SensorMeasurementDefaultTypeInternal _SensorMeasurement_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::BBox2D* Arena::CreateMaybeMessage<::apollo::perception::BBox2D>(Arena*);
template<> ::apollo::perception::CIPVInfo* Arena::CreateMaybeMessage<::apollo::perception::CIPVInfo>(Arena*);
template<> ::apollo::perception::LaneMarker* Arena::CreateMaybeMessage<::apollo::perception::LaneMarker>(Arena*);
template<> ::apollo::perception::LaneMarkers* Arena::CreateMaybeMessage<::apollo::perception::LaneMarkers>(Arena*);
template<> ::apollo::perception::LightStatus* Arena::CreateMaybeMessage<::apollo::perception::LightStatus>(Arena*);
template<> ::apollo::perception::PerceptionObstacle* Arena::CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(Arena*);
template<> ::apollo::perception::PerceptionObstacles* Arena::CreateMaybeMessage<::apollo::perception::PerceptionObstacles>(Arena*);
template<> ::apollo::perception::SensorMeasurement* Arena::CreateMaybeMessage<::apollo::perception::SensorMeasurement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

enum PerceptionObstacle_Type : int {
  PerceptionObstacle_Type_UNKNOWN = 0,
  PerceptionObstacle_Type_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_Type_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_Type_PEDESTRIAN = 3,
  PerceptionObstacle_Type_BICYCLE = 4,
  PerceptionObstacle_Type_VEHICLE = 5
};
bool PerceptionObstacle_Type_IsValid(int value);
constexpr PerceptionObstacle_Type PerceptionObstacle_Type_Type_MIN = PerceptionObstacle_Type_UNKNOWN;
constexpr PerceptionObstacle_Type PerceptionObstacle_Type_Type_MAX = PerceptionObstacle_Type_VEHICLE;
constexpr int PerceptionObstacle_Type_Type_ARRAYSIZE = PerceptionObstacle_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_Type_descriptor();
template<typename T>
inline const std::string& PerceptionObstacle_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerceptionObstacle_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerceptionObstacle_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerceptionObstacle_Type_descriptor(), enum_t_value);
}
inline bool PerceptionObstacle_Type_Parse(
    const std::string& name, PerceptionObstacle_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerceptionObstacle_Type>(
    PerceptionObstacle_Type_descriptor(), name, value);
}
enum PerceptionObstacle_ConfidenceType : int {
  PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN = 0,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN = 1,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR = 2
};
bool PerceptionObstacle_ConfidenceType_IsValid(int value);
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MIN = PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
constexpr PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MAX = PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
constexpr int PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE = PerceptionObstacle_ConfidenceType_ConfidenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor();
template<typename T>
inline const std::string& PerceptionObstacle_ConfidenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerceptionObstacle_ConfidenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerceptionObstacle_ConfidenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerceptionObstacle_ConfidenceType_descriptor(), enum_t_value);
}
inline bool PerceptionObstacle_ConfidenceType_Parse(
    const std::string& name, PerceptionObstacle_ConfidenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerceptionObstacle_ConfidenceType>(
    PerceptionObstacle_ConfidenceType_descriptor(), name, value);
}
enum PerceptionObstacle_SubType : int {
  PerceptionObstacle_SubType_ST_UNKNOWN = 0,
  PerceptionObstacle_SubType_ST_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_SubType_ST_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_SubType_ST_CAR = 3,
  PerceptionObstacle_SubType_ST_VAN = 4,
  PerceptionObstacle_SubType_ST_TRUCK = 5,
  PerceptionObstacle_SubType_ST_BUS = 6,
  PerceptionObstacle_SubType_ST_CYCLIST = 7,
  PerceptionObstacle_SubType_ST_MOTORCYCLIST = 8,
  PerceptionObstacle_SubType_ST_TRICYCLIST = 9,
  PerceptionObstacle_SubType_ST_PEDESTRIAN = 10,
  PerceptionObstacle_SubType_ST_TRAFFICCONE = 11
};
bool PerceptionObstacle_SubType_IsValid(int value);
constexpr PerceptionObstacle_SubType PerceptionObstacle_SubType_SubType_MIN = PerceptionObstacle_SubType_ST_UNKNOWN;
constexpr PerceptionObstacle_SubType PerceptionObstacle_SubType_SubType_MAX = PerceptionObstacle_SubType_ST_TRAFFICCONE;
constexpr int PerceptionObstacle_SubType_SubType_ARRAYSIZE = PerceptionObstacle_SubType_SubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PerceptionObstacle_SubType_descriptor();
template<typename T>
inline const std::string& PerceptionObstacle_SubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerceptionObstacle_SubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerceptionObstacle_SubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PerceptionObstacle_SubType_descriptor(), enum_t_value);
}
inline bool PerceptionObstacle_SubType_Parse(
    const std::string& name, PerceptionObstacle_SubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PerceptionObstacle_SubType>(
    PerceptionObstacle_SubType_descriptor(), name, value);
}
// ===================================================================

class BBox2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.BBox2D) */ {
 public:
  BBox2D();
  virtual ~BBox2D();

  BBox2D(const BBox2D& from);
  BBox2D(BBox2D&& from) noexcept
    : BBox2D() {
    *this = ::std::move(from);
  }

  inline BBox2D& operator=(const BBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox2D& operator=(BBox2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BBox2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BBox2D* internal_default_instance() {
    return reinterpret_cast<const BBox2D*>(
               &_BBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BBox2D& a, BBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBox2D* New() const final {
    return CreateMaybeMessage<BBox2D>(nullptr);
  }

  BBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBox2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBox2D& from);
  void MergeFrom(const BBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.BBox2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
  };
  // optional double xmin = 1;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  double xmin() const;
  void set_xmin(double value);
  private:
  double _internal_xmin() const;
  void _internal_set_xmin(double value);
  public:

  // optional double ymin = 2;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  double ymin() const;
  void set_ymin(double value);
  private:
  double _internal_ymin() const;
  void _internal_set_ymin(double value);
  public:

  // optional double xmax = 3;
  bool has_xmax() const;
  private:
  bool _internal_has_xmax() const;
  public:
  void clear_xmax();
  double xmax() const;
  void set_xmax(double value);
  private:
  double _internal_xmax() const;
  void _internal_set_xmax(double value);
  public:

  // optional double ymax = 4;
  bool has_ymax() const;
  private:
  bool _internal_has_ymax() const;
  public:
  void clear_ymax();
  double ymax() const;
  void set_ymax(double value);
  private:
  double _internal_ymax() const;
  void _internal_set_ymax(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.BBox2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double xmin_;
  double ymin_;
  double xmax_;
  double ymax_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class LightStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LightStatus) */ {
 public:
  LightStatus();
  virtual ~LightStatus();

  LightStatus(const LightStatus& from);
  LightStatus(LightStatus&& from) noexcept
    : LightStatus() {
    *this = ::std::move(from);
  }

  inline LightStatus& operator=(const LightStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightStatus& operator=(LightStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LightStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightStatus* internal_default_instance() {
    return reinterpret_cast<const LightStatus*>(
               &_LightStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LightStatus& a, LightStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LightStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightStatus* New() const final {
    return CreateMaybeMessage<LightStatus>(nullptr);
  }

  LightStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LightStatus& from);
  void MergeFrom(const LightStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.LightStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrakeVisibleFieldNumber = 1,
    kBrakeSwitchOnFieldNumber = 2,
    kLeftTurnVisibleFieldNumber = 3,
    kLeftTurnSwitchOnFieldNumber = 4,
    kRightTurnVisibleFieldNumber = 5,
    kRightTurnSwitchOnFieldNumber = 6,
  };
  // optional double brake_visible = 1;
  bool has_brake_visible() const;
  private:
  bool _internal_has_brake_visible() const;
  public:
  void clear_brake_visible();
  double brake_visible() const;
  void set_brake_visible(double value);
  private:
  double _internal_brake_visible() const;
  void _internal_set_brake_visible(double value);
  public:

  // optional double brake_switch_on = 2;
  bool has_brake_switch_on() const;
  private:
  bool _internal_has_brake_switch_on() const;
  public:
  void clear_brake_switch_on();
  double brake_switch_on() const;
  void set_brake_switch_on(double value);
  private:
  double _internal_brake_switch_on() const;
  void _internal_set_brake_switch_on(double value);
  public:

  // optional double left_turn_visible = 3;
  bool has_left_turn_visible() const;
  private:
  bool _internal_has_left_turn_visible() const;
  public:
  void clear_left_turn_visible();
  double left_turn_visible() const;
  void set_left_turn_visible(double value);
  private:
  double _internal_left_turn_visible() const;
  void _internal_set_left_turn_visible(double value);
  public:

  // optional double left_turn_switch_on = 4;
  bool has_left_turn_switch_on() const;
  private:
  bool _internal_has_left_turn_switch_on() const;
  public:
  void clear_left_turn_switch_on();
  double left_turn_switch_on() const;
  void set_left_turn_switch_on(double value);
  private:
  double _internal_left_turn_switch_on() const;
  void _internal_set_left_turn_switch_on(double value);
  public:

  // optional double right_turn_visible = 5;
  bool has_right_turn_visible() const;
  private:
  bool _internal_has_right_turn_visible() const;
  public:
  void clear_right_turn_visible();
  double right_turn_visible() const;
  void set_right_turn_visible(double value);
  private:
  double _internal_right_turn_visible() const;
  void _internal_set_right_turn_visible(double value);
  public:

  // optional double right_turn_switch_on = 6;
  bool has_right_turn_switch_on() const;
  private:
  bool _internal_has_right_turn_switch_on() const;
  public:
  void clear_right_turn_switch_on();
  double right_turn_switch_on() const;
  void set_right_turn_switch_on(double value);
  private:
  double _internal_right_turn_switch_on() const;
  void _internal_set_right_turn_switch_on(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.LightStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double brake_visible_;
  double brake_switch_on_;
  double left_turn_visible_;
  double left_turn_switch_on_;
  double right_turn_visible_;
  double right_turn_switch_on_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class SensorMeasurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.SensorMeasurement) */ {
 public:
  SensorMeasurement();
  virtual ~SensorMeasurement();

  SensorMeasurement(const SensorMeasurement& from);
  SensorMeasurement(SensorMeasurement&& from) noexcept
    : SensorMeasurement() {
    *this = ::std::move(from);
  }

  inline SensorMeasurement& operator=(const SensorMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorMeasurement& operator=(SensorMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMeasurement* internal_default_instance() {
    return reinterpret_cast<const SensorMeasurement*>(
               &_SensorMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorMeasurement& a, SensorMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorMeasurement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorMeasurement* New() const final {
    return CreateMaybeMessage<SensorMeasurement>(nullptr);
  }

  SensorMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorMeasurement& from);
  void MergeFrom(const SensorMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.SensorMeasurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIdFieldNumber = 1,
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 8,
    kBoxFieldNumber = 12,
    kThetaFieldNumber = 4,
    kLengthFieldNumber = 5,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 9,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kTimestampFieldNumber = 11,
    kSubTypeFieldNumber = 10,
  };
  // optional string sensor_id = 1;
  bool has_sensor_id() const;
  private:
  bool _internal_has_sensor_id() const;
  public:
  void clear_sensor_id();
  const std::string& sensor_id() const;
  void set_sensor_id(const std::string& value);
  void set_sensor_id(std::string&& value);
  void set_sensor_id(const char* value);
  void set_sensor_id(const char* value, size_t size);
  std::string* mutable_sensor_id();
  std::string* release_sensor_id();
  void set_allocated_sensor_id(std::string* sensor_id);
  private:
  const std::string& _internal_sensor_id() const;
  void _internal_set_sensor_id(const std::string& value);
  std::string* _internal_mutable_sensor_id();
  public:

  // optional .apollo.common.Point3D position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:

  // optional .apollo.common.Point3D velocity = 8;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::common::Point3D& velocity() const;
  ::apollo::common::Point3D* release_velocity();
  ::apollo::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);
  private:
  const ::apollo::common::Point3D& _internal_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_velocity();
  public:

  // optional .apollo.perception.BBox2D box = 12;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::apollo::perception::BBox2D& box() const;
  ::apollo::perception::BBox2D* release_box();
  ::apollo::perception::BBox2D* mutable_box();
  void set_allocated_box(::apollo::perception::BBox2D* box);
  private:
  const ::apollo::perception::BBox2D& _internal_box() const;
  ::apollo::perception::BBox2D* _internal_mutable_box();
  public:

  // optional double theta = 4;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double length = 5;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.perception.PerceptionObstacle.Type type = 9;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_type() const;
  void _internal_set_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::apollo::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);
  private:
  ::apollo::perception::PerceptionObstacle_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.SensorMeasurement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_id_;
  ::apollo::common::Point3D* position_;
  ::apollo::common::Point3D* velocity_;
  ::apollo::perception::BBox2D* box_;
  double theta_;
  double length_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  double width_;
  double height_;
  double timestamp_;
  int sub_type_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PerceptionObstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacle) */ {
 public:
  PerceptionObstacle();
  virtual ~PerceptionObstacle();

  PerceptionObstacle(const PerceptionObstacle& from);
  PerceptionObstacle(PerceptionObstacle&& from) noexcept
    : PerceptionObstacle() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionObstacle& operator=(PerceptionObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerceptionObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObstacle* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacle*>(
               &_PerceptionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerceptionObstacle& a, PerceptionObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionObstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacle* New() const final {
    return CreateMaybeMessage<PerceptionObstacle>(nullptr);
  }

  PerceptionObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerceptionObstacle& from);
  void MergeFrom(const PerceptionObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionObstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PerceptionObstacle_Type Type;
  static constexpr Type UNKNOWN =
    PerceptionObstacle_Type_UNKNOWN;
  static constexpr Type UNKNOWN_MOVABLE =
    PerceptionObstacle_Type_UNKNOWN_MOVABLE;
  static constexpr Type UNKNOWN_UNMOVABLE =
    PerceptionObstacle_Type_UNKNOWN_UNMOVABLE;
  static constexpr Type PEDESTRIAN =
    PerceptionObstacle_Type_PEDESTRIAN;
  static constexpr Type BICYCLE =
    PerceptionObstacle_Type_BICYCLE;
  static constexpr Type VEHICLE =
    PerceptionObstacle_Type_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return PerceptionObstacle_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PerceptionObstacle_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PerceptionObstacle_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PerceptionObstacle_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return PerceptionObstacle_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PerceptionObstacle_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return PerceptionObstacle_Type_Parse(name, value);
  }

  typedef PerceptionObstacle_ConfidenceType ConfidenceType;
  static constexpr ConfidenceType CONFIDENCE_UNKNOWN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
  static constexpr ConfidenceType CONFIDENCE_CNN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN;
  static constexpr ConfidenceType CONFIDENCE_RADAR =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
  static inline bool ConfidenceType_IsValid(int value) {
    return PerceptionObstacle_ConfidenceType_IsValid(value);
  }
  static constexpr ConfidenceType ConfidenceType_MIN =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MIN;
  static constexpr ConfidenceType ConfidenceType_MAX =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MAX;
  static constexpr int ConfidenceType_ARRAYSIZE =
    PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConfidenceType_descriptor() {
    return PerceptionObstacle_ConfidenceType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConfidenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConfidenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConfidenceType_Name.");
    return PerceptionObstacle_ConfidenceType_Name(enum_t_value);
  }
  static inline bool ConfidenceType_Parse(const std::string& name,
      ConfidenceType* value) {
    return PerceptionObstacle_ConfidenceType_Parse(name, value);
  }

  typedef PerceptionObstacle_SubType SubType;
  static constexpr SubType ST_UNKNOWN =
    PerceptionObstacle_SubType_ST_UNKNOWN;
  static constexpr SubType ST_UNKNOWN_MOVABLE =
    PerceptionObstacle_SubType_ST_UNKNOWN_MOVABLE;
  static constexpr SubType ST_UNKNOWN_UNMOVABLE =
    PerceptionObstacle_SubType_ST_UNKNOWN_UNMOVABLE;
  static constexpr SubType ST_CAR =
    PerceptionObstacle_SubType_ST_CAR;
  static constexpr SubType ST_VAN =
    PerceptionObstacle_SubType_ST_VAN;
  static constexpr SubType ST_TRUCK =
    PerceptionObstacle_SubType_ST_TRUCK;
  static constexpr SubType ST_BUS =
    PerceptionObstacle_SubType_ST_BUS;
  static constexpr SubType ST_CYCLIST =
    PerceptionObstacle_SubType_ST_CYCLIST;
  static constexpr SubType ST_MOTORCYCLIST =
    PerceptionObstacle_SubType_ST_MOTORCYCLIST;
  static constexpr SubType ST_TRICYCLIST =
    PerceptionObstacle_SubType_ST_TRICYCLIST;
  static constexpr SubType ST_PEDESTRIAN =
    PerceptionObstacle_SubType_ST_PEDESTRIAN;
  static constexpr SubType ST_TRAFFICCONE =
    PerceptionObstacle_SubType_ST_TRAFFICCONE;
  static inline bool SubType_IsValid(int value) {
    return PerceptionObstacle_SubType_IsValid(value);
  }
  static constexpr SubType SubType_MIN =
    PerceptionObstacle_SubType_SubType_MIN;
  static constexpr SubType SubType_MAX =
    PerceptionObstacle_SubType_SubType_MAX;
  static constexpr int SubType_ARRAYSIZE =
    PerceptionObstacle_SubType_SubType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubType_descriptor() {
    return PerceptionObstacle_SubType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubType_Name.");
    return PerceptionObstacle_SubType_Name(enum_t_value);
  }
  static inline bool SubType_Parse(const std::string& name,
      SubType* value) {
    return PerceptionObstacle_SubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 8,
    kPointCloudFieldNumber = 12,
    kDropsFieldNumber = 15,
    kMeasurementsFieldNumber = 20,
    kPositionCovarianceFieldNumber = 22,
    kVelocityCovarianceFieldNumber = 23,
    kAccelerationCovarianceFieldNumber = 24,
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 4,
    kAccelerationFieldNumber = 16,
    kAnchorPointFieldNumber = 17,
    kBbox2DFieldNumber = 18,
    kLightStatusFieldNumber = 25,
    kThetaFieldNumber = 3,
    kLengthFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 10,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kTrackingTimeFieldNumber = 9,
    kTimestampFieldNumber = 11,
    kConfidenceFieldNumber = 13,
    kConfidenceTypeFieldNumber = 14,
    kSubTypeFieldNumber = 19,
    kHeightAboveGroundFieldNumber = 21,
  };
  // repeated .apollo.common.Point3D polygon_point = 8;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::common::Point3D* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_polygon_point();
  private:
  const ::apollo::common::Point3D& _internal_polygon_point(int index) const;
  ::apollo::common::Point3D* _internal_add_polygon_point();
  public:
  const ::apollo::common::Point3D& polygon_point(int index) const;
  ::apollo::common::Point3D* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      polygon_point() const;

  // repeated double point_cloud = 12 [packed = true];
  int point_cloud_size() const;
  private:
  int _internal_point_cloud_size() const;
  public:
  void clear_point_cloud();
  private:
  double _internal_point_cloud(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_point_cloud() const;
  void _internal_add_point_cloud(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_point_cloud();
  public:
  double point_cloud(int index) const;
  void set_point_cloud(int index, double value);
  void add_point_cloud(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      point_cloud() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_point_cloud();

  // repeated .apollo.common.Point3D drops = 15 [deprecated = true];
  PROTOBUF_DEPRECATED int drops_size() const;
  private:
  int _internal_drops_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_drops();
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* mutable_drops(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_drops();
  private:
  const ::apollo::common::Point3D& _internal_drops(int index) const;
  ::apollo::common::Point3D* _internal_add_drops();
  public:
  PROTOBUF_DEPRECATED const ::apollo::common::Point3D& drops(int index) const;
  PROTOBUF_DEPRECATED ::apollo::common::Point3D* add_drops();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
      drops() const;

  // repeated .apollo.perception.SensorMeasurement measurements = 20;
  int measurements_size() const;
  private:
  int _internal_measurements_size() const;
  public:
  void clear_measurements();
  ::apollo::perception::SensorMeasurement* mutable_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::SensorMeasurement >*
      mutable_measurements();
  private:
  const ::apollo::perception::SensorMeasurement& _internal_measurements(int index) const;
  ::apollo::perception::SensorMeasurement* _internal_add_measurements();
  public:
  const ::apollo::perception::SensorMeasurement& measurements(int index) const;
  ::apollo::perception::SensorMeasurement* add_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::SensorMeasurement >&
      measurements() const;

  // repeated double position_covariance = 22 [packed = true];
  int position_covariance_size() const;
  private:
  int _internal_position_covariance_size() const;
  public:
  void clear_position_covariance();
  private:
  double _internal_position_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position_covariance() const;
  void _internal_add_position_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position_covariance();
  public:
  double position_covariance(int index) const;
  void set_position_covariance(int index, double value);
  void add_position_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position_covariance();

  // repeated double velocity_covariance = 23 [packed = true];
  int velocity_covariance_size() const;
  private:
  int _internal_velocity_covariance_size() const;
  public:
  void clear_velocity_covariance();
  private:
  double _internal_velocity_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity_covariance() const;
  void _internal_add_velocity_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity_covariance();
  public:
  double velocity_covariance(int index) const;
  void set_velocity_covariance(int index, double value);
  void add_velocity_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity_covariance();

  // repeated double acceleration_covariance = 24 [packed = true];
  int acceleration_covariance_size() const;
  private:
  int _internal_acceleration_covariance_size() const;
  public:
  void clear_acceleration_covariance();
  private:
  double _internal_acceleration_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_acceleration_covariance() const;
  void _internal_add_acceleration_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_acceleration_covariance();
  public:
  double acceleration_covariance(int index) const;
  void set_acceleration_covariance(int index, double value);
  void add_acceleration_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      acceleration_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_acceleration_covariance();

  // optional .apollo.common.Point3D position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  ::apollo::common::Point3D* _internal_mutable_position();
  public:

  // optional .apollo.common.Point3D velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::apollo::common::Point3D& velocity() const;
  ::apollo::common::Point3D* release_velocity();
  ::apollo::common::Point3D* mutable_velocity();
  void set_allocated_velocity(::apollo::common::Point3D* velocity);
  private:
  const ::apollo::common::Point3D& _internal_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_velocity();
  public:

  // optional .apollo.common.Point3D acceleration = 16;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::apollo::common::Point3D& acceleration() const;
  ::apollo::common::Point3D* release_acceleration();
  ::apollo::common::Point3D* mutable_acceleration();
  void set_allocated_acceleration(::apollo::common::Point3D* acceleration);
  private:
  const ::apollo::common::Point3D& _internal_acceleration() const;
  ::apollo::common::Point3D* _internal_mutable_acceleration();
  public:

  // optional .apollo.common.Point3D anchor_point = 17;
  bool has_anchor_point() const;
  private:
  bool _internal_has_anchor_point() const;
  public:
  void clear_anchor_point();
  const ::apollo::common::Point3D& anchor_point() const;
  ::apollo::common::Point3D* release_anchor_point();
  ::apollo::common::Point3D* mutable_anchor_point();
  void set_allocated_anchor_point(::apollo::common::Point3D* anchor_point);
  private:
  const ::apollo::common::Point3D& _internal_anchor_point() const;
  ::apollo::common::Point3D* _internal_mutable_anchor_point();
  public:

  // optional .apollo.perception.BBox2D bbox2d = 18;
  bool has_bbox2d() const;
  private:
  bool _internal_has_bbox2d() const;
  public:
  void clear_bbox2d();
  const ::apollo::perception::BBox2D& bbox2d() const;
  ::apollo::perception::BBox2D* release_bbox2d();
  ::apollo::perception::BBox2D* mutable_bbox2d();
  void set_allocated_bbox2d(::apollo::perception::BBox2D* bbox2d);
  private:
  const ::apollo::perception::BBox2D& _internal_bbox2d() const;
  ::apollo::perception::BBox2D* _internal_mutable_bbox2d();
  public:

  // optional .apollo.perception.LightStatus light_status = 25;
  bool has_light_status() const;
  private:
  bool _internal_has_light_status() const;
  public:
  void clear_light_status();
  const ::apollo::perception::LightStatus& light_status() const;
  ::apollo::perception::LightStatus* release_light_status();
  ::apollo::perception::LightStatus* mutable_light_status();
  void set_allocated_light_status(::apollo::perception::LightStatus* light_status);
  private:
  const ::apollo::perception::LightStatus& _internal_light_status() const;
  ::apollo::perception::LightStatus* _internal_mutable_light_status();
  public:

  // optional double theta = 3;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double length = 5;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.perception.PerceptionObstacle.Type type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::perception::PerceptionObstacle_Type type() const;
  void set_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_type() const;
  void _internal_set_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double tracking_time = 9;
  bool has_tracking_time() const;
  private:
  bool _internal_has_tracking_time() const;
  public:
  void clear_tracking_time();
  double tracking_time() const;
  void set_tracking_time(double value);
  private:
  double _internal_tracking_time() const;
  void _internal_set_tracking_time(double value);
  public:

  // optional double timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double confidence = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  PROTOBUF_DEPRECATED void clear_confidence();
  PROTOBUF_DEPRECATED double confidence() const;
  PROTOBUF_DEPRECATED void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_confidence_type() const;
  private:
  bool _internal_has_confidence_type() const;
  public:
  PROTOBUF_DEPRECATED void clear_confidence_type();
  PROTOBUF_DEPRECATED ::apollo::perception::PerceptionObstacle_ConfidenceType confidence_type() const;
  PROTOBUF_DEPRECATED void set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value);
  private:
  ::apollo::perception::PerceptionObstacle_ConfidenceType _internal_confidence_type() const;
  void _internal_set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value);
  public:

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::apollo::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);
  private:
  ::apollo::perception::PerceptionObstacle_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);
  public:

  // optional double height_above_ground = 21 [default = nan];
  bool has_height_above_ground() const;
  private:
  bool _internal_has_height_above_ground() const;
  public:
  void clear_height_above_ground();
  double height_above_ground() const;
  void set_height_above_ground(double value);
  private:
  double _internal_height_above_ground() const;
  void _internal_set_height_above_ground(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > polygon_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > point_cloud_;
  mutable std::atomic<int> _point_cloud_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D > drops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::SensorMeasurement > measurements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_covariance_;
  mutable std::atomic<int> _position_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_covariance_;
  mutable std::atomic<int> _velocity_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > acceleration_covariance_;
  mutable std::atomic<int> _acceleration_covariance_cached_byte_size_;
  ::apollo::common::Point3D* position_;
  ::apollo::common::Point3D* velocity_;
  ::apollo::common::Point3D* acceleration_;
  ::apollo::common::Point3D* anchor_point_;
  ::apollo::perception::BBox2D* bbox2d_;
  ::apollo::perception::LightStatus* light_status_;
  double theta_;
  double length_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  double width_;
  double height_;
  double tracking_time_;
  double timestamp_;
  double confidence_;
  int confidence_type_;
  int sub_type_;
  double height_above_ground_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class LaneMarker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LaneMarker) */ {
 public:
  LaneMarker();
  virtual ~LaneMarker();

  LaneMarker(const LaneMarker& from);
  LaneMarker(LaneMarker&& from) noexcept
    : LaneMarker() {
    *this = ::std::move(from);
  }

  inline LaneMarker& operator=(const LaneMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarker& operator=(LaneMarker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarker* internal_default_instance() {
    return reinterpret_cast<const LaneMarker*>(
               &_LaneMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LaneMarker& a, LaneMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarker* New() const final {
    return CreateMaybeMessage<LaneMarker>(nullptr);
  }

  LaneMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarker& from);
  void MergeFrom(const LaneMarker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.LaneMarker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualityFieldNumber = 2,
    kLaneTypeFieldNumber = 1,
    kModelDegreeFieldNumber = 3,
    kC0PositionFieldNumber = 4,
    kC1HeadingAngleFieldNumber = 5,
    kC2CurvatureFieldNumber = 6,
    kC3CurvatureDerivativeFieldNumber = 7,
    kViewRangeFieldNumber = 8,
    kLongitudeStartFieldNumber = 9,
    kLongitudeEndFieldNumber = 10,
  };
  // optional double quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  double quality() const;
  void set_quality(double value);
  private:
  double _internal_quality() const;
  void _internal_set_quality(double value);
  public:

  // optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
  bool has_lane_type() const;
  private:
  bool _internal_has_lane_type() const;
  public:
  void clear_lane_type();
  ::apollo::hdmap::LaneBoundaryType_Type lane_type() const;
  void set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value);
  private:
  ::apollo::hdmap::LaneBoundaryType_Type _internal_lane_type() const;
  void _internal_set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value);
  public:

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  private:
  bool _internal_has_model_degree() const;
  public:
  void clear_model_degree();
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree() const;
  void set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_degree() const;
  void _internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double c0_position = 4;
  bool has_c0_position() const;
  private:
  bool _internal_has_c0_position() const;
  public:
  void clear_c0_position();
  double c0_position() const;
  void set_c0_position(double value);
  private:
  double _internal_c0_position() const;
  void _internal_set_c0_position(double value);
  public:

  // optional double c1_heading_angle = 5;
  bool has_c1_heading_angle() const;
  private:
  bool _internal_has_c1_heading_angle() const;
  public:
  void clear_c1_heading_angle();
  double c1_heading_angle() const;
  void set_c1_heading_angle(double value);
  private:
  double _internal_c1_heading_angle() const;
  void _internal_set_c1_heading_angle(double value);
  public:

  // optional double c2_curvature = 6;
  bool has_c2_curvature() const;
  private:
  bool _internal_has_c2_curvature() const;
  public:
  void clear_c2_curvature();
  double c2_curvature() const;
  void set_c2_curvature(double value);
  private:
  double _internal_c2_curvature() const;
  void _internal_set_c2_curvature(double value);
  public:

  // optional double c3_curvature_derivative = 7;
  bool has_c3_curvature_derivative() const;
  private:
  bool _internal_has_c3_curvature_derivative() const;
  public:
  void clear_c3_curvature_derivative();
  double c3_curvature_derivative() const;
  void set_c3_curvature_derivative(double value);
  private:
  double _internal_c3_curvature_derivative() const;
  void _internal_set_c3_curvature_derivative(double value);
  public:

  // optional double view_range = 8;
  bool has_view_range() const;
  private:
  bool _internal_has_view_range() const;
  public:
  void clear_view_range();
  double view_range() const;
  void set_view_range(double value);
  private:
  double _internal_view_range() const;
  void _internal_set_view_range(double value);
  public:

  // optional double longitude_start = 9;
  bool has_longitude_start() const;
  private:
  bool _internal_has_longitude_start() const;
  public:
  void clear_longitude_start();
  double longitude_start() const;
  void set_longitude_start(double value);
  private:
  double _internal_longitude_start() const;
  void _internal_set_longitude_start(double value);
  public:

  // optional double longitude_end = 10;
  bool has_longitude_end() const;
  private:
  bool _internal_has_longitude_end() const;
  public:
  void clear_longitude_end();
  double longitude_end() const;
  void set_longitude_end(double value);
  private:
  double _internal_longitude_end() const;
  void _internal_set_longitude_end(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.LaneMarker)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double quality_;
  int lane_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree_;
  double c0_position_;
  double c1_heading_angle_;
  double c2_curvature_;
  double c3_curvature_derivative_;
  double view_range_;
  double longitude_start_;
  double longitude_end_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class LaneMarkers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.LaneMarkers) */ {
 public:
  LaneMarkers();
  virtual ~LaneMarkers();

  LaneMarkers(const LaneMarkers& from);
  LaneMarkers(LaneMarkers&& from) noexcept
    : LaneMarkers() {
    *this = ::std::move(from);
  }

  inline LaneMarkers& operator=(const LaneMarkers& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneMarkers& operator=(LaneMarkers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneMarkers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMarkers* internal_default_instance() {
    return reinterpret_cast<const LaneMarkers*>(
               &_LaneMarkers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LaneMarkers& a, LaneMarkers& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneMarkers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneMarkers* New() const final {
    return CreateMaybeMessage<LaneMarkers>(nullptr);
  }

  LaneMarkers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneMarkers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneMarkers& from);
  void MergeFrom(const LaneMarkers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneMarkers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.LaneMarkers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextLeftLaneMarkerFieldNumber = 3,
    kNextRightLaneMarkerFieldNumber = 4,
    kLeftLaneMarkerFieldNumber = 1,
    kRightLaneMarkerFieldNumber = 2,
  };
  // repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
  int next_left_lane_marker_size() const;
  private:
  int _internal_next_left_lane_marker_size() const;
  public:
  void clear_next_left_lane_marker();
  ::apollo::perception::LaneMarker* mutable_next_left_lane_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
      mutable_next_left_lane_marker();
  private:
  const ::apollo::perception::LaneMarker& _internal_next_left_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* _internal_add_next_left_lane_marker();
  public:
  const ::apollo::perception::LaneMarker& next_left_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* add_next_left_lane_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
      next_left_lane_marker() const;

  // repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
  int next_right_lane_marker_size() const;
  private:
  int _internal_next_right_lane_marker_size() const;
  public:
  void clear_next_right_lane_marker();
  ::apollo::perception::LaneMarker* mutable_next_right_lane_marker(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
      mutable_next_right_lane_marker();
  private:
  const ::apollo::perception::LaneMarker& _internal_next_right_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* _internal_add_next_right_lane_marker();
  public:
  const ::apollo::perception::LaneMarker& next_right_lane_marker(int index) const;
  ::apollo::perception::LaneMarker* add_next_right_lane_marker();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
      next_right_lane_marker() const;

  // optional .apollo.perception.LaneMarker left_lane_marker = 1;
  bool has_left_lane_marker() const;
  private:
  bool _internal_has_left_lane_marker() const;
  public:
  void clear_left_lane_marker();
  const ::apollo::perception::LaneMarker& left_lane_marker() const;
  ::apollo::perception::LaneMarker* release_left_lane_marker();
  ::apollo::perception::LaneMarker* mutable_left_lane_marker();
  void set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker);
  private:
  const ::apollo::perception::LaneMarker& _internal_left_lane_marker() const;
  ::apollo::perception::LaneMarker* _internal_mutable_left_lane_marker();
  public:

  // optional .apollo.perception.LaneMarker right_lane_marker = 2;
  bool has_right_lane_marker() const;
  private:
  bool _internal_has_right_lane_marker() const;
  public:
  void clear_right_lane_marker();
  const ::apollo::perception::LaneMarker& right_lane_marker() const;
  ::apollo::perception::LaneMarker* release_right_lane_marker();
  ::apollo::perception::LaneMarker* mutable_right_lane_marker();
  void set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker);
  private:
  const ::apollo::perception::LaneMarker& _internal_right_lane_marker() const;
  ::apollo::perception::LaneMarker* _internal_mutable_right_lane_marker();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.LaneMarkers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker > next_left_lane_marker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker > next_right_lane_marker_;
  ::apollo::perception::LaneMarker* left_lane_marker_;
  ::apollo::perception::LaneMarker* right_lane_marker_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class CIPVInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.CIPVInfo) */ {
 public:
  CIPVInfo();
  virtual ~CIPVInfo();

  CIPVInfo(const CIPVInfo& from);
  CIPVInfo(CIPVInfo&& from) noexcept
    : CIPVInfo() {
    *this = ::std::move(from);
  }

  inline CIPVInfo& operator=(const CIPVInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CIPVInfo& operator=(CIPVInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CIPVInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CIPVInfo* internal_default_instance() {
    return reinterpret_cast<const CIPVInfo*>(
               &_CIPVInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CIPVInfo& a, CIPVInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CIPVInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CIPVInfo* New() const final {
    return CreateMaybeMessage<CIPVInfo>(nullptr);
  }

  CIPVInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CIPVInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CIPVInfo& from);
  void MergeFrom(const CIPVInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CIPVInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.CIPVInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPotentialCipvIdFieldNumber = 2,
    kCipvIdFieldNumber = 1,
  };
  // repeated int32 potential_cipv_id = 2;
  int potential_cipv_id_size() const;
  private:
  int _internal_potential_cipv_id_size() const;
  public:
  void clear_potential_cipv_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_potential_cipv_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_potential_cipv_id() const;
  void _internal_add_potential_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_potential_cipv_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 potential_cipv_id(int index) const;
  void set_potential_cipv_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_potential_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      potential_cipv_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_potential_cipv_id();

  // optional int32 cipv_id = 1;
  bool has_cipv_id() const;
  private:
  bool _internal_has_cipv_id() const;
  public:
  void clear_cipv_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cipv_id() const;
  void set_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cipv_id() const;
  void _internal_set_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.CIPVInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > potential_cipv_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 cipv_id_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class PerceptionObstacles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionObstacles) */ {
 public:
  PerceptionObstacles();
  virtual ~PerceptionObstacles();

  PerceptionObstacles(const PerceptionObstacles& from);
  PerceptionObstacles(PerceptionObstacles&& from) noexcept
    : PerceptionObstacles() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacles& operator=(const PerceptionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionObstacles& operator=(PerceptionObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerceptionObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionObstacles* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacles*>(
               &_PerceptionObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PerceptionObstacles& a, PerceptionObstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionObstacles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacles* New() const final {
    return CreateMaybeMessage<PerceptionObstacles>(nullptr);
  }

  PerceptionObstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionObstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerceptionObstacles& from);
  void MergeFrom(const PerceptionObstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionObstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionObstacles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerceptionObstacleFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kLaneMarkerFieldNumber = 4,
    kCipvInfoFieldNumber = 5,
    kErrorCodeFieldNumber = 3,
  };
  // repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  int perception_obstacle_size() const;
  private:
  int _internal_perception_obstacle_size() const;
  public:
  void clear_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
      mutable_perception_obstacle();
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_perception_obstacle(int index) const;
  ::apollo::perception::PerceptionObstacle* _internal_add_perception_obstacle();
  public:
  const ::apollo::perception::PerceptionObstacle& perception_obstacle(int index) const;
  ::apollo::perception::PerceptionObstacle* add_perception_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
      perception_obstacle() const;

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  bool has_lane_marker() const;
  private:
  bool _internal_has_lane_marker() const;
  public:
  void clear_lane_marker();
  const ::apollo::perception::LaneMarkers& lane_marker() const;
  ::apollo::perception::LaneMarkers* release_lane_marker();
  ::apollo::perception::LaneMarkers* mutable_lane_marker();
  void set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker);
  private:
  const ::apollo::perception::LaneMarkers& _internal_lane_marker() const;
  ::apollo::perception::LaneMarkers* _internal_mutable_lane_marker();
  public:

  // optional .apollo.perception.CIPVInfo cipv_info = 5;
  bool has_cipv_info() const;
  private:
  bool _internal_has_cipv_info() const;
  public:
  void clear_cipv_info();
  const ::apollo::perception::CIPVInfo& cipv_info() const;
  ::apollo::perception::CIPVInfo* release_cipv_info();
  ::apollo::perception::CIPVInfo* mutable_cipv_info();
  void set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info);
  private:
  const ::apollo::perception::CIPVInfo& _internal_cipv_info() const;
  ::apollo::perception::CIPVInfo* _internal_mutable_cipv_info();
  public:

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);
  private:
  ::apollo::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::apollo::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionObstacles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle > perception_obstacle_;
  ::apollo::common::Header* header_;
  ::apollo::perception::LaneMarkers* lane_marker_;
  ::apollo::perception::CIPVInfo* cipv_info_;
  int error_code_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BBox2D

// optional double xmin = 1;
inline bool BBox2D::_internal_has_xmin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBox2D::has_xmin() const {
  return _internal_has_xmin();
}
inline void BBox2D::clear_xmin() {
  xmin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BBox2D::_internal_xmin() const {
  return xmin_;
}
inline double BBox2D::xmin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.xmin)
  return _internal_xmin();
}
inline void BBox2D::_internal_set_xmin(double value) {
  _has_bits_[0] |= 0x00000001u;
  xmin_ = value;
}
inline void BBox2D::set_xmin(double value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.xmin)
}

// optional double ymin = 2;
inline bool BBox2D::_internal_has_ymin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBox2D::has_ymin() const {
  return _internal_has_ymin();
}
inline void BBox2D::clear_ymin() {
  ymin_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double BBox2D::_internal_ymin() const {
  return ymin_;
}
inline double BBox2D::ymin() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.ymin)
  return _internal_ymin();
}
inline void BBox2D::_internal_set_ymin(double value) {
  _has_bits_[0] |= 0x00000002u;
  ymin_ = value;
}
inline void BBox2D::set_ymin(double value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.ymin)
}

// optional double xmax = 3;
inline bool BBox2D::_internal_has_xmax() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBox2D::has_xmax() const {
  return _internal_has_xmax();
}
inline void BBox2D::clear_xmax() {
  xmax_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double BBox2D::_internal_xmax() const {
  return xmax_;
}
inline double BBox2D::xmax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.xmax)
  return _internal_xmax();
}
inline void BBox2D::_internal_set_xmax(double value) {
  _has_bits_[0] |= 0x00000004u;
  xmax_ = value;
}
inline void BBox2D::set_xmax(double value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.xmax)
}

// optional double ymax = 4;
inline bool BBox2D::_internal_has_ymax() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BBox2D::has_ymax() const {
  return _internal_has_ymax();
}
inline void BBox2D::clear_ymax() {
  ymax_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BBox2D::_internal_ymax() const {
  return ymax_;
}
inline double BBox2D::ymax() const {
  // @@protoc_insertion_point(field_get:apollo.perception.BBox2D.ymax)
  return _internal_ymax();
}
inline void BBox2D::_internal_set_ymax(double value) {
  _has_bits_[0] |= 0x00000008u;
  ymax_ = value;
}
inline void BBox2D::set_ymax(double value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:apollo.perception.BBox2D.ymax)
}

// -------------------------------------------------------------------

// LightStatus

// optional double brake_visible = 1;
inline bool LightStatus::_internal_has_brake_visible() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LightStatus::has_brake_visible() const {
  return _internal_has_brake_visible();
}
inline void LightStatus::clear_brake_visible() {
  brake_visible_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LightStatus::_internal_brake_visible() const {
  return brake_visible_;
}
inline double LightStatus::brake_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.brake_visible)
  return _internal_brake_visible();
}
inline void LightStatus::_internal_set_brake_visible(double value) {
  _has_bits_[0] |= 0x00000001u;
  brake_visible_ = value;
}
inline void LightStatus::set_brake_visible(double value) {
  _internal_set_brake_visible(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.brake_visible)
}

// optional double brake_switch_on = 2;
inline bool LightStatus::_internal_has_brake_switch_on() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LightStatus::has_brake_switch_on() const {
  return _internal_has_brake_switch_on();
}
inline void LightStatus::clear_brake_switch_on() {
  brake_switch_on_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LightStatus::_internal_brake_switch_on() const {
  return brake_switch_on_;
}
inline double LightStatus::brake_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.brake_switch_on)
  return _internal_brake_switch_on();
}
inline void LightStatus::_internal_set_brake_switch_on(double value) {
  _has_bits_[0] |= 0x00000002u;
  brake_switch_on_ = value;
}
inline void LightStatus::set_brake_switch_on(double value) {
  _internal_set_brake_switch_on(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.brake_switch_on)
}

// optional double left_turn_visible = 3;
inline bool LightStatus::_internal_has_left_turn_visible() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LightStatus::has_left_turn_visible() const {
  return _internal_has_left_turn_visible();
}
inline void LightStatus::clear_left_turn_visible() {
  left_turn_visible_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LightStatus::_internal_left_turn_visible() const {
  return left_turn_visible_;
}
inline double LightStatus::left_turn_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.left_turn_visible)
  return _internal_left_turn_visible();
}
inline void LightStatus::_internal_set_left_turn_visible(double value) {
  _has_bits_[0] |= 0x00000004u;
  left_turn_visible_ = value;
}
inline void LightStatus::set_left_turn_visible(double value) {
  _internal_set_left_turn_visible(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.left_turn_visible)
}

// optional double left_turn_switch_on = 4;
inline bool LightStatus::_internal_has_left_turn_switch_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LightStatus::has_left_turn_switch_on() const {
  return _internal_has_left_turn_switch_on();
}
inline void LightStatus::clear_left_turn_switch_on() {
  left_turn_switch_on_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LightStatus::_internal_left_turn_switch_on() const {
  return left_turn_switch_on_;
}
inline double LightStatus::left_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.left_turn_switch_on)
  return _internal_left_turn_switch_on();
}
inline void LightStatus::_internal_set_left_turn_switch_on(double value) {
  _has_bits_[0] |= 0x00000008u;
  left_turn_switch_on_ = value;
}
inline void LightStatus::set_left_turn_switch_on(double value) {
  _internal_set_left_turn_switch_on(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.left_turn_switch_on)
}

// optional double right_turn_visible = 5;
inline bool LightStatus::_internal_has_right_turn_visible() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LightStatus::has_right_turn_visible() const {
  return _internal_has_right_turn_visible();
}
inline void LightStatus::clear_right_turn_visible() {
  right_turn_visible_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double LightStatus::_internal_right_turn_visible() const {
  return right_turn_visible_;
}
inline double LightStatus::right_turn_visible() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.right_turn_visible)
  return _internal_right_turn_visible();
}
inline void LightStatus::_internal_set_right_turn_visible(double value) {
  _has_bits_[0] |= 0x00000010u;
  right_turn_visible_ = value;
}
inline void LightStatus::set_right_turn_visible(double value) {
  _internal_set_right_turn_visible(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.right_turn_visible)
}

// optional double right_turn_switch_on = 6;
inline bool LightStatus::_internal_has_right_turn_switch_on() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LightStatus::has_right_turn_switch_on() const {
  return _internal_has_right_turn_switch_on();
}
inline void LightStatus::clear_right_turn_switch_on() {
  right_turn_switch_on_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LightStatus::_internal_right_turn_switch_on() const {
  return right_turn_switch_on_;
}
inline double LightStatus::right_turn_switch_on() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LightStatus.right_turn_switch_on)
  return _internal_right_turn_switch_on();
}
inline void LightStatus::_internal_set_right_turn_switch_on(double value) {
  _has_bits_[0] |= 0x00000020u;
  right_turn_switch_on_ = value;
}
inline void LightStatus::set_right_turn_switch_on(double value) {
  _internal_set_right_turn_switch_on(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LightStatus.right_turn_switch_on)
}

// -------------------------------------------------------------------

// SensorMeasurement

// optional string sensor_id = 1;
inline bool SensorMeasurement::_internal_has_sensor_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SensorMeasurement::has_sensor_id() const {
  return _internal_has_sensor_id();
}
inline void SensorMeasurement::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SensorMeasurement::sensor_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.sensor_id)
  return _internal_sensor_id();
}
inline void SensorMeasurement::set_sensor_id(const std::string& value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.sensor_id)
}
inline std::string* SensorMeasurement::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.sensor_id)
  return _internal_mutable_sensor_id();
}
inline const std::string& SensorMeasurement::_internal_sensor_id() const {
  return sensor_id_.GetNoArena();
}
inline void SensorMeasurement::_internal_set_sensor_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorMeasurement::set_sensor_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.SensorMeasurement.sensor_id)
}
inline void SensorMeasurement::set_sensor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.SensorMeasurement.sensor_id)
}
inline void SensorMeasurement::set_sensor_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.SensorMeasurement.sensor_id)
}
inline std::string* SensorMeasurement::_internal_mutable_sensor_id() {
  _has_bits_[0] |= 0x00000001u;
  return sensor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorMeasurement::release_sensor_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.sensor_id)
  if (!_internal_has_sensor_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sensor_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMeasurement::set_allocated_sensor_id(std::string* sensor_id) {
  if (sensor_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.sensor_id)
}

// optional int32 id = 2;
inline bool SensorMeasurement::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SensorMeasurement::has_id() const {
  return _internal_has_id();
}
inline void SensorMeasurement::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorMeasurement::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorMeasurement::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.id)
  return _internal_id();
}
inline void SensorMeasurement::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void SensorMeasurement::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.id)
}

// optional .apollo.common.Point3D position = 3;
inline bool SensorMeasurement::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool SensorMeasurement::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& SensorMeasurement::_internal_position() const {
  const ::apollo::common::Point3D* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SensorMeasurement::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.position)
  return _internal_position();
}
inline ::apollo::common::Point3D* SensorMeasurement::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.position)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SensorMeasurement::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::apollo::common::Point3D* SensorMeasurement::mutable_position() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.position)
  return _internal_mutable_position();
}
inline void SensorMeasurement::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.position)
}

// optional double theta = 4;
inline bool SensorMeasurement::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SensorMeasurement::has_theta() const {
  return _internal_has_theta();
}
inline void SensorMeasurement::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SensorMeasurement::_internal_theta() const {
  return theta_;
}
inline double SensorMeasurement::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.theta)
  return _internal_theta();
}
inline void SensorMeasurement::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000010u;
  theta_ = value;
}
inline void SensorMeasurement::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.theta)
}

// optional double length = 5;
inline bool SensorMeasurement::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SensorMeasurement::has_length() const {
  return _internal_has_length();
}
inline void SensorMeasurement::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SensorMeasurement::_internal_length() const {
  return length_;
}
inline double SensorMeasurement::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.length)
  return _internal_length();
}
inline void SensorMeasurement::_internal_set_length(double value) {
  _has_bits_[0] |= 0x00000020u;
  length_ = value;
}
inline void SensorMeasurement::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.length)
}

// optional double width = 6;
inline bool SensorMeasurement::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SensorMeasurement::has_width() const {
  return _internal_has_width();
}
inline void SensorMeasurement::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SensorMeasurement::_internal_width() const {
  return width_;
}
inline double SensorMeasurement::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.width)
  return _internal_width();
}
inline void SensorMeasurement::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
}
inline void SensorMeasurement::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.width)
}

// optional double height = 7;
inline bool SensorMeasurement::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SensorMeasurement::has_height() const {
  return _internal_has_height();
}
inline void SensorMeasurement::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SensorMeasurement::_internal_height() const {
  return height_;
}
inline double SensorMeasurement::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.height)
  return _internal_height();
}
inline void SensorMeasurement::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
}
inline void SensorMeasurement::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.height)
}

// optional .apollo.common.Point3D velocity = 8;
inline bool SensorMeasurement::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool SensorMeasurement::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::common::Point3D& SensorMeasurement::_internal_velocity() const {
  const ::apollo::common::Point3D* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SensorMeasurement::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.velocity)
  return _internal_velocity();
}
inline ::apollo::common::Point3D* SensorMeasurement::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SensorMeasurement::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::apollo::common::Point3D* SensorMeasurement::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.velocity)
  return _internal_mutable_velocity();
}
inline void SensorMeasurement::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.velocity)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 9;
inline bool SensorMeasurement::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SensorMeasurement::has_type() const {
  return _internal_has_type();
}
inline void SensorMeasurement::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::perception::PerceptionObstacle_Type SensorMeasurement::_internal_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
inline ::apollo::perception::PerceptionObstacle_Type SensorMeasurement::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.type)
  return _internal_type();
}
inline void SensorMeasurement::_internal_set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void SensorMeasurement::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.type)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;
inline bool SensorMeasurement::_internal_has_sub_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SensorMeasurement::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void SensorMeasurement::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::perception::PerceptionObstacle_SubType SensorMeasurement::_internal_sub_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline ::apollo::perception::PerceptionObstacle_SubType SensorMeasurement::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.sub_type)
  return _internal_sub_type();
}
inline void SensorMeasurement::_internal_set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  sub_type_ = value;
}
inline void SensorMeasurement::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.sub_type)
}

// optional double timestamp = 11;
inline bool SensorMeasurement::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SensorMeasurement::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void SensorMeasurement::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SensorMeasurement::_internal_timestamp() const {
  return timestamp_;
}
inline double SensorMeasurement::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.timestamp)
  return _internal_timestamp();
}
inline void SensorMeasurement::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000400u;
  timestamp_ = value;
}
inline void SensorMeasurement::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeasurement.timestamp)
}

// optional .apollo.perception.BBox2D box = 12;
inline bool SensorMeasurement::_internal_has_box() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || box_ != nullptr);
  return value;
}
inline bool SensorMeasurement::has_box() const {
  return _internal_has_box();
}
inline void SensorMeasurement::clear_box() {
  if (box_ != nullptr) box_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::BBox2D& SensorMeasurement::_internal_box() const {
  const ::apollo::perception::BBox2D* p = box_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::BBox2D*>(
      &::apollo::perception::_BBox2D_default_instance_);
}
inline const ::apollo::perception::BBox2D& SensorMeasurement::box() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeasurement.box)
  return _internal_box();
}
inline ::apollo::perception::BBox2D* SensorMeasurement::release_box() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeasurement.box)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::BBox2D* temp = box_;
  box_ = nullptr;
  return temp;
}
inline ::apollo::perception::BBox2D* SensorMeasurement::_internal_mutable_box() {
  _has_bits_[0] |= 0x00000008u;
  if (box_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::BBox2D>(GetArenaNoVirtual());
    box_ = p;
  }
  return box_;
}
inline ::apollo::perception::BBox2D* SensorMeasurement::mutable_box() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeasurement.box)
  return _internal_mutable_box();
}
inline void SensorMeasurement::set_allocated_box(::apollo::perception::BBox2D* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeasurement.box)
}

// -------------------------------------------------------------------

// PerceptionObstacle

// optional int32 id = 1;
inline bool PerceptionObstacle::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_id() const {
  return _internal_has_id();
}
inline void PerceptionObstacle::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerceptionObstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.id)
  return _internal_id();
}
inline void PerceptionObstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void PerceptionObstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.id)
}

// optional .apollo.common.Point3D position = 2;
inline bool PerceptionObstacle::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::_internal_position() const {
  const ::apollo::common::Point3D* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position)
  return _internal_position();
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.position)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* PerceptionObstacle::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_position() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.position)
  return _internal_mutable_position();
}
inline void PerceptionObstacle::set_allocated_position(::apollo::common::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
inline bool PerceptionObstacle::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_theta() const {
  return _internal_has_theta();
}
inline void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PerceptionObstacle::_internal_theta() const {
  return theta_;
}
inline double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.theta)
  return _internal_theta();
}
inline void PerceptionObstacle::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000040u;
  theta_ = value;
}
inline void PerceptionObstacle::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.theta)
}

// optional .apollo.common.Point3D velocity = 4;
inline bool PerceptionObstacle::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::_internal_velocity() const {
  const ::apollo::common::Point3D* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity)
  return _internal_velocity();
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* PerceptionObstacle::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.velocity)
  return _internal_mutable_velocity();
}
inline void PerceptionObstacle::set_allocated_velocity(::apollo::common::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
inline bool PerceptionObstacle::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_length() const {
  return _internal_has_length();
}
inline void PerceptionObstacle::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PerceptionObstacle::_internal_length() const {
  return length_;
}
inline double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.length)
  return _internal_length();
}
inline void PerceptionObstacle::_internal_set_length(double value) {
  _has_bits_[0] |= 0x00000080u;
  length_ = value;
}
inline void PerceptionObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.length)
}

// optional double width = 6;
inline bool PerceptionObstacle::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_width() const {
  return _internal_has_width();
}
inline void PerceptionObstacle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double PerceptionObstacle::_internal_width() const {
  return width_;
}
inline double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.width)
  return _internal_width();
}
inline void PerceptionObstacle::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000400u;
  width_ = value;
}
inline void PerceptionObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.width)
}

// optional double height = 7;
inline bool PerceptionObstacle::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_height() const {
  return _internal_has_height();
}
inline void PerceptionObstacle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double PerceptionObstacle::_internal_height() const {
  return height_;
}
inline double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height)
  return _internal_height();
}
inline void PerceptionObstacle::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000800u;
  height_ = value;
}
inline void PerceptionObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height)
}

// repeated .apollo.common.Point3D polygon_point = 8;
inline int PerceptionObstacle::_internal_polygon_point_size() const {
  return polygon_point_.size();
}
inline int PerceptionObstacle::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::apollo::common::Point3D& PerceptionObstacle::_internal_polygon_point(int index) const {
  return polygon_point_.Get(index);
}
inline const ::apollo::common::Point3D& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::common::Point3D* PerceptionObstacle::_internal_add_polygon_point() {
  return polygon_point_.Add();
}
inline ::apollo::common::Point3D* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.polygon_point)
  return _internal_add_polygon_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
inline bool PerceptionObstacle::_internal_has_tracking_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_tracking_time() const {
  return _internal_has_tracking_time();
}
inline void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double PerceptionObstacle::_internal_tracking_time() const {
  return tracking_time_;
}
inline double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.tracking_time)
  return _internal_tracking_time();
}
inline void PerceptionObstacle::_internal_set_tracking_time(double value) {
  _has_bits_[0] |= 0x00001000u;
  tracking_time_ = value;
}
inline void PerceptionObstacle::set_tracking_time(double value) {
  _internal_set_tracking_time(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.tracking_time)
}

// optional .apollo.perception.PerceptionObstacle.Type type = 10;
inline bool PerceptionObstacle::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_type() const {
  return _internal_has_type();
}
inline void PerceptionObstacle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::_internal_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(type_);
}
inline ::apollo::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.type)
  return _internal_type();
}
inline void PerceptionObstacle::_internal_set_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void PerceptionObstacle::set_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
inline bool PerceptionObstacle::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double PerceptionObstacle::_internal_timestamp() const {
  return timestamp_;
}
inline double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.timestamp)
  return _internal_timestamp();
}
inline void PerceptionObstacle::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00002000u;
  timestamp_ = value;
}
inline void PerceptionObstacle::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
inline int PerceptionObstacle::_internal_point_cloud_size() const {
  return point_cloud_.size();
}
inline int PerceptionObstacle::point_cloud_size() const {
  return _internal_point_cloud_size();
}
inline void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
inline double PerceptionObstacle::_internal_point_cloud(int index) const {
  return point_cloud_.Get(index);
}
inline double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.point_cloud)
  return _internal_point_cloud(index);
}
inline void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.point_cloud)
}
inline void PerceptionObstacle::_internal_add_point_cloud(double value) {
  point_cloud_.Add(value);
}
inline void PerceptionObstacle::add_point_cloud(double value) {
  _internal_add_point_cloud(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.point_cloud)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::_internal_point_cloud() const {
  return point_cloud_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.point_cloud)
  return _internal_point_cloud();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::_internal_mutable_point_cloud() {
  return &point_cloud_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.point_cloud)
  return _internal_mutable_point_cloud();
}

// optional double confidence = 13 [deprecated = true];
inline bool PerceptionObstacle::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_confidence() const {
  return _internal_has_confidence();
}
inline void PerceptionObstacle::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double PerceptionObstacle::_internal_confidence() const {
  return confidence_;
}
inline double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence)
  return _internal_confidence();
}
inline void PerceptionObstacle::_internal_set_confidence(double value) {
  _has_bits_[0] |= 0x00004000u;
  confidence_ = value;
}
inline void PerceptionObstacle::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence)
}

// optional .apollo.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [deprecated = true];
inline bool PerceptionObstacle::_internal_has_confidence_type() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_confidence_type() const {
  return _internal_has_confidence_type();
}
inline void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::_internal_confidence_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
inline ::apollo::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.confidence_type)
  return _internal_confidence_type();
}
inline void PerceptionObstacle::_internal_set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::apollo::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  confidence_type_ = value;
}
inline void PerceptionObstacle::set_confidence_type(::apollo::perception::PerceptionObstacle_ConfidenceType value) {
  _internal_set_confidence_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.confidence_type)
}

// repeated .apollo.common.Point3D drops = 15 [deprecated = true];
inline int PerceptionObstacle::_internal_drops_size() const {
  return drops_.size();
}
inline int PerceptionObstacle::drops_size() const {
  return _internal_drops_size();
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.drops)
  return &drops_;
}
inline const ::apollo::common::Point3D& PerceptionObstacle::_internal_drops(int index) const {
  return drops_.Get(index);
}
inline const ::apollo::common::Point3D& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.drops)
  return _internal_drops(index);
}
inline ::apollo::common::Point3D* PerceptionObstacle::_internal_add_drops() {
  return drops_.Add();
}
inline ::apollo::common::Point3D* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.drops)
  return _internal_add_drops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Point3D >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.drops)
  return drops_;
}

// optional .apollo.common.Point3D acceleration = 16;
inline bool PerceptionObstacle::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || acceleration_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::_internal_acceleration() const {
  const ::apollo::common::Point3D* p = acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& PerceptionObstacle::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.acceleration)
  return _internal_acceleration();
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.acceleration)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* PerceptionObstacle::_internal_mutable_acceleration() {
  _has_bits_[0] |= 0x00000004u;
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.acceleration)
  return _internal_mutable_acceleration();
}
inline void PerceptionObstacle::set_allocated_acceleration(::apollo::common::Point3D* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.acceleration)
}

// optional .apollo.common.Point3D anchor_point = 17;
inline bool PerceptionObstacle::_internal_has_anchor_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || anchor_point_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_anchor_point() const {
  return _internal_has_anchor_point();
}
inline const ::apollo::common::Point3D& PerceptionObstacle::_internal_anchor_point() const {
  const ::apollo::common::Point3D* p = anchor_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& PerceptionObstacle::anchor_point() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.anchor_point)
  return _internal_anchor_point();
}
inline ::apollo::common::Point3D* PerceptionObstacle::release_anchor_point() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.anchor_point)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point3D* temp = anchor_point_;
  anchor_point_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* PerceptionObstacle::_internal_mutable_anchor_point() {
  _has_bits_[0] |= 0x00000008u;
  if (anchor_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    anchor_point_ = p;
  }
  return anchor_point_;
}
inline ::apollo::common::Point3D* PerceptionObstacle::mutable_anchor_point() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.anchor_point)
  return _internal_mutable_anchor_point();
}
inline void PerceptionObstacle::set_allocated_anchor_point(::apollo::common::Point3D* anchor_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_point_);
  }
  if (anchor_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anchor_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  anchor_point_ = anchor_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.anchor_point)
}

// optional .apollo.perception.BBox2D bbox2d = 18;
inline bool PerceptionObstacle::_internal_has_bbox2d() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || bbox2d_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_bbox2d() const {
  return _internal_has_bbox2d();
}
inline void PerceptionObstacle::clear_bbox2d() {
  if (bbox2d_ != nullptr) bbox2d_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::BBox2D& PerceptionObstacle::_internal_bbox2d() const {
  const ::apollo::perception::BBox2D* p = bbox2d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::BBox2D*>(
      &::apollo::perception::_BBox2D_default_instance_);
}
inline const ::apollo::perception::BBox2D& PerceptionObstacle::bbox2d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.bbox2d)
  return _internal_bbox2d();
}
inline ::apollo::perception::BBox2D* PerceptionObstacle::release_bbox2d() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.bbox2d)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::BBox2D* temp = bbox2d_;
  bbox2d_ = nullptr;
  return temp;
}
inline ::apollo::perception::BBox2D* PerceptionObstacle::_internal_mutable_bbox2d() {
  _has_bits_[0] |= 0x00000010u;
  if (bbox2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::BBox2D>(GetArenaNoVirtual());
    bbox2d_ = p;
  }
  return bbox2d_;
}
inline ::apollo::perception::BBox2D* PerceptionObstacle::mutable_bbox2d() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.bbox2d)
  return _internal_mutable_bbox2d();
}
inline void PerceptionObstacle::set_allocated_bbox2d(::apollo::perception::BBox2D* bbox2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bbox2d_;
  }
  if (bbox2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bbox2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox2d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bbox2d_ = bbox2d;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.bbox2d)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 19;
inline bool PerceptionObstacle::_internal_has_sub_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void PerceptionObstacle::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::apollo::perception::PerceptionObstacle_SubType PerceptionObstacle::_internal_sub_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline ::apollo::perception::PerceptionObstacle_SubType PerceptionObstacle::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.sub_type)
  return _internal_sub_type();
}
inline void PerceptionObstacle::_internal_set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  sub_type_ = value;
}
inline void PerceptionObstacle::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.sub_type)
}

// repeated .apollo.perception.SensorMeasurement measurements = 20;
inline int PerceptionObstacle::_internal_measurements_size() const {
  return measurements_.size();
}
inline int PerceptionObstacle::measurements_size() const {
  return _internal_measurements_size();
}
inline void PerceptionObstacle::clear_measurements() {
  measurements_.Clear();
}
inline ::apollo::perception::SensorMeasurement* PerceptionObstacle::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.measurements)
  return measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::SensorMeasurement >*
PerceptionObstacle::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.measurements)
  return &measurements_;
}
inline const ::apollo::perception::SensorMeasurement& PerceptionObstacle::_internal_measurements(int index) const {
  return measurements_.Get(index);
}
inline const ::apollo::perception::SensorMeasurement& PerceptionObstacle::measurements(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.measurements)
  return _internal_measurements(index);
}
inline ::apollo::perception::SensorMeasurement* PerceptionObstacle::_internal_add_measurements() {
  return measurements_.Add();
}
inline ::apollo::perception::SensorMeasurement* PerceptionObstacle::add_measurements() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.measurements)
  return _internal_add_measurements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::SensorMeasurement >&
PerceptionObstacle::measurements() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.measurements)
  return measurements_;
}

// optional double height_above_ground = 21 [default = nan];
inline bool PerceptionObstacle::_internal_has_height_above_ground() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PerceptionObstacle::has_height_above_ground() const {
  return _internal_has_height_above_ground();
}
inline void PerceptionObstacle::clear_height_above_ground() {
  height_above_ground_ = std::numeric_limits<double>::quiet_NaN();
  _has_bits_[0] &= ~0x00020000u;
}
inline double PerceptionObstacle::_internal_height_above_ground() const {
  return height_above_ground_;
}
inline double PerceptionObstacle::height_above_ground() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.height_above_ground)
  return _internal_height_above_ground();
}
inline void PerceptionObstacle::_internal_set_height_above_ground(double value) {
  _has_bits_[0] |= 0x00020000u;
  height_above_ground_ = value;
}
inline void PerceptionObstacle::set_height_above_ground(double value) {
  _internal_set_height_above_ground(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.height_above_ground)
}

// repeated double position_covariance = 22 [packed = true];
inline int PerceptionObstacle::_internal_position_covariance_size() const {
  return position_covariance_.size();
}
inline int PerceptionObstacle::position_covariance_size() const {
  return _internal_position_covariance_size();
}
inline void PerceptionObstacle::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double PerceptionObstacle::_internal_position_covariance(int index) const {
  return position_covariance_.Get(index);
}
inline double PerceptionObstacle::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.position_covariance)
  return _internal_position_covariance(index);
}
inline void PerceptionObstacle::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.position_covariance)
}
inline void PerceptionObstacle::_internal_add_position_covariance(double value) {
  position_covariance_.Add(value);
}
inline void PerceptionObstacle::add_position_covariance(double value) {
  _internal_add_position_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.position_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::_internal_position_covariance() const {
  return position_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::position_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.position_covariance)
  return _internal_position_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::_internal_mutable_position_covariance() {
  return &position_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.position_covariance)
  return _internal_mutable_position_covariance();
}

// repeated double velocity_covariance = 23 [packed = true];
inline int PerceptionObstacle::_internal_velocity_covariance_size() const {
  return velocity_covariance_.size();
}
inline int PerceptionObstacle::velocity_covariance_size() const {
  return _internal_velocity_covariance_size();
}
inline void PerceptionObstacle::clear_velocity_covariance() {
  velocity_covariance_.Clear();
}
inline double PerceptionObstacle::_internal_velocity_covariance(int index) const {
  return velocity_covariance_.Get(index);
}
inline double PerceptionObstacle::velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.velocity_covariance)
  return _internal_velocity_covariance(index);
}
inline void PerceptionObstacle::set_velocity_covariance(int index, double value) {
  velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.velocity_covariance)
}
inline void PerceptionObstacle::_internal_add_velocity_covariance(double value) {
  velocity_covariance_.Add(value);
}
inline void PerceptionObstacle::add_velocity_covariance(double value) {
  _internal_add_velocity_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.velocity_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::_internal_velocity_covariance() const {
  return velocity_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.velocity_covariance)
  return _internal_velocity_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::_internal_mutable_velocity_covariance() {
  return &velocity_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::mutable_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.velocity_covariance)
  return _internal_mutable_velocity_covariance();
}

// repeated double acceleration_covariance = 24 [packed = true];
inline int PerceptionObstacle::_internal_acceleration_covariance_size() const {
  return acceleration_covariance_.size();
}
inline int PerceptionObstacle::acceleration_covariance_size() const {
  return _internal_acceleration_covariance_size();
}
inline void PerceptionObstacle::clear_acceleration_covariance() {
  acceleration_covariance_.Clear();
}
inline double PerceptionObstacle::_internal_acceleration_covariance(int index) const {
  return acceleration_covariance_.Get(index);
}
inline double PerceptionObstacle::acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return _internal_acceleration_covariance(index);
}
inline void PerceptionObstacle::set_acceleration_covariance(int index, double value) {
  acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacle.acceleration_covariance)
}
inline void PerceptionObstacle::_internal_add_acceleration_covariance(double value) {
  acceleration_covariance_.Add(value);
}
inline void PerceptionObstacle::add_acceleration_covariance(double value) {
  _internal_add_acceleration_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacle.acceleration_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::_internal_acceleration_covariance() const {
  return acceleration_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PerceptionObstacle::acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return _internal_acceleration_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::_internal_mutable_acceleration_covariance() {
  return &acceleration_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PerceptionObstacle::mutable_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacle.acceleration_covariance)
  return _internal_mutable_acceleration_covariance();
}

// optional .apollo.perception.LightStatus light_status = 25;
inline bool PerceptionObstacle::_internal_has_light_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || light_status_ != nullptr);
  return value;
}
inline bool PerceptionObstacle::has_light_status() const {
  return _internal_has_light_status();
}
inline void PerceptionObstacle::clear_light_status() {
  if (light_status_ != nullptr) light_status_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::perception::LightStatus& PerceptionObstacle::_internal_light_status() const {
  const ::apollo::perception::LightStatus* p = light_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::LightStatus*>(
      &::apollo::perception::_LightStatus_default_instance_);
}
inline const ::apollo::perception::LightStatus& PerceptionObstacle::light_status() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacle.light_status)
  return _internal_light_status();
}
inline ::apollo::perception::LightStatus* PerceptionObstacle::release_light_status() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacle.light_status)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::perception::LightStatus* temp = light_status_;
  light_status_ = nullptr;
  return temp;
}
inline ::apollo::perception::LightStatus* PerceptionObstacle::_internal_mutable_light_status() {
  _has_bits_[0] |= 0x00000020u;
  if (light_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LightStatus>(GetArenaNoVirtual());
    light_status_ = p;
  }
  return light_status_;
}
inline ::apollo::perception::LightStatus* PerceptionObstacle::mutable_light_status() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacle.light_status)
  return _internal_mutable_light_status();
}
inline void PerceptionObstacle::set_allocated_light_status(::apollo::perception::LightStatus* light_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete light_status_;
  }
  if (light_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, light_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  light_status_ = light_status;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacle.light_status)
}

// -------------------------------------------------------------------

// LaneMarker

// optional .apollo.hdmap.LaneBoundaryType.Type lane_type = 1;
inline bool LaneMarker::_internal_has_lane_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneMarker::has_lane_type() const {
  return _internal_has_lane_type();
}
inline void LaneMarker::clear_lane_type() {
  lane_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::LaneBoundaryType_Type LaneMarker::_internal_lane_type() const {
  return static_cast< ::apollo::hdmap::LaneBoundaryType_Type >(lane_type_);
}
inline ::apollo::hdmap::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.lane_type)
  return _internal_lane_type();
}
inline void LaneMarker::_internal_set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  assert(::apollo::hdmap::LaneBoundaryType_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  lane_type_ = value;
}
inline void LaneMarker::set_lane_type(::apollo::hdmap::LaneBoundaryType_Type value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.lane_type)
}

// optional double quality = 2;
inline bool LaneMarker::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneMarker::has_quality() const {
  return _internal_has_quality();
}
inline void LaneMarker::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LaneMarker::_internal_quality() const {
  return quality_;
}
inline double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.quality)
  return _internal_quality();
}
inline void LaneMarker::_internal_set_quality(double value) {
  _has_bits_[0] |= 0x00000001u;
  quality_ = value;
}
inline void LaneMarker::set_quality(double value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.quality)
}

// optional int32 model_degree = 3;
inline bool LaneMarker::_internal_has_model_degree() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneMarker::has_model_degree() const {
  return _internal_has_model_degree();
}
inline void LaneMarker::clear_model_degree() {
  model_degree_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarker::_internal_model_degree() const {
  return model_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.model_degree)
  return _internal_model_degree();
}
inline void LaneMarker::_internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  model_degree_ = value;
}
inline void LaneMarker::set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_degree(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.model_degree)
}

// optional double c0_position = 4;
inline bool LaneMarker::_internal_has_c0_position() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneMarker::has_c0_position() const {
  return _internal_has_c0_position();
}
inline void LaneMarker::clear_c0_position() {
  c0_position_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LaneMarker::_internal_c0_position() const {
  return c0_position_;
}
inline double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c0_position)
  return _internal_c0_position();
}
inline void LaneMarker::_internal_set_c0_position(double value) {
  _has_bits_[0] |= 0x00000008u;
  c0_position_ = value;
}
inline void LaneMarker::set_c0_position(double value) {
  _internal_set_c0_position(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
inline bool LaneMarker::_internal_has_c1_heading_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneMarker::has_c1_heading_angle() const {
  return _internal_has_c1_heading_angle();
}
inline void LaneMarker::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double LaneMarker::_internal_c1_heading_angle() const {
  return c1_heading_angle_;
}
inline double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c1_heading_angle)
  return _internal_c1_heading_angle();
}
inline void LaneMarker::_internal_set_c1_heading_angle(double value) {
  _has_bits_[0] |= 0x00000010u;
  c1_heading_angle_ = value;
}
inline void LaneMarker::set_c1_heading_angle(double value) {
  _internal_set_c1_heading_angle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
inline bool LaneMarker::_internal_has_c2_curvature() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaneMarker::has_c2_curvature() const {
  return _internal_has_c2_curvature();
}
inline void LaneMarker::clear_c2_curvature() {
  c2_curvature_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LaneMarker::_internal_c2_curvature() const {
  return c2_curvature_;
}
inline double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c2_curvature)
  return _internal_c2_curvature();
}
inline void LaneMarker::_internal_set_c2_curvature(double value) {
  _has_bits_[0] |= 0x00000020u;
  c2_curvature_ = value;
}
inline void LaneMarker::set_c2_curvature(double value) {
  _internal_set_c2_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
inline bool LaneMarker::_internal_has_c3_curvature_derivative() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LaneMarker::has_c3_curvature_derivative() const {
  return _internal_has_c3_curvature_derivative();
}
inline void LaneMarker::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double LaneMarker::_internal_c3_curvature_derivative() const {
  return c3_curvature_derivative_;
}
inline double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.c3_curvature_derivative)
  return _internal_c3_curvature_derivative();
}
inline void LaneMarker::_internal_set_c3_curvature_derivative(double value) {
  _has_bits_[0] |= 0x00000040u;
  c3_curvature_derivative_ = value;
}
inline void LaneMarker::set_c3_curvature_derivative(double value) {
  _internal_set_c3_curvature_derivative(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
inline bool LaneMarker::_internal_has_view_range() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LaneMarker::has_view_range() const {
  return _internal_has_view_range();
}
inline void LaneMarker::clear_view_range() {
  view_range_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double LaneMarker::_internal_view_range() const {
  return view_range_;
}
inline double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.view_range)
  return _internal_view_range();
}
inline void LaneMarker::_internal_set_view_range(double value) {
  _has_bits_[0] |= 0x00000080u;
  view_range_ = value;
}
inline void LaneMarker::set_view_range(double value) {
  _internal_set_view_range(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.view_range)
}

// optional double longitude_start = 9;
inline bool LaneMarker::_internal_has_longitude_start() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LaneMarker::has_longitude_start() const {
  return _internal_has_longitude_start();
}
inline void LaneMarker::clear_longitude_start() {
  longitude_start_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double LaneMarker::_internal_longitude_start() const {
  return longitude_start_;
}
inline double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_start)
  return _internal_longitude_start();
}
inline void LaneMarker::_internal_set_longitude_start(double value) {
  _has_bits_[0] |= 0x00000100u;
  longitude_start_ = value;
}
inline void LaneMarker::set_longitude_start(double value) {
  _internal_set_longitude_start(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
inline bool LaneMarker::_internal_has_longitude_end() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LaneMarker::has_longitude_end() const {
  return _internal_has_longitude_end();
}
inline void LaneMarker::clear_longitude_end() {
  longitude_end_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double LaneMarker::_internal_longitude_end() const {
  return longitude_end_;
}
inline double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarker.longitude_end)
  return _internal_longitude_end();
}
inline void LaneMarker::_internal_set_longitude_end(double value) {
  _has_bits_[0] |= 0x00000200u;
  longitude_end_ = value;
}
inline void LaneMarker::set_longitude_end(double value) {
  _internal_set_longitude_end(value);
  // @@protoc_insertion_point(field_set:apollo.perception.LaneMarker.longitude_end)
}

// -------------------------------------------------------------------

// LaneMarkers

// optional .apollo.perception.LaneMarker left_lane_marker = 1;
inline bool LaneMarkers::_internal_has_left_lane_marker() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || left_lane_marker_ != nullptr);
  return value;
}
inline bool LaneMarkers::has_left_lane_marker() const {
  return _internal_has_left_lane_marker();
}
inline void LaneMarkers::clear_left_lane_marker() {
  if (left_lane_marker_ != nullptr) left_lane_marker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_left_lane_marker() const {
  const ::apollo::perception::LaneMarker* p = left_lane_marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarker*>(
      &::apollo::perception::_LaneMarker_default_instance_);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::left_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.left_lane_marker)
  return _internal_left_lane_marker();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.left_lane_marker)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::perception::LaneMarker* temp = left_lane_marker_;
  left_lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_mutable_left_lane_marker() {
  _has_bits_[0] |= 0x00000001u;
  if (left_lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarker>(GetArenaNoVirtual());
    left_lane_marker_ = p;
  }
  return left_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.left_lane_marker)
  return _internal_mutable_left_lane_marker();
}
inline void LaneMarkers::set_allocated_left_lane_marker(::apollo::perception::LaneMarker* left_lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete left_lane_marker_;
  }
  if (left_lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      left_lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left_lane_marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  left_lane_marker_ = left_lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.left_lane_marker)
}

// optional .apollo.perception.LaneMarker right_lane_marker = 2;
inline bool LaneMarkers::_internal_has_right_lane_marker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || right_lane_marker_ != nullptr);
  return value;
}
inline bool LaneMarkers::has_right_lane_marker() const {
  return _internal_has_right_lane_marker();
}
inline void LaneMarkers::clear_right_lane_marker() {
  if (right_lane_marker_ != nullptr) right_lane_marker_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_right_lane_marker() const {
  const ::apollo::perception::LaneMarker* p = right_lane_marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarker*>(
      &::apollo::perception::_LaneMarker_default_instance_);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::right_lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.right_lane_marker)
  return _internal_right_lane_marker();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.LaneMarkers.right_lane_marker)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::LaneMarker* temp = right_lane_marker_;
  right_lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_mutable_right_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
  if (right_lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarker>(GetArenaNoVirtual());
    right_lane_marker_ = p;
  }
  return right_lane_marker_;
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.right_lane_marker)
  return _internal_mutable_right_lane_marker();
}
inline void LaneMarkers::set_allocated_right_lane_marker(::apollo::perception::LaneMarker* right_lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete right_lane_marker_;
  }
  if (right_lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      right_lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right_lane_marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  right_lane_marker_ = right_lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.LaneMarkers.right_lane_marker)
}

// repeated .apollo.perception.LaneMarker next_left_lane_marker = 3;
inline int LaneMarkers::_internal_next_left_lane_marker_size() const {
  return next_left_lane_marker_.size();
}
inline int LaneMarkers::next_left_lane_marker_size() const {
  return _internal_next_left_lane_marker_size();
}
inline void LaneMarkers::clear_next_left_lane_marker() {
  next_left_lane_marker_.Clear();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return &next_left_lane_marker_;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_next_left_lane_marker(int index) const {
  return next_left_lane_marker_.Get(index);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_left_lane_marker)
  return _internal_next_left_lane_marker(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_add_next_left_lane_marker() {
  return next_left_lane_marker_.Add();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_left_lane_marker)
  return _internal_add_next_left_lane_marker();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_;
}

// repeated .apollo.perception.LaneMarker next_right_lane_marker = 4;
inline int LaneMarkers::_internal_next_right_lane_marker_size() const {
  return next_right_lane_marker_.size();
}
inline int LaneMarkers::next_right_lane_marker_size() const {
  return _internal_next_right_lane_marker_size();
}
inline void LaneMarkers::clear_next_right_lane_marker() {
  next_right_lane_marker_.Clear();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return &next_right_lane_marker_;
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::_internal_next_right_lane_marker(int index) const {
  return next_right_lane_marker_.Get(index);
}
inline const ::apollo::perception::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.LaneMarkers.next_right_lane_marker)
  return _internal_next_right_lane_marker(index);
}
inline ::apollo::perception::LaneMarker* LaneMarkers::_internal_add_next_right_lane_marker() {
  return next_right_lane_marker_.Add();
}
inline ::apollo::perception::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.perception.LaneMarkers.next_right_lane_marker)
  return _internal_add_next_right_lane_marker();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.perception.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_;
}

// -------------------------------------------------------------------

// CIPVInfo

// optional int32 cipv_id = 1;
inline bool CIPVInfo::_internal_has_cipv_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CIPVInfo::has_cipv_id() const {
  return _internal_has_cipv_id();
}
inline void CIPVInfo::clear_cipv_id() {
  cipv_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIPVInfo::_internal_cipv_id() const {
  return cipv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.cipv_id)
  return _internal_cipv_id();
}
inline void CIPVInfo::_internal_set_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cipv_id_ = value;
}
inline void CIPVInfo::set_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cipv_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
inline int CIPVInfo::_internal_potential_cipv_id_size() const {
  return potential_cipv_id_.size();
}
inline int CIPVInfo::potential_cipv_id_size() const {
  return _internal_potential_cipv_id_size();
}
inline void CIPVInfo::clear_potential_cipv_id() {
  potential_cipv_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIPVInfo::_internal_potential_cipv_id(int index) const {
  return potential_cipv_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.CIPVInfo.potential_cipv_id)
  return _internal_potential_cipv_id(index);
}
inline void CIPVInfo::set_potential_cipv_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.CIPVInfo.potential_cipv_id)
}
inline void CIPVInfo::_internal_add_potential_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  potential_cipv_id_.Add(value);
}
inline void CIPVInfo::add_potential_cipv_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_potential_cipv_id(value);
  // @@protoc_insertion_point(field_add:apollo.perception.CIPVInfo.potential_cipv_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CIPVInfo::_internal_potential_cipv_id() const {
  return potential_cipv_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return _internal_potential_cipv_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CIPVInfo::_internal_mutable_potential_cipv_id() {
  return &potential_cipv_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.CIPVInfo.potential_cipv_id)
  return _internal_mutable_potential_cipv_id();
}

// -------------------------------------------------------------------

// PerceptionObstacles

// repeated .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline int PerceptionObstacles::_internal_perception_obstacle_size() const {
  return perception_obstacle_.size();
}
inline int PerceptionObstacles::perception_obstacle_size() const {
  return _internal_perception_obstacle_size();
}
inline void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
inline const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::_internal_perception_obstacle(int index) const {
  return perception_obstacle_.Get(index);
}
inline const ::apollo::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.perception_obstacle)
  return _internal_perception_obstacle(index);
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::_internal_add_perception_obstacle() {
  return perception_obstacle_.Add();
}
inline ::apollo::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionObstacles.perception_obstacle)
  return _internal_add_perception_obstacle();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .apollo.common.Header header = 2;
inline bool PerceptionObstacles::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PerceptionObstacles::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PerceptionObstacles::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.header)
  return _internal_header();
}
inline ::apollo::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PerceptionObstacles::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* PerceptionObstacles::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.header)
  return _internal_mutable_header();
}
inline void PerceptionObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
inline bool PerceptionObstacles::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionObstacles::has_error_code() const {
  return _internal_has_error_code();
}
inline void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::common::ErrorCode PerceptionObstacles::_internal_error_code() const {
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
inline ::apollo::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.error_code)
  return _internal_error_code();
}
inline void PerceptionObstacles::_internal_set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  error_code_ = value;
}
inline void PerceptionObstacles::set_error_code(::apollo::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionObstacles.error_code)
}

// optional .apollo.perception.LaneMarkers lane_marker = 4;
inline bool PerceptionObstacles::_internal_has_lane_marker() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lane_marker_ != nullptr);
  return value;
}
inline bool PerceptionObstacles::has_lane_marker() const {
  return _internal_has_lane_marker();
}
inline void PerceptionObstacles::clear_lane_marker() {
  if (lane_marker_ != nullptr) lane_marker_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::perception::LaneMarkers& PerceptionObstacles::_internal_lane_marker() const {
  const ::apollo::perception::LaneMarkers* p = lane_marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarkers*>(
      &::apollo::perception::_LaneMarkers_default_instance_);
}
inline const ::apollo::perception::LaneMarkers& PerceptionObstacles::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.lane_marker)
  return _internal_lane_marker();
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.lane_marker)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::_internal_mutable_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
  if (lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarkers>(GetArenaNoVirtual());
    lane_marker_ = p;
  }
  return lane_marker_;
}
inline ::apollo::perception::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.lane_marker)
  return _internal_mutable_lane_marker();
}
inline void PerceptionObstacles::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_marker_;
  }
  if (lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lane_marker_ = lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.lane_marker)
}

// optional .apollo.perception.CIPVInfo cipv_info = 5;
inline bool PerceptionObstacles::_internal_has_cipv_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cipv_info_ != nullptr);
  return value;
}
inline bool PerceptionObstacles::has_cipv_info() const {
  return _internal_has_cipv_info();
}
inline void PerceptionObstacles::clear_cipv_info() {
  if (cipv_info_ != nullptr) cipv_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::perception::CIPVInfo& PerceptionObstacles::_internal_cipv_info() const {
  const ::apollo::perception::CIPVInfo* p = cipv_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::CIPVInfo*>(
      &::apollo::perception::_CIPVInfo_default_instance_);
}
inline const ::apollo::perception::CIPVInfo& PerceptionObstacles::cipv_info() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionObstacles.cipv_info)
  return _internal_cipv_info();
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionObstacles.cipv_info)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::CIPVInfo* temp = cipv_info_;
  cipv_info_ = nullptr;
  return temp;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::_internal_mutable_cipv_info() {
  _has_bits_[0] |= 0x00000004u;
  if (cipv_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::CIPVInfo>(GetArenaNoVirtual());
    cipv_info_ = p;
  }
  return cipv_info_;
}
inline ::apollo::perception::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionObstacles.cipv_info)
  return _internal_mutable_cipv_info();
}
inline void PerceptionObstacles::set_allocated_cipv_info(::apollo::perception::CIPVInfo* cipv_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cipv_info_;
  }
  if (cipv_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cipv_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cipv_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cipv_info_ = cipv_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionObstacles.cipv_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_Type>() {
  return ::apollo::perception::PerceptionObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_ConfidenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_ConfidenceType>() {
  return ::apollo::perception::PerceptionObstacle_ConfidenceType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::PerceptionObstacle_SubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::PerceptionObstacle_SubType>() {
  return ::apollo::perception::PerceptionObstacle_SubType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
