// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/roi_boundary_filter_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class ROIBoundaryFilterConfig;
class ROIBoundaryFilterConfigDefaultTypeInternal;
extern ROIBoundaryFilterConfigDefaultTypeInternal _ROIBoundaryFilterConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::ROIBoundaryFilterConfig* Arena::CreateMaybeMessage<::apollo::perception::lidar::ROIBoundaryFilterConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class ROIBoundaryFilterConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.ROIBoundaryFilterConfig) */ {
 public:
  ROIBoundaryFilterConfig();
  virtual ~ROIBoundaryFilterConfig();

  ROIBoundaryFilterConfig(const ROIBoundaryFilterConfig& from);
  ROIBoundaryFilterConfig(ROIBoundaryFilterConfig&& from) noexcept
    : ROIBoundaryFilterConfig() {
    *this = ::std::move(from);
  }

  inline ROIBoundaryFilterConfig& operator=(const ROIBoundaryFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIBoundaryFilterConfig& operator=(ROIBoundaryFilterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIBoundaryFilterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIBoundaryFilterConfig* internal_default_instance() {
    return reinterpret_cast<const ROIBoundaryFilterConfig*>(
               &_ROIBoundaryFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ROIBoundaryFilterConfig& a, ROIBoundaryFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIBoundaryFilterConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIBoundaryFilterConfig* New() const final {
    return CreateMaybeMessage<ROIBoundaryFilterConfig>(nullptr);
  }

  ROIBoundaryFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIBoundaryFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIBoundaryFilterConfig& from);
  void MergeFrom(const ROIBoundaryFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIBoundaryFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.ROIBoundaryFilterConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceToBoundaryThresholdFieldNumber = 1,
    kConfidenceThresholdFieldNumber = 2,
    kCrossRoiThresholdFieldNumber = 3,
    kInsideThresholdFieldNumber = 4,
  };
  // optional double distance_to_boundary_threshold = 1 [default = 1];
  bool has_distance_to_boundary_threshold() const;
  private:
  bool _internal_has_distance_to_boundary_threshold() const;
  public:
  void clear_distance_to_boundary_threshold();
  double distance_to_boundary_threshold() const;
  void set_distance_to_boundary_threshold(double value);
  private:
  double _internal_distance_to_boundary_threshold() const;
  void _internal_set_distance_to_boundary_threshold(double value);
  public:

  // optional float confidence_threshold = 2 [default = 0.5];
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional float cross_roi_threshold = 3 [default = 0.6];
  bool has_cross_roi_threshold() const;
  private:
  bool _internal_has_cross_roi_threshold() const;
  public:
  void clear_cross_roi_threshold();
  float cross_roi_threshold() const;
  void set_cross_roi_threshold(float value);
  private:
  float _internal_cross_roi_threshold() const;
  void _internal_set_cross_roi_threshold(float value);
  public:

  // optional double inside_threshold = 4 [default = 1];
  bool has_inside_threshold() const;
  private:
  bool _internal_has_inside_threshold() const;
  public:
  void clear_inside_threshold();
  double inside_threshold() const;
  void set_inside_threshold(double value);
  private:
  double _internal_inside_threshold() const;
  void _internal_set_inside_threshold(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.ROIBoundaryFilterConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double distance_to_boundary_threshold_;
  float confidence_threshold_;
  float cross_roi_threshold_;
  double inside_threshold_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ROIBoundaryFilterConfig

// optional double distance_to_boundary_threshold = 1 [default = 1];
inline bool ROIBoundaryFilterConfig::_internal_has_distance_to_boundary_threshold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROIBoundaryFilterConfig::has_distance_to_boundary_threshold() const {
  return _internal_has_distance_to_boundary_threshold();
}
inline void ROIBoundaryFilterConfig::clear_distance_to_boundary_threshold() {
  distance_to_boundary_threshold_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ROIBoundaryFilterConfig::_internal_distance_to_boundary_threshold() const {
  return distance_to_boundary_threshold_;
}
inline double ROIBoundaryFilterConfig::distance_to_boundary_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.ROIBoundaryFilterConfig.distance_to_boundary_threshold)
  return _internal_distance_to_boundary_threshold();
}
inline void ROIBoundaryFilterConfig::_internal_set_distance_to_boundary_threshold(double value) {
  _has_bits_[0] |= 0x00000001u;
  distance_to_boundary_threshold_ = value;
}
inline void ROIBoundaryFilterConfig::set_distance_to_boundary_threshold(double value) {
  _internal_set_distance_to_boundary_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.ROIBoundaryFilterConfig.distance_to_boundary_threshold)
}

// optional float confidence_threshold = 2 [default = 0.5];
inline bool ROIBoundaryFilterConfig::_internal_has_confidence_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROIBoundaryFilterConfig::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void ROIBoundaryFilterConfig::clear_confidence_threshold() {
  confidence_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ROIBoundaryFilterConfig::_internal_confidence_threshold() const {
  return confidence_threshold_;
}
inline float ROIBoundaryFilterConfig::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.ROIBoundaryFilterConfig.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void ROIBoundaryFilterConfig::_internal_set_confidence_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_threshold_ = value;
}
inline void ROIBoundaryFilterConfig::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.ROIBoundaryFilterConfig.confidence_threshold)
}

// optional float cross_roi_threshold = 3 [default = 0.6];
inline bool ROIBoundaryFilterConfig::_internal_has_cross_roi_threshold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROIBoundaryFilterConfig::has_cross_roi_threshold() const {
  return _internal_has_cross_roi_threshold();
}
inline void ROIBoundaryFilterConfig::clear_cross_roi_threshold() {
  cross_roi_threshold_ = 0.6f;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ROIBoundaryFilterConfig::_internal_cross_roi_threshold() const {
  return cross_roi_threshold_;
}
inline float ROIBoundaryFilterConfig::cross_roi_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.ROIBoundaryFilterConfig.cross_roi_threshold)
  return _internal_cross_roi_threshold();
}
inline void ROIBoundaryFilterConfig::_internal_set_cross_roi_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  cross_roi_threshold_ = value;
}
inline void ROIBoundaryFilterConfig::set_cross_roi_threshold(float value) {
  _internal_set_cross_roi_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.ROIBoundaryFilterConfig.cross_roi_threshold)
}

// optional double inside_threshold = 4 [default = 1];
inline bool ROIBoundaryFilterConfig::_internal_has_inside_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ROIBoundaryFilterConfig::has_inside_threshold() const {
  return _internal_has_inside_threshold();
}
inline void ROIBoundaryFilterConfig::clear_inside_threshold() {
  inside_threshold_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ROIBoundaryFilterConfig::_internal_inside_threshold() const {
  return inside_threshold_;
}
inline double ROIBoundaryFilterConfig::inside_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.ROIBoundaryFilterConfig.inside_threshold)
  return _internal_inside_threshold();
}
inline void ROIBoundaryFilterConfig::_internal_set_inside_threshold(double value) {
  _has_bits_[0] |= 0x00000008u;
  inside_threshold_ = value;
}
inline void ROIBoundaryFilterConfig::set_inside_threshold(double value) {
  _internal_set_inside_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.ROIBoundaryFilterConfig.inside_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2froi_5fboundary_5ffilter_5fconfig_2eproto
