// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/rt.proto

#include "modules/perception/proto/rt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Datum_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<68> scc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<33> scc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2frt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto;
namespace apollo {
namespace perception {
namespace inference {
class BlobShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobShape> _instance;
} _BlobShape_default_instance_;
class BlobProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobProto> _instance;
} _BlobProto_default_instance_;
class BlobProtoVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlobProtoVector> _instance;
} _BlobProtoVector_default_instance_;
class DatumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Datum> _instance;
} _Datum_default_instance_;
class LabelMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelMapItem> _instance;
} _LabelMapItem_default_instance_;
class LabelMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelMap> _instance;
} _LabelMap_default_instance_;
class SamplerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sampler> _instance;
} _Sampler_default_instance_;
class SampleConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampleConstraint> _instance;
} _SampleConstraint_default_instance_;
class BatchSamplerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchSampler> _instance;
} _BatchSampler_default_instance_;
class EmitConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmitConstraint> _instance;
} _EmitConstraint_default_instance_;
class NormalizedBBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizedBBox> _instance;
} _NormalizedBBox_default_instance_;
class BBox3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BBox3D> _instance;
} _BBox3D_default_instance_;
class AnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Annotation> _instance;
} _Annotation_default_instance_;
class AnnotationGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnotationGroup> _instance;
} _AnnotationGroup_default_instance_;
class AnnotatedDatumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnotatedDatum> _instance;
} _AnnotatedDatum_default_instance_;
class FillerParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FillerParameter> _instance;
} _FillerParameter_default_instance_;
class NetParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetParameter> _instance;
} _NetParameter_default_instance_;
class SolverParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolverParameter> _instance;
} _SolverParameter_default_instance_;
class SolverStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolverState> _instance;
} _SolverState_default_instance_;
class NetStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetState> _instance;
} _NetState_default_instance_;
class NetStateRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetStateRule> _instance;
} _NetStateRule_default_instance_;
class ParamSpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamSpec> _instance;
} _ParamSpec_default_instance_;
class LayerParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerParameter> _instance;
} _LayerParameter_default_instance_;
class TransformationParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransformationParameter> _instance;
} _TransformationParameter_default_instance_;
class ResizeParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResizeParameter> _instance;
} _ResizeParameter_default_instance_;
class SaltPepperParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaltPepperParameter> _instance;
} _SaltPepperParameter_default_instance_;
class NoiseParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoiseParameter> _instance;
} _NoiseParameter_default_instance_;
class DistortionParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistortionParameter> _instance;
} _DistortionParameter_default_instance_;
class ExpansionParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpansionParameter> _instance;
} _ExpansionParameter_default_instance_;
class LossParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossParameter> _instance;
} _LossParameter_default_instance_;
class AccuracyParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccuracyParameter> _instance;
} _AccuracyParameter_default_instance_;
class AnnotatedDataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnnotatedDataParameter> _instance;
} _AnnotatedDataParameter_default_instance_;
class ArgMaxParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArgMaxParameter> _instance;
} _ArgMaxParameter_default_instance_;
class ConcatParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConcatParameter> _instance;
} _ConcatParameter_default_instance_;
class BatchNormParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchNormParameter> _instance;
} _BatchNormParameter_default_instance_;
class BiasParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiasParameter> _instance;
} _BiasParameter_default_instance_;
class ContrastiveLossParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContrastiveLossParameter> _instance;
} _ContrastiveLossParameter_default_instance_;
class ConvolutionParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvolutionParameter> _instance;
} _ConvolutionParameter_default_instance_;
class CropParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CropParameter> _instance;
} _CropParameter_default_instance_;
class DataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataParameter> _instance;
} _DataParameter_default_instance_;
class DetectionEvaluateParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionEvaluateParameter> _instance;
} _DetectionEvaluateParameter_default_instance_;
class NonMaximumSuppressionParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NonMaximumSuppressionParameter> _instance;
} _NonMaximumSuppressionParameter_default_instance_;
class SaveOutputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveOutputParameter> _instance;
} _SaveOutputParameter_default_instance_;
class DetectionOutputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionOutputParameter> _instance;
} _DetectionOutputParameter_default_instance_;
class RegionOutputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionOutputParameter> _instance;
} _RegionOutputParameter_default_instance_;
class DropoutParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DropoutParameter> _instance;
} _DropoutParameter_default_instance_;
class DummyDataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DummyDataParameter> _instance;
} _DummyDataParameter_default_instance_;
class EltwiseParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EltwiseParameter> _instance;
} _EltwiseParameter_default_instance_;
class ELUParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ELUParameter> _instance;
} _ELUParameter_default_instance_;
class EmbedParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmbedParameter> _instance;
} _EmbedParameter_default_instance_;
class ExpParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpParameter> _instance;
} _ExpParameter_default_instance_;
class FlattenParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlattenParameter> _instance;
} _FlattenParameter_default_instance_;
class HDF5DataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HDF5DataParameter> _instance;
} _HDF5DataParameter_default_instance_;
class HDF5OutputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HDF5OutputParameter> _instance;
} _HDF5OutputParameter_default_instance_;
class HingeLossParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HingeLossParameter> _instance;
} _HingeLossParameter_default_instance_;
class RepeatedListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedList> _instance;
} _RepeatedList_default_instance_;
class DatasetParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatasetParameter> _instance;
} _DatasetParameter_default_instance_;
class ImageDataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageDataParameter> _instance;
} _ImageDataParameter_default_instance_;
class InfogainLossParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfogainLossParameter> _instance;
} _InfogainLossParameter_default_instance_;
class InnerProductParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InnerProductParameter> _instance;
} _InnerProductParameter_default_instance_;
class InputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputParameter> _instance;
} _InputParameter_default_instance_;
class LogParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogParameter> _instance;
} _LogParameter_default_instance_;
class LRNParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LRNParameter> _instance;
} _LRNParameter_default_instance_;
class MemoryDataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryDataParameter> _instance;
} _MemoryDataParameter_default_instance_;
class MultiBoxLossParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiBoxLossParameter> _instance;
} _MultiBoxLossParameter_default_instance_;
class MVNParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MVNParameter> _instance;
} _MVNParameter_default_instance_;
class NormalizeParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalizeParameter> _instance;
} _NormalizeParameter_default_instance_;
class ParameterParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParameterParameter> _instance;
} _ParameterParameter_default_instance_;
class PermuteParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PermuteParameter> _instance;
} _PermuteParameter_default_instance_;
class PoolingParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoolingParameter> _instance;
} _PoolingParameter_default_instance_;
class PowerParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerParameter> _instance;
} _PowerParameter_default_instance_;
class PriorBoxParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriorBoxParameter> _instance;
} _PriorBoxParameter_default_instance_;
class PythonParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PythonParameter> _instance;
} _PythonParameter_default_instance_;
class RecurrentParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecurrentParameter> _instance;
} _RecurrentParameter_default_instance_;
class ReductionParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReductionParameter> _instance;
} _ReductionParameter_default_instance_;
class ReLUParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReLUParameter> _instance;
} _ReLUParameter_default_instance_;
class ReshapeParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReshapeParameter> _instance;
} _ReshapeParameter_default_instance_;
class ROIPoolingParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROIPoolingParameter> _instance;
} _ROIPoolingParameter_default_instance_;
class ScaleParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScaleParameter> _instance;
} _ScaleParameter_default_instance_;
class SigmoidParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SigmoidParameter> _instance;
} _SigmoidParameter_default_instance_;
class SliceParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SliceParameter> _instance;
} _SliceParameter_default_instance_;
class SoftmaxParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftmaxParameter> _instance;
} _SoftmaxParameter_default_instance_;
class TanHParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TanHParameter> _instance;
} _TanHParameter_default_instance_;
class TileParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TileParameter> _instance;
} _TileParameter_default_instance_;
class ThresholdParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThresholdParameter> _instance;
} _ThresholdParameter_default_instance_;
class VideoDataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoDataParameter> _instance;
} _VideoDataParameter_default_instance_;
class WindowDataParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowDataParameter> _instance;
} _WindowDataParameter_default_instance_;
class SPPParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SPPParameter> _instance;
} _SPPParameter_default_instance_;
class V1LayerParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V1LayerParameter> _instance;
} _V1LayerParameter_default_instance_;
class V0LayerParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<V0LayerParameter> _instance;
} _V0LayerParameter_default_instance_;
class PReLUParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PReLUParameter> _instance;
} _PReLUParameter_default_instance_;
class PaddingParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaddingParameter> _instance;
} _PaddingParameter_default_instance_;
class YoloLossParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YoloLossParameter> _instance;
} _YoloLossParameter_default_instance_;
class YoloDumpParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YoloDumpParameter> _instance;
} _YoloDumpParameter_default_instance_;
class YoloAnchorsParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YoloAnchorsParameter> _instance;
} _YoloAnchorsParameter_default_instance_;
class DimensionStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DimensionStatistics> _instance;
} _DimensionStatistics_default_instance_;
class YoloTargetParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YoloTargetParameter> _instance;
} _YoloTargetParameter_default_instance_;
class RegionProposalParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionProposalParameter> _instance;
} _RegionProposalParameter_default_instance_;
class RegionParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionParameter> _instance;
} _RegionParameter_default_instance_;
class AnchorBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnchorBox> _instance;
} _AnchorBox_default_instance_;
class ReorgParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReorgParameter> _instance;
} _ReorgParameter_default_instance_;
}  // namespace inference
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_AccuracyParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::AccuracyParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::AccuracyParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_AnchorBox_default_instance_;
    new (ptr) ::apollo::perception::inference::AnchorBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::AnchorBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_AnnotatedDataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::AnnotatedDataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::AnnotatedDataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_AnnotatedDatum_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_AnnotatedDatum_default_instance_;
    new (ptr) ::apollo::perception::inference::AnnotatedDatum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::AnnotatedDatum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnnotatedDatum_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnnotatedDatum_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_Datum_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_Annotation_default_instance_;
    new (ptr) ::apollo::perception::inference::Annotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::Annotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_AnnotationGroup_default_instance_;
    new (ptr) ::apollo::perception::inference::AnnotationGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::AnnotationGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ArgMaxParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ArgMaxParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ArgMaxParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BBox3D_default_instance_;
    new (ptr) ::apollo::perception::inference::BBox3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BBox3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BatchNormParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::BatchNormParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BatchNormParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BatchSampler_default_instance_;
    new (ptr) ::apollo::perception::inference::BatchSampler();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BatchSampler::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BiasParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::BiasParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BiasParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BlobProto_default_instance_;
    new (ptr) ::apollo::perception::inference::BlobProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BlobProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_BlobProtoVector_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BlobProtoVector_default_instance_;
    new (ptr) ::apollo::perception::inference::BlobProtoVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BlobProtoVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlobProtoVector_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BlobProtoVector_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_BlobShape_default_instance_;
    new (ptr) ::apollo::perception::inference::BlobShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::BlobShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ConcatParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ConcatParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ConcatParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ContrastiveLossParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ContrastiveLossParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ContrastiveLossParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ConvolutionParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ConvolutionParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ConvolutionParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_CropParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::CropParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::CropParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DatasetParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DatasetParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DatasetParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_Datum_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_Datum_default_instance_;
    new (ptr) ::apollo::perception::inference::Datum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::Datum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Datum_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Datum_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DetectionEvaluateParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DetectionEvaluateParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DetectionEvaluateParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DetectionOutputParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DetectionOutputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DetectionOutputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DimensionStatistics_default_instance_;
    new (ptr) ::apollo::perception::inference::DimensionStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DimensionStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DistortionParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DistortionParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DistortionParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DropoutParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DropoutParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DropoutParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_DummyDataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::DummyDataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::DummyDataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ELUParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ELUParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ELUParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_EltwiseParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::EltwiseParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::EltwiseParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_EmbedParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::EmbedParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::EmbedParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_EmitConstraint_default_instance_;
    new (ptr) ::apollo::perception::inference::EmitConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::EmitConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ExpParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ExpParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ExpParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ExpansionParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ExpansionParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ExpansionParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get_mutable() = std::string("constant", 8);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::apollo::perception::inference::_FillerParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::FillerParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::FillerParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_FlattenParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::FlattenParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::FlattenParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_HDF5DataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::HDF5DataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::HDF5DataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_HDF5OutputParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::HDF5OutputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::HDF5OutputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_HingeLossParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::HingeLossParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::HingeLossParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ImageDataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ImageDataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ImageDataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_InfogainLossParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::InfogainLossParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::InfogainLossParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_InnerProductParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::InnerProductParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::InnerProductParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_InputParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::InputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::InputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_LRNParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::LRNParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::LRNParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_LabelMap_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_LabelMap_default_instance_;
    new (ptr) ::apollo::perception::inference::LabelMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::LabelMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelMap_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelMap_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_LabelMapItem_default_instance_;
    new (ptr) ::apollo::perception::inference::LabelMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::LabelMapItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_LayerParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::LayerParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::LayerParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<68> scc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 68, 0, InitDefaultsscc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_LogParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::LogParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::LogParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_LossParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::LossParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::LossParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_MVNParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::MVNParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::MVNParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_MemoryDataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::MemoryDataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::MemoryDataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_MultiBoxLossParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::MultiBoxLossParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::MultiBoxLossParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NetParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::NetParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NetParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_NetState_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NetState_default_instance_;
    new (ptr) ::apollo::perception::inference::NetState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NetState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetState_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NetStateRule_default_instance_;
    new (ptr) ::apollo::perception::inference::NetStateRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NetStateRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NoiseParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::NoiseParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NoiseParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::NonMaximumSuppressionParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NonMaximumSuppressionParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NormalizeParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::NormalizeParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NormalizeParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_NormalizedBBox_default_instance_;
    new (ptr) ::apollo::perception::inference::NormalizedBBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::NormalizedBBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PReLUParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PReLUParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PReLUParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PaddingParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PaddingParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PaddingParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ParamSpec_default_instance_;
    new (ptr) ::apollo::perception::inference::ParamSpec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ParamSpec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ParameterParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ParameterParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ParameterParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PermuteParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PermuteParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PermuteParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PoolingParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PoolingParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PoolingParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PowerParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PowerParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PowerParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PriorBoxParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PriorBoxParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PriorBoxParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_PythonParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::PythonParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::PythonParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ROIPoolingParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ROIPoolingParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ROIPoolingParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ReLUParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ReLUParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ReLUParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_RecurrentParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::RecurrentParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::RecurrentParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ReductionParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ReductionParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ReductionParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_RegionOutputParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::RegionOutputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::RegionOutputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.DefaultConstruct();
  *::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get_mutable() = std::string("anchor.txt", 10);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get_mutable());
  {
    void* ptr = &::apollo::perception::inference::_RegionParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::RegionParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::RegionParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_RegionProposalParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::RegionProposalParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::RegionProposalParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ReorgParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ReorgParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ReorgParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_RepeatedList_default_instance_;
    new (ptr) ::apollo::perception::inference::RepeatedList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::RepeatedList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ReshapeParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ReshapeParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ReshapeParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ResizeParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ResizeParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ResizeParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SPPParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SPPParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SPPParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SaltPepperParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SaltPepperParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SaltPepperParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SampleConstraint_default_instance_;
    new (ptr) ::apollo::perception::inference::SampleConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SampleConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_Sampler_default_instance_;
    new (ptr) ::apollo::perception::inference::Sampler();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::Sampler::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SaveOutputParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SaveOutputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SaveOutputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ScaleParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ScaleParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ScaleParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SigmoidParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SigmoidParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SigmoidParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SliceParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SliceParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SliceParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SoftmaxParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SoftmaxParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SoftmaxParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_SolverParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.DefaultConstruct();
  *::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get_mutable() = std::string("classification", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get_mutable());
  ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.DefaultConstruct();
  *::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get_mutable() = std::string("Integral", 8);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get_mutable());
  ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.DefaultConstruct();
  *::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get_mutable() = std::string("L2", 2);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get_mutable());
  ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.DefaultConstruct();
  *::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get_mutable() = std::string("SGD", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get_mutable());
  {
    void* ptr = &::apollo::perception::inference::_SolverParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::SolverParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SolverParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SolverParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SolverParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_SolverState_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_SolverState_default_instance_;
    new (ptr) ::apollo::perception::inference::SolverState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::SolverState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SolverState_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SolverState_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_TanHParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::TanHParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::TanHParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_ThresholdParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::ThresholdParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::ThresholdParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_TileParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::TileParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::TileParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_TransformationParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::TransformationParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::TransformationParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.DefaultConstruct();
  *::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get_mutable() = std::string("warp", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get_mutable());
  {
    void* ptr = &::apollo::perception::inference::_V0LayerParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::V0LayerParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::V0LayerParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_V1LayerParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::V1LayerParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::V1LayerParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<33> scc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 33, 0, InitDefaultsscc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
      &scc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base,}};

static void InitDefaultsscc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_VideoDataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::VideoDataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::VideoDataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.DefaultConstruct();
  *::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get_mutable() = std::string("warp", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get_mutable());
  {
    void* ptr = &::apollo::perception::inference::_WindowDataParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::WindowDataParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::WindowDataParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_YoloAnchorsParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::YoloAnchorsParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::YoloAnchorsParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_YoloDumpParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::YoloDumpParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::YoloDumpParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_YoloLossParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::YoloLossParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::YoloLossParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto}, {}};

static void InitDefaultsscc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::inference::_YoloTargetParameter_default_instance_;
    new (ptr) ::apollo::perception::inference::YoloTargetParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::inference::YoloTargetParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto}, {
      &scc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2frt_2eproto[101];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[38];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2frt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2frt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobShape, dim_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, double_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, double_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProto, width_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProtoVector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProtoVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BlobProtoVector, blobs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, float_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Datum, encoded_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMapItem, display_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LabelMap, item_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, min_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, max_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, min_aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Sampler, max_aspect_ratio_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, min_jaccard_overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, max_jaccard_overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, min_sample_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, max_sample_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, min_object_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, max_object_coverage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SampleConstraint, balance_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, use_original_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, sampler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, sample_constraint_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, max_sample_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchSampler, max_trials_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, emit_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmitConstraint, emit_overlap_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, xmin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, ymin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, xmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, ymax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, difficult_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, score_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizedBBox, size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BBox3D, alpha_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, instance_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, bbox3d_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, front_bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::Annotation, rear_bbox_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, group_label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotationGroup, annotation_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, datum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDatum, annotation_group_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, min_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, max_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, mean_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, std_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, sparse_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FillerParameter, variance_norm_),
  0,
  1,
  2,
  6,
  3,
  7,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, input_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, input_shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, input_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, force_backward_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, state_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, debug_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetParameter, layers_),
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, net_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, net_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, train_net_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_net_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, train_net_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_net_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, train_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, eval_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, ap_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, show_per_class_result_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_compute_loss_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, test_initialization_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, base_lr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, display_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, average_loss_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, iter_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, lr_policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, gamma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, power_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, momentum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, weight_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, regularization_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, stepsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, stepvalue_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, plateau_winsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, clip_gradients_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, snapshot_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, snapshot_prefix_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, snapshot_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, snapshot_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, solver_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, device_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, random_seed_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, momentum2_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, rms_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, debug_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, snapshot_after_train_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverParameter, solver_type_),
  3,
  9,
  0,
  ~0u,
  8,
  ~0u,
  10,
  ~0u,
  6,
  7,
  22,
  ~0u,
  11,
  23,
  30,
  12,
  13,
  33,
  14,
  35,
  1,
  15,
  16,
  17,
  18,
  4,
  19,
  ~0u,
  ~0u,
  34,
  20,
  2,
  24,
  36,
  29,
  21,
  28,
  5,
  32,
  27,
  37,
  25,
  31,
  26,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, learned_net_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, history_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, current_step_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, minimum_loss_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SolverState, iter_last_event_),
  1,
  0,
  ~0u,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetState, stage_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, min_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, max_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, stage_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NetStateRule, not_stage_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, share_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, lr_mult_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParamSpec, decay_mult_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, bottom_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, top_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, loss_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, blobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, propagate_down_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, include_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, exclude_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, transform_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, accuracy_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, annotated_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, argmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, batch_norm_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, bias_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, concat_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, contrastive_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, convolution_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, crop_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, detection_evaluate_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, detection_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, dropout_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, dummy_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, eltwise_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, elu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, embed_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, exp_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, flatten_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, hdf5_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, hdf5_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, hinge_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, image_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, yolo_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, data_prob_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, infogain_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, inner_product_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, input_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, log_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, lrn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, memory_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, multibox_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, region_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, region_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, region_proposal_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, yolo_target_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, yolo_anchors_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, yolo_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, yolo_dump_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, padding_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, reorg_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, mvn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, norm_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, parameter_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, permute_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, power_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, prelu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, prior_box_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, python_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, recurrent_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, reduction_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, relu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, reshape_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, roi_pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, scale_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, sigmoid_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, softmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, spp_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, slice_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, tanh_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, threshold_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, tile_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, video_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LayerParameter, window_data_param_),
  0,
  1,
  ~0u,
  ~0u,
  67,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  49,
  5,
  41,
  43,
  6,
  7,
  8,
  46,
  9,
  54,
  53,
  10,
  11,
  12,
  42,
  39,
  13,
  37,
  14,
  15,
  16,
  17,
  ~0u,
  ~0u,
  18,
  19,
  45,
  36,
  20,
  21,
  50,
  57,
  59,
  60,
  62,
  63,
  64,
  65,
  61,
  58,
  22,
  55,
  47,
  51,
  23,
  24,
  33,
  52,
  32,
  48,
  38,
  25,
  35,
  66,
  44,
  26,
  27,
  34,
  28,
  29,
  30,
  40,
  56,
  31,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, crop_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, crop_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, mean_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, force_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, force_gray_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, resize_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, noise_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, distort_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, expand_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, jitter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TransformationParameter, emit_constraint_),
  13,
  7,
  6,
  10,
  11,
  0,
  ~0u,
  8,
  9,
  1,
  2,
  4,
  5,
  12,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, resize_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, height_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, width_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, pad_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, pad_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ResizeParameter, interp_mode_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaltPepperParameter, value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, hist_eq_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, inverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, decolorize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, gauss_blur_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, jpeg_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, posterize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, erode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, saltpepper_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, saltpepper_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, clahe_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, convert_to_hsv_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NoiseParameter, convert_to_lab_),
  1,
  2,
  3,
  4,
  5,
  12,
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, brightness_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, brightness_delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, contrast_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, contrast_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, contrast_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, hue_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, hue_delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, saturation_prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, saturation_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, saturation_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DistortionParameter, random_order_prob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, prob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpansionParameter, max_expand_ratio_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, ignore_label_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, normalization_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LossParameter, normalize_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AccuracyParameter, ignore_label_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, batch_sampler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, label_map_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, anno_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnnotatedDataParameter, num_classes_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, out_max_val_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ArgMaxParameter, axis_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConcatParameter, concat_dim_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, use_global_stats_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, moving_average_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BatchNormParameter, eps_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, num_axes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::BiasParameter, filler_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, margin_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ContrastiveLossParameter, legacy_version_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, stride_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, dilation_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, pad_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, pad_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, kernel_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, kernel_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, stride_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, stride_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, group_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, engine_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ConvolutionParameter, force_nd_im2col_),
  2,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  13,
  0,
  1,
  9,
  11,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::CropParameter, offset_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, rand_skip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, backend_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, force_encoded_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DataParameter, prefetch_),
  0,
  2,
  4,
  7,
  8,
  1,
  3,
  5,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, background_label_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, overlap_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, evaluate_difficult_gt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, name_size_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionEvaluateParameter, resize_param_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NonMaximumSuppressionParameter, eta_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, output_directory_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, output_name_prefix_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, output_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, label_map_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, name_size_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, num_test_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SaveOutputParameter, resize_param_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, share_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, background_label_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, save_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, code_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, variance_encoded_in_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, visualize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, visualize_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DetectionOutputParameter, save_file_),
  3,
  10,
  4,
  1,
  2,
  11,
  6,
  9,
  5,
  7,
  8,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, anchorbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, nms_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, nms_sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionOutputParameter, is_rpn_),
  1,
  0,
  6,
  2,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DropoutParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DropoutParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DropoutParameter, dropout_ratio_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, data_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DummyDataParameter, width_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, operation_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EltwiseParameter, stable_prod_grad_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ELUParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ELUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ELUParameter, alpha_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, input_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::EmbedParameter, bias_filler_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, base_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ExpParameter, shift_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::FlattenParameter, end_axis_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5DataParameter, shuffle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5OutputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5OutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HDF5OutputParameter, file_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HingeLossParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HingeLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::HingeLossParameter, norm_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, list_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RepeatedList, num_repeat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, root_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, shuffle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DatasetParameter, repeated_list_),
  0,
  1,
  3,
  4,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, rand_skip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, shuffle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, new_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, new_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, is_color_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, root_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, prefetch_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ImageDataParameter, image_set_),
  0,
  10,
  4,
  5,
  7,
  8,
  11,
  9,
  1,
  3,
  6,
  2,
  12,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InfogainLossParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InfogainLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InfogainLossParameter, source_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InnerProductParameter, transpose_),
  2,
  4,
  0,
  1,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::InputParameter, shape_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, base_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LogParameter, shift_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, local_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, alpha_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, beta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, norm_region_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::LRNParameter, engine_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MemoryDataParameter, width_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, loc_loss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, conf_loss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, loc_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, share_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, match_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, overlap_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, use_prior_for_matching_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, background_label_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, use_difficult_gt_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, do_neg_mining_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, neg_pos_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, neg_overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, code_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, encode_variance_in_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, map_object_to_agnostic_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, ignore_cross_boundary_bbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, bp_inside_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, mining_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, sample_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MultiBoxLossParameter, use_prior_for_nms_),
  10,
  1,
  11,
  2,
  14,
  12,
  13,
  15,
  3,
  16,
  4,
  17,
  18,
  19,
  5,
  6,
  7,
  8,
  20,
  0,
  21,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, normalize_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, across_channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::MVNParameter, eps_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, across_spatial_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, scale_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, channel_shared_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::NormalizeParameter, eps_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParameterParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParameterParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ParameterParameter, shape_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PermuteParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PermuteParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PermuteParameter, order_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, pool_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, pad_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, pad_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, kernel_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, kernel_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, stride_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, stride_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, stride_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, engine_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, global_pooling_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PoolingParameter, cmp_out_shape_floor_as_conv_),
  0,
  2,
  7,
  8,
  1,
  3,
  4,
  12,
  5,
  6,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, power_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PowerParameter, shift_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, min_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, max_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, flip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, clip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, img_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, img_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, img_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, step_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, step_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, step_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PriorBoxParameter, offset_),
  ~0u,
  ~0u,
  ~0u,
  7,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, module_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, param_str_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PythonParameter, share_in_parallel_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, debug_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RecurrentParameter, expose_hidden_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, operation_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReductionParameter, coeff_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, negative_slope_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReLUParameter, engine_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReshapeParameter, num_axes_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, pooled_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, pooled_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, spatial_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ROIPoolingParameter, use_floor_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, num_axes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, bias_term_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ScaleParameter, bias_filler_),
  3,
  4,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SigmoidParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SigmoidParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SigmoidParameter, engine_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, slice_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SliceParameter, slice_dim_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, engine_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SoftmaxParameter, axis_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TanHParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TanHParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TanHParameter, engine_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::TileParameter, tiles_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ThresholdParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ThresholdParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ThresholdParameter, threshold_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, video_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, device_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, video_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::VideoDataParameter, skip_frames_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, mean_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, batch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, crop_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, fg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, bg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, fg_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, context_pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, crop_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, cache_images_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::WindowDataParameter, root_folder_),
  0,
  9,
  1,
  4,
  5,
  6,
  10,
  11,
  12,
  8,
  2,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, pyramid_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, pool_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::SPPParameter, engine_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, bottom_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, top_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, include_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, exclude_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, blobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, blob_share_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, blobs_lr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, weight_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, loss_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, accuracy_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, argmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, concat_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, contrastive_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, convolution_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, dropout_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, dummy_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, eltwise_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, exp_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, hdf5_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, hdf5_output_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, hinge_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, image_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, infogain_loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, inner_product_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, lrn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, memory_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, mvn_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, pooling_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, power_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, relu_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, sigmoid_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, softmax_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, slice_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, tanh_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, threshold_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, window_data_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, transform_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, loss_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V1LayerParameter, layer_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  32,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  20,
  16,
  2,
  29,
  3,
  4,
  5,
  19,
  17,
  30,
  6,
  7,
  21,
  8,
  9,
  10,
  11,
  15,
  24,
  12,
  14,
  22,
  27,
  28,
  23,
  26,
  18,
  13,
  25,
  31,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, biasterm_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, weight_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, bias_filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, kernelsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, group_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, stride_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, pool_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, dropout_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, local_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, alpha_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, beta_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, source_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, meanfile_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, batchsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, cropsize_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, mirror_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, blobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, blobs_lr_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, weight_decay_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, rand_skip_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, det_fg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, det_bg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, det_fg_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, det_context_pad_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, det_crop_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, new_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, new_channels_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, new_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, new_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, shuffle_images_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, concat_dim_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::V0LayerParameter, hdf5_output_param_),
  0,
  1,
  8,
  23,
  5,
  6,
  9,
  10,
  24,
  25,
  11,
  26,
  27,
  28,
  29,
  31,
  2,
  30,
  3,
  12,
  13,
  15,
  ~0u,
  ~0u,
  ~0u,
  17,
  32,
  33,
  34,
  18,
  4,
  19,
  20,
  21,
  14,
  16,
  22,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, filler_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PReLUParameter, channel_shared_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, pad_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, pad_b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, pad_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, pad_r_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::PaddingParameter, val_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, reg_loss_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloLossParameter, target_axis_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloDumpParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloDumpParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloDumpParameter, dump_dir_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, anchors_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, ref_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloAnchorsParameter, ref_h_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, mean_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, mean_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, mean_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, std_h_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, std_w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::DimensionStatistics, std_l_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, neg_rois_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, ign_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, neg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, min_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, bias_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, rescore_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, ori_cyc_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, obj_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, noobj_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::YoloTargetParameter, dimension_statistics_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, anchorbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, thresholds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, orientation_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, object_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, noobject_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, class_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, coord_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, jitter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, rescore_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, bias_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, tricky_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, nms_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, keep_top_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, pos_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, neg_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionProposalParameter, neg_ratio_),
  ~0u,
  ~0u,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  15,
  0,
  16,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, anchorbox_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, thresholds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, orientation_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, dimension_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, front_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, rear_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, object_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, noobject_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, class_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, coord_scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, jitter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, rescore_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, num_classes_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, bias_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, tricky_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, use_l1_loss_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, use_twice_softmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, is_anchor_normalized_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, ori_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, anchorfile_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, use_side_box_v2_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, use_side_box_v3_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::RegionParameter, ori_cycle_),
  ~0u,
  ~0u,
  13,
  14,
  15,
  16,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  10,
  8,
  20,
  11,
  12,
  17,
  ~0u,
  0,
  18,
  19,
  21,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, w_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::AnchorBox, h_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReorgParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReorgParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::inference::ReorgParameter, stride_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::perception::inference::BlobShape)},
  { 7, 21, sizeof(::apollo::perception::inference::BlobProto)},
  { 30, 36, sizeof(::apollo::perception::inference::BlobProtoVector)},
  { 37, 49, sizeof(::apollo::perception::inference::Datum)},
  { 56, 64, sizeof(::apollo::perception::inference::LabelMapItem)},
  { 67, 73, sizeof(::apollo::perception::inference::LabelMap)},
  { 74, 83, sizeof(::apollo::perception::inference::Sampler)},
  { 87, 99, sizeof(::apollo::perception::inference::SampleConstraint)},
  { 106, 116, sizeof(::apollo::perception::inference::BatchSampler)},
  { 121, 128, sizeof(::apollo::perception::inference::EmitConstraint)},
  { 130, 143, sizeof(::apollo::perception::inference::NormalizedBBox)},
  { 151, 163, sizeof(::apollo::perception::inference::BBox3D)},
  { 170, 180, sizeof(::apollo::perception::inference::Annotation)},
  { 185, 192, sizeof(::apollo::perception::inference::AnnotationGroup)},
  { 194, 202, sizeof(::apollo::perception::inference::AnnotatedDatum)},
  { 205, 218, sizeof(::apollo::perception::inference::FillerParameter)},
  { 226, 240, sizeof(::apollo::perception::inference::NetParameter)},
  { 249, 298, sizeof(::apollo::perception::inference::SolverParameter)},
  { 342, 353, sizeof(::apollo::perception::inference::SolverState)},
  { 359, 367, sizeof(::apollo::perception::inference::NetState)},
  { 370, 380, sizeof(::apollo::perception::inference::NetStateRule)},
  { 385, 394, sizeof(::apollo::perception::inference::ParamSpec)},
  { 398, 481, sizeof(::apollo::perception::inference::LayerParameter)},
  { 559, 579, sizeof(::apollo::perception::inference::TransformationParameter)},
  { 594, 608, sizeof(::apollo::perception::inference::ResizeParameter)},
  { 617, 624, sizeof(::apollo::perception::inference::SaltPepperParameter)},
  { 626, 644, sizeof(::apollo::perception::inference::NoiseParameter)},
  { 657, 673, sizeof(::apollo::perception::inference::DistortionParameter)},
  { 684, 691, sizeof(::apollo::perception::inference::ExpansionParameter)},
  { 693, 701, sizeof(::apollo::perception::inference::LossParameter)},
  { 704, 712, sizeof(::apollo::perception::inference::AccuracyParameter)},
  { 715, 724, sizeof(::apollo::perception::inference::AnnotatedDataParameter)},
  { 728, 736, sizeof(::apollo::perception::inference::ArgMaxParameter)},
  { 739, 746, sizeof(::apollo::perception::inference::ConcatParameter)},
  { 748, 756, sizeof(::apollo::perception::inference::BatchNormParameter)},
  { 759, 767, sizeof(::apollo::perception::inference::BiasParameter)},
  { 770, 777, sizeof(::apollo::perception::inference::ContrastiveLossParameter)},
  { 779, 802, sizeof(::apollo::perception::inference::ConvolutionParameter)},
  { 820, 827, sizeof(::apollo::perception::inference::CropParameter)},
  { 829, 844, sizeof(::apollo::perception::inference::DataParameter)},
  { 854, 865, sizeof(::apollo::perception::inference::DetectionEvaluateParameter)},
  { 871, 879, sizeof(::apollo::perception::inference::NonMaximumSuppressionParameter)},
  { 882, 894, sizeof(::apollo::perception::inference::SaveOutputParameter)},
  { 901, 918, sizeof(::apollo::perception::inference::DetectionOutputParameter)},
  { 930, 943, sizeof(::apollo::perception::inference::RegionOutputParameter)},
  { 951, 957, sizeof(::apollo::perception::inference::DropoutParameter)},
  { 958, 969, sizeof(::apollo::perception::inference::DummyDataParameter)},
  { 975, 983, sizeof(::apollo::perception::inference::EltwiseParameter)},
  { 986, 992, sizeof(::apollo::perception::inference::ELUParameter)},
  { 993, 1003, sizeof(::apollo::perception::inference::EmbedParameter)},
  { 1008, 1016, sizeof(::apollo::perception::inference::ExpParameter)},
  { 1019, 1026, sizeof(::apollo::perception::inference::FlattenParameter)},
  { 1028, 1036, sizeof(::apollo::perception::inference::HDF5DataParameter)},
  { 1039, 1045, sizeof(::apollo::perception::inference::HDF5OutputParameter)},
  { 1046, 1052, sizeof(::apollo::perception::inference::HingeLossParameter)},
  { 1053, 1060, sizeof(::apollo::perception::inference::RepeatedList)},
  { 1062, 1073, sizeof(::apollo::perception::inference::DatasetParameter)},
  { 1079, 1098, sizeof(::apollo::perception::inference::ImageDataParameter)},
  { 1112, 1118, sizeof(::apollo::perception::inference::InfogainLossParameter)},
  { 1119, 1130, sizeof(::apollo::perception::inference::InnerProductParameter)},
  { 1136, 1142, sizeof(::apollo::perception::inference::InputParameter)},
  { 1143, 1151, sizeof(::apollo::perception::inference::LogParameter)},
  { 1154, 1165, sizeof(::apollo::perception::inference::LRNParameter)},
  { 1171, 1180, sizeof(::apollo::perception::inference::MemoryDataParameter)},
  { 1184, 1211, sizeof(::apollo::perception::inference::MultiBoxLossParameter)},
  { 1233, 1241, sizeof(::apollo::perception::inference::MVNParameter)},
  { 1244, 1253, sizeof(::apollo::perception::inference::NormalizeParameter)},
  { 1257, 1263, sizeof(::apollo::perception::inference::ParameterParameter)},
  { 1264, 1270, sizeof(::apollo::perception::inference::PermuteParameter)},
  { 1271, 1289, sizeof(::apollo::perception::inference::PoolingParameter)},
  { 1302, 1310, sizeof(::apollo::perception::inference::PowerParameter)},
  { 1313, 1331, sizeof(::apollo::perception::inference::PriorBoxParameter)},
  { 1344, 1353, sizeof(::apollo::perception::inference::PythonParameter)},
  { 1357, 1367, sizeof(::apollo::perception::inference::RecurrentParameter)},
  { 1372, 1380, sizeof(::apollo::perception::inference::ReductionParameter)},
  { 1383, 1390, sizeof(::apollo::perception::inference::ReLUParameter)},
  { 1392, 1400, sizeof(::apollo::perception::inference::ReshapeParameter)},
  { 1403, 1412, sizeof(::apollo::perception::inference::ROIPoolingParameter)},
  { 1416, 1426, sizeof(::apollo::perception::inference::ScaleParameter)},
  { 1431, 1437, sizeof(::apollo::perception::inference::SigmoidParameter)},
  { 1438, 1446, sizeof(::apollo::perception::inference::SliceParameter)},
  { 1449, 1456, sizeof(::apollo::perception::inference::SoftmaxParameter)},
  { 1458, 1464, sizeof(::apollo::perception::inference::TanHParameter)},
  { 1465, 1472, sizeof(::apollo::perception::inference::TileParameter)},
  { 1474, 1480, sizeof(::apollo::perception::inference::ThresholdParameter)},
  { 1481, 1490, sizeof(::apollo::perception::inference::VideoDataParameter)},
  { 1494, 1512, sizeof(::apollo::perception::inference::WindowDataParameter)},
  { 1525, 1533, sizeof(::apollo::perception::inference::SPPParameter)},
  { 1536, 1584, sizeof(::apollo::perception::inference::V1LayerParameter)},
  { 1627, 1670, sizeof(::apollo::perception::inference::V0LayerParameter)},
  { 1708, 1715, sizeof(::apollo::perception::inference::PReLUParameter)},
  { 1717, 1727, sizeof(::apollo::perception::inference::PaddingParameter)},
  { 1732, 1739, sizeof(::apollo::perception::inference::YoloLossParameter)},
  { 1741, 1747, sizeof(::apollo::perception::inference::YoloDumpParameter)},
  { 1748, 1756, sizeof(::apollo::perception::inference::YoloAnchorsParameter)},
  { 1759, 1770, sizeof(::apollo::perception::inference::DimensionStatistics)},
  { 1776, 1792, sizeof(::apollo::perception::inference::YoloTargetParameter)},
  { 1803, 1827, sizeof(::apollo::perception::inference::RegionProposalParameter)},
  { 1846, 1876, sizeof(::apollo::perception::inference::RegionParameter)},
  { 1901, 1908, sizeof(::apollo::perception::inference::AnchorBox)},
  { 1910, 1916, sizeof(::apollo::perception::inference::ReorgParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BlobShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BlobProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BlobProtoVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_Datum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_LabelMapItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_LabelMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_Sampler_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SampleConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BatchSampler_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_EmitConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NormalizedBBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BBox3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_Annotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_AnnotationGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_AnnotatedDatum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_FillerParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NetParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SolverParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SolverState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NetState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NetStateRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ParamSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_LayerParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_TransformationParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ResizeParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SaltPepperParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NoiseParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DistortionParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ExpansionParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_LossParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_AccuracyParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_AnnotatedDataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ArgMaxParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ConcatParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BatchNormParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_BiasParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ContrastiveLossParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ConvolutionParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_CropParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DetectionEvaluateParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NonMaximumSuppressionParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SaveOutputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DetectionOutputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_RegionOutputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DropoutParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DummyDataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_EltwiseParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ELUParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_EmbedParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ExpParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_FlattenParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_HDF5DataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_HDF5OutputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_HingeLossParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_RepeatedList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DatasetParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ImageDataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_InfogainLossParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_InnerProductParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_InputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_LogParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_LRNParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_MemoryDataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_MultiBoxLossParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_MVNParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_NormalizeParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ParameterParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PermuteParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PoolingParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PowerParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PriorBoxParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PythonParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_RecurrentParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ReductionParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ReLUParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ReshapeParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ROIPoolingParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ScaleParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SigmoidParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SliceParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SoftmaxParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_TanHParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_TileParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ThresholdParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_VideoDataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_WindowDataParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_SPPParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_V1LayerParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_V0LayerParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PReLUParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_PaddingParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_YoloLossParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_YoloDumpParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_YoloAnchorsParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_DimensionStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_YoloTargetParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_RegionProposalParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_RegionParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_AnchorBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::inference::_ReorgParameter_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2frt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!modules/perception/proto/rt.proto\022\033apo"
  "llo.perception.inference\"\034\n\tBlobShape\022\017\n"
  "\003dim\030\001 \003(\003B\002\020\001\"\342\001\n\tBlobProto\0225\n\005shape\030\007 "
  "\001(\0132&.apollo.perception.inference.BlobSh"
  "ape\022\020\n\004data\030\005 \003(\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\022"
  "\027\n\013double_data\030\010 \003(\001B\002\020\001\022\027\n\013double_diff\030"
  "\t \003(\001B\002\020\001\022\016\n\003num\030\001 \001(\005:\0010\022\023\n\010channels\030\002 "
  "\001(\005:\0010\022\021\n\006height\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005"
  ":\0010\"H\n\017BlobProtoVector\0225\n\005blobs\030\001 \003(\0132&."
  "apollo.perception.inference.BlobProto\"\201\001"
  "\n\005Datum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001("
  "\005\022\r\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030"
  "\005 \001(\005\022\022\n\nfloat_data\030\006 \003(\002\022\026\n\007encoded\030\007 \001"
  "(\010:\005false\"A\n\014LabelMapItem\022\014\n\004name\030\001 \001(\t\022"
  "\r\n\005label\030\002 \001(\005\022\024\n\014display_name\030\003 \001(\t\"C\n\010"
  "LabelMap\0227\n\004item\030\001 \003(\0132).apollo.percepti"
  "on.inference.LabelMapItem\"o\n\007Sampler\022\024\n\t"
  "min_scale\030\001 \001(\002:\0011\022\024\n\tmax_scale\030\002 \001(\002:\0011"
  "\022\033\n\020min_aspect_ratio\030\003 \001(\002:\0011\022\033\n\020max_asp"
  "ect_ratio\030\004 \001(\002:\0011\"\326\001\n\020SampleConstraint\022"
  "\033\n\023min_jaccard_overlap\030\001 \001(\002\022\033\n\023max_jacc"
  "ard_overlap\030\002 \001(\002\022\033\n\023min_sample_coverage"
  "\030\003 \001(\002\022\033\n\023max_sample_coverage\030\004 \001(\002\022\033\n\023m"
  "in_object_coverage\030\005 \001(\002\022\033\n\023max_object_c"
  "overage\030\006 \001(\002\022\024\n\014balance_type\030\007 \003(\005\"\336\001\n\014"
  "BatchSampler\022 \n\022use_original_image\030\001 \001(\010"
  ":\004true\0225\n\007sampler\030\002 \001(\0132$.apollo.percept"
  "ion.inference.Sampler\022H\n\021sample_constrai"
  "nt\030\003 \001(\0132-.apollo.perception.inference.S"
  "ampleConstraint\022\022\n\nmax_sample\030\004 \001(\r\022\027\n\nm"
  "ax_trials\030\005 \001(\r:\003100\"\240\001\n\016EmitConstraint\022"
  "O\n\temit_type\030\001 \001(\01624.apollo.perception.i"
  "nference.EmitConstraint.EmitType:\006CENTER"
  "\022\024\n\014emit_overlap\030\002 \001(\002\"\'\n\010EmitType\022\n\n\006CE"
  "NTER\020\000\022\017\n\013MIN_OVERLAP\020\001\"\207\001\n\016NormalizedBB"
  "ox\022\014\n\004xmin\030\001 \001(\002\022\014\n\004ymin\030\002 \001(\002\022\014\n\004xmax\030\003"
  " \001(\002\022\014\n\004ymax\030\004 \001(\002\022\r\n\005label\030\005 \001(\005\022\021\n\tdif"
  "ficult\030\006 \001(\010\022\r\n\005score\030\007 \001(\002\022\014\n\004size\030\010 \001("
  "\002\"n\n\006BBox3D\022\014\n\001h\030\001 \001(\002:\0010\022\014\n\001w\030\002 \001(\002:\0010\022"
  "\014\n\001l\030\003 \001(\002:\0010\022\014\n\001x\030\004 \001(\002:\0010\022\014\n\001y\030\005 \001(\002:\001"
  "0\022\014\n\001z\030\006 \001(\002:\0010\022\020\n\005alpha\030\007 \001(\002:\0010\"\225\002\n\nAn"
  "notation\022\026\n\013instance_id\030\001 \001(\005:\0010\0229\n\004bbox"
  "\030\002 \001(\0132+.apollo.perception.inference.Nor"
  "malizedBBox\0223\n\006bbox3d\030\003 \001(\0132#.apollo.per"
  "ception.inference.BBox3D\022\?\n\nfront_bbox\030\004"
  " \001(\0132+.apollo.perception.inference.Norma"
  "lizedBBox\022>\n\trear_bbox\030\005 \001(\0132+.apollo.pe"
  "rception.inference.NormalizedBBox\"c\n\017Ann"
  "otationGroup\022\023\n\013group_label\030\001 \001(\005\022;\n\nann"
  "otation\030\002 \003(\0132\'.apollo.perception.infere"
  "nce.Annotation\"\213\002\n\016AnnotatedDatum\0221\n\005dat"
  "um\030\001 \001(\0132\".apollo.perception.inference.D"
  "atum\022H\n\004type\030\002 \001(\0162:.apollo.perception.i"
  "nference.AnnotatedDatum.AnnotationType\022F"
  "\n\020annotation_group\030\003 \003(\0132,.apollo.percep"
  "tion.inference.AnnotationGroup\"4\n\016Annota"
  "tionType\022\010\n\004BBOX\020\000\022\n\n\006BBOX3D\020\001\022\014\n\010BBOX3D"
  "FR\020\002\"\240\002\n\017FillerParameter\022\026\n\004type\030\001 \001(\t:\010"
  "constant\022\020\n\005value\030\002 \001(\002:\0010\022\016\n\003min\030\003 \001(\002:"
  "\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004mean\030\005 \001(\002:\0010\022\016\n\003s"
  "td\030\006 \001(\002:\0011\022\022\n\006sparse\030\007 \001(\005:\002-1\022X\n\rvaria"
  "nce_norm\030\010 \001(\01629.apollo.perception.infer"
  "ence.FillerParameter.VarianceNorm:\006FAN_I"
  "N\"4\n\014VarianceNorm\022\n\n\006FAN_IN\020\000\022\013\n\007FAN_OUT"
  "\020\001\022\013\n\007AVERAGE\020\002\"\346\002\n\014NetParameter\022\014\n\004name"
  "\030\001 \001(\t\022\r\n\005input\030\003 \003(\t\022;\n\013input_shape\030\010 \003"
  "(\0132&.apollo.perception.inference.BlobSha"
  "pe\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016force_backward\030"
  "\005 \001(\010:\005false\0224\n\005state\030\006 \001(\0132%.apollo.per"
  "ception.inference.NetState\022\031\n\ndebug_info"
  "\030\007 \001(\010:\005false\022:\n\005layer\030d \003(\0132+.apollo.pe"
  "rception.inference.LayerParameter\022=\n\006lay"
  "ers\030\002 \003(\0132-.apollo.perception.inference."
  "V1LayerParameter\"\322\014\n\017SolverParameter\022\013\n\003"
  "net\030\030 \001(\t\022<\n\tnet_param\030\031 \001(\0132).apollo.pe"
  "rception.inference.NetParameter\022\021\n\ttrain"
  "_net\030\001 \001(\t\022\020\n\010test_net\030\002 \003(\t\022B\n\017train_ne"
  "t_param\030\025 \001(\0132).apollo.perception.infere"
  "nce.NetParameter\022A\n\016test_net_param\030\026 \003(\013"
  "2).apollo.perception.inference.NetParame"
  "ter\022:\n\013train_state\030\032 \001(\0132%.apollo.percep"
  "tion.inference.NetState\0229\n\ntest_state\030\033 "
  "\003(\0132%.apollo.perception.inference.NetSta"
  "te\022!\n\teval_type\030) \001(\t:\016classification\022\034\n"
  "\nap_version\030* \001(\t:\010Integral\022$\n\025show_per_"
  "class_result\030, \001(\010:\005false\022\021\n\ttest_iter\030\003"
  " \003(\005\022\030\n\rtest_interval\030\004 \001(\005:\0010\022 \n\021test_c"
  "ompute_loss\030\023 \001(\010:\005false\022!\n\023test_initial"
  "ization\030  \001(\010:\004true\022\017\n\007base_lr\030\005 \001(\002\022\017\n\007"
  "display\030\006 \001(\005\022\027\n\014average_loss\030! \001(\005:\0011\022\020"
  "\n\010max_iter\030\007 \001(\005\022\024\n\titer_size\030$ \001(\005:\0011\022\021"
  "\n\tlr_policy\030\010 \001(\t\022\r\n\005gamma\030\t \001(\002\022\r\n\005powe"
  "r\030\n \001(\002\022\020\n\010momentum\030\013 \001(\002\022\024\n\014weight_deca"
  "y\030\014 \001(\002\022\037\n\023regularization_type\030\035 \001(\t:\002L2"
  "\022\020\n\010stepsize\030\r \001(\005\022\021\n\tstepvalue\030\" \003(\005\022\027\n"
  "\017plateau_winsize\030+ \003(\005\022\032\n\016clip_gradients"
  "\030# \001(\002:\002-1\022\023\n\010snapshot\030\016 \001(\005:\0010\022\027\n\017snaps"
  "hot_prefix\030\017 \001(\t\022\034\n\rsnapshot_diff\030\020 \001(\010:"
  "\005false\022a\n\017snapshot_format\030% \001(\0162;.apollo"
  ".perception.inference.SolverParameter.Sn"
  "apshotFormat:\013BINARYPROTO\022Q\n\013solver_mode"
  "\030\021 \001(\01627.apollo.perception.inference.Sol"
  "verParameter.SolverMode:\003GPU\022\024\n\tdevice_i"
  "d\030\022 \001(\005:\0010\022\027\n\013random_seed\030\024 \001(\003:\002-1\022\021\n\004t"
  "ype\030( \001(\t:\003SGD\022\024\n\005delta\030\037 \001(\002:\0051e-08\022\030\n\t"
  "momentum2\030\' \001(\002:\0050.999\022\027\n\trms_decay\030& \001("
  "\002:\0040.99\022\031\n\ndebug_info\030\027 \001(\010:\005false\022\"\n\024sn"
  "apshot_after_train\030\034 \001(\010:\004true\022Q\n\013solver"
  "_type\030\036 \001(\01627.apollo.perception.inferenc"
  "e.SolverParameter.SolverType:\003SGD\"+\n\016Sna"
  "pshotFormat\022\010\n\004HDF5\020\000\022\017\n\013BINARYPROTO\020\001\"\036"
  "\n\nSolverMode\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\"U\n\nSolver"
  "Type\022\007\n\003SGD\020\000\022\014\n\010NESTEROV\020\001\022\013\n\007ADAGRAD\020\002"
  "\022\013\n\007RMSPROP\020\003\022\014\n\010ADADELTA\020\004\022\010\n\004ADAM\020\005\"\273\001"
  "\n\013SolverState\022\014\n\004iter\030\001 \001(\005\022\023\n\013learned_n"
  "et\030\002 \001(\t\0227\n\007history\030\003 \003(\0132&.apollo.perce"
  "ption.inference.BlobProto\022\027\n\014current_ste"
  "p\030\004 \001(\005:\0010\022\033\n\014minimum_loss\030\005 \001(\002:\0051e+38\022"
  "\032\n\017iter_last_event\030\006 \001(\005:\0010\"d\n\010NetState\022"
  "7\n\005phase\030\001 \001(\0162\".apollo.perception.infer"
  "ence.Phase:\004TEST\022\020\n\005level\030\002 \001(\005:\0010\022\r\n\005st"
  "age\030\003 \003(\t\"\211\001\n\014NetStateRule\0221\n\005phase\030\001 \001("
  "\0162\".apollo.perception.inference.Phase\022\021\n"
  "\tmin_level\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005\022\r\n\005s"
  "tage\030\004 \003(\t\022\021\n\tnot_stage\030\005 \003(\t\"\271\001\n\tParamS"
  "pec\022\014\n\004name\030\001 \001(\t\022G\n\nshare_mode\030\002 \001(\01623."
  "apollo.perception.inference.ParamSpec.Di"
  "mCheckMode\022\022\n\007lr_mult\030\003 \001(\002:\0011\022\025\n\ndecay_"
  "mult\030\004 \001(\002:\0011\"*\n\014DimCheckMode\022\n\n\006STRICT\020"
  "\000\022\016\n\nPERMISSIVE\020\001\"\333(\n\016LayerParameter\022\014\n\004"
  "name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006bottom\030\003 \003(\t"
  "\022\013\n\003top\030\004 \003(\t\0221\n\005phase\030\n \001(\0162\".apollo.pe"
  "rception.inference.Phase\022\023\n\013loss_weight\030"
  "\005 \003(\002\0225\n\005param\030\006 \003(\0132&.apollo.perception"
  ".inference.ParamSpec\0225\n\005blobs\030\007 \003(\0132&.ap"
  "ollo.perception.inference.BlobProto\022\026\n\016p"
  "ropagate_down\030\013 \003(\010\022:\n\007include\030\010 \003(\0132).a"
  "pollo.perception.inference.NetStateRule\022"
  ":\n\007exclude\030\t \003(\0132).apollo.perception.inf"
  "erence.NetStateRule\022M\n\017transform_param\030d"
  " \001(\01324.apollo.perception.inference.Trans"
  "formationParameter\022>\n\nloss_param\030e \001(\0132*"
  ".apollo.perception.inference.LossParamet"
  "er\022F\n\016accuracy_param\030f \001(\0132..apollo.perc"
  "eption.inference.AccuracyParameter\022R\n\024an"
  "notated_data_param\030\310\001 \001(\01323.apollo.perce"
  "ption.inference.AnnotatedDataParameter\022B"
  "\n\014argmax_param\030g \001(\0132,.apollo.perception"
  ".inference.ArgMaxParameter\022J\n\020batch_norm"
  "_param\030\213\001 \001(\0132/.apollo.perception.infere"
  "nce.BatchNormParameter\022\?\n\nbias_param\030\215\001 "
  "\001(\0132*.apollo.perception.inference.BiasPa"
  "rameter\022B\n\014concat_param\030h \001(\0132,.apollo.p"
  "erception.inference.ConcatParameter\022U\n\026c"
  "ontrastive_loss_param\030i \001(\01325.apollo.per"
  "ception.inference.ContrastiveLossParamet"
  "er\022L\n\021convolution_param\030j \001(\01321.apollo.p"
  "erception.inference.ConvolutionParameter"
  "\022\?\n\ncrop_param\030\220\001 \001(\0132*.apollo.perceptio"
  "n.inference.CropParameter\022>\n\ndata_param\030"
  "k \001(\0132*.apollo.perception.inference.Data"
  "Parameter\022Z\n\030detection_evaluate_param\030\315\001"
  " \001(\01327.apollo.perception.inference.Detec"
  "tionEvaluateParameter\022V\n\026detection_outpu"
  "t_param\030\314\001 \001(\01325.apollo.perception.infer"
  "ence.DetectionOutputParameter\022D\n\rdropout"
  "_param\030l \001(\0132-.apollo.perception.inferen"
  "ce.DropoutParameter\022I\n\020dummy_data_param\030"
  "m \001(\0132/.apollo.perception.inference.Dumm"
  "yDataParameter\022D\n\reltwise_param\030n \001(\0132-."
  "apollo.perception.inference.EltwiseParam"
  "eter\022=\n\telu_param\030\214\001 \001(\0132).apollo.percep"
  "tion.inference.ELUParameter\022A\n\013embed_par"
  "am\030\211\001 \001(\0132+.apollo.perception.inference."
  "EmbedParameter\022<\n\texp_param\030o \001(\0132).apol"
  "lo.perception.inference.ExpParameter\022E\n\r"
  "flatten_param\030\207\001 \001(\0132-.apollo.perception"
  ".inference.FlattenParameter\022G\n\017hdf5_data"
  "_param\030p \001(\0132..apollo.perception.inferen"
  "ce.HDF5DataParameter\022K\n\021hdf5_output_para"
  "m\030q \001(\01320.apollo.perception.inference.HD"
  "F5OutputParameter\022I\n\020hinge_loss_param\030r "
  "\001(\0132/.apollo.perception.inference.HingeL"
  "ossParameter\022I\n\020image_data_param\030s \001(\0132/"
  ".apollo.perception.inference.ImageDataPa"
  "rameter\022J\n\017yolo_data_param\030\347\230h \003(\0132/.apo"
  "llo.perception.inference.ImageDataParame"
  "ter\022\031\n\017data_prob_param\030\350\230h \003(\002\022O\n\023infoga"
  "in_loss_param\030t \001(\01322.apollo.perception."
  "inference.InfogainLossParameter\022O\n\023inner"
  "_product_param\030u \001(\01322.apollo.perception"
  ".inference.InnerProductParameter\022A\n\013inpu"
  "t_param\030\217\001 \001(\0132+.apollo.perception.infer"
  "ence.InputParameter\022=\n\tlog_param\030\206\001 \001(\0132"
  ").apollo.perception.inference.LogParamet"
  "er\022<\n\tlrn_param\030v \001(\0132).apollo.perceptio"
  "n.inference.LRNParameter\022K\n\021memory_data_"
  "param\030w \001(\01320.apollo.perception.inferenc"
  "e.MemoryDataParameter\022P\n\023multibox_loss_p"
  "aram\030\311\001 \001(\01322.apollo.perception.inferenc"
  "e.MultiBoxLossParameter\022C\n\014region_param\030"
  "\254\002 \001(\0132,.apollo.perception.inference.Reg"
  "ionParameter\022P\n\023region_output_param\030\266\002 \001"
  "(\01322.apollo.perception.inference.RegionO"
  "utputParameter\022T\n\025region_proposal_param\030"
  "\300\002 \001(\01324.apollo.perception.inference.Reg"
  "ionProposalParameter\022M\n\021yolo_target_para"
  "m\030\201\300\014 \001(\01320.apollo.perception.inference."
  "YoloTargetParameter\022O\n\022yolo_anchors_para"
  "m\030\202\300\014 \001(\01321.apollo.perception.inference."
  "YoloAnchorsParameter\022I\n\017yolo_loss_param\030"
  "\203\300\014 \001(\0132..apollo.perception.inference.Yo"
  "loLossParameter\022I\n\017yolo_dump_param\030\204\300\014 \001"
  "(\0132..apollo.perception.inference.YoloDum"
  "pParameter\022E\n\rpadding_param\030\351\007 \001(\0132-.apo"
  "llo.perception.inference.PaddingParamete"
  "r\022A\n\013reorg_param\030\255\002 \001(\0132+.apollo.percept"
  "ion.inference.ReorgParameter\022<\n\tmvn_para"
  "m\030x \001(\0132).apollo.perception.inference.MV"
  "NParameter\022D\n\nnorm_param\030\316\001 \001(\0132/.apollo"
  ".perception.inference.NormalizeParameter"
  "\022I\n\017parameter_param\030\221\001 \001(\0132/.apollo.perc"
  "eption.inference.ParameterParameter\022E\n\rp"
  "ermute_param\030\312\001 \001(\0132-.apollo.perception."
  "inference.PermuteParameter\022D\n\rpooling_pa"
  "ram\030y \001(\0132-.apollo.perception.inference."
  "PoolingParameter\022@\n\013power_param\030z \001(\0132+."
  "apollo.perception.inference.PowerParamet"
  "er\022A\n\013prelu_param\030\203\001 \001(\0132+.apollo.percep"
  "tion.inference.PReLUParameter\022H\n\017prior_b"
  "ox_param\030\313\001 \001(\0132..apollo.perception.infe"
  "rence.PriorBoxParameter\022C\n\014python_param\030"
  "\202\001 \001(\0132,.apollo.perception.inference.Pyt"
  "honParameter\022I\n\017recurrent_param\030\222\001 \001(\0132/"
  ".apollo.perception.inference.RecurrentPa"
  "rameter\022I\n\017reduction_param\030\210\001 \001(\0132/.apol"
  "lo.perception.inference.ReductionParamet"
  "er\022>\n\nrelu_param\030{ \001(\0132*.apollo.percepti"
  "on.inference.ReLUParameter\022E\n\rreshape_pa"
  "ram\030\205\001 \001(\0132-.apollo.perception.inference"
  ".ReshapeParameter\022N\n\021roi_pooling_param\030\327"
  "\307\370\003 \001(\01320.apollo.perception.inference.RO"
  "IPoolingParameter\022A\n\013scale_param\030\216\001 \001(\0132"
  "+.apollo.perception.inference.ScaleParam"
  "eter\022D\n\rsigmoid_param\030| \001(\0132-.apollo.per"
  "ception.inference.SigmoidParameter\022D\n\rso"
  "ftmax_param\030} \001(\0132-.apollo.perception.in"
  "ference.SoftmaxParameter\022=\n\tspp_param\030\204\001"
  " \001(\0132).apollo.perception.inference.SPPPa"
  "rameter\022@\n\013slice_param\030~ \001(\0132+.apollo.pe"
  "rception.inference.SliceParameter\022>\n\ntan"
  "h_param\030\177 \001(\0132*.apollo.perception.infere"
  "nce.TanHParameter\022I\n\017threshold_param\030\200\001 "
  "\001(\0132/.apollo.perception.inference.Thresh"
  "oldParameter\022\?\n\ntile_param\030\212\001 \001(\0132*.apol"
  "lo.perception.inference.TileParameter\022J\n"
  "\020video_data_param\030\317\001 \001(\0132/.apollo.percep"
  "tion.inference.VideoDataParameter\022L\n\021win"
  "dow_data_param\030\201\001 \001(\01320.apollo.perceptio"
  "n.inference.WindowDataParameter\"\310\004\n\027Tran"
  "sformationParameter\022\020\n\005scale\030\001 \001(\002:\0011\022\025\n"
  "\006mirror\030\002 \001(\010:\005false\022\024\n\tcrop_size\030\003 \001(\r:"
  "\0010\022\021\n\006crop_h\030\013 \001(\r:\0010\022\021\n\006crop_w\030\014 \001(\r:\0010"
  "\022\021\n\tmean_file\030\004 \001(\t\022\022\n\nmean_value\030\005 \003(\002\022"
  "\032\n\013force_color\030\006 \001(\010:\005false\022\031\n\nforce_gra"
  "y\030\007 \001(\010:\005false\022B\n\014resize_param\030\010 \001(\0132,.a"
  "pollo.perception.inference.ResizeParamet"
  "er\022@\n\013noise_param\030\t \001(\0132+.apollo.percept"
  "ion.inference.NoiseParameter\022G\n\rdistort_"
  "param\030\r \001(\01320.apollo.perception.inferenc"
  "e.DistortionParameter\022E\n\014expand_param\030\016 "
  "\001(\0132/.apollo.perception.inference.Expans"
  "ionParameter\022\016\n\006jitter\030\017 \001(\002\022D\n\017emit_con"
  "straint\030\n \001(\0132+.apollo.perception.infere"
  "nce.EmitConstraint\"\322\004\n\017ResizeParameter\022\017"
  "\n\004prob\030\001 \001(\002:\0011\022S\n\013resize_mode\030\002 \001(\01628.a"
  "pollo.perception.inference.ResizeParamet"
  "er.Resize_mode:\004WARP\022\021\n\006height\030\003 \001(\r:\0010\022"
  "\020\n\005width\030\004 \001(\r:\0010\022\027\n\014height_scale\030\010 \001(\r:"
  "\0010\022\026\n\013width_scale\030\t \001(\r:\0010\022Q\n\010pad_mode\030\005"
  " \001(\01625.apollo.perception.inference.Resiz"
  "eParameter.Pad_mode:\010CONSTANT\022\021\n\tpad_val"
  "ue\030\006 \003(\002\022M\n\013interp_mode\030\007 \003(\01628.apollo.p"
  "erception.inference.ResizeParameter.Inte"
  "rp_mode\"G\n\013Resize_mode\022\010\n\004WARP\020\001\022\022\n\016FIT_"
  "SMALL_SIZE\020\002\022\032\n\026FIT_LARGE_SIZE_AND_PAD\020\003"
  "\":\n\010Pad_mode\022\014\n\010CONSTANT\020\001\022\014\n\010MIRRORED\020\002"
  "\022\022\n\016REPEAT_NEAREST\020\003\"I\n\013Interp_mode\022\n\n\006L"
  "INEAR\020\001\022\010\n\004AREA\020\002\022\013\n\007NEAREST\020\003\022\t\n\005CUBIC\020"
  "\004\022\014\n\010LANCZOS4\020\005\"9\n\023SaltPepperParameter\022\023"
  "\n\010fraction\030\001 \001(\002:\0010\022\r\n\005value\030\002 \003(\002\"\204\003\n\016N"
  "oiseParameter\022\017\n\004prob\030\001 \001(\002:\0010\022\026\n\007hist_e"
  "q\030\002 \001(\010:\005false\022\026\n\007inverse\030\003 \001(\010:\005false\022\031"
  "\n\ndecolorize\030\004 \001(\010:\005false\022\031\n\ngauss_blur\030"
  "\005 \001(\010:\005false\022\020\n\004jpeg\030\006 \001(\002:\002-1\022\030\n\tposter"
  "ize\030\007 \001(\010:\005false\022\024\n\005erode\030\010 \001(\010:\005false\022\031"
  "\n\nsaltpepper\030\t \001(\010:\005false\022J\n\020saltpepper_"
  "param\030\n \001(\01320.apollo.perception.inferenc"
  "e.SaltPepperParameter\022\024\n\005clahe\030\013 \001(\010:\005fa"
  "lse\022\035\n\016convert_to_hsv\030\014 \001(\010:\005false\022\035\n\016co"
  "nvert_to_lab\030\r \001(\010:\005false\"\275\002\n\023Distortion"
  "Parameter\022\032\n\017brightness_prob\030\001 \001(\002:\0010\022\033\n"
  "\020brightness_delta\030\002 \001(\002:\0010\022\030\n\rcontrast_p"
  "rob\030\003 \001(\002:\0010\022\031\n\016contrast_lower\030\004 \001(\002:\0010\022"
  "\031\n\016contrast_upper\030\005 \001(\002:\0010\022\023\n\010hue_prob\030\006"
  " \001(\002:\0010\022\024\n\thue_delta\030\007 \001(\002:\0010\022\032\n\017saturat"
  "ion_prob\030\010 \001(\002:\0010\022\033\n\020saturation_lower\030\t "
  "\001(\002:\0010\022\033\n\020saturation_upper\030\n \001(\002:\0010\022\034\n\021r"
  "andom_order_prob\030\013 \001(\002:\0010\"B\n\022ExpansionPa"
  "rameter\022\017\n\004prob\030\001 \001(\002:\0011\022\033\n\020max_expand_r"
  "atio\030\002 \001(\002:\0011\"\330\001\n\rLossParameter\022\024\n\014ignor"
  "e_label\030\001 \001(\005\022Z\n\rnormalization\030\003 \001(\0162<.a"
  "pollo.perception.inference.LossParameter"
  ".NormalizationMode:\005VALID\022\021\n\tnormalize\030\002"
  " \001(\010\"B\n\021NormalizationMode\022\010\n\004FULL\020\000\022\t\n\005V"
  "ALID\020\001\022\016\n\nBATCH_SIZE\020\002\022\010\n\004NONE\020\003\"L\n\021Accu"
  "racyParameter\022\020\n\005top_k\030\001 \001(\r:\0011\022\017\n\004axis\030"
  "\002 \001(\005:\0011\022\024\n\014ignore_label\030\003 \001(\005\"\337\001\n\026Annot"
  "atedDataParameter\022@\n\rbatch_sampler\030\001 \003(\013"
  "2).apollo.perception.inference.BatchSamp"
  "ler\022\026\n\016label_map_file\030\002 \001(\t\022S\n\tanno_type"
  "\030\003 \001(\0162:.apollo.perception.inference.Ann"
  "otatedDatum.AnnotationType:\004BBOX\022\026\n\013num_"
  "classes\030\n \001(\005:\0013\"M\n\017ArgMaxParameter\022\032\n\013o"
  "ut_max_val\030\001 \001(\010:\005false\022\020\n\005top_k\030\002 \001(\r:\001"
  "1\022\014\n\004axis\030\003 \001(\005\"9\n\017ConcatParameter\022\017\n\004ax"
  "is\030\002 \001(\005:\0011\022\025\n\nconcat_dim\030\001 \001(\r:\0011\"j\n\022Ba"
  "tchNormParameter\022\030\n\020use_global_stats\030\001 \001"
  "(\010\022&\n\027moving_average_fraction\030\002 \001(\002:\0050.9"
  "99\022\022\n\003eps\030\003 \001(\002:\0051e-05\"s\n\rBiasParameter\022"
  "\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:\0011\022<\n"
  "\006filler\030\003 \001(\0132,.apollo.perception.infere"
  "nce.FillerParameter\"L\n\030ContrastiveLossPa"
  "rameter\022\021\n\006margin\030\001 \001(\002:\0011\022\035\n\016legacy_ver"
  "sion\030\002 \001(\010:\005false\"\276\004\n\024ConvolutionParamet"
  "er\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001("
  "\010:\004true\022\013\n\003pad\030\003 \003(\r\022\023\n\013kernel_size\030\004 \003("
  "\r\022\016\n\006stride\030\006 \003(\r\022\020\n\010dilation\030\022 \003(\r\022\020\n\005p"
  "ad_h\030\t \001(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\020\n\010kerne"
  "l_h\030\013 \001(\r\022\020\n\010kernel_w\030\014 \001(\r\022\020\n\010stride_h\030"
  "\r \001(\r\022\020\n\010stride_w\030\016 \001(\r\022\020\n\005group\030\005 \001(\r:\001"
  "1\022C\n\rweight_filler\030\007 \001(\0132,.apollo.percep"
  "tion.inference.FillerParameter\022A\n\013bias_f"
  "iller\030\010 \001(\0132,.apollo.perception.inferenc"
  "e.FillerParameter\022Q\n\006engine\030\017 \001(\01628.apol"
  "lo.perception.inference.ConvolutionParam"
  "eter.Engine:\007DEFAULT\022\017\n\004axis\030\020 \001(\005:\0011\022\036\n"
  "\017force_nd_im2col\030\021 \001(\010:\005false\"+\n\006Engine\022"
  "\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"0\n\rCr"
  "opParameter\022\017\n\004axis\030\001 \001(\005:\0012\022\016\n\006offset\030\002"
  " \003(\r\"\272\002\n\rDataParameter\022\016\n\006source\030\001 \001(\t\022\022"
  "\n\nbatch_size\030\004 \001(\r\022\024\n\trand_skip\030\007 \001(\r:\0010"
  "\022G\n\007backend\030\010 \001(\0162-.apollo.perception.in"
  "ference.DataParameter.DB:\007LEVELDB\022\020\n\005sca"
  "le\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_s"
  "ize\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\"\n\023f"
  "orce_encoded_color\030\t \001(\010:\005false\022\023\n\010prefe"
  "tch\030\n \001(\r:\0014\"\033\n\002DB\022\013\n\007LEVELDB\020\000\022\010\n\004LMDB\020"
  "\001\"\362\001\n\032DetectionEvaluateParameter\022\023\n\013num_"
  "classes\030\001 \001(\r\022\036\n\023background_label_id\030\002 \001"
  "(\r:\0010\022\036\n\021overlap_threshold\030\003 \001(\002:\0030.5\022#\n"
  "\025evaluate_difficult_gt\030\004 \001(\010:\004true\022\026\n\016na"
  "me_size_file\030\005 \001(\t\022B\n\014resize_param\030\006 \001(\013"
  "2,.apollo.perception.inference.ResizePar"
  "ameter\"[\n\036NonMaximumSuppressionParameter"
  "\022\032\n\rnms_threshold\030\001 \001(\002:\0030.3\022\r\n\005top_k\030\002 "
  "\001(\005\022\016\n\003eta\030\003 \001(\002:\0011\"\356\001\n\023SaveOutputParame"
  "ter\022\030\n\020output_directory\030\001 \001(\t\022\032\n\022output_"
  "name_prefix\030\002 \001(\t\022\025\n\routput_format\030\003 \001(\t"
  "\022\026\n\016label_map_file\030\004 \001(\t\022\026\n\016name_size_fi"
  "le\030\005 \001(\t\022\026\n\016num_test_image\030\006 \001(\r\022B\n\014resi"
  "ze_param\030\007 \001(\0132,.apollo.perception.infer"
  "ence.ResizeParameter\"\211\004\n\030DetectionOutput"
  "Parameter\022\023\n\013num_classes\030\001 \001(\r\022\034\n\016share_"
  "location\030\002 \001(\010:\004true\022\036\n\023background_label"
  "_id\030\003 \001(\005:\0010\022N\n\tnms_param\030\004 \001(\0132;.apollo"
  ".perception.inference.NonMaximumSuppress"
  "ionParameter\022K\n\021save_output_param\030\005 \001(\0132"
  "0.apollo.perception.inference.SaveOutput"
  "Parameter\022R\n\tcode_type\030\006 \001(\01627.apollo.pe"
  "rception.inference.PriorBoxParameter.Cod"
  "eType:\006CORNER\022)\n\032variance_encoded_in_tar"
  "get\030\010 \001(\010:\005false\022\026\n\nkeep_top_k\030\007 \001(\005:\002-1"
  "\022\034\n\024confidence_threshold\030\t \001(\002\022\030\n\tvisual"
  "ize\030\n \001(\010:\005false\022\033\n\023visualize_threshold\030"
  "\013 \001(\002\022\021\n\tsave_file\030\014 \001(\t\"\251\002\n\025RegionOutpu"
  "tParameter\022\023\n\013num_classes\030\001 \001(\r\022N\n\tnms_p"
  "aram\030\002 \001(\0132;.apollo.perception.inference"
  ".NonMaximumSuppressionParameter\022\026\n\nkeep_"
  "top_k\030\003 \001(\005:\002-1\022\034\n\024confidence_threshold\030"
  "\004 \001(\002\0229\n\tanchorbox\030\005 \003(\0132&.apollo.percep"
  "tion.inference.AnchorBox\022\020\n\010nms_type\030\006 \001"
  "(\005\022\021\n\tnms_sigma\030\007 \001(\002\022\025\n\006is_rpn\030\010 \001(\010:\005f"
  "alse\".\n\020DropoutParameter\022\032\n\rdropout_rati"
  "o\030\001 \001(\002:\0030.5\"\314\001\n\022DummyDataParameter\022A\n\013d"
  "ata_filler\030\001 \003(\0132,.apollo.perception.inf"
  "erence.FillerParameter\0225\n\005shape\030\006 \003(\0132&."
  "apollo.perception.inference.BlobShape\022\013\n"
  "\003num\030\002 \003(\r\022\020\n\010channels\030\003 \003(\r\022\016\n\006height\030\004"
  " \003(\r\022\r\n\005width\030\005 \003(\r\"\273\001\n\020EltwiseParameter"
  "\022O\n\toperation\030\001 \001(\01627.apollo.perception."
  "inference.EltwiseParameter.EltwiseOp:\003SU"
  "M\022\r\n\005coeff\030\002 \003(\002\022\036\n\020stable_prod_grad\030\003 \001"
  "(\010:\004true\"\'\n\tEltwiseOp\022\010\n\004PROD\020\000\022\007\n\003SUM\020\001"
  "\022\007\n\003MAX\020\002\" \n\014ELUParameter\022\020\n\005alpha\030\001 \001(\002"
  ":\0011\"\330\001\n\016EmbedParameter\022\022\n\nnum_output\030\001 \001"
  "(\r\022\021\n\tinput_dim\030\002 \001(\r\022\027\n\tbias_term\030\003 \001(\010"
  ":\004true\022C\n\rweight_filler\030\004 \001(\0132,.apollo.p"
  "erception.inference.FillerParameter\022A\n\013b"
  "ias_filler\030\005 \001(\0132,.apollo.perception.inf"
  "erence.FillerParameter\"D\n\014ExpParameter\022\020"
  "\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005sh"
  "ift\030\003 \001(\002:\0010\"9\n\020FlattenParameter\022\017\n\004axis"
  "\030\001 \001(\005:\0011\022\024\n\010end_axis\030\002 \001(\005:\002-1\"O\n\021HDF5D"
  "ataParameter\022\016\n\006source\030\001 \001(\t\022\022\n\nbatch_si"
  "ze\030\002 \001(\r\022\026\n\007shuffle\030\003 \001(\010:\005false\"(\n\023HDF5"
  "OutputParameter\022\021\n\tfile_name\030\001 \001(\t\"t\n\022Hi"
  "ngeLossParameter\022F\n\004norm\030\001 \001(\01624.apollo."
  "perception.inference.HingeLossParameter."
  "Norm:\002L1\"\026\n\004Norm\022\006\n\002L1\020\001\022\006\n\002L2\020\002\"8\n\014Repe"
  "atedList\022\021\n\tlist_path\030\001 \001(\t\022\025\n\nnum_repea"
  "t\030\002 \001(\r:\0011\"\226\002\n\020DatasetParameter\022\016\n\006sourc"
  "e\030\001 \001(\t\022\023\n\013root_folder\030\002 \001(\t\022\021\n\006weight\030\003"
  " \001(\002:\0011\022M\n\004type\030\004 \001(\01629.apollo.perceptio"
  "n.inference.DatasetParameter.DatasetType"
  ":\004LIST\022\025\n\007shuffle\030\005 \001(\010:\004true\022@\n\rrepeate"
  "d_list\030\006 \003(\0132).apollo.perception.inferen"
  "ce.RepeatedList\"\"\n\013DatasetType\022\010\n\004LIST\020\001"
  "\022\t\n\005BLOCK\020\002\"\356\002\n\022ImageDataParameter\022\016\n\006so"
  "urce\030\001 \001(\t\022\025\n\nbatch_size\030\004 \001(\r:\0011\022\024\n\tran"
  "d_skip\030\007 \001(\r:\0010\022\026\n\007shuffle\030\010 \001(\010:\005false\022"
  "\025\n\nnew_height\030\t \001(\r:\0010\022\024\n\tnew_width\030\n \001("
  "\r:\0010\022\026\n\010is_color\030\013 \001(\010:\004true\022\020\n\005scale\030\002 "
  "\001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\024\n\tcrop_size\030\005"
  " \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\025\n\013root_f"
  "older\030\014 \001(\t:\000\022\023\n\010prefetch\030\024 \001(\r:\0014\022@\n\tim"
  "age_set\030d \003(\0132-.apollo.perception.infere"
  "nce.DatasetParameter\"\'\n\025InfogainLossPara"
  "meter\022\016\n\006source\030\001 \001(\t\"\367\001\n\025InnerProductPa"
  "rameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term"
  "\030\002 \001(\010:\004true\022C\n\rweight_filler\030\003 \001(\0132,.ap"
  "ollo.perception.inference.FillerParamete"
  "r\022A\n\013bias_filler\030\004 \001(\0132,.apollo.percepti"
  "on.inference.FillerParameter\022\017\n\004axis\030\005 \001"
  "(\005:\0011\022\030\n\ttranspose\030\006 \001(\010:\005false\"G\n\016Input"
  "Parameter\0225\n\005shape\030\001 \003(\0132&.apollo.percep"
  "tion.inference.BlobShape\"D\n\014LogParameter"
  "\022\020\n\004base\030\001 \001(\002:\002-1\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005"
  "shift\030\003 \001(\002:\0010\"\344\002\n\014LRNParameter\022\025\n\nlocal"
  "_size\030\001 \001(\r:\0015\022\020\n\005alpha\030\002 \001(\002:\0011\022\022\n\004beta"
  "\030\003 \001(\002:\0040.75\022Z\n\013norm_region\030\004 \001(\01624.apol"
  "lo.perception.inference.LRNParameter.Nor"
  "mRegion:\017ACROSS_CHANNELS\022\014\n\001k\030\005 \001(\002:\0011\022I"
  "\n\006engine\030\006 \001(\01620.apollo.perception.infer"
  "ence.LRNParameter.Engine:\007DEFAULT\"5\n\nNor"
  "mRegion\022\023\n\017ACROSS_CHANNELS\020\000\022\022\n\016WITHIN_C"
  "HANNEL\020\001\"+\n\006Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE"
  "\020\001\022\t\n\005CUDNN\020\002\"Z\n\023MemoryDataParameter\022\022\n\n"
  "batch_size\030\001 \001(\r\022\020\n\010channels\030\002 \001(\r\022\016\n\006he"
  "ight\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\"\354\t\n\025MultiBoxLo"
  "ssParameter\022`\n\rloc_loss_type\030\001 \001(\0162>.apo"
  "llo.perception.inference.MultiBoxLossPar"
  "ameter.LocLossType:\tSMOOTH_L1\022`\n\016conf_lo"
  "ss_type\030\002 \001(\0162\?.apollo.perception.infere"
  "nce.MultiBoxLossParameter.ConfLossType:\007"
  "SOFTMAX\022\025\n\nloc_weight\030\003 \001(\002:\0011\022\023\n\013num_cl"
  "asses\030\004 \001(\r\022\034\n\016share_location\030\005 \001(\010:\004tru"
  "e\022`\n\nmatch_type\030\006 \001(\0162<.apollo.perceptio"
  "n.inference.MultiBoxLossParameter.MatchT"
  "ype:\016PER_PREDICTION\022\036\n\021overlap_threshold"
  "\030\007 \001(\002:\0030.5\022$\n\026use_prior_for_matching\030\010 "
  "\001(\010:\004true\022\036\n\023background_label_id\030\t \001(\r:\001"
  "0\022\036\n\020use_difficult_gt\030\n \001(\010:\004true\022\025\n\rdo_"
  "neg_mining\030\013 \001(\010\022\030\n\rneg_pos_ratio\030\014 \001(\002:"
  "\0013\022\030\n\013neg_overlap\030\r \001(\002:\0030.5\022R\n\tcode_typ"
  "e\030\016 \001(\01627.apollo.perception.inference.Pr"
  "iorBoxParameter.CodeType:\006CORNER\022(\n\031enco"
  "de_variance_in_target\030\020 \001(\010:\005false\022%\n\026ma"
  "p_object_to_agnostic\030\021 \001(\010:\005false\022)\n\032ign"
  "ore_cross_boundary_bbox\030\022 \001(\010:\005false\022\030\n\t"
  "bp_inside\030\023 \001(\010:\005false\022`\n\013mining_type\030\024 "
  "\001(\0162=.apollo.perception.inference.MultiB"
  "oxLossParameter.MiningType:\014MAX_NEGATIVE"
  "\022N\n\tnms_param\030\025 \001(\0132;.apollo.perception."
  "inference.NonMaximumSuppressionParameter"
  "\022\027\n\013sample_size\030\026 \001(\005:\00264\022 \n\021use_prior_f"
  "or_nms\030\027 \001(\010:\005false\"$\n\013LocLossType\022\006\n\002L2"
  "\020\000\022\r\n\tSMOOTH_L1\020\001\")\n\014ConfLossType\022\013\n\007SOF"
  "TMAX\020\000\022\014\n\010LOGISTIC\020\001\".\n\tMatchType\022\r\n\tBIP"
  "ARTITE\020\000\022\022\n\016PER_PREDICTION\020\001\":\n\nMiningTy"
  "pe\022\010\n\004NONE\020\000\022\020\n\014MAX_NEGATIVE\020\001\022\020\n\014HARD_E"
  "XAMPLE\020\002\"d\n\014MVNParameter\022 \n\022normalize_va"
  "riance\030\001 \001(\010:\004true\022\036\n\017across_channels\030\002 "
  "\001(\010:\005false\022\022\n\003eps\030\003 \001(\002:\0051e-09\"\250\001\n\022Norma"
  "lizeParameter\022\034\n\016across_spatial\030\001 \001(\010:\004t"
  "rue\022B\n\014scale_filler\030\002 \001(\0132,.apollo.perce"
  "ption.inference.FillerParameter\022\034\n\016chann"
  "el_shared\030\003 \001(\010:\004true\022\022\n\003eps\030\004 \001(\002:\0051e-1"
  "0\"K\n\022ParameterParameter\0225\n\005shape\030\001 \001(\0132&"
  ".apollo.perception.inference.BlobShape\"!"
  "\n\020PermuteParameter\022\r\n\005order\030\001 \003(\r\"\372\003\n\020Po"
  "olingParameter\022K\n\004pool\030\001 \001(\01628.apollo.pe"
  "rception.inference.PoolingParameter.Pool"
  "Method:\003MAX\022\016\n\003pad\030\004 \001(\r:\0010\022\020\n\005pad_h\030\t \001"
  "(\r:\0010\022\020\n\005pad_w\030\n \001(\r:\0010\022\023\n\013kernel_size\030\002"
  " \001(\r\022\020\n\010kernel_h\030\005 \001(\r\022\020\n\010kernel_w\030\006 \001(\r"
  "\022\021\n\006stride\030\003 \001(\r:\0011\022\020\n\010stride_h\030\007 \001(\r\022\020\n"
  "\010stride_w\030\010 \001(\r\022M\n\006engine\030\013 \001(\01624.apollo"
  ".perception.inference.PoolingParameter.E"
  "ngine:\007DEFAULT\022\035\n\016global_pooling\030\014 \001(\010:\005"
  "false\022*\n\033cmp_out_shape_floor_as_conv\030\r \001"
  "(\010:\005false\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020"
  "\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
  "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"F\n\016PowerParameter"
  "\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005scale\030\002 \001(\002:\0011\022\020\n\005"
  "shift\030\003 \001(\002:\0010\"\265\002\n\021PriorBoxParameter\022\020\n\010"
  "min_size\030\001 \003(\002\022\020\n\010max_size\030\002 \003(\002\022\024\n\014aspe"
  "ct_ratio\030\003 \003(\002\022\022\n\004flip\030\004 \001(\010:\004true\022\023\n\004cl"
  "ip\030\005 \001(\010:\005false\022\020\n\010variance\030\006 \003(\002\022\020\n\010img"
  "_size\030\007 \001(\r\022\r\n\005img_h\030\010 \001(\r\022\r\n\005img_w\030\t \001("
  "\r\022\014\n\004step\030\n \001(\002\022\016\n\006step_h\030\013 \001(\002\022\016\n\006step_"
  "w\030\014 \001(\002\022\023\n\006offset\030\r \001(\002:\0030.5\"8\n\010CodeType"
  "\022\n\n\006CORNER\020\001\022\017\n\013CENTER_SIZE\020\002\022\017\n\013CORNER_"
  "SIZE\020\003\"g\n\017PythonParameter\022\016\n\006module\030\001 \001("
  "\t\022\r\n\005layer\030\002 \001(\t\022\023\n\tparam_str\030\003 \001(\t:\000\022 \n"
  "\021share_in_parallel\030\004 \001(\010:\005false\"\354\001\n\022Recu"
  "rrentParameter\022\025\n\nnum_output\030\001 \001(\r:\0010\022C\n"
  "\rweight_filler\030\002 \001(\0132,.apollo.perception"
  ".inference.FillerParameter\022A\n\013bias_fille"
  "r\030\003 \001(\0132,.apollo.perception.inference.Fi"
  "llerParameter\022\031\n\ndebug_info\030\004 \001(\010:\005false"
  "\022\034\n\rexpose_hidden\030\005 \001(\010:\005false\"\303\001\n\022Reduc"
  "tionParameter\022S\n\toperation\030\001 \001(\0162;.apoll"
  "o.perception.inference.ReductionParamete"
  "r.ReductionOp:\003SUM\022\017\n\004axis\030\002 \001(\005:\0010\022\020\n\005c"
  "oeff\030\003 \001(\002:\0011\"5\n\013ReductionOp\022\007\n\003SUM\020\001\022\010\n"
  "\004ASUM\020\002\022\t\n\005SUMSQ\020\003\022\010\n\004MEAN\020\004\"\243\001\n\rReLUPar"
  "ameter\022\031\n\016negative_slope\030\001 \001(\002:\0010\022J\n\006eng"
  "ine\030\002 \001(\01621.apollo.perception.inference."
  "ReLUParameter.Engine:\007DEFAULT\"+\n\006Engine\022"
  "\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"p\n\020Re"
  "shapeParameter\0225\n\005shape\030\001 \001(\0132&.apollo.p"
  "erception.inference.BlobShape\022\017\n\004axis\030\002 "
  "\001(\005:\0010\022\024\n\010num_axes\030\003 \001(\005:\002-1\"s\n\023ROIPooli"
  "ngParameter\022\023\n\010pooled_h\030\001 \001(\r:\0010\022\023\n\010pool"
  "ed_w\030\002 \001(\r:\0010\022\030\n\rspatial_scale\030\003 \001(\002:\0011\022"
  "\030\n\tuse_floor\030\n \001(\010:\005false\"\321\001\n\016ScaleParam"
  "eter\022\017\n\004axis\030\001 \001(\005:\0011\022\023\n\010num_axes\030\002 \001(\005:"
  "\0011\022<\n\006filler\030\003 \001(\0132,.apollo.perception.i"
  "nference.FillerParameter\022\030\n\tbias_term\030\004 "
  "\001(\010:\005false\022A\n\013bias_filler\030\005 \001(\0132,.apollo"
  ".perception.inference.FillerParameter\"\216\001"
  "\n\020SigmoidParameter\022M\n\006engine\030\001 \001(\01624.apo"
  "llo.perception.inference.SigmoidParamete"
  "r.Engine:\007DEFAULT\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
  "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"L\n\016SliceParameter"
  "\022\017\n\004axis\030\003 \001(\005:\0011\022\023\n\013slice_point\030\002 \003(\r\022\024"
  "\n\tslice_dim\030\001 \001(\r:\0011\"\237\001\n\020SoftmaxParamete"
  "r\022M\n\006engine\030\001 \001(\01624.apollo.perception.in"
  "ference.SoftmaxParameter.Engine:\007DEFAULT"
  "\022\017\n\004axis\030\002 \001(\005:\0011\"+\n\006Engine\022\013\n\007DEFAULT\020\000"
  "\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\210\001\n\rTanHParameter"
  "\022J\n\006engine\030\001 \001(\01621.apollo.perception.inf"
  "erence.TanHParameter.Engine:\007DEFAULT\"+\n\006"
  "Engine\022\013\n\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020"
  "\002\"/\n\rTileParameter\022\017\n\004axis\030\001 \001(\005:\0011\022\r\n\005t"
  "iles\030\002 \001(\005\"*\n\022ThresholdParameter\022\024\n\tthre"
  "shold\030\001 \001(\002:\0010\"\321\001\n\022VideoDataParameter\022U\n"
  "\nvideo_type\030\001 \001(\01629.apollo.perception.in"
  "ference.VideoDataParameter.VideoType:\006WE"
  "BCAM\022\024\n\tdevice_id\030\002 \001(\005:\0010\022\022\n\nvideo_file"
  "\030\003 \001(\t\022\026\n\013skip_frames\030\004 \001(\r:\0010\"\"\n\tVideoT"
  "ype\022\n\n\006WEBCAM\020\000\022\t\n\005VIDEO\020\001\"\301\002\n\023WindowDat"
  "aParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005scale\030\002 \001("
  "\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbatch_size\030\004 "
  "\001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001("
  "\010:\005false\022\031\n\014fg_threshold\030\007 \001(\002:\0030.5\022\031\n\014b"
  "g_threshold\030\010 \001(\002:\0030.5\022\031\n\013fg_fraction\030\t "
  "\001(\002:\0040.25\022\026\n\013context_pad\030\n \001(\r:\0010\022\027\n\tcro"
  "p_mode\030\013 \001(\t:\004warp\022\033\n\014cache_images\030\014 \001(\010"
  ":\005false\022\025\n\013root_folder\030\r \001(\t:\000\"\227\002\n\014SPPPa"
  "rameter\022\026\n\016pyramid_height\030\001 \001(\r\022G\n\004pool\030"
  "\002 \001(\01624.apollo.perception.inference.SPPP"
  "arameter.PoolMethod:\003MAX\022I\n\006engine\030\006 \001(\016"
  "20.apollo.perception.inference.SPPParame"
  "ter.Engine:\007DEFAULT\".\n\nPoolMethod\022\007\n\003MAX"
  "\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"+\n\006Engine\022\013\n"
  "\007DEFAULT\020\000\022\t\n\005CAFFE\020\001\022\t\n\005CUDNN\020\002\"\370\031\n\020V1L"
  "ayerParameter\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 \003"
  "(\t\022\014\n\004name\030\004 \001(\t\022:\n\007include\030  \003(\0132).apol"
  "lo.perception.inference.NetStateRule\022:\n\007"
  "exclude\030! \003(\0132).apollo.perception.infere"
  "nce.NetStateRule\022E\n\004type\030\005 \001(\01627.apollo."
  "perception.inference.V1LayerParameter.La"
  "yerType\0225\n\005blobs\030\006 \003(\0132&.apollo.percepti"
  "on.inference.BlobProto\022\016\n\005param\030\351\007 \003(\t\022T"
  "\n\017blob_share_mode\030\352\007 \003(\0162:.apollo.percep"
  "tion.inference.V1LayerParameter.DimCheck"
  "Mode\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014weight_decay\030\010"
  " \003(\002\022\023\n\013loss_weight\030# \003(\002\022F\n\016accuracy_pa"
  "ram\030\033 \001(\0132..apollo.perception.inference."
  "AccuracyParameter\022B\n\014argmax_param\030\027 \001(\0132"
  ",.apollo.perception.inference.ArgMaxPara"
  "meter\022B\n\014concat_param\030\t \001(\0132,.apollo.per"
  "ception.inference.ConcatParameter\022U\n\026con"
  "trastive_loss_param\030( \001(\01325.apollo.perce"
  "ption.inference.ContrastiveLossParameter"
  "\022L\n\021convolution_param\030\n \001(\01321.apollo.per"
  "ception.inference.ConvolutionParameter\022>"
  "\n\ndata_param\030\013 \001(\0132*.apollo.perception.i"
  "nference.DataParameter\022D\n\rdropout_param\030"
  "\014 \001(\0132-.apollo.perception.inference.Drop"
  "outParameter\022I\n\020dummy_data_param\030\032 \001(\0132/"
  ".apollo.perception.inference.DummyDataPa"
  "rameter\022D\n\reltwise_param\030\030 \001(\0132-.apollo."
  "perception.inference.EltwiseParameter\022<\n"
  "\texp_param\030) \001(\0132).apollo.perception.inf"
  "erence.ExpParameter\022G\n\017hdf5_data_param\030\r"
  " \001(\0132..apollo.perception.inference.HDF5D"
  "ataParameter\022K\n\021hdf5_output_param\030\016 \001(\0132"
  "0.apollo.perception.inference.HDF5Output"
  "Parameter\022I\n\020hinge_loss_param\030\035 \001(\0132/.ap"
  "ollo.perception.inference.HingeLossParam"
  "eter\022I\n\020image_data_param\030\017 \001(\0132/.apollo."
  "perception.inference.ImageDataParameter\022"
  "O\n\023infogain_loss_param\030\020 \001(\01322.apollo.pe"
  "rception.inference.InfogainLossParameter"
  "\022O\n\023inner_product_param\030\021 \001(\01322.apollo.p"
  "erception.inference.InnerProductParamete"
  "r\022<\n\tlrn_param\030\022 \001(\0132).apollo.perception"
  ".inference.LRNParameter\022K\n\021memory_data_p"
  "aram\030\026 \001(\01320.apollo.perception.inference"
  ".MemoryDataParameter\022<\n\tmvn_param\030\" \001(\0132"
  ").apollo.perception.inference.MVNParamet"
  "er\022D\n\rpooling_param\030\023 \001(\0132-.apollo.perce"
  "ption.inference.PoolingParameter\022@\n\013powe"
  "r_param\030\025 \001(\0132+.apollo.perception.infere"
  "nce.PowerParameter\022>\n\nrelu_param\030\036 \001(\0132*"
  ".apollo.perception.inference.ReLUParamet"
  "er\022D\n\rsigmoid_param\030& \001(\0132-.apollo.perce"
  "ption.inference.SigmoidParameter\022D\n\rsoft"
  "max_param\030\' \001(\0132-.apollo.perception.infe"
  "rence.SoftmaxParameter\022@\n\013slice_param\030\037 "
  "\001(\0132+.apollo.perception.inference.SliceP"
  "arameter\022>\n\ntanh_param\030% \001(\0132*.apollo.pe"
  "rception.inference.TanHParameter\022H\n\017thre"
  "shold_param\030\031 \001(\0132/.apollo.perception.in"
  "ference.ThresholdParameter\022K\n\021window_dat"
  "a_param\030\024 \001(\01320.apollo.perception.infere"
  "nce.WindowDataParameter\022M\n\017transform_par"
  "am\030$ \001(\01324.apollo.perception.inference.T"
  "ransformationParameter\022>\n\nloss_param\030* \001"
  "(\0132*.apollo.perception.inference.LossPar"
  "ameter\022<\n\005layer\030\001 \001(\0132-.apollo.perceptio"
  "n.inference.V0LayerParameter\"\330\004\n\tLayerTy"
  "pe\022\010\n\004NONE\020\000\022\n\n\006ABSVAL\020#\022\014\n\010ACCURACY\020\001\022\n"
  "\n\006ARGMAX\020\036\022\010\n\004BNLL\020\002\022\n\n\006CONCAT\020\003\022\024\n\020CONT"
  "RASTIVE_LOSS\020%\022\017\n\013CONVOLUTION\020\004\022\010\n\004DATA\020"
  "\005\022\021\n\rDECONVOLUTION\020\'\022\013\n\007DROPOUT\020\006\022\016\n\nDUM"
  "MY_DATA\020 \022\022\n\016EUCLIDEAN_LOSS\020\007\022\013\n\007ELTWISE"
  "\020\031\022\007\n\003EXP\020&\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_DATA\020\t\022"
  "\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n\n\006IM2C"
  "OL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_LOSS\020\r\022"
  "\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEMORY_DA"
  "TA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020\020\022\007\n\003M"
  "VN\020\"\022\013\n\007POOLING\020\021\022\t\n\005POWER\020\032\022\010\n\004RELU\020\022\022\013"
  "\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS_ENTROPY_LOS"
  "S\020\033\022\013\n\007SILENCE\020$\022\013\n\007SOFTMAX\020\024\022\020\n\014SOFTMAX"
  "_LOSS\020\025\022\t\n\005SPLIT\020\026\022\t\n\005SLICE\020!\022\010\n\004TANH\020\027\022"
  "\017\n\013WINDOW_DATA\020\030\022\r\n\tTHRESHOLD\020\037\"*\n\014DimCh"
  "eckMode\022\n\n\006STRICT\020\000\022\016\n\nPERMISSIVE\020\001\"\353\010\n\020"
  "V0LayerParameter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002"
  " \001(\t\022\022\n\nnum_output\030\003 \001(\r\022\026\n\010biasterm\030\004 \001"
  "(\010:\004true\022C\n\rweight_filler\030\005 \001(\0132,.apollo"
  ".perception.inference.FillerParameter\022A\n"
  "\013bias_filler\030\006 \001(\0132,.apollo.perception.i"
  "nference.FillerParameter\022\016\n\003pad\030\007 \001(\r:\0010"
  "\022\022\n\nkernelsize\030\010 \001(\r\022\020\n\005group\030\t \001(\r:\0011\022\021"
  "\n\006stride\030\n \001(\r:\0011\022K\n\004pool\030\013 \001(\01628.apollo"
  ".perception.inference.V0LayerParameter.P"
  "oolMethod:\003MAX\022\032\n\rdropout_ratio\030\014 \001(\002:\0030"
  ".5\022\025\n\nlocal_size\030\r \001(\r:\0015\022\020\n\005alpha\030\016 \001(\002"
  ":\0011\022\022\n\004beta\030\017 \001(\002:\0040.75\022\014\n\001k\030\026 \001(\002:\0011\022\016\n"
  "\006source\030\020 \001(\t\022\020\n\005scale\030\021 \001(\002:\0011\022\020\n\010meanf"
  "ile\030\022 \001(\t\022\021\n\tbatchsize\030\023 \001(\r\022\023\n\010cropsize"
  "\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001(\010:\005false\0225\n\005blob"
  "s\0302 \003(\0132&.apollo.perception.inference.Bl"
  "obProto\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_deca"
  "y\0304 \003(\002\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det_fg_"
  "threshold\0306 \001(\002:\0030.5\022\035\n\020det_bg_threshold"
  "\0307 \001(\002:\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002:\0040."
  "25\022\032\n\017det_context_pad\030: \001(\r:\0010\022\033\n\rdet_cr"
  "op_mode\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005:\0010\022"
  "\027\n\014new_channels\030= \001(\005:\0010\022\025\n\nnew_height\030>"
  " \001(\005:\0010\022\024\n\tnew_width\030\? \001(\005:\0010\022\035\n\016shuffle"
  "_images\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A \001(\r"
  ":\0011\022L\n\021hdf5_output_param\030\351\007 \001(\01320.apollo"
  ".perception.inference.HDF5OutputParamete"
  "r\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003AVE\020\001\022\016\n\nSTO"
  "CHASTIC\020\002\"m\n\016PReLUParameter\022<\n\006filler\030\001 "
  "\001(\0132,.apollo.perception.inference.Filler"
  "Parameter\022\035\n\016channel_shared\030\002 \001(\010:\005false"
  "\"j\n\020PaddingParameter\022\020\n\005pad_t\030\001 \001(\r:\0010\022\020"
  "\n\005pad_b\030\002 \001(\r:\0010\022\020\n\005pad_l\030\003 \001(\r:\0010\022\020\n\005pa"
  "d_r\030\004 \001(\r:\0010\022\016\n\003val\030\005 \001(\002:\0010\"\270\001\n\021YoloLos"
  "sParameter\022\\\n\rreg_loss_type\030\001 \001(\0162:.apol"
  "lo.perception.inference.YoloLossParamete"
  "r.RegLossType:\tSMOOTH_L1\022\027\n\013target_axis\030"
  "\002 \001(\005:\002-1\",\n\013RegLossType\022\006\n\002L2\020\000\022\006\n\002L1\020\001"
  "\022\r\n\tSMOOTH_L1\020\002\"%\n\021YoloDumpParameter\022\020\n\010"
  "dump_dir\030\001 \001(\t\"P\n\024YoloAnchorsParameter\022\024"
  "\n\014anchors_file\030\001 \001(\t\022\020\n\005ref_w\030\002 \001(\005:\0011\022\020"
  "\n\005ref_h\030\003 \001(\005:\0011\"\204\001\n\023DimensionStatistics"
  "\022\021\n\006mean_h\030\001 \001(\002:\0010\022\021\n\006mean_w\030\002 \001(\002:\0010\022\021"
  "\n\006mean_l\030\003 \001(\002:\0010\022\020\n\005std_h\030\004 \001(\002:\0011\022\020\n\005s"
  "td_w\030\005 \001(\002:\0011\022\020\n\005std_l\030\006 \001(\002:\0011\"\340\002\n\023Yolo"
  "TargetParameter\022\031\n\016neg_rois_ratio\030\001 \001(\002:"
  "\0011\022\032\n\rign_threshold\030\002 \001(\002:\0030.6\022\032\n\rneg_th"
  "reshold\030\003 \001(\002:\0030.1\022\030\n\nmin_height\030\004 \001(\002:\004"
  "0.05\022\030\n\nbias_match\030\005 \001(\010:\004true\022\025\n\007rescor"
  "e\030\006 \001(\010:\004true\022\022\n\007ori_cyc\030\007 \001(\005:\0011\022\026\n\nobj"
  "_weight\030\010 \001(\002:\00210\022\027\n\014noobj_weight\030\t \001(\002:"
  "\0011\022\026\n\013num_classes\030\n \001(\005:\0010\022N\n\024dimension_"
  "statistics\030\013 \003(\01320.apollo.perception.inf"
  "erence.DimensionStatistics\"\217\004\n\027RegionPro"
  "posalParameter\0229\n\tanchorbox\030\001 \003(\0132&.apol"
  "lo.perception.inference.AnchorBox\022\022\n\nthr"
  "esholds\030\002 \003(\002\022\034\n\021orientation_scale\030\016 \001(\002"
  ":\0010\022\024\n\014object_scale\030\003 \001(\r\022\026\n\016noobject_sc"
  "ale\030\004 \001(\r\022\023\n\013class_scale\030\005 \001(\r\022\023\n\013coord_"
  "scale\030\006 \001(\r\022\016\n\006jitter\030\007 \001(\002\022\014\n\004bias\030\010 \001("
  "\002\022\017\n\007rescore\030\t \001(\010\022\023\n\013num_classes\030\n \001(\r\022"
  "\022\n\nbias_match\030\013 \001(\010\022\021\n\tthreshold\030\014 \001(\002\022\030"
  "\n\013tricky_iter\030\r \001(\r:\003400\022N\n\tnms_param\030\017 "
  "\001(\0132;.apollo.perception.inference.NonMax"
  "imumSuppressionParameter\022\026\n\nkeep_top_k\030\020"
  " \001(\005:\002-1\022\025\n\rpos_threshold\030\021 \001(\002\022\025\n\rneg_t"
  "hreshold\030\022 \001(\002\022\024\n\tneg_ratio\030\023 \001(\005:\0013\"\223\005\n"
  "\017RegionParameter\0229\n\tanchorbox\030\001 \003(\0132&.ap"
  "ollo.perception.inference.AnchorBox\022\022\n\nt"
  "hresholds\030\002 \003(\002\022\034\n\021orientation_scale\030\016 \001"
  "(\002:\0010\022\032\n\017dimension_scale\030\017 \001(\002:\0010\022\026\n\013fro"
  "nt_scale\030\023 \001(\002:\0010\022\025\n\nrear_scale\030\024 \001(\002:\0010"
  "\022\024\n\014object_scale\030\003 \001(\r\022\026\n\016noobject_scale"
  "\030\004 \001(\r\022\023\n\013class_scale\030\005 \001(\002\022\023\n\013coord_sca"
  "le\030\006 \001(\r\022\016\n\006jitter\030\007 \001(\002\022\014\n\004bias\030\010 \001(\002\022\017"
  "\n\007rescore\030\t \001(\010\022\023\n\013num_classes\030\n \001(\r\022\022\n\n"
  "bias_match\030\013 \001(\010\022\021\n\tthreshold\030\014 \001(\002\022\030\n\013t"
  "ricky_iter\030\r \001(\r:\003400\022\032\n\013use_l1_loss\030\020 \001"
  "(\010:\005false\022 \n\021use_twice_softmax\030\021 \001(\010:\005fa"
  "lse\022#\n\024is_anchor_normalized\030\022 \001(\010:\005false"
  "\022\022\n\nori_enable\030\025 \003(\010\022\036\n\nanchorfile\030\026 \001(\t"
  ":\nanchor.txt\022\036\n\017use_side_box_v2\030\027 \001(\010:\005f"
  "alse\022\036\n\017use_side_box_v3\030\030 \001(\010:\005false\022\024\n\t"
  "ori_cycle\030\031 \001(\005:\0011\"!\n\tAnchorBox\022\t\n\001w\030\001 \001"
  "(\002\022\t\n\001h\030\002 \001(\002\" \n\016ReorgParameter\022\016\n\006strid"
  "e\030\001 \001(\r*\034\n\005Phase\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2frt_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2frt_2eproto_sccs[101] = {
  &scc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_AnnotatedDatum_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BlobProtoVector_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_Datum_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_LabelMap_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SolverParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_SolverState_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto.base,
  &scc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2frt_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2frt_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2frt_2eproto, "modules/perception/proto/rt.proto", 30277,
  &descriptor_table_modules_2fperception_2fproto_2frt_2eproto_once, descriptor_table_modules_2fperception_2fproto_2frt_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2frt_2eproto_deps, 101, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2frt_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2frt_2eproto, 101, file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2frt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2frt_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto), true);
namespace apollo {
namespace perception {
namespace inference {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmitConstraint_EmitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[0];
}
bool EmitConstraint_EmitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmitConstraint_EmitType EmitConstraint::CENTER;
constexpr EmitConstraint_EmitType EmitConstraint::MIN_OVERLAP;
constexpr EmitConstraint_EmitType EmitConstraint::EmitType_MIN;
constexpr EmitConstraint_EmitType EmitConstraint::EmitType_MAX;
constexpr int EmitConstraint::EmitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[1];
}
bool AnnotatedDatum_AnnotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::BBOX;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::BBOX3D;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::BBOX3DFR;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::AnnotationType_MIN;
constexpr AnnotatedDatum_AnnotationType AnnotatedDatum::AnnotationType_MAX;
constexpr int AnnotatedDatum::AnnotationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillerParameter_VarianceNorm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[2];
}
bool FillerParameter_VarianceNorm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FillerParameter_VarianceNorm FillerParameter::FAN_IN;
constexpr FillerParameter_VarianceNorm FillerParameter::FAN_OUT;
constexpr FillerParameter_VarianceNorm FillerParameter::AVERAGE;
constexpr FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MIN;
constexpr FillerParameter_VarianceNorm FillerParameter::VarianceNorm_MAX;
constexpr int FillerParameter::VarianceNorm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[3];
}
bool SolverParameter_SnapshotFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SolverParameter_SnapshotFormat SolverParameter::HDF5;
constexpr SolverParameter_SnapshotFormat SolverParameter::BINARYPROTO;
constexpr SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MIN;
constexpr SolverParameter_SnapshotFormat SolverParameter::SnapshotFormat_MAX;
constexpr int SolverParameter::SnapshotFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[4];
}
bool SolverParameter_SolverMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SolverParameter_SolverMode SolverParameter::CPU;
constexpr SolverParameter_SolverMode SolverParameter::GPU;
constexpr SolverParameter_SolverMode SolverParameter::SolverMode_MIN;
constexpr SolverParameter_SolverMode SolverParameter::SolverMode_MAX;
constexpr int SolverParameter::SolverMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolverParameter_SolverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[5];
}
bool SolverParameter_SolverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SolverParameter_SolverType SolverParameter::SGD;
constexpr SolverParameter_SolverType SolverParameter::NESTEROV;
constexpr SolverParameter_SolverType SolverParameter::ADAGRAD;
constexpr SolverParameter_SolverType SolverParameter::RMSPROP;
constexpr SolverParameter_SolverType SolverParameter::ADADELTA;
constexpr SolverParameter_SolverType SolverParameter::ADAM;
constexpr SolverParameter_SolverType SolverParameter::SolverType_MIN;
constexpr SolverParameter_SolverType SolverParameter::SolverType_MAX;
constexpr int SolverParameter::SolverType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamSpec_DimCheckMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[6];
}
bool ParamSpec_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParamSpec_DimCheckMode ParamSpec::STRICT;
constexpr ParamSpec_DimCheckMode ParamSpec::PERMISSIVE;
constexpr ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MIN;
constexpr ParamSpec_DimCheckMode ParamSpec::DimCheckMode_MAX;
constexpr int ParamSpec::DimCheckMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Resize_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[7];
}
bool ResizeParameter_Resize_mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResizeParameter_Resize_mode ResizeParameter::WARP;
constexpr ResizeParameter_Resize_mode ResizeParameter::FIT_SMALL_SIZE;
constexpr ResizeParameter_Resize_mode ResizeParameter::FIT_LARGE_SIZE_AND_PAD;
constexpr ResizeParameter_Resize_mode ResizeParameter::Resize_mode_MIN;
constexpr ResizeParameter_Resize_mode ResizeParameter::Resize_mode_MAX;
constexpr int ResizeParameter::Resize_mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Pad_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[8];
}
bool ResizeParameter_Pad_mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResizeParameter_Pad_mode ResizeParameter::CONSTANT;
constexpr ResizeParameter_Pad_mode ResizeParameter::MIRRORED;
constexpr ResizeParameter_Pad_mode ResizeParameter::REPEAT_NEAREST;
constexpr ResizeParameter_Pad_mode ResizeParameter::Pad_mode_MIN;
constexpr ResizeParameter_Pad_mode ResizeParameter::Pad_mode_MAX;
constexpr int ResizeParameter::Pad_mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResizeParameter_Interp_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[9];
}
bool ResizeParameter_Interp_mode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResizeParameter_Interp_mode ResizeParameter::LINEAR;
constexpr ResizeParameter_Interp_mode ResizeParameter::AREA;
constexpr ResizeParameter_Interp_mode ResizeParameter::NEAREST;
constexpr ResizeParameter_Interp_mode ResizeParameter::CUBIC;
constexpr ResizeParameter_Interp_mode ResizeParameter::LANCZOS4;
constexpr ResizeParameter_Interp_mode ResizeParameter::Interp_mode_MIN;
constexpr ResizeParameter_Interp_mode ResizeParameter::Interp_mode_MAX;
constexpr int ResizeParameter::Interp_mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LossParameter_NormalizationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[10];
}
bool LossParameter_NormalizationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LossParameter_NormalizationMode LossParameter::FULL;
constexpr LossParameter_NormalizationMode LossParameter::VALID;
constexpr LossParameter_NormalizationMode LossParameter::BATCH_SIZE;
constexpr LossParameter_NormalizationMode LossParameter::NONE;
constexpr LossParameter_NormalizationMode LossParameter::NormalizationMode_MIN;
constexpr LossParameter_NormalizationMode LossParameter::NormalizationMode_MAX;
constexpr int LossParameter::NormalizationMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[11];
}
bool ConvolutionParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConvolutionParameter_Engine ConvolutionParameter::DEFAULT;
constexpr ConvolutionParameter_Engine ConvolutionParameter::CAFFE;
constexpr ConvolutionParameter_Engine ConvolutionParameter::CUDNN;
constexpr ConvolutionParameter_Engine ConvolutionParameter::Engine_MIN;
constexpr ConvolutionParameter_Engine ConvolutionParameter::Engine_MAX;
constexpr int ConvolutionParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataParameter_DB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[12];
}
bool DataParameter_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataParameter_DB DataParameter::LEVELDB;
constexpr DataParameter_DB DataParameter::LMDB;
constexpr DataParameter_DB DataParameter::DB_MIN;
constexpr DataParameter_DB DataParameter::DB_MAX;
constexpr int DataParameter::DB_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[13];
}
bool EltwiseParameter_EltwiseOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::PROD;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::SUM;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::MAX;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MIN;
constexpr EltwiseParameter_EltwiseOp EltwiseParameter::EltwiseOp_MAX;
constexpr int EltwiseParameter::EltwiseOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HingeLossParameter_Norm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[14];
}
bool HingeLossParameter_Norm_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HingeLossParameter_Norm HingeLossParameter::L1;
constexpr HingeLossParameter_Norm HingeLossParameter::L2;
constexpr HingeLossParameter_Norm HingeLossParameter::Norm_MIN;
constexpr HingeLossParameter_Norm HingeLossParameter::Norm_MAX;
constexpr int HingeLossParameter::Norm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatasetParameter_DatasetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[15];
}
bool DatasetParameter_DatasetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DatasetParameter_DatasetType DatasetParameter::LIST;
constexpr DatasetParameter_DatasetType DatasetParameter::BLOCK;
constexpr DatasetParameter_DatasetType DatasetParameter::DatasetType_MIN;
constexpr DatasetParameter_DatasetType DatasetParameter::DatasetType_MAX;
constexpr int DatasetParameter::DatasetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_NormRegion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[16];
}
bool LRNParameter_NormRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LRNParameter_NormRegion LRNParameter::ACROSS_CHANNELS;
constexpr LRNParameter_NormRegion LRNParameter::WITHIN_CHANNEL;
constexpr LRNParameter_NormRegion LRNParameter::NormRegion_MIN;
constexpr LRNParameter_NormRegion LRNParameter::NormRegion_MAX;
constexpr int LRNParameter::NormRegion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LRNParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[17];
}
bool LRNParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LRNParameter_Engine LRNParameter::DEFAULT;
constexpr LRNParameter_Engine LRNParameter::CAFFE;
constexpr LRNParameter_Engine LRNParameter::CUDNN;
constexpr LRNParameter_Engine LRNParameter::Engine_MIN;
constexpr LRNParameter_Engine LRNParameter::Engine_MAX;
constexpr int LRNParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_LocLossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[18];
}
bool MultiBoxLossParameter_LocLossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::L2;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::SMOOTH_L1;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::LocLossType_MIN;
constexpr MultiBoxLossParameter_LocLossType MultiBoxLossParameter::LocLossType_MAX;
constexpr int MultiBoxLossParameter::LocLossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_ConfLossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[19];
}
bool MultiBoxLossParameter_ConfLossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::SOFTMAX;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::LOGISTIC;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::ConfLossType_MIN;
constexpr MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::ConfLossType_MAX;
constexpr int MultiBoxLossParameter::ConfLossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[20];
}
bool MultiBoxLossParameter_MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::BIPARTITE;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::PER_PREDICTION;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::MatchType_MIN;
constexpr MultiBoxLossParameter_MatchType MultiBoxLossParameter::MatchType_MAX;
constexpr int MultiBoxLossParameter::MatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiBoxLossParameter_MiningType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[21];
}
bool MultiBoxLossParameter_MiningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::NONE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::MAX_NEGATIVE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::HARD_EXAMPLE;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::MiningType_MIN;
constexpr MultiBoxLossParameter_MiningType MultiBoxLossParameter::MiningType_MAX;
constexpr int MultiBoxLossParameter::MiningType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[22];
}
bool PoolingParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PoolingParameter_PoolMethod PoolingParameter::MAX;
constexpr PoolingParameter_PoolMethod PoolingParameter::AVE;
constexpr PoolingParameter_PoolMethod PoolingParameter::STOCHASTIC;
constexpr PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MIN;
constexpr PoolingParameter_PoolMethod PoolingParameter::PoolMethod_MAX;
constexpr int PoolingParameter::PoolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PoolingParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[23];
}
bool PoolingParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PoolingParameter_Engine PoolingParameter::DEFAULT;
constexpr PoolingParameter_Engine PoolingParameter::CAFFE;
constexpr PoolingParameter_Engine PoolingParameter::CUDNN;
constexpr PoolingParameter_Engine PoolingParameter::Engine_MIN;
constexpr PoolingParameter_Engine PoolingParameter::Engine_MAX;
constexpr int PoolingParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorBoxParameter_CodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[24];
}
bool PriorBoxParameter_CodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CORNER;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CENTER_SIZE;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CORNER_SIZE;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CodeType_MIN;
constexpr PriorBoxParameter_CodeType PriorBoxParameter::CodeType_MAX;
constexpr int PriorBoxParameter::CodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReductionParameter_ReductionOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[25];
}
bool ReductionParameter_ReductionOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReductionParameter_ReductionOp ReductionParameter::SUM;
constexpr ReductionParameter_ReductionOp ReductionParameter::ASUM;
constexpr ReductionParameter_ReductionOp ReductionParameter::SUMSQ;
constexpr ReductionParameter_ReductionOp ReductionParameter::MEAN;
constexpr ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MIN;
constexpr ReductionParameter_ReductionOp ReductionParameter::ReductionOp_MAX;
constexpr int ReductionParameter::ReductionOp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReLUParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[26];
}
bool ReLUParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReLUParameter_Engine ReLUParameter::DEFAULT;
constexpr ReLUParameter_Engine ReLUParameter::CAFFE;
constexpr ReLUParameter_Engine ReLUParameter::CUDNN;
constexpr ReLUParameter_Engine ReLUParameter::Engine_MIN;
constexpr ReLUParameter_Engine ReLUParameter::Engine_MAX;
constexpr int ReLUParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SigmoidParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[27];
}
bool SigmoidParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SigmoidParameter_Engine SigmoidParameter::DEFAULT;
constexpr SigmoidParameter_Engine SigmoidParameter::CAFFE;
constexpr SigmoidParameter_Engine SigmoidParameter::CUDNN;
constexpr SigmoidParameter_Engine SigmoidParameter::Engine_MIN;
constexpr SigmoidParameter_Engine SigmoidParameter::Engine_MAX;
constexpr int SigmoidParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoftmaxParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[28];
}
bool SoftmaxParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SoftmaxParameter_Engine SoftmaxParameter::DEFAULT;
constexpr SoftmaxParameter_Engine SoftmaxParameter::CAFFE;
constexpr SoftmaxParameter_Engine SoftmaxParameter::CUDNN;
constexpr SoftmaxParameter_Engine SoftmaxParameter::Engine_MIN;
constexpr SoftmaxParameter_Engine SoftmaxParameter::Engine_MAX;
constexpr int SoftmaxParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TanHParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[29];
}
bool TanHParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TanHParameter_Engine TanHParameter::DEFAULT;
constexpr TanHParameter_Engine TanHParameter::CAFFE;
constexpr TanHParameter_Engine TanHParameter::CUDNN;
constexpr TanHParameter_Engine TanHParameter::Engine_MIN;
constexpr TanHParameter_Engine TanHParameter::Engine_MAX;
constexpr int TanHParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoDataParameter_VideoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[30];
}
bool VideoDataParameter_VideoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VideoDataParameter_VideoType VideoDataParameter::WEBCAM;
constexpr VideoDataParameter_VideoType VideoDataParameter::VIDEO;
constexpr VideoDataParameter_VideoType VideoDataParameter::VideoType_MIN;
constexpr VideoDataParameter_VideoType VideoDataParameter::VideoType_MAX;
constexpr int VideoDataParameter::VideoType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[31];
}
bool SPPParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SPPParameter_PoolMethod SPPParameter::MAX;
constexpr SPPParameter_PoolMethod SPPParameter::AVE;
constexpr SPPParameter_PoolMethod SPPParameter::STOCHASTIC;
constexpr SPPParameter_PoolMethod SPPParameter::PoolMethod_MIN;
constexpr SPPParameter_PoolMethod SPPParameter::PoolMethod_MAX;
constexpr int SPPParameter::PoolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SPPParameter_Engine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[32];
}
bool SPPParameter_Engine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SPPParameter_Engine SPPParameter::DEFAULT;
constexpr SPPParameter_Engine SPPParameter::CAFFE;
constexpr SPPParameter_Engine SPPParameter::CUDNN;
constexpr SPPParameter_Engine SPPParameter::Engine_MIN;
constexpr SPPParameter_Engine SPPParameter::Engine_MAX;
constexpr int SPPParameter::Engine_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_LayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[33];
}
bool V1LayerParameter_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr V1LayerParameter_LayerType V1LayerParameter::NONE;
constexpr V1LayerParameter_LayerType V1LayerParameter::ABSVAL;
constexpr V1LayerParameter_LayerType V1LayerParameter::ACCURACY;
constexpr V1LayerParameter_LayerType V1LayerParameter::ARGMAX;
constexpr V1LayerParameter_LayerType V1LayerParameter::BNLL;
constexpr V1LayerParameter_LayerType V1LayerParameter::CONCAT;
constexpr V1LayerParameter_LayerType V1LayerParameter::CONTRASTIVE_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::CONVOLUTION;
constexpr V1LayerParameter_LayerType V1LayerParameter::DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::DECONVOLUTION;
constexpr V1LayerParameter_LayerType V1LayerParameter::DROPOUT;
constexpr V1LayerParameter_LayerType V1LayerParameter::DUMMY_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::EUCLIDEAN_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::ELTWISE;
constexpr V1LayerParameter_LayerType V1LayerParameter::EXP;
constexpr V1LayerParameter_LayerType V1LayerParameter::FLATTEN;
constexpr V1LayerParameter_LayerType V1LayerParameter::HDF5_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::HDF5_OUTPUT;
constexpr V1LayerParameter_LayerType V1LayerParameter::HINGE_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::IM2COL;
constexpr V1LayerParameter_LayerType V1LayerParameter::IMAGE_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::INFOGAIN_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::INNER_PRODUCT;
constexpr V1LayerParameter_LayerType V1LayerParameter::LRN;
constexpr V1LayerParameter_LayerType V1LayerParameter::MEMORY_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::MULTINOMIAL_LOGISTIC_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::MVN;
constexpr V1LayerParameter_LayerType V1LayerParameter::POOLING;
constexpr V1LayerParameter_LayerType V1LayerParameter::POWER;
constexpr V1LayerParameter_LayerType V1LayerParameter::RELU;
constexpr V1LayerParameter_LayerType V1LayerParameter::SIGMOID;
constexpr V1LayerParameter_LayerType V1LayerParameter::SIGMOID_CROSS_ENTROPY_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::SILENCE;
constexpr V1LayerParameter_LayerType V1LayerParameter::SOFTMAX;
constexpr V1LayerParameter_LayerType V1LayerParameter::SOFTMAX_LOSS;
constexpr V1LayerParameter_LayerType V1LayerParameter::SPLIT;
constexpr V1LayerParameter_LayerType V1LayerParameter::SLICE;
constexpr V1LayerParameter_LayerType V1LayerParameter::TANH;
constexpr V1LayerParameter_LayerType V1LayerParameter::WINDOW_DATA;
constexpr V1LayerParameter_LayerType V1LayerParameter::THRESHOLD;
constexpr V1LayerParameter_LayerType V1LayerParameter::LayerType_MIN;
constexpr V1LayerParameter_LayerType V1LayerParameter::LayerType_MAX;
constexpr int V1LayerParameter::LayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[34];
}
bool V1LayerParameter_DimCheckMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::STRICT;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::PERMISSIVE;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MIN;
constexpr V1LayerParameter_DimCheckMode V1LayerParameter::DimCheckMode_MAX;
constexpr int V1LayerParameter::DimCheckMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[35];
}
bool V0LayerParameter_PoolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr V0LayerParameter_PoolMethod V0LayerParameter::MAX;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::AVE;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::STOCHASTIC;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MIN;
constexpr V0LayerParameter_PoolMethod V0LayerParameter::PoolMethod_MAX;
constexpr int V0LayerParameter::PoolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* YoloLossParameter_RegLossType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[36];
}
bool YoloLossParameter_RegLossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr YoloLossParameter_RegLossType YoloLossParameter::L2;
constexpr YoloLossParameter_RegLossType YoloLossParameter::L1;
constexpr YoloLossParameter_RegLossType YoloLossParameter::SMOOTH_L1;
constexpr YoloLossParameter_RegLossType YoloLossParameter::RegLossType_MIN;
constexpr YoloLossParameter_RegLossType YoloLossParameter::RegLossType_MAX;
constexpr int YoloLossParameter::RegLossType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2frt_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2frt_2eproto[37];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BlobShape::InitAsDefaultInstance() {
}
class BlobShape::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobShape>()._has_bits_);
};

BlobShape::BlobShape()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BlobShape)
}
BlobShape::BlobShape(const BlobShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BlobShape)
}

void BlobShape::SharedCtor() {
}

BlobShape::~BlobShape() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BlobShape)
  SharedDtor();
}

void BlobShape::SharedDtor() {
}

void BlobShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobShape& BlobShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobShape_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BlobShape::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BlobShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlobShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dim = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BlobShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    int byte_size = _dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BlobShape)
  return target;
}

size_t BlobShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BlobShape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dim = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BlobShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BlobShape)
    MergeFrom(*source);
  }
}

void BlobShape::MergeFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BlobShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
}

void BlobShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobShape::CopyFrom(const BlobShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BlobShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobShape::IsInitialized() const {
  return true;
}

void BlobShape::InternalSwap(BlobShape* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dim_.InternalSwap(&other->dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlobProto::InitAsDefaultInstance() {
  ::apollo::perception::inference::_BlobProto_default_instance_._instance.get_mutable()->shape_ = const_cast< ::apollo::perception::inference::BlobShape*>(
      ::apollo::perception::inference::BlobShape::internal_default_instance());
}
class BlobProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobProto>()._has_bits_);
  static const ::apollo::perception::inference::BlobShape& shape(const BlobProto* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::perception::inference::BlobShape&
BlobProto::_Internal::shape(const BlobProto* msg) {
  return *msg->shape_;
}
BlobProto::BlobProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BlobProto)
}
BlobProto::BlobProto(const BlobProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_),
      diff_(from.diff_),
      double_data_(from.double_data_),
      double_diff_(from.double_diff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::apollo::perception::inference::BlobShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&num_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BlobProto)
}

void BlobProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(width_));
}

BlobProto::~BlobProto() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BlobProto)
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (this != internal_default_instance()) delete shape_;
}

void BlobProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobProto& BlobProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobProto_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BlobProto::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BlobProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  diff_.Clear();
  double_data_.Clear();
  double_diff_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shape_ != nullptr);
    shape_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&num_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlobProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 channels = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float diff = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_diff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_diff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BlobShape shape = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double double_data = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_double_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double double_diff = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_diff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73) {
          _internal_add_double_diff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BlobProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // optional int32 channels = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channels(), target);
  }

  // optional int32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional int32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // repeated float data = 5 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_data(), target);
  }

  // repeated float diff = 6 [packed = true];
  if (this->_internal_diff_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_diff(), target);
  }

  // optional .apollo.perception.inference.BlobShape shape = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::shape(this), target, stream);
  }

  // repeated double double_data = 8 [packed = true];
  if (this->_internal_double_data_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_double_data(), target);
  }

  // repeated double double_diff = 9 [packed = true];
  if (this->_internal_double_diff_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_double_diff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BlobProto)
  return target;
}

size_t BlobProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BlobProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float diff = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_diff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _diff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_data = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_diff = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_diff_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_diff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.BlobShape shape = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional int32 num = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num());
    }

    // optional int32 channels = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channels());
    }

    // optional int32 height = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 width = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BlobProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BlobProto)
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BlobProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  diff_.MergeFrom(from.diff_);
  double_data_.MergeFrom(from.double_data_);
  double_diff_.MergeFrom(from.double_diff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shape()->::apollo::perception::inference::BlobShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlobProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BlobProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {
  return true;
}

void BlobProto::InternalSwap(BlobProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  diff_.InternalSwap(&other->diff_);
  double_data_.InternalSwap(&other->double_data_);
  double_diff_.InternalSwap(&other->double_diff_);
  swap(shape_, other->shape_);
  swap(num_, other->num_);
  swap(channels_, other->channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlobProtoVector::InitAsDefaultInstance() {
}
class BlobProtoVector::_Internal {
 public:
  using HasBits = decltype(std::declval<BlobProtoVector>()._has_bits_);
};

BlobProtoVector::BlobProtoVector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BlobProtoVector)
}
BlobProtoVector::BlobProtoVector(const BlobProtoVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blobs_(from.blobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BlobProtoVector)
}

void BlobProtoVector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlobProtoVector_modules_2fperception_2fproto_2frt_2eproto.base);
}

BlobProtoVector::~BlobProtoVector() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BlobProtoVector)
  SharedDtor();
}

void BlobProtoVector::SharedDtor() {
}

void BlobProtoVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobProtoVector& BlobProtoVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlobProtoVector_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BlobProtoVector::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BlobProtoVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BlobProtoVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.BlobProto blobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobProtoVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BlobProtoVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobProto blobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blobs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BlobProtoVector)
  return target;
}

size_t BlobProtoVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BlobProtoVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobProto blobs = 1;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobProtoVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProtoVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobProtoVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BlobProtoVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BlobProtoVector)
    MergeFrom(*source);
  }
}

void BlobProtoVector::MergeFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BlobProtoVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
}

void BlobProtoVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProtoVector::CopyFrom(const BlobProtoVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BlobProtoVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProtoVector::IsInitialized() const {
  return true;
}

void BlobProtoVector::InternalSwap(BlobProtoVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blobs_.InternalSwap(&other->blobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobProtoVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Datum::InitAsDefaultInstance() {
}
class Datum::_Internal {
 public:
  using HasBits = decltype(std::declval<Datum>()._has_bits_);
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Datum::Datum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.Datum)
}
Datum::Datum(const Datum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      float_data_(from.float_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&channels_, &from.channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoded_) -
    reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.Datum)
}

void Datum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Datum_modules_2fperception_2fproto_2frt_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoded_) -
      reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Datum& Datum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Datum_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.Datum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&channels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoded_) -
        reinterpret_cast<char*>(&channels_)) + sizeof(encoded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Datum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool encoded = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_encoded(&has_bits);
          encoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Datum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.Datum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channels = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channels(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_label(), target);
  }

  // repeated float float_data = 6;
  for (int i = 0, n = this->_internal_float_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_float_data(i), target);
  }

  // optional bool encoded = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.Datum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_data_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_float_data_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 channels = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_channels());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 label = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_label());
    }

    // optional bool encoded = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Datum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Datum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.Datum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_data_.MergeFrom(from.float_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      encoded_ = from.encoded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Datum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::InternalSwap(Datum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  float_data_.InternalSwap(&other->float_data_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channels_, other->channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(label_, other->label_);
  swap(encoded_, other->encoded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Datum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelMapItem::InitAsDefaultInstance() {
}
class LabelMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelMapItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LabelMapItem::LabelMapItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.LabelMapItem)
}
LabelMapItem::LabelMapItem(const LabelMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_name()) {
    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  label_ = from.label_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LabelMapItem)
}

void LabelMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
}

LabelMapItem::~LabelMapItem() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LabelMapItem)
  SharedDtor();
}

void LabelMapItem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelMapItem& LabelMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelMapItem_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void LabelMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LabelMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LabelMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.LabelMapItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.LabelMapItem.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelMapItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LabelMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LabelMapItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 label = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_label(), target);
  }

  // optional string display_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LabelMapItem.display_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LabelMapItem)
  return target;
}

size_t LabelMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LabelMapItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string display_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional int32 label = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_label());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelMapItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.LabelMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMapItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelMapItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.LabelMapItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.LabelMapItem)
    MergeFrom(*source);
  }
}

void LabelMapItem::MergeFrom(const LabelMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LabelMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      label_ = from.label_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LabelMapItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.LabelMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMapItem::CopyFrom(const LabelMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LabelMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMapItem::IsInitialized() const {
  return true;
}

void LabelMapItem::InternalSwap(LabelMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelMapItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelMap::InitAsDefaultInstance() {
}
class LabelMap::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelMap>()._has_bits_);
};

LabelMap::LabelMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.LabelMap)
}
LabelMap::LabelMap(const LabelMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LabelMap)
}

void LabelMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelMap_modules_2fperception_2fproto_2frt_2eproto.base);
}

LabelMap::~LabelMap() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LabelMap)
  SharedDtor();
}

void LabelMap::SharedDtor() {
}

void LabelMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelMap& LabelMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelMap_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void LabelMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LabelMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LabelMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.LabelMapItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LabelMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.LabelMapItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LabelMap)
  return target;
}

size_t LabelMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LabelMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.LabelMapItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.LabelMap)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.LabelMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.LabelMap)
    MergeFrom(*source);
  }
}

void LabelMap::MergeFrom(const LabelMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LabelMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void LabelMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.LabelMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelMap::CopyFrom(const LabelMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LabelMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelMap::IsInitialized() const {
  return true;
}

void LabelMap::InternalSwap(LabelMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sampler::InitAsDefaultInstance() {
}
class Sampler::_Internal {
 public:
  using HasBits = decltype(std::declval<Sampler>()._has_bits_);
  static void set_has_min_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Sampler::Sampler()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.Sampler)
}
Sampler::Sampler(const Sampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_scale_, &from.min_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_aspect_ratio_) -
    reinterpret_cast<char*>(&min_scale_)) + sizeof(max_aspect_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.Sampler)
}

void Sampler::SharedCtor() {
  min_scale_ = 1;
  max_scale_ = 1;
  min_aspect_ratio_ = 1;
  max_aspect_ratio_ = 1;
}

Sampler::~Sampler() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.Sampler)
  SharedDtor();
}

void Sampler::SharedDtor() {
}

void Sampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sampler& Sampler::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sampler_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void Sampler::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.Sampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    min_scale_ = 1;
    max_scale_ = 1;
    min_aspect_ratio_ = 1;
    max_aspect_ratio_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Sampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_scale(&has_bits);
          min_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_scale(&has_bits);
          max_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_aspect_ratio = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min_aspect_ratio(&has_bits);
          min_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_aspect_ratio = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_aspect_ratio(&has_bits);
          max_aspect_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sampler::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.Sampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_scale = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_scale(), target);
  }

  // optional float max_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_scale(), target);
  }

  // optional float min_aspect_ratio = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_aspect_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.Sampler)
  return target;
}

size_t Sampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.Sampler)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_scale = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_scale = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sampler::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.Sampler)
  GOOGLE_DCHECK_NE(&from, this);
  const Sampler* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sampler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.Sampler)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.Sampler)
    MergeFrom(*source);
  }
}

void Sampler::MergeFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.Sampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      min_scale_ = from.min_scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_scale_ = from.max_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sampler::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.Sampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sampler::CopyFrom(const Sampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.Sampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sampler::IsInitialized() const {
  return true;
}

void Sampler::InternalSwap(Sampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_scale_, other->min_scale_);
  swap(max_scale_, other->max_scale_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sampler::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SampleConstraint::InitAsDefaultInstance() {
}
class SampleConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<SampleConstraint>()._has_bits_);
  static void set_has_min_jaccard_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_jaccard_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_sample_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_sample_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_object_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_object_coverage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SampleConstraint::SampleConstraint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SampleConstraint)
}
SampleConstraint::SampleConstraint(const SampleConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      balance_type_(from.balance_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_jaccard_overlap_, &from.min_jaccard_overlap_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_object_coverage_) -
    reinterpret_cast<char*>(&min_jaccard_overlap_)) + sizeof(max_object_coverage_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SampleConstraint)
}

void SampleConstraint::SharedCtor() {
  ::memset(&min_jaccard_overlap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_object_coverage_) -
      reinterpret_cast<char*>(&min_jaccard_overlap_)) + sizeof(max_object_coverage_));
}

SampleConstraint::~SampleConstraint() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SampleConstraint)
  SharedDtor();
}

void SampleConstraint::SharedDtor() {
}

void SampleConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SampleConstraint& SampleConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SampleConstraint_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SampleConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SampleConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&min_jaccard_overlap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_object_coverage_) -
        reinterpret_cast<char*>(&min_jaccard_overlap_)) + sizeof(max_object_coverage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SampleConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_jaccard_overlap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_jaccard_overlap(&has_bits);
          min_jaccard_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_jaccard_overlap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_jaccard_overlap(&has_bits);
          max_jaccard_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_sample_coverage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min_sample_coverage(&has_bits);
          min_sample_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_sample_coverage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_sample_coverage(&has_bits);
          max_sample_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_object_coverage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_min_object_coverage(&has_bits);
          min_object_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_object_coverage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_max_object_coverage(&has_bits);
          max_object_coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 balance_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_balance_type(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_balance_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SampleConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SampleConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_jaccard_overlap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_jaccard_overlap(), target);
  }

  // optional float max_jaccard_overlap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_jaccard_overlap(), target);
  }

  // optional float min_sample_coverage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_sample_coverage(), target);
  }

  // optional float max_sample_coverage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_sample_coverage(), target);
  }

  // optional float min_object_coverage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_object_coverage(), target);
  }

  // optional float max_object_coverage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_object_coverage(), target);
  }

  // repeated int32 balance_type = 7;
  for (int i = 0, n = this->_internal_balance_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_balance_type(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SampleConstraint)
  return target;
}

size_t SampleConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SampleConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 balance_type = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->balance_type_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_balance_type_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float min_jaccard_overlap = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_jaccard_overlap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_sample_coverage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_sample_coverage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float min_object_coverage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float max_object_coverage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampleConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SampleConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SampleConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SampleConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SampleConstraint)
    MergeFrom(*source);
  }
}

void SampleConstraint::MergeFrom(const SampleConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SampleConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balance_type_.MergeFrom(from.balance_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      min_jaccard_overlap_ = from.min_jaccard_overlap_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_jaccard_overlap_ = from.max_jaccard_overlap_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_sample_coverage_ = from.min_sample_coverage_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_sample_coverage_ = from.max_sample_coverage_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_object_coverage_ = from.min_object_coverage_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_object_coverage_ = from.max_object_coverage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampleConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SampleConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleConstraint::CopyFrom(const SampleConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SampleConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleConstraint::IsInitialized() const {
  return true;
}

void SampleConstraint::InternalSwap(SampleConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  balance_type_.InternalSwap(&other->balance_type_);
  swap(min_jaccard_overlap_, other->min_jaccard_overlap_);
  swap(max_jaccard_overlap_, other->max_jaccard_overlap_);
  swap(min_sample_coverage_, other->min_sample_coverage_);
  swap(max_sample_coverage_, other->max_sample_coverage_);
  swap(min_object_coverage_, other->min_object_coverage_);
  swap(max_object_coverage_, other->max_object_coverage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchSampler::InitAsDefaultInstance() {
  ::apollo::perception::inference::_BatchSampler_default_instance_._instance.get_mutable()->sampler_ = const_cast< ::apollo::perception::inference::Sampler*>(
      ::apollo::perception::inference::Sampler::internal_default_instance());
  ::apollo::perception::inference::_BatchSampler_default_instance_._instance.get_mutable()->sample_constraint_ = const_cast< ::apollo::perception::inference::SampleConstraint*>(
      ::apollo::perception::inference::SampleConstraint::internal_default_instance());
}
class BatchSampler::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchSampler>()._has_bits_);
  static void set_has_use_original_image(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::Sampler& sampler(const BatchSampler* msg);
  static void set_has_sampler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::SampleConstraint& sample_constraint(const BatchSampler* msg);
  static void set_has_sample_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_trials(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::perception::inference::Sampler&
BatchSampler::_Internal::sampler(const BatchSampler* msg) {
  return *msg->sampler_;
}
const ::apollo::perception::inference::SampleConstraint&
BatchSampler::_Internal::sample_constraint(const BatchSampler* msg) {
  return *msg->sample_constraint_;
}
BatchSampler::BatchSampler()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BatchSampler)
}
BatchSampler::BatchSampler(const BatchSampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_sampler()) {
    sampler_ = new ::apollo::perception::inference::Sampler(*from.sampler_);
  } else {
    sampler_ = nullptr;
  }
  if (from._internal_has_sample_constraint()) {
    sample_constraint_ = new ::apollo::perception::inference::SampleConstraint(*from.sample_constraint_);
  } else {
    sample_constraint_ = nullptr;
  }
  ::memcpy(&max_sample_, &from.max_sample_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_trials_) -
    reinterpret_cast<char*>(&max_sample_)) + sizeof(max_trials_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BatchSampler)
}

void BatchSampler::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&sampler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_sample_) -
      reinterpret_cast<char*>(&sampler_)) + sizeof(max_sample_));
  use_original_image_ = true;
  max_trials_ = 100u;
}

BatchSampler::~BatchSampler() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BatchSampler)
  SharedDtor();
}

void BatchSampler::SharedDtor() {
  if (this != internal_default_instance()) delete sampler_;
  if (this != internal_default_instance()) delete sample_constraint_;
}

void BatchSampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchSampler& BatchSampler::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchSampler_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BatchSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BatchSampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sampler_ != nullptr);
      sampler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sample_constraint_ != nullptr);
      sample_constraint_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    max_sample_ = 0u;
    use_original_image_ = true;
    max_trials_ = 100u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BatchSampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_original_image = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_original_image(&has_bits);
          use_original_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.Sampler sampler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_sample(&has_bits);
          max_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_trials = 5 [default = 100];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_trials(&has_bits);
          max_trials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchSampler::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BatchSampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_original_image = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_original_image(), target);
  }

  // optional .apollo.perception.inference.Sampler sampler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sampler(this), target, stream);
  }

  // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sample_constraint(this), target, stream);
  }

  // optional uint32 max_sample = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_sample(), target);
  }

  // optional uint32 max_trials = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_trials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BatchSampler)
  return target;
}

size_t BatchSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BatchSampler)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.Sampler sampler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampler_);
    }

    // optional .apollo.perception.inference.SampleConstraint sample_constraint = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_constraint_);
    }

    // optional uint32 max_sample = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_sample());
    }

    // optional bool use_original_image = 1 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 max_trials = 5 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_trials());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchSampler::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BatchSampler)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchSampler* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchSampler>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BatchSampler)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BatchSampler)
    MergeFrom(*source);
  }
}

void BatchSampler::MergeFrom(const BatchSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BatchSampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sampler()->::apollo::perception::inference::Sampler::MergeFrom(from._internal_sampler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sample_constraint()->::apollo::perception::inference::SampleConstraint::MergeFrom(from._internal_sample_constraint());
    }
    if (cached_has_bits & 0x00000004u) {
      max_sample_ = from.max_sample_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_original_image_ = from.use_original_image_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_trials_ = from.max_trials_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchSampler::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BatchSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSampler::CopyFrom(const BatchSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BatchSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSampler::IsInitialized() const {
  return true;
}

void BatchSampler::InternalSwap(BatchSampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sampler_, other->sampler_);
  swap(sample_constraint_, other->sample_constraint_);
  swap(max_sample_, other->max_sample_);
  swap(use_original_image_, other->use_original_image_);
  swap(max_trials_, other->max_trials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchSampler::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmitConstraint::InitAsDefaultInstance() {
}
class EmitConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<EmitConstraint>()._has_bits_);
  static void set_has_emit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_emit_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EmitConstraint::EmitConstraint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.EmitConstraint)
}
EmitConstraint::EmitConstraint(const EmitConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emit_type_, &from.emit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&emit_overlap_) -
    reinterpret_cast<char*>(&emit_type_)) + sizeof(emit_overlap_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.EmitConstraint)
}

void EmitConstraint::SharedCtor() {
  ::memset(&emit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emit_overlap_) -
      reinterpret_cast<char*>(&emit_type_)) + sizeof(emit_overlap_));
}

EmitConstraint::~EmitConstraint() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.EmitConstraint)
  SharedDtor();
}

void EmitConstraint::SharedDtor() {
}

void EmitConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmitConstraint& EmitConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmitConstraint_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void EmitConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.EmitConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&emit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&emit_overlap_) -
        reinterpret_cast<char*>(&emit_type_)) + sizeof(emit_overlap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EmitConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::EmitConstraint_EmitType_IsValid(val))) {
            _internal_set_emit_type(static_cast<::apollo::perception::inference::EmitConstraint_EmitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float emit_overlap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_emit_overlap(&has_bits);
          emit_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmitConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.EmitConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_emit_type(), target);
  }

  // optional float emit_overlap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_emit_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.EmitConstraint)
  return target;
}

size_t EmitConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.EmitConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_emit_type());
    }

    // optional float emit_overlap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmitConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.EmitConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const EmitConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmitConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.EmitConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.EmitConstraint)
    MergeFrom(*source);
  }
}

void EmitConstraint::MergeFrom(const EmitConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.EmitConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      emit_type_ = from.emit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      emit_overlap_ = from.emit_overlap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmitConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.EmitConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmitConstraint::CopyFrom(const EmitConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.EmitConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitConstraint::IsInitialized() const {
  return true;
}

void EmitConstraint::InternalSwap(EmitConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(emit_type_, other->emit_type_);
  swap(emit_overlap_, other->emit_overlap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmitConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizedBBox::InitAsDefaultInstance() {
}
class NormalizedBBox::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizedBBox>()._has_bits_);
  static void set_has_xmin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ymin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xmax(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ymax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_difficult(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

NormalizedBBox::NormalizedBBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NormalizedBBox)
}
NormalizedBBox::NormalizedBBox(const NormalizedBBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NormalizedBBox)
}

void NormalizedBBox::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(size_));
}

NormalizedBBox::~NormalizedBBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NormalizedBBox)
  SharedDtor();
}

void NormalizedBBox::SharedDtor() {
}

void NormalizedBBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizedBBox& NormalizedBBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizedBBox_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NormalizedBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NormalizedBBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NormalizedBBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float xmin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_xmin(&has_bits);
          xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ymin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ymin(&has_bits);
          ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_xmax(&has_bits);
          xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ymax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ymax(&has_bits);
          ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool difficult = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_difficult(&has_bits);
          difficult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizedBBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NormalizedBBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ymin(), target);
  }

  // optional float xmax = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_xmax(), target);
  }

  // optional float ymax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ymax(), target);
  }

  // optional int32 label = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_label(), target);
  }

  // optional bool difficult = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_difficult(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_score(), target);
  }

  // optional float size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NormalizedBBox)
  return target;
}

size_t NormalizedBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NormalizedBBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float xmin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float xmax = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float ymax = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 label = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_label());
    }

    // optional bool difficult = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float score = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedBBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedBBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizedBBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NormalizedBBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NormalizedBBox)
    MergeFrom(*source);
  }
}

void NormalizedBBox::MergeFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NormalizedBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      xmax_ = from.xmax_;
    }
    if (cached_has_bits & 0x00000008u) {
      ymax_ = from.ymax_;
    }
    if (cached_has_bits & 0x00000010u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficult_ = from.difficult_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedBBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedBBox::CopyFrom(const NormalizedBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NormalizedBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedBBox::IsInitialized() const {
  return true;
}

void NormalizedBBox::InternalSwap(NormalizedBBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(xmax_, other->xmax_);
  swap(ymax_, other->ymax_);
  swap(label_, other->label_);
  swap(difficult_, other->difficult_);
  swap(score_, other->score_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizedBBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BBox3D::InitAsDefaultInstance() {
}
class BBox3D::_Internal {
 public:
  using HasBits = decltype(std::declval<BBox3D>()._has_bits_);
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

BBox3D::BBox3D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BBox3D)
}
BBox3D::BBox3D(const BBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&h_, &from.h_,
    static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
    reinterpret_cast<char*>(&h_)) + sizeof(alpha_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BBox3D)
}

void BBox3D::SharedCtor() {
  ::memset(&h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&h_)) + sizeof(alpha_));
}

BBox3D::~BBox3D() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BBox3D)
  SharedDtor();
}

void BBox3D::SharedDtor() {
}

void BBox3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BBox3D& BBox3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BBox3D_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&h_)) + sizeof(alpha_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BBox3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float x = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BBox3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_h(), target);
  }

  // optional float w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_w(), target);
  }

  // optional float l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_l(), target);
  }

  // optional float x = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // optional float y = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // optional float z = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_z(), target);
  }

  // optional float alpha = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BBox3D)
  return target;
}

size_t BBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BBox3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float x = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float y = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float z = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float alpha = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BBox3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  const BBox3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BBox3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BBox3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BBox3D)
    MergeFrom(*source);
  }
}

void BBox3D::MergeFrom(const BBox3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      h_ = from.h_;
    }
    if (cached_has_bits & 0x00000002u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000004u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      alpha_ = from.alpha_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BBox3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox3D::CopyFrom(const BBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox3D::IsInitialized() const {
  return true;
}

void BBox3D::InternalSwap(BBox3D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(h_, other->h_);
  swap(w_, other->w_);
  swap(l_, other->l_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(alpha_, other->alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Annotation::InitAsDefaultInstance() {
  ::apollo::perception::inference::_Annotation_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::apollo::perception::inference::NormalizedBBox*>(
      ::apollo::perception::inference::NormalizedBBox::internal_default_instance());
  ::apollo::perception::inference::_Annotation_default_instance_._instance.get_mutable()->bbox3d_ = const_cast< ::apollo::perception::inference::BBox3D*>(
      ::apollo::perception::inference::BBox3D::internal_default_instance());
  ::apollo::perception::inference::_Annotation_default_instance_._instance.get_mutable()->front_bbox_ = const_cast< ::apollo::perception::inference::NormalizedBBox*>(
      ::apollo::perception::inference::NormalizedBBox::internal_default_instance());
  ::apollo::perception::inference::_Annotation_default_instance_._instance.get_mutable()->rear_bbox_ = const_cast< ::apollo::perception::inference::NormalizedBBox*>(
      ::apollo::perception::inference::NormalizedBBox::internal_default_instance());
}
class Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<Annotation>()._has_bits_);
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::NormalizedBBox& bbox(const Annotation* msg);
  static void set_has_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::BBox3D& bbox3d(const Annotation* msg);
  static void set_has_bbox3d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::NormalizedBBox& front_bbox(const Annotation* msg);
  static void set_has_front_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::NormalizedBBox& rear_bbox(const Annotation* msg);
  static void set_has_rear_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::NormalizedBBox&
Annotation::_Internal::bbox(const Annotation* msg) {
  return *msg->bbox_;
}
const ::apollo::perception::inference::BBox3D&
Annotation::_Internal::bbox3d(const Annotation* msg) {
  return *msg->bbox3d_;
}
const ::apollo::perception::inference::NormalizedBBox&
Annotation::_Internal::front_bbox(const Annotation* msg) {
  return *msg->front_bbox_;
}
const ::apollo::perception::inference::NormalizedBBox&
Annotation::_Internal::rear_bbox(const Annotation* msg) {
  return *msg->rear_bbox_;
}
Annotation::Annotation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bbox()) {
    bbox_ = new ::apollo::perception::inference::NormalizedBBox(*from.bbox_);
  } else {
    bbox_ = nullptr;
  }
  if (from._internal_has_bbox3d()) {
    bbox3d_ = new ::apollo::perception::inference::BBox3D(*from.bbox3d_);
  } else {
    bbox3d_ = nullptr;
  }
  if (from._internal_has_front_bbox()) {
    front_bbox_ = new ::apollo::perception::inference::NormalizedBBox(*from.front_bbox_);
  } else {
    front_bbox_ = nullptr;
  }
  if (from._internal_has_rear_bbox()) {
    rear_bbox_ = new ::apollo::perception::inference::NormalizedBBox(*from.rear_bbox_);
  } else {
    rear_bbox_ = nullptr;
  }
  instance_id_ = from.instance_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.Annotation)
}

void Annotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(instance_id_));
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete bbox3d_;
  if (this != internal_default_instance()) delete front_bbox_;
  if (this != internal_default_instance()) delete rear_bbox_;
}

void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Annotation& Annotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bbox_ != nullptr);
      bbox_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bbox3d_ != nullptr);
      bbox3d_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(front_bbox_ != nullptr);
      front_bbox_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rear_bbox_ != nullptr);
      rear_bbox_->Clear();
    }
  }
  instance_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 instance_id = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BBox3D bbox3d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rear_bbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Annotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 instance_id = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_instance_id(), target);
  }

  // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bbox(this), target, stream);
  }

  // optional .apollo.perception.inference.BBox3D bbox3d = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bbox3d(this), target, stream);
  }

  // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::front_bbox(this), target, stream);
  }

  // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rear_bbox(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.Annotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.NormalizedBBox bbox = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bbox_);
    }

    // optional .apollo.perception.inference.BBox3D bbox3d = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bbox3d_);
    }

    // optional .apollo.perception.inference.NormalizedBBox front_bbox = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *front_bbox_);
    }

    // optional .apollo.perception.inference.NormalizedBBox rear_bbox = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rear_bbox_);
    }

    // optional int32 instance_id = 1 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_instance_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Annotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.Annotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bbox()->::apollo::perception::inference::NormalizedBBox::MergeFrom(from._internal_bbox());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bbox3d()->::apollo::perception::inference::BBox3D::MergeFrom(from._internal_bbox3d());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_front_bbox()->::apollo::perception::inference::NormalizedBBox::MergeFrom(from._internal_front_bbox());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rear_bbox()->::apollo::perception::inference::NormalizedBBox::MergeFrom(from._internal_rear_bbox());
    }
    if (cached_has_bits & 0x00000010u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Annotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bbox_, other->bbox_);
  swap(bbox3d_, other->bbox3d_);
  swap(front_bbox_, other->front_bbox_);
  swap(rear_bbox_, other->rear_bbox_);
  swap(instance_id_, other->instance_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnotationGroup::InitAsDefaultInstance() {
}
class AnnotationGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotationGroup>()._has_bits_);
  static void set_has_group_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AnnotationGroup::AnnotationGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.AnnotationGroup)
}
AnnotationGroup::AnnotationGroup(const AnnotationGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      annotation_(from.annotation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_label_ = from.group_label_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnnotationGroup)
}

void AnnotationGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto.base);
  group_label_ = 0;
}

AnnotationGroup::~AnnotationGroup() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnnotationGroup)
  SharedDtor();
}

void AnnotationGroup::SharedDtor() {
}

void AnnotationGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnotationGroup& AnnotationGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnotationGroup_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void AnnotationGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnnotationGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_.Clear();
  group_label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AnnotationGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 group_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_label(&has_bits);
          group_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.Annotation annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotationGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnnotationGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 group_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_group_label(), target);
  }

  // repeated .apollo.perception.inference.Annotation annotation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_annotation(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnnotationGroup)
  return target;
}

size_t AnnotationGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnnotationGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.Annotation annotation = 2;
  total_size += 1UL * this->_internal_annotation_size();
  for (const auto& msg : this->annotation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 group_label = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotationGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.AnnotationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotationGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotationGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.AnnotationGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.AnnotationGroup)
    MergeFrom(*source);
  }
}

void AnnotationGroup::MergeFrom(const AnnotationGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnnotationGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_.MergeFrom(from.annotation_);
  if (from._internal_has_group_label()) {
    _internal_set_group_label(from._internal_group_label());
  }
}

void AnnotationGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.AnnotationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotationGroup::CopyFrom(const AnnotationGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnnotationGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotationGroup::IsInitialized() const {
  return true;
}

void AnnotationGroup::InternalSwap(AnnotationGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  annotation_.InternalSwap(&other->annotation_);
  swap(group_label_, other->group_label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotationGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnotatedDatum::InitAsDefaultInstance() {
  ::apollo::perception::inference::_AnnotatedDatum_default_instance_._instance.get_mutable()->datum_ = const_cast< ::apollo::perception::inference::Datum*>(
      ::apollo::perception::inference::Datum::internal_default_instance());
}
class AnnotatedDatum::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotatedDatum>()._has_bits_);
  static const ::apollo::perception::inference::Datum& datum(const AnnotatedDatum* msg);
  static void set_has_datum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::Datum&
AnnotatedDatum::_Internal::datum(const AnnotatedDatum* msg) {
  return *msg->datum_;
}
AnnotatedDatum::AnnotatedDatum()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.AnnotatedDatum)
}
AnnotatedDatum::AnnotatedDatum(const AnnotatedDatum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      annotation_group_(from.annotation_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_datum()) {
    datum_ = new ::apollo::perception::inference::Datum(*from.datum_);
  } else {
    datum_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnnotatedDatum)
}

void AnnotatedDatum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnnotatedDatum_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&datum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&datum_)) + sizeof(type_));
}

AnnotatedDatum::~AnnotatedDatum() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnnotatedDatum)
  SharedDtor();
}

void AnnotatedDatum::SharedDtor() {
  if (this != internal_default_instance()) delete datum_;
}

void AnnotatedDatum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnotatedDatum& AnnotatedDatum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnotatedDatum_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void AnnotatedDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnnotatedDatum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotation_group_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(datum_ != nullptr);
    datum_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AnnotatedDatum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.Datum datum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_datum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::inference::AnnotatedDatum_AnnotationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotation_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotatedDatum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnnotatedDatum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.Datum datum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::datum(this), target, stream);
  }

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_annotation_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_annotation_group(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnnotatedDatum)
  return target;
}

size_t AnnotatedDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnnotatedDatum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnnotationGroup annotation_group = 3;
  total_size += 1UL * this->_internal_annotation_group_size();
  for (const auto& msg : this->annotation_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.Datum datum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *datum_);
    }

    // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotatedDatum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.AnnotatedDatum)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotatedDatum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotatedDatum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.AnnotatedDatum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.AnnotatedDatum)
    MergeFrom(*source);
  }
}

void AnnotatedDatum::MergeFrom(const AnnotatedDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnnotatedDatum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotation_group_.MergeFrom(from.annotation_group_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_datum()->::apollo::perception::inference::Datum::MergeFrom(from._internal_datum());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnotatedDatum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.AnnotatedDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotatedDatum::CopyFrom(const AnnotatedDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnnotatedDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotatedDatum::IsInitialized() const {
  return true;
}

void AnnotatedDatum::InternalSwap(AnnotatedDatum* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  annotation_group_.InternalSwap(&other->annotation_group_);
  swap(datum_, other->datum_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotatedDatum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FillerParameter::InitAsDefaultInstance() {
}
class FillerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<FillerParameter>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_std(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_variance_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FillerParameter::_i_give_permission_to_break_this_code_default_type_;
FillerParameter::FillerParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.FillerParameter)
}
FillerParameter::FillerParameter(const FillerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_) -
    reinterpret_cast<char*>(&value_)) + sizeof(std_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.FillerParameter)
}

void FillerParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  type_.UnsafeSetDefault(&::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&variance_norm_) -
      reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
  sparse_ = -1;
  max_ = 1;
  std_ = 1;
}

FillerParameter::~FillerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.FillerParameter)
  SharedDtor();
}

void FillerParameter::SharedDtor() {
  type_.DestroyNoArena(&::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
}

void FillerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FillerParameter& FillerParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FillerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void FillerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.FillerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get());
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variance_norm_) -
        reinterpret_cast<char*>(&value_)) + sizeof(variance_norm_));
    sparse_ = -1;
    max_ = 1;
    std_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FillerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1 [default = "constant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.FillerParameter.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mean(&has_bits);
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_std(&has_bits);
          std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 sparse = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sparse(&has_bits);
          sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::FillerParameter_VarianceNorm_IsValid(val))) {
            _internal_set_variance_norm(static_cast<::apollo::perception::inference::FillerParameter_VarianceNorm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FillerParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.FillerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1 [default = "constant"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.FillerParameter.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional float value = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // optional float min = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min(), target);
  }

  // optional float max = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max(), target);
  }

  // optional float mean = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mean(), target);
  }

  // optional float std = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_std(), target);
  }

  // optional int32 sparse = 7 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sparse(), target);
  }

  // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_variance_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.FillerParameter)
  return target;
}

size_t FillerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.FillerParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 1 [default = "constant"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional float value = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float mean = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_variance_norm());
    }

    // optional int32 sparse = 7 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sparse());
    }

    // optional float max = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float std = 6 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FillerParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FillerParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FillerParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.FillerParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.FillerParameter)
    MergeFrom(*source);
  }
}

void FillerParameter::MergeFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.FillerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000010u) {
      variance_norm_ = from.variance_norm_;
    }
    if (cached_has_bits & 0x00000020u) {
      sparse_ = from.sparse_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000080u) {
      std_ = from.std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FillerParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillerParameter::CopyFrom(const FillerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.FillerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillerParameter::IsInitialized() const {
  return true;
}

void FillerParameter::InternalSwap(FillerParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::apollo::perception::inference::FillerParameter::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(min_, other->min_);
  swap(mean_, other->mean_);
  swap(variance_norm_, other->variance_norm_);
  swap(sparse_, other->sparse_);
  swap(max_, other->max_);
  swap(std_, other->std_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FillerParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_NetParameter_default_instance_._instance.get_mutable()->state_ = const_cast< ::apollo::perception::inference::NetState*>(
      ::apollo::perception::inference::NetState::internal_default_instance());
}
class NetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NetParameter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_backward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::NetState& state(const NetParameter* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::NetState&
NetParameter::_Internal::state(const NetParameter* msg) {
  return *msg->state_;
}
NetParameter::NetParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layers_(from.layers_),
      input_(from.input_),
      input_dim_(from.input_dim_),
      input_shape_(from.input_shape_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_state()) {
    state_ = new ::apollo::perception::inference::NetState(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&force_backward_, &from.force_backward_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_info_) -
    reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NetParameter)
}

void NetParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&state_)) + sizeof(debug_info_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void NetParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetParameter& NetParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  input_.Clear();
  input_dim_.Clear();
  input_shape_.Clear();
  layer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
  }
  ::memset(&force_backward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&force_backward_)) + sizeof(debug_info_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NetParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.NetParameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.NetParameter.input");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 input_dim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_dim(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_backward = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_force_backward(&has_bits);
          force_backward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NetState state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug_info = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_debug_info(&has_bits);
          debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobShape input_shape = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.LayerParameter layer = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_layers(i), target, stream);
  }

  // repeated string input = 3;
  for (int i = 0, n = this->_internal_input_size(); i < n; i++) {
    const auto& s = this->_internal_input(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetParameter.input");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 input_dim = 4;
  for (int i = 0, n = this->_internal_input_dim_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_input_dim(i), target);
  }

  // optional bool force_backward = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_force_backward(), target);
  }

  // optional .apollo.perception.inference.NetState state = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::state(this), target, stream);
  }

  // optional bool debug_info = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_debug_info(), target);
  }

  // repeated .apollo.perception.inference.BlobShape input_shape = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_input_shape(i), target, stream);
  }

  // repeated .apollo.perception.inference.LayerParameter layer = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_layer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NetParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.V1LayerParameter layers = 2;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string input = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_.size());
  for (int i = 0, n = input_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_.Get(i));
  }

  // repeated int32 input_dim = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_dim_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_dim_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.BlobShape input_shape = 8;
  total_size += 1UL * this->_internal_input_shape_size();
  for (const auto& msg : this->input_shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.LayerParameter layer = 100;
  total_size += 2UL * this->_internal_layer_size();
  for (const auto& msg : this->layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.inference.NetState state = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional bool force_backward = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool debug_info = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NetParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  input_.MergeFrom(from.input_);
  input_dim_.MergeFrom(from.input_dim_);
  input_shape_.MergeFrom(from.input_shape_);
  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_state()->::apollo::perception::inference::NetState::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      force_backward_ = from.force_backward_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_info_ = from.debug_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  return true;
}

void NetParameter::InternalSwap(NetParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layers_.InternalSwap(&other->layers_);
  input_.InternalSwap(&other->input_);
  input_dim_.InternalSwap(&other->input_dim_);
  input_shape_.InternalSwap(&other->input_shape_);
  layer_.InternalSwap(&other->layer_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(force_backward_, other->force_backward_);
  swap(debug_info_, other->debug_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SolverParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_SolverParameter_default_instance_._instance.get_mutable()->net_param_ = const_cast< ::apollo::perception::inference::NetParameter*>(
      ::apollo::perception::inference::NetParameter::internal_default_instance());
  ::apollo::perception::inference::_SolverParameter_default_instance_._instance.get_mutable()->train_net_param_ = const_cast< ::apollo::perception::inference::NetParameter*>(
      ::apollo::perception::inference::NetParameter::internal_default_instance());
  ::apollo::perception::inference::_SolverParameter_default_instance_._instance.get_mutable()->train_state_ = const_cast< ::apollo::perception::inference::NetState*>(
      ::apollo::perception::inference::NetState::internal_default_instance());
}
class SolverParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SolverParameter>()._has_bits_);
  static void set_has_net(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::NetParameter& net_param(const SolverParameter* msg);
  static void set_has_net_param(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_train_net(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::NetParameter& train_net_param(const SolverParameter* msg);
  static void set_has_train_net_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::NetState& train_state(const SolverParameter* msg);
  static void set_has_train_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_eval_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ap_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_per_class_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_test_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_test_compute_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_test_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_base_lr(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_display(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_average_loss(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_iter_size(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_lr_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_momentum(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_weight_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_regularization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stepsize(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_clip_gradients(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_snapshot(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_snapshot_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_snapshot_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_snapshot_format(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_solver_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_momentum2(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_rms_decay(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_snapshot_after_train(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_solver_type(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::apollo::perception::inference::NetParameter&
SolverParameter::_Internal::net_param(const SolverParameter* msg) {
  return *msg->net_param_;
}
const ::apollo::perception::inference::NetParameter&
SolverParameter::_Internal::train_net_param(const SolverParameter* msg) {
  return *msg->train_net_param_;
}
const ::apollo::perception::inference::NetState&
SolverParameter::_Internal::train_state(const SolverParameter* msg) {
  return *msg->train_state_;
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SolverParameter::_i_give_permission_to_break_this_code_default_type_;
SolverParameter::SolverParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SolverParameter)
}
SolverParameter::SolverParameter(const SolverParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      test_net_(from.test_net_),
      test_iter_(from.test_iter_),
      test_net_param_(from.test_net_param_),
      test_state_(from.test_state_),
      stepvalue_(from.stepvalue_),
      plateau_winsize_(from.plateau_winsize_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  train_net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_train_net()) {
    train_net_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.train_net_);
  }
  lr_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lr_policy()) {
    lr_policy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
  }
  snapshot_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshot_prefix()) {
    snapshot_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
  }
  net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_net()) {
    net_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.net_);
  }
  regularization_type_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
  if (from._internal_has_regularization_type()) {
    regularization_type_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), from.regularization_type_);
  }
  type_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
  }
  eval_type_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get());
  if (from._internal_has_eval_type()) {
    eval_type_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get(), from.eval_type_);
  }
  ap_version_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get());
  if (from._internal_has_ap_version()) {
    ap_version_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get(), from.ap_version_);
  }
  if (from._internal_has_train_net_param()) {
    train_net_param_ = new ::apollo::perception::inference::NetParameter(*from.train_net_param_);
  } else {
    train_net_param_ = nullptr;
  }
  if (from._internal_has_net_param()) {
    net_param_ = new ::apollo::perception::inference::NetParameter(*from.net_param_);
  } else {
    net_param_ = nullptr;
  }
  if (from._internal_has_train_state()) {
    train_state_ = new ::apollo::perception::inference::NetState(*from.train_state_);
  } else {
    train_state_ = nullptr;
  }
  ::memcpy(&test_interval_, &from.test_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&rms_decay_) -
    reinterpret_cast<char*>(&test_interval_)) + sizeof(rms_decay_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SolverParameter)
}

void SolverParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SolverParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  train_net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lr_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regularization_type_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
  type_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get());
  eval_type_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get());
  ap_version_.UnsafeSetDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get());
  ::memset(&train_net_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&solver_type_) -
      reinterpret_cast<char*>(&train_net_param_)) + sizeof(solver_type_));
  momentum2_ = 0.999f;
  random_seed_ = PROTOBUF_LONGLONG(-1);
  solver_mode_ = 1;
  test_initialization_ = true;
  snapshot_after_train_ = true;
  delta_ = 1e-08f;
  average_loss_ = 1;
  clip_gradients_ = -1;
  iter_size_ = 1;
  snapshot_format_ = 1;
  rms_decay_ = 0.99f;
}

SolverParameter::~SolverParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SolverParameter)
  SharedDtor();
}

void SolverParameter::SharedDtor() {
  train_net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lr_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regularization_type_.DestroyNoArena(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
  type_.DestroyNoArena(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get());
  eval_type_.DestroyNoArena(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get());
  ap_version_.DestroyNoArena(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get());
  if (this != internal_default_instance()) delete train_net_param_;
  if (this != internal_default_instance()) delete net_param_;
  if (this != internal_default_instance()) delete train_state_;
}

void SolverParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolverParameter& SolverParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SolverParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SolverParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SolverParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_net_.Clear();
  test_iter_.Clear();
  test_net_param_.Clear();
  test_state_.Clear();
  stepvalue_.Clear();
  plateau_winsize_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      train_net_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      lr_policy_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      snapshot_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      net_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      regularization_type_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      type_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      eval_type_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get());
    }
    if (cached_has_bits & 0x00000080u) {
      ap_version_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(train_net_param_ != nullptr);
      train_net_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(net_param_ != nullptr);
      net_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(train_state_ != nullptr);
      train_state_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&test_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamma_) -
        reinterpret_cast<char*>(&test_interval_)) + sizeof(gamma_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_compute_loss_) -
        reinterpret_cast<char*>(&power_)) + sizeof(test_compute_loss_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&snapshot_diff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solver_type_) -
        reinterpret_cast<char*>(&snapshot_diff_)) + sizeof(solver_type_));
    momentum2_ = 0.999f;
    random_seed_ = PROTOBUF_LONGLONG(-1);
    solver_mode_ = 1;
    test_initialization_ = true;
    snapshot_after_train_ = true;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    delta_ = 1e-08f;
    average_loss_ = 1;
    clip_gradients_ = -1;
    iter_size_ = 1;
    snapshot_format_ = 1;
    rms_decay_ = 0.99f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SolverParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string train_net = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_train_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.train_net");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string test_net = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_test_net();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.test_net");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 test_iter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_iter(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_test_iter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 test_interval = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_test_interval(&_has_bits_);
          test_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float base_lr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_base_lr(&_has_bits_);
          base_lr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 display = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_display(&_has_bits_);
          display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_iter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_iter(&_has_bits_);
          max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lr_policy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_lr_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.lr_policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gamma = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_gamma(&_has_bits_);
          gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float power = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_power(&_has_bits_);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float momentum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_momentum(&_has_bits_);
          momentum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_decay = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_weight_decay(&_has_bits_);
          weight_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 stepsize = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_stepsize(&_has_bits_);
          stepsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 snapshot = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_snapshot(&_has_bits_);
          snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string snapshot_prefix = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_snapshot_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.snapshot_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool snapshot_diff = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_snapshot_diff(&_has_bits_);
          snapshot_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SolverParameter_SolverMode_IsValid(val))) {
            _internal_set_solver_mode(static_cast<::apollo::perception::inference::SolverParameter_SolverMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 device_id = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_device_id(&_has_bits_);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool test_compute_loss = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_test_compute_loss(&_has_bits_);
          test_compute_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 random_seed = 20 [default = -1];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_random_seed(&_has_bits_);
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NetParameter train_net_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_net_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetParameter test_net_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_test_net_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool debug_info = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_debug_info(&_has_bits_);
          debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string net = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.net");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NetParameter net_param = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NetState train_state = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_train_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetState test_state = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_test_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool snapshot_after_train = 28 [default = true];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_snapshot_after_train(&_has_bits_);
          snapshot_after_train_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string regularization_type = 29 [default = "L2"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_regularization_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.regularization_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SolverParameter.SolverType solver_type = 30 [default = SGD];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SolverParameter_SolverType_IsValid(val))) {
            _internal_set_solver_type(static_cast<::apollo::perception::inference::SolverParameter_SolverType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float delta = 31 [default = 1e-08];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_delta(&_has_bits_);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool test_initialization = 32 [default = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_test_initialization(&_has_bits_);
          test_initialization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 average_loss = 33 [default = 1];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_average_loss(&_has_bits_);
          average_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 stepvalue = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_stepvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stepvalue(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clip_gradients = 35 [default = -1];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_clip_gradients(&_has_bits_);
          clip_gradients_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 iter_size = 36 [default = 1];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iter_size(&_has_bits_);
          iter_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SolverParameter_SnapshotFormat_IsValid(val))) {
            _internal_set_snapshot_format(static_cast<::apollo::perception::inference::SolverParameter_SnapshotFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float rms_decay = 38 [default = 0.99];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_rms_decay(&_has_bits_);
          rms_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float momentum2 = 39 [default = 0.999];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_momentum2(&_has_bits_);
          momentum2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string type = 40 [default = "SGD"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string eval_type = 41 [default = "classification"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_eval_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.eval_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ap_version = 42 [default = "Integral"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ap_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverParameter.ap_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 plateau_winsize = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_plateau_winsize(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_plateau_winsize(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_per_class_result = 44 [default = false];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_show_per_class_result(&_has_bits_);
          show_per_class_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolverParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SolverParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string train_net = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_train_net().data(), static_cast<int>(this->_internal_train_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.train_net");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_train_net(), target);
  }

  // repeated string test_net = 2;
  for (int i = 0, n = this->_internal_test_net_size(); i < n; i++) {
    const auto& s = this->_internal_test_net(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.test_net");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 test_iter = 3;
  for (int i = 0, n = this->_internal_test_iter_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_test_iter(i), target);
  }

  // optional int32 test_interval = 4 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_test_interval(), target);
  }

  // optional float base_lr = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_base_lr(), target);
  }

  // optional int32 display = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_display(), target);
  }

  // optional int32 max_iter = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_iter(), target);
  }

  // optional string lr_policy = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lr_policy().data(), static_cast<int>(this->_internal_lr_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.lr_policy");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lr_policy(), target);
  }

  // optional float gamma = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_gamma(), target);
  }

  // optional float power = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_power(), target);
  }

  // optional float momentum = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_momentum(), target);
  }

  // optional float weight_decay = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_weight_decay(), target);
  }

  // optional int32 stepsize = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_stepsize(), target);
  }

  // optional int32 snapshot = 14 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_snapshot(), target);
  }

  // optional string snapshot_prefix = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snapshot_prefix().data(), static_cast<int>(this->_internal_snapshot_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.snapshot_prefix");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_snapshot_prefix(), target);
  }

  // optional bool snapshot_diff = 16 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_snapshot_diff(), target);
  }

  // optional .apollo.perception.inference.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_solver_mode(), target);
  }

  // optional int32 device_id = 18 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_device_id(), target);
  }

  // optional bool test_compute_loss = 19 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_test_compute_loss(), target);
  }

  // optional int64 random_seed = 20 [default = -1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_random_seed(), target);
  }

  // optional .apollo.perception.inference.NetParameter train_net_param = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::train_net_param(this), target, stream);
  }

  // repeated .apollo.perception.inference.NetParameter test_net_param = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_net_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_test_net_param(i), target, stream);
  }

  // optional bool debug_info = 23 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_debug_info(), target);
  }

  // optional string net = 24;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_net().data(), static_cast<int>(this->_internal_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.net");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_net(), target);
  }

  // optional .apollo.perception.inference.NetParameter net_param = 25;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::net_param(this), target, stream);
  }

  // optional .apollo.perception.inference.NetState train_state = 26;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::train_state(this), target, stream);
  }

  // repeated .apollo.perception.inference.NetState test_state = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_test_state(i), target, stream);
  }

  // optional bool snapshot_after_train = 28 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_snapshot_after_train(), target);
  }

  // optional string regularization_type = 29 [default = "L2"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_regularization_type().data(), static_cast<int>(this->_internal_regularization_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.regularization_type");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_regularization_type(), target);
  }

  // optional .apollo.perception.inference.SolverParameter.SolverType solver_type = 30 [default = SGD];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_solver_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float delta = 31 [default = 1e-08];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_delta(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool test_initialization = 32 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_test_initialization(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 average_loss = 33 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_average_loss(), target);
  }

  // repeated int32 stepvalue = 34;
  for (int i = 0, n = this->_internal_stepvalue_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_stepvalue(i), target);
  }

  // optional float clip_gradients = 35 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_clip_gradients(), target);
  }

  // optional int32 iter_size = 36 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_iter_size(), target);
  }

  // optional .apollo.perception.inference.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      37, this->_internal_snapshot_format(), target);
  }

  // optional float rms_decay = 38 [default = 0.99];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_rms_decay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float momentum2 = 39 [default = 0.999];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_momentum2(), target);
  }

  // optional string type = 40 [default = "SGD"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.type");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_type(), target);
  }

  // optional string eval_type = 41 [default = "classification"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_eval_type().data(), static_cast<int>(this->_internal_eval_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.eval_type");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_eval_type(), target);
  }

  // optional string ap_version = 42 [default = "Integral"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ap_version().data(), static_cast<int>(this->_internal_ap_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverParameter.ap_version");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_ap_version(), target);
  }

  // repeated int32 plateau_winsize = 43;
  for (int i = 0, n = this->_internal_plateau_winsize_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_plateau_winsize(i), target);
  }

  // optional bool show_per_class_result = 44 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_show_per_class_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SolverParameter)
  return target;
}

size_t SolverParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SolverParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string test_net = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(test_net_.size());
  for (int i = 0, n = test_net_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      test_net_.Get(i));
  }

  // repeated int32 test_iter = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->test_iter_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_iter_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.NetParameter test_net_param = 22;
  total_size += 2UL * this->_internal_test_net_param_size();
  for (const auto& msg : this->test_net_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetState test_state = 27;
  total_size += 2UL * this->_internal_test_state_size();
  for (const auto& msg : this->test_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 stepvalue = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stepvalue_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stepvalue_size());
    total_size += data_size;
  }

  // repeated int32 plateau_winsize = 43;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->plateau_winsize_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_plateau_winsize_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string train_net = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_train_net());
    }

    // optional string lr_policy = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lr_policy());
    }

    // optional string snapshot_prefix = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_snapshot_prefix());
    }

    // optional string net = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_net());
    }

    // optional string regularization_type = 29 [default = "L2"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regularization_type());
    }

    // optional string type = 40 [default = "SGD"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string eval_type = 41 [default = "classification"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_eval_type());
    }

    // optional string ap_version = 42 [default = "Integral"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ap_version());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.NetParameter train_net_param = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *train_net_param_);
    }

    // optional .apollo.perception.inference.NetParameter net_param = 25;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *net_param_);
    }

    // optional .apollo.perception.inference.NetState train_state = 26;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *train_state_);
    }

    // optional int32 test_interval = 4 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_test_interval());
    }

    // optional float base_lr = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int32 display = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_display());
    }

    // optional int32 max_iter = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_iter());
    }

    // optional float gamma = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float power = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float momentum = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float weight_decay = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional int32 stepsize = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stepsize());
    }

    // optional int32 snapshot = 14 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_snapshot());
    }

    // optional int32 device_id = 18 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_device_id());
    }

    // optional bool show_per_class_result = 44 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool test_compute_loss = 19 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool snapshot_diff = 16 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool debug_info = 23 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.perception.inference.SolverParameter.SolverType solver_type = 30 [default = SGD];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solver_type());
    }

    // optional float momentum2 = 39 [default = 0.999];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional int64 random_seed = 20 [default = -1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_random_seed());
    }

    // optional .apollo.perception.inference.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solver_mode());
    }

    // optional bool test_initialization = 32 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool snapshot_after_train = 28 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional float delta = 31 [default = 1e-08];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 average_loss = 33 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_average_loss());
    }

    // optional float clip_gradients = 35 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional int32 iter_size = 36 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iter_size());
    }

    // optional .apollo.perception.inference.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_snapshot_format());
    }

    // optional float rms_decay = 38 [default = 0.99];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolverParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolverParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SolverParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SolverParameter)
    MergeFrom(*source);
  }
}

void SolverParameter::MergeFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SolverParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_net_.MergeFrom(from.test_net_);
  test_iter_.MergeFrom(from.test_iter_);
  test_net_param_.MergeFrom(from.test_net_param_);
  test_state_.MergeFrom(from.test_state_);
  stepvalue_.MergeFrom(from.stepvalue_);
  plateau_winsize_.MergeFrom(from.plateau_winsize_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      train_net_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.train_net_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      lr_policy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lr_policy_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      snapshot_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshot_prefix_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      net_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.net_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      regularization_type_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(), from.regularization_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      type_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      eval_type_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get(), from.eval_type_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      ap_version_.AssignWithDefault(&::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get(), from.ap_version_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_train_net_param()->::apollo::perception::inference::NetParameter::MergeFrom(from._internal_train_net_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_net_param()->::apollo::perception::inference::NetParameter::MergeFrom(from._internal_net_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_train_state()->::apollo::perception::inference::NetState::MergeFrom(from._internal_train_state());
    }
    if (cached_has_bits & 0x00000800u) {
      test_interval_ = from.test_interval_;
    }
    if (cached_has_bits & 0x00001000u) {
      base_lr_ = from.base_lr_;
    }
    if (cached_has_bits & 0x00002000u) {
      display_ = from.display_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00008000u) {
      gamma_ = from.gamma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00020000u) {
      momentum_ = from.momentum_;
    }
    if (cached_has_bits & 0x00040000u) {
      weight_decay_ = from.weight_decay_;
    }
    if (cached_has_bits & 0x00080000u) {
      stepsize_ = from.stepsize_;
    }
    if (cached_has_bits & 0x00100000u) {
      snapshot_ = from.snapshot_;
    }
    if (cached_has_bits & 0x00200000u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      show_per_class_result_ = from.show_per_class_result_;
    }
    if (cached_has_bits & 0x00800000u) {
      test_compute_loss_ = from.test_compute_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      snapshot_diff_ = from.snapshot_diff_;
    }
    if (cached_has_bits & 0x02000000u) {
      debug_info_ = from.debug_info_;
    }
    if (cached_has_bits & 0x04000000u) {
      solver_type_ = from.solver_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      momentum2_ = from.momentum2_;
    }
    if (cached_has_bits & 0x10000000u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x20000000u) {
      solver_mode_ = from.solver_mode_;
    }
    if (cached_has_bits & 0x40000000u) {
      test_initialization_ = from.test_initialization_;
    }
    if (cached_has_bits & 0x80000000u) {
      snapshot_after_train_ = from.snapshot_after_train_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      delta_ = from.delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      average_loss_ = from.average_loss_;
    }
    if (cached_has_bits & 0x00000004u) {
      clip_gradients_ = from.clip_gradients_;
    }
    if (cached_has_bits & 0x00000008u) {
      iter_size_ = from.iter_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      snapshot_format_ = from.snapshot_format_;
    }
    if (cached_has_bits & 0x00000020u) {
      rms_decay_ = from.rms_decay_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SolverParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParameter::CopyFrom(const SolverParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SolverParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParameter::IsInitialized() const {
  return true;
}

void SolverParameter::InternalSwap(SolverParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  test_net_.InternalSwap(&other->test_net_);
  test_iter_.InternalSwap(&other->test_iter_);
  test_net_param_.InternalSwap(&other->test_net_param_);
  test_state_.InternalSwap(&other->test_state_);
  stepvalue_.InternalSwap(&other->stepvalue_);
  plateau_winsize_.InternalSwap(&other->plateau_winsize_);
  train_net_.Swap(&other->train_net_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lr_policy_.Swap(&other->lr_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  snapshot_prefix_.Swap(&other->snapshot_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  net_.Swap(&other->net_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regularization_type_.Swap(&other->regularization_type_, &::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_regularization_type_.get(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_type_.get(),
    GetArenaNoVirtual());
  eval_type_.Swap(&other->eval_type_, &::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_eval_type_.get(),
    GetArenaNoVirtual());
  ap_version_.Swap(&other->ap_version_, &::apollo::perception::inference::SolverParameter::_i_give_permission_to_break_this_code_default_ap_version_.get(),
    GetArenaNoVirtual());
  swap(train_net_param_, other->train_net_param_);
  swap(net_param_, other->net_param_);
  swap(train_state_, other->train_state_);
  swap(test_interval_, other->test_interval_);
  swap(base_lr_, other->base_lr_);
  swap(display_, other->display_);
  swap(max_iter_, other->max_iter_);
  swap(gamma_, other->gamma_);
  swap(power_, other->power_);
  swap(momentum_, other->momentum_);
  swap(weight_decay_, other->weight_decay_);
  swap(stepsize_, other->stepsize_);
  swap(snapshot_, other->snapshot_);
  swap(device_id_, other->device_id_);
  swap(show_per_class_result_, other->show_per_class_result_);
  swap(test_compute_loss_, other->test_compute_loss_);
  swap(snapshot_diff_, other->snapshot_diff_);
  swap(debug_info_, other->debug_info_);
  swap(solver_type_, other->solver_type_);
  swap(momentum2_, other->momentum2_);
  swap(random_seed_, other->random_seed_);
  swap(solver_mode_, other->solver_mode_);
  swap(test_initialization_, other->test_initialization_);
  swap(snapshot_after_train_, other->snapshot_after_train_);
  swap(delta_, other->delta_);
  swap(average_loss_, other->average_loss_);
  swap(clip_gradients_, other->clip_gradients_);
  swap(iter_size_, other->iter_size_);
  swap(snapshot_format_, other->snapshot_format_);
  swap(rms_decay_, other->rms_decay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SolverState::InitAsDefaultInstance() {
}
class SolverState::_Internal {
 public:
  using HasBits = decltype(std::declval<SolverState>()._has_bits_);
  static void set_has_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_learned_net(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_step(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_minimum_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iter_last_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SolverState::SolverState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SolverState)
}
SolverState::SolverState(const SolverState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      history_(from.history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  learned_net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_learned_net()) {
    learned_net_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
  }
  ::memcpy(&iter_, &from.iter_,
    static_cast<size_t>(reinterpret_cast<char*>(&minimum_loss_) -
    reinterpret_cast<char*>(&iter_)) + sizeof(minimum_loss_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SolverState)
}

void SolverState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SolverState_modules_2fperception_2fproto_2frt_2eproto.base);
  learned_net_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&iter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iter_last_event_) -
      reinterpret_cast<char*>(&iter_)) + sizeof(iter_last_event_));
  minimum_loss_ = 1e+38f;
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  learned_net_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SolverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolverState& SolverState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SolverState_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SolverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    learned_net_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&iter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iter_last_event_) -
        reinterpret_cast<char*>(&iter_)) + sizeof(iter_last_event_));
    minimum_loss_ = 1e+38f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SolverState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 iter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_iter(&has_bits);
          iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string learned_net = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_learned_net();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SolverState.learned_net");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 current_step = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_current_step(&has_bits);
          current_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float minimum_loss = 5 [default = 1e+38];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_minimum_loss(&has_bits);
          minimum_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 iter_last_event = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iter_last_event(&has_bits);
          iter_last_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolverState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SolverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 iter = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iter(), target);
  }

  // optional string learned_net = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_learned_net().data(), static_cast<int>(this->_internal_learned_net().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SolverState.learned_net");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_learned_net(), target);
  }

  // repeated .apollo.perception.inference.BlobProto history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_history(i), target, stream);
  }

  // optional int32 current_step = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_step(), target);
  }

  // optional float minimum_loss = 5 [default = 1e+38];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_minimum_loss(), target);
  }

  // optional int32 iter_last_event = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_iter_last_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SolverState)
  return target;
}

size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SolverState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobProto history = 3;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string learned_net = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_learned_net());
    }

    // optional int32 iter = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iter());
    }

    // optional int32 current_step = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_current_step());
    }

    // optional int32 iter_last_event = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_iter_last_event());
    }

    // optional float minimum_loss = 5 [default = 1e+38];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolverState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolverState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SolverState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_.MergeFrom(from.history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      learned_net_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.learned_net_);
    }
    if (cached_has_bits & 0x00000002u) {
      iter_ = from.iter_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_step_ = from.current_step_;
    }
    if (cached_has_bits & 0x00000008u) {
      iter_last_event_ = from.iter_last_event_;
    }
    if (cached_has_bits & 0x00000010u) {
      minimum_loss_ = from.minimum_loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolverState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  return true;
}

void SolverState::InternalSwap(SolverState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_.InternalSwap(&other->history_);
  learned_net_.Swap(&other->learned_net_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(iter_, other->iter_);
  swap(current_step_, other->current_step_);
  swap(iter_last_event_, other->iter_last_event_);
  swap(minimum_loss_, other->minimum_loss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetState::InitAsDefaultInstance() {
}
class NetState::_Internal {
 public:
  using HasBits = decltype(std::declval<NetState>()._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetState::NetState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NetState)
}
NetState::NetState(const NetState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stage_(from.stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&level_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NetState)
}

void NetState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto.base);
  level_ = 0;
  phase_ = 1;
}

NetState::~NetState() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NetState)
  SharedDtor();
}

void NetState::SharedDtor() {
}

void NetState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetState& NetState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetState_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NetState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NetState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    level_ = 0;
    phase_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NetState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::apollo::perception::inference::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 level = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stage();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.NetState.stage");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NetState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 level = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // repeated string stage = 3;
  for (int i = 0, n = this->_internal_stage_size(); i < n; i++) {
    const auto& s = this->_internal_stage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetState.stage");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NetState)
  return target;
}

size_t NetState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NetState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stage = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stage_.size());
  for (int i = 0, n = stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stage_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 level = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional .apollo.perception.inference.Phase phase = 1 [default = TEST];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  const NetState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NetState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NetState)
    MergeFrom(*source);
  }
}

void NetState::MergeFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NetState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_ = from.phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetState::CopyFrom(const NetState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NetState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetState::IsInitialized() const {
  return true;
}

void NetState::InternalSwap(NetState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_.InternalSwap(&other->stage_);
  swap(level_, other->level_);
  swap(phase_, other->phase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetStateRule::InitAsDefaultInstance() {
}
class NetStateRule::_Internal {
 public:
  using HasBits = decltype(std::declval<NetStateRule>()._has_bits_);
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NetStateRule::NetStateRule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NetStateRule)
}
NetStateRule::NetStateRule(const NetStateRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stage_(from.stage_),
      not_stage_(from.not_stage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NetStateRule)
}

void NetStateRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_level_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
}

NetStateRule::~NetStateRule() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NetStateRule)
  SharedDtor();
}

void NetStateRule::SharedDtor() {
}

void NetStateRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetStateRule& NetStateRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetStateRule_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NetStateRule::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NetStateRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_.Clear();
  not_stage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_level_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(max_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NetStateRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.Phase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::apollo::perception::inference::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 min_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_level(&has_bits);
          min_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_level(&has_bits);
          max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stage();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.NetStateRule.stage");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string not_stage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_not_stage();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.NetStateRule.not_stage");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetStateRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NetStateRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.Phase phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // optional int32 min_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_level(), target);
  }

  // optional int32 max_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_level(), target);
  }

  // repeated string stage = 4;
  for (int i = 0, n = this->_internal_stage_size(); i < n; i++) {
    const auto& s = this->_internal_stage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetStateRule.stage");
    target = stream->WriteString(4, s, target);
  }

  // repeated string not_stage = 5;
  for (int i = 0, n = this->_internal_not_stage_size(); i < n; i++) {
    const auto& s = this->_internal_not_stage(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.NetStateRule.not_stage");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NetStateRule)
  return target;
}

size_t NetStateRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NetStateRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stage = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stage_.size());
  for (int i = 0, n = stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stage_.Get(i));
  }

  // repeated string not_stage = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(not_stage_.size());
  for (int i = 0, n = not_stage_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      not_stage_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.inference.Phase phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional int32 min_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_level());
    }

    // optional int32 max_level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetStateRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  const NetStateRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetStateRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NetStateRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NetStateRule)
    MergeFrom(*source);
  }
}

void NetStateRule::MergeFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NetStateRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_.MergeFrom(from.stage_);
  not_stage_.MergeFrom(from.not_stage_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_level_ = from.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_level_ = from.max_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetStateRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStateRule::CopyFrom(const NetStateRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NetStateRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStateRule::IsInitialized() const {
  return true;
}

void NetStateRule::InternalSwap(NetStateRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_.InternalSwap(&other->stage_);
  not_stage_.InternalSwap(&other->not_stage_);
  swap(phase_, other->phase_);
  swap(min_level_, other->min_level_);
  swap(max_level_, other->max_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetStateRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamSpec::InitAsDefaultInstance() {
}
class ParamSpec::_Internal {
 public:
  using HasBits = decltype(std::declval<ParamSpec>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_share_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lr_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decay_mult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ParamSpec::ParamSpec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ParamSpec)
}
ParamSpec::ParamSpec(const ParamSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&share_mode_, &from.share_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&decay_mult_) -
    reinterpret_cast<char*>(&share_mode_)) + sizeof(decay_mult_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ParamSpec)
}

void ParamSpec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  share_mode_ = 0;
  lr_mult_ = 1;
  decay_mult_ = 1;
}

ParamSpec::~ParamSpec() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ParamSpec)
  SharedDtor();
}

void ParamSpec::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParamSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamSpec& ParamSpec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamSpec_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ParamSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ParamSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    share_mode_ = 0;
    lr_mult_ = 1;
    decay_mult_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParamSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.ParamSpec.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ParamSpec_DimCheckMode_IsValid(val))) {
            _internal_set_share_mode(static_cast<::apollo::perception::inference::ParamSpec_DimCheckMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float lr_mult = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_lr_mult(&has_bits);
          lr_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float decay_mult = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_decay_mult(&has_bits);
          decay_mult_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParamSpec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ParamSpec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ParamSpec.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_share_mode(), target);
  }

  // optional float lr_mult = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lr_mult(), target);
  }

  // optional float decay_mult = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_decay_mult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ParamSpec)
  return target;
}

size_t ParamSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ParamSpec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.inference.ParamSpec.DimCheckMode share_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_share_mode());
    }

    // optional float lr_mult = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float decay_mult = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamSpec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamSpec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ParamSpec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ParamSpec)
    MergeFrom(*source);
  }
}

void ParamSpec::MergeFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ParamSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      share_mode_ = from.share_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lr_mult_ = from.lr_mult_;
    }
    if (cached_has_bits & 0x00000008u) {
      decay_mult_ = from.decay_mult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParamSpec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamSpec::CopyFrom(const ParamSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ParamSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamSpec::IsInitialized() const {
  return true;
}

void ParamSpec::InternalSwap(ParamSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(share_mode_, other->share_mode_);
  swap(lr_mult_, other->lr_mult_);
  swap(decay_mult_, other->decay_mult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamSpec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LayerParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->transform_param_ = const_cast< ::apollo::perception::inference::TransformationParameter*>(
      ::apollo::perception::inference::TransformationParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->loss_param_ = const_cast< ::apollo::perception::inference::LossParameter*>(
      ::apollo::perception::inference::LossParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->accuracy_param_ = const_cast< ::apollo::perception::inference::AccuracyParameter*>(
      ::apollo::perception::inference::AccuracyParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->annotated_data_param_ = const_cast< ::apollo::perception::inference::AnnotatedDataParameter*>(
      ::apollo::perception::inference::AnnotatedDataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->argmax_param_ = const_cast< ::apollo::perception::inference::ArgMaxParameter*>(
      ::apollo::perception::inference::ArgMaxParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->batch_norm_param_ = const_cast< ::apollo::perception::inference::BatchNormParameter*>(
      ::apollo::perception::inference::BatchNormParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->bias_param_ = const_cast< ::apollo::perception::inference::BiasParameter*>(
      ::apollo::perception::inference::BiasParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->concat_param_ = const_cast< ::apollo::perception::inference::ConcatParameter*>(
      ::apollo::perception::inference::ConcatParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->contrastive_loss_param_ = const_cast< ::apollo::perception::inference::ContrastiveLossParameter*>(
      ::apollo::perception::inference::ContrastiveLossParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->convolution_param_ = const_cast< ::apollo::perception::inference::ConvolutionParameter*>(
      ::apollo::perception::inference::ConvolutionParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->crop_param_ = const_cast< ::apollo::perception::inference::CropParameter*>(
      ::apollo::perception::inference::CropParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->data_param_ = const_cast< ::apollo::perception::inference::DataParameter*>(
      ::apollo::perception::inference::DataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->detection_evaluate_param_ = const_cast< ::apollo::perception::inference::DetectionEvaluateParameter*>(
      ::apollo::perception::inference::DetectionEvaluateParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->detection_output_param_ = const_cast< ::apollo::perception::inference::DetectionOutputParameter*>(
      ::apollo::perception::inference::DetectionOutputParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->dropout_param_ = const_cast< ::apollo::perception::inference::DropoutParameter*>(
      ::apollo::perception::inference::DropoutParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->dummy_data_param_ = const_cast< ::apollo::perception::inference::DummyDataParameter*>(
      ::apollo::perception::inference::DummyDataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->eltwise_param_ = const_cast< ::apollo::perception::inference::EltwiseParameter*>(
      ::apollo::perception::inference::EltwiseParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->elu_param_ = const_cast< ::apollo::perception::inference::ELUParameter*>(
      ::apollo::perception::inference::ELUParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->embed_param_ = const_cast< ::apollo::perception::inference::EmbedParameter*>(
      ::apollo::perception::inference::EmbedParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->exp_param_ = const_cast< ::apollo::perception::inference::ExpParameter*>(
      ::apollo::perception::inference::ExpParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->flatten_param_ = const_cast< ::apollo::perception::inference::FlattenParameter*>(
      ::apollo::perception::inference::FlattenParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->hdf5_data_param_ = const_cast< ::apollo::perception::inference::HDF5DataParameter*>(
      ::apollo::perception::inference::HDF5DataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::apollo::perception::inference::HDF5OutputParameter*>(
      ::apollo::perception::inference::HDF5OutputParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->hinge_loss_param_ = const_cast< ::apollo::perception::inference::HingeLossParameter*>(
      ::apollo::perception::inference::HingeLossParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->image_data_param_ = const_cast< ::apollo::perception::inference::ImageDataParameter*>(
      ::apollo::perception::inference::ImageDataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->infogain_loss_param_ = const_cast< ::apollo::perception::inference::InfogainLossParameter*>(
      ::apollo::perception::inference::InfogainLossParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->inner_product_param_ = const_cast< ::apollo::perception::inference::InnerProductParameter*>(
      ::apollo::perception::inference::InnerProductParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->input_param_ = const_cast< ::apollo::perception::inference::InputParameter*>(
      ::apollo::perception::inference::InputParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->log_param_ = const_cast< ::apollo::perception::inference::LogParameter*>(
      ::apollo::perception::inference::LogParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->lrn_param_ = const_cast< ::apollo::perception::inference::LRNParameter*>(
      ::apollo::perception::inference::LRNParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->memory_data_param_ = const_cast< ::apollo::perception::inference::MemoryDataParameter*>(
      ::apollo::perception::inference::MemoryDataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->multibox_loss_param_ = const_cast< ::apollo::perception::inference::MultiBoxLossParameter*>(
      ::apollo::perception::inference::MultiBoxLossParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->region_param_ = const_cast< ::apollo::perception::inference::RegionParameter*>(
      ::apollo::perception::inference::RegionParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->region_output_param_ = const_cast< ::apollo::perception::inference::RegionOutputParameter*>(
      ::apollo::perception::inference::RegionOutputParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->region_proposal_param_ = const_cast< ::apollo::perception::inference::RegionProposalParameter*>(
      ::apollo::perception::inference::RegionProposalParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->yolo_target_param_ = const_cast< ::apollo::perception::inference::YoloTargetParameter*>(
      ::apollo::perception::inference::YoloTargetParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->yolo_anchors_param_ = const_cast< ::apollo::perception::inference::YoloAnchorsParameter*>(
      ::apollo::perception::inference::YoloAnchorsParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->yolo_loss_param_ = const_cast< ::apollo::perception::inference::YoloLossParameter*>(
      ::apollo::perception::inference::YoloLossParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->yolo_dump_param_ = const_cast< ::apollo::perception::inference::YoloDumpParameter*>(
      ::apollo::perception::inference::YoloDumpParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->padding_param_ = const_cast< ::apollo::perception::inference::PaddingParameter*>(
      ::apollo::perception::inference::PaddingParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->reorg_param_ = const_cast< ::apollo::perception::inference::ReorgParameter*>(
      ::apollo::perception::inference::ReorgParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->mvn_param_ = const_cast< ::apollo::perception::inference::MVNParameter*>(
      ::apollo::perception::inference::MVNParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->norm_param_ = const_cast< ::apollo::perception::inference::NormalizeParameter*>(
      ::apollo::perception::inference::NormalizeParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->parameter_param_ = const_cast< ::apollo::perception::inference::ParameterParameter*>(
      ::apollo::perception::inference::ParameterParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->permute_param_ = const_cast< ::apollo::perception::inference::PermuteParameter*>(
      ::apollo::perception::inference::PermuteParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->pooling_param_ = const_cast< ::apollo::perception::inference::PoolingParameter*>(
      ::apollo::perception::inference::PoolingParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->power_param_ = const_cast< ::apollo::perception::inference::PowerParameter*>(
      ::apollo::perception::inference::PowerParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->prelu_param_ = const_cast< ::apollo::perception::inference::PReLUParameter*>(
      ::apollo::perception::inference::PReLUParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->prior_box_param_ = const_cast< ::apollo::perception::inference::PriorBoxParameter*>(
      ::apollo::perception::inference::PriorBoxParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->python_param_ = const_cast< ::apollo::perception::inference::PythonParameter*>(
      ::apollo::perception::inference::PythonParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->recurrent_param_ = const_cast< ::apollo::perception::inference::RecurrentParameter*>(
      ::apollo::perception::inference::RecurrentParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->reduction_param_ = const_cast< ::apollo::perception::inference::ReductionParameter*>(
      ::apollo::perception::inference::ReductionParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->relu_param_ = const_cast< ::apollo::perception::inference::ReLUParameter*>(
      ::apollo::perception::inference::ReLUParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->reshape_param_ = const_cast< ::apollo::perception::inference::ReshapeParameter*>(
      ::apollo::perception::inference::ReshapeParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->roi_pooling_param_ = const_cast< ::apollo::perception::inference::ROIPoolingParameter*>(
      ::apollo::perception::inference::ROIPoolingParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->scale_param_ = const_cast< ::apollo::perception::inference::ScaleParameter*>(
      ::apollo::perception::inference::ScaleParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->sigmoid_param_ = const_cast< ::apollo::perception::inference::SigmoidParameter*>(
      ::apollo::perception::inference::SigmoidParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->softmax_param_ = const_cast< ::apollo::perception::inference::SoftmaxParameter*>(
      ::apollo::perception::inference::SoftmaxParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->spp_param_ = const_cast< ::apollo::perception::inference::SPPParameter*>(
      ::apollo::perception::inference::SPPParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->slice_param_ = const_cast< ::apollo::perception::inference::SliceParameter*>(
      ::apollo::perception::inference::SliceParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->tanh_param_ = const_cast< ::apollo::perception::inference::TanHParameter*>(
      ::apollo::perception::inference::TanHParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->threshold_param_ = const_cast< ::apollo::perception::inference::ThresholdParameter*>(
      ::apollo::perception::inference::ThresholdParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->tile_param_ = const_cast< ::apollo::perception::inference::TileParameter*>(
      ::apollo::perception::inference::TileParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->video_data_param_ = const_cast< ::apollo::perception::inference::VideoDataParameter*>(
      ::apollo::perception::inference::VideoDataParameter::internal_default_instance());
  ::apollo::perception::inference::_LayerParameter_default_instance_._instance.get_mutable()->window_data_param_ = const_cast< ::apollo::perception::inference::WindowDataParameter*>(
      ::apollo::perception::inference::WindowDataParameter::internal_default_instance());
}
class LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerParameter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::apollo::perception::inference::TransformationParameter& transform_param(const LayerParameter* msg);
  static void set_has_transform_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::LossParameter& loss_param(const LayerParameter* msg);
  static void set_has_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::AccuracyParameter& accuracy_param(const LayerParameter* msg);
  static void set_has_accuracy_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::AnnotatedDataParameter& annotated_data_param(const LayerParameter* msg);
  static void set_has_annotated_data_param(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::apollo::perception::inference::ArgMaxParameter& argmax_param(const LayerParameter* msg);
  static void set_has_argmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::BatchNormParameter& batch_norm_param(const LayerParameter* msg);
  static void set_has_batch_norm_param(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::apollo::perception::inference::BiasParameter& bias_param(const LayerParameter* msg);
  static void set_has_bias_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::apollo::perception::inference::ConcatParameter& concat_param(const LayerParameter* msg);
  static void set_has_concat_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param(const LayerParameter* msg);
  static void set_has_contrastive_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::perception::inference::ConvolutionParameter& convolution_param(const LayerParameter* msg);
  static void set_has_convolution_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::CropParameter& crop_param(const LayerParameter* msg);
  static void set_has_crop_param(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::apollo::perception::inference::DataParameter& data_param(const LayerParameter* msg);
  static void set_has_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::inference::DetectionEvaluateParameter& detection_evaluate_param(const LayerParameter* msg);
  static void set_has_detection_evaluate_param(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::apollo::perception::inference::DetectionOutputParameter& detection_output_param(const LayerParameter* msg);
  static void set_has_detection_output_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::apollo::perception::inference::DropoutParameter& dropout_param(const LayerParameter* msg);
  static void set_has_dropout_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::perception::inference::DummyDataParameter& dummy_data_param(const LayerParameter* msg);
  static void set_has_dummy_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::perception::inference::EltwiseParameter& eltwise_param(const LayerParameter* msg);
  static void set_has_eltwise_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::perception::inference::ELUParameter& elu_param(const LayerParameter* msg);
  static void set_has_elu_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::apollo::perception::inference::EmbedParameter& embed_param(const LayerParameter* msg);
  static void set_has_embed_param(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::apollo::perception::inference::ExpParameter& exp_param(const LayerParameter* msg);
  static void set_has_exp_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::perception::inference::FlattenParameter& flatten_param(const LayerParameter* msg);
  static void set_has_flatten_param(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param(const LayerParameter* msg);
  static void set_has_hdf5_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param(const LayerParameter* msg);
  static void set_has_hdf5_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param(const LayerParameter* msg);
  static void set_has_hinge_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::perception::inference::ImageDataParameter& image_data_param(const LayerParameter* msg);
  static void set_has_image_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param(const LayerParameter* msg);
  static void set_has_infogain_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::perception::inference::InnerProductParameter& inner_product_param(const LayerParameter* msg);
  static void set_has_inner_product_param(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::perception::inference::InputParameter& input_param(const LayerParameter* msg);
  static void set_has_input_param(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::apollo::perception::inference::LogParameter& log_param(const LayerParameter* msg);
  static void set_has_log_param(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::apollo::perception::inference::LRNParameter& lrn_param(const LayerParameter* msg);
  static void set_has_lrn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::inference::MemoryDataParameter& memory_data_param(const LayerParameter* msg);
  static void set_has_memory_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::perception::inference::MultiBoxLossParameter& multibox_loss_param(const LayerParameter* msg);
  static void set_has_multibox_loss_param(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::apollo::perception::inference::RegionParameter& region_param(const LayerParameter* msg);
  static void set_has_region_param(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::apollo::perception::inference::RegionOutputParameter& region_output_param(const LayerParameter* msg);
  static void set_has_region_output_param(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::apollo::perception::inference::RegionProposalParameter& region_proposal_param(const LayerParameter* msg);
  static void set_has_region_proposal_param(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::apollo::perception::inference::YoloTargetParameter& yolo_target_param(const LayerParameter* msg);
  static void set_has_yolo_target_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::apollo::perception::inference::YoloAnchorsParameter& yolo_anchors_param(const LayerParameter* msg);
  static void set_has_yolo_anchors_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::apollo::perception::inference::YoloLossParameter& yolo_loss_param(const LayerParameter* msg);
  static void set_has_yolo_loss_param(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::apollo::perception::inference::YoloDumpParameter& yolo_dump_param(const LayerParameter* msg);
  static void set_has_yolo_dump_param(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::apollo::perception::inference::PaddingParameter& padding_param(const LayerParameter* msg);
  static void set_has_padding_param(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::apollo::perception::inference::ReorgParameter& reorg_param(const LayerParameter* msg);
  static void set_has_reorg_param(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::apollo::perception::inference::MVNParameter& mvn_param(const LayerParameter* msg);
  static void set_has_mvn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::perception::inference::NormalizeParameter& norm_param(const LayerParameter* msg);
  static void set_has_norm_param(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::apollo::perception::inference::ParameterParameter& parameter_param(const LayerParameter* msg);
  static void set_has_parameter_param(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::apollo::perception::inference::PermuteParameter& permute_param(const LayerParameter* msg);
  static void set_has_permute_param(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::apollo::perception::inference::PoolingParameter& pooling_param(const LayerParameter* msg);
  static void set_has_pooling_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::perception::inference::PowerParameter& power_param(const LayerParameter* msg);
  static void set_has_power_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::perception::inference::PReLUParameter& prelu_param(const LayerParameter* msg);
  static void set_has_prelu_param(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::apollo::perception::inference::PriorBoxParameter& prior_box_param(const LayerParameter* msg);
  static void set_has_prior_box_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::apollo::perception::inference::PythonParameter& python_param(const LayerParameter* msg);
  static void set_has_python_param(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::apollo::perception::inference::RecurrentParameter& recurrent_param(const LayerParameter* msg);
  static void set_has_recurrent_param(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::apollo::perception::inference::ReductionParameter& reduction_param(const LayerParameter* msg);
  static void set_has_reduction_param(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::apollo::perception::inference::ReLUParameter& relu_param(const LayerParameter* msg);
  static void set_has_relu_param(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::perception::inference::ReshapeParameter& reshape_param(const LayerParameter* msg);
  static void set_has_reshape_param(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::apollo::perception::inference::ROIPoolingParameter& roi_pooling_param(const LayerParameter* msg);
  static void set_has_roi_pooling_param(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::apollo::perception::inference::ScaleParameter& scale_param(const LayerParameter* msg);
  static void set_has_scale_param(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::apollo::perception::inference::SigmoidParameter& sigmoid_param(const LayerParameter* msg);
  static void set_has_sigmoid_param(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::perception::inference::SoftmaxParameter& softmax_param(const LayerParameter* msg);
  static void set_has_softmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::perception::inference::SPPParameter& spp_param(const LayerParameter* msg);
  static void set_has_spp_param(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::apollo::perception::inference::SliceParameter& slice_param(const LayerParameter* msg);
  static void set_has_slice_param(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::perception::inference::TanHParameter& tanh_param(const LayerParameter* msg);
  static void set_has_tanh_param(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::perception::inference::ThresholdParameter& threshold_param(const LayerParameter* msg);
  static void set_has_threshold_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::perception::inference::TileParameter& tile_param(const LayerParameter* msg);
  static void set_has_tile_param(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::apollo::perception::inference::VideoDataParameter& video_data_param(const LayerParameter* msg);
  static void set_has_video_data_param(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::apollo::perception::inference::WindowDataParameter& window_data_param(const LayerParameter* msg);
  static void set_has_window_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
};

const ::apollo::perception::inference::TransformationParameter&
LayerParameter::_Internal::transform_param(const LayerParameter* msg) {
  return *msg->transform_param_;
}
const ::apollo::perception::inference::LossParameter&
LayerParameter::_Internal::loss_param(const LayerParameter* msg) {
  return *msg->loss_param_;
}
const ::apollo::perception::inference::AccuracyParameter&
LayerParameter::_Internal::accuracy_param(const LayerParameter* msg) {
  return *msg->accuracy_param_;
}
const ::apollo::perception::inference::AnnotatedDataParameter&
LayerParameter::_Internal::annotated_data_param(const LayerParameter* msg) {
  return *msg->annotated_data_param_;
}
const ::apollo::perception::inference::ArgMaxParameter&
LayerParameter::_Internal::argmax_param(const LayerParameter* msg) {
  return *msg->argmax_param_;
}
const ::apollo::perception::inference::BatchNormParameter&
LayerParameter::_Internal::batch_norm_param(const LayerParameter* msg) {
  return *msg->batch_norm_param_;
}
const ::apollo::perception::inference::BiasParameter&
LayerParameter::_Internal::bias_param(const LayerParameter* msg) {
  return *msg->bias_param_;
}
const ::apollo::perception::inference::ConcatParameter&
LayerParameter::_Internal::concat_param(const LayerParameter* msg) {
  return *msg->concat_param_;
}
const ::apollo::perception::inference::ContrastiveLossParameter&
LayerParameter::_Internal::contrastive_loss_param(const LayerParameter* msg) {
  return *msg->contrastive_loss_param_;
}
const ::apollo::perception::inference::ConvolutionParameter&
LayerParameter::_Internal::convolution_param(const LayerParameter* msg) {
  return *msg->convolution_param_;
}
const ::apollo::perception::inference::CropParameter&
LayerParameter::_Internal::crop_param(const LayerParameter* msg) {
  return *msg->crop_param_;
}
const ::apollo::perception::inference::DataParameter&
LayerParameter::_Internal::data_param(const LayerParameter* msg) {
  return *msg->data_param_;
}
const ::apollo::perception::inference::DetectionEvaluateParameter&
LayerParameter::_Internal::detection_evaluate_param(const LayerParameter* msg) {
  return *msg->detection_evaluate_param_;
}
const ::apollo::perception::inference::DetectionOutputParameter&
LayerParameter::_Internal::detection_output_param(const LayerParameter* msg) {
  return *msg->detection_output_param_;
}
const ::apollo::perception::inference::DropoutParameter&
LayerParameter::_Internal::dropout_param(const LayerParameter* msg) {
  return *msg->dropout_param_;
}
const ::apollo::perception::inference::DummyDataParameter&
LayerParameter::_Internal::dummy_data_param(const LayerParameter* msg) {
  return *msg->dummy_data_param_;
}
const ::apollo::perception::inference::EltwiseParameter&
LayerParameter::_Internal::eltwise_param(const LayerParameter* msg) {
  return *msg->eltwise_param_;
}
const ::apollo::perception::inference::ELUParameter&
LayerParameter::_Internal::elu_param(const LayerParameter* msg) {
  return *msg->elu_param_;
}
const ::apollo::perception::inference::EmbedParameter&
LayerParameter::_Internal::embed_param(const LayerParameter* msg) {
  return *msg->embed_param_;
}
const ::apollo::perception::inference::ExpParameter&
LayerParameter::_Internal::exp_param(const LayerParameter* msg) {
  return *msg->exp_param_;
}
const ::apollo::perception::inference::FlattenParameter&
LayerParameter::_Internal::flatten_param(const LayerParameter* msg) {
  return *msg->flatten_param_;
}
const ::apollo::perception::inference::HDF5DataParameter&
LayerParameter::_Internal::hdf5_data_param(const LayerParameter* msg) {
  return *msg->hdf5_data_param_;
}
const ::apollo::perception::inference::HDF5OutputParameter&
LayerParameter::_Internal::hdf5_output_param(const LayerParameter* msg) {
  return *msg->hdf5_output_param_;
}
const ::apollo::perception::inference::HingeLossParameter&
LayerParameter::_Internal::hinge_loss_param(const LayerParameter* msg) {
  return *msg->hinge_loss_param_;
}
const ::apollo::perception::inference::ImageDataParameter&
LayerParameter::_Internal::image_data_param(const LayerParameter* msg) {
  return *msg->image_data_param_;
}
const ::apollo::perception::inference::InfogainLossParameter&
LayerParameter::_Internal::infogain_loss_param(const LayerParameter* msg) {
  return *msg->infogain_loss_param_;
}
const ::apollo::perception::inference::InnerProductParameter&
LayerParameter::_Internal::inner_product_param(const LayerParameter* msg) {
  return *msg->inner_product_param_;
}
const ::apollo::perception::inference::InputParameter&
LayerParameter::_Internal::input_param(const LayerParameter* msg) {
  return *msg->input_param_;
}
const ::apollo::perception::inference::LogParameter&
LayerParameter::_Internal::log_param(const LayerParameter* msg) {
  return *msg->log_param_;
}
const ::apollo::perception::inference::LRNParameter&
LayerParameter::_Internal::lrn_param(const LayerParameter* msg) {
  return *msg->lrn_param_;
}
const ::apollo::perception::inference::MemoryDataParameter&
LayerParameter::_Internal::memory_data_param(const LayerParameter* msg) {
  return *msg->memory_data_param_;
}
const ::apollo::perception::inference::MultiBoxLossParameter&
LayerParameter::_Internal::multibox_loss_param(const LayerParameter* msg) {
  return *msg->multibox_loss_param_;
}
const ::apollo::perception::inference::RegionParameter&
LayerParameter::_Internal::region_param(const LayerParameter* msg) {
  return *msg->region_param_;
}
const ::apollo::perception::inference::RegionOutputParameter&
LayerParameter::_Internal::region_output_param(const LayerParameter* msg) {
  return *msg->region_output_param_;
}
const ::apollo::perception::inference::RegionProposalParameter&
LayerParameter::_Internal::region_proposal_param(const LayerParameter* msg) {
  return *msg->region_proposal_param_;
}
const ::apollo::perception::inference::YoloTargetParameter&
LayerParameter::_Internal::yolo_target_param(const LayerParameter* msg) {
  return *msg->yolo_target_param_;
}
const ::apollo::perception::inference::YoloAnchorsParameter&
LayerParameter::_Internal::yolo_anchors_param(const LayerParameter* msg) {
  return *msg->yolo_anchors_param_;
}
const ::apollo::perception::inference::YoloLossParameter&
LayerParameter::_Internal::yolo_loss_param(const LayerParameter* msg) {
  return *msg->yolo_loss_param_;
}
const ::apollo::perception::inference::YoloDumpParameter&
LayerParameter::_Internal::yolo_dump_param(const LayerParameter* msg) {
  return *msg->yolo_dump_param_;
}
const ::apollo::perception::inference::PaddingParameter&
LayerParameter::_Internal::padding_param(const LayerParameter* msg) {
  return *msg->padding_param_;
}
const ::apollo::perception::inference::ReorgParameter&
LayerParameter::_Internal::reorg_param(const LayerParameter* msg) {
  return *msg->reorg_param_;
}
const ::apollo::perception::inference::MVNParameter&
LayerParameter::_Internal::mvn_param(const LayerParameter* msg) {
  return *msg->mvn_param_;
}
const ::apollo::perception::inference::NormalizeParameter&
LayerParameter::_Internal::norm_param(const LayerParameter* msg) {
  return *msg->norm_param_;
}
const ::apollo::perception::inference::ParameterParameter&
LayerParameter::_Internal::parameter_param(const LayerParameter* msg) {
  return *msg->parameter_param_;
}
const ::apollo::perception::inference::PermuteParameter&
LayerParameter::_Internal::permute_param(const LayerParameter* msg) {
  return *msg->permute_param_;
}
const ::apollo::perception::inference::PoolingParameter&
LayerParameter::_Internal::pooling_param(const LayerParameter* msg) {
  return *msg->pooling_param_;
}
const ::apollo::perception::inference::PowerParameter&
LayerParameter::_Internal::power_param(const LayerParameter* msg) {
  return *msg->power_param_;
}
const ::apollo::perception::inference::PReLUParameter&
LayerParameter::_Internal::prelu_param(const LayerParameter* msg) {
  return *msg->prelu_param_;
}
const ::apollo::perception::inference::PriorBoxParameter&
LayerParameter::_Internal::prior_box_param(const LayerParameter* msg) {
  return *msg->prior_box_param_;
}
const ::apollo::perception::inference::PythonParameter&
LayerParameter::_Internal::python_param(const LayerParameter* msg) {
  return *msg->python_param_;
}
const ::apollo::perception::inference::RecurrentParameter&
LayerParameter::_Internal::recurrent_param(const LayerParameter* msg) {
  return *msg->recurrent_param_;
}
const ::apollo::perception::inference::ReductionParameter&
LayerParameter::_Internal::reduction_param(const LayerParameter* msg) {
  return *msg->reduction_param_;
}
const ::apollo::perception::inference::ReLUParameter&
LayerParameter::_Internal::relu_param(const LayerParameter* msg) {
  return *msg->relu_param_;
}
const ::apollo::perception::inference::ReshapeParameter&
LayerParameter::_Internal::reshape_param(const LayerParameter* msg) {
  return *msg->reshape_param_;
}
const ::apollo::perception::inference::ROIPoolingParameter&
LayerParameter::_Internal::roi_pooling_param(const LayerParameter* msg) {
  return *msg->roi_pooling_param_;
}
const ::apollo::perception::inference::ScaleParameter&
LayerParameter::_Internal::scale_param(const LayerParameter* msg) {
  return *msg->scale_param_;
}
const ::apollo::perception::inference::SigmoidParameter&
LayerParameter::_Internal::sigmoid_param(const LayerParameter* msg) {
  return *msg->sigmoid_param_;
}
const ::apollo::perception::inference::SoftmaxParameter&
LayerParameter::_Internal::softmax_param(const LayerParameter* msg) {
  return *msg->softmax_param_;
}
const ::apollo::perception::inference::SPPParameter&
LayerParameter::_Internal::spp_param(const LayerParameter* msg) {
  return *msg->spp_param_;
}
const ::apollo::perception::inference::SliceParameter&
LayerParameter::_Internal::slice_param(const LayerParameter* msg) {
  return *msg->slice_param_;
}
const ::apollo::perception::inference::TanHParameter&
LayerParameter::_Internal::tanh_param(const LayerParameter* msg) {
  return *msg->tanh_param_;
}
const ::apollo::perception::inference::ThresholdParameter&
LayerParameter::_Internal::threshold_param(const LayerParameter* msg) {
  return *msg->threshold_param_;
}
const ::apollo::perception::inference::TileParameter&
LayerParameter::_Internal::tile_param(const LayerParameter* msg) {
  return *msg->tile_param_;
}
const ::apollo::perception::inference::VideoDataParameter&
LayerParameter::_Internal::video_data_param(const LayerParameter* msg) {
  return *msg->video_data_param_;
}
const ::apollo::perception::inference::WindowDataParameter&
LayerParameter::_Internal::window_data_param(const LayerParameter* msg) {
  return *msg->window_data_param_;
}
LayerParameter::LayerParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bottom_(from.bottom_),
      top_(from.top_),
      loss_weight_(from.loss_weight_),
      param_(from.param_),
      blobs_(from.blobs_),
      include_(from.include_),
      exclude_(from.exclude_),
      propagate_down_(from.propagate_down_),
      yolo_data_param_(from.yolo_data_param_),
      data_prob_param_(from.data_prob_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from._internal_has_transform_param()) {
    transform_param_ = new ::apollo::perception::inference::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = nullptr;
  }
  if (from._internal_has_loss_param()) {
    loss_param_ = new ::apollo::perception::inference::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = nullptr;
  }
  if (from._internal_has_accuracy_param()) {
    accuracy_param_ = new ::apollo::perception::inference::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = nullptr;
  }
  if (from._internal_has_argmax_param()) {
    argmax_param_ = new ::apollo::perception::inference::ArgMaxParameter(*from.argmax_param_);
  } else {
    argmax_param_ = nullptr;
  }
  if (from._internal_has_concat_param()) {
    concat_param_ = new ::apollo::perception::inference::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = nullptr;
  }
  if (from._internal_has_contrastive_loss_param()) {
    contrastive_loss_param_ = new ::apollo::perception::inference::ContrastiveLossParameter(*from.contrastive_loss_param_);
  } else {
    contrastive_loss_param_ = nullptr;
  }
  if (from._internal_has_convolution_param()) {
    convolution_param_ = new ::apollo::perception::inference::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = nullptr;
  }
  if (from._internal_has_data_param()) {
    data_param_ = new ::apollo::perception::inference::DataParameter(*from.data_param_);
  } else {
    data_param_ = nullptr;
  }
  if (from._internal_has_dropout_param()) {
    dropout_param_ = new ::apollo::perception::inference::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = nullptr;
  }
  if (from._internal_has_dummy_data_param()) {
    dummy_data_param_ = new ::apollo::perception::inference::DummyDataParameter(*from.dummy_data_param_);
  } else {
    dummy_data_param_ = nullptr;
  }
  if (from._internal_has_eltwise_param()) {
    eltwise_param_ = new ::apollo::perception::inference::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = nullptr;
  }
  if (from._internal_has_exp_param()) {
    exp_param_ = new ::apollo::perception::inference::ExpParameter(*from.exp_param_);
  } else {
    exp_param_ = nullptr;
  }
  if (from._internal_has_hdf5_data_param()) {
    hdf5_data_param_ = new ::apollo::perception::inference::HDF5DataParameter(*from.hdf5_data_param_);
  } else {
    hdf5_data_param_ = nullptr;
  }
  if (from._internal_has_hdf5_output_param()) {
    hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = nullptr;
  }
  if (from._internal_has_hinge_loss_param()) {
    hinge_loss_param_ = new ::apollo::perception::inference::HingeLossParameter(*from.hinge_loss_param_);
  } else {
    hinge_loss_param_ = nullptr;
  }
  if (from._internal_has_image_data_param()) {
    image_data_param_ = new ::apollo::perception::inference::ImageDataParameter(*from.image_data_param_);
  } else {
    image_data_param_ = nullptr;
  }
  if (from._internal_has_infogain_loss_param()) {
    infogain_loss_param_ = new ::apollo::perception::inference::InfogainLossParameter(*from.infogain_loss_param_);
  } else {
    infogain_loss_param_ = nullptr;
  }
  if (from._internal_has_inner_product_param()) {
    inner_product_param_ = new ::apollo::perception::inference::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = nullptr;
  }
  if (from._internal_has_lrn_param()) {
    lrn_param_ = new ::apollo::perception::inference::LRNParameter(*from.lrn_param_);
  } else {
    lrn_param_ = nullptr;
  }
  if (from._internal_has_memory_data_param()) {
    memory_data_param_ = new ::apollo::perception::inference::MemoryDataParameter(*from.memory_data_param_);
  } else {
    memory_data_param_ = nullptr;
  }
  if (from._internal_has_mvn_param()) {
    mvn_param_ = new ::apollo::perception::inference::MVNParameter(*from.mvn_param_);
  } else {
    mvn_param_ = nullptr;
  }
  if (from._internal_has_pooling_param()) {
    pooling_param_ = new ::apollo::perception::inference::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = nullptr;
  }
  if (from._internal_has_power_param()) {
    power_param_ = new ::apollo::perception::inference::PowerParameter(*from.power_param_);
  } else {
    power_param_ = nullptr;
  }
  if (from._internal_has_relu_param()) {
    relu_param_ = new ::apollo::perception::inference::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = nullptr;
  }
  if (from._internal_has_sigmoid_param()) {
    sigmoid_param_ = new ::apollo::perception::inference::SigmoidParameter(*from.sigmoid_param_);
  } else {
    sigmoid_param_ = nullptr;
  }
  if (from._internal_has_softmax_param()) {
    softmax_param_ = new ::apollo::perception::inference::SoftmaxParameter(*from.softmax_param_);
  } else {
    softmax_param_ = nullptr;
  }
  if (from._internal_has_slice_param()) {
    slice_param_ = new ::apollo::perception::inference::SliceParameter(*from.slice_param_);
  } else {
    slice_param_ = nullptr;
  }
  if (from._internal_has_tanh_param()) {
    tanh_param_ = new ::apollo::perception::inference::TanHParameter(*from.tanh_param_);
  } else {
    tanh_param_ = nullptr;
  }
  if (from._internal_has_threshold_param()) {
    threshold_param_ = new ::apollo::perception::inference::ThresholdParameter(*from.threshold_param_);
  } else {
    threshold_param_ = nullptr;
  }
  if (from._internal_has_window_data_param()) {
    window_data_param_ = new ::apollo::perception::inference::WindowDataParameter(*from.window_data_param_);
  } else {
    window_data_param_ = nullptr;
  }
  if (from._internal_has_python_param()) {
    python_param_ = new ::apollo::perception::inference::PythonParameter(*from.python_param_);
  } else {
    python_param_ = nullptr;
  }
  if (from._internal_has_prelu_param()) {
    prelu_param_ = new ::apollo::perception::inference::PReLUParameter(*from.prelu_param_);
  } else {
    prelu_param_ = nullptr;
  }
  if (from._internal_has_spp_param()) {
    spp_param_ = new ::apollo::perception::inference::SPPParameter(*from.spp_param_);
  } else {
    spp_param_ = nullptr;
  }
  if (from._internal_has_reshape_param()) {
    reshape_param_ = new ::apollo::perception::inference::ReshapeParameter(*from.reshape_param_);
  } else {
    reshape_param_ = nullptr;
  }
  if (from._internal_has_log_param()) {
    log_param_ = new ::apollo::perception::inference::LogParameter(*from.log_param_);
  } else {
    log_param_ = nullptr;
  }
  if (from._internal_has_flatten_param()) {
    flatten_param_ = new ::apollo::perception::inference::FlattenParameter(*from.flatten_param_);
  } else {
    flatten_param_ = nullptr;
  }
  if (from._internal_has_reduction_param()) {
    reduction_param_ = new ::apollo::perception::inference::ReductionParameter(*from.reduction_param_);
  } else {
    reduction_param_ = nullptr;
  }
  if (from._internal_has_embed_param()) {
    embed_param_ = new ::apollo::perception::inference::EmbedParameter(*from.embed_param_);
  } else {
    embed_param_ = nullptr;
  }
  if (from._internal_has_tile_param()) {
    tile_param_ = new ::apollo::perception::inference::TileParameter(*from.tile_param_);
  } else {
    tile_param_ = nullptr;
  }
  if (from._internal_has_batch_norm_param()) {
    batch_norm_param_ = new ::apollo::perception::inference::BatchNormParameter(*from.batch_norm_param_);
  } else {
    batch_norm_param_ = nullptr;
  }
  if (from._internal_has_elu_param()) {
    elu_param_ = new ::apollo::perception::inference::ELUParameter(*from.elu_param_);
  } else {
    elu_param_ = nullptr;
  }
  if (from._internal_has_bias_param()) {
    bias_param_ = new ::apollo::perception::inference::BiasParameter(*from.bias_param_);
  } else {
    bias_param_ = nullptr;
  }
  if (from._internal_has_scale_param()) {
    scale_param_ = new ::apollo::perception::inference::ScaleParameter(*from.scale_param_);
  } else {
    scale_param_ = nullptr;
  }
  if (from._internal_has_input_param()) {
    input_param_ = new ::apollo::perception::inference::InputParameter(*from.input_param_);
  } else {
    input_param_ = nullptr;
  }
  if (from._internal_has_crop_param()) {
    crop_param_ = new ::apollo::perception::inference::CropParameter(*from.crop_param_);
  } else {
    crop_param_ = nullptr;
  }
  if (from._internal_has_parameter_param()) {
    parameter_param_ = new ::apollo::perception::inference::ParameterParameter(*from.parameter_param_);
  } else {
    parameter_param_ = nullptr;
  }
  if (from._internal_has_recurrent_param()) {
    recurrent_param_ = new ::apollo::perception::inference::RecurrentParameter(*from.recurrent_param_);
  } else {
    recurrent_param_ = nullptr;
  }
  if (from._internal_has_annotated_data_param()) {
    annotated_data_param_ = new ::apollo::perception::inference::AnnotatedDataParameter(*from.annotated_data_param_);
  } else {
    annotated_data_param_ = nullptr;
  }
  if (from._internal_has_multibox_loss_param()) {
    multibox_loss_param_ = new ::apollo::perception::inference::MultiBoxLossParameter(*from.multibox_loss_param_);
  } else {
    multibox_loss_param_ = nullptr;
  }
  if (from._internal_has_permute_param()) {
    permute_param_ = new ::apollo::perception::inference::PermuteParameter(*from.permute_param_);
  } else {
    permute_param_ = nullptr;
  }
  if (from._internal_has_prior_box_param()) {
    prior_box_param_ = new ::apollo::perception::inference::PriorBoxParameter(*from.prior_box_param_);
  } else {
    prior_box_param_ = nullptr;
  }
  if (from._internal_has_detection_output_param()) {
    detection_output_param_ = new ::apollo::perception::inference::DetectionOutputParameter(*from.detection_output_param_);
  } else {
    detection_output_param_ = nullptr;
  }
  if (from._internal_has_detection_evaluate_param()) {
    detection_evaluate_param_ = new ::apollo::perception::inference::DetectionEvaluateParameter(*from.detection_evaluate_param_);
  } else {
    detection_evaluate_param_ = nullptr;
  }
  if (from._internal_has_norm_param()) {
    norm_param_ = new ::apollo::perception::inference::NormalizeParameter(*from.norm_param_);
  } else {
    norm_param_ = nullptr;
  }
  if (from._internal_has_video_data_param()) {
    video_data_param_ = new ::apollo::perception::inference::VideoDataParameter(*from.video_data_param_);
  } else {
    video_data_param_ = nullptr;
  }
  if (from._internal_has_region_param()) {
    region_param_ = new ::apollo::perception::inference::RegionParameter(*from.region_param_);
  } else {
    region_param_ = nullptr;
  }
  if (from._internal_has_reorg_param()) {
    reorg_param_ = new ::apollo::perception::inference::ReorgParameter(*from.reorg_param_);
  } else {
    reorg_param_ = nullptr;
  }
  if (from._internal_has_region_output_param()) {
    region_output_param_ = new ::apollo::perception::inference::RegionOutputParameter(*from.region_output_param_);
  } else {
    region_output_param_ = nullptr;
  }
  if (from._internal_has_region_proposal_param()) {
    region_proposal_param_ = new ::apollo::perception::inference::RegionProposalParameter(*from.region_proposal_param_);
  } else {
    region_proposal_param_ = nullptr;
  }
  if (from._internal_has_padding_param()) {
    padding_param_ = new ::apollo::perception::inference::PaddingParameter(*from.padding_param_);
  } else {
    padding_param_ = nullptr;
  }
  if (from._internal_has_yolo_target_param()) {
    yolo_target_param_ = new ::apollo::perception::inference::YoloTargetParameter(*from.yolo_target_param_);
  } else {
    yolo_target_param_ = nullptr;
  }
  if (from._internal_has_yolo_anchors_param()) {
    yolo_anchors_param_ = new ::apollo::perception::inference::YoloAnchorsParameter(*from.yolo_anchors_param_);
  } else {
    yolo_anchors_param_ = nullptr;
  }
  if (from._internal_has_yolo_loss_param()) {
    yolo_loss_param_ = new ::apollo::perception::inference::YoloLossParameter(*from.yolo_loss_param_);
  } else {
    yolo_loss_param_ = nullptr;
  }
  if (from._internal_has_yolo_dump_param()) {
    yolo_dump_param_ = new ::apollo::perception::inference::YoloDumpParameter(*from.yolo_dump_param_);
  } else {
    yolo_dump_param_ = nullptr;
  }
  if (from._internal_has_roi_pooling_param()) {
    roi_pooling_param_ = new ::apollo::perception::inference::ROIPoolingParameter(*from.roi_pooling_param_);
  } else {
    roi_pooling_param_ = nullptr;
  }
  phase_ = from.phase_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LayerParameter)
}

void LayerParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transform_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&transform_param_)) + sizeof(phase_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transform_param_;
  if (this != internal_default_instance()) delete loss_param_;
  if (this != internal_default_instance()) delete accuracy_param_;
  if (this != internal_default_instance()) delete argmax_param_;
  if (this != internal_default_instance()) delete concat_param_;
  if (this != internal_default_instance()) delete contrastive_loss_param_;
  if (this != internal_default_instance()) delete convolution_param_;
  if (this != internal_default_instance()) delete data_param_;
  if (this != internal_default_instance()) delete dropout_param_;
  if (this != internal_default_instance()) delete dummy_data_param_;
  if (this != internal_default_instance()) delete eltwise_param_;
  if (this != internal_default_instance()) delete exp_param_;
  if (this != internal_default_instance()) delete hdf5_data_param_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
  if (this != internal_default_instance()) delete hinge_loss_param_;
  if (this != internal_default_instance()) delete image_data_param_;
  if (this != internal_default_instance()) delete infogain_loss_param_;
  if (this != internal_default_instance()) delete inner_product_param_;
  if (this != internal_default_instance()) delete lrn_param_;
  if (this != internal_default_instance()) delete memory_data_param_;
  if (this != internal_default_instance()) delete mvn_param_;
  if (this != internal_default_instance()) delete pooling_param_;
  if (this != internal_default_instance()) delete power_param_;
  if (this != internal_default_instance()) delete relu_param_;
  if (this != internal_default_instance()) delete sigmoid_param_;
  if (this != internal_default_instance()) delete softmax_param_;
  if (this != internal_default_instance()) delete slice_param_;
  if (this != internal_default_instance()) delete tanh_param_;
  if (this != internal_default_instance()) delete threshold_param_;
  if (this != internal_default_instance()) delete window_data_param_;
  if (this != internal_default_instance()) delete python_param_;
  if (this != internal_default_instance()) delete prelu_param_;
  if (this != internal_default_instance()) delete spp_param_;
  if (this != internal_default_instance()) delete reshape_param_;
  if (this != internal_default_instance()) delete log_param_;
  if (this != internal_default_instance()) delete flatten_param_;
  if (this != internal_default_instance()) delete reduction_param_;
  if (this != internal_default_instance()) delete embed_param_;
  if (this != internal_default_instance()) delete tile_param_;
  if (this != internal_default_instance()) delete batch_norm_param_;
  if (this != internal_default_instance()) delete elu_param_;
  if (this != internal_default_instance()) delete bias_param_;
  if (this != internal_default_instance()) delete scale_param_;
  if (this != internal_default_instance()) delete input_param_;
  if (this != internal_default_instance()) delete crop_param_;
  if (this != internal_default_instance()) delete parameter_param_;
  if (this != internal_default_instance()) delete recurrent_param_;
  if (this != internal_default_instance()) delete annotated_data_param_;
  if (this != internal_default_instance()) delete multibox_loss_param_;
  if (this != internal_default_instance()) delete permute_param_;
  if (this != internal_default_instance()) delete prior_box_param_;
  if (this != internal_default_instance()) delete detection_output_param_;
  if (this != internal_default_instance()) delete detection_evaluate_param_;
  if (this != internal_default_instance()) delete norm_param_;
  if (this != internal_default_instance()) delete video_data_param_;
  if (this != internal_default_instance()) delete region_param_;
  if (this != internal_default_instance()) delete reorg_param_;
  if (this != internal_default_instance()) delete region_output_param_;
  if (this != internal_default_instance()) delete region_proposal_param_;
  if (this != internal_default_instance()) delete padding_param_;
  if (this != internal_default_instance()) delete yolo_target_param_;
  if (this != internal_default_instance()) delete yolo_anchors_param_;
  if (this != internal_default_instance()) delete yolo_loss_param_;
  if (this != internal_default_instance()) delete yolo_dump_param_;
  if (this != internal_default_instance()) delete roi_pooling_param_;
}

void LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerParameter& LayerParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottom_.Clear();
  top_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blobs_.Clear();
  include_.Clear();
  exclude_.Clear();
  propagate_down_.Clear();
  yolo_data_param_.Clear();
  data_prob_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transform_param_ != nullptr);
      transform_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(loss_param_ != nullptr);
      loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(accuracy_param_ != nullptr);
      accuracy_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(argmax_param_ != nullptr);
      argmax_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(concat_param_ != nullptr);
      concat_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(contrastive_loss_param_ != nullptr);
      contrastive_loss_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(convolution_param_ != nullptr);
      convolution_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(data_param_ != nullptr);
      data_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(dropout_param_ != nullptr);
      dropout_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(dummy_data_param_ != nullptr);
      dummy_data_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(eltwise_param_ != nullptr);
      eltwise_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(exp_param_ != nullptr);
      exp_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(hdf5_data_param_ != nullptr);
      hdf5_data_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(hdf5_output_param_ != nullptr);
      hdf5_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(hinge_loss_param_ != nullptr);
      hinge_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(image_data_param_ != nullptr);
      image_data_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(infogain_loss_param_ != nullptr);
      infogain_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(inner_product_param_ != nullptr);
      inner_product_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(lrn_param_ != nullptr);
      lrn_param_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(memory_data_param_ != nullptr);
      memory_data_param_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(mvn_param_ != nullptr);
      mvn_param_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(pooling_param_ != nullptr);
      pooling_param_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(power_param_ != nullptr);
      power_param_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(relu_param_ != nullptr);
      relu_param_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(sigmoid_param_ != nullptr);
      sigmoid_param_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(softmax_param_ != nullptr);
      softmax_param_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(slice_param_ != nullptr);
      slice_param_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(tanh_param_ != nullptr);
      tanh_param_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(threshold_param_ != nullptr);
      threshold_param_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(window_data_param_ != nullptr);
      window_data_param_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(python_param_ != nullptr);
      python_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prelu_param_ != nullptr);
      prelu_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spp_param_ != nullptr);
      spp_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reshape_param_ != nullptr);
      reshape_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(log_param_ != nullptr);
      log_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(flatten_param_ != nullptr);
      flatten_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reduction_param_ != nullptr);
      reduction_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(embed_param_ != nullptr);
      embed_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(tile_param_ != nullptr);
      tile_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(batch_norm_param_ != nullptr);
      batch_norm_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(elu_param_ != nullptr);
      elu_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(bias_param_ != nullptr);
      bias_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(scale_param_ != nullptr);
      scale_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(input_param_ != nullptr);
      input_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(crop_param_ != nullptr);
      crop_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(parameter_param_ != nullptr);
      parameter_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(recurrent_param_ != nullptr);
      recurrent_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(annotated_data_param_ != nullptr);
      annotated_data_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(multibox_loss_param_ != nullptr);
      multibox_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(permute_param_ != nullptr);
      permute_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(prior_box_param_ != nullptr);
      prior_box_param_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(detection_output_param_ != nullptr);
      detection_output_param_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(detection_evaluate_param_ != nullptr);
      detection_evaluate_param_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(norm_param_ != nullptr);
      norm_param_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(video_data_param_ != nullptr);
      video_data_param_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(region_param_ != nullptr);
      region_param_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(reorg_param_ != nullptr);
      reorg_param_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(region_output_param_ != nullptr);
      region_output_param_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(region_proposal_param_ != nullptr);
      region_proposal_param_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(padding_param_ != nullptr);
      padding_param_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(yolo_target_param_ != nullptr);
      yolo_target_param_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(yolo_anchors_param_ != nullptr);
      yolo_anchors_param_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(yolo_loss_param_ != nullptr);
      yolo_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(yolo_dump_param_ != nullptr);
      yolo_dump_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(roi_pooling_param_ != nullptr);
      roi_pooling_param_->Clear();
    }
  }
  phase_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string bottom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bottom();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.bottom");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_top();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.LayerParameter.top");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float loss_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_loss_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_loss_weight(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.ParamSpec param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto blobs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule include = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_include(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule exclude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exclude(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.Phase phase = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::Phase_IsValid(val))) {
            _internal_set_phase(static_cast<::apollo::perception::inference::Phase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bool propagate_down = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_propagate_down(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_propagate_down(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LossParameter loss_param = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_accuracy_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_argmax_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_contrastive_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_convolution_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DataParameter data_param = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropout_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dummy_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_eltwise_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ExpParameter exp_param = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_hinge_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_infogain_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_product_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_lrn_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvn_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pooling_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PowerParameter power_param = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_relu_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigmoid_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_softmax_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SliceParameter slice_param = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tanh_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PythonParameter python_param = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_python_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prelu_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SPPParameter spp_param = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spp_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reshape_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LogParameter log_param = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reduction_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_embed_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TileParameter tile_param = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_norm_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ELUParameter elu_param = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_elu_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.BiasParameter bias_param = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InputParameter input_param = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.CropParameter crop_param = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_crop_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameter_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotated_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_multibox_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_permute_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_prior_box_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_evaluate_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_norm_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RegionParameter region_param = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reorg_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_proposal_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
      case 204801:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_target_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
      case 204802:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_anchors_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
      case 204803:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
      case 204804:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_yolo_dump_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
      case 1707111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_add_yolo_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data_prob_param = 1707112;
      case 1707112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _internal_add_data_prob_param(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_prob_param(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
      case 8266711:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_pooling_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayerParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0, n = this->_internal_bottom_size(); i < n; i++) {
    const auto& s = this->_internal_bottom(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.bottom");
    target = stream->WriteString(3, s, target);
  }

  // repeated string top = 4;
  for (int i = 0, n = this->_internal_top_size(); i < n; i++) {
    const auto& s = this->_internal_top(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.LayerParameter.top");
    target = stream->WriteString(4, s, target);
  }

  // repeated float loss_weight = 5;
  for (int i = 0, n = this->_internal_loss_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_loss_weight(i), target);
  }

  // repeated .apollo.perception.inference.ParamSpec param = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_param(i), target, stream);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_blobs(i), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule include = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_include_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_include(i), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exclude_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_exclude(i), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional .apollo.perception.inference.Phase phase = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_phase(), target);
  }

  // repeated bool propagate_down = 11;
  for (int i = 0, n = this->_internal_propagate_down_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_propagate_down(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::transform_param(this), target, stream);
  }

  // optional .apollo.perception.inference.LossParameter loss_param = 101;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::accuracy_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::argmax_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::concat_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::contrastive_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::convolution_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DataParameter data_param = 107;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        108, _Internal::dropout_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        109, _Internal::dummy_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        110, _Internal::eltwise_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ExpParameter exp_param = 111;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        111, _Internal::exp_param(this), target, stream);
  }

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        112, _Internal::hdf5_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        113, _Internal::hdf5_output_param(this), target, stream);
  }

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        114, _Internal::hinge_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        115, _Internal::image_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        116, _Internal::infogain_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        117, _Internal::inner_product_param(this), target, stream);
  }

  // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        118, _Internal::lrn_param(this), target, stream);
  }

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        119, _Internal::memory_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        120, _Internal::mvn_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        121, _Internal::pooling_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PowerParameter power_param = 122;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        122, _Internal::power_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        123, _Internal::relu_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        124, _Internal::sigmoid_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        125, _Internal::softmax_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SliceParameter slice_param = 126;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        126, _Internal::slice_param(this), target, stream);
  }

  // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        127, _Internal::tanh_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        128, _Internal::threshold_param(this), target, stream);
  }

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        129, _Internal::window_data_param(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .apollo.perception.inference.PythonParameter python_param = 130;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        130, _Internal::python_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        131, _Internal::prelu_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SPPParameter spp_param = 132;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        132, _Internal::spp_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        133, _Internal::reshape_param(this), target, stream);
  }

  // optional .apollo.perception.inference.LogParameter log_param = 134;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        134, _Internal::log_param(this), target, stream);
  }

  // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        135, _Internal::flatten_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        136, _Internal::reduction_param(this), target, stream);
  }

  // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        137, _Internal::embed_param(this), target, stream);
  }

  // optional .apollo.perception.inference.TileParameter tile_param = 138;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        138, _Internal::tile_param(this), target, stream);
  }

  // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        139, _Internal::batch_norm_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ELUParameter elu_param = 140;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        140, _Internal::elu_param(this), target, stream);
  }

  // optional .apollo.perception.inference.BiasParameter bias_param = 141;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        141, _Internal::bias_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        142, _Internal::scale_param(this), target, stream);
  }

  // optional .apollo.perception.inference.InputParameter input_param = 143;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        143, _Internal::input_param(this), target, stream);
  }

  // optional .apollo.perception.inference.CropParameter crop_param = 144;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        144, _Internal::crop_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        145, _Internal::parameter_param(this), target, stream);
  }

  // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        146, _Internal::recurrent_param(this), target, stream);
  }

  // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        200, _Internal::annotated_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        201, _Internal::multibox_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        202, _Internal::permute_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        203, _Internal::prior_box_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204, _Internal::detection_output_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        205, _Internal::detection_evaluate_param(this), target, stream);
  }

  // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        206, _Internal::norm_param(this), target, stream);
  }

  // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        207, _Internal::video_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.RegionParameter region_param = 300;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        300, _Internal::region_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::reorg_param(this), target, stream);
  }

  // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        310, _Internal::region_output_param(this), target, stream);
  }

  // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        320, _Internal::region_proposal_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::padding_param(this), target, stream);
  }

  // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204801, _Internal::yolo_target_param(this), target, stream);
  }

  // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204802, _Internal::yolo_anchors_param(this), target, stream);
  }

  cached_has_bits = _has_bits_[2];
  // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204803, _Internal::yolo_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        204804, _Internal::yolo_dump_param(this), target, stream);
  }

  // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_yolo_data_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1707111, this->_internal_yolo_data_param(i), target, stream);
  }

  // repeated float data_prob_param = 1707112;
  for (int i = 0, n = this->_internal_data_prob_param_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1707112, this->_internal_data_prob_param(i), target);
  }

  // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8266711, _Internal::roi_pooling_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LayerParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bottom = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bottom_.size());
  for (int i = 0, n = bottom_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bottom_.Get(i));
  }

  // repeated string top = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(top_.size());
  for (int i = 0, n = top_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      top_.Get(i));
  }

  // repeated float loss_weight = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_loss_weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_loss_weight_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.ParamSpec param = 6;
  total_size += 1UL * this->_internal_param_size();
  for (const auto& msg : this->param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 7;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetStateRule include = 8;
  total_size += 1UL * this->_internal_include_size();
  for (const auto& msg : this->include_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 9;
  total_size += 1UL * this->_internal_exclude_size();
  for (const auto& msg : this->exclude_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bool propagate_down = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_propagate_down_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_propagate_down_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.ImageDataParameter yolo_data_param = 1707111;
  total_size += 4UL * this->_internal_yolo_data_param_size();
  for (const auto& msg : this->yolo_data_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float data_prob_param = 1707112;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_prob_param_size());
    size_t data_size = 4UL * count;
    total_size += 4 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_prob_param_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional .apollo.perception.inference.TransformationParameter transform_param = 100;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_param_);
    }

    // optional .apollo.perception.inference.LossParameter loss_param = 101;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loss_param_);
    }

    // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 102;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accuracy_param_);
    }

    // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 103;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *argmax_param_);
    }

    // optional .apollo.perception.inference.ConcatParameter concat_param = 104;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *concat_param_);
    }

    // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 105;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contrastive_loss_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 106;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *convolution_param_);
    }

    // optional .apollo.perception.inference.DataParameter data_param = 107;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_param_);
    }

    // optional .apollo.perception.inference.DropoutParameter dropout_param = 108;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dropout_param_);
    }

    // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 109;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dummy_data_param_);
    }

    // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 110;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eltwise_param_);
    }

    // optional .apollo.perception.inference.ExpParameter exp_param = 111;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exp_param_);
    }

    // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 112;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdf5_data_param_);
    }

    // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 113;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdf5_output_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 114;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hinge_loss_param_);
    }

    // optional .apollo.perception.inference.ImageDataParameter image_data_param = 115;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_data_param_);
    }

    // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 116;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *infogain_loss_param_);
    }

    // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 117;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_product_param_);
    }

    // optional .apollo.perception.inference.LRNParameter lrn_param = 118;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lrn_param_);
    }

    // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 119;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memory_data_param_);
    }

    // optional .apollo.perception.inference.MVNParameter mvn_param = 120;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mvn_param_);
    }

    // optional .apollo.perception.inference.PoolingParameter pooling_param = 121;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pooling_param_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.perception.inference.PowerParameter power_param = 122;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_param_);
    }

    // optional .apollo.perception.inference.ReLUParameter relu_param = 123;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relu_param_);
    }

    // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 124;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sigmoid_param_);
    }

    // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 125;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *softmax_param_);
    }

    // optional .apollo.perception.inference.SliceParameter slice_param = 126;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slice_param_);
    }

    // optional .apollo.perception.inference.TanHParameter tanh_param = 127;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tanh_param_);
    }

    // optional .apollo.perception.inference.ThresholdParameter threshold_param = 128;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threshold_param_);
    }

    // optional .apollo.perception.inference.WindowDataParameter window_data_param = 129;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_data_param_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.PythonParameter python_param = 130;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *python_param_);
    }

    // optional .apollo.perception.inference.PReLUParameter prelu_param = 131;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prelu_param_);
    }

    // optional .apollo.perception.inference.SPPParameter spp_param = 132;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spp_param_);
    }

    // optional .apollo.perception.inference.ReshapeParameter reshape_param = 133;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reshape_param_);
    }

    // optional .apollo.perception.inference.LogParameter log_param = 134;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *log_param_);
    }

    // optional .apollo.perception.inference.FlattenParameter flatten_param = 135;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flatten_param_);
    }

    // optional .apollo.perception.inference.ReductionParameter reduction_param = 136;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reduction_param_);
    }

    // optional .apollo.perception.inference.EmbedParameter embed_param = 137;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *embed_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.TileParameter tile_param = 138;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tile_param_);
    }

    // optional .apollo.perception.inference.BatchNormParameter batch_norm_param = 139;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *batch_norm_param_);
    }

    // optional .apollo.perception.inference.ELUParameter elu_param = 140;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *elu_param_);
    }

    // optional .apollo.perception.inference.BiasParameter bias_param = 141;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_param_);
    }

    // optional .apollo.perception.inference.ScaleParameter scale_param = 142;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_param_);
    }

    // optional .apollo.perception.inference.InputParameter input_param = 143;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_param_);
    }

    // optional .apollo.perception.inference.CropParameter crop_param = 144;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crop_param_);
    }

    // optional .apollo.perception.inference.ParameterParameter parameter_param = 145;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameter_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.perception.inference.RecurrentParameter recurrent_param = 146;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recurrent_param_);
    }

    // optional .apollo.perception.inference.AnnotatedDataParameter annotated_data_param = 200;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *annotated_data_param_);
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter multibox_loss_param = 201;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multibox_loss_param_);
    }

    // optional .apollo.perception.inference.PermuteParameter permute_param = 202;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *permute_param_);
    }

    // optional .apollo.perception.inference.PriorBoxParameter prior_box_param = 203;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prior_box_param_);
    }

    // optional .apollo.perception.inference.DetectionOutputParameter detection_output_param = 204;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_output_param_);
    }

    // optional .apollo.perception.inference.DetectionEvaluateParameter detection_evaluate_param = 205;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_evaluate_param_);
    }

    // optional .apollo.perception.inference.NormalizeParameter norm_param = 206;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *norm_param_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.perception.inference.VideoDataParameter video_data_param = 207;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_data_param_);
    }

    // optional .apollo.perception.inference.RegionParameter region_param = 300;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_param_);
    }

    // optional .apollo.perception.inference.ReorgParameter reorg_param = 301;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reorg_param_);
    }

    // optional .apollo.perception.inference.RegionOutputParameter region_output_param = 310;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_output_param_);
    }

    // optional .apollo.perception.inference.RegionProposalParameter region_proposal_param = 320;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_proposal_param_);
    }

    // optional .apollo.perception.inference.PaddingParameter padding_param = 1001;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *padding_param_);
    }

    // optional .apollo.perception.inference.YoloTargetParameter yolo_target_param = 204801;
    if (cached_has_bits & 0x40000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yolo_target_param_);
    }

    // optional .apollo.perception.inference.YoloAnchorsParameter yolo_anchors_param = 204802;
    if (cached_has_bits & 0x80000000u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yolo_anchors_param_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.inference.YoloLossParameter yolo_loss_param = 204803;
    if (cached_has_bits & 0x00000001u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yolo_loss_param_);
    }

    // optional .apollo.perception.inference.YoloDumpParameter yolo_dump_param = 204804;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yolo_dump_param_);
    }

    // optional .apollo.perception.inference.ROIPoolingParameter roi_pooling_param = 8266711;
    if (cached_has_bits & 0x00000004u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roi_pooling_param_);
    }

    // optional .apollo.perception.inference.Phase phase = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayerParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.LayerParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blobs_.MergeFrom(from.blobs_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  propagate_down_.MergeFrom(from.propagate_down_);
  yolo_data_param_.MergeFrom(from.yolo_data_param_);
  data_prob_param_.MergeFrom(from.data_prob_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transform_param()->::apollo::perception::inference::TransformationParameter::MergeFrom(from._internal_transform_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_loss_param()->::apollo::perception::inference::LossParameter::MergeFrom(from._internal_loss_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_accuracy_param()->::apollo::perception::inference::AccuracyParameter::MergeFrom(from._internal_accuracy_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_argmax_param()->::apollo::perception::inference::ArgMaxParameter::MergeFrom(from._internal_argmax_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_concat_param()->::apollo::perception::inference::ConcatParameter::MergeFrom(from._internal_concat_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_contrastive_loss_param()->::apollo::perception::inference::ContrastiveLossParameter::MergeFrom(from._internal_contrastive_loss_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_convolution_param()->::apollo::perception::inference::ConvolutionParameter::MergeFrom(from._internal_convolution_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_data_param()->::apollo::perception::inference::DataParameter::MergeFrom(from._internal_data_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_dropout_param()->::apollo::perception::inference::DropoutParameter::MergeFrom(from._internal_dropout_param());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_dummy_data_param()->::apollo::perception::inference::DummyDataParameter::MergeFrom(from._internal_dummy_data_param());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_eltwise_param()->::apollo::perception::inference::EltwiseParameter::MergeFrom(from._internal_eltwise_param());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_exp_param()->::apollo::perception::inference::ExpParameter::MergeFrom(from._internal_exp_param());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_hdf5_data_param()->::apollo::perception::inference::HDF5DataParameter::MergeFrom(from._internal_hdf5_data_param());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_hdf5_output_param()->::apollo::perception::inference::HDF5OutputParameter::MergeFrom(from._internal_hdf5_output_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_hinge_loss_param()->::apollo::perception::inference::HingeLossParameter::MergeFrom(from._internal_hinge_loss_param());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_image_data_param()->::apollo::perception::inference::ImageDataParameter::MergeFrom(from._internal_image_data_param());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_infogain_loss_param()->::apollo::perception::inference::InfogainLossParameter::MergeFrom(from._internal_infogain_loss_param());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_inner_product_param()->::apollo::perception::inference::InnerProductParameter::MergeFrom(from._internal_inner_product_param());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_lrn_param()->::apollo::perception::inference::LRNParameter::MergeFrom(from._internal_lrn_param());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_memory_data_param()->::apollo::perception::inference::MemoryDataParameter::MergeFrom(from._internal_memory_data_param());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_mvn_param()->::apollo::perception::inference::MVNParameter::MergeFrom(from._internal_mvn_param());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_pooling_param()->::apollo::perception::inference::PoolingParameter::MergeFrom(from._internal_pooling_param());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_power_param()->::apollo::perception::inference::PowerParameter::MergeFrom(from._internal_power_param());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_relu_param()->::apollo::perception::inference::ReLUParameter::MergeFrom(from._internal_relu_param());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_sigmoid_param()->::apollo::perception::inference::SigmoidParameter::MergeFrom(from._internal_sigmoid_param());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_softmax_param()->::apollo::perception::inference::SoftmaxParameter::MergeFrom(from._internal_softmax_param());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_slice_param()->::apollo::perception::inference::SliceParameter::MergeFrom(from._internal_slice_param());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_tanh_param()->::apollo::perception::inference::TanHParameter::MergeFrom(from._internal_tanh_param());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_threshold_param()->::apollo::perception::inference::ThresholdParameter::MergeFrom(from._internal_threshold_param());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_window_data_param()->::apollo::perception::inference::WindowDataParameter::MergeFrom(from._internal_window_data_param());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_python_param()->::apollo::perception::inference::PythonParameter::MergeFrom(from._internal_python_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prelu_param()->::apollo::perception::inference::PReLUParameter::MergeFrom(from._internal_prelu_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spp_param()->::apollo::perception::inference::SPPParameter::MergeFrom(from._internal_spp_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reshape_param()->::apollo::perception::inference::ReshapeParameter::MergeFrom(from._internal_reshape_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_log_param()->::apollo::perception::inference::LogParameter::MergeFrom(from._internal_log_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_flatten_param()->::apollo::perception::inference::FlattenParameter::MergeFrom(from._internal_flatten_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_reduction_param()->::apollo::perception::inference::ReductionParameter::MergeFrom(from._internal_reduction_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_embed_param()->::apollo::perception::inference::EmbedParameter::MergeFrom(from._internal_embed_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_tile_param()->::apollo::perception::inference::TileParameter::MergeFrom(from._internal_tile_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_batch_norm_param()->::apollo::perception::inference::BatchNormParameter::MergeFrom(from._internal_batch_norm_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_elu_param()->::apollo::perception::inference::ELUParameter::MergeFrom(from._internal_elu_param());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_bias_param()->::apollo::perception::inference::BiasParameter::MergeFrom(from._internal_bias_param());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_scale_param()->::apollo::perception::inference::ScaleParameter::MergeFrom(from._internal_scale_param());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_input_param()->::apollo::perception::inference::InputParameter::MergeFrom(from._internal_input_param());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_crop_param()->::apollo::perception::inference::CropParameter::MergeFrom(from._internal_crop_param());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_parameter_param()->::apollo::perception::inference::ParameterParameter::MergeFrom(from._internal_parameter_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_recurrent_param()->::apollo::perception::inference::RecurrentParameter::MergeFrom(from._internal_recurrent_param());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_annotated_data_param()->::apollo::perception::inference::AnnotatedDataParameter::MergeFrom(from._internal_annotated_data_param());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_multibox_loss_param()->::apollo::perception::inference::MultiBoxLossParameter::MergeFrom(from._internal_multibox_loss_param());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_permute_param()->::apollo::perception::inference::PermuteParameter::MergeFrom(from._internal_permute_param());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_prior_box_param()->::apollo::perception::inference::PriorBoxParameter::MergeFrom(from._internal_prior_box_param());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_detection_output_param()->::apollo::perception::inference::DetectionOutputParameter::MergeFrom(from._internal_detection_output_param());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_detection_evaluate_param()->::apollo::perception::inference::DetectionEvaluateParameter::MergeFrom(from._internal_detection_evaluate_param());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_norm_param()->::apollo::perception::inference::NormalizeParameter::MergeFrom(from._internal_norm_param());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_video_data_param()->::apollo::perception::inference::VideoDataParameter::MergeFrom(from._internal_video_data_param());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_region_param()->::apollo::perception::inference::RegionParameter::MergeFrom(from._internal_region_param());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_reorg_param()->::apollo::perception::inference::ReorgParameter::MergeFrom(from._internal_reorg_param());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_region_output_param()->::apollo::perception::inference::RegionOutputParameter::MergeFrom(from._internal_region_output_param());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_region_proposal_param()->::apollo::perception::inference::RegionProposalParameter::MergeFrom(from._internal_region_proposal_param());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_padding_param()->::apollo::perception::inference::PaddingParameter::MergeFrom(from._internal_padding_param());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_yolo_target_param()->::apollo::perception::inference::YoloTargetParameter::MergeFrom(from._internal_yolo_target_param());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_yolo_anchors_param()->::apollo::perception::inference::YoloAnchorsParameter::MergeFrom(from._internal_yolo_anchors_param());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_yolo_loss_param()->::apollo::perception::inference::YoloLossParameter::MergeFrom(from._internal_yolo_loss_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_yolo_dump_param()->::apollo::perception::inference::YoloDumpParameter::MergeFrom(from._internal_yolo_dump_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_roi_pooling_param()->::apollo::perception::inference::ROIPoolingParameter::MergeFrom(from._internal_roi_pooling_param());
    }
    if (cached_has_bits & 0x00000008u) {
      phase_ = from.phase_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void LayerParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  return true;
}

void LayerParameter::InternalSwap(LayerParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blobs_.InternalSwap(&other->blobs_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  propagate_down_.InternalSwap(&other->propagate_down_);
  yolo_data_param_.InternalSwap(&other->yolo_data_param_);
  data_prob_param_.InternalSwap(&other->data_prob_param_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transform_param_, other->transform_param_);
  swap(loss_param_, other->loss_param_);
  swap(accuracy_param_, other->accuracy_param_);
  swap(argmax_param_, other->argmax_param_);
  swap(concat_param_, other->concat_param_);
  swap(contrastive_loss_param_, other->contrastive_loss_param_);
  swap(convolution_param_, other->convolution_param_);
  swap(data_param_, other->data_param_);
  swap(dropout_param_, other->dropout_param_);
  swap(dummy_data_param_, other->dummy_data_param_);
  swap(eltwise_param_, other->eltwise_param_);
  swap(exp_param_, other->exp_param_);
  swap(hdf5_data_param_, other->hdf5_data_param_);
  swap(hdf5_output_param_, other->hdf5_output_param_);
  swap(hinge_loss_param_, other->hinge_loss_param_);
  swap(image_data_param_, other->image_data_param_);
  swap(infogain_loss_param_, other->infogain_loss_param_);
  swap(inner_product_param_, other->inner_product_param_);
  swap(lrn_param_, other->lrn_param_);
  swap(memory_data_param_, other->memory_data_param_);
  swap(mvn_param_, other->mvn_param_);
  swap(pooling_param_, other->pooling_param_);
  swap(power_param_, other->power_param_);
  swap(relu_param_, other->relu_param_);
  swap(sigmoid_param_, other->sigmoid_param_);
  swap(softmax_param_, other->softmax_param_);
  swap(slice_param_, other->slice_param_);
  swap(tanh_param_, other->tanh_param_);
  swap(threshold_param_, other->threshold_param_);
  swap(window_data_param_, other->window_data_param_);
  swap(python_param_, other->python_param_);
  swap(prelu_param_, other->prelu_param_);
  swap(spp_param_, other->spp_param_);
  swap(reshape_param_, other->reshape_param_);
  swap(log_param_, other->log_param_);
  swap(flatten_param_, other->flatten_param_);
  swap(reduction_param_, other->reduction_param_);
  swap(embed_param_, other->embed_param_);
  swap(tile_param_, other->tile_param_);
  swap(batch_norm_param_, other->batch_norm_param_);
  swap(elu_param_, other->elu_param_);
  swap(bias_param_, other->bias_param_);
  swap(scale_param_, other->scale_param_);
  swap(input_param_, other->input_param_);
  swap(crop_param_, other->crop_param_);
  swap(parameter_param_, other->parameter_param_);
  swap(recurrent_param_, other->recurrent_param_);
  swap(annotated_data_param_, other->annotated_data_param_);
  swap(multibox_loss_param_, other->multibox_loss_param_);
  swap(permute_param_, other->permute_param_);
  swap(prior_box_param_, other->prior_box_param_);
  swap(detection_output_param_, other->detection_output_param_);
  swap(detection_evaluate_param_, other->detection_evaluate_param_);
  swap(norm_param_, other->norm_param_);
  swap(video_data_param_, other->video_data_param_);
  swap(region_param_, other->region_param_);
  swap(reorg_param_, other->reorg_param_);
  swap(region_output_param_, other->region_output_param_);
  swap(region_proposal_param_, other->region_proposal_param_);
  swap(padding_param_, other->padding_param_);
  swap(yolo_target_param_, other->yolo_target_param_);
  swap(yolo_anchors_param_, other->yolo_anchors_param_);
  swap(yolo_loss_param_, other->yolo_loss_param_);
  swap(yolo_dump_param_, other->yolo_dump_param_);
  swap(roi_pooling_param_, other->roi_pooling_param_);
  swap(phase_, other->phase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransformationParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_TransformationParameter_default_instance_._instance.get_mutable()->resize_param_ = const_cast< ::apollo::perception::inference::ResizeParameter*>(
      ::apollo::perception::inference::ResizeParameter::internal_default_instance());
  ::apollo::perception::inference::_TransformationParameter_default_instance_._instance.get_mutable()->noise_param_ = const_cast< ::apollo::perception::inference::NoiseParameter*>(
      ::apollo::perception::inference::NoiseParameter::internal_default_instance());
  ::apollo::perception::inference::_TransformationParameter_default_instance_._instance.get_mutable()->distort_param_ = const_cast< ::apollo::perception::inference::DistortionParameter*>(
      ::apollo::perception::inference::DistortionParameter::internal_default_instance());
  ::apollo::perception::inference::_TransformationParameter_default_instance_._instance.get_mutable()->expand_param_ = const_cast< ::apollo::perception::inference::ExpansionParameter*>(
      ::apollo::perception::inference::ExpansionParameter::internal_default_instance());
  ::apollo::perception::inference::_TransformationParameter_default_instance_._instance.get_mutable()->emit_constraint_ = const_cast< ::apollo::perception::inference::EmitConstraint*>(
      ::apollo::perception::inference::EmitConstraint::internal_default_instance());
}
class TransformationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TransformationParameter>()._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_crop_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_crop_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_force_gray(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::inference::ResizeParameter& resize_param(const TransformationParameter* msg);
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::NoiseParameter& noise_param(const TransformationParameter* msg);
  static void set_has_noise_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::DistortionParameter& distort_param(const TransformationParameter* msg);
  static void set_has_distort_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::ExpansionParameter& expand_param(const TransformationParameter* msg);
  static void set_has_expand_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::perception::inference::EmitConstraint& emit_constraint(const TransformationParameter* msg);
  static void set_has_emit_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::ResizeParameter&
TransformationParameter::_Internal::resize_param(const TransformationParameter* msg) {
  return *msg->resize_param_;
}
const ::apollo::perception::inference::NoiseParameter&
TransformationParameter::_Internal::noise_param(const TransformationParameter* msg) {
  return *msg->noise_param_;
}
const ::apollo::perception::inference::DistortionParameter&
TransformationParameter::_Internal::distort_param(const TransformationParameter* msg) {
  return *msg->distort_param_;
}
const ::apollo::perception::inference::ExpansionParameter&
TransformationParameter::_Internal::expand_param(const TransformationParameter* msg) {
  return *msg->expand_param_;
}
const ::apollo::perception::inference::EmitConstraint&
TransformationParameter::_Internal::emit_constraint(const TransformationParameter* msg) {
  return *msg->emit_constraint_;
}
TransformationParameter::TransformationParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.TransformationParameter)
}
TransformationParameter::TransformationParameter(const TransformationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mean_value_(from.mean_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mean_file()) {
    mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  if (from._internal_has_resize_param()) {
    resize_param_ = new ::apollo::perception::inference::ResizeParameter(*from.resize_param_);
  } else {
    resize_param_ = nullptr;
  }
  if (from._internal_has_noise_param()) {
    noise_param_ = new ::apollo::perception::inference::NoiseParameter(*from.noise_param_);
  } else {
    noise_param_ = nullptr;
  }
  if (from._internal_has_emit_constraint()) {
    emit_constraint_ = new ::apollo::perception::inference::EmitConstraint(*from.emit_constraint_);
  } else {
    emit_constraint_ = nullptr;
  }
  if (from._internal_has_distort_param()) {
    distort_param_ = new ::apollo::perception::inference::DistortionParameter(*from.distort_param_);
  } else {
    distort_param_ = nullptr;
  }
  if (from._internal_has_expand_param()) {
    expand_param_ = new ::apollo::perception::inference::ExpansionParameter(*from.expand_param_);
  } else {
    expand_param_ = nullptr;
  }
  ::memcpy(&crop_size_, &from.crop_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&crop_size_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.TransformationParameter)
}

void TransformationParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resize_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jitter_) -
      reinterpret_cast<char*>(&resize_param_)) + sizeof(jitter_));
  scale_ = 1;
}

TransformationParameter::~TransformationParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.TransformationParameter)
  SharedDtor();
}

void TransformationParameter::SharedDtor() {
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resize_param_;
  if (this != internal_default_instance()) delete noise_param_;
  if (this != internal_default_instance()) delete emit_constraint_;
  if (this != internal_default_instance()) delete distort_param_;
  if (this != internal_default_instance()) delete expand_param_;
}

void TransformationParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationParameter& TransformationParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransformationParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void TransformationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.TransformationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mean_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mean_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resize_param_ != nullptr);
      resize_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(noise_param_ != nullptr);
      noise_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(emit_constraint_ != nullptr);
      emit_constraint_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(distort_param_ != nullptr);
      distort_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(expand_param_ != nullptr);
      expand_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mirror_) -
        reinterpret_cast<char*>(&crop_size_)) + sizeof(mirror_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&force_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_) -
        reinterpret_cast<char*>(&force_color_)) + sizeof(jitter_));
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TransformationParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float scale = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool mirror = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mirror(&has_bits);
          mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crop_size = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crop_size(&has_bits);
          crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mean_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.TransformationParameter.mean_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mean_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mean_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mean_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_color = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_force_color(&has_bits);
          force_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_gray = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_force_gray(&has_bits);
          force_gray_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_noise_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crop_h = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_crop_h(&has_bits);
          crop_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crop_w = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_crop_w(&has_bits);
          crop_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_distort_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_expand_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float jitter = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_jitter(&has_bits);
          jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransformationParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.TransformationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float scale = 1 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale(), target);
  }

  // optional bool mirror = 2 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mirror(), target);
  }

  // optional uint32 crop_size = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crop_size(), target);
  }

  // optional string mean_file = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.TransformationParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mean_file(), target);
  }

  // repeated float mean_value = 5;
  for (int i = 0, n = this->_internal_mean_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mean_value(i), target);
  }

  // optional bool force_color = 6 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_force_color(), target);
  }

  // optional bool force_gray = 7 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_force_gray(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::resize_param(this), target, stream);
  }

  // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::noise_param(this), target, stream);
  }

  // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::emit_constraint(this), target, stream);
  }

  // optional uint32 crop_h = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_crop_h(), target);
  }

  // optional uint32 crop_w = 12 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_crop_w(), target);
  }

  // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::distort_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::expand_param(this), target, stream);
  }

  // optional float jitter = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_jitter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.TransformationParameter)
  return target;
}

size_t TransformationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.TransformationParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mean_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mean_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mean_value_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mean_file = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional .apollo.perception.inference.ResizeParameter resize_param = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resize_param_);
    }

    // optional .apollo.perception.inference.NoiseParameter noise_param = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *noise_param_);
    }

    // optional .apollo.perception.inference.EmitConstraint emit_constraint = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emit_constraint_);
    }

    // optional .apollo.perception.inference.DistortionParameter distort_param = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distort_param_);
    }

    // optional .apollo.perception.inference.ExpansionParameter expand_param = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expand_param_);
    }

    // optional uint32 crop_size = 3 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crop_size());
    }

    // optional bool mirror = 2 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool force_color = 6 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool force_gray = 7 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 crop_h = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crop_h());
    }

    // optional uint32 crop_w = 12 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crop_w());
    }

    // optional float jitter = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float scale = 1 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransformationParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.TransformationParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.TransformationParameter)
    MergeFrom(*source);
  }
}

void TransformationParameter::MergeFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.TransformationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mean_value_.MergeFrom(from.mean_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resize_param()->::apollo::perception::inference::ResizeParameter::MergeFrom(from._internal_resize_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_noise_param()->::apollo::perception::inference::NoiseParameter::MergeFrom(from._internal_noise_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_emit_constraint()->::apollo::perception::inference::EmitConstraint::MergeFrom(from._internal_emit_constraint());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_distort_param()->::apollo::perception::inference::DistortionParameter::MergeFrom(from._internal_distort_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_expand_param()->::apollo::perception::inference::ExpansionParameter::MergeFrom(from._internal_expand_param());
    }
    if (cached_has_bits & 0x00000040u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      force_color_ = from.force_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      force_gray_ = from.force_gray_;
    }
    if (cached_has_bits & 0x00000400u) {
      crop_h_ = from.crop_h_;
    }
    if (cached_has_bits & 0x00000800u) {
      crop_w_ = from.crop_w_;
    }
    if (cached_has_bits & 0x00001000u) {
      jitter_ = from.jitter_;
    }
    if (cached_has_bits & 0x00002000u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransformationParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationParameter::CopyFrom(const TransformationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.TransformationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationParameter::IsInitialized() const {
  return true;
}

void TransformationParameter::InternalSwap(TransformationParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mean_value_.InternalSwap(&other->mean_value_);
  mean_file_.Swap(&other->mean_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resize_param_, other->resize_param_);
  swap(noise_param_, other->noise_param_);
  swap(emit_constraint_, other->emit_constraint_);
  swap(distort_param_, other->distort_param_);
  swap(expand_param_, other->expand_param_);
  swap(crop_size_, other->crop_size_);
  swap(mirror_, other->mirror_);
  swap(force_color_, other->force_color_);
  swap(force_gray_, other->force_gray_);
  swap(crop_h_, other->crop_h_);
  swap(crop_w_, other->crop_w_);
  swap(jitter_, other->jitter_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformationParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResizeParameter::InitAsDefaultInstance() {
}
class ResizeParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ResizeParameter>()._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_resize_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pad_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ResizeParameter::ResizeParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ResizeParameter)
}
ResizeParameter::ResizeParameter(const ResizeParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pad_value_(from.pad_value_),
      interp_mode_(from.interp_mode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&resize_mode_) -
    reinterpret_cast<char*>(&height_)) + sizeof(resize_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ResizeParameter)
}

void ResizeParameter::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_scale_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_scale_));
  pad_mode_ = 1;
  prob_ = 1;
  resize_mode_ = 1;
}

ResizeParameter::~ResizeParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ResizeParameter)
  SharedDtor();
}

void ResizeParameter::SharedDtor() {
}

void ResizeParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResizeParameter& ResizeParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResizeParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ResizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ResizeParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_value_.Clear();
  interp_mode_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_scale_) -
        reinterpret_cast<char*>(&height_)) + sizeof(width_scale_));
    pad_mode_ = 1;
    prob_ = 1;
    resize_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResizeParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float prob = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ResizeParameter_Resize_mode_IsValid(val))) {
            _internal_set_resize_mode(static_cast<::apollo::perception::inference::ResizeParameter_Resize_mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ResizeParameter_Pad_mode_IsValid(val))) {
            _internal_set_pad_mode(static_cast<::apollo::perception::inference::ResizeParameter_Pad_mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float pad_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pad_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_pad_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid(val))) {
              _internal_add_interp_mode(static_cast<::apollo::perception::inference::ResizeParameter_Interp_mode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_interp_mode(), ptr, ctx, ::apollo::perception::inference::ResizeParameter_Interp_mode_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height_scale = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_height_scale(&has_bits);
          height_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width_scale = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_width_scale(&has_bits);
          width_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResizeParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ResizeParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resize_mode(), target);
  }

  // optional uint32 height = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 width = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pad_mode(), target);
  }

  // repeated float pad_value = 6;
  for (int i = 0, n = this->_internal_pad_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pad_value(i), target);
  }

  // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
  for (int i = 0, n = this->_internal_interp_mode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        7, this->_internal_interp_mode(i), target);
  }

  // optional uint32 height_scale = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_height_scale(), target);
  }

  // optional uint32 width_scale = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_width_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ResizeParameter)
  return target;
}

size_t ResizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ResizeParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float pad_value = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pad_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pad_value_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.ResizeParameter.Interp_mode interp_mode = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_interp_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_interp_mode(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 height = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 width = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height_scale = 8 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height_scale());
    }

    // optional uint32 width_scale = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width_scale());
    }

    // optional .apollo.perception.inference.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pad_mode());
    }

    // optional float prob = 1 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resize_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResizeParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResizeParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ResizeParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ResizeParameter)
    MergeFrom(*source);
  }
}

void ResizeParameter::MergeFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ResizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_value_.MergeFrom(from.pad_value_);
  interp_mode_.MergeFrom(from.interp_mode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_scale_ = from.height_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_scale_ = from.width_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      pad_mode_ = from.pad_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      prob_ = from.prob_;
    }
    if (cached_has_bits & 0x00000040u) {
      resize_mode_ = from.resize_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizeParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeParameter::CopyFrom(const ResizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ResizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeParameter::IsInitialized() const {
  return true;
}

void ResizeParameter::InternalSwap(ResizeParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pad_value_.InternalSwap(&other->pad_value_);
  interp_mode_.InternalSwap(&other->interp_mode_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(height_scale_, other->height_scale_);
  swap(width_scale_, other->width_scale_);
  swap(pad_mode_, other->pad_mode_);
  swap(prob_, other->prob_);
  swap(resize_mode_, other->resize_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaltPepperParameter::InitAsDefaultInstance() {
}
class SaltPepperParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SaltPepperParameter>()._has_bits_);
  static void set_has_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SaltPepperParameter::SaltPepperParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SaltPepperParameter)
}
SaltPepperParameter::SaltPepperParameter(const SaltPepperParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fraction_ = from.fraction_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SaltPepperParameter)
}

void SaltPepperParameter::SharedCtor() {
  fraction_ = 0;
}

SaltPepperParameter::~SaltPepperParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SaltPepperParameter)
  SharedDtor();
}

void SaltPepperParameter::SharedDtor() {
}

void SaltPepperParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaltPepperParameter& SaltPepperParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaltPepperParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SaltPepperParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SaltPepperParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  fraction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SaltPepperParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float fraction = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_fraction(&has_bits);
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaltPepperParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SaltPepperParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fraction = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fraction(), target);
  }

  // repeated float value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SaltPepperParameter)
  return target;
}

size_t SaltPepperParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SaltPepperParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  // optional float fraction = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaltPepperParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SaltPepperParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SaltPepperParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaltPepperParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SaltPepperParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SaltPepperParameter)
    MergeFrom(*source);
  }
}

void SaltPepperParameter::MergeFrom(const SaltPepperParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SaltPepperParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from._internal_has_fraction()) {
    _internal_set_fraction(from._internal_fraction());
  }
}

void SaltPepperParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SaltPepperParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaltPepperParameter::CopyFrom(const SaltPepperParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SaltPepperParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaltPepperParameter::IsInitialized() const {
  return true;
}

void SaltPepperParameter::InternalSwap(SaltPepperParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  swap(fraction_, other->fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaltPepperParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoiseParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_NoiseParameter_default_instance_._instance.get_mutable()->saltpepper_param_ = const_cast< ::apollo::perception::inference::SaltPepperParameter*>(
      ::apollo::perception::inference::SaltPepperParameter::internal_default_instance());
}
class NoiseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NoiseParameter>()._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hist_eq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_decolorize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gauss_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_jpeg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_posterize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_erode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saltpepper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::SaltPepperParameter& saltpepper_param(const NoiseParameter* msg);
  static void set_has_saltpepper_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clahe(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_convert_to_hsv(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_convert_to_lab(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::apollo::perception::inference::SaltPepperParameter&
NoiseParameter::_Internal::saltpepper_param(const NoiseParameter* msg) {
  return *msg->saltpepper_param_;
}
NoiseParameter::NoiseParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NoiseParameter)
}
NoiseParameter::NoiseParameter(const NoiseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_saltpepper_param()) {
    saltpepper_param_ = new ::apollo::perception::inference::SaltPepperParameter(*from.saltpepper_param_);
  } else {
    saltpepper_param_ = nullptr;
  }
  ::memcpy(&prob_, &from.prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&jpeg_) -
    reinterpret_cast<char*>(&prob_)) + sizeof(jpeg_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NoiseParameter)
}

void NoiseParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&saltpepper_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_lab_) -
      reinterpret_cast<char*>(&saltpepper_param_)) + sizeof(convert_to_lab_));
  jpeg_ = -1;
}

NoiseParameter::~NoiseParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NoiseParameter)
  SharedDtor();
}

void NoiseParameter::SharedDtor() {
  if (this != internal_default_instance()) delete saltpepper_param_;
}

void NoiseParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoiseParameter& NoiseParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoiseParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NoiseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(saltpepper_param_ != nullptr);
    saltpepper_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&erode_) -
        reinterpret_cast<char*>(&prob_)) + sizeof(erode_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&saltpepper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_lab_) -
        reinterpret_cast<char*>(&saltpepper_)) + sizeof(convert_to_lab_));
    jpeg_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NoiseParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float prob = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool hist_eq = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hist_eq(&has_bits);
          hist_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool inverse = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inverse(&has_bits);
          inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool decolorize = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_decolorize(&has_bits);
          decolorize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gauss_blur = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gauss_blur(&has_bits);
          gauss_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float jpeg = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_jpeg(&has_bits);
          jpeg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool posterize = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_posterize(&has_bits);
          posterize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool erode = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_erode(&has_bits);
          erode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool saltpepper = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_saltpepper(&has_bits);
          saltpepper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_saltpepper_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clahe = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_clahe(&has_bits);
          clahe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_hsv = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_convert_to_hsv(&has_bits);
          convert_to_hsv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_lab = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_convert_to_lab(&has_bits);
          convert_to_lab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoiseParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NoiseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // optional bool hist_eq = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hist_eq(), target);
  }

  // optional bool inverse = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_inverse(), target);
  }

  // optional bool decolorize = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_decolorize(), target);
  }

  // optional bool gauss_blur = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gauss_blur(), target);
  }

  // optional float jpeg = 6 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_jpeg(), target);
  }

  // optional bool posterize = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_posterize(), target);
  }

  // optional bool erode = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_erode(), target);
  }

  // optional bool saltpepper = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_saltpepper(), target);
  }

  // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::saltpepper_param(this), target, stream);
  }

  // optional bool clahe = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_clahe(), target);
  }

  // optional bool convert_to_hsv = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_convert_to_hsv(), target);
  }

  // optional bool convert_to_lab = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_convert_to_lab(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NoiseParameter)
  return target;
}

size_t NoiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NoiseParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.SaltPepperParameter saltpepper_param = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saltpepper_param_);
    }

    // optional float prob = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool hist_eq = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool inverse = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool decolorize = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool gauss_blur = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool posterize = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool erode = 8 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool saltpepper = 9 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool clahe = 11 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_hsv = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_lab = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional float jpeg = 6 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoiseParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoiseParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NoiseParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NoiseParameter)
    MergeFrom(*source);
  }
}

void NoiseParameter::MergeFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_saltpepper_param()->::apollo::perception::inference::SaltPepperParameter::MergeFrom(from._internal_saltpepper_param());
    }
    if (cached_has_bits & 0x00000002u) {
      prob_ = from.prob_;
    }
    if (cached_has_bits & 0x00000004u) {
      hist_eq_ = from.hist_eq_;
    }
    if (cached_has_bits & 0x00000008u) {
      inverse_ = from.inverse_;
    }
    if (cached_has_bits & 0x00000010u) {
      decolorize_ = from.decolorize_;
    }
    if (cached_has_bits & 0x00000020u) {
      gauss_blur_ = from.gauss_blur_;
    }
    if (cached_has_bits & 0x00000040u) {
      posterize_ = from.posterize_;
    }
    if (cached_has_bits & 0x00000080u) {
      erode_ = from.erode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      saltpepper_ = from.saltpepper_;
    }
    if (cached_has_bits & 0x00000200u) {
      clahe_ = from.clahe_;
    }
    if (cached_has_bits & 0x00000400u) {
      convert_to_hsv_ = from.convert_to_hsv_;
    }
    if (cached_has_bits & 0x00000800u) {
      convert_to_lab_ = from.convert_to_lab_;
    }
    if (cached_has_bits & 0x00001000u) {
      jpeg_ = from.jpeg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NoiseParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseParameter::CopyFrom(const NoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseParameter::IsInitialized() const {
  return true;
}

void NoiseParameter::InternalSwap(NoiseParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(saltpepper_param_, other->saltpepper_param_);
  swap(prob_, other->prob_);
  swap(hist_eq_, other->hist_eq_);
  swap(inverse_, other->inverse_);
  swap(decolorize_, other->decolorize_);
  swap(gauss_blur_, other->gauss_blur_);
  swap(posterize_, other->posterize_);
  swap(erode_, other->erode_);
  swap(saltpepper_, other->saltpepper_);
  swap(clahe_, other->clahe_);
  swap(convert_to_hsv_, other->convert_to_hsv_);
  swap(convert_to_lab_, other->convert_to_lab_);
  swap(jpeg_, other->jpeg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoiseParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistortionParameter::InitAsDefaultInstance() {
}
class DistortionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DistortionParameter>()._has_bits_);
  static void set_has_brightness_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brightness_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contrast_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contrast_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contrast_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hue_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hue_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_saturation_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_saturation_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_saturation_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_random_order_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

DistortionParameter::DistortionParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DistortionParameter)
}
DistortionParameter::DistortionParameter(const DistortionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brightness_prob_, &from.brightness_prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_order_prob_) -
    reinterpret_cast<char*>(&brightness_prob_)) + sizeof(random_order_prob_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DistortionParameter)
}

void DistortionParameter::SharedCtor() {
  ::memset(&brightness_prob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_order_prob_) -
      reinterpret_cast<char*>(&brightness_prob_)) + sizeof(random_order_prob_));
}

DistortionParameter::~DistortionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DistortionParameter)
  SharedDtor();
}

void DistortionParameter::SharedDtor() {
}

void DistortionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistortionParameter& DistortionParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistortionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DistortionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DistortionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&brightness_prob_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&saturation_prob_) -
        reinterpret_cast<char*>(&brightness_prob_)) + sizeof(saturation_prob_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&saturation_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_order_prob_) -
        reinterpret_cast<char*>(&saturation_lower_)) + sizeof(random_order_prob_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DistortionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float brightness_prob = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_brightness_prob(&has_bits);
          brightness_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brightness_delta = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_brightness_delta(&has_bits);
          brightness_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float contrast_prob = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_contrast_prob(&has_bits);
          contrast_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float contrast_lower = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_contrast_lower(&has_bits);
          contrast_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float contrast_upper = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_contrast_upper(&has_bits);
          contrast_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float hue_prob = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_hue_prob(&has_bits);
          hue_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float hue_delta = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_hue_delta(&has_bits);
          hue_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saturation_prob = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_saturation_prob(&has_bits);
          saturation_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saturation_lower = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_saturation_lower(&has_bits);
          saturation_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float saturation_upper = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_saturation_upper(&has_bits);
          saturation_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float random_order_prob = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_random_order_prob(&has_bits);
          random_order_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistortionParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DistortionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float brightness_prob = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_brightness_prob(), target);
  }

  // optional float brightness_delta = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_brightness_delta(), target);
  }

  // optional float contrast_prob = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_contrast_prob(), target);
  }

  // optional float contrast_lower = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_contrast_lower(), target);
  }

  // optional float contrast_upper = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_contrast_upper(), target);
  }

  // optional float hue_prob = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_hue_prob(), target);
  }

  // optional float hue_delta = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hue_delta(), target);
  }

  // optional float saturation_prob = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_saturation_prob(), target);
  }

  // optional float saturation_lower = 9 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_saturation_lower(), target);
  }

  // optional float saturation_upper = 10 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_saturation_upper(), target);
  }

  // optional float random_order_prob = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_random_order_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DistortionParameter)
  return target;
}

size_t DistortionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DistortionParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float brightness_prob = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float brightness_delta = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float contrast_prob = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float contrast_lower = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float contrast_upper = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float hue_prob = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float hue_delta = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float saturation_prob = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float saturation_lower = 9 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float saturation_upper = 10 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float random_order_prob = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistortionParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DistortionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DistortionParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistortionParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DistortionParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DistortionParameter)
    MergeFrom(*source);
  }
}

void DistortionParameter::MergeFrom(const DistortionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DistortionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      brightness_prob_ = from.brightness_prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      brightness_delta_ = from.brightness_delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      contrast_prob_ = from.contrast_prob_;
    }
    if (cached_has_bits & 0x00000008u) {
      contrast_lower_ = from.contrast_lower_;
    }
    if (cached_has_bits & 0x00000010u) {
      contrast_upper_ = from.contrast_upper_;
    }
    if (cached_has_bits & 0x00000020u) {
      hue_prob_ = from.hue_prob_;
    }
    if (cached_has_bits & 0x00000040u) {
      hue_delta_ = from.hue_delta_;
    }
    if (cached_has_bits & 0x00000080u) {
      saturation_prob_ = from.saturation_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      saturation_lower_ = from.saturation_lower_;
    }
    if (cached_has_bits & 0x00000200u) {
      saturation_upper_ = from.saturation_upper_;
    }
    if (cached_has_bits & 0x00000400u) {
      random_order_prob_ = from.random_order_prob_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistortionParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DistortionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistortionParameter::CopyFrom(const DistortionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DistortionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortionParameter::IsInitialized() const {
  return true;
}

void DistortionParameter::InternalSwap(DistortionParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brightness_prob_, other->brightness_prob_);
  swap(brightness_delta_, other->brightness_delta_);
  swap(contrast_prob_, other->contrast_prob_);
  swap(contrast_lower_, other->contrast_lower_);
  swap(contrast_upper_, other->contrast_upper_);
  swap(hue_prob_, other->hue_prob_);
  swap(hue_delta_, other->hue_delta_);
  swap(saturation_prob_, other->saturation_prob_);
  swap(saturation_lower_, other->saturation_lower_);
  swap(saturation_upper_, other->saturation_upper_);
  swap(random_order_prob_, other->random_order_prob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistortionParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpansionParameter::InitAsDefaultInstance() {
}
class ExpansionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpansionParameter>()._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_expand_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ExpansionParameter::ExpansionParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ExpansionParameter)
}
ExpansionParameter::ExpansionParameter(const ExpansionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prob_, &from.prob_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_expand_ratio_) -
    reinterpret_cast<char*>(&prob_)) + sizeof(max_expand_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ExpansionParameter)
}

void ExpansionParameter::SharedCtor() {
  prob_ = 1;
  max_expand_ratio_ = 1;
}

ExpansionParameter::~ExpansionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ExpansionParameter)
  SharedDtor();
}

void ExpansionParameter::SharedDtor() {
}

void ExpansionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpansionParameter& ExpansionParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpansionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ExpansionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ExpansionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    prob_ = 1;
    max_expand_ratio_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExpansionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float prob = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_expand_ratio = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_expand_ratio(&has_bits);
          max_expand_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpansionParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ExpansionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // optional float max_expand_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_expand_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ExpansionParameter)
  return target;
}

size_t ExpansionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ExpansionParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float prob = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_expand_ratio = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpansionParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ExpansionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpansionParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpansionParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ExpansionParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ExpansionParameter)
    MergeFrom(*source);
  }
}

void ExpansionParameter::MergeFrom(const ExpansionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ExpansionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prob_ = from.prob_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_expand_ratio_ = from.max_expand_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExpansionParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ExpansionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpansionParameter::CopyFrom(const ExpansionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ExpansionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpansionParameter::IsInitialized() const {
  return true;
}

void ExpansionParameter::InternalSwap(ExpansionParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prob_, other->prob_);
  swap(max_expand_ratio_, other->max_expand_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpansionParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LossParameter::InitAsDefaultInstance() {
}
class LossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LossParameter>()._has_bits_);
  static void set_has_ignore_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normalization(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_normalize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LossParameter::LossParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.LossParameter)
}
LossParameter::LossParameter(const LossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalization_) -
    reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalization_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LossParameter)
}

void LossParameter::SharedCtor() {
  ::memset(&ignore_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalize_) -
      reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
  normalization_ = 1;
}

LossParameter::~LossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LossParameter)
  SharedDtor();
}

void LossParameter::SharedDtor() {
}

void LossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossParameter& LossParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void LossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ignore_label_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normalize_) -
        reinterpret_cast<char*>(&ignore_label_)) + sizeof(normalize_));
    normalization_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ignore_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_label(&has_bits);
          ignore_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool normalize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_normalize(&has_bits);
          normalize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::LossParameter_NormalizationMode_IsValid(val))) {
            _internal_set_normalization(static_cast<::apollo::perception::inference::LossParameter_NormalizationMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ignore_label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ignore_label(), target);
  }

  // optional bool normalize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_normalize(), target);
  }

  // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_normalization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LossParameter)
  return target;
}

size_t LossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LossParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ignore_label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ignore_label());
    }

    // optional bool normalize = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.LossParameter.NormalizationMode normalization = 3 [default = VALID];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_normalization());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LossParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.LossParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.LossParameter)
    MergeFrom(*source);
  }
}

void LossParameter::MergeFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_ = from.normalize_;
    }
    if (cached_has_bits & 0x00000004u) {
      normalization_ = from.normalization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LossParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossParameter::CopyFrom(const LossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossParameter::IsInitialized() const {
  return true;
}

void LossParameter::InternalSwap(LossParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_label_, other->ignore_label_);
  swap(normalize_, other->normalize_);
  swap(normalization_, other->normalization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LossParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccuracyParameter::InitAsDefaultInstance() {
}
class AccuracyParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AccuracyParameter>()._has_bits_);
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ignore_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AccuracyParameter::AccuracyParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.AccuracyParameter)
}
AccuracyParameter::AccuracyParameter(const AccuracyParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_label_, &from.ignore_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&ignore_label_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AccuracyParameter)
}

void AccuracyParameter::SharedCtor() {
  ignore_label_ = 0;
  top_k_ = 1u;
  axis_ = 1;
}

AccuracyParameter::~AccuracyParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AccuracyParameter)
  SharedDtor();
}

void AccuracyParameter::SharedDtor() {
}

void AccuracyParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccuracyParameter& AccuracyParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccuracyParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void AccuracyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AccuracyParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ignore_label_ = 0;
    top_k_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AccuracyParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 top_k = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ignore_label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ignore_label(&has_bits);
          ignore_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccuracyParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AccuracyParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_k = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_k(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional int32 ignore_label = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ignore_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AccuracyParameter)
  return target;
}

size_t AccuracyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AccuracyParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ignore_label = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ignore_label());
    }

    // optional uint32 top_k = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_k());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccuracyParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccuracyParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccuracyParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.AccuracyParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.AccuracyParameter)
    MergeFrom(*source);
  }
}

void AccuracyParameter::MergeFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AccuracyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ignore_label_ = from.ignore_label_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000004u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccuracyParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyParameter::CopyFrom(const AccuracyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AccuracyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyParameter::IsInitialized() const {
  return true;
}

void AccuracyParameter::InternalSwap(AccuracyParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_label_, other->ignore_label_);
  swap(top_k_, other->top_k_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccuracyParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnnotatedDataParameter::InitAsDefaultInstance() {
}
class AnnotatedDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AnnotatedDataParameter>()._has_bits_);
  static void set_has_label_map_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_anno_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AnnotatedDataParameter::AnnotatedDataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.AnnotatedDataParameter)
}
AnnotatedDataParameter::AnnotatedDataParameter(const AnnotatedDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      batch_sampler_(from.batch_sampler_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_map_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label_map_file()) {
    label_map_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
  }
  ::memcpy(&anno_type_, &from.anno_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_classes_) -
    reinterpret_cast<char*>(&anno_type_)) + sizeof(num_classes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnnotatedDataParameter)
}

void AnnotatedDataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  label_map_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anno_type_ = 0;
  num_classes_ = 3;
}

AnnotatedDataParameter::~AnnotatedDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnnotatedDataParameter)
  SharedDtor();
}

void AnnotatedDataParameter::SharedDtor() {
  label_map_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnnotatedDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnotatedDataParameter& AnnotatedDataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnnotatedDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void AnnotatedDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnnotatedDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_sampler_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_map_file_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    anno_type_ = 0;
    num_classes_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AnnotatedDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_batch_sampler(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string label_map_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label_map_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.AnnotatedDataParameter.label_map_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::AnnotatedDatum_AnnotationType_IsValid(val))) {
            _internal_set_anno_type(static_cast<::apollo::perception::inference::AnnotatedDatum_AnnotationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 10 [default = 3];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnnotatedDataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnnotatedDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_batch_sampler_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_batch_sampler(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string label_map_file = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label_map_file().data(), static_cast<int>(this->_internal_label_map_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.AnnotatedDataParameter.label_map_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label_map_file(), target);
  }

  // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_anno_type(), target);
  }

  // optional int32 num_classes = 10 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_num_classes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnnotatedDataParameter)
  return target;
}

size_t AnnotatedDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnnotatedDataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BatchSampler batch_sampler = 1;
  total_size += 1UL * this->_internal_batch_sampler_size();
  for (const auto& msg : this->batch_sampler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string label_map_file = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label_map_file());
    }

    // optional .apollo.perception.inference.AnnotatedDatum.AnnotationType anno_type = 3 [default = BBOX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_anno_type());
    }

    // optional int32 num_classes = 10 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_classes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotatedDataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.AnnotatedDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AnnotatedDataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnnotatedDataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.AnnotatedDataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.AnnotatedDataParameter)
    MergeFrom(*source);
  }
}

void AnnotatedDataParameter::MergeFrom(const AnnotatedDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnnotatedDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_sampler_.MergeFrom(from.batch_sampler_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      label_map_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      anno_type_ = from.anno_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_classes_ = from.num_classes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnotatedDataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.AnnotatedDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnotatedDataParameter::CopyFrom(const AnnotatedDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnnotatedDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotatedDataParameter::IsInitialized() const {
  return true;
}

void AnnotatedDataParameter::InternalSwap(AnnotatedDataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  batch_sampler_.InternalSwap(&other->batch_sampler_);
  label_map_file_.Swap(&other->label_map_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(anno_type_, other->anno_type_);
  swap(num_classes_, other->num_classes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnnotatedDataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArgMaxParameter::InitAsDefaultInstance() {
}
class ArgMaxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ArgMaxParameter>()._has_bits_);
  static void set_has_out_max_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ArgMaxParameter::ArgMaxParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ArgMaxParameter)
}
ArgMaxParameter::ArgMaxParameter(const ArgMaxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_max_val_, &from.out_max_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_k_) -
    reinterpret_cast<char*>(&out_max_val_)) + sizeof(top_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ArgMaxParameter)
}

void ArgMaxParameter::SharedCtor() {
  ::memset(&out_max_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_) -
      reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
  top_k_ = 1u;
}

ArgMaxParameter::~ArgMaxParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ArgMaxParameter)
  SharedDtor();
}

void ArgMaxParameter::SharedDtor() {
}

void ArgMaxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArgMaxParameter& ArgMaxParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArgMaxParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ArgMaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ArgMaxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&out_max_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axis_) -
        reinterpret_cast<char*>(&out_max_val_)) + sizeof(axis_));
    top_k_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ArgMaxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool out_max_val = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_out_max_val(&has_bits);
          out_max_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top_k = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArgMaxParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ArgMaxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool out_max_val = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_out_max_val(), target);
  }

  // optional uint32 top_k = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional int32 axis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ArgMaxParameter)
  return target;
}

size_t ArgMaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ArgMaxParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool out_max_val = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional uint32 top_k = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_k());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArgMaxParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ArgMaxParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArgMaxParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ArgMaxParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ArgMaxParameter)
    MergeFrom(*source);
  }
}

void ArgMaxParameter::MergeFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ArgMaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      out_max_val_ = from.out_max_val_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_k_ = from.top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ArgMaxParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgMaxParameter::CopyFrom(const ArgMaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ArgMaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgMaxParameter::IsInitialized() const {
  return true;
}

void ArgMaxParameter::InternalSwap(ArgMaxParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(out_max_val_, other->out_max_val_);
  swap(axis_, other->axis_);
  swap(top_k_, other->top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgMaxParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConcatParameter::InitAsDefaultInstance() {
}
class ConcatParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcatParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_concat_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConcatParameter::ConcatParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ConcatParameter)
}
ConcatParameter::ConcatParameter(const ConcatParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&concat_dim_, &from.concat_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&concat_dim_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ConcatParameter)
}

void ConcatParameter::SharedCtor() {
  concat_dim_ = 1u;
  axis_ = 1;
}

ConcatParameter::~ConcatParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ConcatParameter)
  SharedDtor();
}

void ConcatParameter::SharedDtor() {
}

void ConcatParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConcatParameter& ConcatParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConcatParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ConcatParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ConcatParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    concat_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConcatParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 concat_dim = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_concat_dim(&has_bits);
          concat_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcatParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ConcatParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 concat_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_concat_dim(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ConcatParameter)
  return target;
}

size_t ConcatParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ConcatParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 concat_dim = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_concat_dim());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConcatParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ConcatParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ConcatParameter)
    MergeFrom(*source);
  }
}

void ConcatParameter::MergeFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ConcatParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConcatParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatParameter::CopyFrom(const ConcatParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ConcatParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatParameter::IsInitialized() const {
  return true;
}

void ConcatParameter::InternalSwap(ConcatParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(concat_dim_, other->concat_dim_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchNormParameter::InitAsDefaultInstance() {
}
class BatchNormParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchNormParameter>()._has_bits_);
  static void set_has_use_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_moving_average_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BatchNormParameter::BatchNormParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BatchNormParameter)
}
BatchNormParameter::BatchNormParameter(const BatchNormParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_global_stats_, &from.use_global_stats_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&use_global_stats_)) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BatchNormParameter)
}

void BatchNormParameter::SharedCtor() {
  use_global_stats_ = false;
  moving_average_fraction_ = 0.999f;
  eps_ = 1e-05f;
}

BatchNormParameter::~BatchNormParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BatchNormParameter)
  SharedDtor();
}

void BatchNormParameter::SharedDtor() {
}

void BatchNormParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchNormParameter& BatchNormParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchNormParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BatchNormParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BatchNormParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    use_global_stats_ = false;
    moving_average_fraction_ = 0.999f;
    eps_ = 1e-05f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BatchNormParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_global_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_global_stats(&has_bits);
          use_global_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float moving_average_fraction = 2 [default = 0.999];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_moving_average_fraction(&has_bits);
          moving_average_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float eps = 3 [default = 1e-05];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_eps(&has_bits);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchNormParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BatchNormParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_global_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_global_stats(), target);
  }

  // optional float moving_average_fraction = 2 [default = 0.999];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_moving_average_fraction(), target);
  }

  // optional float eps = 3 [default = 1e-05];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_eps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BatchNormParameter)
  return target;
}

size_t BatchNormParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BatchNormParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool use_global_stats = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float moving_average_fraction = 2 [default = 0.999];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float eps = 3 [default = 1e-05];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchNormParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchNormParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BatchNormParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BatchNormParameter)
    MergeFrom(*source);
  }
}

void BatchNormParameter::MergeFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BatchNormParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      use_global_stats_ = from.use_global_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      moving_average_fraction_ = from.moving_average_fraction_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatchNormParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormParameter::CopyFrom(const BatchNormParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BatchNormParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormParameter::IsInitialized() const {
  return true;
}

void BatchNormParameter::InternalSwap(BatchNormParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_global_stats_, other->use_global_stats_);
  swap(moving_average_fraction_, other->moving_average_fraction_);
  swap(eps_, other->eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNormParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BiasParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_BiasParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class BiasParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<BiasParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::FillerParameter& filler(const BiasParameter* msg);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::inference::FillerParameter&
BiasParameter::_Internal::filler(const BiasParameter* msg) {
  return *msg->filler_;
}
BiasParameter::BiasParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.BiasParameter)
}
BiasParameter::BiasParameter(const BiasParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_filler()) {
    filler_ = new ::apollo::perception::inference::FillerParameter(*from.filler_);
  } else {
    filler_ = nullptr;
  }
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.BiasParameter)
}

void BiasParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  filler_ = nullptr;
  axis_ = 1;
  num_axes_ = 1;
}

BiasParameter::~BiasParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.BiasParameter)
  SharedDtor();
}

void BiasParameter::SharedDtor() {
  if (this != internal_default_instance()) delete filler_;
}

void BiasParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiasParameter& BiasParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiasParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void BiasParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.BiasParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filler_ != nullptr);
      filler_->Clear();
    }
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BiasParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_axes = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_axes(&has_bits);
          num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BiasParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.BiasParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_axes(), target);
  }

  // optional .apollo.perception.inference.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.BiasParameter)
  return target;
}

size_t BiasParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.BiasParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.inference.FillerParameter filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filler_);
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_axes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiasParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BiasParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BiasParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.BiasParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.BiasParameter)
    MergeFrom(*source);
  }
}

void BiasParameter::MergeFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.BiasParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiasParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiasParameter::CopyFrom(const BiasParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.BiasParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiasParameter::IsInitialized() const {
  return true;
}

void BiasParameter::InternalSwap(BiasParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filler_, other->filler_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiasParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContrastiveLossParameter::InitAsDefaultInstance() {
}
class ContrastiveLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ContrastiveLossParameter>()._has_bits_);
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContrastiveLossParameter::ContrastiveLossParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ContrastiveLossParameter)
}
ContrastiveLossParameter::ContrastiveLossParameter(const ContrastiveLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&legacy_version_, &from.legacy_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&legacy_version_)) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ContrastiveLossParameter)
}

void ContrastiveLossParameter::SharedCtor() {
  legacy_version_ = false;
  margin_ = 1;
}

ContrastiveLossParameter::~ContrastiveLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ContrastiveLossParameter)
  SharedDtor();
}

void ContrastiveLossParameter::SharedDtor() {
}

void ContrastiveLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContrastiveLossParameter& ContrastiveLossParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContrastiveLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ContrastiveLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ContrastiveLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    legacy_version_ = false;
    margin_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContrastiveLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float margin = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_margin(&has_bits);
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool legacy_version = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_legacy_version(&has_bits);
          legacy_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContrastiveLossParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ContrastiveLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float margin = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_margin(), target);
  }

  // optional bool legacy_version = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_legacy_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ContrastiveLossParameter)
  return target;
}

size_t ContrastiveLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ContrastiveLossParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool legacy_version = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float margin = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContrastiveLossParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ContrastiveLossParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContrastiveLossParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ContrastiveLossParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ContrastiveLossParameter)
    MergeFrom(*source);
  }
}

void ContrastiveLossParameter::MergeFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ContrastiveLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_version_ = from.legacy_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      margin_ = from.margin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContrastiveLossParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContrastiveLossParameter::CopyFrom(const ContrastiveLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ContrastiveLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContrastiveLossParameter::IsInitialized() const {
  return true;
}

void ContrastiveLossParameter::InternalSwap(ContrastiveLossParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(legacy_version_, other->legacy_version_);
  swap(margin_, other->margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContrastiveLossParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvolutionParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_ConvolutionParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_ConvolutionParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class ConvolutionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ConvolutionParameter>()._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pad_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pad_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kernel_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kernel_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stride_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stride_w(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const ConvolutionParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const ConvolutionParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_force_nd_im2col(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::perception::inference::FillerParameter&
ConvolutionParameter::_Internal::weight_filler(const ConvolutionParameter* msg) {
  return *msg->weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
ConvolutionParameter::_Internal::bias_filler(const ConvolutionParameter* msg) {
  return *msg->bias_filler_;
}
ConvolutionParameter::ConvolutionParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ConvolutionParameter)
}
ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pad_(from.pad_),
      kernel_size_(from.kernel_size_),
      stride_(from.stride_),
      dilation_(from.dilation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = nullptr;
  }
  if (from._internal_has_bias_filler()) {
    bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = nullptr;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(group_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_nd_im2col_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(force_nd_im2col_));
  axis_ = 1;
  bias_term_ = true;
  group_ = 1u;
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void ConvolutionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvolutionParameter& ConvolutionParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvolutionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ConvolutionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_.Clear();
  kernel_size_.Clear();
  stride_.Clear();
  dilation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_h_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(stride_h_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&stride_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_nd_im2col_) -
        reinterpret_cast<char*>(&stride_w_)) + sizeof(force_nd_im2col_));
    axis_ = 1;
    bias_term_ = true;
    group_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConvolutionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bias_term = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bias_term(&has_bits);
          bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 pad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pad(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pad(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 kernel_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_kernel_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_kernel_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 group = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_group(&has_bits);
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stride = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stride(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stride(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_h = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pad_h(&has_bits);
          pad_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_w = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pad_w(&has_bits);
          pad_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_h = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_kernel_h(&has_bits);
          kernel_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_w = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_kernel_w(&has_bits);
          kernel_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride_h = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_stride_h(&has_bits);
          stride_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride_w = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_stride_w(&has_bits);
          stride_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ConvolutionParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::ConvolutionParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_nd_im2col = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_force_nd_im2col(&has_bits);
          force_nd_im2col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dilation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_dilation(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dilation(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvolutionParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ConvolutionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bias_term(), target);
  }

  // repeated uint32 pad = 3;
  for (int i = 0, n = this->_internal_pad_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pad(i), target);
  }

  // repeated uint32 kernel_size = 4;
  for (int i = 0, n = this->_internal_kernel_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kernel_size(i), target);
  }

  // optional uint32 group = 5 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_group(), target);
  }

  // repeated uint32 stride = 6;
  for (int i = 0, n = this->_internal_stride_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stride(i), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::weight_filler(this), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bias_filler(this), target, stream);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pad_w(), target);
  }

  // optional uint32 kernel_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_kernel_h(), target);
  }

  // optional uint32 kernel_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_kernel_w(), target);
  }

  // optional uint32 stride_h = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_stride_h(), target);
  }

  // optional uint32 stride_w = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_stride_w(), target);
  }

  // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_engine(), target);
  }

  // optional int32 axis = 16 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_axis(), target);
  }

  // optional bool force_nd_im2col = 17 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_force_nd_im2col(), target);
  }

  // repeated uint32 dilation = 18;
  for (int i = 0, n = this->_internal_dilation_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_dilation(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ConvolutionParameter)
  return target;
}

size_t ConvolutionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ConvolutionParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pad = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->pad_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pad_size());
    total_size += data_size;
  }

  // repeated uint32 kernel_size = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->kernel_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kernel_size_size());
    total_size += data_size;
  }

  // repeated uint32 stride = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stride_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stride_size());
    total_size += data_size;
  }

  // repeated uint32 dilation = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dilation_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dilation_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_output());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_h());
    }

    // optional uint32 pad_w = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_w());
    }

    // optional uint32 kernel_h = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kernel_h());
    }

    // optional uint32 kernel_w = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kernel_w());
    }

    // optional uint32 stride_h = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride_h());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 stride_w = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride_w());
    }

    // optional .apollo.perception.inference.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional bool force_nd_im2col = 17 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 axis = 16 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional bool bias_term = 2 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 group = 5 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvolutionParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ConvolutionParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ConvolutionParameter)
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ConvolutionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_.MergeFrom(from.pad_);
  kernel_size_.MergeFrom(from.kernel_size_);
  stride_.MergeFrom(from.stride_);
  dilation_.MergeFrom(from.dilation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_h_ = from.pad_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      stride_h_ = from.stride_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      force_nd_im2col_ = from.force_nd_im2col_;
    }
    if (cached_has_bits & 0x00000800u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00001000u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00002000u) {
      group_ = from.group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {
  return true;
}

void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pad_.InternalSwap(&other->pad_);
  kernel_size_.InternalSwap(&other->kernel_size_);
  stride_.InternalSwap(&other->stride_);
  dilation_.InternalSwap(&other->dilation_);
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(pad_h_, other->pad_h_);
  swap(pad_w_, other->pad_w_);
  swap(kernel_h_, other->kernel_h_);
  swap(kernel_w_, other->kernel_w_);
  swap(stride_h_, other->stride_h_);
  swap(stride_w_, other->stride_w_);
  swap(engine_, other->engine_);
  swap(force_nd_im2col_, other->force_nd_im2col_);
  swap(axis_, other->axis_);
  swap(bias_term_, other->bias_term_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CropParameter::InitAsDefaultInstance() {
}
class CropParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CropParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CropParameter::CropParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.CropParameter)
}
CropParameter::CropParameter(const CropParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      offset_(from.offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  axis_ = from.axis_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.CropParameter)
}

void CropParameter::SharedCtor() {
  axis_ = 2;
}

CropParameter::~CropParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.CropParameter)
  SharedDtor();
}

void CropParameter::SharedDtor() {
}

void CropParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CropParameter& CropParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CropParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void CropParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.CropParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_.Clear();
  axis_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CropParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_offset(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CropParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.CropParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // repeated uint32 offset = 2;
  for (int i = 0, n = this->_internal_offset_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.CropParameter)
  return target;
}

size_t CropParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.CropParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 offset = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->offset_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_offset_size());
    total_size += data_size;
  }

  // optional int32 axis = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CropParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CropParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CropParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.CropParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.CropParameter)
    MergeFrom(*source);
  }
}

void CropParameter::MergeFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.CropParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offset_.MergeFrom(from.offset_);
  if (from._internal_has_axis()) {
    _internal_set_axis(from._internal_axis());
  }
}

void CropParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropParameter::CopyFrom(const CropParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.CropParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropParameter::IsInitialized() const {
  return true;
}

void CropParameter::InternalSwap(CropParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  offset_.InternalSwap(&other->offset_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CropParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataParameter::InitAsDefaultInstance() {
}
class DataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DataParameter>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_force_encoded_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prefetch(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

DataParameter::DataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DataParameter)
}
DataParameter::DataParameter(const DataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mean_file()) {
    mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefetch_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(prefetch_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DataParameter)
}

void DataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backend_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(backend_));
  scale_ = 1;
  prefetch_ = 4u;
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataParameter& DataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mean_file_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&backend_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(backend_));
  }
  if (cached_has_bits & 0x00000300u) {
    scale_ = 1;
    prefetch_ = 4u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.DataParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string mean_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.DataParameter.mean_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crop_size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crop_size(&has_bits);
          crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mirror = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mirror(&has_bits);
          mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rand_skip = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rand_skip(&has_bits);
          rand_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::DataParameter_DB_IsValid(val))) {
            _internal_set_backend(static_cast<::apollo::perception::inference::DataParameter_DB>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool force_encoded_color = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_force_encoded_color(&has_bits);
          force_encoded_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prefetch = 10 [default = 4];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_prefetch(&has_bits);
          prefetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DataParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rand_skip(), target);
  }

  // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_backend(), target);
  }

  // optional bool force_encoded_color = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_force_encoded_color(), target);
  }

  // optional uint32 prefetch = 10 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_prefetch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DataParameter)
  return target;
}

size_t DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional uint32 batch_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rand_skip());
    }

    // optional bool mirror = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool force_encoded_color = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.DataParameter.DB backend = 8 [default = LEVELDB];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_backend());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 prefetch = 10 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prefetch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DataParameter)
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000040u) {
      force_encoded_color_ = from.force_encoded_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      backend_ = from.backend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000200u) {
      prefetch_ = from.prefetch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {
  return true;
}

void DataParameter::InternalSwap(DataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mean_file_.Swap(&other->mean_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(mirror_, other->mirror_);
  swap(force_encoded_color_, other->force_encoded_color_);
  swap(backend_, other->backend_);
  swap(scale_, other->scale_);
  swap(prefetch_, other->prefetch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionEvaluateParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_DetectionEvaluateParameter_default_instance_._instance.get_mutable()->resize_param_ = const_cast< ::apollo::perception::inference::ResizeParameter*>(
      ::apollo::perception::inference::ResizeParameter::internal_default_instance());
}
class DetectionEvaluateParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectionEvaluateParameter>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_overlap_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_evaluate_difficult_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name_size_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::ResizeParameter& resize_param(const DetectionEvaluateParameter* msg);
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::ResizeParameter&
DetectionEvaluateParameter::_Internal::resize_param(const DetectionEvaluateParameter* msg) {
  return *msg->resize_param_;
}
DetectionEvaluateParameter::DetectionEvaluateParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DetectionEvaluateParameter)
}
DetectionEvaluateParameter::DetectionEvaluateParameter(const DetectionEvaluateParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_size_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_size_file()) {
    name_size_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_size_file_);
  }
  if (from._internal_has_resize_param()) {
    resize_param_ = new ::apollo::perception::inference::ResizeParameter(*from.resize_param_);
  } else {
    resize_param_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&evaluate_difficult_gt_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(evaluate_difficult_gt_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DetectionEvaluateParameter)
}

void DetectionEvaluateParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  name_size_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resize_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_label_id_) -
      reinterpret_cast<char*>(&resize_param_)) + sizeof(background_label_id_));
  overlap_threshold_ = 0.5f;
  evaluate_difficult_gt_ = true;
}

DetectionEvaluateParameter::~DetectionEvaluateParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DetectionEvaluateParameter)
  SharedDtor();
}

void DetectionEvaluateParameter::SharedDtor() {
  name_size_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resize_param_;
}

void DetectionEvaluateParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionEvaluateParameter& DetectionEvaluateParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionEvaluateParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DetectionEvaluateParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DetectionEvaluateParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_size_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(resize_param_ != nullptr);
      resize_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_label_id_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(background_label_id_));
    overlap_threshold_ = 0.5f;
    evaluate_difficult_gt_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DetectionEvaluateParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 background_label_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_background_label_id(&has_bits);
          background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float overlap_threshold = 3 [default = 0.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_overlap_threshold(&has_bits);
          overlap_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool evaluate_difficult_gt = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_evaluate_difficult_gt(&has_bits);
          evaluate_difficult_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_size_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name_size_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.DetectionEvaluateParameter.name_size_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionEvaluateParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DetectionEvaluateParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional uint32 background_label_id = 2 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_background_label_id(), target);
  }

  // optional float overlap_threshold = 3 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_overlap_threshold(), target);
  }

  // optional bool evaluate_difficult_gt = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_evaluate_difficult_gt(), target);
  }

  // optional string name_size_file = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_size_file().data(), static_cast<int>(this->_internal_name_size_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DetectionEvaluateParameter.name_size_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_size_file(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::resize_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DetectionEvaluateParameter)
  return target;
}

size_t DetectionEvaluateParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DetectionEvaluateParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name_size_file = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_size_file());
    }

    // optional .apollo.perception.inference.ResizeParameter resize_param = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resize_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

    // optional uint32 background_label_id = 2 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_background_label_id());
    }

    // optional float overlap_threshold = 3 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool evaluate_difficult_gt = 4 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionEvaluateParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DetectionEvaluateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionEvaluateParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionEvaluateParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DetectionEvaluateParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DetectionEvaluateParameter)
    MergeFrom(*source);
  }
}

void DetectionEvaluateParameter::MergeFrom(const DetectionEvaluateParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DetectionEvaluateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_size_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_size_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_resize_param()->::apollo::perception::inference::ResizeParameter::MergeFrom(from._internal_resize_param());
    }
    if (cached_has_bits & 0x00000004u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000008u) {
      background_label_id_ = from.background_label_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      overlap_threshold_ = from.overlap_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      evaluate_difficult_gt_ = from.evaluate_difficult_gt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionEvaluateParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DetectionEvaluateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionEvaluateParameter::CopyFrom(const DetectionEvaluateParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DetectionEvaluateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionEvaluateParameter::IsInitialized() const {
  return true;
}

void DetectionEvaluateParameter::InternalSwap(DetectionEvaluateParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_size_file_.Swap(&other->name_size_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resize_param_, other->resize_param_);
  swap(num_classes_, other->num_classes_);
  swap(background_label_id_, other->background_label_id_);
  swap(overlap_threshold_, other->overlap_threshold_);
  swap(evaluate_difficult_gt_, other->evaluate_difficult_gt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionEvaluateParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NonMaximumSuppressionParameter::InitAsDefaultInstance() {
}
class NonMaximumSuppressionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NonMaximumSuppressionParameter>()._has_bits_);
  static void set_has_nms_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eta(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NonMaximumSuppressionParameter::NonMaximumSuppressionParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NonMaximumSuppressionParameter)
}
NonMaximumSuppressionParameter::NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_k_, &from.top_k_,
    static_cast<size_t>(reinterpret_cast<char*>(&eta_) -
    reinterpret_cast<char*>(&top_k_)) + sizeof(eta_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NonMaximumSuppressionParameter)
}

void NonMaximumSuppressionParameter::SharedCtor() {
  top_k_ = 0;
  nms_threshold_ = 0.3f;
  eta_ = 1;
}

NonMaximumSuppressionParameter::~NonMaximumSuppressionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NonMaximumSuppressionParameter)
  SharedDtor();
}

void NonMaximumSuppressionParameter::SharedDtor() {
}

void NonMaximumSuppressionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NonMaximumSuppressionParameter& NonMaximumSuppressionParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NonMaximumSuppressionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NonMaximumSuppressionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    top_k_ = 0;
    nms_threshold_ = 0.3f;
    eta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NonMaximumSuppressionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float nms_threshold = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_nms_threshold(&has_bits);
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 top_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_k(&has_bits);
          top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float eta = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_eta(&has_bits);
          eta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NonMaximumSuppressionParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float nms_threshold = 1 [default = 0.3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_nms_threshold(), target);
  }

  // optional int32 top_k = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_k(), target);
  }

  // optional float eta = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_eta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NonMaximumSuppressionParameter)
  return target;
}

size_t NonMaximumSuppressionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 top_k = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_top_k());
    }

    // optional float nms_threshold = 1 [default = 0.3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float eta = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NonMaximumSuppressionParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NonMaximumSuppressionParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NonMaximumSuppressionParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NonMaximumSuppressionParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NonMaximumSuppressionParameter)
    MergeFrom(*source);
  }
}

void NonMaximumSuppressionParameter::MergeFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      top_k_ = from.top_k_;
    }
    if (cached_has_bits & 0x00000002u) {
      nms_threshold_ = from.nms_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      eta_ = from.eta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NonMaximumSuppressionParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonMaximumSuppressionParameter::CopyFrom(const NonMaximumSuppressionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NonMaximumSuppressionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonMaximumSuppressionParameter::IsInitialized() const {
  return true;
}

void NonMaximumSuppressionParameter::InternalSwap(NonMaximumSuppressionParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(top_k_, other->top_k_);
  swap(nms_threshold_, other->nms_threshold_);
  swap(eta_, other->eta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NonMaximumSuppressionParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveOutputParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_SaveOutputParameter_default_instance_._instance.get_mutable()->resize_param_ = const_cast< ::apollo::perception::inference::ResizeParameter*>(
      ::apollo::perception::inference::ResizeParameter::internal_default_instance());
}
class SaveOutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveOutputParameter>()._has_bits_);
  static void set_has_output_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_name_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label_map_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name_size_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_test_image(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::inference::ResizeParameter& resize_param(const SaveOutputParameter* msg);
  static void set_has_resize_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::inference::ResizeParameter&
SaveOutputParameter::_Internal::resize_param(const SaveOutputParameter* msg) {
  return *msg->resize_param_;
}
SaveOutputParameter::SaveOutputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SaveOutputParameter)
}
SaveOutputParameter::SaveOutputParameter(const SaveOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_directory()) {
    output_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_directory_);
  }
  output_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_name_prefix()) {
    output_name_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_name_prefix_);
  }
  output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_format()) {
    output_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_format_);
  }
  label_map_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label_map_file()) {
    label_map_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
  }
  name_size_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_size_file()) {
    name_size_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_size_file_);
  }
  if (from._internal_has_resize_param()) {
    resize_param_ = new ::apollo::perception::inference::ResizeParameter(*from.resize_param_);
  } else {
    resize_param_ = nullptr;
  }
  num_test_image_ = from.num_test_image_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SaveOutputParameter)
}

void SaveOutputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  output_directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_map_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_size_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resize_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_test_image_) -
      reinterpret_cast<char*>(&resize_param_)) + sizeof(num_test_image_));
}

SaveOutputParameter::~SaveOutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SaveOutputParameter)
  SharedDtor();
}

void SaveOutputParameter::SharedDtor() {
  output_directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_name_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_map_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_size_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resize_param_;
}

void SaveOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveOutputParameter& SaveOutputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SaveOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SaveOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      output_directory_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      output_name_prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      output_format_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      label_map_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      name_size_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(resize_param_ != nullptr);
      resize_param_->Clear();
    }
  }
  num_test_image_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SaveOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string output_directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_output_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.output_directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_name_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_name_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.output_name_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_output_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.output_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label_map_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label_map_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.label_map_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_size_file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name_size_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.SaveOutputParameter.name_size_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_test_image = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_test_image(&has_bits);
          num_test_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_resize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveOutputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SaveOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string output_directory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_directory().data(), static_cast<int>(this->_internal_output_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.output_directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_directory(), target);
  }

  // optional string output_name_prefix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_name_prefix().data(), static_cast<int>(this->_internal_output_name_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.output_name_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_name_prefix(), target);
  }

  // optional string output_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_format().data(), static_cast<int>(this->_internal_output_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.output_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_output_format(), target);
  }

  // optional string label_map_file = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label_map_file().data(), static_cast<int>(this->_internal_label_map_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.label_map_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label_map_file(), target);
  }

  // optional string name_size_file = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_size_file().data(), static_cast<int>(this->_internal_name_size_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.SaveOutputParameter.name_size_file");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_size_file(), target);
  }

  // optional uint32 num_test_image = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_num_test_image(), target);
  }

  // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::resize_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SaveOutputParameter)
  return target;
}

size_t SaveOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SaveOutputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string output_directory = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_directory());
    }

    // optional string output_name_prefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_name_prefix());
    }

    // optional string output_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_format());
    }

    // optional string label_map_file = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label_map_file());
    }

    // optional string name_size_file = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_size_file());
    }

    // optional .apollo.perception.inference.ResizeParameter resize_param = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resize_param_);
    }

    // optional uint32 num_test_image = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_test_image());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveOutputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SaveOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveOutputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveOutputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SaveOutputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SaveOutputParameter)
    MergeFrom(*source);
  }
}

void SaveOutputParameter::MergeFrom(const SaveOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SaveOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      output_directory_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_directory_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      output_name_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_name_prefix_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      output_format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_format_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      label_map_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_map_file_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      name_size_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_size_file_);
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_resize_param()->::apollo::perception::inference::ResizeParameter::MergeFrom(from._internal_resize_param());
    }
    if (cached_has_bits & 0x00000040u) {
      num_test_image_ = from.num_test_image_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SaveOutputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SaveOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveOutputParameter::CopyFrom(const SaveOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SaveOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveOutputParameter::IsInitialized() const {
  return true;
}

void SaveOutputParameter::InternalSwap(SaveOutputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  output_directory_.Swap(&other->output_directory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_name_prefix_.Swap(&other->output_name_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_format_.Swap(&other->output_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_map_file_.Swap(&other->label_map_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_size_file_.Swap(&other->name_size_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resize_param_, other->resize_param_);
  swap(num_test_image_, other->num_test_image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveOutputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionOutputParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_DetectionOutputParameter_default_instance_._instance.get_mutable()->nms_param_ = const_cast< ::apollo::perception::inference::NonMaximumSuppressionParameter*>(
      ::apollo::perception::inference::NonMaximumSuppressionParameter::internal_default_instance());
  ::apollo::perception::inference::_DetectionOutputParameter_default_instance_._instance.get_mutable()->save_output_param_ = const_cast< ::apollo::perception::inference::SaveOutputParameter*>(
      ::apollo::perception::inference::SaveOutputParameter::internal_default_instance());
}
class DetectionOutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectionOutputParameter>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_share_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const DetectionOutputParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::SaveOutputParameter& save_output_param(const DetectionOutputParameter* msg);
  static void set_has_save_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_variance_encoded_in_target(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_visualize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_visualize_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_save_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
DetectionOutputParameter::_Internal::nms_param(const DetectionOutputParameter* msg) {
  return *msg->nms_param_;
}
const ::apollo::perception::inference::SaveOutputParameter&
DetectionOutputParameter::_Internal::save_output_param(const DetectionOutputParameter* msg) {
  return *msg->save_output_param_;
}
DetectionOutputParameter::DetectionOutputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DetectionOutputParameter)
}
DetectionOutputParameter::DetectionOutputParameter(const DetectionOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_file()) {
    save_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_file_);
  }
  if (from._internal_has_nms_param()) {
    nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from.nms_param_);
  } else {
    nms_param_ = nullptr;
  }
  if (from._internal_has_save_output_param()) {
    save_output_param_ = new ::apollo::perception::inference::SaveOutputParameter(*from.save_output_param_);
  } else {
    save_output_param_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_type_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(code_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DetectionOutputParameter)
}

void DetectionOutputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  save_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nms_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visualize_threshold_) -
      reinterpret_cast<char*>(&nms_param_)) + sizeof(visualize_threshold_));
  keep_top_k_ = -1;
  share_location_ = true;
  code_type_ = 1;
}

DetectionOutputParameter::~DetectionOutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DetectionOutputParameter)
  SharedDtor();
}

void DetectionOutputParameter::SharedDtor() {
  save_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nms_param_;
  if (this != internal_default_instance()) delete save_output_param_;
}

void DetectionOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionOutputParameter& DetectionOutputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DetectionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DetectionOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      save_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(nms_param_ != nullptr);
      nms_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(save_output_param_ != nullptr);
      save_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visualize_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(visualize_));
  }
  if (cached_has_bits & 0x00000f00u) {
    visualize_threshold_ = 0;
    keep_top_k_ = -1;
    share_location_ = true;
    code_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DetectionOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_location = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_share_location(&has_bits);
          share_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 background_label_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_background_label_id(&has_bits);
          background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(val))) {
            _internal_set_code_type(static_cast<::apollo::perception::inference::PriorBoxParameter_CodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool variance_encoded_in_target = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_variance_encoded_in_target(&has_bits);
          variance_encoded_in_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence_threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_confidence_threshold(&has_bits);
          confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool visualize = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_visualize(&has_bits);
          visualize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float visualize_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_visualize_threshold(&has_bits);
          visualize_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string save_file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_save_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.DetectionOutputParameter.save_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionOutputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DetectionOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional bool share_location = 2 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_share_location(), target);
  }

  // optional int32 background_label_id = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_background_label_id(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nms_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::save_output_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_code_type(), target);
  }

  // optional int32 keep_top_k = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_keep_top_k(), target);
  }

  // optional bool variance_encoded_in_target = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_variance_encoded_in_target(), target);
  }

  // optional float confidence_threshold = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_confidence_threshold(), target);
  }

  // optional bool visualize = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_visualize(), target);
  }

  // optional float visualize_threshold = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_visualize_threshold(), target);
  }

  // optional string save_file = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_save_file().data(), static_cast<int>(this->_internal_save_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DetectionOutputParameter.save_file");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_save_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DetectionOutputParameter)
  return target;
}

size_t DetectionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DetectionOutputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string save_file = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_save_file());
    }

    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

    // optional .apollo.perception.inference.SaveOutputParameter save_output_param = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *save_output_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

    // optional int32 background_label_id = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_background_label_id());
    }

    // optional float confidence_threshold = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool variance_encoded_in_target = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool visualize = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float visualize_threshold = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 keep_top_k = 7 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_keep_top_k());
    }

    // optional bool share_location = 2 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionOutputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DetectionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionOutputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionOutputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DetectionOutputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DetectionOutputParameter)
    MergeFrom(*source);
  }
}

void DetectionOutputParameter::MergeFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DetectionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      save_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.save_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_save_output_param()->::apollo::perception::inference::SaveOutputParameter::MergeFrom(from._internal_save_output_param());
    }
    if (cached_has_bits & 0x00000008u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000010u) {
      background_label_id_ = from.background_label_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      variance_encoded_in_target_ = from.variance_encoded_in_target_;
    }
    if (cached_has_bits & 0x00000080u) {
      visualize_ = from.visualize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      visualize_threshold_ = from.visualize_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      keep_top_k_ = from.keep_top_k_;
    }
    if (cached_has_bits & 0x00000400u) {
      share_location_ = from.share_location_;
    }
    if (cached_has_bits & 0x00000800u) {
      code_type_ = from.code_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectionOutputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DetectionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionOutputParameter::CopyFrom(const DetectionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DetectionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionOutputParameter::IsInitialized() const {
  return true;
}

void DetectionOutputParameter::InternalSwap(DetectionOutputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  save_file_.Swap(&other->save_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nms_param_, other->nms_param_);
  swap(save_output_param_, other->save_output_param_);
  swap(num_classes_, other->num_classes_);
  swap(background_label_id_, other->background_label_id_);
  swap(confidence_threshold_, other->confidence_threshold_);
  swap(variance_encoded_in_target_, other->variance_encoded_in_target_);
  swap(visualize_, other->visualize_);
  swap(visualize_threshold_, other->visualize_threshold_);
  swap(keep_top_k_, other->keep_top_k_);
  swap(share_location_, other->share_location_);
  swap(code_type_, other->code_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionOutputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionOutputParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_RegionOutputParameter_default_instance_._instance.get_mutable()->nms_param_ = const_cast< ::apollo::perception::inference::NonMaximumSuppressionParameter*>(
      ::apollo::perception::inference::NonMaximumSuppressionParameter::internal_default_instance());
}
class RegionOutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionOutputParameter>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const RegionOutputParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nms_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nms_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_rpn(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
RegionOutputParameter::_Internal::nms_param(const RegionOutputParameter* msg) {
  return *msg->nms_param_;
}
RegionOutputParameter::RegionOutputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.RegionOutputParameter)
}
RegionOutputParameter::RegionOutputParameter(const RegionOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      anchorbox_(from.anchorbox_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nms_param()) {
    nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from.nms_param_);
  } else {
    nms_param_ = nullptr;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_top_k_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(keep_top_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RegionOutputParameter)
}

void RegionOutputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&nms_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rpn_) -
      reinterpret_cast<char*>(&nms_param_)) + sizeof(is_rpn_));
  keep_top_k_ = -1;
}

RegionOutputParameter::~RegionOutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RegionOutputParameter)
  SharedDtor();
}

void RegionOutputParameter::SharedDtor() {
  if (this != internal_default_instance()) delete nms_param_;
}

void RegionOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionOutputParameter& RegionOutputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionOutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void RegionOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RegionOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorbox_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nms_param_ != nullptr);
    nms_param_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_rpn_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(is_rpn_));
    keep_top_k_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegionOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_confidence_threshold(&has_bits);
          confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchorbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 nms_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_nms_type(&has_bits);
          nms_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float nms_sigma = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_nms_sigma(&has_bits);
          nms_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_rpn = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_rpn(&has_bits);
          is_rpn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionOutputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RegionOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_classes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_classes(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nms_param(this), target, stream);
  }

  // optional int32 keep_top_k = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_keep_top_k(), target);
  }

  // optional float confidence_threshold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence_threshold(), target);
  }

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anchorbox_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_anchorbox(i), target, stream);
  }

  // optional int32 nms_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nms_type(), target);
  }

  // optional float nms_sigma = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_nms_sigma(), target);
  }

  // optional bool is_rpn = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_rpn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RegionOutputParameter)
  return target;
}

size_t RegionOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RegionOutputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 5;
  total_size += 1UL * this->_internal_anchorbox_size();
  for (const auto& msg : this->anchorbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

    // optional uint32 num_classes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

    // optional float confidence_threshold = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 nms_type = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nms_type());
    }

    // optional float nms_sigma = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool is_rpn = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 keep_top_k = 3 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_keep_top_k());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionOutputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.RegionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionOutputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionOutputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.RegionOutputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.RegionOutputParameter)
    MergeFrom(*source);
  }
}

void RegionOutputParameter::MergeFrom(const RegionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RegionOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchorbox_.MergeFrom(from.anchorbox_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000004u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      nms_type_ = from.nms_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      nms_sigma_ = from.nms_sigma_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_rpn_ = from.is_rpn_;
    }
    if (cached_has_bits & 0x00000040u) {
      keep_top_k_ = from.keep_top_k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionOutputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.RegionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionOutputParameter::CopyFrom(const RegionOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RegionOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionOutputParameter::IsInitialized() const {
  return true;
}

void RegionOutputParameter::InternalSwap(RegionOutputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  anchorbox_.InternalSwap(&other->anchorbox_);
  swap(nms_param_, other->nms_param_);
  swap(num_classes_, other->num_classes_);
  swap(confidence_threshold_, other->confidence_threshold_);
  swap(nms_type_, other->nms_type_);
  swap(nms_sigma_, other->nms_sigma_);
  swap(is_rpn_, other->is_rpn_);
  swap(keep_top_k_, other->keep_top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionOutputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DropoutParameter::InitAsDefaultInstance() {
}
class DropoutParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DropoutParameter>()._has_bits_);
  static void set_has_dropout_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DropoutParameter::DropoutParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DropoutParameter)
}
DropoutParameter::DropoutParameter(const DropoutParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropout_ratio_ = from.dropout_ratio_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DropoutParameter)
}

void DropoutParameter::SharedCtor() {
  dropout_ratio_ = 0.5f;
}

DropoutParameter::~DropoutParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DropoutParameter)
  SharedDtor();
}

void DropoutParameter::SharedDtor() {
}

void DropoutParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DropoutParameter& DropoutParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DropoutParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DropoutParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DropoutParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dropout_ratio_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DropoutParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float dropout_ratio = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dropout_ratio(&has_bits);
          dropout_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DropoutParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DropoutParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dropout_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dropout_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DropoutParameter)
  return target;
}

size_t DropoutParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DropoutParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float dropout_ratio = 1 [default = 0.5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DropoutParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DropoutParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DropoutParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DropoutParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DropoutParameter)
    MergeFrom(*source);
  }
}

void DropoutParameter::MergeFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DropoutParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dropout_ratio()) {
    _internal_set_dropout_ratio(from._internal_dropout_ratio());
  }
}

void DropoutParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropoutParameter::CopyFrom(const DropoutParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DropoutParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropoutParameter::IsInitialized() const {
  return true;
}

void DropoutParameter::InternalSwap(DropoutParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dropout_ratio_, other->dropout_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DropoutParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DummyDataParameter::InitAsDefaultInstance() {
}
class DummyDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DummyDataParameter>()._has_bits_);
};

DummyDataParameter::DummyDataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DummyDataParameter)
}
DummyDataParameter::DummyDataParameter(const DummyDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_filler_(from.data_filler_),
      num_(from.num_),
      channels_(from.channels_),
      height_(from.height_),
      width_(from.width_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DummyDataParameter)
}

void DummyDataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
}

DummyDataParameter::~DummyDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DummyDataParameter)
  SharedDtor();
}

void DummyDataParameter::SharedDtor() {
}

void DummyDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DummyDataParameter& DummyDataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DummyDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DummyDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DummyDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_filler_.Clear();
  num_.Clear();
  channels_.Clear();
  height_.Clear();
  width_.Clear();
  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DummyDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_filler(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_num(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_height(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_height(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_width(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_width(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobShape shape = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyDataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DummyDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_filler_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_filler(i), target, stream);
  }

  // repeated uint32 num = 2;
  for (int i = 0, n = this->_internal_num_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(i), target);
  }

  // repeated uint32 channels = 3;
  for (int i = 0, n = this->_internal_channels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channels(i), target);
  }

  // repeated uint32 height = 4;
  for (int i = 0, n = this->_internal_height_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(i), target);
  }

  // repeated uint32 width = 5;
  for (int i = 0, n = this->_internal_width_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(i), target);
  }

  // repeated .apollo.perception.inference.BlobShape shape = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_shape(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DummyDataParameter)
  return target;
}

size_t DummyDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DummyDataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.FillerParameter data_filler = 1;
  total_size += 1UL * this->_internal_data_filler_size();
  for (const auto& msg : this->data_filler_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 num = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num_size());
    total_size += data_size;
  }

  // repeated uint32 channels = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channels_size());
    total_size += data_size;
  }

  // repeated uint32 height = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->height_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_height_size());
    total_size += data_size;
  }

  // repeated uint32 width = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->width_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_width_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.BlobShape shape = 6;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyDataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyDataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyDataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DummyDataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DummyDataParameter)
    MergeFrom(*source);
  }
}

void DummyDataParameter::MergeFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DummyDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_filler_.MergeFrom(from.data_filler_);
  num_.MergeFrom(from.num_);
  channels_.MergeFrom(from.channels_);
  height_.MergeFrom(from.height_);
  width_.MergeFrom(from.width_);
  shape_.MergeFrom(from.shape_);
}

void DummyDataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyDataParameter::CopyFrom(const DummyDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DummyDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyDataParameter::IsInitialized() const {
  return true;
}

void DummyDataParameter::InternalSwap(DummyDataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_filler_.InternalSwap(&other->data_filler_);
  num_.InternalSwap(&other->num_);
  channels_.InternalSwap(&other->channels_);
  height_.InternalSwap(&other->height_);
  width_.InternalSwap(&other->width_);
  shape_.InternalSwap(&other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyDataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EltwiseParameter::InitAsDefaultInstance() {
}
class EltwiseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<EltwiseParameter>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stable_prod_grad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EltwiseParameter::EltwiseParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.EltwiseParameter)
}
EltwiseParameter::EltwiseParameter(const EltwiseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      coeff_(from.coeff_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&stable_prod_grad_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(stable_prod_grad_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.EltwiseParameter)
}

void EltwiseParameter::SharedCtor() {
  operation_ = 1;
  stable_prod_grad_ = true;
}

EltwiseParameter::~EltwiseParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.EltwiseParameter)
  SharedDtor();
}

void EltwiseParameter::SharedDtor() {
}

void EltwiseParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EltwiseParameter& EltwiseParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EltwiseParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void EltwiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.EltwiseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coeff_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    operation_ = 1;
    stable_prod_grad_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EltwiseParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::EltwiseParameter_EltwiseOp_IsValid(val))) {
            _internal_set_operation(static_cast<::apollo::perception::inference::EltwiseParameter_EltwiseOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float coeff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coeff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coeff(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stable_prod_grad = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stable_prod_grad(&has_bits);
          stable_prod_grad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EltwiseParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.EltwiseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // repeated float coeff = 2;
  for (int i = 0, n = this->_internal_coeff_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_coeff(i), target);
  }

  // optional bool stable_prod_grad = 3 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_stable_prod_grad(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.EltwiseParameter)
  return target;
}

size_t EltwiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.EltwiseParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coeff = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coeff_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coeff_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional bool stable_prod_grad = 3 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EltwiseParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EltwiseParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EltwiseParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.EltwiseParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.EltwiseParameter)
    MergeFrom(*source);
  }
}

void EltwiseParameter::MergeFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.EltwiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coeff_.MergeFrom(from.coeff_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      stable_prod_grad_ = from.stable_prod_grad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EltwiseParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EltwiseParameter::CopyFrom(const EltwiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.EltwiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EltwiseParameter::IsInitialized() const {
  return true;
}

void EltwiseParameter::InternalSwap(EltwiseParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coeff_.InternalSwap(&other->coeff_);
  swap(operation_, other->operation_);
  swap(stable_prod_grad_, other->stable_prod_grad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EltwiseParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ELUParameter::InitAsDefaultInstance() {
}
class ELUParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ELUParameter>()._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ELUParameter::ELUParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ELUParameter)
}
ELUParameter::ELUParameter(const ELUParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ELUParameter)
}

void ELUParameter::SharedCtor() {
  alpha_ = 1;
}

ELUParameter::~ELUParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ELUParameter)
  SharedDtor();
}

void ELUParameter::SharedDtor() {
}

void ELUParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ELUParameter& ELUParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ELUParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ELUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ELUParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alpha_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ELUParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float alpha = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ELUParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ELUParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ELUParameter)
  return target;
}

size_t ELUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ELUParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float alpha = 1 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ELUParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ELUParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ELUParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ELUParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ELUParameter)
    MergeFrom(*source);
  }
}

void ELUParameter::MergeFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ELUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_alpha()) {
    _internal_set_alpha(from._internal_alpha());
  }
}

void ELUParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ELUParameter::CopyFrom(const ELUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ELUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ELUParameter::IsInitialized() const {
  return true;
}

void ELUParameter::InternalSwap(ELUParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(alpha_, other->alpha_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ELUParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmbedParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_EmbedParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_EmbedParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class EmbedParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<EmbedParameter>()._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const EmbedParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const EmbedParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::FillerParameter&
EmbedParameter::_Internal::weight_filler(const EmbedParameter* msg) {
  return *msg->weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
EmbedParameter::_Internal::bias_filler(const EmbedParameter* msg) {
  return *msg->bias_filler_;
}
EmbedParameter::EmbedParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.EmbedParameter)
}
EmbedParameter::EmbedParameter(const EmbedParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = nullptr;
  }
  if (from._internal_has_bias_filler()) {
    bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = nullptr;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&bias_term_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(bias_term_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.EmbedParameter)
}

void EmbedParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_dim_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(input_dim_));
  bias_term_ = true;
}

EmbedParameter::~EmbedParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.EmbedParameter)
  SharedDtor();
}

void EmbedParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void EmbedParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmbedParameter& EmbedParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmbedParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void EmbedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.EmbedParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_dim_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(input_dim_));
    bias_term_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EmbedParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 input_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_input_dim(&has_bits);
          input_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bias_term = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bias_term(&has_bits);
          bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmbedParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.EmbedParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional uint32 input_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_input_dim(), target);
  }

  // optional bool bias_term = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bias_term(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weight_filler(this), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bias_filler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.EmbedParameter)
  return target;
}

size_t EmbedParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.EmbedParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_output());
    }

    // optional uint32 input_dim = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_input_dim());
    }

    // optional bool bias_term = 3 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbedParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbedParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmbedParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.EmbedParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.EmbedParameter)
    MergeFrom(*source);
  }
}

void EmbedParameter::MergeFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.EmbedParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      input_dim_ = from.input_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmbedParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbedParameter::CopyFrom(const EmbedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.EmbedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbedParameter::IsInitialized() const {
  return true;
}

void EmbedParameter::InternalSwap(EmbedParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(input_dim_, other->input_dim_);
  swap(bias_term_, other->bias_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmbedParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpParameter::InitAsDefaultInstance() {
}
class ExpParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpParameter>()._has_bits_);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExpParameter::ExpParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ExpParameter)
}
ExpParameter::ExpParameter(const ExpParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ExpParameter)
}

void ExpParameter::SharedCtor() {
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

ExpParameter::~ExpParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ExpParameter)
  SharedDtor();
}

void ExpParameter::SharedDtor() {
}

void ExpParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpParameter& ExpParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ExpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ExpParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ExpParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float base = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shift = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_shift(&has_bits);
          shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ExpParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ExpParameter)
  return target;
}

size_t ExpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ExpParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ExpParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ExpParameter)
    MergeFrom(*source);
  }
}

void ExpParameter::MergeFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ExpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExpParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParameter::CopyFrom(const ExpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ExpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParameter::IsInitialized() const {
  return true;
}

void ExpParameter::InternalSwap(ExpParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_, other->shift_);
  swap(base_, other->base_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlattenParameter::InitAsDefaultInstance() {
}
class FlattenParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<FlattenParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FlattenParameter::FlattenParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_axis_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(end_axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
  axis_ = 1;
  end_axis_ = -1;
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
}

void FlattenParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlattenParameter& FlattenParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlattenParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.FlattenParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    axis_ = 1;
    end_axis_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FlattenParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 end_axis = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_axis(&has_bits);
          end_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlattenParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.FlattenParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 end_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.FlattenParameter)
  return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.FlattenParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional int32 end_axis = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_end_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlattenParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FlattenParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlattenParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.FlattenParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.FlattenParameter)
    MergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_axis_ = from.end_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlattenParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {
  return true;
}

void FlattenParameter::InternalSwap(FlattenParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(axis_, other->axis_);
  swap(end_axis_, other->end_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HDF5DataParameter::InitAsDefaultInstance() {
}
class HDF5DataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HDF5DataParameter>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HDF5DataParameter::HDF5DataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.HDF5DataParameter)
}
HDF5DataParameter::HDF5DataParameter(const HDF5DataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&shuffle_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.HDF5DataParameter)
}

void HDF5DataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shuffle_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
}

HDF5DataParameter::~HDF5DataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.HDF5DataParameter)
  SharedDtor();
}

void HDF5DataParameter::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HDF5DataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HDF5DataParameter& HDF5DataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HDF5DataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void HDF5DataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.HDF5DataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    source_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shuffle_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(shuffle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HDF5DataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.HDF5DataParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batch_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shuffle = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shuffle(&has_bits);
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HDF5DataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.HDF5DataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.HDF5DataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional uint32 batch_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_batch_size(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shuffle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.HDF5DataParameter)
  return target;
}

size_t HDF5DataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.HDF5DataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional uint32 batch_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batch_size());
    }

    // optional bool shuffle = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HDF5DataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HDF5DataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HDF5DataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.HDF5DataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.HDF5DataParameter)
    MergeFrom(*source);
  }
}

void HDF5DataParameter::MergeFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.HDF5DataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      shuffle_ = from.shuffle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HDF5DataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5DataParameter::CopyFrom(const HDF5DataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.HDF5DataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5DataParameter::IsInitialized() const {
  return true;
}

void HDF5DataParameter::InternalSwap(HDF5DataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_size_, other->batch_size_);
  swap(shuffle_, other->shuffle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HDF5DataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HDF5OutputParameter::InitAsDefaultInstance() {
}
class HDF5OutputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HDF5OutputParameter>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HDF5OutputParameter::HDF5OutputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.HDF5OutputParameter)
}
HDF5OutputParameter::HDF5OutputParameter(const HDF5OutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_name()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.HDF5OutputParameter)
}

void HDF5OutputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HDF5OutputParameter::~HDF5OutputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.HDF5OutputParameter)
  SharedDtor();
}

void HDF5OutputParameter::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HDF5OutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HDF5OutputParameter& HDF5OutputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HDF5OutputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void HDF5OutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.HDF5OutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HDF5OutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.HDF5OutputParameter.file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HDF5OutputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.HDF5OutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.HDF5OutputParameter.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.HDF5OutputParameter)
  return target;
}

size_t HDF5OutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.HDF5OutputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string file_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HDF5OutputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HDF5OutputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HDF5OutputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.HDF5OutputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.HDF5OutputParameter)
    MergeFrom(*source);
  }
}

void HDF5OutputParameter::MergeFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.HDF5OutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_file_name()) {
    _has_bits_[0] |= 0x00000001u;
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void HDF5OutputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDF5OutputParameter::CopyFrom(const HDF5OutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.HDF5OutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDF5OutputParameter::IsInitialized() const {
  return true;
}

void HDF5OutputParameter::InternalSwap(HDF5OutputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata HDF5OutputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HingeLossParameter::InitAsDefaultInstance() {
}
class HingeLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<HingeLossParameter>()._has_bits_);
  static void set_has_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HingeLossParameter::HingeLossParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.HingeLossParameter)
}
HingeLossParameter::HingeLossParameter(const HingeLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  norm_ = from.norm_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.HingeLossParameter)
}

void HingeLossParameter::SharedCtor() {
  norm_ = 1;
}

HingeLossParameter::~HingeLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.HingeLossParameter)
  SharedDtor();
}

void HingeLossParameter::SharedDtor() {
}

void HingeLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HingeLossParameter& HingeLossParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HingeLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void HingeLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.HingeLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  norm_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HingeLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::HingeLossParameter_Norm_IsValid(val))) {
            _internal_set_norm(static_cast<::apollo::perception::inference::HingeLossParameter_Norm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HingeLossParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.HingeLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_norm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.HingeLossParameter)
  return target;
}

size_t HingeLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.HingeLossParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.HingeLossParameter.Norm norm = 1 [default = L1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_norm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HingeLossParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HingeLossParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HingeLossParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.HingeLossParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.HingeLossParameter)
    MergeFrom(*source);
  }
}

void HingeLossParameter::MergeFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.HingeLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_norm()) {
    _internal_set_norm(from._internal_norm());
  }
}

void HingeLossParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HingeLossParameter::CopyFrom(const HingeLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.HingeLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HingeLossParameter::IsInitialized() const {
  return true;
}

void HingeLossParameter::InternalSwap(HingeLossParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(norm_, other->norm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HingeLossParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedList::InitAsDefaultInstance() {
}
class RepeatedList::_Internal {
 public:
  using HasBits = decltype(std::declval<RepeatedList>()._has_bits_);
  static void set_has_list_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_repeat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RepeatedList::RepeatedList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.RepeatedList)
}
RepeatedList::RepeatedList(const RepeatedList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  list_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_list_path()) {
    list_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.list_path_);
  }
  num_repeat_ = from.num_repeat_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RepeatedList)
}

void RepeatedList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto.base);
  list_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_repeat_ = 1u;
}

RepeatedList::~RepeatedList() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RepeatedList)
  SharedDtor();
}

void RepeatedList::SharedDtor() {
  list_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedList& RepeatedList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedList_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void RepeatedList::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RepeatedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      list_path_.ClearNonDefaultToEmptyNoArena();
    }
    num_repeat_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RepeatedList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string list_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_list_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.RepeatedList.list_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_repeat = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_repeat(&has_bits);
          num_repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RepeatedList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string list_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_list_path().data(), static_cast<int>(this->_internal_list_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.RepeatedList.list_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_list_path(), target);
  }

  // optional uint32 num_repeat = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RepeatedList)
  return target;
}

size_t RepeatedList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RepeatedList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string list_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_list_path());
    }

    // optional uint32 num_repeat = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_repeat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.RepeatedList)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.RepeatedList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.RepeatedList)
    MergeFrom(*source);
  }
}

void RepeatedList::MergeFrom(const RepeatedList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RepeatedList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      list_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.list_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_repeat_ = from.num_repeat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RepeatedList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.RepeatedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedList::CopyFrom(const RepeatedList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RepeatedList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedList::IsInitialized() const {
  return true;
}

void RepeatedList::InternalSwap(RepeatedList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  list_path_.Swap(&other->list_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_repeat_, other->num_repeat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatasetParameter::InitAsDefaultInstance() {
}
class DatasetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DatasetParameter>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_root_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DatasetParameter::DatasetParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DatasetParameter)
}
DatasetParameter::DatasetParameter(const DatasetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      repeated_list_(from.repeated_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_root_folder()) {
    root_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&shuffle_, &from.shuffle_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&shuffle_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DatasetParameter)
}

void DatasetParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shuffle_ = true;
  weight_ = 1;
  type_ = 1;
}

DatasetParameter::~DatasetParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DatasetParameter)
  SharedDtor();
}

void DatasetParameter::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DatasetParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetParameter& DatasetParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatasetParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DatasetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DatasetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      root_folder_.ClearNonDefaultToEmptyNoArena();
    }
    shuffle_ = true;
    weight_ = 1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DatasetParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.DatasetParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string root_folder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_root_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.DatasetParameter.root_folder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float weight = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::DatasetParameter_DatasetType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::inference::DatasetParameter_DatasetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool shuffle = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_shuffle(&has_bits);
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatasetParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DatasetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DatasetParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional string root_folder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_folder().data(), static_cast<int>(this->_internal_root_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.DatasetParameter.root_folder");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_root_folder(), target);
  }

  // optional float weight = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_weight(), target);
  }

  // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional bool shuffle = 5 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_shuffle(), target);
  }

  // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_repeated_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DatasetParameter)
  return target;
}

size_t DatasetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DatasetParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.RepeatedList repeated_list = 6;
  total_size += 1UL * this->_internal_repeated_list_size();
  for (const auto& msg : this->repeated_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string root_folder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_folder());
    }

    // optional bool shuffle = 5 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float weight = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.DatasetParameter.DatasetType type = 4 [default = LIST];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DatasetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatasetParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DatasetParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DatasetParameter)
    MergeFrom(*source);
  }
}

void DatasetParameter::MergeFrom(const DatasetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DatasetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_list_.MergeFrom(from.repeated_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      root_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000004u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatasetParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DatasetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetParameter::CopyFrom(const DatasetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DatasetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetParameter::IsInitialized() const {
  return true;
}

void DatasetParameter::InternalSwap(DatasetParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_list_.InternalSwap(&other->repeated_list_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  root_folder_.Swap(&other->root_folder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shuffle_, other->shuffle_);
  swap(weight_, other->weight_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageDataParameter::InitAsDefaultInstance() {
}
class ImageDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageDataParameter>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_new_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_new_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_root_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prefetch(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

ImageDataParameter::ImageDataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ImageDataParameter)
}
ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      image_set_(from.image_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mean_file()) {
    mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_root_folder()) {
    root_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&crop_size_, &from.crop_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefetch_) -
    reinterpret_cast<char*>(&crop_size_)) + sizeof(prefetch_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&crop_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_width_) -
      reinterpret_cast<char*>(&crop_size_)) + sizeof(new_width_));
  scale_ = 1;
  batch_size_ = 1u;
  is_color_ = true;
  prefetch_ = 4u;
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageDataParameter& ImageDataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ImageDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ImageDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mean_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      root_folder_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&crop_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_height_) -
        reinterpret_cast<char*>(&crop_size_)) + sizeof(new_height_));
  }
  if (cached_has_bits & 0x00001f00u) {
    new_width_ = 0u;
    scale_ = 1;
    batch_size_ = 1u;
    is_color_ = true;
    prefetch_ = 4u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ImageDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.ImageDataParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string mean_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.ImageDataParameter.mean_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batch_size = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crop_size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crop_size(&has_bits);
          crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mirror = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mirror(&has_bits);
          mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rand_skip = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rand_skip(&has_bits);
          rand_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shuffle = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_shuffle(&has_bits);
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_height = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_new_height(&has_bits);
          new_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_width = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_new_width(&has_bits);
          new_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_color = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_color(&has_bits);
          is_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string root_folder = 12 [default = ""];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_root_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.ImageDataParameter.root_folder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prefetch = 20 [default = 4];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_prefetch(&has_bits);
          prefetch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_image_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageDataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ImageDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ImageDataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ImageDataParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mean_file(), target);
  }

  // optional uint32 batch_size = 4 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mirror(), target);
  }

  // optional uint32 rand_skip = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rand_skip(), target);
  }

  // optional bool shuffle = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_shuffle(), target);
  }

  // optional uint32 new_height = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_new_height(), target);
  }

  // optional uint32 new_width = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_new_width(), target);
  }

  // optional bool is_color = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_color(), target);
  }

  // optional string root_folder = 12 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_folder().data(), static_cast<int>(this->_internal_root_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.ImageDataParameter.root_folder");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_root_folder(), target);
  }

  // optional uint32 prefetch = 20 [default = 4];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_prefetch(), target);
  }

  // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_image_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ImageDataParameter)
  return target;
}

size_t ImageDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ImageDataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.DatasetParameter image_set = 100;
  total_size += 2UL * this->_internal_image_set_size();
  for (const auto& msg : this->image_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional string root_folder = 12 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_folder());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crop_size());
    }

    // optional uint32 rand_skip = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rand_skip());
    }

    // optional bool shuffle = 8 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 new_height = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_height());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 new_width = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_width());
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 batch_size = 4 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batch_size());
    }

    // optional bool is_color = 11 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 prefetch = 20 [default = 4];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prefetch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageDataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ImageDataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ImageDataParameter)
    MergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ImageDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_set_.MergeFrom(from.image_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      root_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000008u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00000020u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      new_height_ = from.new_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_color_ = from.is_color_;
    }
    if (cached_has_bits & 0x00001000u) {
      prefetch_ = from.prefetch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ImageDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {
  return true;
}

void ImageDataParameter::InternalSwap(ImageDataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_set_.InternalSwap(&other->image_set_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mean_file_.Swap(&other->mean_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  root_folder_.Swap(&other->root_folder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(crop_size_, other->crop_size_);
  swap(rand_skip_, other->rand_skip_);
  swap(shuffle_, other->shuffle_);
  swap(mirror_, other->mirror_);
  swap(new_height_, other->new_height_);
  swap(new_width_, other->new_width_);
  swap(scale_, other->scale_);
  swap(batch_size_, other->batch_size_);
  swap(is_color_, other->is_color_);
  swap(prefetch_, other->prefetch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageDataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfogainLossParameter::InitAsDefaultInstance() {
}
class InfogainLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InfogainLossParameter>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InfogainLossParameter::InfogainLossParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.InfogainLossParameter)
}
InfogainLossParameter::InfogainLossParameter(const InfogainLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.InfogainLossParameter)
}

void InfogainLossParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InfogainLossParameter::~InfogainLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.InfogainLossParameter)
  SharedDtor();
}

void InfogainLossParameter::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfogainLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfogainLossParameter& InfogainLossParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfogainLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void InfogainLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.InfogainLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    source_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InfogainLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.InfogainLossParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfogainLossParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.InfogainLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.InfogainLossParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.InfogainLossParameter)
  return target;
}

size_t InfogainLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.InfogainLossParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfogainLossParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InfogainLossParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfogainLossParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.InfogainLossParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.InfogainLossParameter)
    MergeFrom(*source);
  }
}

void InfogainLossParameter::MergeFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.InfogainLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _has_bits_[0] |= 0x00000001u;
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void InfogainLossParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfogainLossParameter::CopyFrom(const InfogainLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.InfogainLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfogainLossParameter::IsInitialized() const {
  return true;
}

void InfogainLossParameter::InternalSwap(InfogainLossParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InfogainLossParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InnerProductParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_InnerProductParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_InnerProductParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class InnerProductParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InnerProductParameter>()._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const InnerProductParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const InnerProductParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_transpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::FillerParameter&
InnerProductParameter::_Internal::weight_filler(const InnerProductParameter* msg) {
  return *msg->weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
InnerProductParameter::_Internal::bias_filler(const InnerProductParameter* msg) {
  return *msg->bias_filler_;
}
InnerProductParameter::InnerProductParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.InnerProductParameter)
}
InnerProductParameter::InnerProductParameter(const InnerProductParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = nullptr;
  }
  if (from._internal_has_bias_filler()) {
    bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = nullptr;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.InnerProductParameter)
}

void InnerProductParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transpose_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(transpose_));
  bias_term_ = true;
  axis_ = 1;
}

InnerProductParameter::~InnerProductParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.InnerProductParameter)
  SharedDtor();
}

void InnerProductParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void InnerProductParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InnerProductParameter& InnerProductParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InnerProductParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void InnerProductParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.InnerProductParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transpose_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(transpose_));
    bias_term_ = true;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InnerProductParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bias_term = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bias_term(&has_bits);
          bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool transpose = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_transpose(&has_bits);
          transpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InnerProductParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.InnerProductParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional bool bias_term = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bias_term(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::weight_filler(this), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bias_filler(this), target, stream);
  }

  // optional int32 axis = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_axis(), target);
  }

  // optional bool transpose = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_transpose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.InnerProductParameter)
  return target;
}

size_t InnerProductParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.InnerProductParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_output());
    }

    // optional bool transpose = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bias_term = 2 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerProductParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerProductParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InnerProductParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.InnerProductParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.InnerProductParameter)
    MergeFrom(*source);
  }
}

void InnerProductParameter::MergeFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.InnerProductParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      transpose_ = from.transpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerProductParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerProductParameter::CopyFrom(const InnerProductParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.InnerProductParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerProductParameter::IsInitialized() const {
  return true;
}

void InnerProductParameter::InternalSwap(InnerProductParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(transpose_, other->transpose_);
  swap(bias_term_, other->bias_term_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerProductParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputParameter::InitAsDefaultInstance() {
}
class InputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InputParameter>()._has_bits_);
};

InputParameter::InputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.InputParameter)
}

void InputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
}

void InputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputParameter& InputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.InputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.InputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobShape shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shape_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shape(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.InputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobShape shape = 1;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.InputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
}

void InputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogParameter::InitAsDefaultInstance() {
}
class LogParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LogParameter>()._has_bits_);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LogParameter::LogParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.LogParameter)
}
LogParameter::LogParameter(const LogParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LogParameter)
}

void LogParameter::SharedCtor() {
  shift_ = 0;
  base_ = -1;
  scale_ = 1;
}

LogParameter::~LogParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LogParameter)
  SharedDtor();
}

void LogParameter::SharedDtor() {
}

void LogParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogParameter& LogParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void LogParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LogParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    shift_ = 0;
    base_ = -1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LogParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float base = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shift = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_shift(&has_bits);
          shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LogParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float base = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LogParameter)
  return target;
}

size_t LogParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LogParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float base = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LogParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.LogParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.LogParameter)
    MergeFrom(*source);
  }
}

void LogParameter::MergeFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LogParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogParameter::CopyFrom(const LogParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LogParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogParameter::IsInitialized() const {
  return true;
}

void LogParameter::InternalSwap(LogParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_, other->shift_);
  swap(base_, other->base_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LRNParameter::InitAsDefaultInstance() {
}
class LRNParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LRNParameter>()._has_bits_);
  static void set_has_local_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_norm_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LRNParameter::LRNParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.LRNParameter)
}
LRNParameter::LRNParameter(const LRNParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&norm_region_, &from.norm_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&norm_region_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.LRNParameter)
}

void LRNParameter::SharedCtor() {
  ::memset(&norm_region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  k_ = 1;
}

LRNParameter::~LRNParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.LRNParameter)
  SharedDtor();
}

void LRNParameter::SharedDtor() {
}

void LRNParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LRNParameter& LRNParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LRNParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void LRNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.LRNParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&norm_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&norm_region_)) + sizeof(engine_));
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    k_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LRNParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 local_size = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_local_size(&has_bits);
          local_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float beta = 3 [default = 0.75];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_beta(&has_bits);
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::LRNParameter_NormRegion_IsValid(val))) {
            _internal_set_norm_region(static_cast<::apollo::perception::inference::LRNParameter_NormRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float k = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::LRNParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::LRNParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LRNParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.LRNParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 local_size = 1 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_local_size(), target);
  }

  // optional float alpha = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_alpha(), target);
  }

  // optional float beta = 3 [default = 0.75];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_beta(), target);
  }

  // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_norm_region(), target);
  }

  // optional float k = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_k(), target);
  }

  // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.LRNParameter)
  return target;
}

size_t LRNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.LRNParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.perception.inference.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_norm_region());
    }

    // optional .apollo.perception.inference.LRNParameter.Engine engine = 6 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional uint32 local_size = 1 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_local_size());
    }

    // optional float alpha = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float beta = 3 [default = 0.75];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float k = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LRNParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LRNParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LRNParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.LRNParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.LRNParameter)
    MergeFrom(*source);
  }
}

void LRNParameter::MergeFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.LRNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      norm_region_ = from.norm_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000010u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x00000020u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LRNParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParameter::CopyFrom(const LRNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.LRNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParameter::IsInitialized() const {
  return true;
}

void LRNParameter::InternalSwap(LRNParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(norm_region_, other->norm_region_);
  swap(engine_, other->engine_);
  swap(local_size_, other->local_size_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
  swap(k_, other->k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LRNParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryDataParameter::InitAsDefaultInstance() {
}
class MemoryDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MemoryDataParameter>()._has_bits_);
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MemoryDataParameter::MemoryDataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.MemoryDataParameter)
}
MemoryDataParameter::MemoryDataParameter(const MemoryDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.MemoryDataParameter)
}

void MemoryDataParameter::SharedCtor() {
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
}

MemoryDataParameter::~MemoryDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.MemoryDataParameter)
  SharedDtor();
}

void MemoryDataParameter::SharedDtor() {
}

void MemoryDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryDataParameter& MemoryDataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void MemoryDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.MemoryDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemoryDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channels(&has_bits);
          channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryDataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.MemoryDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_batch_size(), target);
  }

  // optional uint32 channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channels(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.MemoryDataParameter)
  return target;
}

size_t MemoryDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.MemoryDataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 batch_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batch_size());
    }

    // optional uint32 channels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channels());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryDataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryDataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryDataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.MemoryDataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.MemoryDataParameter)
    MergeFrom(*source);
  }
}

void MemoryDataParameter::MergeFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.MemoryDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      channels_ = from.channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemoryDataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDataParameter::CopyFrom(const MemoryDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.MemoryDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDataParameter::IsInitialized() const {
  return true;
}

void MemoryDataParameter::InternalSwap(MemoryDataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(batch_size_, other->batch_size_);
  swap(channels_, other->channels_);
  swap(height_, other->height_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryDataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiBoxLossParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_MultiBoxLossParameter_default_instance_._instance.get_mutable()->nms_param_ = const_cast< ::apollo::perception::inference::NonMaximumSuppressionParameter*>(
      ::apollo::perception::inference::NonMaximumSuppressionParameter::internal_default_instance());
}
class MultiBoxLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiBoxLossParameter>()._has_bits_);
  static void set_has_loc_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_conf_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loc_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_share_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_overlap_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_prior_for_matching(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_background_label_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_difficult_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_do_neg_mining(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_neg_pos_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_neg_overlap(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_encode_variance_in_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_map_object_to_agnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignore_cross_boundary_bbox(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bp_inside(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mining_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const MultiBoxLossParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sample_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_use_prior_for_nms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
MultiBoxLossParameter::_Internal::nms_param(const MultiBoxLossParameter* msg) {
  return *msg->nms_param_;
}
MultiBoxLossParameter::MultiBoxLossParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.MultiBoxLossParameter)
}
MultiBoxLossParameter::MultiBoxLossParameter(const MultiBoxLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nms_param()) {
    nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from.nms_param_);
  } else {
    nms_param_ = nullptr;
  }
  ::memcpy(&conf_loss_type_, &from.conf_loss_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_size_) -
    reinterpret_cast<char*>(&conf_loss_type_)) + sizeof(sample_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.MultiBoxLossParameter)
}

void MultiBoxLossParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&nms_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_prior_for_nms_) -
      reinterpret_cast<char*>(&nms_param_)) + sizeof(use_prior_for_nms_));
  loc_loss_type_ = 1;
  loc_weight_ = 1;
  match_type_ = 1;
  overlap_threshold_ = 0.5f;
  share_location_ = true;
  use_prior_for_matching_ = true;
  use_difficult_gt_ = true;
  neg_pos_ratio_ = 3;
  neg_overlap_ = 0.5f;
  code_type_ = 1;
  mining_type_ = 1;
  sample_size_ = 64;
}

MultiBoxLossParameter::~MultiBoxLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.MultiBoxLossParameter)
  SharedDtor();
}

void MultiBoxLossParameter::SharedDtor() {
  if (this != internal_default_instance()) delete nms_param_;
}

void MultiBoxLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiBoxLossParameter& MultiBoxLossParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiBoxLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void MultiBoxLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.MultiBoxLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nms_param_ != nullptr);
    nms_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&conf_loss_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_cross_boundary_bbox_) -
        reinterpret_cast<char*>(&conf_loss_type_)) + sizeof(ignore_cross_boundary_bbox_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bp_inside_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_prior_for_nms_) -
        reinterpret_cast<char*>(&bp_inside_)) + sizeof(use_prior_for_nms_));
    loc_loss_type_ = 1;
    loc_weight_ = 1;
    match_type_ = 1;
    overlap_threshold_ = 0.5f;
    share_location_ = true;
    use_prior_for_matching_ = true;
  }
  if (cached_has_bits & 0x003f0000u) {
    use_difficult_gt_ = true;
    neg_pos_ratio_ = 3;
    neg_overlap_ = 0.5f;
    code_type_ = 1;
    mining_type_ = 1;
    sample_size_ = 64;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MultiBoxLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_LocLossType_IsValid(val))) {
            _internal_set_loc_loss_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_LocLossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_ConfLossType_IsValid(val))) {
            _internal_set_conf_loss_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_ConfLossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float loc_weight = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_loc_weight(&has_bits);
          loc_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_classes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_location = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_share_location(&has_bits);
          share_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float overlap_threshold = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_overlap_threshold(&has_bits);
          overlap_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_prior_for_matching = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_use_prior_for_matching(&has_bits);
          use_prior_for_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 background_label_id = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_background_label_id(&has_bits);
          background_label_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_difficult_gt = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_difficult_gt(&has_bits);
          use_difficult_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool do_neg_mining = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_do_neg_mining(&has_bits);
          do_neg_mining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float neg_pos_ratio = 12 [default = 3];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_neg_pos_ratio(&has_bits);
          neg_pos_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float neg_overlap = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_neg_overlap(&has_bits);
          neg_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PriorBoxParameter_CodeType_IsValid(val))) {
            _internal_set_code_type(static_cast<::apollo::perception::inference::PriorBoxParameter_CodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool encode_variance_in_target = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_encode_variance_in_target(&has_bits);
          encode_variance_in_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool map_object_to_agnostic = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_map_object_to_agnostic(&has_bits);
          map_object_to_agnostic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_cross_boundary_bbox = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ignore_cross_boundary_bbox(&has_bits);
          ignore_cross_boundary_bbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bp_inside = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_bp_inside(&has_bits);
          bp_inside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::MultiBoxLossParameter_MiningType_IsValid(val))) {
            _internal_set_mining_type(static_cast<::apollo::perception::inference::MultiBoxLossParameter_MiningType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sample_size = 22 [default = 64];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_sample_size(&has_bits);
          sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_prior_for_nms = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_use_prior_for_nms(&has_bits);
          use_prior_for_nms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiBoxLossParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.MultiBoxLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_loc_loss_type(), target);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_conf_loss_type(), target);
  }

  // optional float loc_weight = 3 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_loc_weight(), target);
  }

  // optional uint32 num_classes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_classes(), target);
  }

  // optional bool share_location = 5 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_share_location(), target);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_match_type(), target);
  }

  // optional float overlap_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_overlap_threshold(), target);
  }

  // optional bool use_prior_for_matching = 8 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_prior_for_matching(), target);
  }

  // optional uint32 background_label_id = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_background_label_id(), target);
  }

  // optional bool use_difficult_gt = 10 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_difficult_gt(), target);
  }

  // optional bool do_neg_mining = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_do_neg_mining(), target);
  }

  // optional float neg_pos_ratio = 12 [default = 3];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_neg_pos_ratio(), target);
  }

  // optional float neg_overlap = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_neg_overlap(), target);
  }

  // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_code_type(), target);
  }

  // optional bool encode_variance_in_target = 16 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_encode_variance_in_target(), target);
  }

  // optional bool map_object_to_agnostic = 17 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_map_object_to_agnostic(), target);
  }

  // optional bool ignore_cross_boundary_bbox = 18 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_ignore_cross_boundary_bbox(), target);
  }

  // optional bool bp_inside = 19 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_bp_inside(), target);
  }

  // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_mining_type(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::nms_param(this), target, stream);
  }

  // optional int32 sample_size = 22 [default = 64];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_sample_size(), target);
  }

  // optional bool use_prior_for_nms = 23 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_use_prior_for_nms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.MultiBoxLossParameter)
  return target;
}

size_t MultiBoxLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.MultiBoxLossParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_conf_loss_type());
    }

    // optional uint32 num_classes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

    // optional uint32 background_label_id = 9 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_background_label_id());
    }

    // optional bool do_neg_mining = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool encode_variance_in_target = 16 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool map_object_to_agnostic = 17 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_cross_boundary_bbox = 18 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool bp_inside = 19 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool use_prior_for_nms = 23 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loc_loss_type());
    }

    // optional float loc_weight = 3 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional float overlap_threshold = 7 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional bool share_location = 5 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool use_prior_for_matching = 8 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool use_difficult_gt = 10 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional float neg_pos_ratio = 12 [default = 3];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float neg_overlap = 13 [default = 0.5];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code_type());
    }

    // optional .apollo.perception.inference.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mining_type());
    }

    // optional int32 sample_size = 22 [default = 64];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sample_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiBoxLossParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.MultiBoxLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiBoxLossParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiBoxLossParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.MultiBoxLossParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.MultiBoxLossParameter)
    MergeFrom(*source);
  }
}

void MultiBoxLossParameter::MergeFrom(const MultiBoxLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.MultiBoxLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      conf_loss_type_ = from.conf_loss_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000008u) {
      background_label_id_ = from.background_label_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      do_neg_mining_ = from.do_neg_mining_;
    }
    if (cached_has_bits & 0x00000020u) {
      encode_variance_in_target_ = from.encode_variance_in_target_;
    }
    if (cached_has_bits & 0x00000040u) {
      map_object_to_agnostic_ = from.map_object_to_agnostic_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_cross_boundary_bbox_ = from.ignore_cross_boundary_bbox_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bp_inside_ = from.bp_inside_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_prior_for_nms_ = from.use_prior_for_nms_;
    }
    if (cached_has_bits & 0x00000400u) {
      loc_loss_type_ = from.loc_loss_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      loc_weight_ = from.loc_weight_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      overlap_threshold_ = from.overlap_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      share_location_ = from.share_location_;
    }
    if (cached_has_bits & 0x00008000u) {
      use_prior_for_matching_ = from.use_prior_for_matching_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      use_difficult_gt_ = from.use_difficult_gt_;
    }
    if (cached_has_bits & 0x00020000u) {
      neg_pos_ratio_ = from.neg_pos_ratio_;
    }
    if (cached_has_bits & 0x00040000u) {
      neg_overlap_ = from.neg_overlap_;
    }
    if (cached_has_bits & 0x00080000u) {
      code_type_ = from.code_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      mining_type_ = from.mining_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      sample_size_ = from.sample_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MultiBoxLossParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.MultiBoxLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiBoxLossParameter::CopyFrom(const MultiBoxLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.MultiBoxLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiBoxLossParameter::IsInitialized() const {
  return true;
}

void MultiBoxLossParameter::InternalSwap(MultiBoxLossParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nms_param_, other->nms_param_);
  swap(conf_loss_type_, other->conf_loss_type_);
  swap(num_classes_, other->num_classes_);
  swap(background_label_id_, other->background_label_id_);
  swap(do_neg_mining_, other->do_neg_mining_);
  swap(encode_variance_in_target_, other->encode_variance_in_target_);
  swap(map_object_to_agnostic_, other->map_object_to_agnostic_);
  swap(ignore_cross_boundary_bbox_, other->ignore_cross_boundary_bbox_);
  swap(bp_inside_, other->bp_inside_);
  swap(use_prior_for_nms_, other->use_prior_for_nms_);
  swap(loc_loss_type_, other->loc_loss_type_);
  swap(loc_weight_, other->loc_weight_);
  swap(match_type_, other->match_type_);
  swap(overlap_threshold_, other->overlap_threshold_);
  swap(share_location_, other->share_location_);
  swap(use_prior_for_matching_, other->use_prior_for_matching_);
  swap(use_difficult_gt_, other->use_difficult_gt_);
  swap(neg_pos_ratio_, other->neg_pos_ratio_);
  swap(neg_overlap_, other->neg_overlap_);
  swap(code_type_, other->code_type_);
  swap(mining_type_, other->mining_type_);
  swap(sample_size_, other->sample_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiBoxLossParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MVNParameter::InitAsDefaultInstance() {
}
class MVNParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MVNParameter>()._has_bits_);
  static void set_has_normalize_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_across_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MVNParameter::MVNParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.MVNParameter)
}
MVNParameter::MVNParameter(const MVNParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&across_channels_, &from.across_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&across_channels_)) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.MVNParameter)
}

void MVNParameter::SharedCtor() {
  across_channels_ = false;
  normalize_variance_ = true;
  eps_ = 1e-09f;
}

MVNParameter::~MVNParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.MVNParameter)
  SharedDtor();
}

void MVNParameter::SharedDtor() {
}

void MVNParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MVNParameter& MVNParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MVNParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void MVNParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.MVNParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    across_channels_ = false;
    normalize_variance_ = true;
    eps_ = 1e-09f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MVNParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool normalize_variance = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_normalize_variance(&has_bits);
          normalize_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool across_channels = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_across_channels(&has_bits);
          across_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float eps = 3 [default = 1e-09];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_eps(&has_bits);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MVNParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.MVNParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool normalize_variance = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_normalize_variance(), target);
  }

  // optional bool across_channels = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_across_channels(), target);
  }

  // optional float eps = 3 [default = 1e-09];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_eps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.MVNParameter)
  return target;
}

size_t MVNParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.MVNParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool across_channels = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool normalize_variance = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float eps = 3 [default = 1e-09];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MVNParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MVNParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MVNParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.MVNParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.MVNParameter)
    MergeFrom(*source);
  }
}

void MVNParameter::MergeFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.MVNParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      across_channels_ = from.across_channels_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalize_variance_ = from.normalize_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MVNParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVNParameter::CopyFrom(const MVNParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.MVNParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVNParameter::IsInitialized() const {
  return true;
}

void MVNParameter::InternalSwap(MVNParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(across_channels_, other->across_channels_);
  swap(normalize_variance_, other->normalize_variance_);
  swap(eps_, other->eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MVNParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalizeParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_NormalizeParameter_default_instance_._instance.get_mutable()->scale_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class NormalizeParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalizeParameter>()._has_bits_);
  static void set_has_across_spatial(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::inference::FillerParameter& scale_filler(const NormalizeParameter* msg);
  static void set_has_scale_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::perception::inference::FillerParameter&
NormalizeParameter::_Internal::scale_filler(const NormalizeParameter* msg) {
  return *msg->scale_filler_;
}
NormalizeParameter::NormalizeParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.NormalizeParameter)
}
NormalizeParameter::NormalizeParameter(const NormalizeParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_scale_filler()) {
    scale_filler_ = new ::apollo::perception::inference::FillerParameter(*from.scale_filler_);
  } else {
    scale_filler_ = nullptr;
  }
  ::memcpy(&across_spatial_, &from.across_spatial_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&across_spatial_)) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.NormalizeParameter)
}

void NormalizeParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  scale_filler_ = nullptr;
  across_spatial_ = true;
  channel_shared_ = true;
  eps_ = 1e-10f;
}

NormalizeParameter::~NormalizeParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.NormalizeParameter)
  SharedDtor();
}

void NormalizeParameter::SharedDtor() {
  if (this != internal_default_instance()) delete scale_filler_;
}

void NormalizeParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalizeParameter& NormalizeParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalizeParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void NormalizeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.NormalizeParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scale_filler_ != nullptr);
      scale_filler_->Clear();
    }
    across_spatial_ = true;
    channel_shared_ = true;
    eps_ = 1e-10f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NormalizeParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool across_spatial = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_across_spatial(&has_bits);
          across_spatial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_shared = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel_shared(&has_bits);
          channel_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float eps = 4 [default = 1e-10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_eps(&has_bits);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalizeParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.NormalizeParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool across_spatial = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_across_spatial(), target);
  }

  // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scale_filler(this), target, stream);
  }

  // optional bool channel_shared = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_channel_shared(), target);
  }

  // optional float eps = 4 [default = 1e-10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_eps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.NormalizeParameter)
  return target;
}

size_t NormalizeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.NormalizeParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.inference.FillerParameter scale_filler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scale_filler_);
    }

    // optional bool across_spatial = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool channel_shared = 3 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float eps = 4 [default = 1e-10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizeParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.NormalizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizeParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalizeParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.NormalizeParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.NormalizeParameter)
    MergeFrom(*source);
  }
}

void NormalizeParameter::MergeFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.NormalizeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scale_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_scale_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      across_spatial_ = from.across_spatial_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_shared_ = from.channel_shared_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizeParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeParameter::CopyFrom(const NormalizeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.NormalizeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeParameter::IsInitialized() const {
  return true;
}

void NormalizeParameter::InternalSwap(NormalizeParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scale_filler_, other->scale_filler_);
  swap(across_spatial_, other->across_spatial_);
  swap(channel_shared_, other->channel_shared_);
  swap(eps_, other->eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalizeParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParameterParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_ParameterParameter_default_instance_._instance.get_mutable()->shape_ = const_cast< ::apollo::perception::inference::BlobShape*>(
      ::apollo::perception::inference::BlobShape::internal_default_instance());
}
class ParameterParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ParameterParameter>()._has_bits_);
  static const ::apollo::perception::inference::BlobShape& shape(const ParameterParameter* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::perception::inference::BlobShape&
ParameterParameter::_Internal::shape(const ParameterParameter* msg) {
  return *msg->shape_;
}
ParameterParameter::ParameterParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ParameterParameter)
}
ParameterParameter::ParameterParameter(const ParameterParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::apollo::perception::inference::BlobShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ParameterParameter)
}

void ParameterParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  shape_ = nullptr;
}

ParameterParameter::~ParameterParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ParameterParameter)
  SharedDtor();
}

void ParameterParameter::SharedDtor() {
  if (this != internal_default_instance()) delete shape_;
}

void ParameterParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParameterParameter& ParameterParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParameterParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ParameterParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ParameterParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shape_ != nullptr);
    shape_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ParameterParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParameterParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ParameterParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ParameterParameter)
  return target;
}

size_t ParameterParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ParameterParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.BlobShape shape = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParameterParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ParameterParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ParameterParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParameterParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ParameterParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ParameterParameter)
    MergeFrom(*source);
  }
}

void ParameterParameter::MergeFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ParameterParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _internal_mutable_shape()->::apollo::perception::inference::BlobShape::MergeFrom(from._internal_shape());
  }
}

void ParameterParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ParameterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterParameter::CopyFrom(const ParameterParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ParameterParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterParameter::IsInitialized() const {
  return true;
}

void ParameterParameter::InternalSwap(ParameterParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shape_, other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PermuteParameter::InitAsDefaultInstance() {
}
class PermuteParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PermuteParameter>()._has_bits_);
};

PermuteParameter::PermuteParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PermuteParameter)
}
PermuteParameter::PermuteParameter(const PermuteParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      order_(from.order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PermuteParameter)
}

void PermuteParameter::SharedCtor() {
}

PermuteParameter::~PermuteParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PermuteParameter)
  SharedDtor();
}

void PermuteParameter::SharedDtor() {
}

void PermuteParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PermuteParameter& PermuteParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PermuteParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PermuteParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PermuteParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PermuteParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_order(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PermuteParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PermuteParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  for (int i = 0, n = this->_internal_order_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_order(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PermuteParameter)
  return target;
}

size_t PermuteParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PermuteParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 order = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->order_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_order_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PermuteParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PermuteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PermuteParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PermuteParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PermuteParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PermuteParameter)
    MergeFrom(*source);
  }
}

void PermuteParameter::MergeFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PermuteParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  order_.MergeFrom(from.order_);
}

void PermuteParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermuteParameter::CopyFrom(const PermuteParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PermuteParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermuteParameter::IsInitialized() const {
  return true;
}

void PermuteParameter::InternalSwap(PermuteParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  order_.InternalSwap(&other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermuteParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoolingParameter::InitAsDefaultInstance() {
}
class PoolingParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PoolingParameter>()._has_bits_);
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pad_h(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pad_w(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kernel_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kernel_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_stride_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stride_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_global_pooling(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cmp_out_shape_floor_as_conv(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

PoolingParameter::PoolingParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PoolingParameter)
}
PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pool_, &from.pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&pool_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
  ::memset(&pool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmp_out_shape_floor_as_conv_) -
      reinterpret_cast<char*>(&pool_)) + sizeof(cmp_out_shape_floor_as_conv_));
  stride_ = 1u;
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
}

void PoolingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoolingParameter& PoolingParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PoolingParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_h_) -
        reinterpret_cast<char*>(&pool_)) + sizeof(pad_h_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&pad_w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmp_out_shape_floor_as_conv_) -
        reinterpret_cast<char*>(&pad_w_)) + sizeof(cmp_out_shape_floor_as_conv_));
    stride_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PoolingParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PoolingParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::apollo::perception::inference::PoolingParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pad(&has_bits);
          pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_kernel_h(&has_bits);
          kernel_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernel_w = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_kernel_w(&has_bits);
          kernel_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride_h = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_stride_h(&has_bits);
          stride_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride_w = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_stride_w(&has_bits);
          stride_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_h = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pad_h(&has_bits);
          pad_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_w = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pad_w(&has_bits);
          pad_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::PoolingParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::PoolingParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool global_pooling = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_global_pooling(&has_bits);
          global_pooling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_cmp_out_shape_floor_as_conv(&has_bits);
          cmp_out_shape_floor_as_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoolingParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PoolingParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pool(), target);
  }

  // optional uint32 kernel_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kernel_size(), target);
  }

  // optional uint32 stride = 3 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stride(), target);
  }

  // optional uint32 pad = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pad(), target);
  }

  // optional uint32 kernel_h = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kernel_h(), target);
  }

  // optional uint32 kernel_w = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kernel_w(), target);
  }

  // optional uint32 stride_h = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stride_h(), target);
  }

  // optional uint32 stride_w = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_stride_w(), target);
  }

  // optional uint32 pad_h = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pad_h(), target);
  }

  // optional uint32 pad_w = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pad_w(), target);
  }

  // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_engine(), target);
  }

  // optional bool global_pooling = 12 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_global_pooling(), target);
  }

  // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_cmp_out_shape_floor_as_conv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PoolingParameter)
  return target;
}

size_t PoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PoolingParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.PoolingParameter.PoolMethod pool = 1 [default = MAX];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional uint32 kernel_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kernel_size());
    }

    // optional uint32 pad = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad());
    }

    // optional uint32 kernel_h = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kernel_h());
    }

    // optional uint32 kernel_w = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kernel_w());
    }

    // optional uint32 stride_h = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride_h());
    }

    // optional uint32 stride_w = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride_w());
    }

    // optional uint32 pad_h = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_h());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 pad_w = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_w());
    }

    // optional .apollo.perception.inference.PoolingParameter.Engine engine = 11 [default = DEFAULT];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional bool global_pooling = 12 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool cmp_out_shape_floor_as_conv = 13 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 stride = 3 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoolingParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PoolingParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoolingParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PoolingParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PoolingParameter)
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000008u) {
      kernel_h_ = from.kernel_h_;
    }
    if (cached_has_bits & 0x00000010u) {
      kernel_w_ = from.kernel_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      stride_h_ = from.stride_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      stride_w_ = from.stride_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      pad_h_ = from.pad_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      pad_w_ = from.pad_w_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000400u) {
      global_pooling_ = from.global_pooling_;
    }
    if (cached_has_bits & 0x00000800u) {
      cmp_out_shape_floor_as_conv_ = from.cmp_out_shape_floor_as_conv_;
    }
    if (cached_has_bits & 0x00001000u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PoolingParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {
  return true;
}

void PoolingParameter::InternalSwap(PoolingParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pool_, other->pool_);
  swap(kernel_size_, other->kernel_size_);
  swap(pad_, other->pad_);
  swap(kernel_h_, other->kernel_h_);
  swap(kernel_w_, other->kernel_w_);
  swap(stride_h_, other->stride_h_);
  swap(stride_w_, other->stride_w_);
  swap(pad_h_, other->pad_h_);
  swap(pad_w_, other->pad_w_);
  swap(engine_, other->engine_);
  swap(global_pooling_, other->global_pooling_);
  swap(cmp_out_shape_floor_as_conv_, other->cmp_out_shape_floor_as_conv_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoolingParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerParameter::InitAsDefaultInstance() {
}
class PowerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerParameter>()._has_bits_);
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PowerParameter::PowerParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PowerParameter)
}
PowerParameter::PowerParameter(const PowerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_, &from.shift_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&shift_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PowerParameter)
}

void PowerParameter::SharedCtor() {
  shift_ = 0;
  power_ = 1;
  scale_ = 1;
}

PowerParameter::~PowerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PowerParameter)
  SharedDtor();
}

void PowerParameter::SharedDtor() {
}

void PowerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerParameter& PowerParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PowerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PowerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    shift_ = 0;
    power_ = 1;
    scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PowerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float power = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_power(&has_bits);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float shift = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_shift(&has_bits);
          shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PowerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float power = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_power(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional float shift = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_shift(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PowerParameter)
  return target;
}

size_t PowerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PowerParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float shift = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float power = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PowerParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PowerParameter)
    MergeFrom(*source);
  }
}

void PowerParameter::MergeFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PowerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      shift_ = from.shift_;
    }
    if (cached_has_bits & 0x00000002u) {
      power_ = from.power_;
    }
    if (cached_has_bits & 0x00000004u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerParameter::CopyFrom(const PowerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PowerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerParameter::IsInitialized() const {
  return true;
}

void PowerParameter::InternalSwap(PowerParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_, other->shift_);
  swap(power_, other->power_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriorBoxParameter::InitAsDefaultInstance() {
}
class PriorBoxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PriorBoxParameter>()._has_bits_);
  static void set_has_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_img_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_img_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_img_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_step_h(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_step_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PriorBoxParameter::PriorBoxParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PriorBoxParameter)
}
PriorBoxParameter::PriorBoxParameter(const PriorBoxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      min_size_(from.min_size_),
      max_size_(from.max_size_),
      aspect_ratio_(from.aspect_ratio_),
      variance_(from.variance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clip_, &from.clip_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&clip_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PriorBoxParameter)
}

void PriorBoxParameter::SharedCtor() {
  ::memset(&clip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_w_) -
      reinterpret_cast<char*>(&clip_)) + sizeof(step_w_));
  flip_ = true;
  offset_ = 0.5f;
}

PriorBoxParameter::~PriorBoxParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PriorBoxParameter)
  SharedDtor();
}

void PriorBoxParameter::SharedDtor() {
}

void PriorBoxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriorBoxParameter& PriorBoxParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriorBoxParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PriorBoxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PriorBoxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_size_.Clear();
  max_size_.Clear();
  aspect_ratio_.Clear();
  variance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&clip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&step_w_) -
        reinterpret_cast<char*>(&clip_)) + sizeof(step_w_));
    flip_ = true;
  }
  offset_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PriorBoxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float min_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_min_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float max_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float aspect_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aspect_ratio(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_aspect_ratio(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flip = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flip(&has_bits);
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clip = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clip(&has_bits);
          clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float variance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_variance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_variance(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_img_size(&has_bits);
          img_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_img_h(&has_bits);
          img_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 img_w = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_img_w(&has_bits);
          img_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float step = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float step_h = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_step_h(&has_bits);
          step_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float step_w = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_step_w(&has_bits);
          step_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float offset = 13 [default = 0.5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriorBoxParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PriorBoxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float min_size = 1;
  for (int i = 0, n = this->_internal_min_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_size(i), target);
  }

  // repeated float max_size = 2;
  for (int i = 0, n = this->_internal_max_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_size(i), target);
  }

  // repeated float aspect_ratio = 3;
  for (int i = 0, n = this->_internal_aspect_ratio_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_aspect_ratio(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool flip = 4 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flip(), target);
  }

  // optional bool clip = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clip(), target);
  }

  // repeated float variance = 6;
  for (int i = 0, n = this->_internal_variance_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_variance(i), target);
  }

  // optional uint32 img_size = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_img_size(), target);
  }

  // optional uint32 img_h = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_img_h(), target);
  }

  // optional uint32 img_w = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_img_w(), target);
  }

  // optional float step = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_step(), target);
  }

  // optional float step_h = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_step_h(), target);
  }

  // optional float step_w = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_step_w(), target);
  }

  // optional float offset = 13 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PriorBoxParameter)
  return target;
}

size_t PriorBoxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PriorBoxParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float min_size = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_min_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_size_size());
    total_size += data_size;
  }

  // repeated float max_size = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_size_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_size_size());
    total_size += data_size;
  }

  // repeated float aspect_ratio = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aspect_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aspect_ratio_size());
    total_size += data_size;
  }

  // repeated float variance = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_variance_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_variance_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool clip = 5 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 img_size = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_img_size());
    }

    // optional uint32 img_h = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_img_h());
    }

    // optional uint32 img_w = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_img_w());
    }

    // optional float step = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float step_h = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float step_w = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool flip = 4 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional float offset = 13 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriorBoxParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PriorBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PriorBoxParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriorBoxParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PriorBoxParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PriorBoxParameter)
    MergeFrom(*source);
  }
}

void PriorBoxParameter::MergeFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PriorBoxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_size_.MergeFrom(from.min_size_);
  max_size_.MergeFrom(from.max_size_);
  aspect_ratio_.MergeFrom(from.aspect_ratio_);
  variance_.MergeFrom(from.variance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      clip_ = from.clip_;
    }
    if (cached_has_bits & 0x00000002u) {
      img_size_ = from.img_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      img_h_ = from.img_h_;
    }
    if (cached_has_bits & 0x00000008u) {
      img_w_ = from.img_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_h_ = from.step_h_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_w_ = from.step_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      flip_ = from.flip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_offset(from._internal_offset());
  }
}

void PriorBoxParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PriorBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriorBoxParameter::CopyFrom(const PriorBoxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PriorBoxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriorBoxParameter::IsInitialized() const {
  return true;
}

void PriorBoxParameter::InternalSwap(PriorBoxParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_size_.InternalSwap(&other->min_size_);
  max_size_.InternalSwap(&other->max_size_);
  aspect_ratio_.InternalSwap(&other->aspect_ratio_);
  variance_.InternalSwap(&other->variance_);
  swap(clip_, other->clip_);
  swap(img_size_, other->img_size_);
  swap(img_h_, other->img_h_);
  swap(img_w_, other->img_w_);
  swap(step_, other->step_);
  swap(step_h_, other->step_h_);
  swap(step_w_, other->step_w_);
  swap(flip_, other->flip_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriorBoxParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PythonParameter::InitAsDefaultInstance() {
}
class PythonParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PythonParameter>()._has_bits_);
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_share_in_parallel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PythonParameter::PythonParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PythonParameter)
}
PythonParameter::PythonParameter(const PythonParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_module()) {
    module_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_);
  }
  layer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_layer()) {
    layer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_);
  }
  param_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param_str()) {
    param_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.param_str_);
  }
  share_in_parallel_ = from.share_in_parallel_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PythonParameter)
}

void PythonParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  share_in_parallel_ = false;
}

PythonParameter::~PythonParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PythonParameter)
  SharedDtor();
}

void PythonParameter::SharedDtor() {
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PythonParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PythonParameter& PythonParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PythonParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PythonParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PythonParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      module_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      layer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      param_str_.ClearNonDefaultToEmptyNoArena();
    }
  }
  share_in_parallel_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PythonParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.PythonParameter.module");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_layer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.PythonParameter.layer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param_str = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_param_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.PythonParameter.param_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_in_parallel = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_share_in_parallel(&has_bits);
          share_in_parallel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PythonParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PythonParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string module = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.PythonParameter.module");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_module(), target);
  }

  // optional string layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_layer().data(), static_cast<int>(this->_internal_layer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.PythonParameter.layer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_layer(), target);
  }

  // optional string param_str = 3 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param_str().data(), static_cast<int>(this->_internal_param_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.PythonParameter.param_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_param_str(), target);
  }

  // optional bool share_in_parallel = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_share_in_parallel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PythonParameter)
  return target;
}

size_t PythonParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PythonParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string module = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module());
    }

    // optional string layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_layer());
    }

    // optional string param_str = 3 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param_str());
    }

    // optional bool share_in_parallel = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PythonParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PythonParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PythonParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PythonParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PythonParameter)
    MergeFrom(*source);
  }
}

void PythonParameter::MergeFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PythonParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      module_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      layer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      param_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.param_str_);
    }
    if (cached_has_bits & 0x00000008u) {
      share_in_parallel_ = from.share_in_parallel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PythonParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PythonParameter::CopyFrom(const PythonParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PythonParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PythonParameter::IsInitialized() const {
  return true;
}

void PythonParameter::InternalSwap(PythonParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  module_.Swap(&other->module_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  layer_.Swap(&other->layer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param_str_.Swap(&other->param_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(share_in_parallel_, other->share_in_parallel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PythonParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecurrentParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_RecurrentParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_RecurrentParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class RecurrentParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RecurrentParameter>()._has_bits_);
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const RecurrentParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const RecurrentParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expose_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::perception::inference::FillerParameter&
RecurrentParameter::_Internal::weight_filler(const RecurrentParameter* msg) {
  return *msg->weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
RecurrentParameter::_Internal::bias_filler(const RecurrentParameter* msg) {
  return *msg->bias_filler_;
}
RecurrentParameter::RecurrentParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.RecurrentParameter)
}
RecurrentParameter::RecurrentParameter(const RecurrentParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_weight_filler()) {
    weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = nullptr;
  }
  if (from._internal_has_bias_filler()) {
    bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = nullptr;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&expose_hidden_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(expose_hidden_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RecurrentParameter)
}

void RecurrentParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expose_hidden_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(expose_hidden_));
}

RecurrentParameter::~RecurrentParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RecurrentParameter)
  SharedDtor();
}

void RecurrentParameter::SharedDtor() {
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void RecurrentParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecurrentParameter& RecurrentParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecurrentParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void RecurrentParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RecurrentParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expose_hidden_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(expose_hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecurrentParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num_output = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_output(&has_bits);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug_info = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_debug_info(&has_bits);
          debug_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expose_hidden = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_expose_hidden(&has_bits);
          expose_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecurrentParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RecurrentParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_output = 1 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_output(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::weight_filler(this), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bias_filler(this), target, stream);
  }

  // optional bool debug_info = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_debug_info(), target);
  }

  // optional bool expose_hidden = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_expose_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RecurrentParameter)
  return target;
}

size_t RecurrentParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RecurrentParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.FillerParameter weight_filler = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional uint32 num_output = 1 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_output());
    }

    // optional bool debug_info = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool expose_hidden = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecurrentParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.RecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RecurrentParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecurrentParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.RecurrentParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.RecurrentParameter)
    MergeFrom(*source);
  }
}

void RecurrentParameter::MergeFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RecurrentParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_info_ = from.debug_info_;
    }
    if (cached_has_bits & 0x00000010u) {
      expose_hidden_ = from.expose_hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecurrentParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.RecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecurrentParameter::CopyFrom(const RecurrentParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RecurrentParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecurrentParameter::IsInitialized() const {
  return true;
}

void RecurrentParameter::InternalSwap(RecurrentParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(num_output_, other->num_output_);
  swap(debug_info_, other->debug_info_);
  swap(expose_hidden_, other->expose_hidden_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecurrentParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReductionParameter::InitAsDefaultInstance() {
}
class ReductionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReductionParameter>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReductionParameter::ReductionParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ReductionParameter)
}
ReductionParameter::ReductionParameter(const ReductionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&coeff_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(coeff_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReductionParameter)
}

void ReductionParameter::SharedCtor() {
  axis_ = 0;
  operation_ = 1;
  coeff_ = 1;
}

ReductionParameter::~ReductionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReductionParameter)
  SharedDtor();
}

void ReductionParameter::SharedDtor() {
}

void ReductionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReductionParameter& ReductionParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReductionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ReductionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReductionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    axis_ = 0;
    operation_ = 1;
    coeff_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReductionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ReductionParameter_ReductionOp_IsValid(val))) {
            _internal_set_operation(static_cast<::apollo::perception::inference::ReductionParameter_ReductionOp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float coeff = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_coeff(&has_bits);
          coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReductionParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReductionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional float coeff = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_coeff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReductionParameter)
  return target;
}

size_t ReductionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReductionParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 axis = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional .apollo.perception.inference.ReductionParameter.ReductionOp operation = 1 [default = SUM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional float coeff = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReductionParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReductionParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReductionParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ReductionParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ReductionParameter)
    MergeFrom(*source);
  }
}

void ReductionParameter::MergeFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReductionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    if (cached_has_bits & 0x00000004u) {
      coeff_ = from.coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReductionParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReductionParameter::CopyFrom(const ReductionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReductionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReductionParameter::IsInitialized() const {
  return true;
}

void ReductionParameter::InternalSwap(ReductionParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(axis_, other->axis_);
  swap(operation_, other->operation_);
  swap(coeff_, other->coeff_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReductionParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReLUParameter::InitAsDefaultInstance() {
}
class ReLUParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReLUParameter>()._has_bits_);
  static void set_has_negative_slope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReLUParameter::ReLUParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ReLUParameter)
}
ReLUParameter::ReLUParameter(const ReLUParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&negative_slope_, &from.negative_slope_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReLUParameter)
}

void ReLUParameter::SharedCtor() {
  ::memset(&negative_slope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
}

ReLUParameter::~ReLUParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReLUParameter)
  SharedDtor();
}

void ReLUParameter::SharedDtor() {
}

void ReLUParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReLUParameter& ReLUParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReLUParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&negative_slope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&negative_slope_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReLUParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float negative_slope = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_negative_slope(&has_bits);
          negative_slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::ReLUParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::ReLUParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReLUParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReLUParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float negative_slope = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_negative_slope(), target);
  }

  // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReLUParameter)
  return target;
}

size_t ReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReLUParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float negative_slope = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.inference.ReLUParameter.Engine engine = 2 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReLUParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLUParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReLUParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ReLUParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ReLUParameter)
    MergeFrom(*source);
  }
}

void ReLUParameter::MergeFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      negative_slope_ = from.negative_slope_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReLUParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParameter::CopyFrom(const ReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParameter::IsInitialized() const {
  return true;
}

void ReLUParameter::InternalSwap(ReLUParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(negative_slope_, other->negative_slope_);
  swap(engine_, other->engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReLUParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReshapeParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_ReshapeParameter_default_instance_._instance.get_mutable()->shape_ = const_cast< ::apollo::perception::inference::BlobShape*>(
      ::apollo::perception::inference::BlobShape::internal_default_instance());
}
class ReshapeParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReshapeParameter>()._has_bits_);
  static const ::apollo::perception::inference::BlobShape& shape(const ReshapeParameter* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::inference::BlobShape&
ReshapeParameter::_Internal::shape(const ReshapeParameter* msg) {
  return *msg->shape_;
}
ReshapeParameter::ReshapeParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ReshapeParameter)
}
ReshapeParameter::ReshapeParameter(const ReshapeParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::apollo::perception::inference::BlobShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReshapeParameter)
}

void ReshapeParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(axis_));
  num_axes_ = -1;
}

ReshapeParameter::~ReshapeParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReshapeParameter)
  SharedDtor();
}

void ReshapeParameter::SharedDtor() {
  if (this != internal_default_instance()) delete shape_;
}

void ReshapeParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReshapeParameter& ReshapeParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReshapeParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ReshapeParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReshapeParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shape_ != nullptr);
    shape_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    axis_ = 0;
    num_axes_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReshapeParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.BlobShape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_axes = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_axes(&has_bits);
          num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReshapeParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReshapeParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.BlobShape shape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shape(this), target, stream);
  }

  // optional int32 axis = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_axes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReshapeParameter)
  return target;
}

size_t ReshapeParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReshapeParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.perception.inference.BlobShape shape = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional int32 axis = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional int32 num_axes = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_axes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReshapeParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReshapeParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReshapeParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ReshapeParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ReshapeParameter)
    MergeFrom(*source);
  }
}

void ReshapeParameter::MergeFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReshapeParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shape()->::apollo::perception::inference::BlobShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReshapeParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReshapeParameter::CopyFrom(const ReshapeParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReshapeParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReshapeParameter::IsInitialized() const {
  return true;
}

void ReshapeParameter::InternalSwap(ReshapeParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shape_, other->shape_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReshapeParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROIPoolingParameter::InitAsDefaultInstance() {
}
class ROIPoolingParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ROIPoolingParameter>()._has_bits_);
  static void set_has_pooled_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pooled_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spatial_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ROIPoolingParameter::ROIPoolingParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ROIPoolingParameter)
}
ROIPoolingParameter::ROIPoolingParameter(const ROIPoolingParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pooled_h_, &from.pooled_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&spatial_scale_) -
    reinterpret_cast<char*>(&pooled_h_)) + sizeof(spatial_scale_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ROIPoolingParameter)
}

void ROIPoolingParameter::SharedCtor() {
  ::memset(&pooled_h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_floor_) -
      reinterpret_cast<char*>(&pooled_h_)) + sizeof(use_floor_));
  spatial_scale_ = 1;
}

ROIPoolingParameter::~ROIPoolingParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ROIPoolingParameter)
  SharedDtor();
}

void ROIPoolingParameter::SharedDtor() {
}

void ROIPoolingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROIPoolingParameter& ROIPoolingParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROIPoolingParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ROIPoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ROIPoolingParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pooled_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_floor_) -
        reinterpret_cast<char*>(&pooled_h_)) + sizeof(use_floor_));
    spatial_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROIPoolingParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pooled_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pooled_h(&has_bits);
          pooled_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pooled_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pooled_w(&has_bits);
          pooled_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float spatial_scale = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_spatial_scale(&has_bits);
          spatial_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_floor = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_floor(&has_bits);
          use_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROIPoolingParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ROIPoolingParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pooled_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pooled_h(), target);
  }

  // optional uint32 pooled_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pooled_w(), target);
  }

  // optional float spatial_scale = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_spatial_scale(), target);
  }

  // optional bool use_floor = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ROIPoolingParameter)
  return target;
}

size_t ROIPoolingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ROIPoolingParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 pooled_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pooled_h());
    }

    // optional uint32 pooled_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pooled_w());
    }

    // optional bool use_floor = 10 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float spatial_scale = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROIPoolingParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIPoolingParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROIPoolingParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ROIPoolingParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ROIPoolingParameter)
    MergeFrom(*source);
  }
}

void ROIPoolingParameter::MergeFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ROIPoolingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pooled_h_ = from.pooled_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      pooled_w_ = from.pooled_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_floor_ = from.use_floor_;
    }
    if (cached_has_bits & 0x00000008u) {
      spatial_scale_ = from.spatial_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIPoolingParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIPoolingParameter::CopyFrom(const ROIPoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ROIPoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIPoolingParameter::IsInitialized() const {
  return true;
}

void ROIPoolingParameter::InternalSwap(ROIPoolingParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pooled_h_, other->pooled_h_);
  swap(pooled_w_, other->pooled_w_);
  swap(use_floor_, other->use_floor_);
  swap(spatial_scale_, other->spatial_scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIPoolingParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScaleParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_ScaleParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_ScaleParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class ScaleParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ScaleParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::FillerParameter& filler(const ScaleParameter* msg);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bias_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const ScaleParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::FillerParameter&
ScaleParameter::_Internal::filler(const ScaleParameter* msg) {
  return *msg->filler_;
}
const ::apollo::perception::inference::FillerParameter&
ScaleParameter::_Internal::bias_filler(const ScaleParameter* msg) {
  return *msg->bias_filler_;
}
ScaleParameter::ScaleParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ScaleParameter)
}
ScaleParameter::ScaleParameter(const ScaleParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_filler()) {
    filler_ = new ::apollo::perception::inference::FillerParameter(*from.filler_);
  } else {
    filler_ = nullptr;
  }
  if (from._internal_has_bias_filler()) {
    bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = nullptr;
  }
  ::memcpy(&bias_term_, &from.bias_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_axes_) -
    reinterpret_cast<char*>(&bias_term_)) + sizeof(num_axes_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ScaleParameter)
}

void ScaleParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_term_) -
      reinterpret_cast<char*>(&filler_)) + sizeof(bias_term_));
  axis_ = 1;
  num_axes_ = 1;
}

ScaleParameter::~ScaleParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ScaleParameter)
  SharedDtor();
}

void ScaleParameter::SharedDtor() {
  if (this != internal_default_instance()) delete filler_;
  if (this != internal_default_instance()) delete bias_filler_;
}

void ScaleParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScaleParameter& ScaleParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScaleParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ScaleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ScaleParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filler_ != nullptr);
      filler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    bias_term_ = false;
    axis_ = 1;
    num_axes_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScaleParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_axes = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_axes(&has_bits);
          num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter filler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bias_term = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bias_term(&has_bits);
          bias_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScaleParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ScaleParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 num_axes = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_axes(), target);
  }

  // optional .apollo.perception.inference.FillerParameter filler = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::filler(this), target, stream);
  }

  // optional bool bias_term = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bias_term(), target);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bias_filler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ScaleParameter)
  return target;
}

size_t ScaleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ScaleParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.inference.FillerParameter filler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional bool bias_term = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional int32 num_axes = 2 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_axes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScaleParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScaleParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ScaleParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ScaleParameter)
    MergeFrom(*source);
  }
}

void ScaleParameter::MergeFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ScaleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000004u) {
      bias_term_ = from.bias_term_;
    }
    if (cached_has_bits & 0x00000008u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_axes_ = from.num_axes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScaleParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleParameter::CopyFrom(const ScaleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ScaleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleParameter::IsInitialized() const {
  return true;
}

void ScaleParameter::InternalSwap(ScaleParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filler_, other->filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(bias_term_, other->bias_term_);
  swap(axis_, other->axis_);
  swap(num_axes_, other->num_axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SigmoidParameter::InitAsDefaultInstance() {
}
class SigmoidParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SigmoidParameter>()._has_bits_);
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SigmoidParameter::SigmoidParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SigmoidParameter)
}
SigmoidParameter::SigmoidParameter(const SigmoidParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SigmoidParameter)
}

void SigmoidParameter::SharedCtor() {
  engine_ = 0;
}

SigmoidParameter::~SigmoidParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SigmoidParameter)
  SharedDtor();
}

void SigmoidParameter::SharedDtor() {
}

void SigmoidParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SigmoidParameter& SigmoidParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SigmoidParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SigmoidParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SigmoidParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SigmoidParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SigmoidParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::SigmoidParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SigmoidParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SigmoidParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SigmoidParameter)
  return target;
}

size_t SigmoidParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SigmoidParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SigmoidParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SigmoidParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SigmoidParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SigmoidParameter)
    MergeFrom(*source);
  }
}

void SigmoidParameter::MergeFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SigmoidParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_engine()) {
    _internal_set_engine(from._internal_engine());
  }
}

void SigmoidParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParameter::CopyFrom(const SigmoidParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SigmoidParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParameter::IsInitialized() const {
  return true;
}

void SigmoidParameter::InternalSwap(SigmoidParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(engine_, other->engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigmoidParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SliceParameter::InitAsDefaultInstance() {
}
class SliceParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SliceParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slice_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SliceParameter::SliceParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SliceParameter)
}
SliceParameter::SliceParameter(const SliceParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      slice_point_(from.slice_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slice_dim_, &from.slice_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&slice_dim_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SliceParameter)
}

void SliceParameter::SharedCtor() {
  slice_dim_ = 1u;
  axis_ = 1;
}

SliceParameter::~SliceParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SliceParameter)
  SharedDtor();
}

void SliceParameter::SharedDtor() {
}

void SliceParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SliceParameter& SliceParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SliceParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SliceParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SliceParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    slice_dim_ = 1u;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SliceParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slice_dim = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slice_dim(&has_bits);
          slice_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 slice_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_slice_point(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_slice_point(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SliceParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SliceParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slice_dim = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slice_dim(), target);
  }

  // repeated uint32 slice_point = 2;
  for (int i = 0, n = this->_internal_slice_point_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slice_point(i), target);
  }

  // optional int32 axis = 3 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SliceParameter)
  return target;
}

size_t SliceParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SliceParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 slice_point = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->slice_point_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_slice_point_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 slice_dim = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slice_dim());
    }

    // optional int32 axis = 3 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SliceParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SliceParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SliceParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SliceParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SliceParameter)
    MergeFrom(*source);
  }
}

void SliceParameter::MergeFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SliceParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slice_point_.MergeFrom(from.slice_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      slice_dim_ = from.slice_dim_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SliceParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceParameter::CopyFrom(const SliceParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SliceParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceParameter::IsInitialized() const {
  return true;
}

void SliceParameter::InternalSwap(SliceParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slice_point_.InternalSwap(&other->slice_point_);
  swap(slice_dim_, other->slice_dim_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftmaxParameter::InitAsDefaultInstance() {
}
class SoftmaxParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftmaxParameter>()._has_bits_);
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SoftmaxParameter::SoftmaxParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SoftmaxParameter)
}
SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&engine_, &from.engine_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&engine_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
  engine_ = 0;
  axis_ = 1;
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
}

void SoftmaxParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftmaxParameter& SoftmaxParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftmaxParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SoftmaxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    engine_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SoftmaxParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SoftmaxParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::SoftmaxParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftmaxParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SoftmaxParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  // optional int32 axis = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SoftmaxParameter)
  return target;
}

size_t SoftmaxParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SoftmaxParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional int32 axis = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftmaxParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftmaxParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SoftmaxParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SoftmaxParameter)
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SoftmaxParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoftmaxParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {
  return true;
}

void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(engine_, other->engine_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftmaxParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TanHParameter::InitAsDefaultInstance() {
}
class TanHParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TanHParameter>()._has_bits_);
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TanHParameter::TanHParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.TanHParameter)
}
TanHParameter::TanHParameter(const TanHParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_ = from.engine_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.TanHParameter)
}

void TanHParameter::SharedCtor() {
  engine_ = 0;
}

TanHParameter::~TanHParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.TanHParameter)
  SharedDtor();
}

void TanHParameter::SharedDtor() {
}

void TanHParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TanHParameter& TanHParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TanHParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void TanHParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.TanHParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TanHParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::TanHParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::TanHParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TanHParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.TanHParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.TanHParameter)
  return target;
}

size_t TanHParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.TanHParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.perception.inference.TanHParameter.Engine engine = 1 [default = DEFAULT];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TanHParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TanHParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TanHParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.TanHParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.TanHParameter)
    MergeFrom(*source);
  }
}

void TanHParameter::MergeFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.TanHParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_engine()) {
    _internal_set_engine(from._internal_engine());
  }
}

void TanHParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TanHParameter::CopyFrom(const TanHParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.TanHParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TanHParameter::IsInitialized() const {
  return true;
}

void TanHParameter::InternalSwap(TanHParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(engine_, other->engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TanHParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TileParameter::InitAsDefaultInstance() {
}
class TileParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TileParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TileParameter::TileParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.TileParameter)
}
TileParameter::TileParameter(const TileParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tiles_, &from.tiles_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_) -
    reinterpret_cast<char*>(&tiles_)) + sizeof(axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.TileParameter)
}

void TileParameter::SharedCtor() {
  tiles_ = 0;
  axis_ = 1;
}

TileParameter::~TileParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.TileParameter)
  SharedDtor();
}

void TileParameter::SharedDtor() {
}

void TileParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TileParameter& TileParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TileParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void TileParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.TileParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    tiles_ = 0;
    axis_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TileParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 axis = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tiles(&has_bits);
          tiles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.TileParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // optional int32 tiles = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tiles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.TileParameter)
  return target;
}

size_t TileParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.TileParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tiles = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tiles());
    }

    // optional int32 axis = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TileParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TileParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.TileParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.TileParameter)
    MergeFrom(*source);
  }
}

void TileParameter::MergeFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.TileParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tiles_ = from.tiles_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_ = from.axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TileParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileParameter::CopyFrom(const TileParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.TileParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileParameter::IsInitialized() const {
  return true;
}

void TileParameter::InternalSwap(TileParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tiles_, other->tiles_);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThresholdParameter::InitAsDefaultInstance() {
}
class ThresholdParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ThresholdParameter>()._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThresholdParameter::ThresholdParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ThresholdParameter)
}
ThresholdParameter::ThresholdParameter(const ThresholdParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ThresholdParameter)
}

void ThresholdParameter::SharedCtor() {
  threshold_ = 0;
}

ThresholdParameter::~ThresholdParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ThresholdParameter)
  SharedDtor();
}

void ThresholdParameter::SharedDtor() {
}

void ThresholdParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThresholdParameter& ThresholdParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThresholdParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ThresholdParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ThresholdParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ThresholdParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float threshold = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThresholdParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ThresholdParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ThresholdParameter)
  return target;
}

size_t ThresholdParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ThresholdParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float threshold = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThresholdParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ThresholdParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ThresholdParameter)
    MergeFrom(*source);
  }
}

void ThresholdParameter::MergeFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ThresholdParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_threshold()) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void ThresholdParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParameter::CopyFrom(const ThresholdParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ThresholdParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParameter::IsInitialized() const {
  return true;
}

void ThresholdParameter::InternalSwap(ThresholdParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoDataParameter::InitAsDefaultInstance() {
}
class VideoDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoDataParameter>()._has_bits_);
  static void set_has_video_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skip_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

VideoDataParameter::VideoDataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.VideoDataParameter)
}
VideoDataParameter::VideoDataParameter(const VideoDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  video_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_video_file()) {
    video_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_file_);
  }
  ::memcpy(&video_type_, &from.video_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_frames_) -
    reinterpret_cast<char*>(&video_type_)) + sizeof(skip_frames_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.VideoDataParameter)
}

void VideoDataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  video_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_frames_) -
      reinterpret_cast<char*>(&video_type_)) + sizeof(skip_frames_));
}

VideoDataParameter::~VideoDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.VideoDataParameter)
  SharedDtor();
}

void VideoDataParameter::SharedDtor() {
  video_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoDataParameter& VideoDataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void VideoDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.VideoDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    video_file_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&video_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_frames_) -
        reinterpret_cast<char*>(&video_type_)) + sizeof(skip_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VideoDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::VideoDataParameter_VideoType_IsValid(val))) {
            _internal_set_video_type(static_cast<::apollo::perception::inference::VideoDataParameter_VideoType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 device_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_device_id(&has_bits);
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string video_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_video_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.VideoDataParameter.video_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skip_frames = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skip_frames(&has_bits);
          skip_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoDataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.VideoDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_video_type(), target);
  }

  // optional int32 device_id = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_id(), target);
  }

  // optional string video_file = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_video_file().data(), static_cast<int>(this->_internal_video_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.VideoDataParameter.video_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_video_file(), target);
  }

  // optional uint32 skip_frames = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skip_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.VideoDataParameter)
  return target;
}

size_t VideoDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.VideoDataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string video_file = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_video_file());
    }

    // optional .apollo.perception.inference.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_video_type());
    }

    // optional int32 device_id = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_device_id());
    }

    // optional uint32 skip_frames = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skip_frames());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoDataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.VideoDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoDataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoDataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.VideoDataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.VideoDataParameter)
    MergeFrom(*source);
  }
}

void VideoDataParameter::MergeFrom(const VideoDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.VideoDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      video_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.video_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      video_type_ = from.video_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      device_id_ = from.device_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      skip_frames_ = from.skip_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoDataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.VideoDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoDataParameter::CopyFrom(const VideoDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.VideoDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDataParameter::IsInitialized() const {
  return true;
}

void VideoDataParameter::InternalSwap(VideoDataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  video_file_.Swap(&other->video_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(video_type_, other->video_type_);
  swap(device_id_, other->device_id_);
  swap(skip_frames_, other->skip_frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoDataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowDataParameter::InitAsDefaultInstance() {
}
class WindowDataParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowDataParameter>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mean_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crop_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fg_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_context_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_crop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_images(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_root_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_;
WindowDataParameter::WindowDataParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.WindowDataParameter)
}
WindowDataParameter::WindowDataParameter(const WindowDataParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mean_file()) {
    mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  crop_mode_.UnsafeSetDefault(&::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
  if (from._internal_has_crop_mode()) {
    crop_mode_.AssignWithDefault(&::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), from.crop_mode_);
  }
  root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_root_folder()) {
    root_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&fg_fraction_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.WindowDataParameter)
}

void WindowDataParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crop_mode_.UnsafeSetDefault(&::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
  root_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_pad_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(context_pad_));
  scale_ = 1;
  fg_threshold_ = 0.5f;
  bg_threshold_ = 0.5f;
  fg_fraction_ = 0.25f;
}

WindowDataParameter::~WindowDataParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.WindowDataParameter)
  SharedDtor();
}

void WindowDataParameter::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crop_mode_.DestroyNoArena(&::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
  root_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WindowDataParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowDataParameter& WindowDataParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowDataParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void WindowDataParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.WindowDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mean_file_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      crop_mode_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      root_folder_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&batch_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_images_) -
        reinterpret_cast<char*>(&batch_size_)) + sizeof(cache_images_));
  }
  if (cached_has_bits & 0x00001f00u) {
    context_pad_ = 0u;
    scale_ = 1;
    fg_threshold_ = 0.5f;
    bg_threshold_ = 0.5f;
    fg_fraction_ = 0.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WindowDataParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string mean_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mean_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.mean_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_batch_size(&has_bits);
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crop_size = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crop_size(&has_bits);
          crop_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mirror = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mirror(&has_bits);
          mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fg_threshold = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_fg_threshold(&has_bits);
          fg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bg_threshold = 8 [default = 0.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_bg_threshold(&has_bits);
          bg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fg_fraction = 9 [default = 0.25];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_fg_fraction(&has_bits);
          fg_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 context_pad = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_context_pad(&has_bits);
          context_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string crop_mode = 11 [default = "warp"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_crop_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.crop_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cache_images = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cache_images(&has_bits);
          cache_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string root_folder = 13 [default = ""];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_root_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.WindowDataParameter.root_folder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowDataParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.WindowDataParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source(), target);
  }

  // optional float scale = 2 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional string mean_file = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mean_file().data(), static_cast<int>(this->_internal_mean_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.mean_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mean_file(), target);
  }

  // optional uint32 batch_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional uint32 crop_size = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_crop_size(), target);
  }

  // optional bool mirror = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mirror(), target);
  }

  // optional float fg_threshold = 7 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fg_threshold(), target);
  }

  // optional float bg_threshold = 8 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bg_threshold(), target);
  }

  // optional float fg_fraction = 9 [default = 0.25];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_fg_fraction(), target);
  }

  // optional uint32 context_pad = 10 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_context_pad(), target);
  }

  // optional string crop_mode = 11 [default = "warp"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_crop_mode().data(), static_cast<int>(this->_internal_crop_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.crop_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_crop_mode(), target);
  }

  // optional bool cache_images = 12 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cache_images(), target);
  }

  // optional string root_folder = 13 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_root_folder().data(), static_cast<int>(this->_internal_root_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.WindowDataParameter.root_folder");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_root_folder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.WindowDataParameter)
  return target;
}

size_t WindowDataParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.WindowDataParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string mean_file = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mean_file());
    }

    // optional string crop_mode = 11 [default = "warp"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_crop_mode());
    }

    // optional string root_folder = 13 [default = ""];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_root_folder());
    }

    // optional uint32 batch_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batch_size());
    }

    // optional uint32 crop_size = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crop_size());
    }

    // optional bool mirror = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool cache_images = 12 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 context_pad = 10 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_context_pad());
    }

    // optional float scale = 2 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float fg_threshold = 7 [default = 0.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float bg_threshold = 8 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float fg_fraction = 9 [default = 0.25];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowDataParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowDataParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowDataParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.WindowDataParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.WindowDataParameter)
    MergeFrom(*source);
  }
}

void WindowDataParameter::MergeFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.WindowDataParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mean_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      crop_mode_.AssignWithDefault(&::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(), from.crop_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      root_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_folder_);
    }
    if (cached_has_bits & 0x00000010u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_size_ = from.crop_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      mirror_ = from.mirror_;
    }
    if (cached_has_bits & 0x00000080u) {
      cache_images_ = from.cache_images_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      context_pad_ = from.context_pad_;
    }
    if (cached_has_bits & 0x00000200u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000400u) {
      fg_threshold_ = from.fg_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      bg_threshold_ = from.bg_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      fg_fraction_ = from.fg_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowDataParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowDataParameter::CopyFrom(const WindowDataParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.WindowDataParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowDataParameter::IsInitialized() const {
  return true;
}

void WindowDataParameter::InternalSwap(WindowDataParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mean_file_.Swap(&other->mean_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crop_mode_.Swap(&other->crop_mode_, &::apollo::perception::inference::WindowDataParameter::_i_give_permission_to_break_this_code_default_crop_mode_.get(),
    GetArenaNoVirtual());
  root_folder_.Swap(&other->root_folder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(batch_size_, other->batch_size_);
  swap(crop_size_, other->crop_size_);
  swap(mirror_, other->mirror_);
  swap(cache_images_, other->cache_images_);
  swap(context_pad_, other->context_pad_);
  swap(scale_, other->scale_);
  swap(fg_threshold_, other->fg_threshold_);
  swap(bg_threshold_, other->bg_threshold_);
  swap(fg_fraction_, other->fg_fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowDataParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SPPParameter::InitAsDefaultInstance() {
}
class SPPParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<SPPParameter>()._has_bits_);
  static void set_has_pyramid_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SPPParameter::SPPParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.SPPParameter)
}
SPPParameter::SPPParameter(const SPPParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pyramid_height_, &from.pyramid_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_) -
    reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.SPPParameter)
}

void SPPParameter::SharedCtor() {
  ::memset(&pyramid_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_) -
      reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
}

SPPParameter::~SPPParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.SPPParameter)
  SharedDtor();
}

void SPPParameter::SharedDtor() {
}

void SPPParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SPPParameter& SPPParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SPPParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void SPPParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.SPPParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pyramid_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_) -
        reinterpret_cast<char*>(&pyramid_height_)) + sizeof(engine_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SPPParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pyramid_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pyramid_height(&has_bits);
          pyramid_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SPPParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::apollo::perception::inference::SPPParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::SPPParameter_Engine_IsValid(val))) {
            _internal_set_engine(static_cast<::apollo::perception::inference::SPPParameter_Engine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SPPParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.SPPParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pyramid_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pyramid_height(), target);
  }

  // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pool(), target);
  }

  // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.SPPParameter)
  return target;
}

size_t SPPParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.SPPParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pyramid_height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pyramid_height());
    }

    // optional .apollo.perception.inference.SPPParameter.PoolMethod pool = 2 [default = MAX];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional .apollo.perception.inference.SPPParameter.Engine engine = 6 [default = DEFAULT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SPPParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const SPPParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SPPParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.SPPParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.SPPParameter)
    MergeFrom(*source);
  }
}

void SPPParameter::MergeFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.SPPParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pyramid_height_ = from.pyramid_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000004u) {
      engine_ = from.engine_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SPPParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPParameter::CopyFrom(const SPPParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.SPPParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPParameter::IsInitialized() const {
  return true;
}

void SPPParameter::InternalSwap(SPPParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pyramid_height_, other->pyramid_height_);
  swap(pool_, other->pool_);
  swap(engine_, other->engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPPParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void V1LayerParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->accuracy_param_ = const_cast< ::apollo::perception::inference::AccuracyParameter*>(
      ::apollo::perception::inference::AccuracyParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->argmax_param_ = const_cast< ::apollo::perception::inference::ArgMaxParameter*>(
      ::apollo::perception::inference::ArgMaxParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->concat_param_ = const_cast< ::apollo::perception::inference::ConcatParameter*>(
      ::apollo::perception::inference::ConcatParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->contrastive_loss_param_ = const_cast< ::apollo::perception::inference::ContrastiveLossParameter*>(
      ::apollo::perception::inference::ContrastiveLossParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->convolution_param_ = const_cast< ::apollo::perception::inference::ConvolutionParameter*>(
      ::apollo::perception::inference::ConvolutionParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->data_param_ = const_cast< ::apollo::perception::inference::DataParameter*>(
      ::apollo::perception::inference::DataParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->dropout_param_ = const_cast< ::apollo::perception::inference::DropoutParameter*>(
      ::apollo::perception::inference::DropoutParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->dummy_data_param_ = const_cast< ::apollo::perception::inference::DummyDataParameter*>(
      ::apollo::perception::inference::DummyDataParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->eltwise_param_ = const_cast< ::apollo::perception::inference::EltwiseParameter*>(
      ::apollo::perception::inference::EltwiseParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->exp_param_ = const_cast< ::apollo::perception::inference::ExpParameter*>(
      ::apollo::perception::inference::ExpParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->hdf5_data_param_ = const_cast< ::apollo::perception::inference::HDF5DataParameter*>(
      ::apollo::perception::inference::HDF5DataParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::apollo::perception::inference::HDF5OutputParameter*>(
      ::apollo::perception::inference::HDF5OutputParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->hinge_loss_param_ = const_cast< ::apollo::perception::inference::HingeLossParameter*>(
      ::apollo::perception::inference::HingeLossParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->image_data_param_ = const_cast< ::apollo::perception::inference::ImageDataParameter*>(
      ::apollo::perception::inference::ImageDataParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->infogain_loss_param_ = const_cast< ::apollo::perception::inference::InfogainLossParameter*>(
      ::apollo::perception::inference::InfogainLossParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->inner_product_param_ = const_cast< ::apollo::perception::inference::InnerProductParameter*>(
      ::apollo::perception::inference::InnerProductParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->lrn_param_ = const_cast< ::apollo::perception::inference::LRNParameter*>(
      ::apollo::perception::inference::LRNParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->memory_data_param_ = const_cast< ::apollo::perception::inference::MemoryDataParameter*>(
      ::apollo::perception::inference::MemoryDataParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->mvn_param_ = const_cast< ::apollo::perception::inference::MVNParameter*>(
      ::apollo::perception::inference::MVNParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->pooling_param_ = const_cast< ::apollo::perception::inference::PoolingParameter*>(
      ::apollo::perception::inference::PoolingParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->power_param_ = const_cast< ::apollo::perception::inference::PowerParameter*>(
      ::apollo::perception::inference::PowerParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->relu_param_ = const_cast< ::apollo::perception::inference::ReLUParameter*>(
      ::apollo::perception::inference::ReLUParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->sigmoid_param_ = const_cast< ::apollo::perception::inference::SigmoidParameter*>(
      ::apollo::perception::inference::SigmoidParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->softmax_param_ = const_cast< ::apollo::perception::inference::SoftmaxParameter*>(
      ::apollo::perception::inference::SoftmaxParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->slice_param_ = const_cast< ::apollo::perception::inference::SliceParameter*>(
      ::apollo::perception::inference::SliceParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->tanh_param_ = const_cast< ::apollo::perception::inference::TanHParameter*>(
      ::apollo::perception::inference::TanHParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->threshold_param_ = const_cast< ::apollo::perception::inference::ThresholdParameter*>(
      ::apollo::perception::inference::ThresholdParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->window_data_param_ = const_cast< ::apollo::perception::inference::WindowDataParameter*>(
      ::apollo::perception::inference::WindowDataParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->transform_param_ = const_cast< ::apollo::perception::inference::TransformationParameter*>(
      ::apollo::perception::inference::TransformationParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->loss_param_ = const_cast< ::apollo::perception::inference::LossParameter*>(
      ::apollo::perception::inference::LossParameter::internal_default_instance());
  ::apollo::perception::inference::_V1LayerParameter_default_instance_._instance.get_mutable()->layer_ = const_cast< ::apollo::perception::inference::V0LayerParameter*>(
      ::apollo::perception::inference::V0LayerParameter::internal_default_instance());
}
class V1LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<V1LayerParameter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::apollo::perception::inference::AccuracyParameter& accuracy_param(const V1LayerParameter* msg);
  static void set_has_accuracy_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::perception::inference::ArgMaxParameter& argmax_param(const V1LayerParameter* msg);
  static void set_has_argmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::perception::inference::ConcatParameter& concat_param(const V1LayerParameter* msg);
  static void set_has_concat_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::perception::inference::ContrastiveLossParameter& contrastive_loss_param(const V1LayerParameter* msg);
  static void set_has_contrastive_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::perception::inference::ConvolutionParameter& convolution_param(const V1LayerParameter* msg);
  static void set_has_convolution_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::inference::DataParameter& data_param(const V1LayerParameter* msg);
  static void set_has_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::perception::inference::DropoutParameter& dropout_param(const V1LayerParameter* msg);
  static void set_has_dropout_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::DummyDataParameter& dummy_data_param(const V1LayerParameter* msg);
  static void set_has_dummy_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::perception::inference::EltwiseParameter& eltwise_param(const V1LayerParameter* msg);
  static void set_has_eltwise_param(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::perception::inference::ExpParameter& exp_param(const V1LayerParameter* msg);
  static void set_has_exp_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::perception::inference::HDF5DataParameter& hdf5_data_param(const V1LayerParameter* msg);
  static void set_has_hdf5_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param(const V1LayerParameter* msg);
  static void set_has_hdf5_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::perception::inference::HingeLossParameter& hinge_loss_param(const V1LayerParameter* msg);
  static void set_has_hinge_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::perception::inference::ImageDataParameter& image_data_param(const V1LayerParameter* msg);
  static void set_has_image_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::perception::inference::InfogainLossParameter& infogain_loss_param(const V1LayerParameter* msg);
  static void set_has_infogain_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::inference::InnerProductParameter& inner_product_param(const V1LayerParameter* msg);
  static void set_has_inner_product_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::perception::inference::LRNParameter& lrn_param(const V1LayerParameter* msg);
  static void set_has_lrn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::perception::inference::MemoryDataParameter& memory_data_param(const V1LayerParameter* msg);
  static void set_has_memory_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::perception::inference::MVNParameter& mvn_param(const V1LayerParameter* msg);
  static void set_has_mvn_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::perception::inference::PoolingParameter& pooling_param(const V1LayerParameter* msg);
  static void set_has_pooling_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::perception::inference::PowerParameter& power_param(const V1LayerParameter* msg);
  static void set_has_power_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::perception::inference::ReLUParameter& relu_param(const V1LayerParameter* msg);
  static void set_has_relu_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::perception::inference::SigmoidParameter& sigmoid_param(const V1LayerParameter* msg);
  static void set_has_sigmoid_param(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::perception::inference::SoftmaxParameter& softmax_param(const V1LayerParameter* msg);
  static void set_has_softmax_param(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::perception::inference::SliceParameter& slice_param(const V1LayerParameter* msg);
  static void set_has_slice_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::perception::inference::TanHParameter& tanh_param(const V1LayerParameter* msg);
  static void set_has_tanh_param(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::perception::inference::ThresholdParameter& threshold_param(const V1LayerParameter* msg);
  static void set_has_threshold_param(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::perception::inference::WindowDataParameter& window_data_param(const V1LayerParameter* msg);
  static void set_has_window_data_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::perception::inference::TransformationParameter& transform_param(const V1LayerParameter* msg);
  static void set_has_transform_param(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::perception::inference::LossParameter& loss_param(const V1LayerParameter* msg);
  static void set_has_loss_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::apollo::perception::inference::V0LayerParameter& layer(const V1LayerParameter* msg);
  static void set_has_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::AccuracyParameter&
V1LayerParameter::_Internal::accuracy_param(const V1LayerParameter* msg) {
  return *msg->accuracy_param_;
}
const ::apollo::perception::inference::ArgMaxParameter&
V1LayerParameter::_Internal::argmax_param(const V1LayerParameter* msg) {
  return *msg->argmax_param_;
}
const ::apollo::perception::inference::ConcatParameter&
V1LayerParameter::_Internal::concat_param(const V1LayerParameter* msg) {
  return *msg->concat_param_;
}
const ::apollo::perception::inference::ContrastiveLossParameter&
V1LayerParameter::_Internal::contrastive_loss_param(const V1LayerParameter* msg) {
  return *msg->contrastive_loss_param_;
}
const ::apollo::perception::inference::ConvolutionParameter&
V1LayerParameter::_Internal::convolution_param(const V1LayerParameter* msg) {
  return *msg->convolution_param_;
}
const ::apollo::perception::inference::DataParameter&
V1LayerParameter::_Internal::data_param(const V1LayerParameter* msg) {
  return *msg->data_param_;
}
const ::apollo::perception::inference::DropoutParameter&
V1LayerParameter::_Internal::dropout_param(const V1LayerParameter* msg) {
  return *msg->dropout_param_;
}
const ::apollo::perception::inference::DummyDataParameter&
V1LayerParameter::_Internal::dummy_data_param(const V1LayerParameter* msg) {
  return *msg->dummy_data_param_;
}
const ::apollo::perception::inference::EltwiseParameter&
V1LayerParameter::_Internal::eltwise_param(const V1LayerParameter* msg) {
  return *msg->eltwise_param_;
}
const ::apollo::perception::inference::ExpParameter&
V1LayerParameter::_Internal::exp_param(const V1LayerParameter* msg) {
  return *msg->exp_param_;
}
const ::apollo::perception::inference::HDF5DataParameter&
V1LayerParameter::_Internal::hdf5_data_param(const V1LayerParameter* msg) {
  return *msg->hdf5_data_param_;
}
const ::apollo::perception::inference::HDF5OutputParameter&
V1LayerParameter::_Internal::hdf5_output_param(const V1LayerParameter* msg) {
  return *msg->hdf5_output_param_;
}
const ::apollo::perception::inference::HingeLossParameter&
V1LayerParameter::_Internal::hinge_loss_param(const V1LayerParameter* msg) {
  return *msg->hinge_loss_param_;
}
const ::apollo::perception::inference::ImageDataParameter&
V1LayerParameter::_Internal::image_data_param(const V1LayerParameter* msg) {
  return *msg->image_data_param_;
}
const ::apollo::perception::inference::InfogainLossParameter&
V1LayerParameter::_Internal::infogain_loss_param(const V1LayerParameter* msg) {
  return *msg->infogain_loss_param_;
}
const ::apollo::perception::inference::InnerProductParameter&
V1LayerParameter::_Internal::inner_product_param(const V1LayerParameter* msg) {
  return *msg->inner_product_param_;
}
const ::apollo::perception::inference::LRNParameter&
V1LayerParameter::_Internal::lrn_param(const V1LayerParameter* msg) {
  return *msg->lrn_param_;
}
const ::apollo::perception::inference::MemoryDataParameter&
V1LayerParameter::_Internal::memory_data_param(const V1LayerParameter* msg) {
  return *msg->memory_data_param_;
}
const ::apollo::perception::inference::MVNParameter&
V1LayerParameter::_Internal::mvn_param(const V1LayerParameter* msg) {
  return *msg->mvn_param_;
}
const ::apollo::perception::inference::PoolingParameter&
V1LayerParameter::_Internal::pooling_param(const V1LayerParameter* msg) {
  return *msg->pooling_param_;
}
const ::apollo::perception::inference::PowerParameter&
V1LayerParameter::_Internal::power_param(const V1LayerParameter* msg) {
  return *msg->power_param_;
}
const ::apollo::perception::inference::ReLUParameter&
V1LayerParameter::_Internal::relu_param(const V1LayerParameter* msg) {
  return *msg->relu_param_;
}
const ::apollo::perception::inference::SigmoidParameter&
V1LayerParameter::_Internal::sigmoid_param(const V1LayerParameter* msg) {
  return *msg->sigmoid_param_;
}
const ::apollo::perception::inference::SoftmaxParameter&
V1LayerParameter::_Internal::softmax_param(const V1LayerParameter* msg) {
  return *msg->softmax_param_;
}
const ::apollo::perception::inference::SliceParameter&
V1LayerParameter::_Internal::slice_param(const V1LayerParameter* msg) {
  return *msg->slice_param_;
}
const ::apollo::perception::inference::TanHParameter&
V1LayerParameter::_Internal::tanh_param(const V1LayerParameter* msg) {
  return *msg->tanh_param_;
}
const ::apollo::perception::inference::ThresholdParameter&
V1LayerParameter::_Internal::threshold_param(const V1LayerParameter* msg) {
  return *msg->threshold_param_;
}
const ::apollo::perception::inference::WindowDataParameter&
V1LayerParameter::_Internal::window_data_param(const V1LayerParameter* msg) {
  return *msg->window_data_param_;
}
const ::apollo::perception::inference::TransformationParameter&
V1LayerParameter::_Internal::transform_param(const V1LayerParameter* msg) {
  return *msg->transform_param_;
}
const ::apollo::perception::inference::LossParameter&
V1LayerParameter::_Internal::loss_param(const V1LayerParameter* msg) {
  return *msg->loss_param_;
}
const ::apollo::perception::inference::V0LayerParameter&
V1LayerParameter::_Internal::layer(const V1LayerParameter* msg) {
  return *msg->layer_;
}
V1LayerParameter::V1LayerParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.V1LayerParameter)
}
V1LayerParameter::V1LayerParameter(const V1LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bottom_(from.bottom_),
      top_(from.top_),
      blobs_(from.blobs_),
      blobs_lr_(from.blobs_lr_),
      weight_decay_(from.weight_decay_),
      include_(from.include_),
      exclude_(from.exclude_),
      loss_weight_(from.loss_weight_),
      param_(from.param_),
      blob_share_mode_(from.blob_share_mode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_layer()) {
    layer_ = new ::apollo::perception::inference::V0LayerParameter(*from.layer_);
  } else {
    layer_ = nullptr;
  }
  if (from._internal_has_concat_param()) {
    concat_param_ = new ::apollo::perception::inference::ConcatParameter(*from.concat_param_);
  } else {
    concat_param_ = nullptr;
  }
  if (from._internal_has_convolution_param()) {
    convolution_param_ = new ::apollo::perception::inference::ConvolutionParameter(*from.convolution_param_);
  } else {
    convolution_param_ = nullptr;
  }
  if (from._internal_has_data_param()) {
    data_param_ = new ::apollo::perception::inference::DataParameter(*from.data_param_);
  } else {
    data_param_ = nullptr;
  }
  if (from._internal_has_dropout_param()) {
    dropout_param_ = new ::apollo::perception::inference::DropoutParameter(*from.dropout_param_);
  } else {
    dropout_param_ = nullptr;
  }
  if (from._internal_has_hdf5_data_param()) {
    hdf5_data_param_ = new ::apollo::perception::inference::HDF5DataParameter(*from.hdf5_data_param_);
  } else {
    hdf5_data_param_ = nullptr;
  }
  if (from._internal_has_hdf5_output_param()) {
    hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = nullptr;
  }
  if (from._internal_has_image_data_param()) {
    image_data_param_ = new ::apollo::perception::inference::ImageDataParameter(*from.image_data_param_);
  } else {
    image_data_param_ = nullptr;
  }
  if (from._internal_has_infogain_loss_param()) {
    infogain_loss_param_ = new ::apollo::perception::inference::InfogainLossParameter(*from.infogain_loss_param_);
  } else {
    infogain_loss_param_ = nullptr;
  }
  if (from._internal_has_inner_product_param()) {
    inner_product_param_ = new ::apollo::perception::inference::InnerProductParameter(*from.inner_product_param_);
  } else {
    inner_product_param_ = nullptr;
  }
  if (from._internal_has_lrn_param()) {
    lrn_param_ = new ::apollo::perception::inference::LRNParameter(*from.lrn_param_);
  } else {
    lrn_param_ = nullptr;
  }
  if (from._internal_has_pooling_param()) {
    pooling_param_ = new ::apollo::perception::inference::PoolingParameter(*from.pooling_param_);
  } else {
    pooling_param_ = nullptr;
  }
  if (from._internal_has_window_data_param()) {
    window_data_param_ = new ::apollo::perception::inference::WindowDataParameter(*from.window_data_param_);
  } else {
    window_data_param_ = nullptr;
  }
  if (from._internal_has_power_param()) {
    power_param_ = new ::apollo::perception::inference::PowerParameter(*from.power_param_);
  } else {
    power_param_ = nullptr;
  }
  if (from._internal_has_memory_data_param()) {
    memory_data_param_ = new ::apollo::perception::inference::MemoryDataParameter(*from.memory_data_param_);
  } else {
    memory_data_param_ = nullptr;
  }
  if (from._internal_has_argmax_param()) {
    argmax_param_ = new ::apollo::perception::inference::ArgMaxParameter(*from.argmax_param_);
  } else {
    argmax_param_ = nullptr;
  }
  if (from._internal_has_eltwise_param()) {
    eltwise_param_ = new ::apollo::perception::inference::EltwiseParameter(*from.eltwise_param_);
  } else {
    eltwise_param_ = nullptr;
  }
  if (from._internal_has_threshold_param()) {
    threshold_param_ = new ::apollo::perception::inference::ThresholdParameter(*from.threshold_param_);
  } else {
    threshold_param_ = nullptr;
  }
  if (from._internal_has_dummy_data_param()) {
    dummy_data_param_ = new ::apollo::perception::inference::DummyDataParameter(*from.dummy_data_param_);
  } else {
    dummy_data_param_ = nullptr;
  }
  if (from._internal_has_accuracy_param()) {
    accuracy_param_ = new ::apollo::perception::inference::AccuracyParameter(*from.accuracy_param_);
  } else {
    accuracy_param_ = nullptr;
  }
  if (from._internal_has_hinge_loss_param()) {
    hinge_loss_param_ = new ::apollo::perception::inference::HingeLossParameter(*from.hinge_loss_param_);
  } else {
    hinge_loss_param_ = nullptr;
  }
  if (from._internal_has_relu_param()) {
    relu_param_ = new ::apollo::perception::inference::ReLUParameter(*from.relu_param_);
  } else {
    relu_param_ = nullptr;
  }
  if (from._internal_has_slice_param()) {
    slice_param_ = new ::apollo::perception::inference::SliceParameter(*from.slice_param_);
  } else {
    slice_param_ = nullptr;
  }
  if (from._internal_has_mvn_param()) {
    mvn_param_ = new ::apollo::perception::inference::MVNParameter(*from.mvn_param_);
  } else {
    mvn_param_ = nullptr;
  }
  if (from._internal_has_transform_param()) {
    transform_param_ = new ::apollo::perception::inference::TransformationParameter(*from.transform_param_);
  } else {
    transform_param_ = nullptr;
  }
  if (from._internal_has_tanh_param()) {
    tanh_param_ = new ::apollo::perception::inference::TanHParameter(*from.tanh_param_);
  } else {
    tanh_param_ = nullptr;
  }
  if (from._internal_has_sigmoid_param()) {
    sigmoid_param_ = new ::apollo::perception::inference::SigmoidParameter(*from.sigmoid_param_);
  } else {
    sigmoid_param_ = nullptr;
  }
  if (from._internal_has_softmax_param()) {
    softmax_param_ = new ::apollo::perception::inference::SoftmaxParameter(*from.softmax_param_);
  } else {
    softmax_param_ = nullptr;
  }
  if (from._internal_has_contrastive_loss_param()) {
    contrastive_loss_param_ = new ::apollo::perception::inference::ContrastiveLossParameter(*from.contrastive_loss_param_);
  } else {
    contrastive_loss_param_ = nullptr;
  }
  if (from._internal_has_exp_param()) {
    exp_param_ = new ::apollo::perception::inference::ExpParameter(*from.exp_param_);
  } else {
    exp_param_ = nullptr;
  }
  if (from._internal_has_loss_param()) {
    loss_param_ = new ::apollo::perception::inference::LossParameter(*from.loss_param_);
  } else {
    loss_param_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.V1LayerParameter)
}

void V1LayerParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(type_));
}

V1LayerParameter::~V1LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.V1LayerParameter)
  SharedDtor();
}

void V1LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layer_;
  if (this != internal_default_instance()) delete concat_param_;
  if (this != internal_default_instance()) delete convolution_param_;
  if (this != internal_default_instance()) delete data_param_;
  if (this != internal_default_instance()) delete dropout_param_;
  if (this != internal_default_instance()) delete hdf5_data_param_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
  if (this != internal_default_instance()) delete image_data_param_;
  if (this != internal_default_instance()) delete infogain_loss_param_;
  if (this != internal_default_instance()) delete inner_product_param_;
  if (this != internal_default_instance()) delete lrn_param_;
  if (this != internal_default_instance()) delete pooling_param_;
  if (this != internal_default_instance()) delete window_data_param_;
  if (this != internal_default_instance()) delete power_param_;
  if (this != internal_default_instance()) delete memory_data_param_;
  if (this != internal_default_instance()) delete argmax_param_;
  if (this != internal_default_instance()) delete eltwise_param_;
  if (this != internal_default_instance()) delete threshold_param_;
  if (this != internal_default_instance()) delete dummy_data_param_;
  if (this != internal_default_instance()) delete accuracy_param_;
  if (this != internal_default_instance()) delete hinge_loss_param_;
  if (this != internal_default_instance()) delete relu_param_;
  if (this != internal_default_instance()) delete slice_param_;
  if (this != internal_default_instance()) delete mvn_param_;
  if (this != internal_default_instance()) delete transform_param_;
  if (this != internal_default_instance()) delete tanh_param_;
  if (this != internal_default_instance()) delete sigmoid_param_;
  if (this != internal_default_instance()) delete softmax_param_;
  if (this != internal_default_instance()) delete contrastive_loss_param_;
  if (this != internal_default_instance()) delete exp_param_;
  if (this != internal_default_instance()) delete loss_param_;
}

void V1LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V1LayerParameter& V1LayerParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V1LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void V1LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.V1LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bottom_.Clear();
  top_.Clear();
  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  include_.Clear();
  exclude_.Clear();
  loss_weight_.Clear();
  param_.Clear();
  blob_share_mode_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layer_ != nullptr);
      layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(concat_param_ != nullptr);
      concat_param_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(convolution_param_ != nullptr);
      convolution_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(data_param_ != nullptr);
      data_param_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dropout_param_ != nullptr);
      dropout_param_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hdf5_data_param_ != nullptr);
      hdf5_data_param_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hdf5_output_param_ != nullptr);
      hdf5_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(image_data_param_ != nullptr);
      image_data_param_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(infogain_loss_param_ != nullptr);
      infogain_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(inner_product_param_ != nullptr);
      inner_product_param_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(lrn_param_ != nullptr);
      lrn_param_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(pooling_param_ != nullptr);
      pooling_param_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(window_data_param_ != nullptr);
      window_data_param_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(power_param_ != nullptr);
      power_param_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(memory_data_param_ != nullptr);
      memory_data_param_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(argmax_param_ != nullptr);
      argmax_param_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(eltwise_param_ != nullptr);
      eltwise_param_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(threshold_param_ != nullptr);
      threshold_param_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(dummy_data_param_ != nullptr);
      dummy_data_param_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(accuracy_param_ != nullptr);
      accuracy_param_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(hinge_loss_param_ != nullptr);
      hinge_loss_param_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(relu_param_ != nullptr);
      relu_param_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(slice_param_ != nullptr);
      slice_param_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(mvn_param_ != nullptr);
      mvn_param_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(transform_param_ != nullptr);
      transform_param_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(tanh_param_ != nullptr);
      tanh_param_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(sigmoid_param_ != nullptr);
      sigmoid_param_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(softmax_param_ != nullptr);
      softmax_param_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(contrastive_loss_param_ != nullptr);
      contrastive_loss_param_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(exp_param_ != nullptr);
      exp_param_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(loss_param_ != nullptr);
      loss_param_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* V1LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.V0LayerParameter layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string bottom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bottom();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.bottom");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string top = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_top();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.top");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::V1LayerParameter_LayerType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::inference::V1LayerParameter_LayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto blobs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float blobs_lr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_blobs_lr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_blobs_lr(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float weight_decay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_weight_decay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight_decay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_convolution_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DataParameter data_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropout_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_infogain_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_product_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_lrn_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pooling_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.PowerParameter power_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_argmax_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_eltwise_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_dummy_data_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_accuracy_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_hinge_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_relu_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SliceParameter slice_param = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule include = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_include(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.NetStateRule exclude = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_exclude(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvn_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float loss_weight = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_loss_weight(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<285>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_loss_weight(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tanh_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigmoid_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_softmax_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_contrastive_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.ExpParameter exp_param = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.LossParameter loss_param = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string param = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_param();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V1LayerParameter.param");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid(val))) {
              _internal_add_blob_share_mode(static_cast<::apollo::perception::inference::V1LayerParameter_DimCheckMode>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1002, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8016>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_blob_share_mode(), ptr, ctx, ::apollo::perception::inference::V1LayerParameter_DimCheckMode_IsValid, &_internal_metadata_, 1002);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* V1LayerParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.V1LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.V0LayerParameter layer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::layer(this), target, stream);
  }

  // repeated string bottom = 2;
  for (int i = 0, n = this->_internal_bottom_size(); i < n; i++) {
    const auto& s = this->_internal_bottom(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.bottom");
    target = stream->WriteString(2, s, target);
  }

  // repeated string top = 3;
  for (int i = 0, n = this->_internal_top_size(); i < n; i++) {
    const auto& s = this->_internal_top(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.top");
    target = stream->WriteString(3, s, target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_blobs(i), target, stream);
  }

  // repeated float blobs_lr = 7;
  for (int i = 0, n = this->_internal_blobs_lr_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_blobs_lr(i), target);
  }

  // repeated float weight_decay = 8;
  for (int i = 0, n = this->_internal_weight_decay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_weight_decay(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::concat_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::convolution_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DataParameter data_param = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::dropout_param(this), target, stream);
  }

  // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::hdf5_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::hdf5_output_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::image_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::infogain_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::inner_product_param(this), target, stream);
  }

  // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::lrn_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::pooling_param(this), target, stream);
  }

  // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::window_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.PowerParameter power_param = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::power_param(this), target, stream);
  }

  // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::memory_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::argmax_param(this), target, stream);
  }

  // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::eltwise_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::threshold_param(this), target, stream);
  }

  // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::dummy_data_param(this), target, stream);
  }

  // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::accuracy_param(this), target, stream);
  }

  // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::hinge_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::relu_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SliceParameter slice_param = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::slice_param(this), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule include = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_include_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_include(i), target, stream);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exclude_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_exclude(i), target, stream);
  }

  // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::mvn_param(this), target, stream);
  }

  // repeated float loss_weight = 35;
  for (int i = 0, n = this->_internal_loss_weight_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(35, this->_internal_loss_weight(i), target);
  }

  // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::transform_param(this), target, stream);
  }

  // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::tanh_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::sigmoid_param(this), target, stream);
  }

  // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::softmax_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::contrastive_loss_param(this), target, stream);
  }

  // optional .apollo.perception.inference.ExpParameter exp_param = 41;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::exp_param(this), target, stream);
  }

  // optional .apollo.perception.inference.LossParameter loss_param = 42;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::loss_param(this), target, stream);
  }

  // repeated string param = 1001;
  for (int i = 0, n = this->_internal_param_size(); i < n; i++) {
    const auto& s = this->_internal_param(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V1LayerParameter.param");
    target = stream->WriteString(1001, s, target);
  }

  // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  for (int i = 0, n = this->_internal_blob_share_mode_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1002, this->_internal_blob_share_mode(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.V1LayerParameter)
  return target;
}

size_t V1LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.V1LayerParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bottom = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bottom_.size());
  for (int i = 0, n = bottom_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bottom_.Get(i));
  }

  // repeated string top = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(top_.size());
  for (int i = 0, n = top_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      top_.Get(i));
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 6;
  total_size += 1UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float blobs_lr = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_decay_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weight_decay_size());
    total_size += data_size;
  }

  // repeated .apollo.perception.inference.NetStateRule include = 32;
  total_size += 2UL * this->_internal_include_size();
  for (const auto& msg : this->include_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.inference.NetStateRule exclude = 33;
  total_size += 2UL * this->_internal_exclude_size();
  for (const auto& msg : this->exclude_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float loss_weight = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_loss_weight_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_loss_weight_size());
    total_size += data_size;
  }

  // repeated string param = 1001;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(param_.size());
  for (int i = 0, n = param_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      param_.Get(i));
  }

  // repeated .apollo.perception.inference.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_blob_share_mode_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_blob_share_mode(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.perception.inference.V0LayerParameter layer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_);
    }

    // optional .apollo.perception.inference.ConcatParameter concat_param = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *concat_param_);
    }

    // optional .apollo.perception.inference.ConvolutionParameter convolution_param = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *convolution_param_);
    }

    // optional .apollo.perception.inference.DataParameter data_param = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_param_);
    }

    // optional .apollo.perception.inference.DropoutParameter dropout_param = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dropout_param_);
    }

    // optional .apollo.perception.inference.HDF5DataParameter hdf5_data_param = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdf5_data_param_);
    }

    // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdf5_output_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.perception.inference.ImageDataParameter image_data_param = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_data_param_);
    }

    // optional .apollo.perception.inference.InfogainLossParameter infogain_loss_param = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *infogain_loss_param_);
    }

    // optional .apollo.perception.inference.InnerProductParameter inner_product_param = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inner_product_param_);
    }

    // optional .apollo.perception.inference.LRNParameter lrn_param = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lrn_param_);
    }

    // optional .apollo.perception.inference.PoolingParameter pooling_param = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pooling_param_);
    }

    // optional .apollo.perception.inference.WindowDataParameter window_data_param = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_data_param_);
    }

    // optional .apollo.perception.inference.PowerParameter power_param = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_param_);
    }

    // optional .apollo.perception.inference.MemoryDataParameter memory_data_param = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *memory_data_param_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.perception.inference.ArgMaxParameter argmax_param = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *argmax_param_);
    }

    // optional .apollo.perception.inference.EltwiseParameter eltwise_param = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eltwise_param_);
    }

    // optional .apollo.perception.inference.ThresholdParameter threshold_param = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threshold_param_);
    }

    // optional .apollo.perception.inference.DummyDataParameter dummy_data_param = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dummy_data_param_);
    }

    // optional .apollo.perception.inference.AccuracyParameter accuracy_param = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accuracy_param_);
    }

    // optional .apollo.perception.inference.HingeLossParameter hinge_loss_param = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hinge_loss_param_);
    }

    // optional .apollo.perception.inference.ReLUParameter relu_param = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relu_param_);
    }

    // optional .apollo.perception.inference.SliceParameter slice_param = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slice_param_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.perception.inference.MVNParameter mvn_param = 34;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mvn_param_);
    }

    // optional .apollo.perception.inference.TransformationParameter transform_param = 36;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_param_);
    }

    // optional .apollo.perception.inference.TanHParameter tanh_param = 37;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tanh_param_);
    }

    // optional .apollo.perception.inference.SigmoidParameter sigmoid_param = 38;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sigmoid_param_);
    }

    // optional .apollo.perception.inference.SoftmaxParameter softmax_param = 39;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *softmax_param_);
    }

    // optional .apollo.perception.inference.ContrastiveLossParameter contrastive_loss_param = 40;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contrastive_loss_param_);
    }

    // optional .apollo.perception.inference.ExpParameter exp_param = 41;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exp_param_);
    }

    // optional .apollo.perception.inference.LossParameter loss_param = 42;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loss_param_);
    }

  }
  // optional .apollo.perception.inference.V1LayerParameter.LayerType type = 5;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V1LayerParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const V1LayerParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V1LayerParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.V1LayerParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.V1LayerParameter)
    MergeFrom(*source);
  }
}

void V1LayerParameter::MergeFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.V1LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bottom_.MergeFrom(from.bottom_);
  top_.MergeFrom(from.top_);
  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  include_.MergeFrom(from.include_);
  exclude_.MergeFrom(from.exclude_);
  loss_weight_.MergeFrom(from.loss_weight_);
  param_.MergeFrom(from.param_);
  blob_share_mode_.MergeFrom(from.blob_share_mode_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_layer()->::apollo::perception::inference::V0LayerParameter::MergeFrom(from._internal_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_concat_param()->::apollo::perception::inference::ConcatParameter::MergeFrom(from._internal_concat_param());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_convolution_param()->::apollo::perception::inference::ConvolutionParameter::MergeFrom(from._internal_convolution_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_data_param()->::apollo::perception::inference::DataParameter::MergeFrom(from._internal_data_param());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dropout_param()->::apollo::perception::inference::DropoutParameter::MergeFrom(from._internal_dropout_param());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_hdf5_data_param()->::apollo::perception::inference::HDF5DataParameter::MergeFrom(from._internal_hdf5_data_param());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hdf5_output_param()->::apollo::perception::inference::HDF5OutputParameter::MergeFrom(from._internal_hdf5_output_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_image_data_param()->::apollo::perception::inference::ImageDataParameter::MergeFrom(from._internal_image_data_param());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_infogain_loss_param()->::apollo::perception::inference::InfogainLossParameter::MergeFrom(from._internal_infogain_loss_param());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_inner_product_param()->::apollo::perception::inference::InnerProductParameter::MergeFrom(from._internal_inner_product_param());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_lrn_param()->::apollo::perception::inference::LRNParameter::MergeFrom(from._internal_lrn_param());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_pooling_param()->::apollo::perception::inference::PoolingParameter::MergeFrom(from._internal_pooling_param());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_window_data_param()->::apollo::perception::inference::WindowDataParameter::MergeFrom(from._internal_window_data_param());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_power_param()->::apollo::perception::inference::PowerParameter::MergeFrom(from._internal_power_param());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_memory_data_param()->::apollo::perception::inference::MemoryDataParameter::MergeFrom(from._internal_memory_data_param());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_argmax_param()->::apollo::perception::inference::ArgMaxParameter::MergeFrom(from._internal_argmax_param());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_eltwise_param()->::apollo::perception::inference::EltwiseParameter::MergeFrom(from._internal_eltwise_param());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_threshold_param()->::apollo::perception::inference::ThresholdParameter::MergeFrom(from._internal_threshold_param());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_dummy_data_param()->::apollo::perception::inference::DummyDataParameter::MergeFrom(from._internal_dummy_data_param());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_accuracy_param()->::apollo::perception::inference::AccuracyParameter::MergeFrom(from._internal_accuracy_param());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_hinge_loss_param()->::apollo::perception::inference::HingeLossParameter::MergeFrom(from._internal_hinge_loss_param());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_relu_param()->::apollo::perception::inference::ReLUParameter::MergeFrom(from._internal_relu_param());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_slice_param()->::apollo::perception::inference::SliceParameter::MergeFrom(from._internal_slice_param());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_mvn_param()->::apollo::perception::inference::MVNParameter::MergeFrom(from._internal_mvn_param());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_transform_param()->::apollo::perception::inference::TransformationParameter::MergeFrom(from._internal_transform_param());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_tanh_param()->::apollo::perception::inference::TanHParameter::MergeFrom(from._internal_tanh_param());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_sigmoid_param()->::apollo::perception::inference::SigmoidParameter::MergeFrom(from._internal_sigmoid_param());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_softmax_param()->::apollo::perception::inference::SoftmaxParameter::MergeFrom(from._internal_softmax_param());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_contrastive_loss_param()->::apollo::perception::inference::ContrastiveLossParameter::MergeFrom(from._internal_contrastive_loss_param());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_exp_param()->::apollo::perception::inference::ExpParameter::MergeFrom(from._internal_exp_param());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_loss_param()->::apollo::perception::inference::LossParameter::MergeFrom(from._internal_loss_param());
    }
  }
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void V1LayerParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V1LayerParameter::CopyFrom(const V1LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.V1LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V1LayerParameter::IsInitialized() const {
  return true;
}

void V1LayerParameter::InternalSwap(V1LayerParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  bottom_.InternalSwap(&other->bottom_);
  top_.InternalSwap(&other->top_);
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  include_.InternalSwap(&other->include_);
  exclude_.InternalSwap(&other->exclude_);
  loss_weight_.InternalSwap(&other->loss_weight_);
  param_.InternalSwap(&other->param_);
  blob_share_mode_.InternalSwap(&other->blob_share_mode_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(layer_, other->layer_);
  swap(concat_param_, other->concat_param_);
  swap(convolution_param_, other->convolution_param_);
  swap(data_param_, other->data_param_);
  swap(dropout_param_, other->dropout_param_);
  swap(hdf5_data_param_, other->hdf5_data_param_);
  swap(hdf5_output_param_, other->hdf5_output_param_);
  swap(image_data_param_, other->image_data_param_);
  swap(infogain_loss_param_, other->infogain_loss_param_);
  swap(inner_product_param_, other->inner_product_param_);
  swap(lrn_param_, other->lrn_param_);
  swap(pooling_param_, other->pooling_param_);
  swap(window_data_param_, other->window_data_param_);
  swap(power_param_, other->power_param_);
  swap(memory_data_param_, other->memory_data_param_);
  swap(argmax_param_, other->argmax_param_);
  swap(eltwise_param_, other->eltwise_param_);
  swap(threshold_param_, other->threshold_param_);
  swap(dummy_data_param_, other->dummy_data_param_);
  swap(accuracy_param_, other->accuracy_param_);
  swap(hinge_loss_param_, other->hinge_loss_param_);
  swap(relu_param_, other->relu_param_);
  swap(slice_param_, other->slice_param_);
  swap(mvn_param_, other->mvn_param_);
  swap(transform_param_, other->transform_param_);
  swap(tanh_param_, other->tanh_param_);
  swap(sigmoid_param_, other->sigmoid_param_);
  swap(softmax_param_, other->softmax_param_);
  swap(contrastive_loss_param_, other->contrastive_loss_param_);
  swap(exp_param_, other->exp_param_);
  swap(loss_param_, other->loss_param_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata V1LayerParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void V0LayerParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_V0LayerParameter_default_instance_._instance.get_mutable()->weight_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_V0LayerParameter_default_instance_._instance.get_mutable()->bias_filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
  ::apollo::perception::inference::_V0LayerParameter_default_instance_._instance.get_mutable()->hdf5_output_param_ = const_cast< ::apollo::perception::inference::HDF5OutputParameter*>(
      ::apollo::perception::inference::HDF5OutputParameter::internal_default_instance());
}
class V0LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<V0LayerParameter>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_biasterm(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::perception::inference::FillerParameter& weight_filler(const V0LayerParameter* msg);
  static void set_has_weight_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::perception::inference::FillerParameter& bias_filler(const V0LayerParameter* msg);
  static void set_has_bias_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_kernelsize(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dropout_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_local_size(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_meanfile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_batchsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cropsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mirror(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rand_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_det_fg_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_det_bg_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_det_fg_fraction(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_det_context_pad(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_det_crop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_new_num(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_new_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_new_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_new_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_shuffle_images(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_concat_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::perception::inference::HDF5OutputParameter& hdf5_output_param(const V0LayerParameter* msg);
  static void set_has_hdf5_output_param(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::perception::inference::FillerParameter&
V0LayerParameter::_Internal::weight_filler(const V0LayerParameter* msg) {
  return *msg->weight_filler_;
}
const ::apollo::perception::inference::FillerParameter&
V0LayerParameter::_Internal::bias_filler(const V0LayerParameter* msg) {
  return *msg->bias_filler_;
}
const ::apollo::perception::inference::HDF5OutputParameter&
V0LayerParameter::_Internal::hdf5_output_param(const V0LayerParameter* msg) {
  return *msg->hdf5_output_param_;
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_;
V0LayerParameter::V0LayerParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.V0LayerParameter)
}
V0LayerParameter::V0LayerParameter(const V0LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blobs_(from.blobs_),
      blobs_lr_(from.blobs_lr_),
      weight_decay_(from.weight_decay_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  meanfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_meanfile()) {
    meanfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
  }
  det_crop_mode_.UnsafeSetDefault(&::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
  if (from._internal_has_det_crop_mode()) {
    det_crop_mode_.AssignWithDefault(&::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), from.det_crop_mode_);
  }
  if (from._internal_has_weight_filler()) {
    weight_filler_ = new ::apollo::perception::inference::FillerParameter(*from.weight_filler_);
  } else {
    weight_filler_ = nullptr;
  }
  if (from._internal_has_bias_filler()) {
    bias_filler_ = new ::apollo::perception::inference::FillerParameter(*from.bias_filler_);
  } else {
    bias_filler_ = nullptr;
  }
  if (from._internal_has_hdf5_output_param()) {
    hdf5_output_param_ = new ::apollo::perception::inference::HDF5OutputParameter(*from.hdf5_output_param_);
  } else {
    hdf5_output_param_ = nullptr;
  }
  ::memcpy(&num_output_, &from.num_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&det_fg_fraction_) -
    reinterpret_cast<char*>(&num_output_)) + sizeof(det_fg_fraction_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.V0LayerParameter)
}

void V0LayerParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meanfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.UnsafeSetDefault(&::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
  ::memset(&weight_filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_height_) -
      reinterpret_cast<char*>(&weight_filler_)) + sizeof(new_height_));
  concat_dim_ = 1u;
  biasterm_ = true;
  group_ = 1u;
  stride_ = 1u;
  dropout_ratio_ = 0.5f;
  local_size_ = 5u;
  alpha_ = 1;
  beta_ = 0.75f;
  scale_ = 1;
  k_ = 1;
  det_fg_threshold_ = 0.5f;
  det_bg_threshold_ = 0.5f;
  det_fg_fraction_ = 0.25f;
}

V0LayerParameter::~V0LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.V0LayerParameter)
  SharedDtor();
}

void V0LayerParameter::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meanfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  det_crop_mode_.DestroyNoArena(&::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
  if (this != internal_default_instance()) delete weight_filler_;
  if (this != internal_default_instance()) delete bias_filler_;
  if (this != internal_default_instance()) delete hdf5_output_param_;
}

void V0LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const V0LayerParameter& V0LayerParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_V0LayerParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void V0LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.V0LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  blobs_lr_.Clear();
  weight_decay_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      meanfile_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      det_crop_mode_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(weight_filler_ != nullptr);
      weight_filler_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bias_filler_ != nullptr);
      bias_filler_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hdf5_output_param_ != nullptr);
      hdf5_output_param_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&num_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mirror_) -
        reinterpret_cast<char*>(&num_output_)) + sizeof(mirror_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&shuffle_images_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_height_) -
        reinterpret_cast<char*>(&shuffle_images_)) + sizeof(new_height_));
    concat_dim_ = 1u;
    biasterm_ = true;
  }
  if (cached_has_bits & 0xff000000u) {
    group_ = 1u;
    stride_ = 1u;
    dropout_ratio_ = 0.5f;
    local_size_ = 5u;
    alpha_ = 1;
    beta_ = 0.75f;
    scale_ = 1;
    k_ = 1;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    det_fg_threshold_ = 0.5f;
    det_bg_threshold_ = 0.5f;
    det_fg_fraction_ = 0.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* V0LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_output(&_has_bits_);
          num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool biasterm = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_biasterm(&_has_bits_);
          biasterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pad(&_has_bits_);
          pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kernelsize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_kernelsize(&_has_bits_);
          kernelsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 group = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_group(&_has_bits_);
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_stride(&_has_bits_);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::V0LayerParameter_PoolMethod_IsValid(val))) {
            _internal_set_pool(static_cast<::apollo::perception::inference::V0LayerParameter_PoolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float dropout_ratio = 12 [default = 0.5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_dropout_ratio(&_has_bits_);
          dropout_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 local_size = 13 [default = 5];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_local_size(&_has_bits_);
          local_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 14 [default = 1];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_alpha(&_has_bits_);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float beta = 15 [default = 0.75];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_beta(&_has_bits_);
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string source = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_scale(&_has_bits_);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string meanfile = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_meanfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.meanfile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 batchsize = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_batchsize(&_has_bits_);
          batchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cropsize = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_cropsize(&_has_bits_);
          cropsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mirror = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_mirror(&_has_bits_);
          mirror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float k = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_k(&_has_bits_);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.BlobProto blobs = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_blobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float blobs_lr = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_blobs_lr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<413>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_blobs_lr(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float weight_decay = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_weight_decay(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<421>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_weight_decay(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rand_skip = 53 [default = 0];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rand_skip(&_has_bits_);
          rand_skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float det_fg_threshold = 54 [default = 0.5];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_det_fg_threshold(&_has_bits_);
          det_fg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float det_bg_threshold = 55 [default = 0.5];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_det_bg_threshold(&_has_bits_);
          det_bg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float det_fg_fraction = 56 [default = 0.25];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_det_fg_fraction(&_has_bits_);
          det_fg_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 det_context_pad = 58 [default = 0];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_det_context_pad(&_has_bits_);
          det_context_pad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string det_crop_mode = 59 [default = "warp"];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_det_crop_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.V0LayerParameter.det_crop_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_num = 60 [default = 0];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_new_num(&_has_bits_);
          new_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_channels = 61 [default = 0];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_new_channels(&_has_bits_);
          new_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_height = 62 [default = 0];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_new_height(&_has_bits_);
          new_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_width = 63 [default = 0];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_new_width(&_has_bits_);
          new_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shuffle_images = 64 [default = false];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_shuffle_images(&_has_bits_);
          shuffle_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 concat_dim = 65 [default = 1];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_concat_dim(&_has_bits_);
          concat_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdf5_output_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* V0LayerParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.V0LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // optional uint32 num_output = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_output(), target);
  }

  // optional bool biasterm = 4 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_biasterm(), target);
  }

  // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::weight_filler(this), target, stream);
  }

  // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bias_filler(this), target, stream);
  }

  // optional uint32 pad = 7 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pad(), target);
  }

  // optional uint32 kernelsize = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_kernelsize(), target);
  }

  // optional uint32 group = 9 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_group(), target);
  }

  // optional uint32 stride = 10 [default = 1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stride(), target);
  }

  // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_pool(), target);
  }

  // optional float dropout_ratio = 12 [default = 0.5];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_dropout_ratio(), target);
  }

  // optional uint32 local_size = 13 [default = 5];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_local_size(), target);
  }

  // optional float alpha = 14 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_alpha(), target);
  }

  // optional float beta = 15 [default = 0.75];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_beta(), target);
  }

  // optional string source = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.source");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_source(), target);
  }

  // optional float scale = 17 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_scale(), target);
  }

  // optional string meanfile = 18;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_meanfile().data(), static_cast<int>(this->_internal_meanfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.meanfile");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_meanfile(), target);
  }

  // optional uint32 batchsize = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_batchsize(), target);
  }

  // optional uint32 cropsize = 20 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cropsize(), target);
  }

  // optional bool mirror = 21 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_mirror(), target);
  }

  // optional float k = 22 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_k(), target);
  }

  // repeated .apollo.perception.inference.BlobProto blobs = 50;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, this->_internal_blobs(i), target, stream);
  }

  // repeated float blobs_lr = 51;
  for (int i = 0, n = this->_internal_blobs_lr_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_blobs_lr(i), target);
  }

  // repeated float weight_decay = 52;
  for (int i = 0, n = this->_internal_weight_decay_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_weight_decay(i), target);
  }

  // optional uint32 rand_skip = 53 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_rand_skip(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float det_fg_threshold = 54 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(54, this->_internal_det_fg_threshold(), target);
  }

  // optional float det_bg_threshold = 55 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(55, this->_internal_det_bg_threshold(), target);
  }

  // optional float det_fg_fraction = 56 [default = 0.25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(56, this->_internal_det_fg_fraction(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 det_context_pad = 58 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_det_context_pad(), target);
  }

  // optional string det_crop_mode = 59 [default = "warp"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_det_crop_mode().data(), static_cast<int>(this->_internal_det_crop_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.V0LayerParameter.det_crop_mode");
    target = stream->WriteStringMaybeAliased(
        59, this->_internal_det_crop_mode(), target);
  }

  // optional int32 new_num = 60 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_new_num(), target);
  }

  // optional int32 new_channels = 61 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_new_channels(), target);
  }

  // optional int32 new_height = 62 [default = 0];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_new_height(), target);
  }

  // optional int32 new_width = 63 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(63, this->_internal_new_width(), target);
  }

  // optional bool shuffle_images = 64 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_shuffle_images(), target);
  }

  // optional uint32 concat_dim = 65 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_concat_dim(), target);
  }

  // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1001, _Internal::hdf5_output_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.V0LayerParameter)
  return target;
}

size_t V0LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.V0LayerParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.BlobProto blobs = 50;
  total_size += 2UL * this->_internal_blobs_size();
  for (const auto& msg : this->blobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float blobs_lr = 51;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_blobs_lr_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_blobs_lr_size());
    total_size += data_size;
  }

  // repeated float weight_decay = 52;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weight_decay_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_weight_decay_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string source = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string meanfile = 18;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_meanfile());
    }

    // optional string det_crop_mode = 59 [default = "warp"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_det_crop_mode());
    }

    // optional .apollo.perception.inference.FillerParameter weight_filler = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weight_filler_);
    }

    // optional .apollo.perception.inference.FillerParameter bias_filler = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_filler_);
    }

    // optional .apollo.perception.inference.HDF5OutputParameter hdf5_output_param = 1001;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdf5_output_param_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 num_output = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_output());
    }

    // optional uint32 pad = 7 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad());
    }

    // optional uint32 kernelsize = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kernelsize());
    }

    // optional .apollo.perception.inference.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pool());
    }

    // optional uint32 batchsize = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_batchsize());
    }

    // optional uint32 cropsize = 20 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cropsize());
    }

    // optional int32 new_width = 63 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_width());
    }

    // optional bool mirror = 21 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool shuffle_images = 64 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 rand_skip = 53 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rand_skip());
    }

    // optional uint32 det_context_pad = 58 [default = 0];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_det_context_pad());
    }

    // optional int32 new_num = 60 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_num());
    }

    // optional int32 new_channels = 61 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_channels());
    }

    // optional int32 new_height = 62 [default = 0];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_height());
    }

    // optional uint32 concat_dim = 65 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_concat_dim());
    }

    // optional bool biasterm = 4 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 group = 9 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_group());
    }

    // optional uint32 stride = 10 [default = 1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride());
    }

    // optional float dropout_ratio = 12 [default = 0.5];
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 4;
    }

    // optional uint32 local_size = 13 [default = 5];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_local_size());
    }

    // optional float alpha = 14 [default = 1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 4;
    }

    // optional float beta = 15 [default = 0.75];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional float scale = 17 [default = 1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float k = 22 [default = 1];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional float det_fg_threshold = 54 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float det_bg_threshold = 55 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float det_fg_fraction = 56 [default = 0.25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V0LayerParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const V0LayerParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V0LayerParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.V0LayerParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.V0LayerParameter)
    MergeFrom(*source);
  }
}

void V0LayerParameter::MergeFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.V0LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
  blobs_lr_.MergeFrom(from.blobs_lr_);
  weight_decay_.MergeFrom(from.weight_decay_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      meanfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meanfile_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      det_crop_mode_.AssignWithDefault(&::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(), from.det_crop_mode_);
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_weight_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_weight_filler());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_bias_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_bias_filler());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hdf5_output_param()->::apollo::perception::inference::HDF5OutputParameter::MergeFrom(from._internal_hdf5_output_param());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      pad_ = from.pad_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernelsize_ = from.kernelsize_;
    }
    if (cached_has_bits & 0x00000800u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00001000u) {
      batchsize_ = from.batchsize_;
    }
    if (cached_has_bits & 0x00002000u) {
      cropsize_ = from.cropsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      mirror_ = from.mirror_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      shuffle_images_ = from.shuffle_images_;
    }
    if (cached_has_bits & 0x00020000u) {
      rand_skip_ = from.rand_skip_;
    }
    if (cached_has_bits & 0x00040000u) {
      det_context_pad_ = from.det_context_pad_;
    }
    if (cached_has_bits & 0x00080000u) {
      new_num_ = from.new_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      new_channels_ = from.new_channels_;
    }
    if (cached_has_bits & 0x00200000u) {
      new_height_ = from.new_height_;
    }
    if (cached_has_bits & 0x00400000u) {
      concat_dim_ = from.concat_dim_;
    }
    if (cached_has_bits & 0x00800000u) {
      biasterm_ = from.biasterm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x02000000u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x04000000u) {
      dropout_ratio_ = from.dropout_ratio_;
    }
    if (cached_has_bits & 0x08000000u) {
      local_size_ = from.local_size_;
    }
    if (cached_has_bits & 0x10000000u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x20000000u) {
      beta_ = from.beta_;
    }
    if (cached_has_bits & 0x40000000u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x80000000u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      det_fg_threshold_ = from.det_fg_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      det_bg_threshold_ = from.det_bg_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      det_fg_fraction_ = from.det_fg_fraction_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void V0LayerParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V0LayerParameter::CopyFrom(const V0LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.V0LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V0LayerParameter::IsInitialized() const {
  return true;
}

void V0LayerParameter::InternalSwap(V0LayerParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  blobs_.InternalSwap(&other->blobs_);
  blobs_lr_.InternalSwap(&other->blobs_lr_);
  weight_decay_.InternalSwap(&other->weight_decay_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  meanfile_.Swap(&other->meanfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  det_crop_mode_.Swap(&other->det_crop_mode_, &::apollo::perception::inference::V0LayerParameter::_i_give_permission_to_break_this_code_default_det_crop_mode_.get(),
    GetArenaNoVirtual());
  swap(weight_filler_, other->weight_filler_);
  swap(bias_filler_, other->bias_filler_);
  swap(hdf5_output_param_, other->hdf5_output_param_);
  swap(num_output_, other->num_output_);
  swap(pad_, other->pad_);
  swap(kernelsize_, other->kernelsize_);
  swap(pool_, other->pool_);
  swap(batchsize_, other->batchsize_);
  swap(cropsize_, other->cropsize_);
  swap(new_width_, other->new_width_);
  swap(mirror_, other->mirror_);
  swap(shuffle_images_, other->shuffle_images_);
  swap(rand_skip_, other->rand_skip_);
  swap(det_context_pad_, other->det_context_pad_);
  swap(new_num_, other->new_num_);
  swap(new_channels_, other->new_channels_);
  swap(new_height_, other->new_height_);
  swap(concat_dim_, other->concat_dim_);
  swap(biasterm_, other->biasterm_);
  swap(group_, other->group_);
  swap(stride_, other->stride_);
  swap(dropout_ratio_, other->dropout_ratio_);
  swap(local_size_, other->local_size_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
  swap(scale_, other->scale_);
  swap(k_, other->k_);
  swap(det_fg_threshold_, other->det_fg_threshold_);
  swap(det_bg_threshold_, other->det_bg_threshold_);
  swap(det_fg_fraction_, other->det_fg_fraction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata V0LayerParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PReLUParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_PReLUParameter_default_instance_._instance.get_mutable()->filler_ = const_cast< ::apollo::perception::inference::FillerParameter*>(
      ::apollo::perception::inference::FillerParameter::internal_default_instance());
}
class PReLUParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PReLUParameter>()._has_bits_);
  static const ::apollo::perception::inference::FillerParameter& filler(const PReLUParameter* msg);
  static void set_has_filler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::perception::inference::FillerParameter&
PReLUParameter::_Internal::filler(const PReLUParameter* msg) {
  return *msg->filler_;
}
PReLUParameter::PReLUParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PReLUParameter)
}
PReLUParameter::PReLUParameter(const PReLUParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_filler()) {
    filler_ = new ::apollo::perception::inference::FillerParameter(*from.filler_);
  } else {
    filler_ = nullptr;
  }
  channel_shared_ = from.channel_shared_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PReLUParameter)
}

void PReLUParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&filler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_shared_) -
      reinterpret_cast<char*>(&filler_)) + sizeof(channel_shared_));
}

PReLUParameter::~PReLUParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PReLUParameter)
  SharedDtor();
}

void PReLUParameter::SharedDtor() {
  if (this != internal_default_instance()) delete filler_;
}

void PReLUParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PReLUParameter& PReLUParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PReLUParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PReLUParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PReLUParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(filler_ != nullptr);
    filler_->Clear();
  }
  channel_shared_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PReLUParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.FillerParameter filler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_shared = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_shared(&has_bits);
          channel_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PReLUParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PReLUParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.FillerParameter filler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filler(this), target, stream);
  }

  // optional bool channel_shared = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_channel_shared(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PReLUParameter)
  return target;
}

size_t PReLUParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PReLUParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.FillerParameter filler = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filler_);
    }

    // optional bool channel_shared = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PReLUParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PReLUParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PReLUParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PReLUParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PReLUParameter)
    MergeFrom(*source);
  }
}

void PReLUParameter::MergeFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PReLUParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filler()->::apollo::perception::inference::FillerParameter::MergeFrom(from._internal_filler());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_shared_ = from.channel_shared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PReLUParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PReLUParameter::CopyFrom(const PReLUParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PReLUParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PReLUParameter::IsInitialized() const {
  return true;
}

void PReLUParameter::InternalSwap(PReLUParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(filler_, other->filler_);
  swap(channel_shared_, other->channel_shared_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PReLUParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaddingParameter::InitAsDefaultInstance() {
}
class PaddingParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<PaddingParameter>()._has_bits_);
  static void set_has_pad_t(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pad_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pad_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pad_r(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PaddingParameter::PaddingParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.PaddingParameter)
}
PaddingParameter::PaddingParameter(const PaddingParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pad_t_, &from.pad_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&pad_t_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.PaddingParameter)
}

void PaddingParameter::SharedCtor() {
  ::memset(&pad_t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&pad_t_)) + sizeof(val_));
}

PaddingParameter::~PaddingParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.PaddingParameter)
  SharedDtor();
}

void PaddingParameter::SharedDtor() {
}

void PaddingParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaddingParameter& PaddingParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaddingParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void PaddingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.PaddingParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pad_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_) -
        reinterpret_cast<char*>(&pad_t_)) + sizeof(val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PaddingParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pad_t = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pad_t(&has_bits);
          pad_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_b = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pad_b(&has_bits);
          pad_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pad_l(&has_bits);
          pad_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pad_r = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pad_r(&has_bits);
          pad_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float val = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaddingParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.PaddingParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pad_t = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pad_t(), target);
  }

  // optional uint32 pad_b = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pad_b(), target);
  }

  // optional uint32 pad_l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pad_l(), target);
  }

  // optional uint32 pad_r = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pad_r(), target);
  }

  // optional float val = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.PaddingParameter)
  return target;
}

size_t PaddingParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.PaddingParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pad_t = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_t());
    }

    // optional uint32 pad_b = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_b());
    }

    // optional uint32 pad_l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_l());
    }

    // optional uint32 pad_r = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pad_r());
    }

    // optional float val = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaddingParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.PaddingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const PaddingParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaddingParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.PaddingParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.PaddingParameter)
    MergeFrom(*source);
  }
}

void PaddingParameter::MergeFrom(const PaddingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.PaddingParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pad_t_ = from.pad_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      pad_b_ = from.pad_b_;
    }
    if (cached_has_bits & 0x00000004u) {
      pad_l_ = from.pad_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      pad_r_ = from.pad_r_;
    }
    if (cached_has_bits & 0x00000010u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PaddingParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.PaddingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingParameter::CopyFrom(const PaddingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.PaddingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingParameter::IsInitialized() const {
  return true;
}

void PaddingParameter::InternalSwap(PaddingParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pad_t_, other->pad_t_);
  swap(pad_b_, other->pad_b_);
  swap(pad_l_, other->pad_l_);
  swap(pad_r_, other->pad_r_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaddingParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void YoloLossParameter::InitAsDefaultInstance() {
}
class YoloLossParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloLossParameter>()._has_bits_);
  static void set_has_reg_loss_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

YoloLossParameter::YoloLossParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.YoloLossParameter)
}
YoloLossParameter::YoloLossParameter(const YoloLossParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reg_loss_type_, &from.reg_loss_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_axis_) -
    reinterpret_cast<char*>(&reg_loss_type_)) + sizeof(target_axis_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloLossParameter)
}

void YoloLossParameter::SharedCtor() {
  reg_loss_type_ = 2;
  target_axis_ = -1;
}

YoloLossParameter::~YoloLossParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloLossParameter)
  SharedDtor();
}

void YoloLossParameter::SharedDtor() {
}

void YoloLossParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YoloLossParameter& YoloLossParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YoloLossParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void YoloLossParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    reg_loss_type_ = 2;
    target_axis_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* YoloLossParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::inference::YoloLossParameter_RegLossType_IsValid(val))) {
            _internal_set_reg_loss_type(static_cast<::apollo::perception::inference::YoloLossParameter_RegLossType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 target_axis = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_axis(&has_bits);
          target_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YoloLossParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloLossParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg_loss_type(), target);
  }

  // optional int32 target_axis = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloLossParameter)
  return target;
}

size_t YoloLossParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloLossParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.perception.inference.YoloLossParameter.RegLossType reg_loss_type = 1 [default = SMOOTH_L1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reg_loss_type());
    }

    // optional int32 target_axis = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_axis());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YoloLossParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.YoloLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloLossParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YoloLossParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.YoloLossParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.YoloLossParameter)
    MergeFrom(*source);
  }
}

void YoloLossParameter::MergeFrom(const YoloLossParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloLossParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reg_loss_type_ = from.reg_loss_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_axis_ = from.target_axis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YoloLossParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.YoloLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloLossParameter::CopyFrom(const YoloLossParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloLossParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloLossParameter::IsInitialized() const {
  return true;
}

void YoloLossParameter::InternalSwap(YoloLossParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reg_loss_type_, other->reg_loss_type_);
  swap(target_axis_, other->target_axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloLossParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void YoloDumpParameter::InitAsDefaultInstance() {
}
class YoloDumpParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloDumpParameter>()._has_bits_);
  static void set_has_dump_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

YoloDumpParameter::YoloDumpParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.YoloDumpParameter)
}
YoloDumpParameter::YoloDumpParameter(const YoloDumpParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dump_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dump_dir()) {
    dump_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dump_dir_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloDumpParameter)
}

void YoloDumpParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  dump_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

YoloDumpParameter::~YoloDumpParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloDumpParameter)
  SharedDtor();
}

void YoloDumpParameter::SharedDtor() {
  dump_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void YoloDumpParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YoloDumpParameter& YoloDumpParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YoloDumpParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void YoloDumpParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloDumpParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dump_dir_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* YoloDumpParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string dump_dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dump_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.YoloDumpParameter.dump_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YoloDumpParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloDumpParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string dump_dir = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dump_dir().data(), static_cast<int>(this->_internal_dump_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.YoloDumpParameter.dump_dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dump_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloDumpParameter)
  return target;
}

size_t YoloDumpParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloDumpParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string dump_dir = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dump_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YoloDumpParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.YoloDumpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloDumpParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YoloDumpParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.YoloDumpParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.YoloDumpParameter)
    MergeFrom(*source);
  }
}

void YoloDumpParameter::MergeFrom(const YoloDumpParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloDumpParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dump_dir()) {
    _has_bits_[0] |= 0x00000001u;
    dump_dir_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dump_dir_);
  }
}

void YoloDumpParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.YoloDumpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloDumpParameter::CopyFrom(const YoloDumpParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloDumpParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloDumpParameter::IsInitialized() const {
  return true;
}

void YoloDumpParameter::InternalSwap(YoloDumpParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dump_dir_.Swap(&other->dump_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloDumpParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void YoloAnchorsParameter::InitAsDefaultInstance() {
}
class YoloAnchorsParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloAnchorsParameter>()._has_bits_);
  static void set_has_anchors_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ref_h(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

YoloAnchorsParameter::YoloAnchorsParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.YoloAnchorsParameter)
}
YoloAnchorsParameter::YoloAnchorsParameter(const YoloAnchorsParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchors_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_anchors_file()) {
    anchors_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchors_file_);
  }
  ::memcpy(&ref_w_, &from.ref_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_h_) -
    reinterpret_cast<char*>(&ref_w_)) + sizeof(ref_h_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloAnchorsParameter)
}

void YoloAnchorsParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  anchors_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_w_ = 1;
  ref_h_ = 1;
}

YoloAnchorsParameter::~YoloAnchorsParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloAnchorsParameter)
  SharedDtor();
}

void YoloAnchorsParameter::SharedDtor() {
  anchors_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void YoloAnchorsParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YoloAnchorsParameter& YoloAnchorsParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YoloAnchorsParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void YoloAnchorsParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloAnchorsParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      anchors_file_.ClearNonDefaultToEmptyNoArena();
    }
    ref_w_ = 1;
    ref_h_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* YoloAnchorsParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string anchors_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_anchors_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.YoloAnchorsParameter.anchors_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ref_w = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ref_w(&has_bits);
          ref_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ref_h = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ref_h(&has_bits);
          ref_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YoloAnchorsParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloAnchorsParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string anchors_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anchors_file().data(), static_cast<int>(this->_internal_anchors_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.YoloAnchorsParameter.anchors_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_anchors_file(), target);
  }

  // optional int32 ref_w = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ref_w(), target);
  }

  // optional int32 ref_h = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ref_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloAnchorsParameter)
  return target;
}

size_t YoloAnchorsParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloAnchorsParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string anchors_file = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anchors_file());
    }

    // optional int32 ref_w = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ref_w());
    }

    // optional int32 ref_h = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ref_h());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YoloAnchorsParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.YoloAnchorsParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloAnchorsParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YoloAnchorsParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.YoloAnchorsParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.YoloAnchorsParameter)
    MergeFrom(*source);
  }
}

void YoloAnchorsParameter::MergeFrom(const YoloAnchorsParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloAnchorsParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      anchors_file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchors_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      ref_w_ = from.ref_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      ref_h_ = from.ref_h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YoloAnchorsParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.YoloAnchorsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloAnchorsParameter::CopyFrom(const YoloAnchorsParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloAnchorsParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloAnchorsParameter::IsInitialized() const {
  return true;
}

void YoloAnchorsParameter::InternalSwap(YoloAnchorsParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  anchors_file_.Swap(&other->anchors_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_w_, other->ref_w_);
  swap(ref_h_, other->ref_h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloAnchorsParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DimensionStatistics::InitAsDefaultInstance() {
}
class DimensionStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<DimensionStatistics>()._has_bits_);
  static void set_has_mean_h(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mean_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_std_h(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_std_w(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_std_l(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DimensionStatistics::DimensionStatistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.DimensionStatistics)
}
DimensionStatistics::DimensionStatistics(const DimensionStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_h_, &from.mean_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_w_) -
    reinterpret_cast<char*>(&mean_h_)) + sizeof(std_w_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.DimensionStatistics)
}

void DimensionStatistics::SharedCtor() {
  ::memset(&mean_h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_l_) -
      reinterpret_cast<char*>(&mean_h_)) + sizeof(mean_l_));
  std_l_ = 1;
  std_h_ = 1;
  std_w_ = 1;
}

DimensionStatistics::~DimensionStatistics() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.DimensionStatistics)
  SharedDtor();
}

void DimensionStatistics::SharedDtor() {
}

void DimensionStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionStatistics& DimensionStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DimensionStatistics_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void DimensionStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.DimensionStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&mean_h_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mean_l_) -
        reinterpret_cast<char*>(&mean_h_)) + sizeof(mean_l_));
    std_l_ = 1;
    std_h_ = 1;
    std_w_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DimensionStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float mean_h = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_mean_h(&has_bits);
          mean_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_w = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_mean_w(&has_bits);
          mean_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_l = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_mean_l(&has_bits);
          mean_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_h = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_std_h(&has_bits);
          std_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_w = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_std_w(&has_bits);
          std_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_l = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_std_l(&has_bits);
          std_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DimensionStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.DimensionStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean_h = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mean_h(), target);
  }

  // optional float mean_w = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_mean_w(), target);
  }

  // optional float mean_l = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mean_l(), target);
  }

  // optional float std_h = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_std_h(), target);
  }

  // optional float std_w = 5 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_std_w(), target);
  }

  // optional float std_l = 6 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_std_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.DimensionStatistics)
  return target;
}

size_t DimensionStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.DimensionStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float mean_h = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float mean_w = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float mean_l = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float std_l = 6 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float std_h = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float std_w = 5 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.DimensionStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DimensionStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.DimensionStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.DimensionStatistics)
    MergeFrom(*source);
  }
}

void DimensionStatistics::MergeFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.DimensionStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mean_h_ = from.mean_h_;
    }
    if (cached_has_bits & 0x00000002u) {
      mean_w_ = from.mean_w_;
    }
    if (cached_has_bits & 0x00000004u) {
      mean_l_ = from.mean_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      std_l_ = from.std_l_;
    }
    if (cached_has_bits & 0x00000010u) {
      std_h_ = from.std_h_;
    }
    if (cached_has_bits & 0x00000020u) {
      std_w_ = from.std_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DimensionStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.DimensionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionStatistics::CopyFrom(const DimensionStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.DimensionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionStatistics::IsInitialized() const {
  return true;
}

void DimensionStatistics::InternalSwap(DimensionStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mean_h_, other->mean_h_);
  swap(mean_w_, other->mean_w_);
  swap(mean_l_, other->mean_l_);
  swap(std_l_, other->std_l_);
  swap(std_h_, other->std_h_);
  swap(std_w_, other->std_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DimensionStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void YoloTargetParameter::InitAsDefaultInstance() {
}
class YoloTargetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<YoloTargetParameter>()._has_bits_);
  static void set_has_neg_rois_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ign_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_neg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bias_match(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rescore(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ori_cyc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obj_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_noobj_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

YoloTargetParameter::YoloTargetParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.YoloTargetParameter)
}
YoloTargetParameter::YoloTargetParameter(const YoloTargetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dimension_statistics_(from.dimension_statistics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&noobj_weight_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(noobj_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.YoloTargetParameter)
}

void YoloTargetParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  num_classes_ = 0;
  neg_rois_ratio_ = 1;
  ign_threshold_ = 0.6f;
  neg_threshold_ = 0.1f;
  min_height_ = 0.05f;
  bias_match_ = true;
  rescore_ = true;
  ori_cyc_ = 1;
  obj_weight_ = 10;
  noobj_weight_ = 1;
}

YoloTargetParameter::~YoloTargetParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.YoloTargetParameter)
  SharedDtor();
}

void YoloTargetParameter::SharedDtor() {
}

void YoloTargetParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YoloTargetParameter& YoloTargetParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YoloTargetParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void YoloTargetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.YoloTargetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_statistics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    num_classes_ = 0;
    neg_rois_ratio_ = 1;
    ign_threshold_ = 0.6f;
    neg_threshold_ = 0.1f;
    min_height_ = 0.05f;
    bias_match_ = true;
    rescore_ = true;
    ori_cyc_ = 1;
  }
  if (cached_has_bits & 0x00000300u) {
    obj_weight_ = 10;
    noobj_weight_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* YoloTargetParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float neg_rois_ratio = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_neg_rois_ratio(&has_bits);
          neg_rois_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ign_threshold = 2 [default = 0.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ign_threshold(&has_bits);
          ign_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float neg_threshold = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_neg_threshold(&has_bits);
          neg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_height = 4 [default = 0.05];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_height(&has_bits);
          min_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool bias_match = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bias_match(&has_bits);
          bias_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rescore = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rescore(&has_bits);
          rescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ori_cyc = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ori_cyc(&has_bits);
          ori_cyc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float obj_weight = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_obj_weight(&has_bits);
          obj_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float noobj_weight = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_noobj_weight(&has_bits);
          noobj_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 num_classes = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimension_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YoloTargetParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.YoloTargetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float neg_rois_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_neg_rois_ratio(), target);
  }

  // optional float ign_threshold = 2 [default = 0.6];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ign_threshold(), target);
  }

  // optional float neg_threshold = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_neg_threshold(), target);
  }

  // optional float min_height = 4 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_height(), target);
  }

  // optional bool bias_match = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bias_match(), target);
  }

  // optional bool rescore = 6 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rescore(), target);
  }

  // optional int32 ori_cyc = 7 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ori_cyc(), target);
  }

  // optional float obj_weight = 8 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_obj_weight(), target);
  }

  // optional float noobj_weight = 9 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_noobj_weight(), target);
  }

  // optional int32 num_classes = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_num_classes(), target);
  }

  // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dimension_statistics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_dimension_statistics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.YoloTargetParameter)
  return target;
}

size_t YoloTargetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.YoloTargetParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.DimensionStatistics dimension_statistics = 11;
  total_size += 1UL * this->_internal_dimension_statistics_size();
  for (const auto& msg : this->dimension_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 num_classes = 10 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_classes());
    }

    // optional float neg_rois_ratio = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ign_threshold = 2 [default = 0.6];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float neg_threshold = 3 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float min_height = 4 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool bias_match = 5 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rescore = 6 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 ori_cyc = 7 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ori_cyc());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float obj_weight = 8 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float noobj_weight = 9 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YoloTargetParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.YoloTargetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const YoloTargetParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YoloTargetParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.YoloTargetParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.YoloTargetParameter)
    MergeFrom(*source);
  }
}

void YoloTargetParameter::MergeFrom(const YoloTargetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.YoloTargetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_statistics_.MergeFrom(from.dimension_statistics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      neg_rois_ratio_ = from.neg_rois_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      ign_threshold_ = from.ign_threshold_;
    }
    if (cached_has_bits & 0x00000008u) {
      neg_threshold_ = from.neg_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      bias_match_ = from.bias_match_;
    }
    if (cached_has_bits & 0x00000040u) {
      rescore_ = from.rescore_;
    }
    if (cached_has_bits & 0x00000080u) {
      ori_cyc_ = from.ori_cyc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      obj_weight_ = from.obj_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      noobj_weight_ = from.noobj_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YoloTargetParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.YoloTargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoloTargetParameter::CopyFrom(const YoloTargetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.YoloTargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoloTargetParameter::IsInitialized() const {
  return true;
}

void YoloTargetParameter::InternalSwap(YoloTargetParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dimension_statistics_.InternalSwap(&other->dimension_statistics_);
  swap(num_classes_, other->num_classes_);
  swap(neg_rois_ratio_, other->neg_rois_ratio_);
  swap(ign_threshold_, other->ign_threshold_);
  swap(neg_threshold_, other->neg_threshold_);
  swap(min_height_, other->min_height_);
  swap(bias_match_, other->bias_match_);
  swap(rescore_, other->rescore_);
  swap(ori_cyc_, other->ori_cyc_);
  swap(obj_weight_, other->obj_weight_);
  swap(noobj_weight_, other->noobj_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YoloTargetParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionProposalParameter::InitAsDefaultInstance() {
  ::apollo::perception::inference::_RegionProposalParameter_default_instance_._instance.get_mutable()->nms_param_ = const_cast< ::apollo::perception::inference::NonMaximumSuppressionParameter*>(
      ::apollo::perception::inference::NonMaximumSuppressionParameter::internal_default_instance());
}
class RegionProposalParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionProposalParameter>()._has_bits_);
  static void set_has_orientation_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_object_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_noobject_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coord_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rescore(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bias_match(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tricky_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::perception::inference::NonMaximumSuppressionParameter& nms_param(const RegionProposalParameter* msg);
  static void set_has_nms_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_keep_top_k(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pos_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_neg_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_neg_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::apollo::perception::inference::NonMaximumSuppressionParameter&
RegionProposalParameter::_Internal::nms_param(const RegionProposalParameter* msg) {
  return *msg->nms_param_;
}
RegionProposalParameter::RegionProposalParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.RegionProposalParameter)
}
RegionProposalParameter::RegionProposalParameter(const RegionProposalParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      anchorbox_(from.anchorbox_),
      thresholds_(from.thresholds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nms_param()) {
    nms_param_ = new ::apollo::perception::inference::NonMaximumSuppressionParameter(*from.nms_param_);
  } else {
    nms_param_ = nullptr;
  }
  ::memcpy(&object_scale_, &from.object_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_top_k_) -
    reinterpret_cast<char*>(&object_scale_)) + sizeof(keep_top_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RegionProposalParameter)
}

void RegionProposalParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  ::memset(&nms_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neg_threshold_) -
      reinterpret_cast<char*>(&nms_param_)) + sizeof(neg_threshold_));
  neg_ratio_ = 3;
  tricky_iter_ = 400u;
  keep_top_k_ = -1;
}

RegionProposalParameter::~RegionProposalParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RegionProposalParameter)
  SharedDtor();
}

void RegionProposalParameter::SharedDtor() {
  if (this != internal_default_instance()) delete nms_param_;
}

void RegionProposalParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionProposalParameter& RegionProposalParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionProposalParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void RegionProposalParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RegionProposalParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorbox_.Clear();
  thresholds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nms_param_ != nullptr);
    nms_param_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&object_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_classes_) -
        reinterpret_cast<char*>(&object_scale_)) + sizeof(num_classes_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&rescore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&neg_threshold_) -
        reinterpret_cast<char*>(&rescore_)) + sizeof(neg_threshold_));
    neg_ratio_ = 3;
    tricky_iter_ = 400u;
  }
  keep_top_k_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegionProposalParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchorbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 object_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_scale(&has_bits);
          object_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 noobject_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_noobject_scale(&has_bits);
          noobject_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 class_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_class_scale(&has_bits);
          class_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coord_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_coord_scale(&has_bits);
          coord_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float jitter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_jitter(&has_bits);
          jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool rescore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rescore(&has_bits);
          rescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_classes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bias_match = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bias_match(&has_bits);
          bias_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 tricky_iter = 13 [default = 400];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tricky_iter(&has_bits);
          tricky_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float orientation_scale = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_orientation_scale(&has_bits);
          orientation_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_nms_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 keep_top_k = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_keep_top_k(&has_bits);
          keep_top_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pos_threshold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_pos_threshold(&has_bits);
          pos_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float neg_threshold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_neg_threshold(&has_bits);
          neg_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 neg_ratio = 19 [default = 3];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_neg_ratio(&has_bits);
          neg_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionProposalParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RegionProposalParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anchorbox_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_anchorbox(i), target, stream);
  }

  // repeated float thresholds = 2;
  for (int i = 0, n = this->_internal_thresholds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_thresholds(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 object_scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_scale(), target);
  }

  // optional uint32 noobject_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_noobject_scale(), target);
  }

  // optional uint32 class_scale = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_class_scale(), target);
  }

  // optional uint32 coord_scale = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_coord_scale(), target);
  }

  // optional float jitter = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_jitter(), target);
  }

  // optional float bias = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bias(), target);
  }

  // optional bool rescore = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_rescore(), target);
  }

  // optional uint32 num_classes = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_classes(), target);
  }

  // optional bool bias_match = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_bias_match(), target);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_threshold(), target);
  }

  // optional uint32 tricky_iter = 13 [default = 400];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tricky_iter(), target);
  }

  // optional float orientation_scale = 14 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_orientation_scale(), target);
  }

  // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::nms_param(this), target, stream);
  }

  // optional int32 keep_top_k = 16 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_keep_top_k(), target);
  }

  // optional float pos_threshold = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_pos_threshold(), target);
  }

  // optional float neg_threshold = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_neg_threshold(), target);
  }

  // optional int32 neg_ratio = 19 [default = 3];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_neg_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RegionProposalParameter)
  return target;
}

size_t RegionProposalParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RegionProposalParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  total_size += 1UL * this->_internal_anchorbox_size();
  for (const auto& msg : this->anchorbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float thresholds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_thresholds_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.perception.inference.NonMaximumSuppressionParameter nms_param = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nms_param_);
    }

    // optional uint32 object_scale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_object_scale());
    }

    // optional uint32 noobject_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_noobject_scale());
    }

    // optional uint32 class_scale = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_class_scale());
    }

    // optional uint32 coord_scale = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coord_scale());
    }

    // optional float jitter = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float bias = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_classes = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool rescore = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool bias_match = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float threshold = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float orientation_scale = 14 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float pos_threshold = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float neg_threshold = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 neg_ratio = 19 [default = 3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_neg_ratio());
    }

    // optional uint32 tricky_iter = 13 [default = 400];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tricky_iter());
    }

  }
  // optional int32 keep_top_k = 16 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keep_top_k());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionProposalParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.RegionProposalParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionProposalParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionProposalParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.RegionProposalParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.RegionProposalParameter)
    MergeFrom(*source);
  }
}

void RegionProposalParameter::MergeFrom(const RegionProposalParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RegionProposalParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchorbox_.MergeFrom(from.anchorbox_);
  thresholds_.MergeFrom(from.thresholds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nms_param()->::apollo::perception::inference::NonMaximumSuppressionParameter::MergeFrom(from._internal_nms_param());
    }
    if (cached_has_bits & 0x00000002u) {
      object_scale_ = from.object_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      noobject_scale_ = from.noobject_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      class_scale_ = from.class_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      coord_scale_ = from.coord_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      jitter_ = from.jitter_;
    }
    if (cached_has_bits & 0x00000040u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_classes_ = from.num_classes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      rescore_ = from.rescore_;
    }
    if (cached_has_bits & 0x00000200u) {
      bias_match_ = from.bias_match_;
    }
    if (cached_has_bits & 0x00000400u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      orientation_scale_ = from.orientation_scale_;
    }
    if (cached_has_bits & 0x00001000u) {
      pos_threshold_ = from.pos_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      neg_threshold_ = from.neg_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      neg_ratio_ = from.neg_ratio_;
    }
    if (cached_has_bits & 0x00008000u) {
      tricky_iter_ = from.tricky_iter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_keep_top_k(from._internal_keep_top_k());
  }
}

void RegionProposalParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.RegionProposalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionProposalParameter::CopyFrom(const RegionProposalParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RegionProposalParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionProposalParameter::IsInitialized() const {
  return true;
}

void RegionProposalParameter::InternalSwap(RegionProposalParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  anchorbox_.InternalSwap(&other->anchorbox_);
  thresholds_.InternalSwap(&other->thresholds_);
  swap(nms_param_, other->nms_param_);
  swap(object_scale_, other->object_scale_);
  swap(noobject_scale_, other->noobject_scale_);
  swap(class_scale_, other->class_scale_);
  swap(coord_scale_, other->coord_scale_);
  swap(jitter_, other->jitter_);
  swap(bias_, other->bias_);
  swap(num_classes_, other->num_classes_);
  swap(rescore_, other->rescore_);
  swap(bias_match_, other->bias_match_);
  swap(threshold_, other->threshold_);
  swap(orientation_scale_, other->orientation_scale_);
  swap(pos_threshold_, other->pos_threshold_);
  swap(neg_threshold_, other->neg_threshold_);
  swap(neg_ratio_, other->neg_ratio_);
  swap(tricky_iter_, other->tricky_iter_);
  swap(keep_top_k_, other->keep_top_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionProposalParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionParameter::InitAsDefaultInstance() {
}
class RegionParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionParameter>()._has_bits_);
  static void set_has_orientation_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dimension_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_front_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rear_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_object_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_noobject_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_coord_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rescore(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bias_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tricky_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_use_l1_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_twice_softmax(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_anchor_normalized(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_anchorfile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_side_box_v2(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_use_side_box_v3(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ori_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_;
RegionParameter::RegionParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.RegionParameter)
}
RegionParameter::RegionParameter(const RegionParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      anchorbox_(from.anchorbox_),
      thresholds_(from.thresholds_),
      ori_enable_(from.ori_enable_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorfile_.UnsafeSetDefault(&::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get());
  if (from._internal_has_anchorfile()) {
    anchorfile_.AssignWithDefault(&::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get(), from.anchorfile_);
  }
  ::memcpy(&object_scale_, &from.object_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&ori_cycle_) -
    reinterpret_cast<char*>(&object_scale_)) + sizeof(ori_cycle_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.RegionParameter)
}

void RegionParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  anchorfile_.UnsafeSetDefault(&::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get());
  ::memset(&object_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_side_box_v3_) -
      reinterpret_cast<char*>(&object_scale_)) + sizeof(use_side_box_v3_));
  tricky_iter_ = 400u;
  ori_cycle_ = 1;
}

RegionParameter::~RegionParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.RegionParameter)
  SharedDtor();
}

void RegionParameter::SharedDtor() {
  anchorfile_.DestroyNoArena(&::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get());
}

void RegionParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionParameter& RegionParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void RegionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.RegionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorbox_.Clear();
  thresholds_.Clear();
  ori_enable_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    anchorfile_.UnsafeMutablePointer()->assign(*&::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get());
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&object_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_classes_) -
        reinterpret_cast<char*>(&object_scale_)) + sizeof(num_classes_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_scale_) -
        reinterpret_cast<char*>(&threshold_)) + sizeof(front_scale_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&rear_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_side_box_v3_) -
        reinterpret_cast<char*>(&rear_scale_)) + sizeof(use_side_box_v3_));
    tricky_iter_ = 400u;
    ori_cycle_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegionParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_anchorbox(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 object_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_scale(&has_bits);
          object_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 noobject_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_noobject_scale(&has_bits);
          noobject_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float class_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_class_scale(&has_bits);
          class_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 coord_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_coord_scale(&has_bits);
          coord_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float jitter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_jitter(&has_bits);
          jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool rescore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rescore(&has_bits);
          rescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_classes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bias_match = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bias_match(&has_bits);
          bias_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 tricky_iter = 13 [default = 400];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tricky_iter(&has_bits);
          tricky_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float orientation_scale = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_orientation_scale(&has_bits);
          orientation_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dimension_scale = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_dimension_scale(&has_bits);
          dimension_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_l1_loss = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_l1_loss(&has_bits);
          use_l1_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_twice_softmax = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_use_twice_softmax(&has_bits);
          use_twice_softmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_anchor_normalized = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_anchor_normalized(&has_bits);
          is_anchor_normalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float front_scale = 19 [default = 0];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_front_scale(&has_bits);
          front_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float rear_scale = 20 [default = 0];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_rear_scale(&has_bits);
          rear_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool ori_enable = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ori_enable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_ori_enable(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string anchorfile = 22 [default = "anchor.txt"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_anchorfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.inference.RegionParameter.anchorfile");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_side_box_v2 = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_use_side_box_v2(&has_bits);
          use_side_box_v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_side_box_v3 = 24 [default = false];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_use_side_box_v3(&has_bits);
          use_side_box_v3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ori_cycle = 25 [default = 1];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ori_cycle(&has_bits);
          ori_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.RegionParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_anchorbox_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_anchorbox(i), target, stream);
  }

  // repeated float thresholds = 2;
  for (int i = 0, n = this->_internal_thresholds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_thresholds(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 object_scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_scale(), target);
  }

  // optional uint32 noobject_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_noobject_scale(), target);
  }

  // optional float class_scale = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_class_scale(), target);
  }

  // optional uint32 coord_scale = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_coord_scale(), target);
  }

  // optional float jitter = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_jitter(), target);
  }

  // optional float bias = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bias(), target);
  }

  // optional bool rescore = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_rescore(), target);
  }

  // optional uint32 num_classes = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_classes(), target);
  }

  // optional bool bias_match = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_bias_match(), target);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_threshold(), target);
  }

  // optional uint32 tricky_iter = 13 [default = 400];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tricky_iter(), target);
  }

  // optional float orientation_scale = 14 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_orientation_scale(), target);
  }

  // optional float dimension_scale = 15 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_dimension_scale(), target);
  }

  // optional bool use_l1_loss = 16 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_use_l1_loss(), target);
  }

  // optional bool use_twice_softmax = 17 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_use_twice_softmax(), target);
  }

  // optional bool is_anchor_normalized = 18 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_anchor_normalized(), target);
  }

  // optional float front_scale = 19 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_front_scale(), target);
  }

  // optional float rear_scale = 20 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_rear_scale(), target);
  }

  // repeated bool ori_enable = 21;
  for (int i = 0, n = this->_internal_ori_enable_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_ori_enable(i), target);
  }

  // optional string anchorfile = 22 [default = "anchor.txt"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anchorfile().data(), static_cast<int>(this->_internal_anchorfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.inference.RegionParameter.anchorfile");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_anchorfile(), target);
  }

  // optional bool use_side_box_v2 = 23 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_use_side_box_v2(), target);
  }

  // optional bool use_side_box_v3 = 24 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_use_side_box_v3(), target);
  }

  // optional int32 ori_cycle = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_ori_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.RegionParameter)
  return target;
}

size_t RegionParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.RegionParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.inference.AnchorBox anchorbox = 1;
  total_size += 1UL * this->_internal_anchorbox_size();
  for (const auto& msg : this->anchorbox_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float thresholds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thresholds_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_thresholds_size());
    total_size += data_size;
  }

  // repeated bool ori_enable = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ori_enable_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ori_enable_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string anchorfile = 22 [default = "anchor.txt"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anchorfile());
    }

    // optional uint32 object_scale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_object_scale());
    }

    // optional uint32 noobject_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_noobject_scale());
    }

    // optional float class_scale = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 coord_scale = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coord_scale());
    }

    // optional float jitter = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float bias = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_classes = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_classes());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float threshold = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool rescore = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool bias_match = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool use_l1_loss = 16 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool use_twice_softmax = 17 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional float orientation_scale = 14 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float dimension_scale = 15 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float front_scale = 19 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional float rear_scale = 20 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool is_anchor_normalized = 18 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool use_side_box_v2 = 23 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool use_side_box_v3 = 24 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 tricky_iter = 13 [default = 400];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tricky_iter());
    }

    // optional int32 ori_cycle = 25 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ori_cycle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.RegionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.RegionParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.RegionParameter)
    MergeFrom(*source);
  }
}

void RegionParameter::MergeFrom(const RegionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.RegionParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  anchorbox_.MergeFrom(from.anchorbox_);
  thresholds_.MergeFrom(from.thresholds_);
  ori_enable_.MergeFrom(from.ori_enable_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      anchorfile_.AssignWithDefault(&::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get(), from.anchorfile_);
    }
    if (cached_has_bits & 0x00000002u) {
      object_scale_ = from.object_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      noobject_scale_ = from.noobject_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      class_scale_ = from.class_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      coord_scale_ = from.coord_scale_;
    }
    if (cached_has_bits & 0x00000020u) {
      jitter_ = from.jitter_;
    }
    if (cached_has_bits & 0x00000040u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_classes_ = from.num_classes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      rescore_ = from.rescore_;
    }
    if (cached_has_bits & 0x00000400u) {
      bias_match_ = from.bias_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_l1_loss_ = from.use_l1_loss_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_twice_softmax_ = from.use_twice_softmax_;
    }
    if (cached_has_bits & 0x00002000u) {
      orientation_scale_ = from.orientation_scale_;
    }
    if (cached_has_bits & 0x00004000u) {
      dimension_scale_ = from.dimension_scale_;
    }
    if (cached_has_bits & 0x00008000u) {
      front_scale_ = from.front_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      rear_scale_ = from.rear_scale_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_anchor_normalized_ = from.is_anchor_normalized_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_side_box_v2_ = from.use_side_box_v2_;
    }
    if (cached_has_bits & 0x00080000u) {
      use_side_box_v3_ = from.use_side_box_v3_;
    }
    if (cached_has_bits & 0x00100000u) {
      tricky_iter_ = from.tricky_iter_;
    }
    if (cached_has_bits & 0x00200000u) {
      ori_cycle_ = from.ori_cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.RegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionParameter::CopyFrom(const RegionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.RegionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionParameter::IsInitialized() const {
  return true;
}

void RegionParameter::InternalSwap(RegionParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  anchorbox_.InternalSwap(&other->anchorbox_);
  thresholds_.InternalSwap(&other->thresholds_);
  ori_enable_.InternalSwap(&other->ori_enable_);
  anchorfile_.Swap(&other->anchorfile_, &::apollo::perception::inference::RegionParameter::_i_give_permission_to_break_this_code_default_anchorfile_.get(),
    GetArenaNoVirtual());
  swap(object_scale_, other->object_scale_);
  swap(noobject_scale_, other->noobject_scale_);
  swap(class_scale_, other->class_scale_);
  swap(coord_scale_, other->coord_scale_);
  swap(jitter_, other->jitter_);
  swap(bias_, other->bias_);
  swap(num_classes_, other->num_classes_);
  swap(threshold_, other->threshold_);
  swap(rescore_, other->rescore_);
  swap(bias_match_, other->bias_match_);
  swap(use_l1_loss_, other->use_l1_loss_);
  swap(use_twice_softmax_, other->use_twice_softmax_);
  swap(orientation_scale_, other->orientation_scale_);
  swap(dimension_scale_, other->dimension_scale_);
  swap(front_scale_, other->front_scale_);
  swap(rear_scale_, other->rear_scale_);
  swap(is_anchor_normalized_, other->is_anchor_normalized_);
  swap(use_side_box_v2_, other->use_side_box_v2_);
  swap(use_side_box_v3_, other->use_side_box_v3_);
  swap(tricky_iter_, other->tricky_iter_);
  swap(ori_cycle_, other->ori_cycle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnchorBox::InitAsDefaultInstance() {
}
class AnchorBox::_Internal {
 public:
  using HasBits = decltype(std::declval<AnchorBox>()._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AnchorBox::AnchorBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.AnchorBox)
}
AnchorBox::AnchorBox(const AnchorBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.AnchorBox)
}

void AnchorBox::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

AnchorBox::~AnchorBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.AnchorBox)
  SharedDtor();
}

void AnchorBox::SharedDtor() {
}

void AnchorBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnchorBox& AnchorBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnchorBox_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void AnchorBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.AnchorBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&w_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AnchorBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnchorBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.AnchorBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // optional float h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.AnchorBox)
  return target;
}

size_t AnchorBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.AnchorBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float h = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnchorBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.AnchorBox)
  GOOGLE_DCHECK_NE(&from, this);
  const AnchorBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnchorBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.AnchorBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.AnchorBox)
    MergeFrom(*source);
  }
}

void AnchorBox::MergeFrom(const AnchorBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.AnchorBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnchorBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.AnchorBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnchorBox::CopyFrom(const AnchorBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.AnchorBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnchorBox::IsInitialized() const {
  return true;
}

void AnchorBox::InternalSwap(AnchorBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnchorBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReorgParameter::InitAsDefaultInstance() {
}
class ReorgParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ReorgParameter>()._has_bits_);
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReorgParameter::ReorgParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.inference.ReorgParameter)
}
ReorgParameter::ReorgParameter(const ReorgParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stride_ = from.stride_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.inference.ReorgParameter)
}

void ReorgParameter::SharedCtor() {
  stride_ = 0u;
}

ReorgParameter::~ReorgParameter() {
  // @@protoc_insertion_point(destructor:apollo.perception.inference.ReorgParameter)
  SharedDtor();
}

void ReorgParameter::SharedDtor() {
}

void ReorgParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReorgParameter& ReorgParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReorgParameter_modules_2fperception_2fproto_2frt_2eproto.base);
  return *internal_default_instance();
}


void ReorgParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.inference.ReorgParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stride_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReorgParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stride = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReorgParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.inference.ReorgParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stride = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.inference.ReorgParameter)
  return target;
}

size_t ReorgParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.inference.ReorgParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 stride = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stride());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReorgParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.inference.ReorgParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ReorgParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReorgParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.inference.ReorgParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.inference.ReorgParameter)
    MergeFrom(*source);
  }
}

void ReorgParameter::MergeFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.inference.ReorgParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stride()) {
    _internal_set_stride(from._internal_stride());
  }
}

void ReorgParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.inference.ReorgParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorgParameter::CopyFrom(const ReorgParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.inference.ReorgParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorgParameter::IsInitialized() const {
  return true;
}

void ReorgParameter::InternalSwap(ReorgParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReorgParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace inference
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BlobShape* Arena::CreateMaybeMessage< ::apollo::perception::inference::BlobShape >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BlobShape >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BlobProto* Arena::CreateMaybeMessage< ::apollo::perception::inference::BlobProto >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BlobProto >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BlobProtoVector* Arena::CreateMaybeMessage< ::apollo::perception::inference::BlobProtoVector >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BlobProtoVector >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::Datum* Arena::CreateMaybeMessage< ::apollo::perception::inference::Datum >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::Datum >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LabelMapItem* Arena::CreateMaybeMessage< ::apollo::perception::inference::LabelMapItem >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::LabelMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LabelMap* Arena::CreateMaybeMessage< ::apollo::perception::inference::LabelMap >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::LabelMap >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::Sampler* Arena::CreateMaybeMessage< ::apollo::perception::inference::Sampler >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::Sampler >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SampleConstraint* Arena::CreateMaybeMessage< ::apollo::perception::inference::SampleConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SampleConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BatchSampler* Arena::CreateMaybeMessage< ::apollo::perception::inference::BatchSampler >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BatchSampler >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::EmitConstraint* Arena::CreateMaybeMessage< ::apollo::perception::inference::EmitConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::EmitConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NormalizedBBox* Arena::CreateMaybeMessage< ::apollo::perception::inference::NormalizedBBox >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NormalizedBBox >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BBox3D* Arena::CreateMaybeMessage< ::apollo::perception::inference::BBox3D >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::Annotation* Arena::CreateMaybeMessage< ::apollo::perception::inference::Annotation >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnnotationGroup* Arena::CreateMaybeMessage< ::apollo::perception::inference::AnnotationGroup >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::AnnotationGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnnotatedDatum* Arena::CreateMaybeMessage< ::apollo::perception::inference::AnnotatedDatum >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::AnnotatedDatum >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::FillerParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::FillerParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::FillerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NetParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::NetParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NetParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SolverParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SolverParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SolverParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SolverState* Arena::CreateMaybeMessage< ::apollo::perception::inference::SolverState >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SolverState >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NetState* Arena::CreateMaybeMessage< ::apollo::perception::inference::NetState >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NetState >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NetStateRule* Arena::CreateMaybeMessage< ::apollo::perception::inference::NetStateRule >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NetStateRule >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ParamSpec* Arena::CreateMaybeMessage< ::apollo::perception::inference::ParamSpec >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ParamSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LayerParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::LayerParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::LayerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::TransformationParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::TransformationParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::TransformationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ResizeParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ResizeParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ResizeParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SaltPepperParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SaltPepperParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SaltPepperParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NoiseParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::NoiseParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NoiseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DistortionParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DistortionParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DistortionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ExpansionParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ExpansionParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ExpansionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LossParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::LossParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::LossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AccuracyParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::AccuracyParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::AccuracyParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnnotatedDataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::AnnotatedDataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::AnnotatedDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ArgMaxParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ArgMaxParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ArgMaxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ConcatParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ConcatParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ConcatParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BatchNormParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::BatchNormParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BatchNormParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::BiasParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::BiasParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::BiasParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ContrastiveLossParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ContrastiveLossParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ContrastiveLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ConvolutionParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ConvolutionParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ConvolutionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::CropParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::CropParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::CropParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DetectionEvaluateParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DetectionEvaluateParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DetectionEvaluateParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NonMaximumSuppressionParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::NonMaximumSuppressionParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NonMaximumSuppressionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SaveOutputParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SaveOutputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SaveOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DetectionOutputParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DetectionOutputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DetectionOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RegionOutputParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::RegionOutputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::RegionOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DropoutParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DropoutParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DropoutParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DummyDataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DummyDataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DummyDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::EltwiseParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::EltwiseParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::EltwiseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ELUParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ELUParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ELUParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::EmbedParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::EmbedParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::EmbedParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ExpParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ExpParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ExpParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::FlattenParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::FlattenParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::FlattenParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::HDF5DataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::HDF5DataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::HDF5DataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::HDF5OutputParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::HDF5OutputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::HDF5OutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::HingeLossParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::HingeLossParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::HingeLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RepeatedList* Arena::CreateMaybeMessage< ::apollo::perception::inference::RepeatedList >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::RepeatedList >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DatasetParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::DatasetParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DatasetParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ImageDataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ImageDataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ImageDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::InfogainLossParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::InfogainLossParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::InfogainLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::InnerProductParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::InnerProductParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::InnerProductParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::InputParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::InputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::InputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LogParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::LogParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::LogParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::LRNParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::LRNParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::LRNParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::MemoryDataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::MemoryDataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::MemoryDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::MultiBoxLossParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::MultiBoxLossParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::MultiBoxLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::MVNParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::MVNParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::MVNParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::NormalizeParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::NormalizeParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::NormalizeParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ParameterParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ParameterParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ParameterParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PermuteParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PermuteParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PermuteParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PoolingParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PoolingParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PoolingParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PowerParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PowerParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PowerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PriorBoxParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PriorBoxParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PriorBoxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PythonParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PythonParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PythonParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RecurrentParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::RecurrentParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::RecurrentParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReductionParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ReductionParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ReductionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReLUParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ReLUParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ReLUParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReshapeParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ReshapeParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ReshapeParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ROIPoolingParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ROIPoolingParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ROIPoolingParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ScaleParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ScaleParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ScaleParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SigmoidParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SigmoidParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SigmoidParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SliceParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SliceParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SliceParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SoftmaxParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SoftmaxParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SoftmaxParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::TanHParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::TanHParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::TanHParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::TileParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::TileParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::TileParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ThresholdParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ThresholdParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ThresholdParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::VideoDataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::VideoDataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::VideoDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::WindowDataParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::WindowDataParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::WindowDataParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::SPPParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::SPPParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::SPPParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::V1LayerParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::V1LayerParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::V1LayerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::V0LayerParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::V0LayerParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::V0LayerParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PReLUParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PReLUParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PReLUParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::PaddingParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::PaddingParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::PaddingParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloLossParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloLossParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::YoloLossParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloDumpParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloDumpParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::YoloDumpParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloAnchorsParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloAnchorsParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::YoloAnchorsParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::DimensionStatistics* Arena::CreateMaybeMessage< ::apollo::perception::inference::DimensionStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::DimensionStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::YoloTargetParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::YoloTargetParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::YoloTargetParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RegionProposalParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::RegionProposalParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::RegionProposalParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::RegionParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::RegionParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::RegionParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::AnchorBox* Arena::CreateMaybeMessage< ::apollo::perception::inference::AnchorBox >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::AnchorBox >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::inference::ReorgParameter* Arena::CreateMaybeMessage< ::apollo::perception::inference::ReorgParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::inference::ReorgParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
