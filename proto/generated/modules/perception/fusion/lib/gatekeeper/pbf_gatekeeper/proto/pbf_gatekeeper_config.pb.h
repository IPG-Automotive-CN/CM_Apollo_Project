// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/fusion/lib/gatekeeper/pbf_gatekeeper/proto/pbf_gatekeeper_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace fusion {
class PbfGatekeeperConfig;
class PbfGatekeeperConfigDefaultTypeInternal;
extern PbfGatekeeperConfigDefaultTypeInternal _PbfGatekeeperConfig_default_instance_;
}  // namespace fusion
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::fusion::PbfGatekeeperConfig* Arena::CreateMaybeMessage<::apollo::perception::fusion::PbfGatekeeperConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace fusion {

// ===================================================================

class PbfGatekeeperConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.fusion.PbfGatekeeperConfig) */ {
 public:
  PbfGatekeeperConfig();
  virtual ~PbfGatekeeperConfig();

  PbfGatekeeperConfig(const PbfGatekeeperConfig& from);
  PbfGatekeeperConfig(PbfGatekeeperConfig&& from) noexcept
    : PbfGatekeeperConfig() {
    *this = ::std::move(from);
  }

  inline PbfGatekeeperConfig& operator=(const PbfGatekeeperConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbfGatekeeperConfig& operator=(PbfGatekeeperConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbfGatekeeperConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbfGatekeeperConfig* internal_default_instance() {
    return reinterpret_cast<const PbfGatekeeperConfig*>(
               &_PbfGatekeeperConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbfGatekeeperConfig& a, PbfGatekeeperConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PbfGatekeeperConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbfGatekeeperConfig* New() const final {
    return CreateMaybeMessage<PbfGatekeeperConfig>(nullptr);
  }

  PbfGatekeeperConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbfGatekeeperConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbfGatekeeperConfig& from);
  void MergeFrom(const PbfGatekeeperConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbfGatekeeperConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.fusion.PbfGatekeeperConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinRadarConfidentDistanceFieldNumber = 5,
    kMaxRadarConfidentAngleFieldNumber = 6,
    kMinCameraPublishDistanceFieldNumber = 7,
    kInvisiblePeriodThresholdFieldNumber = 8,
    kToicThresholdFieldNumber = 9,
    kUseTrackTimePubStrategyFieldNumber = 10,
    kPubTrackTimeThreshFieldNumber = 11,
    kExistanceThresholdFieldNumber = 12,
    kRadarExistanceThresholdFieldNumber = 13,
    kPublishIfHasLidarFieldNumber = 1,
    kPublishIfHasRadarFieldNumber = 2,
    kPublishIfHasCameraFieldNumber = 3,
    kUseCamera3DFieldNumber = 4,
  };
  // optional double min_radar_confident_distance = 5;
  bool has_min_radar_confident_distance() const;
  private:
  bool _internal_has_min_radar_confident_distance() const;
  public:
  void clear_min_radar_confident_distance();
  double min_radar_confident_distance() const;
  void set_min_radar_confident_distance(double value);
  private:
  double _internal_min_radar_confident_distance() const;
  void _internal_set_min_radar_confident_distance(double value);
  public:

  // optional double max_radar_confident_angle = 6;
  bool has_max_radar_confident_angle() const;
  private:
  bool _internal_has_max_radar_confident_angle() const;
  public:
  void clear_max_radar_confident_angle();
  double max_radar_confident_angle() const;
  void set_max_radar_confident_angle(double value);
  private:
  double _internal_max_radar_confident_angle() const;
  void _internal_set_max_radar_confident_angle(double value);
  public:

  // optional double min_camera_publish_distance = 7;
  bool has_min_camera_publish_distance() const;
  private:
  bool _internal_has_min_camera_publish_distance() const;
  public:
  void clear_min_camera_publish_distance();
  double min_camera_publish_distance() const;
  void set_min_camera_publish_distance(double value);
  private:
  double _internal_min_camera_publish_distance() const;
  void _internal_set_min_camera_publish_distance(double value);
  public:

  // optional double invisible_period_threshold = 8;
  bool has_invisible_period_threshold() const;
  private:
  bool _internal_has_invisible_period_threshold() const;
  public:
  void clear_invisible_period_threshold();
  double invisible_period_threshold() const;
  void set_invisible_period_threshold(double value);
  private:
  double _internal_invisible_period_threshold() const;
  void _internal_set_invisible_period_threshold(double value);
  public:

  // optional double toic_threshold = 9;
  bool has_toic_threshold() const;
  private:
  bool _internal_has_toic_threshold() const;
  public:
  void clear_toic_threshold();
  double toic_threshold() const;
  void set_toic_threshold(double value);
  private:
  double _internal_toic_threshold() const;
  void _internal_set_toic_threshold(double value);
  public:

  // optional bool use_track_time_pub_strategy = 10;
  bool has_use_track_time_pub_strategy() const;
  private:
  bool _internal_has_use_track_time_pub_strategy() const;
  public:
  void clear_use_track_time_pub_strategy();
  bool use_track_time_pub_strategy() const;
  void set_use_track_time_pub_strategy(bool value);
  private:
  bool _internal_use_track_time_pub_strategy() const;
  void _internal_set_use_track_time_pub_strategy(bool value);
  public:

  // optional int32 pub_track_time_thresh = 11;
  bool has_pub_track_time_thresh() const;
  private:
  bool _internal_has_pub_track_time_thresh() const;
  public:
  void clear_pub_track_time_thresh();
  ::PROTOBUF_NAMESPACE_ID::int32 pub_track_time_thresh() const;
  void set_pub_track_time_thresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pub_track_time_thresh() const;
  void _internal_set_pub_track_time_thresh(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double existance_threshold = 12;
  bool has_existance_threshold() const;
  private:
  bool _internal_has_existance_threshold() const;
  public:
  void clear_existance_threshold();
  double existance_threshold() const;
  void set_existance_threshold(double value);
  private:
  double _internal_existance_threshold() const;
  void _internal_set_existance_threshold(double value);
  public:

  // optional double radar_existance_threshold = 13;
  bool has_radar_existance_threshold() const;
  private:
  bool _internal_has_radar_existance_threshold() const;
  public:
  void clear_radar_existance_threshold();
  double radar_existance_threshold() const;
  void set_radar_existance_threshold(double value);
  private:
  double _internal_radar_existance_threshold() const;
  void _internal_set_radar_existance_threshold(double value);
  public:

  // optional bool publish_if_has_lidar = 1 [default = true];
  bool has_publish_if_has_lidar() const;
  private:
  bool _internal_has_publish_if_has_lidar() const;
  public:
  void clear_publish_if_has_lidar();
  bool publish_if_has_lidar() const;
  void set_publish_if_has_lidar(bool value);
  private:
  bool _internal_publish_if_has_lidar() const;
  void _internal_set_publish_if_has_lidar(bool value);
  public:

  // optional bool publish_if_has_radar = 2 [default = true];
  bool has_publish_if_has_radar() const;
  private:
  bool _internal_has_publish_if_has_radar() const;
  public:
  void clear_publish_if_has_radar();
  bool publish_if_has_radar() const;
  void set_publish_if_has_radar(bool value);
  private:
  bool _internal_publish_if_has_radar() const;
  void _internal_set_publish_if_has_radar(bool value);
  public:

  // optional bool publish_if_has_camera = 3 [default = true];
  bool has_publish_if_has_camera() const;
  private:
  bool _internal_has_publish_if_has_camera() const;
  public:
  void clear_publish_if_has_camera();
  bool publish_if_has_camera() const;
  void set_publish_if_has_camera(bool value);
  private:
  bool _internal_publish_if_has_camera() const;
  void _internal_set_publish_if_has_camera(bool value);
  public:

  // optional bool use_camera_3d = 4 [default = true];
  bool has_use_camera_3d() const;
  private:
  bool _internal_has_use_camera_3d() const;
  public:
  void clear_use_camera_3d();
  bool use_camera_3d() const;
  void set_use_camera_3d(bool value);
  private:
  bool _internal_use_camera_3d() const;
  void _internal_set_use_camera_3d(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.fusion.PbfGatekeeperConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double min_radar_confident_distance_;
  double max_radar_confident_angle_;
  double min_camera_publish_distance_;
  double invisible_period_threshold_;
  double toic_threshold_;
  bool use_track_time_pub_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int32 pub_track_time_thresh_;
  double existance_threshold_;
  double radar_existance_threshold_;
  bool publish_if_has_lidar_;
  bool publish_if_has_radar_;
  bool publish_if_has_camera_;
  bool use_camera_3d_;
  friend struct ::TableStruct_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbfGatekeeperConfig

// optional bool publish_if_has_lidar = 1 [default = true];
inline bool PbfGatekeeperConfig::_internal_has_publish_if_has_lidar() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_publish_if_has_lidar() const {
  return _internal_has_publish_if_has_lidar();
}
inline void PbfGatekeeperConfig::clear_publish_if_has_lidar() {
  publish_if_has_lidar_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PbfGatekeeperConfig::_internal_publish_if_has_lidar() const {
  return publish_if_has_lidar_;
}
inline bool PbfGatekeeperConfig::publish_if_has_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_lidar)
  return _internal_publish_if_has_lidar();
}
inline void PbfGatekeeperConfig::_internal_set_publish_if_has_lidar(bool value) {
  _has_bits_[0] |= 0x00000200u;
  publish_if_has_lidar_ = value;
}
inline void PbfGatekeeperConfig::set_publish_if_has_lidar(bool value) {
  _internal_set_publish_if_has_lidar(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_lidar)
}

// optional bool publish_if_has_radar = 2 [default = true];
inline bool PbfGatekeeperConfig::_internal_has_publish_if_has_radar() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_publish_if_has_radar() const {
  return _internal_has_publish_if_has_radar();
}
inline void PbfGatekeeperConfig::clear_publish_if_has_radar() {
  publish_if_has_radar_ = true;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PbfGatekeeperConfig::_internal_publish_if_has_radar() const {
  return publish_if_has_radar_;
}
inline bool PbfGatekeeperConfig::publish_if_has_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_radar)
  return _internal_publish_if_has_radar();
}
inline void PbfGatekeeperConfig::_internal_set_publish_if_has_radar(bool value) {
  _has_bits_[0] |= 0x00000400u;
  publish_if_has_radar_ = value;
}
inline void PbfGatekeeperConfig::set_publish_if_has_radar(bool value) {
  _internal_set_publish_if_has_radar(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_radar)
}

// optional bool publish_if_has_camera = 3 [default = true];
inline bool PbfGatekeeperConfig::_internal_has_publish_if_has_camera() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_publish_if_has_camera() const {
  return _internal_has_publish_if_has_camera();
}
inline void PbfGatekeeperConfig::clear_publish_if_has_camera() {
  publish_if_has_camera_ = true;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PbfGatekeeperConfig::_internal_publish_if_has_camera() const {
  return publish_if_has_camera_;
}
inline bool PbfGatekeeperConfig::publish_if_has_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_camera)
  return _internal_publish_if_has_camera();
}
inline void PbfGatekeeperConfig::_internal_set_publish_if_has_camera(bool value) {
  _has_bits_[0] |= 0x00000800u;
  publish_if_has_camera_ = value;
}
inline void PbfGatekeeperConfig::set_publish_if_has_camera(bool value) {
  _internal_set_publish_if_has_camera(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_camera)
}

// optional bool use_camera_3d = 4 [default = true];
inline bool PbfGatekeeperConfig::_internal_has_use_camera_3d() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_use_camera_3d() const {
  return _internal_has_use_camera_3d();
}
inline void PbfGatekeeperConfig::clear_use_camera_3d() {
  use_camera_3d_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PbfGatekeeperConfig::_internal_use_camera_3d() const {
  return use_camera_3d_;
}
inline bool PbfGatekeeperConfig::use_camera_3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.use_camera_3d)
  return _internal_use_camera_3d();
}
inline void PbfGatekeeperConfig::_internal_set_use_camera_3d(bool value) {
  _has_bits_[0] |= 0x00001000u;
  use_camera_3d_ = value;
}
inline void PbfGatekeeperConfig::set_use_camera_3d(bool value) {
  _internal_set_use_camera_3d(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.use_camera_3d)
}

// optional double min_radar_confident_distance = 5;
inline bool PbfGatekeeperConfig::_internal_has_min_radar_confident_distance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_min_radar_confident_distance() const {
  return _internal_has_min_radar_confident_distance();
}
inline void PbfGatekeeperConfig::clear_min_radar_confident_distance() {
  min_radar_confident_distance_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PbfGatekeeperConfig::_internal_min_radar_confident_distance() const {
  return min_radar_confident_distance_;
}
inline double PbfGatekeeperConfig::min_radar_confident_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.min_radar_confident_distance)
  return _internal_min_radar_confident_distance();
}
inline void PbfGatekeeperConfig::_internal_set_min_radar_confident_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  min_radar_confident_distance_ = value;
}
inline void PbfGatekeeperConfig::set_min_radar_confident_distance(double value) {
  _internal_set_min_radar_confident_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.min_radar_confident_distance)
}

// optional double max_radar_confident_angle = 6;
inline bool PbfGatekeeperConfig::_internal_has_max_radar_confident_angle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_max_radar_confident_angle() const {
  return _internal_has_max_radar_confident_angle();
}
inline void PbfGatekeeperConfig::clear_max_radar_confident_angle() {
  max_radar_confident_angle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PbfGatekeeperConfig::_internal_max_radar_confident_angle() const {
  return max_radar_confident_angle_;
}
inline double PbfGatekeeperConfig::max_radar_confident_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.max_radar_confident_angle)
  return _internal_max_radar_confident_angle();
}
inline void PbfGatekeeperConfig::_internal_set_max_radar_confident_angle(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_radar_confident_angle_ = value;
}
inline void PbfGatekeeperConfig::set_max_radar_confident_angle(double value) {
  _internal_set_max_radar_confident_angle(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.max_radar_confident_angle)
}

// optional double min_camera_publish_distance = 7;
inline bool PbfGatekeeperConfig::_internal_has_min_camera_publish_distance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_min_camera_publish_distance() const {
  return _internal_has_min_camera_publish_distance();
}
inline void PbfGatekeeperConfig::clear_min_camera_publish_distance() {
  min_camera_publish_distance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PbfGatekeeperConfig::_internal_min_camera_publish_distance() const {
  return min_camera_publish_distance_;
}
inline double PbfGatekeeperConfig::min_camera_publish_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.min_camera_publish_distance)
  return _internal_min_camera_publish_distance();
}
inline void PbfGatekeeperConfig::_internal_set_min_camera_publish_distance(double value) {
  _has_bits_[0] |= 0x00000004u;
  min_camera_publish_distance_ = value;
}
inline void PbfGatekeeperConfig::set_min_camera_publish_distance(double value) {
  _internal_set_min_camera_publish_distance(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.min_camera_publish_distance)
}

// optional double invisible_period_threshold = 8;
inline bool PbfGatekeeperConfig::_internal_has_invisible_period_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_invisible_period_threshold() const {
  return _internal_has_invisible_period_threshold();
}
inline void PbfGatekeeperConfig::clear_invisible_period_threshold() {
  invisible_period_threshold_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PbfGatekeeperConfig::_internal_invisible_period_threshold() const {
  return invisible_period_threshold_;
}
inline double PbfGatekeeperConfig::invisible_period_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.invisible_period_threshold)
  return _internal_invisible_period_threshold();
}
inline void PbfGatekeeperConfig::_internal_set_invisible_period_threshold(double value) {
  _has_bits_[0] |= 0x00000008u;
  invisible_period_threshold_ = value;
}
inline void PbfGatekeeperConfig::set_invisible_period_threshold(double value) {
  _internal_set_invisible_period_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.invisible_period_threshold)
}

// optional double toic_threshold = 9;
inline bool PbfGatekeeperConfig::_internal_has_toic_threshold() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_toic_threshold() const {
  return _internal_has_toic_threshold();
}
inline void PbfGatekeeperConfig::clear_toic_threshold() {
  toic_threshold_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PbfGatekeeperConfig::_internal_toic_threshold() const {
  return toic_threshold_;
}
inline double PbfGatekeeperConfig::toic_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.toic_threshold)
  return _internal_toic_threshold();
}
inline void PbfGatekeeperConfig::_internal_set_toic_threshold(double value) {
  _has_bits_[0] |= 0x00000010u;
  toic_threshold_ = value;
}
inline void PbfGatekeeperConfig::set_toic_threshold(double value) {
  _internal_set_toic_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.toic_threshold)
}

// optional bool use_track_time_pub_strategy = 10;
inline bool PbfGatekeeperConfig::_internal_has_use_track_time_pub_strategy() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_use_track_time_pub_strategy() const {
  return _internal_has_use_track_time_pub_strategy();
}
inline void PbfGatekeeperConfig::clear_use_track_time_pub_strategy() {
  use_track_time_pub_strategy_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PbfGatekeeperConfig::_internal_use_track_time_pub_strategy() const {
  return use_track_time_pub_strategy_;
}
inline bool PbfGatekeeperConfig::use_track_time_pub_strategy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.use_track_time_pub_strategy)
  return _internal_use_track_time_pub_strategy();
}
inline void PbfGatekeeperConfig::_internal_set_use_track_time_pub_strategy(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_track_time_pub_strategy_ = value;
}
inline void PbfGatekeeperConfig::set_use_track_time_pub_strategy(bool value) {
  _internal_set_use_track_time_pub_strategy(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.use_track_time_pub_strategy)
}

// optional int32 pub_track_time_thresh = 11;
inline bool PbfGatekeeperConfig::_internal_has_pub_track_time_thresh() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_pub_track_time_thresh() const {
  return _internal_has_pub_track_time_thresh();
}
inline void PbfGatekeeperConfig::clear_pub_track_time_thresh() {
  pub_track_time_thresh_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbfGatekeeperConfig::_internal_pub_track_time_thresh() const {
  return pub_track_time_thresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbfGatekeeperConfig::pub_track_time_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.pub_track_time_thresh)
  return _internal_pub_track_time_thresh();
}
inline void PbfGatekeeperConfig::_internal_set_pub_track_time_thresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pub_track_time_thresh_ = value;
}
inline void PbfGatekeeperConfig::set_pub_track_time_thresh(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pub_track_time_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.pub_track_time_thresh)
}

// optional double existance_threshold = 12;
inline bool PbfGatekeeperConfig::_internal_has_existance_threshold() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_existance_threshold() const {
  return _internal_has_existance_threshold();
}
inline void PbfGatekeeperConfig::clear_existance_threshold() {
  existance_threshold_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PbfGatekeeperConfig::_internal_existance_threshold() const {
  return existance_threshold_;
}
inline double PbfGatekeeperConfig::existance_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.existance_threshold)
  return _internal_existance_threshold();
}
inline void PbfGatekeeperConfig::_internal_set_existance_threshold(double value) {
  _has_bits_[0] |= 0x00000080u;
  existance_threshold_ = value;
}
inline void PbfGatekeeperConfig::set_existance_threshold(double value) {
  _internal_set_existance_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.existance_threshold)
}

// optional double radar_existance_threshold = 13;
inline bool PbfGatekeeperConfig::_internal_has_radar_existance_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PbfGatekeeperConfig::has_radar_existance_threshold() const {
  return _internal_has_radar_existance_threshold();
}
inline void PbfGatekeeperConfig::clear_radar_existance_threshold() {
  radar_existance_threshold_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PbfGatekeeperConfig::_internal_radar_existance_threshold() const {
  return radar_existance_threshold_;
}
inline double PbfGatekeeperConfig::radar_existance_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.radar_existance_threshold)
  return _internal_radar_existance_threshold();
}
inline void PbfGatekeeperConfig::_internal_set_radar_existance_threshold(double value) {
  _has_bits_[0] |= 0x00000100u;
  radar_existance_threshold_ = value;
}
inline void PbfGatekeeperConfig::set_radar_existance_threshold(double value) {
  _internal_set_radar_existance_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.radar_existance_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2ffusion_2flib_2fgatekeeper_2fpbf_5fgatekeeper_2fproto_2fpbf_5fgatekeeper_5fconfig_2eproto
