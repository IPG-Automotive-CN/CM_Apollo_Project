// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/fusion_component_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class FusionComponentConfig;
class FusionComponentConfigDefaultTypeInternal;
extern FusionComponentConfigDefaultTypeInternal _FusionComponentConfig_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::FusionComponentConfig* Arena::CreateMaybeMessage<::apollo::perception::onboard::FusionComponentConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class FusionComponentConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.FusionComponentConfig) */ {
 public:
  FusionComponentConfig();
  virtual ~FusionComponentConfig();

  FusionComponentConfig(const FusionComponentConfig& from);
  FusionComponentConfig(FusionComponentConfig&& from) noexcept
    : FusionComponentConfig() {
    *this = ::std::move(from);
  }

  inline FusionComponentConfig& operator=(const FusionComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionComponentConfig& operator=(FusionComponentConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FusionComponentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionComponentConfig* internal_default_instance() {
    return reinterpret_cast<const FusionComponentConfig*>(
               &_FusionComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FusionComponentConfig& a, FusionComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionComponentConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FusionComponentConfig* New() const final {
    return CreateMaybeMessage<FusionComponentConfig>(nullptr);
  }

  FusionComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FusionComponentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FusionComponentConfig& from);
  void MergeFrom(const FusionComponentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionComponentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.FusionComponentConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFusionMethodFieldNumber = 1,
    kFusionMainSensorFieldNumber = 2,
    kOutputObstaclesChannelNameFieldNumber = 5,
    kOutputVizFusedContentChannelNameFieldNumber = 6,
    kRadiusForRoiObjectCheckFieldNumber = 4,
    kObjectInRoiCheckFieldNumber = 3,
  };
  // optional string fusion_method = 1;
  bool has_fusion_method() const;
  private:
  bool _internal_has_fusion_method() const;
  public:
  void clear_fusion_method();
  const std::string& fusion_method() const;
  void set_fusion_method(const std::string& value);
  void set_fusion_method(std::string&& value);
  void set_fusion_method(const char* value);
  void set_fusion_method(const char* value, size_t size);
  std::string* mutable_fusion_method();
  std::string* release_fusion_method();
  void set_allocated_fusion_method(std::string* fusion_method);
  private:
  const std::string& _internal_fusion_method() const;
  void _internal_set_fusion_method(const std::string& value);
  std::string* _internal_mutable_fusion_method();
  public:

  // optional string fusion_main_sensor = 2;
  bool has_fusion_main_sensor() const;
  private:
  bool _internal_has_fusion_main_sensor() const;
  public:
  void clear_fusion_main_sensor();
  const std::string& fusion_main_sensor() const;
  void set_fusion_main_sensor(const std::string& value);
  void set_fusion_main_sensor(std::string&& value);
  void set_fusion_main_sensor(const char* value);
  void set_fusion_main_sensor(const char* value, size_t size);
  std::string* mutable_fusion_main_sensor();
  std::string* release_fusion_main_sensor();
  void set_allocated_fusion_main_sensor(std::string* fusion_main_sensor);
  private:
  const std::string& _internal_fusion_main_sensor() const;
  void _internal_set_fusion_main_sensor(const std::string& value);
  std::string* _internal_mutable_fusion_main_sensor();
  public:

  // optional string output_obstacles_channel_name = 5 [default = "/perception/obstacles"];
  bool has_output_obstacles_channel_name() const;
  private:
  bool _internal_has_output_obstacles_channel_name() const;
  public:
  void clear_output_obstacles_channel_name();
  const std::string& output_obstacles_channel_name() const;
  void set_output_obstacles_channel_name(const std::string& value);
  void set_output_obstacles_channel_name(std::string&& value);
  void set_output_obstacles_channel_name(const char* value);
  void set_output_obstacles_channel_name(const char* value, size_t size);
  std::string* mutable_output_obstacles_channel_name();
  std::string* release_output_obstacles_channel_name();
  void set_allocated_output_obstacles_channel_name(std::string* output_obstacles_channel_name);
  private:
  const std::string& _internal_output_obstacles_channel_name() const;
  void _internal_set_output_obstacles_channel_name(const std::string& value);
  std::string* _internal_mutable_output_obstacles_channel_name();
  public:

  // optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
  bool has_output_viz_fused_content_channel_name() const;
  private:
  bool _internal_has_output_viz_fused_content_channel_name() const;
  public:
  void clear_output_viz_fused_content_channel_name();
  const std::string& output_viz_fused_content_channel_name() const;
  void set_output_viz_fused_content_channel_name(const std::string& value);
  void set_output_viz_fused_content_channel_name(std::string&& value);
  void set_output_viz_fused_content_channel_name(const char* value);
  void set_output_viz_fused_content_channel_name(const char* value, size_t size);
  std::string* mutable_output_viz_fused_content_channel_name();
  std::string* release_output_viz_fused_content_channel_name();
  void set_allocated_output_viz_fused_content_channel_name(std::string* output_viz_fused_content_channel_name);
  private:
  const std::string& _internal_output_viz_fused_content_channel_name() const;
  void _internal_set_output_viz_fused_content_channel_name(const std::string& value);
  std::string* _internal_mutable_output_viz_fused_content_channel_name();
  public:

  // optional double radius_for_roi_object_check = 4;
  bool has_radius_for_roi_object_check() const;
  private:
  bool _internal_has_radius_for_roi_object_check() const;
  public:
  void clear_radius_for_roi_object_check();
  double radius_for_roi_object_check() const;
  void set_radius_for_roi_object_check(double value);
  private:
  double _internal_radius_for_roi_object_check() const;
  void _internal_set_radius_for_roi_object_check(double value);
  public:

  // optional bool object_in_roi_check = 3;
  bool has_object_in_roi_check() const;
  private:
  bool _internal_has_object_in_roi_check() const;
  public:
  void clear_object_in_roi_check();
  bool object_in_roi_check() const;
  void set_object_in_roi_check(bool value);
  private:
  bool _internal_object_in_roi_check() const;
  void _internal_set_object_in_roi_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.FusionComponentConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fusion_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fusion_main_sensor_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_output_obstacles_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_obstacles_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_viz_fused_content_channel_name_;
  double radius_for_roi_object_check_;
  bool object_in_roi_check_;
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionComponentConfig

// optional string fusion_method = 1;
inline bool FusionComponentConfig::_internal_has_fusion_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FusionComponentConfig::has_fusion_method() const {
  return _internal_has_fusion_method();
}
inline void FusionComponentConfig::clear_fusion_method() {
  fusion_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FusionComponentConfig::fusion_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionComponentConfig.fusion_method)
  return _internal_fusion_method();
}
inline void FusionComponentConfig::set_fusion_method(const std::string& value) {
  _internal_set_fusion_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionComponentConfig.fusion_method)
}
inline std::string* FusionComponentConfig::mutable_fusion_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionComponentConfig.fusion_method)
  return _internal_mutable_fusion_method();
}
inline const std::string& FusionComponentConfig::_internal_fusion_method() const {
  return fusion_method_.GetNoArena();
}
inline void FusionComponentConfig::_internal_set_fusion_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fusion_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FusionComponentConfig::set_fusion_method(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fusion_method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionComponentConfig.fusion_method)
}
inline void FusionComponentConfig::set_fusion_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fusion_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionComponentConfig.fusion_method)
}
inline void FusionComponentConfig::set_fusion_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fusion_method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionComponentConfig.fusion_method)
}
inline std::string* FusionComponentConfig::_internal_mutable_fusion_method() {
  _has_bits_[0] |= 0x00000001u;
  return fusion_method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FusionComponentConfig::release_fusion_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionComponentConfig.fusion_method)
  if (!_internal_has_fusion_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fusion_method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FusionComponentConfig::set_allocated_fusion_method(std::string* fusion_method) {
  if (fusion_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fusion_method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fusion_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionComponentConfig.fusion_method)
}

// optional string fusion_main_sensor = 2;
inline bool FusionComponentConfig::_internal_has_fusion_main_sensor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FusionComponentConfig::has_fusion_main_sensor() const {
  return _internal_has_fusion_main_sensor();
}
inline void FusionComponentConfig::clear_fusion_main_sensor() {
  fusion_main_sensor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FusionComponentConfig::fusion_main_sensor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
  return _internal_fusion_main_sensor();
}
inline void FusionComponentConfig::set_fusion_main_sensor(const std::string& value) {
  _internal_set_fusion_main_sensor(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
}
inline std::string* FusionComponentConfig::mutable_fusion_main_sensor() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
  return _internal_mutable_fusion_main_sensor();
}
inline const std::string& FusionComponentConfig::_internal_fusion_main_sensor() const {
  return fusion_main_sensor_.GetNoArena();
}
inline void FusionComponentConfig::_internal_set_fusion_main_sensor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fusion_main_sensor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FusionComponentConfig::set_fusion_main_sensor(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fusion_main_sensor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
}
inline void FusionComponentConfig::set_fusion_main_sensor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fusion_main_sensor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
}
inline void FusionComponentConfig::set_fusion_main_sensor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fusion_main_sensor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
}
inline std::string* FusionComponentConfig::_internal_mutable_fusion_main_sensor() {
  _has_bits_[0] |= 0x00000002u;
  return fusion_main_sensor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FusionComponentConfig::release_fusion_main_sensor() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
  if (!_internal_has_fusion_main_sensor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fusion_main_sensor_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FusionComponentConfig::set_allocated_fusion_main_sensor(std::string* fusion_main_sensor) {
  if (fusion_main_sensor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fusion_main_sensor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fusion_main_sensor);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionComponentConfig.fusion_main_sensor)
}

// optional bool object_in_roi_check = 3;
inline bool FusionComponentConfig::_internal_has_object_in_roi_check() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FusionComponentConfig::has_object_in_roi_check() const {
  return _internal_has_object_in_roi_check();
}
inline void FusionComponentConfig::clear_object_in_roi_check() {
  object_in_roi_check_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FusionComponentConfig::_internal_object_in_roi_check() const {
  return object_in_roi_check_;
}
inline bool FusionComponentConfig::object_in_roi_check() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionComponentConfig.object_in_roi_check)
  return _internal_object_in_roi_check();
}
inline void FusionComponentConfig::_internal_set_object_in_roi_check(bool value) {
  _has_bits_[0] |= 0x00000020u;
  object_in_roi_check_ = value;
}
inline void FusionComponentConfig::set_object_in_roi_check(bool value) {
  _internal_set_object_in_roi_check(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionComponentConfig.object_in_roi_check)
}

// optional double radius_for_roi_object_check = 4;
inline bool FusionComponentConfig::_internal_has_radius_for_roi_object_check() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FusionComponentConfig::has_radius_for_roi_object_check() const {
  return _internal_has_radius_for_roi_object_check();
}
inline void FusionComponentConfig::clear_radius_for_roi_object_check() {
  radius_for_roi_object_check_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double FusionComponentConfig::_internal_radius_for_roi_object_check() const {
  return radius_for_roi_object_check_;
}
inline double FusionComponentConfig::radius_for_roi_object_check() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionComponentConfig.radius_for_roi_object_check)
  return _internal_radius_for_roi_object_check();
}
inline void FusionComponentConfig::_internal_set_radius_for_roi_object_check(double value) {
  _has_bits_[0] |= 0x00000010u;
  radius_for_roi_object_check_ = value;
}
inline void FusionComponentConfig::set_radius_for_roi_object_check(double value) {
  _internal_set_radius_for_roi_object_check(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionComponentConfig.radius_for_roi_object_check)
}

// optional string output_obstacles_channel_name = 5 [default = "/perception/obstacles"];
inline bool FusionComponentConfig::_internal_has_output_obstacles_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FusionComponentConfig::has_output_obstacles_channel_name() const {
  return _internal_has_output_obstacles_channel_name();
}
inline void FusionComponentConfig::clear_output_obstacles_channel_name() {
  output_obstacles_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FusionComponentConfig::output_obstacles_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
  return _internal_output_obstacles_channel_name();
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(const std::string& value) {
  _internal_set_output_obstacles_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
}
inline std::string* FusionComponentConfig::mutable_output_obstacles_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
  return _internal_mutable_output_obstacles_channel_name();
}
inline const std::string& FusionComponentConfig::_internal_output_obstacles_channel_name() const {
  return output_obstacles_channel_name_.GetNoArena();
}
inline void FusionComponentConfig::_internal_set_output_obstacles_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  output_obstacles_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), value);
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  output_obstacles_channel_name_.SetNoArena(
    &::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  output_obstacles_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  output_obstacles_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
}
inline std::string* FusionComponentConfig::_internal_mutable_output_obstacles_channel_name() {
  _has_bits_[0] |= 0x00000004u;
  return output_obstacles_channel_name_.MutableNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get());
}
inline std::string* FusionComponentConfig::release_output_obstacles_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
  if (!_internal_has_output_obstacles_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return output_obstacles_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get());
}
inline void FusionComponentConfig::set_allocated_output_obstacles_channel_name(std::string* output_obstacles_channel_name) {
  if (output_obstacles_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_obstacles_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), output_obstacles_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionComponentConfig.output_obstacles_channel_name)
}

// optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
inline bool FusionComponentConfig::_internal_has_output_viz_fused_content_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FusionComponentConfig::has_output_viz_fused_content_channel_name() const {
  return _internal_has_output_viz_fused_content_channel_name();
}
inline void FusionComponentConfig::clear_output_viz_fused_content_channel_name() {
  output_viz_fused_content_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FusionComponentConfig::output_viz_fused_content_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
  return _internal_output_viz_fused_content_channel_name();
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(const std::string& value) {
  _internal_set_output_viz_fused_content_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline std::string* FusionComponentConfig::mutable_output_viz_fused_content_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
  return _internal_mutable_output_viz_fused_content_channel_name();
}
inline const std::string& FusionComponentConfig::_internal_output_viz_fused_content_channel_name() const {
  return output_viz_fused_content_channel_name_.GetNoArena();
}
inline void FusionComponentConfig::_internal_set_output_viz_fused_content_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  output_viz_fused_content_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get(), value);
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  output_viz_fused_content_channel_name_.SetNoArena(
    &::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  output_viz_fused_content_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  output_viz_fused_content_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline std::string* FusionComponentConfig::_internal_mutable_output_viz_fused_content_channel_name() {
  _has_bits_[0] |= 0x00000008u;
  return output_viz_fused_content_channel_name_.MutableNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get());
}
inline std::string* FusionComponentConfig::release_output_viz_fused_content_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
  if (!_internal_has_output_viz_fused_content_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return output_viz_fused_content_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get());
}
inline void FusionComponentConfig::set_allocated_output_viz_fused_content_channel_name(std::string* output_viz_fused_content_channel_name) {
  if (output_viz_fused_content_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  output_viz_fused_content_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionComponentConfig::_i_give_permission_to_break_this_code_default_output_viz_fused_content_channel_name_.get(), output_viz_fused_content_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionComponentConfig.output_viz_fused_content_channel_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ffusion_5fcomponent_5fconfig_2eproto
