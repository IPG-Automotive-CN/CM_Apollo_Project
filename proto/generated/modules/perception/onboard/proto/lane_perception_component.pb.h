// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/lane_perception_component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class LaneDetection;
class LaneDetectionDefaultTypeInternal;
extern LaneDetectionDefaultTypeInternal _LaneDetection_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::LaneDetection* Arena::CreateMaybeMessage<::apollo::perception::onboard::LaneDetection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class LaneDetection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.LaneDetection) */ {
 public:
  LaneDetection();
  virtual ~LaneDetection();

  LaneDetection(const LaneDetection& from);
  LaneDetection(LaneDetection&& from) noexcept
    : LaneDetection() {
    *this = ::std::move(from);
  }

  inline LaneDetection& operator=(const LaneDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneDetection& operator=(LaneDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneDetection* internal_default_instance() {
    return reinterpret_cast<const LaneDetection*>(
               &_LaneDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneDetection& a, LaneDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneDetection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneDetection* New() const final {
    return CreateMaybeMessage<LaneDetection>(nullptr);
  }

  LaneDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneDetection& from);
  void MergeFrom(const LaneDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.LaneDetection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto);
    return ::descriptor_table_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNamesFieldNumber = 1,
    kInputCameraChannelNamesFieldNumber = 2,
    kCameraLanePerceptionConfDirFieldNumber = 4,
    kCameraLanePerceptionConfFileFieldNumber = 5,
    kOutputLanesChannelNameFieldNumber = 10,
    kLaneCalibrationWorkingSensorNameFieldNumber = 13,
    kCalibratorMethodFieldNumber = 14,
    kCalibServiceNameFieldNumber = 15,
    kVisualDebugFolderFieldNumber = 18,
    kVisualCameraFieldNumber = 19,
    kTimestampOffsetFieldNumber = 3,
    kDefaultCameraPitchFieldNumber = 11,
    kEnableUndistortionFieldNumber = 8,
    kEnableVisualizationFieldNumber = 9,
    kWriteVisualImgFieldNumber = 20,
    kRunCalibServiceFieldNumber = 16,
    kFrameCapacityFieldNumber = 6,
    kImageChannelNumFieldNumber = 7,
    kDefaultCameraHeightFieldNumber = 12,
    kTsDiffFieldNumber = 17,
  };
  // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
  bool has_camera_names() const;
  private:
  bool _internal_has_camera_names() const;
  public:
  void clear_camera_names();
  const std::string& camera_names() const;
  void set_camera_names(const std::string& value);
  void set_camera_names(std::string&& value);
  void set_camera_names(const char* value);
  void set_camera_names(const char* value, size_t size);
  std::string* mutable_camera_names();
  std::string* release_camera_names();
  void set_allocated_camera_names(std::string* camera_names);
  private:
  const std::string& _internal_camera_names() const;
  void _internal_set_camera_names(const std::string& value);
  std::string* _internal_mutable_camera_names();
  public:

  // optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"];
  bool has_input_camera_channel_names() const;
  private:
  bool _internal_has_input_camera_channel_names() const;
  public:
  void clear_input_camera_channel_names();
  const std::string& input_camera_channel_names() const;
  void set_input_camera_channel_names(const std::string& value);
  void set_input_camera_channel_names(std::string&& value);
  void set_input_camera_channel_names(const char* value);
  void set_input_camera_channel_names(const char* value, size_t size);
  std::string* mutable_input_camera_channel_names();
  std::string* release_input_camera_channel_names();
  void set_allocated_input_camera_channel_names(std::string* input_camera_channel_names);
  private:
  const std::string& _internal_input_camera_channel_names() const;
  void _internal_set_input_camera_channel_names(const std::string& value);
  std::string* _internal_mutable_input_camera_channel_names();
  public:

  // optional string camera_lane_perception_conf_dir = 4 [default = "conf/perception/camera"];
  bool has_camera_lane_perception_conf_dir() const;
  private:
  bool _internal_has_camera_lane_perception_conf_dir() const;
  public:
  void clear_camera_lane_perception_conf_dir();
  const std::string& camera_lane_perception_conf_dir() const;
  void set_camera_lane_perception_conf_dir(const std::string& value);
  void set_camera_lane_perception_conf_dir(std::string&& value);
  void set_camera_lane_perception_conf_dir(const char* value);
  void set_camera_lane_perception_conf_dir(const char* value, size_t size);
  std::string* mutable_camera_lane_perception_conf_dir();
  std::string* release_camera_lane_perception_conf_dir();
  void set_allocated_camera_lane_perception_conf_dir(std::string* camera_lane_perception_conf_dir);
  private:
  const std::string& _internal_camera_lane_perception_conf_dir() const;
  void _internal_set_camera_lane_perception_conf_dir(const std::string& value);
  std::string* _internal_mutable_camera_lane_perception_conf_dir();
  public:

  // optional string camera_lane_perception_conf_file = 5 [default = "lane.pt"];
  bool has_camera_lane_perception_conf_file() const;
  private:
  bool _internal_has_camera_lane_perception_conf_file() const;
  public:
  void clear_camera_lane_perception_conf_file();
  const std::string& camera_lane_perception_conf_file() const;
  void set_camera_lane_perception_conf_file(const std::string& value);
  void set_camera_lane_perception_conf_file(std::string&& value);
  void set_camera_lane_perception_conf_file(const char* value);
  void set_camera_lane_perception_conf_file(const char* value, size_t size);
  std::string* mutable_camera_lane_perception_conf_file();
  std::string* release_camera_lane_perception_conf_file();
  void set_allocated_camera_lane_perception_conf_file(std::string* camera_lane_perception_conf_file);
  private:
  const std::string& _internal_camera_lane_perception_conf_file() const;
  void _internal_set_camera_lane_perception_conf_file(const std::string& value);
  std::string* _internal_mutable_camera_lane_perception_conf_file();
  public:

  // optional string output_lanes_channel_name = 10 [default = "/perception/lanes"];
  bool has_output_lanes_channel_name() const;
  private:
  bool _internal_has_output_lanes_channel_name() const;
  public:
  void clear_output_lanes_channel_name();
  const std::string& output_lanes_channel_name() const;
  void set_output_lanes_channel_name(const std::string& value);
  void set_output_lanes_channel_name(std::string&& value);
  void set_output_lanes_channel_name(const char* value);
  void set_output_lanes_channel_name(const char* value, size_t size);
  std::string* mutable_output_lanes_channel_name();
  std::string* release_output_lanes_channel_name();
  void set_allocated_output_lanes_channel_name(std::string* output_lanes_channel_name);
  private:
  const std::string& _internal_output_lanes_channel_name() const;
  void _internal_set_output_lanes_channel_name(const std::string& value);
  std::string* _internal_mutable_output_lanes_channel_name();
  public:

  // optional string lane_calibration_working_sensor_name = 13 [default = "front_6mm"];
  bool has_lane_calibration_working_sensor_name() const;
  private:
  bool _internal_has_lane_calibration_working_sensor_name() const;
  public:
  void clear_lane_calibration_working_sensor_name();
  const std::string& lane_calibration_working_sensor_name() const;
  void set_lane_calibration_working_sensor_name(const std::string& value);
  void set_lane_calibration_working_sensor_name(std::string&& value);
  void set_lane_calibration_working_sensor_name(const char* value);
  void set_lane_calibration_working_sensor_name(const char* value, size_t size);
  std::string* mutable_lane_calibration_working_sensor_name();
  std::string* release_lane_calibration_working_sensor_name();
  void set_allocated_lane_calibration_working_sensor_name(std::string* lane_calibration_working_sensor_name);
  private:
  const std::string& _internal_lane_calibration_working_sensor_name() const;
  void _internal_set_lane_calibration_working_sensor_name(const std::string& value);
  std::string* _internal_mutable_lane_calibration_working_sensor_name();
  public:

  // optional string calibrator_method = 14 [default = "LaneLineCalibrator"];
  bool has_calibrator_method() const;
  private:
  bool _internal_has_calibrator_method() const;
  public:
  void clear_calibrator_method();
  const std::string& calibrator_method() const;
  void set_calibrator_method(const std::string& value);
  void set_calibrator_method(std::string&& value);
  void set_calibrator_method(const char* value);
  void set_calibrator_method(const char* value, size_t size);
  std::string* mutable_calibrator_method();
  std::string* release_calibrator_method();
  void set_allocated_calibrator_method(std::string* calibrator_method);
  private:
  const std::string& _internal_calibrator_method() const;
  void _internal_set_calibrator_method(const std::string& value);
  std::string* _internal_mutable_calibrator_method();
  public:

  // optional string calib_service_name = 15 [default = "OnlineCalibrationService"];
  bool has_calib_service_name() const;
  private:
  bool _internal_has_calib_service_name() const;
  public:
  void clear_calib_service_name();
  const std::string& calib_service_name() const;
  void set_calib_service_name(const std::string& value);
  void set_calib_service_name(std::string&& value);
  void set_calib_service_name(const char* value);
  void set_calib_service_name(const char* value, size_t size);
  std::string* mutable_calib_service_name();
  std::string* release_calib_service_name();
  void set_allocated_calib_service_name(std::string* calib_service_name);
  private:
  const std::string& _internal_calib_service_name() const;
  void _internal_set_calib_service_name(const std::string& value);
  std::string* _internal_mutable_calib_service_name();
  public:

  // optional string visual_debug_folder = 18 [default = "/apollo/debug_output"];
  bool has_visual_debug_folder() const;
  private:
  bool _internal_has_visual_debug_folder() const;
  public:
  void clear_visual_debug_folder();
  const std::string& visual_debug_folder() const;
  void set_visual_debug_folder(const std::string& value);
  void set_visual_debug_folder(std::string&& value);
  void set_visual_debug_folder(const char* value);
  void set_visual_debug_folder(const char* value, size_t size);
  std::string* mutable_visual_debug_folder();
  std::string* release_visual_debug_folder();
  void set_allocated_visual_debug_folder(std::string* visual_debug_folder);
  private:
  const std::string& _internal_visual_debug_folder() const;
  void _internal_set_visual_debug_folder(const std::string& value);
  std::string* _internal_mutable_visual_debug_folder();
  public:

  // optional string visual_camera = 19 [default = "front_6mm"];
  bool has_visual_camera() const;
  private:
  bool _internal_has_visual_camera() const;
  public:
  void clear_visual_camera();
  const std::string& visual_camera() const;
  void set_visual_camera(const std::string& value);
  void set_visual_camera(std::string&& value);
  void set_visual_camera(const char* value);
  void set_visual_camera(const char* value, size_t size);
  std::string* mutable_visual_camera();
  std::string* release_visual_camera();
  void set_allocated_visual_camera(std::string* visual_camera);
  private:
  const std::string& _internal_visual_camera() const;
  void _internal_set_visual_camera(const std::string& value);
  std::string* _internal_mutable_visual_camera();
  public:

  // optional double timestamp_offset = 3 [default = 0];
  bool has_timestamp_offset() const;
  private:
  bool _internal_has_timestamp_offset() const;
  public:
  void clear_timestamp_offset();
  double timestamp_offset() const;
  void set_timestamp_offset(double value);
  private:
  double _internal_timestamp_offset() const;
  void _internal_set_timestamp_offset(double value);
  public:

  // optional double default_camera_pitch = 11 [default = 0];
  bool has_default_camera_pitch() const;
  private:
  bool _internal_has_default_camera_pitch() const;
  public:
  void clear_default_camera_pitch();
  double default_camera_pitch() const;
  void set_default_camera_pitch(double value);
  private:
  double _internal_default_camera_pitch() const;
  void _internal_set_default_camera_pitch(double value);
  public:

  // optional bool enable_undistortion = 8 [default = false];
  bool has_enable_undistortion() const;
  private:
  bool _internal_has_enable_undistortion() const;
  public:
  void clear_enable_undistortion();
  bool enable_undistortion() const;
  void set_enable_undistortion(bool value);
  private:
  bool _internal_enable_undistortion() const;
  void _internal_set_enable_undistortion(bool value);
  public:

  // optional bool enable_visualization = 9 [default = false];
  bool has_enable_visualization() const;
  private:
  bool _internal_has_enable_visualization() const;
  public:
  void clear_enable_visualization();
  bool enable_visualization() const;
  void set_enable_visualization(bool value);
  private:
  bool _internal_enable_visualization() const;
  void _internal_set_enable_visualization(bool value);
  public:

  // optional bool write_visual_img = 20 [default = false];
  bool has_write_visual_img() const;
  private:
  bool _internal_has_write_visual_img() const;
  public:
  void clear_write_visual_img();
  bool write_visual_img() const;
  void set_write_visual_img(bool value);
  private:
  bool _internal_write_visual_img() const;
  void _internal_set_write_visual_img(bool value);
  public:

  // optional bool run_calib_service = 16 [default = true];
  bool has_run_calib_service() const;
  private:
  bool _internal_has_run_calib_service() const;
  public:
  void clear_run_calib_service();
  bool run_calib_service() const;
  void set_run_calib_service(bool value);
  private:
  bool _internal_run_calib_service() const;
  void _internal_set_run_calib_service(bool value);
  public:

  // optional int32 frame_capacity = 6 [default = 20];
  bool has_frame_capacity() const;
  private:
  bool _internal_has_frame_capacity() const;
  public:
  void clear_frame_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_capacity() const;
  void set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_capacity() const;
  void _internal_set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 image_channel_num = 7 [default = 3];
  bool has_image_channel_num() const;
  private:
  bool _internal_has_image_channel_num() const;
  public:
  void clear_image_channel_num();
  ::PROTOBUF_NAMESPACE_ID::int32 image_channel_num() const;
  void set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_channel_num() const;
  void _internal_set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double default_camera_height = 12 [default = 1.5];
  bool has_default_camera_height() const;
  private:
  bool _internal_has_default_camera_height() const;
  public:
  void clear_default_camera_height();
  double default_camera_height() const;
  void set_default_camera_height(double value);
  private:
  double _internal_default_camera_height() const;
  void _internal_set_default_camera_height(double value);
  public:

  // optional double ts_diff = 17 [default = 0.1];
  bool has_ts_diff() const;
  private:
  bool _internal_has_ts_diff() const;
  public:
  void clear_ts_diff();
  double ts_diff() const;
  void set_ts_diff(double value);
  private:
  double _internal_ts_diff() const;
  void _internal_set_ts_diff(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.LaneDetection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_names_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_names_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_input_camera_channel_names_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_camera_channel_names_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_lane_perception_conf_dir_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_lane_perception_conf_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_output_lanes_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_lanes_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_calibration_working_sensor_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_calibrator_method_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibrator_method_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_calib_service_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_service_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_visual_debug_folder_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visual_debug_folder_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_visual_camera_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visual_camera_;
  double timestamp_offset_;
  double default_camera_pitch_;
  bool enable_undistortion_;
  bool enable_visualization_;
  bool write_visual_img_;
  bool run_calib_service_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_channel_num_;
  double default_camera_height_;
  double ts_diff_;
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneDetection

// optional string camera_names = 1 [default = "front_6mm,front_12mm"];
inline bool LaneDetection::_internal_has_camera_names() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneDetection::has_camera_names() const {
  return _internal_has_camera_names();
}
inline void LaneDetection::clear_camera_names() {
  camera_names_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaneDetection::camera_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.camera_names)
  return _internal_camera_names();
}
inline void LaneDetection::set_camera_names(const std::string& value) {
  _internal_set_camera_names(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.camera_names)
}
inline std::string* LaneDetection::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.camera_names)
  return _internal_mutable_camera_names();
}
inline const std::string& LaneDetection::_internal_camera_names() const {
  return camera_names_.GetNoArena();
}
inline void LaneDetection::_internal_set_camera_names(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), value);
}
inline void LaneDetection::set_camera_names(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.camera_names)
}
inline void LaneDetection::set_camera_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.camera_names)
}
inline void LaneDetection::set_camera_names(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.camera_names)
}
inline std::string* LaneDetection::_internal_mutable_camera_names() {
  _has_bits_[0] |= 0x00000001u;
  return camera_names_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get());
}
inline std::string* LaneDetection::release_camera_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.camera_names)
  if (!_internal_has_camera_names()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_names_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get());
}
inline void LaneDetection::set_allocated_camera_names(std::string* camera_names) {
  if (camera_names != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_names_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), camera_names);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.camera_names)
}

// optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image,/apollo/sensor/camera/front_12mm/image"];
inline bool LaneDetection::_internal_has_input_camera_channel_names() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneDetection::has_input_camera_channel_names() const {
  return _internal_has_input_camera_channel_names();
}
inline void LaneDetection::clear_input_camera_channel_names() {
  input_camera_channel_names_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LaneDetection::input_camera_channel_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
  return _internal_input_camera_channel_names();
}
inline void LaneDetection::set_input_camera_channel_names(const std::string& value) {
  _internal_set_input_camera_channel_names(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
}
inline std::string* LaneDetection::mutable_input_camera_channel_names() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
  return _internal_mutable_input_camera_channel_names();
}
inline const std::string& LaneDetection::_internal_input_camera_channel_names() const {
  return input_camera_channel_names_.GetNoArena();
}
inline void LaneDetection::_internal_set_input_camera_channel_names(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), value);
}
inline void LaneDetection::set_input_camera_channel_names(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
}
inline void LaneDetection::set_input_camera_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
}
inline void LaneDetection::set_input_camera_channel_names(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
}
inline std::string* LaneDetection::_internal_mutable_input_camera_channel_names() {
  _has_bits_[0] |= 0x00000002u;
  return input_camera_channel_names_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
}
inline std::string* LaneDetection::release_input_camera_channel_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
  if (!_internal_has_input_camera_channel_names()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return input_camera_channel_names_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
}
inline void LaneDetection::set_allocated_input_camera_channel_names(std::string* input_camera_channel_names) {
  if (input_camera_channel_names != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_camera_channel_names_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), input_camera_channel_names);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.input_camera_channel_names)
}

// optional double timestamp_offset = 3 [default = 0];
inline bool LaneDetection::_internal_has_timestamp_offset() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool LaneDetection::has_timestamp_offset() const {
  return _internal_has_timestamp_offset();
}
inline void LaneDetection::clear_timestamp_offset() {
  timestamp_offset_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double LaneDetection::_internal_timestamp_offset() const {
  return timestamp_offset_;
}
inline double LaneDetection::timestamp_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.timestamp_offset)
  return _internal_timestamp_offset();
}
inline void LaneDetection::_internal_set_timestamp_offset(double value) {
  _has_bits_[0] |= 0x00000400u;
  timestamp_offset_ = value;
}
inline void LaneDetection::set_timestamp_offset(double value) {
  _internal_set_timestamp_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.timestamp_offset)
}

// optional string camera_lane_perception_conf_dir = 4 [default = "conf/perception/camera"];
inline bool LaneDetection::_internal_has_camera_lane_perception_conf_dir() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneDetection::has_camera_lane_perception_conf_dir() const {
  return _internal_has_camera_lane_perception_conf_dir();
}
inline void LaneDetection::clear_camera_lane_perception_conf_dir() {
  camera_lane_perception_conf_dir_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LaneDetection::camera_lane_perception_conf_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
  return _internal_camera_lane_perception_conf_dir();
}
inline void LaneDetection::set_camera_lane_perception_conf_dir(const std::string& value) {
  _internal_set_camera_lane_perception_conf_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
}
inline std::string* LaneDetection::mutable_camera_lane_perception_conf_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
  return _internal_mutable_camera_lane_perception_conf_dir();
}
inline const std::string& LaneDetection::_internal_camera_lane_perception_conf_dir() const {
  return camera_lane_perception_conf_dir_.GetNoArena();
}
inline void LaneDetection::_internal_set_camera_lane_perception_conf_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  camera_lane_perception_conf_dir_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get(), value);
}
inline void LaneDetection::set_camera_lane_perception_conf_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  camera_lane_perception_conf_dir_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
}
inline void LaneDetection::set_camera_lane_perception_conf_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  camera_lane_perception_conf_dir_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
}
inline void LaneDetection::set_camera_lane_perception_conf_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  camera_lane_perception_conf_dir_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
}
inline std::string* LaneDetection::_internal_mutable_camera_lane_perception_conf_dir() {
  _has_bits_[0] |= 0x00000004u;
  return camera_lane_perception_conf_dir_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get());
}
inline std::string* LaneDetection::release_camera_lane_perception_conf_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
  if (!_internal_has_camera_lane_perception_conf_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return camera_lane_perception_conf_dir_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get());
}
inline void LaneDetection::set_allocated_camera_lane_perception_conf_dir(std::string* camera_lane_perception_conf_dir) {
  if (camera_lane_perception_conf_dir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  camera_lane_perception_conf_dir_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_dir_.get(), camera_lane_perception_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_dir)
}

// optional string camera_lane_perception_conf_file = 5 [default = "lane.pt"];
inline bool LaneDetection::_internal_has_camera_lane_perception_conf_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneDetection::has_camera_lane_perception_conf_file() const {
  return _internal_has_camera_lane_perception_conf_file();
}
inline void LaneDetection::clear_camera_lane_perception_conf_file() {
  camera_lane_perception_conf_file_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LaneDetection::camera_lane_perception_conf_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
  return _internal_camera_lane_perception_conf_file();
}
inline void LaneDetection::set_camera_lane_perception_conf_file(const std::string& value) {
  _internal_set_camera_lane_perception_conf_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
}
inline std::string* LaneDetection::mutable_camera_lane_perception_conf_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
  return _internal_mutable_camera_lane_perception_conf_file();
}
inline const std::string& LaneDetection::_internal_camera_lane_perception_conf_file() const {
  return camera_lane_perception_conf_file_.GetNoArena();
}
inline void LaneDetection::_internal_set_camera_lane_perception_conf_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  camera_lane_perception_conf_file_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get(), value);
}
inline void LaneDetection::set_camera_lane_perception_conf_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  camera_lane_perception_conf_file_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
}
inline void LaneDetection::set_camera_lane_perception_conf_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  camera_lane_perception_conf_file_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
}
inline void LaneDetection::set_camera_lane_perception_conf_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  camera_lane_perception_conf_file_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
}
inline std::string* LaneDetection::_internal_mutable_camera_lane_perception_conf_file() {
  _has_bits_[0] |= 0x00000008u;
  return camera_lane_perception_conf_file_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get());
}
inline std::string* LaneDetection::release_camera_lane_perception_conf_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
  if (!_internal_has_camera_lane_perception_conf_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return camera_lane_perception_conf_file_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get());
}
inline void LaneDetection::set_allocated_camera_lane_perception_conf_file(std::string* camera_lane_perception_conf_file) {
  if (camera_lane_perception_conf_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  camera_lane_perception_conf_file_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_camera_lane_perception_conf_file_.get(), camera_lane_perception_conf_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.camera_lane_perception_conf_file)
}

// optional int32 frame_capacity = 6 [default = 20];
inline bool LaneDetection::_internal_has_frame_capacity() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LaneDetection::has_frame_capacity() const {
  return _internal_has_frame_capacity();
}
inline void LaneDetection::clear_frame_capacity() {
  frame_capacity_ = 20;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneDetection::_internal_frame_capacity() const {
  return frame_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneDetection::frame_capacity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.frame_capacity)
  return _internal_frame_capacity();
}
inline void LaneDetection::_internal_set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  frame_capacity_ = value;
}
inline void LaneDetection::set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_capacity(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.frame_capacity)
}

// optional int32 image_channel_num = 7 [default = 3];
inline bool LaneDetection::_internal_has_image_channel_num() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LaneDetection::has_image_channel_num() const {
  return _internal_has_image_channel_num();
}
inline void LaneDetection::clear_image_channel_num() {
  image_channel_num_ = 3;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneDetection::_internal_image_channel_num() const {
  return image_channel_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaneDetection::image_channel_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.image_channel_num)
  return _internal_image_channel_num();
}
inline void LaneDetection::_internal_set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  image_channel_num_ = value;
}
inline void LaneDetection::set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_channel_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.image_channel_num)
}

// optional bool enable_undistortion = 8 [default = false];
inline bool LaneDetection::_internal_has_enable_undistortion() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LaneDetection::has_enable_undistortion() const {
  return _internal_has_enable_undistortion();
}
inline void LaneDetection::clear_enable_undistortion() {
  enable_undistortion_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool LaneDetection::_internal_enable_undistortion() const {
  return enable_undistortion_;
}
inline bool LaneDetection::enable_undistortion() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.enable_undistortion)
  return _internal_enable_undistortion();
}
inline void LaneDetection::_internal_set_enable_undistortion(bool value) {
  _has_bits_[0] |= 0x00001000u;
  enable_undistortion_ = value;
}
inline void LaneDetection::set_enable_undistortion(bool value) {
  _internal_set_enable_undistortion(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.enable_undistortion)
}

// optional bool enable_visualization = 9 [default = false];
inline bool LaneDetection::_internal_has_enable_visualization() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LaneDetection::has_enable_visualization() const {
  return _internal_has_enable_visualization();
}
inline void LaneDetection::clear_enable_visualization() {
  enable_visualization_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool LaneDetection::_internal_enable_visualization() const {
  return enable_visualization_;
}
inline bool LaneDetection::enable_visualization() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.enable_visualization)
  return _internal_enable_visualization();
}
inline void LaneDetection::_internal_set_enable_visualization(bool value) {
  _has_bits_[0] |= 0x00002000u;
  enable_visualization_ = value;
}
inline void LaneDetection::set_enable_visualization(bool value) {
  _internal_set_enable_visualization(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.enable_visualization)
}

// optional string output_lanes_channel_name = 10 [default = "/perception/lanes"];
inline bool LaneDetection::_internal_has_output_lanes_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneDetection::has_output_lanes_channel_name() const {
  return _internal_has_output_lanes_channel_name();
}
inline void LaneDetection::clear_output_lanes_channel_name() {
  output_lanes_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& LaneDetection::output_lanes_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
  return _internal_output_lanes_channel_name();
}
inline void LaneDetection::set_output_lanes_channel_name(const std::string& value) {
  _internal_set_output_lanes_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
}
inline std::string* LaneDetection::mutable_output_lanes_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
  return _internal_mutable_output_lanes_channel_name();
}
inline const std::string& LaneDetection::_internal_output_lanes_channel_name() const {
  return output_lanes_channel_name_.GetNoArena();
}
inline void LaneDetection::_internal_set_output_lanes_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  output_lanes_channel_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get(), value);
}
inline void LaneDetection::set_output_lanes_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  output_lanes_channel_name_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
}
inline void LaneDetection::set_output_lanes_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  output_lanes_channel_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
}
inline void LaneDetection::set_output_lanes_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  output_lanes_channel_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
}
inline std::string* LaneDetection::_internal_mutable_output_lanes_channel_name() {
  _has_bits_[0] |= 0x00000010u;
  return output_lanes_channel_name_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get());
}
inline std::string* LaneDetection::release_output_lanes_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
  if (!_internal_has_output_lanes_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return output_lanes_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get());
}
inline void LaneDetection::set_allocated_output_lanes_channel_name(std::string* output_lanes_channel_name) {
  if (output_lanes_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  output_lanes_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_output_lanes_channel_name_.get(), output_lanes_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.output_lanes_channel_name)
}

// optional double default_camera_pitch = 11 [default = 0];
inline bool LaneDetection::_internal_has_default_camera_pitch() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool LaneDetection::has_default_camera_pitch() const {
  return _internal_has_default_camera_pitch();
}
inline void LaneDetection::clear_default_camera_pitch() {
  default_camera_pitch_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double LaneDetection::_internal_default_camera_pitch() const {
  return default_camera_pitch_;
}
inline double LaneDetection::default_camera_pitch() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.default_camera_pitch)
  return _internal_default_camera_pitch();
}
inline void LaneDetection::_internal_set_default_camera_pitch(double value) {
  _has_bits_[0] |= 0x00000800u;
  default_camera_pitch_ = value;
}
inline void LaneDetection::set_default_camera_pitch(double value) {
  _internal_set_default_camera_pitch(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.default_camera_pitch)
}

// optional double default_camera_height = 12 [default = 1.5];
inline bool LaneDetection::_internal_has_default_camera_height() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LaneDetection::has_default_camera_height() const {
  return _internal_has_default_camera_height();
}
inline void LaneDetection::clear_default_camera_height() {
  default_camera_height_ = 1.5;
  _has_bits_[0] &= ~0x00040000u;
}
inline double LaneDetection::_internal_default_camera_height() const {
  return default_camera_height_;
}
inline double LaneDetection::default_camera_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.default_camera_height)
  return _internal_default_camera_height();
}
inline void LaneDetection::_internal_set_default_camera_height(double value) {
  _has_bits_[0] |= 0x00040000u;
  default_camera_height_ = value;
}
inline void LaneDetection::set_default_camera_height(double value) {
  _internal_set_default_camera_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.default_camera_height)
}

// optional string lane_calibration_working_sensor_name = 13 [default = "front_6mm"];
inline bool LaneDetection::_internal_has_lane_calibration_working_sensor_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaneDetection::has_lane_calibration_working_sensor_name() const {
  return _internal_has_lane_calibration_working_sensor_name();
}
inline void LaneDetection::clear_lane_calibration_working_sensor_name() {
  lane_calibration_working_sensor_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& LaneDetection::lane_calibration_working_sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
  return _internal_lane_calibration_working_sensor_name();
}
inline void LaneDetection::set_lane_calibration_working_sensor_name(const std::string& value) {
  _internal_set_lane_calibration_working_sensor_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
}
inline std::string* LaneDetection::mutable_lane_calibration_working_sensor_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
  return _internal_mutable_lane_calibration_working_sensor_name();
}
inline const std::string& LaneDetection::_internal_lane_calibration_working_sensor_name() const {
  return lane_calibration_working_sensor_name_.GetNoArena();
}
inline void LaneDetection::_internal_set_lane_calibration_working_sensor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  lane_calibration_working_sensor_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), value);
}
inline void LaneDetection::set_lane_calibration_working_sensor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  lane_calibration_working_sensor_name_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
}
inline void LaneDetection::set_lane_calibration_working_sensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  lane_calibration_working_sensor_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
}
inline void LaneDetection::set_lane_calibration_working_sensor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  lane_calibration_working_sensor_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
}
inline std::string* LaneDetection::_internal_mutable_lane_calibration_working_sensor_name() {
  _has_bits_[0] |= 0x00000020u;
  return lane_calibration_working_sensor_name_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get());
}
inline std::string* LaneDetection::release_lane_calibration_working_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
  if (!_internal_has_lane_calibration_working_sensor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return lane_calibration_working_sensor_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get());
}
inline void LaneDetection::set_allocated_lane_calibration_working_sensor_name(std::string* lane_calibration_working_sensor_name) {
  if (lane_calibration_working_sensor_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lane_calibration_working_sensor_name_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), lane_calibration_working_sensor_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.lane_calibration_working_sensor_name)
}

// optional string calibrator_method = 14 [default = "LaneLineCalibrator"];
inline bool LaneDetection::_internal_has_calibrator_method() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LaneDetection::has_calibrator_method() const {
  return _internal_has_calibrator_method();
}
inline void LaneDetection::clear_calibrator_method() {
  calibrator_method_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& LaneDetection::calibrator_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.calibrator_method)
  return _internal_calibrator_method();
}
inline void LaneDetection::set_calibrator_method(const std::string& value) {
  _internal_set_calibrator_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.calibrator_method)
}
inline std::string* LaneDetection::mutable_calibrator_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.calibrator_method)
  return _internal_mutable_calibrator_method();
}
inline const std::string& LaneDetection::_internal_calibrator_method() const {
  return calibrator_method_.GetNoArena();
}
inline void LaneDetection::_internal_set_calibrator_method(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  calibrator_method_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), value);
}
inline void LaneDetection::set_calibrator_method(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  calibrator_method_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.calibrator_method)
}
inline void LaneDetection::set_calibrator_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  calibrator_method_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.calibrator_method)
}
inline void LaneDetection::set_calibrator_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  calibrator_method_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.calibrator_method)
}
inline std::string* LaneDetection::_internal_mutable_calibrator_method() {
  _has_bits_[0] |= 0x00000040u;
  return calibrator_method_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get());
}
inline std::string* LaneDetection::release_calibrator_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.calibrator_method)
  if (!_internal_has_calibrator_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return calibrator_method_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get());
}
inline void LaneDetection::set_allocated_calibrator_method(std::string* calibrator_method) {
  if (calibrator_method != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  calibrator_method_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), calibrator_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.calibrator_method)
}

// optional string calib_service_name = 15 [default = "OnlineCalibrationService"];
inline bool LaneDetection::_internal_has_calib_service_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LaneDetection::has_calib_service_name() const {
  return _internal_has_calib_service_name();
}
inline void LaneDetection::clear_calib_service_name() {
  calib_service_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& LaneDetection::calib_service_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.calib_service_name)
  return _internal_calib_service_name();
}
inline void LaneDetection::set_calib_service_name(const std::string& value) {
  _internal_set_calib_service_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.calib_service_name)
}
inline std::string* LaneDetection::mutable_calib_service_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.calib_service_name)
  return _internal_mutable_calib_service_name();
}
inline const std::string& LaneDetection::_internal_calib_service_name() const {
  return calib_service_name_.GetNoArena();
}
inline void LaneDetection::_internal_set_calib_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  calib_service_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), value);
}
inline void LaneDetection::set_calib_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  calib_service_name_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.calib_service_name)
}
inline void LaneDetection::set_calib_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  calib_service_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.calib_service_name)
}
inline void LaneDetection::set_calib_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  calib_service_name_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.calib_service_name)
}
inline std::string* LaneDetection::_internal_mutable_calib_service_name() {
  _has_bits_[0] |= 0x00000080u;
  return calib_service_name_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get());
}
inline std::string* LaneDetection::release_calib_service_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.calib_service_name)
  if (!_internal_has_calib_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return calib_service_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get());
}
inline void LaneDetection::set_allocated_calib_service_name(std::string* calib_service_name) {
  if (calib_service_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  calib_service_name_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), calib_service_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.calib_service_name)
}

// optional bool run_calib_service = 16 [default = true];
inline bool LaneDetection::_internal_has_run_calib_service() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LaneDetection::has_run_calib_service() const {
  return _internal_has_run_calib_service();
}
inline void LaneDetection::clear_run_calib_service() {
  run_calib_service_ = true;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool LaneDetection::_internal_run_calib_service() const {
  return run_calib_service_;
}
inline bool LaneDetection::run_calib_service() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.run_calib_service)
  return _internal_run_calib_service();
}
inline void LaneDetection::_internal_set_run_calib_service(bool value) {
  _has_bits_[0] |= 0x00008000u;
  run_calib_service_ = value;
}
inline void LaneDetection::set_run_calib_service(bool value) {
  _internal_set_run_calib_service(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.run_calib_service)
}

// optional double ts_diff = 17 [default = 0.1];
inline bool LaneDetection::_internal_has_ts_diff() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LaneDetection::has_ts_diff() const {
  return _internal_has_ts_diff();
}
inline void LaneDetection::clear_ts_diff() {
  ts_diff_ = 0.1;
  _has_bits_[0] &= ~0x00080000u;
}
inline double LaneDetection::_internal_ts_diff() const {
  return ts_diff_;
}
inline double LaneDetection::ts_diff() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.ts_diff)
  return _internal_ts_diff();
}
inline void LaneDetection::_internal_set_ts_diff(double value) {
  _has_bits_[0] |= 0x00080000u;
  ts_diff_ = value;
}
inline void LaneDetection::set_ts_diff(double value) {
  _internal_set_ts_diff(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.ts_diff)
}

// optional string visual_debug_folder = 18 [default = "/apollo/debug_output"];
inline bool LaneDetection::_internal_has_visual_debug_folder() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LaneDetection::has_visual_debug_folder() const {
  return _internal_has_visual_debug_folder();
}
inline void LaneDetection::clear_visual_debug_folder() {
  visual_debug_folder_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& LaneDetection::visual_debug_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.visual_debug_folder)
  return _internal_visual_debug_folder();
}
inline void LaneDetection::set_visual_debug_folder(const std::string& value) {
  _internal_set_visual_debug_folder(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.visual_debug_folder)
}
inline std::string* LaneDetection::mutable_visual_debug_folder() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.visual_debug_folder)
  return _internal_mutable_visual_debug_folder();
}
inline const std::string& LaneDetection::_internal_visual_debug_folder() const {
  return visual_debug_folder_.GetNoArena();
}
inline void LaneDetection::_internal_set_visual_debug_folder(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  visual_debug_folder_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), value);
}
inline void LaneDetection::set_visual_debug_folder(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  visual_debug_folder_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.visual_debug_folder)
}
inline void LaneDetection::set_visual_debug_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  visual_debug_folder_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.visual_debug_folder)
}
inline void LaneDetection::set_visual_debug_folder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  visual_debug_folder_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.visual_debug_folder)
}
inline std::string* LaneDetection::_internal_mutable_visual_debug_folder() {
  _has_bits_[0] |= 0x00000100u;
  return visual_debug_folder_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get());
}
inline std::string* LaneDetection::release_visual_debug_folder() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.visual_debug_folder)
  if (!_internal_has_visual_debug_folder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return visual_debug_folder_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get());
}
inline void LaneDetection::set_allocated_visual_debug_folder(std::string* visual_debug_folder) {
  if (visual_debug_folder != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  visual_debug_folder_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), visual_debug_folder);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.visual_debug_folder)
}

// optional string visual_camera = 19 [default = "front_6mm"];
inline bool LaneDetection::_internal_has_visual_camera() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LaneDetection::has_visual_camera() const {
  return _internal_has_visual_camera();
}
inline void LaneDetection::clear_visual_camera() {
  visual_camera_.ClearToDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& LaneDetection::visual_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.visual_camera)
  return _internal_visual_camera();
}
inline void LaneDetection::set_visual_camera(const std::string& value) {
  _internal_set_visual_camera(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.visual_camera)
}
inline std::string* LaneDetection::mutable_visual_camera() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LaneDetection.visual_camera)
  return _internal_mutable_visual_camera();
}
inline const std::string& LaneDetection::_internal_visual_camera() const {
  return visual_camera_.GetNoArena();
}
inline void LaneDetection::_internal_set_visual_camera(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  visual_camera_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), value);
}
inline void LaneDetection::set_visual_camera(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  visual_camera_.SetNoArena(
    &::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LaneDetection.visual_camera)
}
inline void LaneDetection::set_visual_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  visual_camera_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LaneDetection.visual_camera)
}
inline void LaneDetection::set_visual_camera(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  visual_camera_.SetNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LaneDetection.visual_camera)
}
inline std::string* LaneDetection::_internal_mutable_visual_camera() {
  _has_bits_[0] |= 0x00000200u;
  return visual_camera_.MutableNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get());
}
inline std::string* LaneDetection::release_visual_camera() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LaneDetection.visual_camera)
  if (!_internal_has_visual_camera()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return visual_camera_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get());
}
inline void LaneDetection::set_allocated_visual_camera(std::string* visual_camera) {
  if (visual_camera != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  visual_camera_.SetAllocatedNoArena(&::apollo::perception::onboard::LaneDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), visual_camera);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LaneDetection.visual_camera)
}

// optional bool write_visual_img = 20 [default = false];
inline bool LaneDetection::_internal_has_write_visual_img() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LaneDetection::has_write_visual_img() const {
  return _internal_has_write_visual_img();
}
inline void LaneDetection::clear_write_visual_img() {
  write_visual_img_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool LaneDetection::_internal_write_visual_img() const {
  return write_visual_img_;
}
inline bool LaneDetection::write_visual_img() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LaneDetection.write_visual_img)
  return _internal_write_visual_img();
}
inline void LaneDetection::_internal_set_write_visual_img(bool value) {
  _has_bits_[0] |= 0x00004000u;
  write_visual_img_ = value;
}
inline void LaneDetection::set_write_visual_img(bool value) {
  _internal_set_write_visual_img(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LaneDetection.write_visual_img)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flane_5fperception_5fcomponent_2eproto
