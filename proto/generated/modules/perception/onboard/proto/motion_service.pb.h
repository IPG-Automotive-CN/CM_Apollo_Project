// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/motion_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class MotionService;
class MotionServiceDefaultTypeInternal;
extern MotionServiceDefaultTypeInternal _MotionService_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::MotionService* Arena::CreateMaybeMessage<::apollo::perception::onboard::MotionService>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class MotionService :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.MotionService) */ {
 public:
  MotionService();
  virtual ~MotionService();

  MotionService(const MotionService& from);
  MotionService(MotionService&& from) noexcept
    : MotionService() {
    *this = ::std::move(from);
  }

  inline MotionService& operator=(const MotionService& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionService& operator=(MotionService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionService* internal_default_instance() {
    return reinterpret_cast<const MotionService*>(
               &_MotionService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MotionService& a, MotionService& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionService* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionService* New() const final {
    return CreateMaybeMessage<MotionService>(nullptr);
  }

  MotionService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionService& from);
  void MergeFrom(const MotionService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.MotionService";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto);
    return ::descriptor_table_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNamesFieldNumber = 1,
    kInputCameraChannelNamesFieldNumber = 2,
    kInputLocalizationChannelNameFieldNumber = 3,
    kOutputTopicChannelNameFieldNumber = 4,
  };
  // optional string camera_names = 1 [default = "front_6mm"];
  bool has_camera_names() const;
  private:
  bool _internal_has_camera_names() const;
  public:
  void clear_camera_names();
  const std::string& camera_names() const;
  void set_camera_names(const std::string& value);
  void set_camera_names(std::string&& value);
  void set_camera_names(const char* value);
  void set_camera_names(const char* value, size_t size);
  std::string* mutable_camera_names();
  std::string* release_camera_names();
  void set_allocated_camera_names(std::string* camera_names);
  private:
  const std::string& _internal_camera_names() const;
  void _internal_set_camera_names(const std::string& value);
  std::string* _internal_mutable_camera_names();
  public:

  // optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image"];
  bool has_input_camera_channel_names() const;
  private:
  bool _internal_has_input_camera_channel_names() const;
  public:
  void clear_input_camera_channel_names();
  const std::string& input_camera_channel_names() const;
  void set_input_camera_channel_names(const std::string& value);
  void set_input_camera_channel_names(std::string&& value);
  void set_input_camera_channel_names(const char* value);
  void set_input_camera_channel_names(const char* value, size_t size);
  std::string* mutable_input_camera_channel_names();
  std::string* release_input_camera_channel_names();
  void set_allocated_input_camera_channel_names(std::string* input_camera_channel_names);
  private:
  const std::string& _internal_input_camera_channel_names() const;
  void _internal_set_input_camera_channel_names(const std::string& value);
  std::string* _internal_mutable_input_camera_channel_names();
  public:

  // optional string input_localization_channel_name = 3 [default = "/apollo/localization/pose"];
  bool has_input_localization_channel_name() const;
  private:
  bool _internal_has_input_localization_channel_name() const;
  public:
  void clear_input_localization_channel_name();
  const std::string& input_localization_channel_name() const;
  void set_input_localization_channel_name(const std::string& value);
  void set_input_localization_channel_name(std::string&& value);
  void set_input_localization_channel_name(const char* value);
  void set_input_localization_channel_name(const char* value, size_t size);
  std::string* mutable_input_localization_channel_name();
  std::string* release_input_localization_channel_name();
  void set_allocated_input_localization_channel_name(std::string* input_localization_channel_name);
  private:
  const std::string& _internal_input_localization_channel_name() const;
  void _internal_set_input_localization_channel_name(const std::string& value);
  std::string* _internal_mutable_input_localization_channel_name();
  public:

  // optional string output_topic_channel_name = 4 [default = "/apollo/perception/motion_service"];
  bool has_output_topic_channel_name() const;
  private:
  bool _internal_has_output_topic_channel_name() const;
  public:
  void clear_output_topic_channel_name();
  const std::string& output_topic_channel_name() const;
  void set_output_topic_channel_name(const std::string& value);
  void set_output_topic_channel_name(std::string&& value);
  void set_output_topic_channel_name(const char* value);
  void set_output_topic_channel_name(const char* value, size_t size);
  std::string* mutable_output_topic_channel_name();
  std::string* release_output_topic_channel_name();
  void set_allocated_output_topic_channel_name(std::string* output_topic_channel_name);
  private:
  const std::string& _internal_output_topic_channel_name() const;
  void _internal_set_output_topic_channel_name(const std::string& value);
  std::string* _internal_mutable_output_topic_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.MotionService)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_names_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_names_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_input_camera_channel_names_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_camera_channel_names_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_input_localization_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_localization_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_output_topic_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_topic_channel_name_;
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionService

// optional string camera_names = 1 [default = "front_6mm"];
inline bool MotionService::_internal_has_camera_names() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MotionService::has_camera_names() const {
  return _internal_has_camera_names();
}
inline void MotionService::clear_camera_names() {
  camera_names_.ClearToDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MotionService::camera_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.MotionService.camera_names)
  return _internal_camera_names();
}
inline void MotionService::set_camera_names(const std::string& value) {
  _internal_set_camera_names(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.MotionService.camera_names)
}
inline std::string* MotionService::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.MotionService.camera_names)
  return _internal_mutable_camera_names();
}
inline const std::string& MotionService::_internal_camera_names() const {
  return camera_names_.GetNoArena();
}
inline void MotionService::_internal_set_camera_names(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get(), value);
}
inline void MotionService::set_camera_names(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(
    &::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.MotionService.camera_names)
}
inline void MotionService::set_camera_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.MotionService.camera_names)
}
inline void MotionService::set_camera_names(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.MotionService.camera_names)
}
inline std::string* MotionService::_internal_mutable_camera_names() {
  _has_bits_[0] |= 0x00000001u;
  return camera_names_.MutableNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get());
}
inline std::string* MotionService::release_camera_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.MotionService.camera_names)
  if (!_internal_has_camera_names()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_names_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get());
}
inline void MotionService::set_allocated_camera_names(std::string* camera_names) {
  if (camera_names != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_names_.SetAllocatedNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_camera_names_.get(), camera_names);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.MotionService.camera_names)
}

// optional string input_camera_channel_names = 2 [default = "/apollo/sensor/camera/front_6mm/image"];
inline bool MotionService::_internal_has_input_camera_channel_names() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MotionService::has_input_camera_channel_names() const {
  return _internal_has_input_camera_channel_names();
}
inline void MotionService::clear_input_camera_channel_names() {
  input_camera_channel_names_.ClearToDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MotionService::input_camera_channel_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.MotionService.input_camera_channel_names)
  return _internal_input_camera_channel_names();
}
inline void MotionService::set_input_camera_channel_names(const std::string& value) {
  _internal_set_input_camera_channel_names(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.MotionService.input_camera_channel_names)
}
inline std::string* MotionService::mutable_input_camera_channel_names() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.MotionService.input_camera_channel_names)
  return _internal_mutable_input_camera_channel_names();
}
inline const std::string& MotionService::_internal_input_camera_channel_names() const {
  return input_camera_channel_names_.GetNoArena();
}
inline void MotionService::_internal_set_input_camera_channel_names(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), value);
}
inline void MotionService::set_input_camera_channel_names(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(
    &::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.MotionService.input_camera_channel_names)
}
inline void MotionService::set_input_camera_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.MotionService.input_camera_channel_names)
}
inline void MotionService::set_input_camera_channel_names(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.MotionService.input_camera_channel_names)
}
inline std::string* MotionService::_internal_mutable_input_camera_channel_names() {
  _has_bits_[0] |= 0x00000002u;
  return input_camera_channel_names_.MutableNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
}
inline std::string* MotionService::release_input_camera_channel_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.MotionService.input_camera_channel_names)
  if (!_internal_has_input_camera_channel_names()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return input_camera_channel_names_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
}
inline void MotionService::set_allocated_input_camera_channel_names(std::string* input_camera_channel_names) {
  if (input_camera_channel_names != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_camera_channel_names_.SetAllocatedNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), input_camera_channel_names);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.MotionService.input_camera_channel_names)
}

// optional string input_localization_channel_name = 3 [default = "/apollo/localization/pose"];
inline bool MotionService::_internal_has_input_localization_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MotionService::has_input_localization_channel_name() const {
  return _internal_has_input_localization_channel_name();
}
inline void MotionService::clear_input_localization_channel_name() {
  input_localization_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MotionService::input_localization_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.MotionService.input_localization_channel_name)
  return _internal_input_localization_channel_name();
}
inline void MotionService::set_input_localization_channel_name(const std::string& value) {
  _internal_set_input_localization_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.MotionService.input_localization_channel_name)
}
inline std::string* MotionService::mutable_input_localization_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.MotionService.input_localization_channel_name)
  return _internal_mutable_input_localization_channel_name();
}
inline const std::string& MotionService::_internal_input_localization_channel_name() const {
  return input_localization_channel_name_.GetNoArena();
}
inline void MotionService::_internal_set_input_localization_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  input_localization_channel_name_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get(), value);
}
inline void MotionService::set_input_localization_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  input_localization_channel_name_.SetNoArena(
    &::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.MotionService.input_localization_channel_name)
}
inline void MotionService::set_input_localization_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  input_localization_channel_name_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.MotionService.input_localization_channel_name)
}
inline void MotionService::set_input_localization_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  input_localization_channel_name_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.MotionService.input_localization_channel_name)
}
inline std::string* MotionService::_internal_mutable_input_localization_channel_name() {
  _has_bits_[0] |= 0x00000004u;
  return input_localization_channel_name_.MutableNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get());
}
inline std::string* MotionService::release_input_localization_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.MotionService.input_localization_channel_name)
  if (!_internal_has_input_localization_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return input_localization_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get());
}
inline void MotionService::set_allocated_input_localization_channel_name(std::string* input_localization_channel_name) {
  if (input_localization_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_localization_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_input_localization_channel_name_.get(), input_localization_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.MotionService.input_localization_channel_name)
}

// optional string output_topic_channel_name = 4 [default = "/apollo/perception/motion_service"];
inline bool MotionService::_internal_has_output_topic_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MotionService::has_output_topic_channel_name() const {
  return _internal_has_output_topic_channel_name();
}
inline void MotionService::clear_output_topic_channel_name() {
  output_topic_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MotionService::output_topic_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.MotionService.output_topic_channel_name)
  return _internal_output_topic_channel_name();
}
inline void MotionService::set_output_topic_channel_name(const std::string& value) {
  _internal_set_output_topic_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.MotionService.output_topic_channel_name)
}
inline std::string* MotionService::mutable_output_topic_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.MotionService.output_topic_channel_name)
  return _internal_mutable_output_topic_channel_name();
}
inline const std::string& MotionService::_internal_output_topic_channel_name() const {
  return output_topic_channel_name_.GetNoArena();
}
inline void MotionService::_internal_set_output_topic_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  output_topic_channel_name_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get(), value);
}
inline void MotionService::set_output_topic_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  output_topic_channel_name_.SetNoArena(
    &::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.MotionService.output_topic_channel_name)
}
inline void MotionService::set_output_topic_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  output_topic_channel_name_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.MotionService.output_topic_channel_name)
}
inline void MotionService::set_output_topic_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  output_topic_channel_name_.SetNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.MotionService.output_topic_channel_name)
}
inline std::string* MotionService::_internal_mutable_output_topic_channel_name() {
  _has_bits_[0] |= 0x00000008u;
  return output_topic_channel_name_.MutableNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get());
}
inline std::string* MotionService::release_output_topic_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.MotionService.output_topic_channel_name)
  if (!_internal_has_output_topic_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return output_topic_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get());
}
inline void MotionService::set_allocated_output_topic_channel_name(std::string* output_topic_channel_name) {
  if (output_topic_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  output_topic_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::MotionService::_i_give_permission_to_break_this_code_default_output_topic_channel_name_.get(), output_topic_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.MotionService.output_topic_channel_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2fmotion_5fservice_2eproto
