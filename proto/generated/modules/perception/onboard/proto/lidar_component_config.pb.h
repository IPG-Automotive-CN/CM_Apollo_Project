// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/lidar_component_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class LidarRecognitionComponentConfig;
class LidarRecognitionComponentConfigDefaultTypeInternal;
extern LidarRecognitionComponentConfigDefaultTypeInternal _LidarRecognitionComponentConfig_default_instance_;
class LidarSegmentationComponentConfig;
class LidarSegmentationComponentConfigDefaultTypeInternal;
extern LidarSegmentationComponentConfigDefaultTypeInternal _LidarSegmentationComponentConfig_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::LidarRecognitionComponentConfig* Arena::CreateMaybeMessage<::apollo::perception::onboard::LidarRecognitionComponentConfig>(Arena*);
template<> ::apollo::perception::onboard::LidarSegmentationComponentConfig* Arena::CreateMaybeMessage<::apollo::perception::onboard::LidarSegmentationComponentConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class LidarSegmentationComponentConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.LidarSegmentationComponentConfig) */ {
 public:
  LidarSegmentationComponentConfig();
  virtual ~LidarSegmentationComponentConfig();

  LidarSegmentationComponentConfig(const LidarSegmentationComponentConfig& from);
  LidarSegmentationComponentConfig(LidarSegmentationComponentConfig&& from) noexcept
    : LidarSegmentationComponentConfig() {
    *this = ::std::move(from);
  }

  inline LidarSegmentationComponentConfig& operator=(const LidarSegmentationComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarSegmentationComponentConfig& operator=(LidarSegmentationComponentConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarSegmentationComponentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarSegmentationComponentConfig* internal_default_instance() {
    return reinterpret_cast<const LidarSegmentationComponentConfig*>(
               &_LidarSegmentationComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LidarSegmentationComponentConfig& a, LidarSegmentationComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarSegmentationComponentConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarSegmentationComponentConfig* New() const final {
    return CreateMaybeMessage<LidarSegmentationComponentConfig>(nullptr);
  }

  LidarSegmentationComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarSegmentationComponentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarSegmentationComponentConfig& from);
  void MergeFrom(const LidarSegmentationComponentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarSegmentationComponentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.LidarSegmentationComponentConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNameFieldNumber = 1,
    kLidar2NovatelTf2ChildFrameIdFieldNumber = 4,
    kOutputChannelNameFieldNumber = 5,
    kLidarQueryTfOffsetFieldNumber = 3,
    kEnableHdmapFieldNumber = 2,
  };
  // optional string sensor_name = 1;
  bool has_sensor_name() const;
  private:
  bool _internal_has_sensor_name() const;
  public:
  void clear_sensor_name();
  const std::string& sensor_name() const;
  void set_sensor_name(const std::string& value);
  void set_sensor_name(std::string&& value);
  void set_sensor_name(const char* value);
  void set_sensor_name(const char* value, size_t size);
  std::string* mutable_sensor_name();
  std::string* release_sensor_name();
  void set_allocated_sensor_name(std::string* sensor_name);
  private:
  const std::string& _internal_sensor_name() const;
  void _internal_set_sensor_name(const std::string& value);
  std::string* _internal_mutable_sensor_name();
  public:

  // optional string lidar2novatel_tf2_child_frame_id = 4;
  bool has_lidar2novatel_tf2_child_frame_id() const;
  private:
  bool _internal_has_lidar2novatel_tf2_child_frame_id() const;
  public:
  void clear_lidar2novatel_tf2_child_frame_id();
  const std::string& lidar2novatel_tf2_child_frame_id() const;
  void set_lidar2novatel_tf2_child_frame_id(const std::string& value);
  void set_lidar2novatel_tf2_child_frame_id(std::string&& value);
  void set_lidar2novatel_tf2_child_frame_id(const char* value);
  void set_lidar2novatel_tf2_child_frame_id(const char* value, size_t size);
  std::string* mutable_lidar2novatel_tf2_child_frame_id();
  std::string* release_lidar2novatel_tf2_child_frame_id();
  void set_allocated_lidar2novatel_tf2_child_frame_id(std::string* lidar2novatel_tf2_child_frame_id);
  private:
  const std::string& _internal_lidar2novatel_tf2_child_frame_id() const;
  void _internal_set_lidar2novatel_tf2_child_frame_id(const std::string& value);
  std::string* _internal_mutable_lidar2novatel_tf2_child_frame_id();
  public:

  // optional string output_channel_name = 5;
  bool has_output_channel_name() const;
  private:
  bool _internal_has_output_channel_name() const;
  public:
  void clear_output_channel_name();
  const std::string& output_channel_name() const;
  void set_output_channel_name(const std::string& value);
  void set_output_channel_name(std::string&& value);
  void set_output_channel_name(const char* value);
  void set_output_channel_name(const char* value, size_t size);
  std::string* mutable_output_channel_name();
  std::string* release_output_channel_name();
  void set_allocated_output_channel_name(std::string* output_channel_name);
  private:
  const std::string& _internal_output_channel_name() const;
  void _internal_set_output_channel_name(const std::string& value);
  std::string* _internal_mutable_output_channel_name();
  public:

  // optional double lidar_query_tf_offset = 3;
  bool has_lidar_query_tf_offset() const;
  private:
  bool _internal_has_lidar_query_tf_offset() const;
  public:
  void clear_lidar_query_tf_offset();
  double lidar_query_tf_offset() const;
  void set_lidar_query_tf_offset(double value);
  private:
  double _internal_lidar_query_tf_offset() const;
  void _internal_set_lidar_query_tf_offset(double value);
  public:

  // optional bool enable_hdmap = 2;
  bool has_enable_hdmap() const;
  private:
  bool _internal_has_enable_hdmap() const;
  public:
  void clear_enable_hdmap();
  bool enable_hdmap() const;
  void set_enable_hdmap(bool value);
  private:
  bool _internal_enable_hdmap() const;
  void _internal_set_enable_hdmap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.LidarSegmentationComponentConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lidar2novatel_tf2_child_frame_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_name_;
  double lidar_query_tf_offset_;
  bool enable_hdmap_;
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LidarRecognitionComponentConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.LidarRecognitionComponentConfig) */ {
 public:
  LidarRecognitionComponentConfig();
  virtual ~LidarRecognitionComponentConfig();

  LidarRecognitionComponentConfig(const LidarRecognitionComponentConfig& from);
  LidarRecognitionComponentConfig(LidarRecognitionComponentConfig&& from) noexcept
    : LidarRecognitionComponentConfig() {
    *this = ::std::move(from);
  }

  inline LidarRecognitionComponentConfig& operator=(const LidarRecognitionComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarRecognitionComponentConfig& operator=(LidarRecognitionComponentConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarRecognitionComponentConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarRecognitionComponentConfig* internal_default_instance() {
    return reinterpret_cast<const LidarRecognitionComponentConfig*>(
               &_LidarRecognitionComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LidarRecognitionComponentConfig& a, LidarRecognitionComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarRecognitionComponentConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarRecognitionComponentConfig* New() const final {
    return CreateMaybeMessage<LidarRecognitionComponentConfig>(nullptr);
  }

  LidarRecognitionComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarRecognitionComponentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarRecognitionComponentConfig& from);
  void MergeFrom(const LidarRecognitionComponentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarRecognitionComponentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.LidarRecognitionComponentConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainSensorNameFieldNumber = 1,
    kOutputChannelNameFieldNumber = 2,
  };
  // optional string main_sensor_name = 1;
  bool has_main_sensor_name() const;
  private:
  bool _internal_has_main_sensor_name() const;
  public:
  void clear_main_sensor_name();
  const std::string& main_sensor_name() const;
  void set_main_sensor_name(const std::string& value);
  void set_main_sensor_name(std::string&& value);
  void set_main_sensor_name(const char* value);
  void set_main_sensor_name(const char* value, size_t size);
  std::string* mutable_main_sensor_name();
  std::string* release_main_sensor_name();
  void set_allocated_main_sensor_name(std::string* main_sensor_name);
  private:
  const std::string& _internal_main_sensor_name() const;
  void _internal_set_main_sensor_name(const std::string& value);
  std::string* _internal_mutable_main_sensor_name();
  public:

  // optional string output_channel_name = 2;
  bool has_output_channel_name() const;
  private:
  bool _internal_has_output_channel_name() const;
  public:
  void clear_output_channel_name();
  const std::string& output_channel_name() const;
  void set_output_channel_name(const std::string& value);
  void set_output_channel_name(std::string&& value);
  void set_output_channel_name(const char* value);
  void set_output_channel_name(const char* value, size_t size);
  std::string* mutable_output_channel_name();
  std::string* release_output_channel_name();
  void set_allocated_output_channel_name(std::string* output_channel_name);
  private:
  const std::string& _internal_output_channel_name() const;
  void _internal_set_output_channel_name(const std::string& value);
  std::string* _internal_mutable_output_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.LidarRecognitionComponentConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_sensor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_name_;
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarSegmentationComponentConfig

// optional string sensor_name = 1;
inline bool LidarSegmentationComponentConfig::_internal_has_sensor_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarSegmentationComponentConfig::has_sensor_name() const {
  return _internal_has_sensor_name();
}
inline void LidarSegmentationComponentConfig::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarSegmentationComponentConfig::sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
  return _internal_sensor_name();
}
inline void LidarSegmentationComponentConfig::set_sensor_name(const std::string& value) {
  _internal_set_sensor_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
}
inline std::string* LidarSegmentationComponentConfig::mutable_sensor_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
  return _internal_mutable_sensor_name();
}
inline const std::string& LidarSegmentationComponentConfig::_internal_sensor_name() const {
  return sensor_name_.GetNoArena();
}
inline void LidarSegmentationComponentConfig::_internal_set_sensor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LidarSegmentationComponentConfig::set_sensor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
}
inline void LidarSegmentationComponentConfig::set_sensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
}
inline void LidarSegmentationComponentConfig::set_sensor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
}
inline std::string* LidarSegmentationComponentConfig::_internal_mutable_sensor_name() {
  _has_bits_[0] |= 0x00000001u;
  return sensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarSegmentationComponentConfig::release_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
  if (!_internal_has_sensor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sensor_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarSegmentationComponentConfig::set_allocated_sensor_name(std::string* sensor_name) {
  if (sensor_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name)
}

// optional bool enable_hdmap = 2;
inline bool LidarSegmentationComponentConfig::_internal_has_enable_hdmap() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LidarSegmentationComponentConfig::has_enable_hdmap() const {
  return _internal_has_enable_hdmap();
}
inline void LidarSegmentationComponentConfig::clear_enable_hdmap() {
  enable_hdmap_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool LidarSegmentationComponentConfig::_internal_enable_hdmap() const {
  return enable_hdmap_;
}
inline bool LidarSegmentationComponentConfig::enable_hdmap() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarSegmentationComponentConfig.enable_hdmap)
  return _internal_enable_hdmap();
}
inline void LidarSegmentationComponentConfig::_internal_set_enable_hdmap(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_hdmap_ = value;
}
inline void LidarSegmentationComponentConfig::set_enable_hdmap(bool value) {
  _internal_set_enable_hdmap(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarSegmentationComponentConfig.enable_hdmap)
}

// optional double lidar_query_tf_offset = 3;
inline bool LidarSegmentationComponentConfig::_internal_has_lidar_query_tf_offset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LidarSegmentationComponentConfig::has_lidar_query_tf_offset() const {
  return _internal_has_lidar_query_tf_offset();
}
inline void LidarSegmentationComponentConfig::clear_lidar_query_tf_offset() {
  lidar_query_tf_offset_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LidarSegmentationComponentConfig::_internal_lidar_query_tf_offset() const {
  return lidar_query_tf_offset_;
}
inline double LidarSegmentationComponentConfig::lidar_query_tf_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar_query_tf_offset)
  return _internal_lidar_query_tf_offset();
}
inline void LidarSegmentationComponentConfig::_internal_set_lidar_query_tf_offset(double value) {
  _has_bits_[0] |= 0x00000008u;
  lidar_query_tf_offset_ = value;
}
inline void LidarSegmentationComponentConfig::set_lidar_query_tf_offset(double value) {
  _internal_set_lidar_query_tf_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar_query_tf_offset)
}

// optional string lidar2novatel_tf2_child_frame_id = 4;
inline bool LidarSegmentationComponentConfig::_internal_has_lidar2novatel_tf2_child_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarSegmentationComponentConfig::has_lidar2novatel_tf2_child_frame_id() const {
  return _internal_has_lidar2novatel_tf2_child_frame_id();
}
inline void LidarSegmentationComponentConfig::clear_lidar2novatel_tf2_child_frame_id() {
  lidar2novatel_tf2_child_frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LidarSegmentationComponentConfig::lidar2novatel_tf2_child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
  return _internal_lidar2novatel_tf2_child_frame_id();
}
inline void LidarSegmentationComponentConfig::set_lidar2novatel_tf2_child_frame_id(const std::string& value) {
  _internal_set_lidar2novatel_tf2_child_frame_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
}
inline std::string* LidarSegmentationComponentConfig::mutable_lidar2novatel_tf2_child_frame_id() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
  return _internal_mutable_lidar2novatel_tf2_child_frame_id();
}
inline const std::string& LidarSegmentationComponentConfig::_internal_lidar2novatel_tf2_child_frame_id() const {
  return lidar2novatel_tf2_child_frame_id_.GetNoArena();
}
inline void LidarSegmentationComponentConfig::_internal_set_lidar2novatel_tf2_child_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lidar2novatel_tf2_child_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LidarSegmentationComponentConfig::set_lidar2novatel_tf2_child_frame_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lidar2novatel_tf2_child_frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
}
inline void LidarSegmentationComponentConfig::set_lidar2novatel_tf2_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lidar2novatel_tf2_child_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
}
inline void LidarSegmentationComponentConfig::set_lidar2novatel_tf2_child_frame_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lidar2novatel_tf2_child_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
}
inline std::string* LidarSegmentationComponentConfig::_internal_mutable_lidar2novatel_tf2_child_frame_id() {
  _has_bits_[0] |= 0x00000002u;
  return lidar2novatel_tf2_child_frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarSegmentationComponentConfig::release_lidar2novatel_tf2_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
  if (!_internal_has_lidar2novatel_tf2_child_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lidar2novatel_tf2_child_frame_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarSegmentationComponentConfig::set_allocated_lidar2novatel_tf2_child_frame_id(std::string* lidar2novatel_tf2_child_frame_id) {
  if (lidar2novatel_tf2_child_frame_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lidar2novatel_tf2_child_frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lidar2novatel_tf2_child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id)
}

// optional string output_channel_name = 5;
inline bool LidarSegmentationComponentConfig::_internal_has_output_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LidarSegmentationComponentConfig::has_output_channel_name() const {
  return _internal_has_output_channel_name();
}
inline void LidarSegmentationComponentConfig::clear_output_channel_name() {
  output_channel_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LidarSegmentationComponentConfig::output_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
  return _internal_output_channel_name();
}
inline void LidarSegmentationComponentConfig::set_output_channel_name(const std::string& value) {
  _internal_set_output_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
}
inline std::string* LidarSegmentationComponentConfig::mutable_output_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
  return _internal_mutable_output_channel_name();
}
inline const std::string& LidarSegmentationComponentConfig::_internal_output_channel_name() const {
  return output_channel_name_.GetNoArena();
}
inline void LidarSegmentationComponentConfig::_internal_set_output_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  output_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LidarSegmentationComponentConfig::set_output_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  output_channel_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
}
inline void LidarSegmentationComponentConfig::set_output_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  output_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
}
inline void LidarSegmentationComponentConfig::set_output_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  output_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
}
inline std::string* LidarSegmentationComponentConfig::_internal_mutable_output_channel_name() {
  _has_bits_[0] |= 0x00000004u;
  return output_channel_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarSegmentationComponentConfig::release_output_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
  if (!_internal_has_output_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return output_channel_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarSegmentationComponentConfig::set_allocated_output_channel_name(std::string* output_channel_name) {
  if (output_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_channel_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name)
}

// -------------------------------------------------------------------

// LidarRecognitionComponentConfig

// optional string main_sensor_name = 1;
inline bool LidarRecognitionComponentConfig::_internal_has_main_sensor_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarRecognitionComponentConfig::has_main_sensor_name() const {
  return _internal_has_main_sensor_name();
}
inline void LidarRecognitionComponentConfig::clear_main_sensor_name() {
  main_sensor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarRecognitionComponentConfig::main_sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
  return _internal_main_sensor_name();
}
inline void LidarRecognitionComponentConfig::set_main_sensor_name(const std::string& value) {
  _internal_set_main_sensor_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}
inline std::string* LidarRecognitionComponentConfig::mutable_main_sensor_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
  return _internal_mutable_main_sensor_name();
}
inline const std::string& LidarRecognitionComponentConfig::_internal_main_sensor_name() const {
  return main_sensor_name_.GetNoArena();
}
inline void LidarRecognitionComponentConfig::_internal_set_main_sensor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  main_sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LidarRecognitionComponentConfig::set_main_sensor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  main_sensor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}
inline void LidarRecognitionComponentConfig::set_main_sensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  main_sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}
inline void LidarRecognitionComponentConfig::set_main_sensor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  main_sensor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}
inline std::string* LidarRecognitionComponentConfig::_internal_mutable_main_sensor_name() {
  _has_bits_[0] |= 0x00000001u;
  return main_sensor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarRecognitionComponentConfig::release_main_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
  if (!_internal_has_main_sensor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return main_sensor_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarRecognitionComponentConfig::set_allocated_main_sensor_name(std::string* main_sensor_name) {
  if (main_sensor_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  main_sensor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_sensor_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name)
}

// optional string output_channel_name = 2;
inline bool LidarRecognitionComponentConfig::_internal_has_output_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarRecognitionComponentConfig::has_output_channel_name() const {
  return _internal_has_output_channel_name();
}
inline void LidarRecognitionComponentConfig::clear_output_channel_name() {
  output_channel_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LidarRecognitionComponentConfig::output_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
  return _internal_output_channel_name();
}
inline void LidarRecognitionComponentConfig::set_output_channel_name(const std::string& value) {
  _internal_set_output_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}
inline std::string* LidarRecognitionComponentConfig::mutable_output_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
  return _internal_mutable_output_channel_name();
}
inline const std::string& LidarRecognitionComponentConfig::_internal_output_channel_name() const {
  return output_channel_name_.GetNoArena();
}
inline void LidarRecognitionComponentConfig::_internal_set_output_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  output_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LidarRecognitionComponentConfig::set_output_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  output_channel_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}
inline void LidarRecognitionComponentConfig::set_output_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  output_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}
inline void LidarRecognitionComponentConfig::set_output_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  output_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}
inline std::string* LidarRecognitionComponentConfig::_internal_mutable_output_channel_name() {
  _has_bits_[0] |= 0x00000002u;
  return output_channel_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LidarRecognitionComponentConfig::release_output_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
  if (!_internal_has_output_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return output_channel_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LidarRecognitionComponentConfig::set_allocated_output_channel_name(std::string* output_channel_name) {
  if (output_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_channel_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto
