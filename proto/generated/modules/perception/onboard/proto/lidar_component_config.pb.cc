// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/lidar_component_config.proto

#include "modules/perception/onboard/proto/lidar_component_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace perception {
namespace onboard {
class LidarSegmentationComponentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarSegmentationComponentConfig> _instance;
} _LidarSegmentationComponentConfig_default_instance_;
class LidarRecognitionComponentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarRecognitionComponentConfig> _instance;
} _LidarRecognitionComponentConfig_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_LidarRecognitionComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::onboard::_LidarRecognitionComponentConfig_default_instance_;
    new (ptr) ::apollo::perception::onboard::LidarRecognitionComponentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::onboard::LidarRecognitionComponentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarRecognitionComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LidarRecognitionComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_LidarSegmentationComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::onboard::_LidarSegmentationComponentConfig_default_instance_;
    new (ptr) ::apollo::perception::onboard::LidarSegmentationComponentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::onboard::LidarSegmentationComponentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarSegmentationComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LidarSegmentationComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, enable_hdmap_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, lidar_query_tf_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, lidar2novatel_tf2_child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarSegmentationComponentConfig, output_channel_name_),
  0,
  4,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, main_sensor_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::LidarRecognitionComponentConfig, output_channel_name_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::perception::onboard::LidarSegmentationComponentConfig)},
  { 15, 22, sizeof(::apollo::perception::onboard::LidarRecognitionComponentConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_LidarSegmentationComponentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_LidarRecognitionComponentConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=modules/perception/onboard/proto/lidar"
  "_component_config.proto\022\031apollo.percepti"
  "on.onboard\"\263\001\n LidarSegmentationComponen"
  "tConfig\022\023\n\013sensor_name\030\001 \001(\t\022\024\n\014enable_h"
  "dmap\030\002 \001(\010\022\035\n\025lidar_query_tf_offset\030\003 \001("
  "\001\022(\n lidar2novatel_tf2_child_frame_id\030\004 "
  "\001(\t\022\033\n\023output_channel_name\030\005 \001(\t\"X\n\037Lida"
  "rRecognitionComponentConfig\022\030\n\020main_sens"
  "or_name\030\001 \001(\t\022\033\n\023output_channel_name\030\002 \001"
  "(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_sccs[2] = {
  &scc_info_LidarRecognitionComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.base,
  &scc_info_LidarSegmentationComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = {
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto, "modules/perception/onboard/proto/lidar_component_config.proto", 362,
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_once, descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_sccs, descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto, 2, file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto), true);
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

void LidarSegmentationComponentConfig::InitAsDefaultInstance() {
}
class LidarSegmentationComponentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarSegmentationComponentConfig>()._has_bits_);
  static void set_has_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_hdmap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lidar_query_tf_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lidar2novatel_tf2_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LidarSegmentationComponentConfig::LidarSegmentationComponentConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.onboard.LidarSegmentationComponentConfig)
}
LidarSegmentationComponentConfig::LidarSegmentationComponentConfig(const LidarSegmentationComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sensor_name()) {
    sensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
  }
  lidar2novatel_tf2_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lidar2novatel_tf2_child_frame_id()) {
    lidar2novatel_tf2_child_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lidar2novatel_tf2_child_frame_id_);
  }
  output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_channel_name()) {
    output_channel_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_channel_name_);
  }
  ::memcpy(&lidar_query_tf_offset_, &from.lidar_query_tf_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_hdmap_) -
    reinterpret_cast<char*>(&lidar_query_tf_offset_)) + sizeof(enable_hdmap_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.LidarSegmentationComponentConfig)
}

void LidarSegmentationComponentConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarSegmentationComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.base);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lidar2novatel_tf2_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lidar_query_tf_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_hdmap_) -
      reinterpret_cast<char*>(&lidar_query_tf_offset_)) + sizeof(enable_hdmap_));
}

LidarSegmentationComponentConfig::~LidarSegmentationComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.LidarSegmentationComponentConfig)
  SharedDtor();
}

void LidarSegmentationComponentConfig::SharedDtor() {
  sensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lidar2novatel_tf2_child_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LidarSegmentationComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarSegmentationComponentConfig& LidarSegmentationComponentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarSegmentationComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LidarSegmentationComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      lidar2novatel_tf2_child_frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      output_channel_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&lidar_query_tf_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_hdmap_) -
        reinterpret_cast<char*>(&lidar_query_tf_offset_)) + sizeof(enable_hdmap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LidarSegmentationComponentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_hdmap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_hdmap(&has_bits);
          enable_hdmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lidar_query_tf_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lidar_query_tf_offset(&has_bits);
          lidar_query_tf_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string lidar2novatel_tf2_child_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_lidar2novatel_tf2_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_channel_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_output_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarSegmentationComponentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_name().data(), static_cast<int>(this->_internal_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarSegmentationComponentConfig.sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name(), target);
  }

  // optional bool enable_hdmap = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_hdmap(), target);
  }

  // optional double lidar_query_tf_offset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lidar_query_tf_offset(), target);
  }

  // optional string lidar2novatel_tf2_child_frame_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lidar2novatel_tf2_child_frame_id().data(), static_cast<int>(this->_internal_lidar2novatel_tf2_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarSegmentationComponentConfig.lidar2novatel_tf2_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lidar2novatel_tf2_child_frame_id(), target);
  }

  // optional string output_channel_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel_name().data(), static_cast<int>(this->_internal_output_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarSegmentationComponentConfig.output_channel_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_output_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.LidarSegmentationComponentConfig)
  return target;
}

size_t LidarSegmentationComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string sensor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_name());
    }

    // optional string lidar2novatel_tf2_child_frame_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lidar2novatel_tf2_child_frame_id());
    }

    // optional string output_channel_name = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel_name());
    }

    // optional double lidar_query_tf_offset = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool enable_hdmap = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarSegmentationComponentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarSegmentationComponentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarSegmentationComponentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.onboard.LidarSegmentationComponentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.onboard.LidarSegmentationComponentConfig)
    MergeFrom(*source);
  }
}

void LidarSegmentationComponentConfig::MergeFrom(const LidarSegmentationComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      lidar2novatel_tf2_child_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lidar2novatel_tf2_child_frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      output_channel_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_channel_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      lidar_query_tf_offset_ = from.lidar_query_tf_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_hdmap_ = from.enable_hdmap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarSegmentationComponentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSegmentationComponentConfig::CopyFrom(const LidarSegmentationComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.LidarSegmentationComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSegmentationComponentConfig::IsInitialized() const {
  return true;
}

void LidarSegmentationComponentConfig::InternalSwap(LidarSegmentationComponentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_name_.Swap(&other->sensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lidar2novatel_tf2_child_frame_id_.Swap(&other->lidar2novatel_tf2_child_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_channel_name_.Swap(&other->output_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lidar_query_tf_offset_, other->lidar_query_tf_offset_);
  swap(enable_hdmap_, other->enable_hdmap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarSegmentationComponentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LidarRecognitionComponentConfig::InitAsDefaultInstance() {
}
class LidarRecognitionComponentConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarRecognitionComponentConfig>()._has_bits_);
  static void set_has_main_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LidarRecognitionComponentConfig::LidarRecognitionComponentConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.onboard.LidarRecognitionComponentConfig)
}
LidarRecognitionComponentConfig::LidarRecognitionComponentConfig(const LidarRecognitionComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_main_sensor_name()) {
    main_sensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.main_sensor_name_);
  }
  output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_channel_name()) {
    output_channel_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.LidarRecognitionComponentConfig)
}

void LidarRecognitionComponentConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarRecognitionComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.base);
  main_sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LidarRecognitionComponentConfig::~LidarRecognitionComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.LidarRecognitionComponentConfig)
  SharedDtor();
}

void LidarRecognitionComponentConfig::SharedDtor() {
  main_sensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LidarRecognitionComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarRecognitionComponentConfig& LidarRecognitionComponentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarRecognitionComponentConfig_modules_2fperception_2fonboard_2fproto_2flidar_5fcomponent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LidarRecognitionComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      main_sensor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      output_channel_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LidarRecognitionComponentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string main_sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_main_sensor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarRecognitionComponentConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string main_sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_sensor_name().data(), static_cast<int>(this->_internal_main_sensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarRecognitionComponentConfig.main_sensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_sensor_name(), target);
  }

  // optional string output_channel_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel_name().data(), static_cast<int>(this->_internal_output_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.LidarRecognitionComponentConfig.output_channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.LidarRecognitionComponentConfig)
  return target;
}

size_t LidarRecognitionComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string main_sensor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_sensor_name());
    }

    // optional string output_channel_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarRecognitionComponentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarRecognitionComponentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarRecognitionComponentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.onboard.LidarRecognitionComponentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.onboard.LidarRecognitionComponentConfig)
    MergeFrom(*source);
  }
}

void LidarRecognitionComponentConfig::MergeFrom(const LidarRecognitionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      main_sensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.main_sensor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      output_channel_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_channel_name_);
    }
  }
}

void LidarRecognitionComponentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarRecognitionComponentConfig::CopyFrom(const LidarRecognitionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.LidarRecognitionComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarRecognitionComponentConfig::IsInitialized() const {
  return true;
}

void LidarRecognitionComponentConfig::InternalSwap(LidarRecognitionComponentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  main_sensor_name_.Swap(&other->main_sensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_channel_name_.Swap(&other->output_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarRecognitionComponentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::LidarSegmentationComponentConfig* Arena::CreateMaybeMessage< ::apollo::perception::onboard::LidarSegmentationComponentConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::onboard::LidarSegmentationComponentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::LidarRecognitionComponentConfig* Arena::CreateMaybeMessage< ::apollo::perception::onboard::LidarRecognitionComponentConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::onboard::LidarRecognitionComponentConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
