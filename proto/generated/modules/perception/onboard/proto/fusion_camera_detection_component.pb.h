// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/fusion_camera_detection_component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto;
namespace apollo {
namespace perception {
namespace onboard {
class FusionCameraDetection;
class FusionCameraDetectionDefaultTypeInternal;
extern FusionCameraDetectionDefaultTypeInternal _FusionCameraDetection_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::onboard::FusionCameraDetection* Arena::CreateMaybeMessage<::apollo::perception::onboard::FusionCameraDetection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

class FusionCameraDetection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.onboard.FusionCameraDetection) */ {
 public:
  FusionCameraDetection();
  virtual ~FusionCameraDetection();

  FusionCameraDetection(const FusionCameraDetection& from);
  FusionCameraDetection(FusionCameraDetection&& from) noexcept
    : FusionCameraDetection() {
    *this = ::std::move(from);
  }

  inline FusionCameraDetection& operator=(const FusionCameraDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionCameraDetection& operator=(FusionCameraDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FusionCameraDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionCameraDetection* internal_default_instance() {
    return reinterpret_cast<const FusionCameraDetection*>(
               &_FusionCameraDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FusionCameraDetection& a, FusionCameraDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionCameraDetection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FusionCameraDetection* New() const final {
    return CreateMaybeMessage<FusionCameraDetection>(nullptr);
  }

  FusionCameraDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FusionCameraDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FusionCameraDetection& from);
  void MergeFrom(const FusionCameraDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionCameraDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.onboard.FusionCameraDetection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto);
    return ::descriptor_table_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraNamesFieldNumber = 1,
    kInputCameraChannelNamesFieldNumber = 2,
    kCameraObstaclePerceptionConfDirFieldNumber = 4,
    kCameraObstaclePerceptionConfFileFieldNumber = 5,
    kOutputObstaclesChannelNameFieldNumber = 10,
    kCameraPerceptionVizMessageChannelNameFieldNumber = 11,
    kPrefusedChannelNameFieldNumber = 12,
    kLaneCalibrationWorkingSensorNameFieldNumber = 15,
    kCalibratorMethodFieldNumber = 16,
    kCalibServiceNameFieldNumber = 17,
    kCameraDebugChannelNameFieldNumber = 20,
    kVisualDebugFolderFieldNumber = 23,
    kVisualCameraFieldNumber = 24,
    kTimestampOffsetFieldNumber = 3,
    kDefaultCameraPitchFieldNumber = 13,
    kEnableUndistortionFieldNumber = 8,
    kEnableVisualizationFieldNumber = 9,
    kOutputCameraDebugMsgFieldNumber = 19,
    kOutputFinalObstaclesFieldNumber = 22,
    kWriteVisualImgFieldNumber = 25,
    kImageBasedCipvFieldNumber = 30,
    kEnableCipvFieldNumber = 32,
    kDebugLevelFieldNumber = 31,
    kRunCalibServiceFieldNumber = 18,
    kFrameCapacityFieldNumber = 6,
    kImageChannelNumFieldNumber = 7,
    kDefaultCameraHeightFieldNumber = 14,
    kTsDiffFieldNumber = 21,
    kMinLanelineLengthForCipvFieldNumber = 26,
    kAverageLaneWidthInMeterFieldNumber = 27,
    kMaxVehicleWidthInMeterFieldNumber = 28,
    kAverageFrameRateFieldNumber = 29,
  };
  // optional string camera_names = 1 [default = "front_6mm,front_12mm"];
  bool has_camera_names() const;
  private:
  bool _internal_has_camera_names() const;
  public:
  void clear_camera_names();
  const std::string& camera_names() const;
  void set_camera_names(const std::string& value);
  void set_camera_names(std::string&& value);
  void set_camera_names(const char* value);
  void set_camera_names(const char* value, size_t size);
  std::string* mutable_camera_names();
  std::string* release_camera_names();
  void set_allocated_camera_names(std::string* camera_names);
  private:
  const std::string& _internal_camera_names() const;
  void _internal_set_camera_names(const std::string& value);
  std::string* _internal_mutable_camera_names();
  public:

  // optional string input_camera_channel_names = 2 [default = "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"];
  bool has_input_camera_channel_names() const;
  private:
  bool _internal_has_input_camera_channel_names() const;
  public:
  void clear_input_camera_channel_names();
  const std::string& input_camera_channel_names() const;
  void set_input_camera_channel_names(const std::string& value);
  void set_input_camera_channel_names(std::string&& value);
  void set_input_camera_channel_names(const char* value);
  void set_input_camera_channel_names(const char* value, size_t size);
  std::string* mutable_input_camera_channel_names();
  std::string* release_input_camera_channel_names();
  void set_allocated_input_camera_channel_names(std::string* input_camera_channel_names);
  private:
  const std::string& _internal_input_camera_channel_names() const;
  void _internal_set_input_camera_channel_names(const std::string& value);
  std::string* _internal_mutable_input_camera_channel_names();
  public:

  // optional string camera_obstacle_perception_conf_dir = 4 [default = "conf/perception/camera"];
  bool has_camera_obstacle_perception_conf_dir() const;
  private:
  bool _internal_has_camera_obstacle_perception_conf_dir() const;
  public:
  void clear_camera_obstacle_perception_conf_dir();
  const std::string& camera_obstacle_perception_conf_dir() const;
  void set_camera_obstacle_perception_conf_dir(const std::string& value);
  void set_camera_obstacle_perception_conf_dir(std::string&& value);
  void set_camera_obstacle_perception_conf_dir(const char* value);
  void set_camera_obstacle_perception_conf_dir(const char* value, size_t size);
  std::string* mutable_camera_obstacle_perception_conf_dir();
  std::string* release_camera_obstacle_perception_conf_dir();
  void set_allocated_camera_obstacle_perception_conf_dir(std::string* camera_obstacle_perception_conf_dir);
  private:
  const std::string& _internal_camera_obstacle_perception_conf_dir() const;
  void _internal_set_camera_obstacle_perception_conf_dir(const std::string& value);
  std::string* _internal_mutable_camera_obstacle_perception_conf_dir();
  public:

  // optional string camera_obstacle_perception_conf_file = 5 [default = "obstacle.pt"];
  bool has_camera_obstacle_perception_conf_file() const;
  private:
  bool _internal_has_camera_obstacle_perception_conf_file() const;
  public:
  void clear_camera_obstacle_perception_conf_file();
  const std::string& camera_obstacle_perception_conf_file() const;
  void set_camera_obstacle_perception_conf_file(const std::string& value);
  void set_camera_obstacle_perception_conf_file(std::string&& value);
  void set_camera_obstacle_perception_conf_file(const char* value);
  void set_camera_obstacle_perception_conf_file(const char* value, size_t size);
  std::string* mutable_camera_obstacle_perception_conf_file();
  std::string* release_camera_obstacle_perception_conf_file();
  void set_allocated_camera_obstacle_perception_conf_file(std::string* camera_obstacle_perception_conf_file);
  private:
  const std::string& _internal_camera_obstacle_perception_conf_file() const;
  void _internal_set_camera_obstacle_perception_conf_file(const std::string& value);
  std::string* _internal_mutable_camera_obstacle_perception_conf_file();
  public:

  // optional string output_obstacles_channel_name = 10 [default = "/perception/obstacles"];
  bool has_output_obstacles_channel_name() const;
  private:
  bool _internal_has_output_obstacles_channel_name() const;
  public:
  void clear_output_obstacles_channel_name();
  const std::string& output_obstacles_channel_name() const;
  void set_output_obstacles_channel_name(const std::string& value);
  void set_output_obstacles_channel_name(std::string&& value);
  void set_output_obstacles_channel_name(const char* value);
  void set_output_obstacles_channel_name(const char* value, size_t size);
  std::string* mutable_output_obstacles_channel_name();
  std::string* release_output_obstacles_channel_name();
  void set_allocated_output_obstacles_channel_name(std::string* output_obstacles_channel_name);
  private:
  const std::string& _internal_output_obstacles_channel_name() const;
  void _internal_set_output_obstacles_channel_name(const std::string& value);
  std::string* _internal_mutable_output_obstacles_channel_name();
  public:

  // optional string camera_perception_viz_message_channel_name = 11 [default = "/perception/inner/camera_viz_msg"];
  bool has_camera_perception_viz_message_channel_name() const;
  private:
  bool _internal_has_camera_perception_viz_message_channel_name() const;
  public:
  void clear_camera_perception_viz_message_channel_name();
  const std::string& camera_perception_viz_message_channel_name() const;
  void set_camera_perception_viz_message_channel_name(const std::string& value);
  void set_camera_perception_viz_message_channel_name(std::string&& value);
  void set_camera_perception_viz_message_channel_name(const char* value);
  void set_camera_perception_viz_message_channel_name(const char* value, size_t size);
  std::string* mutable_camera_perception_viz_message_channel_name();
  std::string* release_camera_perception_viz_message_channel_name();
  void set_allocated_camera_perception_viz_message_channel_name(std::string* camera_perception_viz_message_channel_name);
  private:
  const std::string& _internal_camera_perception_viz_message_channel_name() const;
  void _internal_set_camera_perception_viz_message_channel_name(const std::string& value);
  std::string* _internal_mutable_camera_perception_viz_message_channel_name();
  public:

  // optional string prefused_channel_name = 12 [default = "/perception/inner/PrefusedObjects"];
  bool has_prefused_channel_name() const;
  private:
  bool _internal_has_prefused_channel_name() const;
  public:
  void clear_prefused_channel_name();
  const std::string& prefused_channel_name() const;
  void set_prefused_channel_name(const std::string& value);
  void set_prefused_channel_name(std::string&& value);
  void set_prefused_channel_name(const char* value);
  void set_prefused_channel_name(const char* value, size_t size);
  std::string* mutable_prefused_channel_name();
  std::string* release_prefused_channel_name();
  void set_allocated_prefused_channel_name(std::string* prefused_channel_name);
  private:
  const std::string& _internal_prefused_channel_name() const;
  void _internal_set_prefused_channel_name(const std::string& value);
  std::string* _internal_mutable_prefused_channel_name();
  public:

  // optional string lane_calibration_working_sensor_name = 15 [default = "front_6mm"];
  bool has_lane_calibration_working_sensor_name() const;
  private:
  bool _internal_has_lane_calibration_working_sensor_name() const;
  public:
  void clear_lane_calibration_working_sensor_name();
  const std::string& lane_calibration_working_sensor_name() const;
  void set_lane_calibration_working_sensor_name(const std::string& value);
  void set_lane_calibration_working_sensor_name(std::string&& value);
  void set_lane_calibration_working_sensor_name(const char* value);
  void set_lane_calibration_working_sensor_name(const char* value, size_t size);
  std::string* mutable_lane_calibration_working_sensor_name();
  std::string* release_lane_calibration_working_sensor_name();
  void set_allocated_lane_calibration_working_sensor_name(std::string* lane_calibration_working_sensor_name);
  private:
  const std::string& _internal_lane_calibration_working_sensor_name() const;
  void _internal_set_lane_calibration_working_sensor_name(const std::string& value);
  std::string* _internal_mutable_lane_calibration_working_sensor_name();
  public:

  // optional string calibrator_method = 16 [default = "LaneLineCalibrator"];
  bool has_calibrator_method() const;
  private:
  bool _internal_has_calibrator_method() const;
  public:
  void clear_calibrator_method();
  const std::string& calibrator_method() const;
  void set_calibrator_method(const std::string& value);
  void set_calibrator_method(std::string&& value);
  void set_calibrator_method(const char* value);
  void set_calibrator_method(const char* value, size_t size);
  std::string* mutable_calibrator_method();
  std::string* release_calibrator_method();
  void set_allocated_calibrator_method(std::string* calibrator_method);
  private:
  const std::string& _internal_calibrator_method() const;
  void _internal_set_calibrator_method(const std::string& value);
  std::string* _internal_mutable_calibrator_method();
  public:

  // optional string calib_service_name = 17 [default = "OnlineCalibrationService"];
  bool has_calib_service_name() const;
  private:
  bool _internal_has_calib_service_name() const;
  public:
  void clear_calib_service_name();
  const std::string& calib_service_name() const;
  void set_calib_service_name(const std::string& value);
  void set_calib_service_name(std::string&& value);
  void set_calib_service_name(const char* value);
  void set_calib_service_name(const char* value, size_t size);
  std::string* mutable_calib_service_name();
  std::string* release_calib_service_name();
  void set_allocated_calib_service_name(std::string* calib_service_name);
  private:
  const std::string& _internal_calib_service_name() const;
  void _internal_set_calib_service_name(const std::string& value);
  std::string* _internal_mutable_calib_service_name();
  public:

  // optional string camera_debug_channel_name = 20 [default = "/perception/camera_debug"];
  bool has_camera_debug_channel_name() const;
  private:
  bool _internal_has_camera_debug_channel_name() const;
  public:
  void clear_camera_debug_channel_name();
  const std::string& camera_debug_channel_name() const;
  void set_camera_debug_channel_name(const std::string& value);
  void set_camera_debug_channel_name(std::string&& value);
  void set_camera_debug_channel_name(const char* value);
  void set_camera_debug_channel_name(const char* value, size_t size);
  std::string* mutable_camera_debug_channel_name();
  std::string* release_camera_debug_channel_name();
  void set_allocated_camera_debug_channel_name(std::string* camera_debug_channel_name);
  private:
  const std::string& _internal_camera_debug_channel_name() const;
  void _internal_set_camera_debug_channel_name(const std::string& value);
  std::string* _internal_mutable_camera_debug_channel_name();
  public:

  // optional string visual_debug_folder = 23 [default = "/apollo/debug_output"];
  bool has_visual_debug_folder() const;
  private:
  bool _internal_has_visual_debug_folder() const;
  public:
  void clear_visual_debug_folder();
  const std::string& visual_debug_folder() const;
  void set_visual_debug_folder(const std::string& value);
  void set_visual_debug_folder(std::string&& value);
  void set_visual_debug_folder(const char* value);
  void set_visual_debug_folder(const char* value, size_t size);
  std::string* mutable_visual_debug_folder();
  std::string* release_visual_debug_folder();
  void set_allocated_visual_debug_folder(std::string* visual_debug_folder);
  private:
  const std::string& _internal_visual_debug_folder() const;
  void _internal_set_visual_debug_folder(const std::string& value);
  std::string* _internal_mutable_visual_debug_folder();
  public:

  // optional string visual_camera = 24 [default = "front_6mm"];
  bool has_visual_camera() const;
  private:
  bool _internal_has_visual_camera() const;
  public:
  void clear_visual_camera();
  const std::string& visual_camera() const;
  void set_visual_camera(const std::string& value);
  void set_visual_camera(std::string&& value);
  void set_visual_camera(const char* value);
  void set_visual_camera(const char* value, size_t size);
  std::string* mutable_visual_camera();
  std::string* release_visual_camera();
  void set_allocated_visual_camera(std::string* visual_camera);
  private:
  const std::string& _internal_visual_camera() const;
  void _internal_set_visual_camera(const std::string& value);
  std::string* _internal_mutable_visual_camera();
  public:

  // optional double timestamp_offset = 3 [default = 0];
  bool has_timestamp_offset() const;
  private:
  bool _internal_has_timestamp_offset() const;
  public:
  void clear_timestamp_offset();
  double timestamp_offset() const;
  void set_timestamp_offset(double value);
  private:
  double _internal_timestamp_offset() const;
  void _internal_set_timestamp_offset(double value);
  public:

  // optional double default_camera_pitch = 13 [default = 0];
  bool has_default_camera_pitch() const;
  private:
  bool _internal_has_default_camera_pitch() const;
  public:
  void clear_default_camera_pitch();
  double default_camera_pitch() const;
  void set_default_camera_pitch(double value);
  private:
  double _internal_default_camera_pitch() const;
  void _internal_set_default_camera_pitch(double value);
  public:

  // optional bool enable_undistortion = 8 [default = false];
  bool has_enable_undistortion() const;
  private:
  bool _internal_has_enable_undistortion() const;
  public:
  void clear_enable_undistortion();
  bool enable_undistortion() const;
  void set_enable_undistortion(bool value);
  private:
  bool _internal_enable_undistortion() const;
  void _internal_set_enable_undistortion(bool value);
  public:

  // optional bool enable_visualization = 9 [default = false];
  bool has_enable_visualization() const;
  private:
  bool _internal_has_enable_visualization() const;
  public:
  void clear_enable_visualization();
  bool enable_visualization() const;
  void set_enable_visualization(bool value);
  private:
  bool _internal_enable_visualization() const;
  void _internal_set_enable_visualization(bool value);
  public:

  // optional bool output_camera_debug_msg = 19 [default = false];
  bool has_output_camera_debug_msg() const;
  private:
  bool _internal_has_output_camera_debug_msg() const;
  public:
  void clear_output_camera_debug_msg();
  bool output_camera_debug_msg() const;
  void set_output_camera_debug_msg(bool value);
  private:
  bool _internal_output_camera_debug_msg() const;
  void _internal_set_output_camera_debug_msg(bool value);
  public:

  // optional bool output_final_obstacles = 22 [default = false];
  bool has_output_final_obstacles() const;
  private:
  bool _internal_has_output_final_obstacles() const;
  public:
  void clear_output_final_obstacles();
  bool output_final_obstacles() const;
  void set_output_final_obstacles(bool value);
  private:
  bool _internal_output_final_obstacles() const;
  void _internal_set_output_final_obstacles(bool value);
  public:

  // optional bool write_visual_img = 25 [default = false];
  bool has_write_visual_img() const;
  private:
  bool _internal_has_write_visual_img() const;
  public:
  void clear_write_visual_img();
  bool write_visual_img() const;
  void set_write_visual_img(bool value);
  private:
  bool _internal_write_visual_img() const;
  void _internal_set_write_visual_img(bool value);
  public:

  // optional bool image_based_cipv = 30 [default = false];
  bool has_image_based_cipv() const;
  private:
  bool _internal_has_image_based_cipv() const;
  public:
  void clear_image_based_cipv();
  bool image_based_cipv() const;
  void set_image_based_cipv(bool value);
  private:
  bool _internal_image_based_cipv() const;
  void _internal_set_image_based_cipv(bool value);
  public:

  // optional bool enable_cipv = 32 [default = false];
  bool has_enable_cipv() const;
  private:
  bool _internal_has_enable_cipv() const;
  public:
  void clear_enable_cipv();
  bool enable_cipv() const;
  void set_enable_cipv(bool value);
  private:
  bool _internal_enable_cipv() const;
  void _internal_set_enable_cipv(bool value);
  public:

  // optional int32 debug_level = 31 [default = 0];
  bool has_debug_level() const;
  private:
  bool _internal_has_debug_level() const;
  public:
  void clear_debug_level();
  ::PROTOBUF_NAMESPACE_ID::int32 debug_level() const;
  void set_debug_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_debug_level() const;
  void _internal_set_debug_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool run_calib_service = 18 [default = true];
  bool has_run_calib_service() const;
  private:
  bool _internal_has_run_calib_service() const;
  public:
  void clear_run_calib_service();
  bool run_calib_service() const;
  void set_run_calib_service(bool value);
  private:
  bool _internal_run_calib_service() const;
  void _internal_set_run_calib_service(bool value);
  public:

  // optional int32 frame_capacity = 6 [default = 20];
  bool has_frame_capacity() const;
  private:
  bool _internal_has_frame_capacity() const;
  public:
  void clear_frame_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_capacity() const;
  void set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_capacity() const;
  void _internal_set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 image_channel_num = 7 [default = 3];
  bool has_image_channel_num() const;
  private:
  bool _internal_has_image_channel_num() const;
  public:
  void clear_image_channel_num();
  ::PROTOBUF_NAMESPACE_ID::int32 image_channel_num() const;
  void set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_channel_num() const;
  void _internal_set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double default_camera_height = 14 [default = 1.5];
  bool has_default_camera_height() const;
  private:
  bool _internal_has_default_camera_height() const;
  public:
  void clear_default_camera_height();
  double default_camera_height() const;
  void set_default_camera_height(double value);
  private:
  double _internal_default_camera_height() const;
  void _internal_set_default_camera_height(double value);
  public:

  // optional double ts_diff = 21 [default = 0.1];
  bool has_ts_diff() const;
  private:
  bool _internal_has_ts_diff() const;
  public:
  void clear_ts_diff();
  double ts_diff() const;
  void set_ts_diff(double value);
  private:
  double _internal_ts_diff() const;
  void _internal_set_ts_diff(double value);
  public:

  // optional double min_laneline_length_for_cipv = 26 [default = 2];
  bool has_min_laneline_length_for_cipv() const;
  private:
  bool _internal_has_min_laneline_length_for_cipv() const;
  public:
  void clear_min_laneline_length_for_cipv();
  double min_laneline_length_for_cipv() const;
  void set_min_laneline_length_for_cipv(double value);
  private:
  double _internal_min_laneline_length_for_cipv() const;
  void _internal_set_min_laneline_length_for_cipv(double value);
  public:

  // optional double average_lane_width_in_meter = 27 [default = 3.7];
  bool has_average_lane_width_in_meter() const;
  private:
  bool _internal_has_average_lane_width_in_meter() const;
  public:
  void clear_average_lane_width_in_meter();
  double average_lane_width_in_meter() const;
  void set_average_lane_width_in_meter(double value);
  private:
  double _internal_average_lane_width_in_meter() const;
  void _internal_set_average_lane_width_in_meter(double value);
  public:

  // optional double max_vehicle_width_in_meter = 28 [default = 2.5];
  bool has_max_vehicle_width_in_meter() const;
  private:
  bool _internal_has_max_vehicle_width_in_meter() const;
  public:
  void clear_max_vehicle_width_in_meter();
  double max_vehicle_width_in_meter() const;
  void set_max_vehicle_width_in_meter(double value);
  private:
  double _internal_max_vehicle_width_in_meter() const;
  void _internal_set_max_vehicle_width_in_meter(double value);
  public:

  // optional double average_frame_rate = 29 [default = 0.05];
  bool has_average_frame_rate() const;
  private:
  bool _internal_has_average_frame_rate() const;
  public:
  void clear_average_frame_rate();
  double average_frame_rate() const;
  void set_average_frame_rate(double value);
  private:
  double _internal_average_frame_rate() const;
  void _internal_set_average_frame_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.onboard.FusionCameraDetection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_names_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_names_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_input_camera_channel_names_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_camera_channel_names_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_obstacle_perception_conf_dir_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_obstacle_perception_conf_file_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_output_obstacles_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_obstacles_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_perception_viz_message_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_prefused_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefused_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_calibration_working_sensor_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_calibrator_method_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibrator_method_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_calib_service_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calib_service_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_camera_debug_channel_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_debug_channel_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_visual_debug_folder_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visual_debug_folder_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_visual_camera_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visual_camera_;
  double timestamp_offset_;
  double default_camera_pitch_;
  bool enable_undistortion_;
  bool enable_visualization_;
  bool output_camera_debug_msg_;
  bool output_final_obstacles_;
  bool write_visual_img_;
  bool image_based_cipv_;
  bool enable_cipv_;
  ::PROTOBUF_NAMESPACE_ID::int32 debug_level_;
  bool run_calib_service_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_channel_num_;
  double default_camera_height_;
  double ts_diff_;
  double min_laneline_length_for_cipv_;
  double average_lane_width_in_meter_;
  double max_vehicle_width_in_meter_;
  double average_frame_rate_;
  friend struct ::TableStruct_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionCameraDetection

// optional string camera_names = 1 [default = "front_6mm,front_12mm"];
inline bool FusionCameraDetection::_internal_has_camera_names() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_camera_names() const {
  return _internal_has_camera_names();
}
inline void FusionCameraDetection::clear_camera_names() {
  camera_names_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FusionCameraDetection::camera_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.camera_names)
  return _internal_camera_names();
}
inline void FusionCameraDetection::set_camera_names(const std::string& value) {
  _internal_set_camera_names(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.camera_names)
}
inline std::string* FusionCameraDetection::mutable_camera_names() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.camera_names)
  return _internal_mutable_camera_names();
}
inline const std::string& FusionCameraDetection::_internal_camera_names() const {
  return camera_names_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_camera_names(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), value);
}
inline void FusionCameraDetection::set_camera_names(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.camera_names)
}
inline void FusionCameraDetection::set_camera_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.camera_names)
}
inline void FusionCameraDetection::set_camera_names(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  camera_names_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.camera_names)
}
inline std::string* FusionCameraDetection::_internal_mutable_camera_names() {
  _has_bits_[0] |= 0x00000001u;
  return camera_names_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get());
}
inline std::string* FusionCameraDetection::release_camera_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.camera_names)
  if (!_internal_has_camera_names()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return camera_names_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get());
}
inline void FusionCameraDetection::set_allocated_camera_names(std::string* camera_names) {
  if (camera_names != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_names_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_names_.get(), camera_names);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.camera_names)
}

// optional string input_camera_channel_names = 2 [default = "/sensor/camera/traffic/image_short,/sensor/camera/obstacle/image_narrow"];
inline bool FusionCameraDetection::_internal_has_input_camera_channel_names() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_input_camera_channel_names() const {
  return _internal_has_input_camera_channel_names();
}
inline void FusionCameraDetection::clear_input_camera_channel_names() {
  input_camera_channel_names_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FusionCameraDetection::input_camera_channel_names() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
  return _internal_input_camera_channel_names();
}
inline void FusionCameraDetection::set_input_camera_channel_names(const std::string& value) {
  _internal_set_input_camera_channel_names(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
}
inline std::string* FusionCameraDetection::mutable_input_camera_channel_names() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
  return _internal_mutable_input_camera_channel_names();
}
inline const std::string& FusionCameraDetection::_internal_input_camera_channel_names() const {
  return input_camera_channel_names_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_input_camera_channel_names(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), value);
}
inline void FusionCameraDetection::set_input_camera_channel_names(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
}
inline void FusionCameraDetection::set_input_camera_channel_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
}
inline void FusionCameraDetection::set_input_camera_channel_names(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  input_camera_channel_names_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
}
inline std::string* FusionCameraDetection::_internal_mutable_input_camera_channel_names() {
  _has_bits_[0] |= 0x00000002u;
  return input_camera_channel_names_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
}
inline std::string* FusionCameraDetection::release_input_camera_channel_names() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
  if (!_internal_has_input_camera_channel_names()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return input_camera_channel_names_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get());
}
inline void FusionCameraDetection::set_allocated_input_camera_channel_names(std::string* input_camera_channel_names) {
  if (input_camera_channel_names != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_camera_channel_names_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_input_camera_channel_names_.get(), input_camera_channel_names);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.input_camera_channel_names)
}

// optional double timestamp_offset = 3 [default = 0];
inline bool FusionCameraDetection::_internal_has_timestamp_offset() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_timestamp_offset() const {
  return _internal_has_timestamp_offset();
}
inline void FusionCameraDetection::clear_timestamp_offset() {
  timestamp_offset_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double FusionCameraDetection::_internal_timestamp_offset() const {
  return timestamp_offset_;
}
inline double FusionCameraDetection::timestamp_offset() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.timestamp_offset)
  return _internal_timestamp_offset();
}
inline void FusionCameraDetection::_internal_set_timestamp_offset(double value) {
  _has_bits_[0] |= 0x00002000u;
  timestamp_offset_ = value;
}
inline void FusionCameraDetection::set_timestamp_offset(double value) {
  _internal_set_timestamp_offset(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.timestamp_offset)
}

// optional string camera_obstacle_perception_conf_dir = 4 [default = "conf/perception/camera"];
inline bool FusionCameraDetection::_internal_has_camera_obstacle_perception_conf_dir() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_camera_obstacle_perception_conf_dir() const {
  return _internal_has_camera_obstacle_perception_conf_dir();
}
inline void FusionCameraDetection::clear_camera_obstacle_perception_conf_dir() {
  camera_obstacle_perception_conf_dir_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FusionCameraDetection::camera_obstacle_perception_conf_dir() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
  return _internal_camera_obstacle_perception_conf_dir();
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_dir(const std::string& value) {
  _internal_set_camera_obstacle_perception_conf_dir(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
}
inline std::string* FusionCameraDetection::mutable_camera_obstacle_perception_conf_dir() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
  return _internal_mutable_camera_obstacle_perception_conf_dir();
}
inline const std::string& FusionCameraDetection::_internal_camera_obstacle_perception_conf_dir() const {
  return camera_obstacle_perception_conf_dir_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_camera_obstacle_perception_conf_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  camera_obstacle_perception_conf_dir_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get(), value);
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  camera_obstacle_perception_conf_dir_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  camera_obstacle_perception_conf_dir_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  camera_obstacle_perception_conf_dir_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
}
inline std::string* FusionCameraDetection::_internal_mutable_camera_obstacle_perception_conf_dir() {
  _has_bits_[0] |= 0x00000004u;
  return camera_obstacle_perception_conf_dir_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get());
}
inline std::string* FusionCameraDetection::release_camera_obstacle_perception_conf_dir() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
  if (!_internal_has_camera_obstacle_perception_conf_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return camera_obstacle_perception_conf_dir_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get());
}
inline void FusionCameraDetection::set_allocated_camera_obstacle_perception_conf_dir(std::string* camera_obstacle_perception_conf_dir) {
  if (camera_obstacle_perception_conf_dir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  camera_obstacle_perception_conf_dir_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_dir_.get(), camera_obstacle_perception_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_dir)
}

// optional string camera_obstacle_perception_conf_file = 5 [default = "obstacle.pt"];
inline bool FusionCameraDetection::_internal_has_camera_obstacle_perception_conf_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_camera_obstacle_perception_conf_file() const {
  return _internal_has_camera_obstacle_perception_conf_file();
}
inline void FusionCameraDetection::clear_camera_obstacle_perception_conf_file() {
  camera_obstacle_perception_conf_file_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FusionCameraDetection::camera_obstacle_perception_conf_file() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
  return _internal_camera_obstacle_perception_conf_file();
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_file(const std::string& value) {
  _internal_set_camera_obstacle_perception_conf_file(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
}
inline std::string* FusionCameraDetection::mutable_camera_obstacle_perception_conf_file() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
  return _internal_mutable_camera_obstacle_perception_conf_file();
}
inline const std::string& FusionCameraDetection::_internal_camera_obstacle_perception_conf_file() const {
  return camera_obstacle_perception_conf_file_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_camera_obstacle_perception_conf_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  camera_obstacle_perception_conf_file_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get(), value);
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  camera_obstacle_perception_conf_file_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  camera_obstacle_perception_conf_file_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
}
inline void FusionCameraDetection::set_camera_obstacle_perception_conf_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  camera_obstacle_perception_conf_file_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
}
inline std::string* FusionCameraDetection::_internal_mutable_camera_obstacle_perception_conf_file() {
  _has_bits_[0] |= 0x00000008u;
  return camera_obstacle_perception_conf_file_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get());
}
inline std::string* FusionCameraDetection::release_camera_obstacle_perception_conf_file() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
  if (!_internal_has_camera_obstacle_perception_conf_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return camera_obstacle_perception_conf_file_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get());
}
inline void FusionCameraDetection::set_allocated_camera_obstacle_perception_conf_file(std::string* camera_obstacle_perception_conf_file) {
  if (camera_obstacle_perception_conf_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  camera_obstacle_perception_conf_file_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_obstacle_perception_conf_file_.get(), camera_obstacle_perception_conf_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.camera_obstacle_perception_conf_file)
}

// optional int32 frame_capacity = 6 [default = 20];
inline bool FusionCameraDetection::_internal_has_frame_capacity() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_frame_capacity() const {
  return _internal_has_frame_capacity();
}
inline void FusionCameraDetection::clear_frame_capacity() {
  frame_capacity_ = 20;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FusionCameraDetection::_internal_frame_capacity() const {
  return frame_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FusionCameraDetection::frame_capacity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.frame_capacity)
  return _internal_frame_capacity();
}
inline void FusionCameraDetection::_internal_set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  frame_capacity_ = value;
}
inline void FusionCameraDetection::set_frame_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_capacity(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.frame_capacity)
}

// optional int32 image_channel_num = 7 [default = 3];
inline bool FusionCameraDetection::_internal_has_image_channel_num() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_image_channel_num() const {
  return _internal_has_image_channel_num();
}
inline void FusionCameraDetection::clear_image_channel_num() {
  image_channel_num_ = 3;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FusionCameraDetection::_internal_image_channel_num() const {
  return image_channel_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FusionCameraDetection::image_channel_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.image_channel_num)
  return _internal_image_channel_num();
}
inline void FusionCameraDetection::_internal_set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  image_channel_num_ = value;
}
inline void FusionCameraDetection::set_image_channel_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_channel_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.image_channel_num)
}

// optional bool enable_undistortion = 8 [default = false];
inline bool FusionCameraDetection::_internal_has_enable_undistortion() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_enable_undistortion() const {
  return _internal_has_enable_undistortion();
}
inline void FusionCameraDetection::clear_enable_undistortion() {
  enable_undistortion_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool FusionCameraDetection::_internal_enable_undistortion() const {
  return enable_undistortion_;
}
inline bool FusionCameraDetection::enable_undistortion() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.enable_undistortion)
  return _internal_enable_undistortion();
}
inline void FusionCameraDetection::_internal_set_enable_undistortion(bool value) {
  _has_bits_[0] |= 0x00008000u;
  enable_undistortion_ = value;
}
inline void FusionCameraDetection::set_enable_undistortion(bool value) {
  _internal_set_enable_undistortion(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.enable_undistortion)
}

// optional bool enable_visualization = 9 [default = false];
inline bool FusionCameraDetection::_internal_has_enable_visualization() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_enable_visualization() const {
  return _internal_has_enable_visualization();
}
inline void FusionCameraDetection::clear_enable_visualization() {
  enable_visualization_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool FusionCameraDetection::_internal_enable_visualization() const {
  return enable_visualization_;
}
inline bool FusionCameraDetection::enable_visualization() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.enable_visualization)
  return _internal_enable_visualization();
}
inline void FusionCameraDetection::_internal_set_enable_visualization(bool value) {
  _has_bits_[0] |= 0x00010000u;
  enable_visualization_ = value;
}
inline void FusionCameraDetection::set_enable_visualization(bool value) {
  _internal_set_enable_visualization(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.enable_visualization)
}

// optional string output_obstacles_channel_name = 10 [default = "/perception/obstacles"];
inline bool FusionCameraDetection::_internal_has_output_obstacles_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_output_obstacles_channel_name() const {
  return _internal_has_output_obstacles_channel_name();
}
inline void FusionCameraDetection::clear_output_obstacles_channel_name() {
  output_obstacles_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FusionCameraDetection::output_obstacles_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
  return _internal_output_obstacles_channel_name();
}
inline void FusionCameraDetection::set_output_obstacles_channel_name(const std::string& value) {
  _internal_set_output_obstacles_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
}
inline std::string* FusionCameraDetection::mutable_output_obstacles_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
  return _internal_mutable_output_obstacles_channel_name();
}
inline const std::string& FusionCameraDetection::_internal_output_obstacles_channel_name() const {
  return output_obstacles_channel_name_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_output_obstacles_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  output_obstacles_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), value);
}
inline void FusionCameraDetection::set_output_obstacles_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  output_obstacles_channel_name_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
}
inline void FusionCameraDetection::set_output_obstacles_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  output_obstacles_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
}
inline void FusionCameraDetection::set_output_obstacles_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  output_obstacles_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
}
inline std::string* FusionCameraDetection::_internal_mutable_output_obstacles_channel_name() {
  _has_bits_[0] |= 0x00000010u;
  return output_obstacles_channel_name_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get());
}
inline std::string* FusionCameraDetection::release_output_obstacles_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
  if (!_internal_has_output_obstacles_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return output_obstacles_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get());
}
inline void FusionCameraDetection::set_allocated_output_obstacles_channel_name(std::string* output_obstacles_channel_name) {
  if (output_obstacles_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  output_obstacles_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_output_obstacles_channel_name_.get(), output_obstacles_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.output_obstacles_channel_name)
}

// optional string camera_perception_viz_message_channel_name = 11 [default = "/perception/inner/camera_viz_msg"];
inline bool FusionCameraDetection::_internal_has_camera_perception_viz_message_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_camera_perception_viz_message_channel_name() const {
  return _internal_has_camera_perception_viz_message_channel_name();
}
inline void FusionCameraDetection::clear_camera_perception_viz_message_channel_name() {
  camera_perception_viz_message_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& FusionCameraDetection::camera_perception_viz_message_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
  return _internal_camera_perception_viz_message_channel_name();
}
inline void FusionCameraDetection::set_camera_perception_viz_message_channel_name(const std::string& value) {
  _internal_set_camera_perception_viz_message_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
}
inline std::string* FusionCameraDetection::mutable_camera_perception_viz_message_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
  return _internal_mutable_camera_perception_viz_message_channel_name();
}
inline const std::string& FusionCameraDetection::_internal_camera_perception_viz_message_channel_name() const {
  return camera_perception_viz_message_channel_name_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_camera_perception_viz_message_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  camera_perception_viz_message_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get(), value);
}
inline void FusionCameraDetection::set_camera_perception_viz_message_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  camera_perception_viz_message_channel_name_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
}
inline void FusionCameraDetection::set_camera_perception_viz_message_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  camera_perception_viz_message_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
}
inline void FusionCameraDetection::set_camera_perception_viz_message_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  camera_perception_viz_message_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
}
inline std::string* FusionCameraDetection::_internal_mutable_camera_perception_viz_message_channel_name() {
  _has_bits_[0] |= 0x00000020u;
  return camera_perception_viz_message_channel_name_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get());
}
inline std::string* FusionCameraDetection::release_camera_perception_viz_message_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
  if (!_internal_has_camera_perception_viz_message_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return camera_perception_viz_message_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get());
}
inline void FusionCameraDetection::set_allocated_camera_perception_viz_message_channel_name(std::string* camera_perception_viz_message_channel_name) {
  if (camera_perception_viz_message_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  camera_perception_viz_message_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_perception_viz_message_channel_name_.get(), camera_perception_viz_message_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.camera_perception_viz_message_channel_name)
}

// optional string prefused_channel_name = 12 [default = "/perception/inner/PrefusedObjects"];
inline bool FusionCameraDetection::_internal_has_prefused_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_prefused_channel_name() const {
  return _internal_has_prefused_channel_name();
}
inline void FusionCameraDetection::clear_prefused_channel_name() {
  prefused_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& FusionCameraDetection::prefused_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
  return _internal_prefused_channel_name();
}
inline void FusionCameraDetection::set_prefused_channel_name(const std::string& value) {
  _internal_set_prefused_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
}
inline std::string* FusionCameraDetection::mutable_prefused_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
  return _internal_mutable_prefused_channel_name();
}
inline const std::string& FusionCameraDetection::_internal_prefused_channel_name() const {
  return prefused_channel_name_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_prefused_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  prefused_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get(), value);
}
inline void FusionCameraDetection::set_prefused_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  prefused_channel_name_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
}
inline void FusionCameraDetection::set_prefused_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  prefused_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
}
inline void FusionCameraDetection::set_prefused_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  prefused_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
}
inline std::string* FusionCameraDetection::_internal_mutable_prefused_channel_name() {
  _has_bits_[0] |= 0x00000040u;
  return prefused_channel_name_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get());
}
inline std::string* FusionCameraDetection::release_prefused_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
  if (!_internal_has_prefused_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return prefused_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get());
}
inline void FusionCameraDetection::set_allocated_prefused_channel_name(std::string* prefused_channel_name) {
  if (prefused_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  prefused_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_prefused_channel_name_.get(), prefused_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.prefused_channel_name)
}

// optional double default_camera_pitch = 13 [default = 0];
inline bool FusionCameraDetection::_internal_has_default_camera_pitch() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_default_camera_pitch() const {
  return _internal_has_default_camera_pitch();
}
inline void FusionCameraDetection::clear_default_camera_pitch() {
  default_camera_pitch_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double FusionCameraDetection::_internal_default_camera_pitch() const {
  return default_camera_pitch_;
}
inline double FusionCameraDetection::default_camera_pitch() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.default_camera_pitch)
  return _internal_default_camera_pitch();
}
inline void FusionCameraDetection::_internal_set_default_camera_pitch(double value) {
  _has_bits_[0] |= 0x00004000u;
  default_camera_pitch_ = value;
}
inline void FusionCameraDetection::set_default_camera_pitch(double value) {
  _internal_set_default_camera_pitch(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.default_camera_pitch)
}

// optional double default_camera_height = 14 [default = 1.5];
inline bool FusionCameraDetection::_internal_has_default_camera_height() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_default_camera_height() const {
  return _internal_has_default_camera_height();
}
inline void FusionCameraDetection::clear_default_camera_height() {
  default_camera_height_ = 1.5;
  _has_bits_[0] &= ~0x04000000u;
}
inline double FusionCameraDetection::_internal_default_camera_height() const {
  return default_camera_height_;
}
inline double FusionCameraDetection::default_camera_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.default_camera_height)
  return _internal_default_camera_height();
}
inline void FusionCameraDetection::_internal_set_default_camera_height(double value) {
  _has_bits_[0] |= 0x04000000u;
  default_camera_height_ = value;
}
inline void FusionCameraDetection::set_default_camera_height(double value) {
  _internal_set_default_camera_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.default_camera_height)
}

// optional string lane_calibration_working_sensor_name = 15 [default = "front_6mm"];
inline bool FusionCameraDetection::_internal_has_lane_calibration_working_sensor_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_lane_calibration_working_sensor_name() const {
  return _internal_has_lane_calibration_working_sensor_name();
}
inline void FusionCameraDetection::clear_lane_calibration_working_sensor_name() {
  lane_calibration_working_sensor_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& FusionCameraDetection::lane_calibration_working_sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
  return _internal_lane_calibration_working_sensor_name();
}
inline void FusionCameraDetection::set_lane_calibration_working_sensor_name(const std::string& value) {
  _internal_set_lane_calibration_working_sensor_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
}
inline std::string* FusionCameraDetection::mutable_lane_calibration_working_sensor_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
  return _internal_mutable_lane_calibration_working_sensor_name();
}
inline const std::string& FusionCameraDetection::_internal_lane_calibration_working_sensor_name() const {
  return lane_calibration_working_sensor_name_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_lane_calibration_working_sensor_name(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  lane_calibration_working_sensor_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), value);
}
inline void FusionCameraDetection::set_lane_calibration_working_sensor_name(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  lane_calibration_working_sensor_name_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
}
inline void FusionCameraDetection::set_lane_calibration_working_sensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  lane_calibration_working_sensor_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
}
inline void FusionCameraDetection::set_lane_calibration_working_sensor_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  lane_calibration_working_sensor_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
}
inline std::string* FusionCameraDetection::_internal_mutable_lane_calibration_working_sensor_name() {
  _has_bits_[0] |= 0x00000080u;
  return lane_calibration_working_sensor_name_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get());
}
inline std::string* FusionCameraDetection::release_lane_calibration_working_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
  if (!_internal_has_lane_calibration_working_sensor_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return lane_calibration_working_sensor_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get());
}
inline void FusionCameraDetection::set_allocated_lane_calibration_working_sensor_name(std::string* lane_calibration_working_sensor_name) {
  if (lane_calibration_working_sensor_name != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  lane_calibration_working_sensor_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_lane_calibration_working_sensor_name_.get(), lane_calibration_working_sensor_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.lane_calibration_working_sensor_name)
}

// optional string calibrator_method = 16 [default = "LaneLineCalibrator"];
inline bool FusionCameraDetection::_internal_has_calibrator_method() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_calibrator_method() const {
  return _internal_has_calibrator_method();
}
inline void FusionCameraDetection::clear_calibrator_method() {
  calibrator_method_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& FusionCameraDetection::calibrator_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
  return _internal_calibrator_method();
}
inline void FusionCameraDetection::set_calibrator_method(const std::string& value) {
  _internal_set_calibrator_method(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
}
inline std::string* FusionCameraDetection::mutable_calibrator_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
  return _internal_mutable_calibrator_method();
}
inline const std::string& FusionCameraDetection::_internal_calibrator_method() const {
  return calibrator_method_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_calibrator_method(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  calibrator_method_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), value);
}
inline void FusionCameraDetection::set_calibrator_method(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  calibrator_method_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
}
inline void FusionCameraDetection::set_calibrator_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  calibrator_method_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
}
inline void FusionCameraDetection::set_calibrator_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  calibrator_method_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
}
inline std::string* FusionCameraDetection::_internal_mutable_calibrator_method() {
  _has_bits_[0] |= 0x00000100u;
  return calibrator_method_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get());
}
inline std::string* FusionCameraDetection::release_calibrator_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
  if (!_internal_has_calibrator_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return calibrator_method_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get());
}
inline void FusionCameraDetection::set_allocated_calibrator_method(std::string* calibrator_method) {
  if (calibrator_method != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  calibrator_method_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calibrator_method_.get(), calibrator_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.calibrator_method)
}

// optional string calib_service_name = 17 [default = "OnlineCalibrationService"];
inline bool FusionCameraDetection::_internal_has_calib_service_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_calib_service_name() const {
  return _internal_has_calib_service_name();
}
inline void FusionCameraDetection::clear_calib_service_name() {
  calib_service_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& FusionCameraDetection::calib_service_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
  return _internal_calib_service_name();
}
inline void FusionCameraDetection::set_calib_service_name(const std::string& value) {
  _internal_set_calib_service_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
}
inline std::string* FusionCameraDetection::mutable_calib_service_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
  return _internal_mutable_calib_service_name();
}
inline const std::string& FusionCameraDetection::_internal_calib_service_name() const {
  return calib_service_name_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_calib_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  calib_service_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), value);
}
inline void FusionCameraDetection::set_calib_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  calib_service_name_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
}
inline void FusionCameraDetection::set_calib_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  calib_service_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
}
inline void FusionCameraDetection::set_calib_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  calib_service_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
}
inline std::string* FusionCameraDetection::_internal_mutable_calib_service_name() {
  _has_bits_[0] |= 0x00000200u;
  return calib_service_name_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get());
}
inline std::string* FusionCameraDetection::release_calib_service_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
  if (!_internal_has_calib_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return calib_service_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get());
}
inline void FusionCameraDetection::set_allocated_calib_service_name(std::string* calib_service_name) {
  if (calib_service_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  calib_service_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_calib_service_name_.get(), calib_service_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.calib_service_name)
}

// optional bool run_calib_service = 18 [default = true];
inline bool FusionCameraDetection::_internal_has_run_calib_service() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_run_calib_service() const {
  return _internal_has_run_calib_service();
}
inline void FusionCameraDetection::clear_run_calib_service() {
  run_calib_service_ = true;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool FusionCameraDetection::_internal_run_calib_service() const {
  return run_calib_service_;
}
inline bool FusionCameraDetection::run_calib_service() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.run_calib_service)
  return _internal_run_calib_service();
}
inline void FusionCameraDetection::_internal_set_run_calib_service(bool value) {
  _has_bits_[0] |= 0x00800000u;
  run_calib_service_ = value;
}
inline void FusionCameraDetection::set_run_calib_service(bool value) {
  _internal_set_run_calib_service(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.run_calib_service)
}

// optional bool output_camera_debug_msg = 19 [default = false];
inline bool FusionCameraDetection::_internal_has_output_camera_debug_msg() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_output_camera_debug_msg() const {
  return _internal_has_output_camera_debug_msg();
}
inline void FusionCameraDetection::clear_output_camera_debug_msg() {
  output_camera_debug_msg_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool FusionCameraDetection::_internal_output_camera_debug_msg() const {
  return output_camera_debug_msg_;
}
inline bool FusionCameraDetection::output_camera_debug_msg() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.output_camera_debug_msg)
  return _internal_output_camera_debug_msg();
}
inline void FusionCameraDetection::_internal_set_output_camera_debug_msg(bool value) {
  _has_bits_[0] |= 0x00020000u;
  output_camera_debug_msg_ = value;
}
inline void FusionCameraDetection::set_output_camera_debug_msg(bool value) {
  _internal_set_output_camera_debug_msg(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.output_camera_debug_msg)
}

// optional string camera_debug_channel_name = 20 [default = "/perception/camera_debug"];
inline bool FusionCameraDetection::_internal_has_camera_debug_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_camera_debug_channel_name() const {
  return _internal_has_camera_debug_channel_name();
}
inline void FusionCameraDetection::clear_camera_debug_channel_name() {
  camera_debug_channel_name_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& FusionCameraDetection::camera_debug_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
  return _internal_camera_debug_channel_name();
}
inline void FusionCameraDetection::set_camera_debug_channel_name(const std::string& value) {
  _internal_set_camera_debug_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
}
inline std::string* FusionCameraDetection::mutable_camera_debug_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
  return _internal_mutable_camera_debug_channel_name();
}
inline const std::string& FusionCameraDetection::_internal_camera_debug_channel_name() const {
  return camera_debug_channel_name_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_camera_debug_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  camera_debug_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get(), value);
}
inline void FusionCameraDetection::set_camera_debug_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  camera_debug_channel_name_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
}
inline void FusionCameraDetection::set_camera_debug_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  camera_debug_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
}
inline void FusionCameraDetection::set_camera_debug_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  camera_debug_channel_name_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
}
inline std::string* FusionCameraDetection::_internal_mutable_camera_debug_channel_name() {
  _has_bits_[0] |= 0x00000400u;
  return camera_debug_channel_name_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get());
}
inline std::string* FusionCameraDetection::release_camera_debug_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
  if (!_internal_has_camera_debug_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return camera_debug_channel_name_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get());
}
inline void FusionCameraDetection::set_allocated_camera_debug_channel_name(std::string* camera_debug_channel_name) {
  if (camera_debug_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  camera_debug_channel_name_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_camera_debug_channel_name_.get(), camera_debug_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.camera_debug_channel_name)
}

// optional double ts_diff = 21 [default = 0.1];
inline bool FusionCameraDetection::_internal_has_ts_diff() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_ts_diff() const {
  return _internal_has_ts_diff();
}
inline void FusionCameraDetection::clear_ts_diff() {
  ts_diff_ = 0.1;
  _has_bits_[0] &= ~0x08000000u;
}
inline double FusionCameraDetection::_internal_ts_diff() const {
  return ts_diff_;
}
inline double FusionCameraDetection::ts_diff() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.ts_diff)
  return _internal_ts_diff();
}
inline void FusionCameraDetection::_internal_set_ts_diff(double value) {
  _has_bits_[0] |= 0x08000000u;
  ts_diff_ = value;
}
inline void FusionCameraDetection::set_ts_diff(double value) {
  _internal_set_ts_diff(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.ts_diff)
}

// optional bool output_final_obstacles = 22 [default = false];
inline bool FusionCameraDetection::_internal_has_output_final_obstacles() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_output_final_obstacles() const {
  return _internal_has_output_final_obstacles();
}
inline void FusionCameraDetection::clear_output_final_obstacles() {
  output_final_obstacles_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool FusionCameraDetection::_internal_output_final_obstacles() const {
  return output_final_obstacles_;
}
inline bool FusionCameraDetection::output_final_obstacles() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.output_final_obstacles)
  return _internal_output_final_obstacles();
}
inline void FusionCameraDetection::_internal_set_output_final_obstacles(bool value) {
  _has_bits_[0] |= 0x00040000u;
  output_final_obstacles_ = value;
}
inline void FusionCameraDetection::set_output_final_obstacles(bool value) {
  _internal_set_output_final_obstacles(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.output_final_obstacles)
}

// optional string visual_debug_folder = 23 [default = "/apollo/debug_output"];
inline bool FusionCameraDetection::_internal_has_visual_debug_folder() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_visual_debug_folder() const {
  return _internal_has_visual_debug_folder();
}
inline void FusionCameraDetection::clear_visual_debug_folder() {
  visual_debug_folder_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& FusionCameraDetection::visual_debug_folder() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
  return _internal_visual_debug_folder();
}
inline void FusionCameraDetection::set_visual_debug_folder(const std::string& value) {
  _internal_set_visual_debug_folder(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
}
inline std::string* FusionCameraDetection::mutable_visual_debug_folder() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
  return _internal_mutable_visual_debug_folder();
}
inline const std::string& FusionCameraDetection::_internal_visual_debug_folder() const {
  return visual_debug_folder_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_visual_debug_folder(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  visual_debug_folder_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), value);
}
inline void FusionCameraDetection::set_visual_debug_folder(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  visual_debug_folder_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
}
inline void FusionCameraDetection::set_visual_debug_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  visual_debug_folder_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
}
inline void FusionCameraDetection::set_visual_debug_folder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  visual_debug_folder_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
}
inline std::string* FusionCameraDetection::_internal_mutable_visual_debug_folder() {
  _has_bits_[0] |= 0x00000800u;
  return visual_debug_folder_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get());
}
inline std::string* FusionCameraDetection::release_visual_debug_folder() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
  if (!_internal_has_visual_debug_folder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return visual_debug_folder_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get());
}
inline void FusionCameraDetection::set_allocated_visual_debug_folder(std::string* visual_debug_folder) {
  if (visual_debug_folder != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  visual_debug_folder_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_debug_folder_.get(), visual_debug_folder);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.visual_debug_folder)
}

// optional string visual_camera = 24 [default = "front_6mm"];
inline bool FusionCameraDetection::_internal_has_visual_camera() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_visual_camera() const {
  return _internal_has_visual_camera();
}
inline void FusionCameraDetection::clear_visual_camera() {
  visual_camera_.ClearToDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& FusionCameraDetection::visual_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.visual_camera)
  return _internal_visual_camera();
}
inline void FusionCameraDetection::set_visual_camera(const std::string& value) {
  _internal_set_visual_camera(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.visual_camera)
}
inline std::string* FusionCameraDetection::mutable_visual_camera() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.onboard.FusionCameraDetection.visual_camera)
  return _internal_mutable_visual_camera();
}
inline const std::string& FusionCameraDetection::_internal_visual_camera() const {
  return visual_camera_.GetNoArena();
}
inline void FusionCameraDetection::_internal_set_visual_camera(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  visual_camera_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), value);
}
inline void FusionCameraDetection::set_visual_camera(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  visual_camera_.SetNoArena(
    &::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.onboard.FusionCameraDetection.visual_camera)
}
inline void FusionCameraDetection::set_visual_camera(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  visual_camera_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.onboard.FusionCameraDetection.visual_camera)
}
inline void FusionCameraDetection::set_visual_camera(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  visual_camera_.SetNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.onboard.FusionCameraDetection.visual_camera)
}
inline std::string* FusionCameraDetection::_internal_mutable_visual_camera() {
  _has_bits_[0] |= 0x00001000u;
  return visual_camera_.MutableNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get());
}
inline std::string* FusionCameraDetection::release_visual_camera() {
  // @@protoc_insertion_point(field_release:apollo.perception.onboard.FusionCameraDetection.visual_camera)
  if (!_internal_has_visual_camera()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return visual_camera_.ReleaseNonDefaultNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get());
}
inline void FusionCameraDetection::set_allocated_visual_camera(std::string* visual_camera) {
  if (visual_camera != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  visual_camera_.SetAllocatedNoArena(&::apollo::perception::onboard::FusionCameraDetection::_i_give_permission_to_break_this_code_default_visual_camera_.get(), visual_camera);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.onboard.FusionCameraDetection.visual_camera)
}

// optional bool write_visual_img = 25 [default = false];
inline bool FusionCameraDetection::_internal_has_write_visual_img() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_write_visual_img() const {
  return _internal_has_write_visual_img();
}
inline void FusionCameraDetection::clear_write_visual_img() {
  write_visual_img_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool FusionCameraDetection::_internal_write_visual_img() const {
  return write_visual_img_;
}
inline bool FusionCameraDetection::write_visual_img() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.write_visual_img)
  return _internal_write_visual_img();
}
inline void FusionCameraDetection::_internal_set_write_visual_img(bool value) {
  _has_bits_[0] |= 0x00080000u;
  write_visual_img_ = value;
}
inline void FusionCameraDetection::set_write_visual_img(bool value) {
  _internal_set_write_visual_img(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.write_visual_img)
}

// optional double min_laneline_length_for_cipv = 26 [default = 2];
inline bool FusionCameraDetection::_internal_has_min_laneline_length_for_cipv() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_min_laneline_length_for_cipv() const {
  return _internal_has_min_laneline_length_for_cipv();
}
inline void FusionCameraDetection::clear_min_laneline_length_for_cipv() {
  min_laneline_length_for_cipv_ = 2;
  _has_bits_[0] &= ~0x10000000u;
}
inline double FusionCameraDetection::_internal_min_laneline_length_for_cipv() const {
  return min_laneline_length_for_cipv_;
}
inline double FusionCameraDetection::min_laneline_length_for_cipv() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.min_laneline_length_for_cipv)
  return _internal_min_laneline_length_for_cipv();
}
inline void FusionCameraDetection::_internal_set_min_laneline_length_for_cipv(double value) {
  _has_bits_[0] |= 0x10000000u;
  min_laneline_length_for_cipv_ = value;
}
inline void FusionCameraDetection::set_min_laneline_length_for_cipv(double value) {
  _internal_set_min_laneline_length_for_cipv(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.min_laneline_length_for_cipv)
}

// optional double average_lane_width_in_meter = 27 [default = 3.7];
inline bool FusionCameraDetection::_internal_has_average_lane_width_in_meter() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_average_lane_width_in_meter() const {
  return _internal_has_average_lane_width_in_meter();
}
inline void FusionCameraDetection::clear_average_lane_width_in_meter() {
  average_lane_width_in_meter_ = 3.7;
  _has_bits_[0] &= ~0x20000000u;
}
inline double FusionCameraDetection::_internal_average_lane_width_in_meter() const {
  return average_lane_width_in_meter_;
}
inline double FusionCameraDetection::average_lane_width_in_meter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.average_lane_width_in_meter)
  return _internal_average_lane_width_in_meter();
}
inline void FusionCameraDetection::_internal_set_average_lane_width_in_meter(double value) {
  _has_bits_[0] |= 0x20000000u;
  average_lane_width_in_meter_ = value;
}
inline void FusionCameraDetection::set_average_lane_width_in_meter(double value) {
  _internal_set_average_lane_width_in_meter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.average_lane_width_in_meter)
}

// optional double max_vehicle_width_in_meter = 28 [default = 2.5];
inline bool FusionCameraDetection::_internal_has_max_vehicle_width_in_meter() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_max_vehicle_width_in_meter() const {
  return _internal_has_max_vehicle_width_in_meter();
}
inline void FusionCameraDetection::clear_max_vehicle_width_in_meter() {
  max_vehicle_width_in_meter_ = 2.5;
  _has_bits_[0] &= ~0x40000000u;
}
inline double FusionCameraDetection::_internal_max_vehicle_width_in_meter() const {
  return max_vehicle_width_in_meter_;
}
inline double FusionCameraDetection::max_vehicle_width_in_meter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.max_vehicle_width_in_meter)
  return _internal_max_vehicle_width_in_meter();
}
inline void FusionCameraDetection::_internal_set_max_vehicle_width_in_meter(double value) {
  _has_bits_[0] |= 0x40000000u;
  max_vehicle_width_in_meter_ = value;
}
inline void FusionCameraDetection::set_max_vehicle_width_in_meter(double value) {
  _internal_set_max_vehicle_width_in_meter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.max_vehicle_width_in_meter)
}

// optional double average_frame_rate = 29 [default = 0.05];
inline bool FusionCameraDetection::_internal_has_average_frame_rate() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_average_frame_rate() const {
  return _internal_has_average_frame_rate();
}
inline void FusionCameraDetection::clear_average_frame_rate() {
  average_frame_rate_ = 0.05;
  _has_bits_[0] &= ~0x80000000u;
}
inline double FusionCameraDetection::_internal_average_frame_rate() const {
  return average_frame_rate_;
}
inline double FusionCameraDetection::average_frame_rate() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.average_frame_rate)
  return _internal_average_frame_rate();
}
inline void FusionCameraDetection::_internal_set_average_frame_rate(double value) {
  _has_bits_[0] |= 0x80000000u;
  average_frame_rate_ = value;
}
inline void FusionCameraDetection::set_average_frame_rate(double value) {
  _internal_set_average_frame_rate(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.average_frame_rate)
}

// optional bool image_based_cipv = 30 [default = false];
inline bool FusionCameraDetection::_internal_has_image_based_cipv() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_image_based_cipv() const {
  return _internal_has_image_based_cipv();
}
inline void FusionCameraDetection::clear_image_based_cipv() {
  image_based_cipv_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool FusionCameraDetection::_internal_image_based_cipv() const {
  return image_based_cipv_;
}
inline bool FusionCameraDetection::image_based_cipv() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.image_based_cipv)
  return _internal_image_based_cipv();
}
inline void FusionCameraDetection::_internal_set_image_based_cipv(bool value) {
  _has_bits_[0] |= 0x00100000u;
  image_based_cipv_ = value;
}
inline void FusionCameraDetection::set_image_based_cipv(bool value) {
  _internal_set_image_based_cipv(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.image_based_cipv)
}

// optional int32 debug_level = 31 [default = 0];
inline bool FusionCameraDetection::_internal_has_debug_level() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_debug_level() const {
  return _internal_has_debug_level();
}
inline void FusionCameraDetection::clear_debug_level() {
  debug_level_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FusionCameraDetection::_internal_debug_level() const {
  return debug_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FusionCameraDetection::debug_level() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.debug_level)
  return _internal_debug_level();
}
inline void FusionCameraDetection::_internal_set_debug_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  debug_level_ = value;
}
inline void FusionCameraDetection::set_debug_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_debug_level(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.debug_level)
}

// optional bool enable_cipv = 32 [default = false];
inline bool FusionCameraDetection::_internal_has_enable_cipv() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool FusionCameraDetection::has_enable_cipv() const {
  return _internal_has_enable_cipv();
}
inline void FusionCameraDetection::clear_enable_cipv() {
  enable_cipv_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool FusionCameraDetection::_internal_enable_cipv() const {
  return enable_cipv_;
}
inline bool FusionCameraDetection::enable_cipv() const {
  // @@protoc_insertion_point(field_get:apollo.perception.onboard.FusionCameraDetection.enable_cipv)
  return _internal_enable_cipv();
}
inline void FusionCameraDetection::_internal_set_enable_cipv(bool value) {
  _has_bits_[0] |= 0x00200000u;
  enable_cipv_ = value;
}
inline void FusionCameraDetection::set_enable_cipv(bool value) {
  _internal_set_enable_cipv(value);
  // @@protoc_insertion_point(field_set:apollo.perception.onboard.FusionCameraDetection.enable_cipv)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace onboard
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fonboard_2fproto_2ffusion_5fcamera_5fdetection_5fcomponent_2eproto
