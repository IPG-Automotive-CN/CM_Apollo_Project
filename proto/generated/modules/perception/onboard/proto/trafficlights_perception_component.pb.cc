// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/onboard/proto/trafficlights_perception_component.proto

#include "modules/perception/onboard/proto/trafficlights_perception_component.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace perception {
namespace onboard {
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_TrafficLight_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get_mutable() = std::string("world", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get_mutable() = std::string("perception_localization_100hz", 29);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get_mutable() = std::string("front_6mm,front_12mm", 20);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get_mutable() = std::string("/apollo/sensor/camera/front_6mm,/apollop/sensor/camera/front_12mm", 65);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get_mutable() = std::string("conf/perception/camera", 22);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get_mutable() = std::string("trafficlight.pt", 15);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get_mutable() = std::string("/apollo/perception/traffic_light", 32);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get_mutable() = std::string("/apollo/perception/traffic_light_simulation", 43);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get_mutable());
  ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.DefaultConstruct();
  *::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get_mutable() = std::string("/apollo/v2x/traffic_light", 25);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get_mutable());
  {
    void* ptr = &::apollo::perception::onboard::_TrafficLight_default_instance_;
    new (ptr) ::apollo::perception::onboard::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::onboard::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLight_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficLight_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_tf2_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_tf2_child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tf2_timeout_second_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_channel_names_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, tl_image_timestamp_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, max_process_image_fps_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, query_tf_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, valid_hdmap_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, image_sys_ts_diff_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, sync_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_traffic_light_perception_conf_dir_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, camera_traffic_light_perception_conf_file_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, default_image_border_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, traffic_light_output_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, simulation_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, v2x_trafficlights_input_channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, v2x_sync_interval_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::onboard::TrafficLight, max_v2x_msg_buff_size_),
  0,
  1,
  11,
  2,
  3,
  9,
  15,
  12,
  13,
  14,
  17,
  4,
  5,
  16,
  6,
  7,
  8,
  18,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::apollo::perception::onboard::TrafficLight)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::onboard::_TrafficLight_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nImodules/perception/onboard/proto/traff"
  "iclights_perception_component.proto\022\031apo"
  "llo.perception.onboard\"\341\007\n\014TrafficLight\022"
  "\036\n\017tl_tf2_frame_id\030\001 \001(\t:\005world\022<\n\025tl_tf"
  "2_child_frame_id\030\002 \001(\t:\035perception_local"
  "ization_100hz\022 \n\022tf2_timeout_second\030\003 \001("
  "\001:\0040.01\022*\n\014camera_names\030\004 \001(\t:\024front_6mm"
  ",front_12mm\022_\n\024camera_channel_names\030\005 \001("
  "\t:A/apollo/sensor/camera/front_6mm,/apol"
  "lop/sensor/camera/front_12mm\022$\n\031tl_image"
  "_timestamp_offset\030\006 \001(\001:\0010\022 \n\025max_proces"
  "s_image_fps\030\007 \001(\005:\0018\022&\n\031query_tf_interva"
  "l_seconds\030\010 \001(\001:\0030.3\022!\n\024valid_hdmap_inte"
  "rval\030\t \001(\001:\0031.5\022(\n\033image_sys_ts_diff_thr"
  "eshold\030\n \001(\001:\0030.5\022\"\n\025sync_interval_secon"
  "ds\030\013 \001(\001:\0030.5\022H\n(camera_traffic_light_pe"
  "rception_conf_dir\030\014 \001(\t:\026conf/perception"
  "/camera\022B\n)camera_traffic_light_percepti"
  "on_conf_file\030\r \001(\t:\017trafficlight.pt\022&\n\031d"
  "efault_image_border_size\030\016 \001(\005:\003100\022K\n!t"
  "raffic_light_output_channel_name\030\017 \001(\t: "
  "/apollo/perception/traffic_light\022L\n\027simu"
  "lation_channel_name\030\020 \001(\t:+/apollo/perce"
  "ption/traffic_light_simulation\022G\n$v2x_tr"
  "afficlights_input_channel_name\030\021 \001(\t:\031/a"
  "pollo/v2x/traffic_light\022&\n\031v2x_sync_inte"
  "rval_seconds\030\022 \001(\001:\0030.1\022!\n\025max_v2x_msg_b"
  "uff_size\030\023 \001(\005:\00250"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_sccs[1] = {
  &scc_info_TrafficLight_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_once;
static bool descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = {
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto, "modules/perception/onboard/proto/trafficlights_perception_component.proto", 1098,
  &descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_once, descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_sccs, descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto, 1, file_level_enum_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto, file_level_service_descriptors_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto), true);
namespace apollo {
namespace perception {
namespace onboard {

// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._has_bits_);
  static void set_has_tl_tf2_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tl_tf2_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tf2_timeout_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_camera_names(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_camera_channel_names(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tl_image_timestamp_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_process_image_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_query_tf_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_valid_hdmap_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_image_sys_ts_diff_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sync_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_camera_traffic_light_perception_conf_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_camera_traffic_light_perception_conf_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_image_border_size(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_traffic_light_output_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_simulation_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v2x_trafficlights_input_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_v2x_sync_interval_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_v2x_msg_buff_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_;
TrafficLight::TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.onboard.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tl_tf2_frame_id_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get());
  if (from._internal_has_tl_tf2_frame_id()) {
    tl_tf2_frame_id_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get(), from.tl_tf2_frame_id_);
  }
  tl_tf2_child_frame_id_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get());
  if (from._internal_has_tl_tf2_child_frame_id()) {
    tl_tf2_child_frame_id_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get(), from.tl_tf2_child_frame_id_);
  }
  camera_names_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get());
  if (from._internal_has_camera_names()) {
    camera_names_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get(), from.camera_names_);
  }
  camera_channel_names_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get());
  if (from._internal_has_camera_channel_names()) {
    camera_channel_names_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get(), from.camera_channel_names_);
  }
  camera_traffic_light_perception_conf_dir_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get());
  if (from._internal_has_camera_traffic_light_perception_conf_dir()) {
    camera_traffic_light_perception_conf_dir_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get(), from.camera_traffic_light_perception_conf_dir_);
  }
  camera_traffic_light_perception_conf_file_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get());
  if (from._internal_has_camera_traffic_light_perception_conf_file()) {
    camera_traffic_light_perception_conf_file_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get(), from.camera_traffic_light_perception_conf_file_);
  }
  traffic_light_output_channel_name_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get());
  if (from._internal_has_traffic_light_output_channel_name()) {
    traffic_light_output_channel_name_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get(), from.traffic_light_output_channel_name_);
  }
  simulation_channel_name_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get());
  if (from._internal_has_simulation_channel_name()) {
    simulation_channel_name_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get(), from.simulation_channel_name_);
  }
  v2x_trafficlights_input_channel_name_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get());
  if (from._internal_has_v2x_trafficlights_input_channel_name()) {
    v2x_trafficlights_input_channel_name_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get(), from.v2x_trafficlights_input_channel_name_);
  }
  ::memcpy(&tl_image_timestamp_offset_, &from.tl_image_timestamp_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&v2x_sync_interval_seconds_) -
    reinterpret_cast<char*>(&tl_image_timestamp_offset_)) + sizeof(v2x_sync_interval_seconds_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.onboard.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto.base);
  tl_tf2_frame_id_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get());
  tl_tf2_child_frame_id_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get());
  camera_names_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get());
  camera_channel_names_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get());
  camera_traffic_light_perception_conf_dir_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get());
  camera_traffic_light_perception_conf_file_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get());
  traffic_light_output_channel_name_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get());
  simulation_channel_name_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get());
  v2x_trafficlights_input_channel_name_.UnsafeSetDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get());
  tl_image_timestamp_offset_ = 0;
  max_v2x_msg_buff_size_ = 50;
  tf2_timeout_second_ = 0.01;
  query_tf_interval_seconds_ = 0.3;
  valid_hdmap_interval_ = 1.5;
  image_sys_ts_diff_threshold_ = 0.5;
  max_process_image_fps_ = 8;
  default_image_border_size_ = 100;
  sync_interval_seconds_ = 0.5;
  v2x_sync_interval_seconds_ = 0.1;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.onboard.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  tl_tf2_frame_id_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get());
  tl_tf2_child_frame_id_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get());
  camera_names_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get());
  camera_channel_names_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get());
  camera_traffic_light_perception_conf_dir_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get());
  camera_traffic_light_perception_conf_file_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get());
  traffic_light_output_channel_name_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get());
  simulation_channel_name_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get());
  v2x_trafficlights_input_channel_name_.DestroyNoArena(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get());
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_modules_2fperception_2fonboard_2fproto_2ftrafficlights_5fperception_5fcomponent_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.onboard.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tl_tf2_frame_id_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      tl_tf2_child_frame_id_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      camera_names_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      camera_channel_names_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      camera_traffic_light_perception_conf_dir_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      camera_traffic_light_perception_conf_file_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      traffic_light_output_channel_name_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get());
    }
    if (cached_has_bits & 0x00000080u) {
      simulation_channel_name_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    v2x_trafficlights_input_channel_name_.UnsafeMutablePointer()->assign(*&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get());
  }
  if (cached_has_bits & 0x0000fe00u) {
    tl_image_timestamp_offset_ = 0;
    max_v2x_msg_buff_size_ = 50;
    tf2_timeout_second_ = 0.01;
    query_tf_interval_seconds_ = 0.3;
    valid_hdmap_interval_ = 1.5;
    image_sys_ts_diff_threshold_ = 0.5;
    max_process_image_fps_ = 8;
  }
  if (cached_has_bits & 0x00070000u) {
    default_image_border_size_ = 100;
    sync_interval_seconds_ = 0.5;
    v2x_sync_interval_seconds_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tl_tf2_frame_id = 1 [default = "world"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tl_tf2_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.tl_tf2_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tl_tf2_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double tf2_timeout_second = 3 [default = 0.01];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_tf2_timeout_second(&has_bits);
          tf2_timeout_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_camera_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_names");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollop/sensor/camera/front_12mm"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_camera_channel_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_channel_names");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double tl_image_timestamp_offset = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_tl_image_timestamp_offset(&has_bits);
          tl_image_timestamp_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 max_process_image_fps = 7 [default = 8];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_process_image_fps(&has_bits);
          max_process_image_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double query_tf_interval_seconds = 8 [default = 0.3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_query_tf_interval_seconds(&has_bits);
          query_tf_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double valid_hdmap_interval = 9 [default = 1.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_valid_hdmap_interval(&has_bits);
          valid_hdmap_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_image_sys_ts_diff_threshold(&has_bits);
          image_sys_ts_diff_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sync_interval_seconds = 11 [default = 0.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_sync_interval_seconds(&has_bits);
          sync_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_camera_traffic_light_perception_conf_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_camera_traffic_light_perception_conf_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 default_image_border_size = 14 [default = 100];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_default_image_border_size(&has_bits);
          default_image_border_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_traffic_light_output_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_simulation_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.simulation_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_v2x_trafficlights_input_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_v2x_sync_interval_seconds(&has_bits);
          v2x_sync_interval_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_max_v2x_msg_buff_size(&has_bits);
          max_v2x_msg_buff_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.onboard.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tl_tf2_frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tl_tf2_frame_id().data(), static_cast<int>(this->_internal_tl_tf2_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.tl_tf2_frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tl_tf2_frame_id(), target);
  }

  // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tl_tf2_child_frame_id().data(), static_cast<int>(this->_internal_tl_tf2_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.tl_tf2_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tl_tf2_child_frame_id(), target);
  }

  // optional double tf2_timeout_second = 3 [default = 0.01];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tf2_timeout_second(), target);
  }

  // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_names().data(), static_cast<int>(this->_internal_camera_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_names");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_camera_names(), target);
  }

  // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollop/sensor/camera/front_12mm"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_channel_names().data(), static_cast<int>(this->_internal_camera_channel_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_channel_names");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_camera_channel_names(), target);
  }

  // optional double tl_image_timestamp_offset = 6 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_tl_image_timestamp_offset(), target);
  }

  // optional int32 max_process_image_fps = 7 [default = 8];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_process_image_fps(), target);
  }

  // optional double query_tf_interval_seconds = 8 [default = 0.3];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_query_tf_interval_seconds(), target);
  }

  // optional double valid_hdmap_interval = 9 [default = 1.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_valid_hdmap_interval(), target);
  }

  // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_image_sys_ts_diff_threshold(), target);
  }

  // optional double sync_interval_seconds = 11 [default = 0.5];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_sync_interval_seconds(), target);
  }

  // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_traffic_light_perception_conf_dir().data(), static_cast<int>(this->_internal_camera_traffic_light_perception_conf_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_dir");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_camera_traffic_light_perception_conf_dir(), target);
  }

  // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_traffic_light_perception_conf_file().data(), static_cast<int>(this->_internal_camera_traffic_light_perception_conf_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.camera_traffic_light_perception_conf_file");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_camera_traffic_light_perception_conf_file(), target);
  }

  // optional int32 default_image_border_size = 14 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_default_image_border_size(), target);
  }

  // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_traffic_light_output_channel_name().data(), static_cast<int>(this->_internal_traffic_light_output_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.traffic_light_output_channel_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_traffic_light_output_channel_name(), target);
  }

  // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_simulation_channel_name().data(), static_cast<int>(this->_internal_simulation_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.simulation_channel_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_simulation_channel_name(), target);
  }

  // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v2x_trafficlights_input_channel_name().data(), static_cast<int>(this->_internal_v2x_trafficlights_input_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.onboard.TrafficLight.v2x_trafficlights_input_channel_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_v2x_trafficlights_input_channel_name(), target);
  }

  // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_v2x_sync_interval_seconds(), target);
  }

  // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_max_v2x_msg_buff_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.onboard.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.onboard.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tl_tf2_frame_id = 1 [default = "world"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tl_tf2_frame_id());
    }

    // optional string tl_tf2_child_frame_id = 2 [default = "perception_localization_100hz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tl_tf2_child_frame_id());
    }

    // optional string camera_names = 4 [default = "front_6mm,front_12mm"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_names());
    }

    // optional string camera_channel_names = 5 [default = "/apollo/sensor/camera/front_6mm,/apollop/sensor/camera/front_12mm"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_channel_names());
    }

    // optional string camera_traffic_light_perception_conf_dir = 12 [default = "conf/perception/camera"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_traffic_light_perception_conf_dir());
    }

    // optional string camera_traffic_light_perception_conf_file = 13 [default = "trafficlight.pt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_traffic_light_perception_conf_file());
    }

    // optional string traffic_light_output_channel_name = 15 [default = "/apollo/perception/traffic_light"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_traffic_light_output_channel_name());
    }

    // optional string simulation_channel_name = 16 [default = "/apollo/perception/traffic_light_simulation"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_simulation_channel_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string v2x_trafficlights_input_channel_name = 17 [default = "/apollo/v2x/traffic_light"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v2x_trafficlights_input_channel_name());
    }

    // optional double tl_image_timestamp_offset = 6 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 max_v2x_msg_buff_size = 19 [default = 50];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_v2x_msg_buff_size());
    }

    // optional double tf2_timeout_second = 3 [default = 0.01];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double query_tf_interval_seconds = 8 [default = 0.3];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double valid_hdmap_interval = 9 [default = 1.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double image_sys_ts_diff_threshold = 10 [default = 0.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_process_image_fps = 7 [default = 8];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_process_image_fps());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional int32 default_image_border_size = 14 [default = 100];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_default_image_border_size());
    }

    // optional double sync_interval_seconds = 11 [default = 0.5];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double v2x_sync_interval_seconds = 18 [default = 0.1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.onboard.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.onboard.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.onboard.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.onboard.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tl_tf2_frame_id_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get(), from.tl_tf2_frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tl_tf2_child_frame_id_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get(), from.tl_tf2_child_frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      camera_names_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get(), from.camera_names_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      camera_channel_names_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get(), from.camera_channel_names_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      camera_traffic_light_perception_conf_dir_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get(), from.camera_traffic_light_perception_conf_dir_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      camera_traffic_light_perception_conf_file_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get(), from.camera_traffic_light_perception_conf_file_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      traffic_light_output_channel_name_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get(), from.traffic_light_output_channel_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      simulation_channel_name_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get(), from.simulation_channel_name_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      v2x_trafficlights_input_channel_name_.AssignWithDefault(&::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get(), from.v2x_trafficlights_input_channel_name_);
    }
    if (cached_has_bits & 0x00000200u) {
      tl_image_timestamp_offset_ = from.tl_image_timestamp_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_v2x_msg_buff_size_ = from.max_v2x_msg_buff_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      tf2_timeout_second_ = from.tf2_timeout_second_;
    }
    if (cached_has_bits & 0x00001000u) {
      query_tf_interval_seconds_ = from.query_tf_interval_seconds_;
    }
    if (cached_has_bits & 0x00002000u) {
      valid_hdmap_interval_ = from.valid_hdmap_interval_;
    }
    if (cached_has_bits & 0x00004000u) {
      image_sys_ts_diff_threshold_ = from.image_sys_ts_diff_threshold_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_process_image_fps_ = from.max_process_image_fps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      default_image_border_size_ = from.default_image_border_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      sync_interval_seconds_ = from.sync_interval_seconds_;
    }
    if (cached_has_bits & 0x00040000u) {
      v2x_sync_interval_seconds_ = from.v2x_sync_interval_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.onboard.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.onboard.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tl_tf2_frame_id_.Swap(&other->tl_tf2_frame_id_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_frame_id_.get(),
    GetArenaNoVirtual());
  tl_tf2_child_frame_id_.Swap(&other->tl_tf2_child_frame_id_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_tl_tf2_child_frame_id_.get(),
    GetArenaNoVirtual());
  camera_names_.Swap(&other->camera_names_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_names_.get(),
    GetArenaNoVirtual());
  camera_channel_names_.Swap(&other->camera_channel_names_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_channel_names_.get(),
    GetArenaNoVirtual());
  camera_traffic_light_perception_conf_dir_.Swap(&other->camera_traffic_light_perception_conf_dir_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_dir_.get(),
    GetArenaNoVirtual());
  camera_traffic_light_perception_conf_file_.Swap(&other->camera_traffic_light_perception_conf_file_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_camera_traffic_light_perception_conf_file_.get(),
    GetArenaNoVirtual());
  traffic_light_output_channel_name_.Swap(&other->traffic_light_output_channel_name_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_traffic_light_output_channel_name_.get(),
    GetArenaNoVirtual());
  simulation_channel_name_.Swap(&other->simulation_channel_name_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_simulation_channel_name_.get(),
    GetArenaNoVirtual());
  v2x_trafficlights_input_channel_name_.Swap(&other->v2x_trafficlights_input_channel_name_, &::apollo::perception::onboard::TrafficLight::_i_give_permission_to_break_this_code_default_v2x_trafficlights_input_channel_name_.get(),
    GetArenaNoVirtual());
  swap(tl_image_timestamp_offset_, other->tl_image_timestamp_offset_);
  swap(max_v2x_msg_buff_size_, other->max_v2x_msg_buff_size_);
  swap(tf2_timeout_second_, other->tf2_timeout_second_);
  swap(query_tf_interval_seconds_, other->query_tf_interval_seconds_);
  swap(valid_hdmap_interval_, other->valid_hdmap_interval_);
  swap(image_sys_ts_diff_threshold_, other->image_sys_ts_diff_threshold_);
  swap(max_process_image_fps_, other->max_process_image_fps_);
  swap(default_image_border_size_, other->default_image_border_size_);
  swap(sync_interval_seconds_, other->sync_interval_seconds_);
  swap(v2x_sync_interval_seconds_, other->v2x_sync_interval_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace onboard
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::onboard::TrafficLight* Arena::CreateMaybeMessage< ::apollo::perception::onboard::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::onboard::TrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
