// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/app/proto/lidar_obstacle_segmentation_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class LidarObstacleSegmentationConfig;
class LidarObstacleSegmentationConfigDefaultTypeInternal;
extern LidarObstacleSegmentationConfigDefaultTypeInternal _LidarObstacleSegmentationConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::LidarObstacleSegmentationConfig* Arena::CreateMaybeMessage<::apollo::perception::lidar::LidarObstacleSegmentationConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class LidarObstacleSegmentationConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.LidarObstacleSegmentationConfig) */ {
 public:
  LidarObstacleSegmentationConfig();
  virtual ~LidarObstacleSegmentationConfig();

  LidarObstacleSegmentationConfig(const LidarObstacleSegmentationConfig& from);
  LidarObstacleSegmentationConfig(LidarObstacleSegmentationConfig&& from) noexcept
    : LidarObstacleSegmentationConfig() {
    *this = ::std::move(from);
  }

  inline LidarObstacleSegmentationConfig& operator=(const LidarObstacleSegmentationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarObstacleSegmentationConfig& operator=(LidarObstacleSegmentationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarObstacleSegmentationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarObstacleSegmentationConfig* internal_default_instance() {
    return reinterpret_cast<const LidarObstacleSegmentationConfig*>(
               &_LidarObstacleSegmentationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LidarObstacleSegmentationConfig& a, LidarObstacleSegmentationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarObstacleSegmentationConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarObstacleSegmentationConfig* New() const final {
    return CreateMaybeMessage<LidarObstacleSegmentationConfig>(nullptr);
  }

  LidarObstacleSegmentationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarObstacleSegmentationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarObstacleSegmentationConfig& from);
  void MergeFrom(const LidarObstacleSegmentationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarObstacleSegmentationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.LidarObstacleSegmentationConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentorFieldNumber = 1,
    kUseMapManagerFieldNumber = 2,
    kUseObjectFilterBankFieldNumber = 3,
  };
  // optional string segmentor = 1 [default = "DummySegmentation"];
  bool has_segmentor() const;
  private:
  bool _internal_has_segmentor() const;
  public:
  void clear_segmentor();
  const std::string& segmentor() const;
  void set_segmentor(const std::string& value);
  void set_segmentor(std::string&& value);
  void set_segmentor(const char* value);
  void set_segmentor(const char* value, size_t size);
  std::string* mutable_segmentor();
  std::string* release_segmentor();
  void set_allocated_segmentor(std::string* segmentor);
  private:
  const std::string& _internal_segmentor() const;
  void _internal_set_segmentor(const std::string& value);
  std::string* _internal_mutable_segmentor();
  public:

  // optional bool use_map_manager = 2 [default = true];
  bool has_use_map_manager() const;
  private:
  bool _internal_has_use_map_manager() const;
  public:
  void clear_use_map_manager();
  bool use_map_manager() const;
  void set_use_map_manager(bool value);
  private:
  bool _internal_use_map_manager() const;
  void _internal_set_use_map_manager(bool value);
  public:

  // optional bool use_object_filter_bank = 3 [default = true];
  bool has_use_object_filter_bank() const;
  private:
  bool _internal_has_use_object_filter_bank() const;
  public:
  void clear_use_object_filter_bank();
  bool use_object_filter_bank() const;
  void set_use_object_filter_bank(bool value);
  private:
  bool _internal_use_object_filter_bank() const;
  void _internal_set_use_object_filter_bank(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.LidarObstacleSegmentationConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_segmentor_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr segmentor_;
  bool use_map_manager_;
  bool use_object_filter_bank_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarObstacleSegmentationConfig

// optional string segmentor = 1 [default = "DummySegmentation"];
inline bool LidarObstacleSegmentationConfig::_internal_has_segmentor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LidarObstacleSegmentationConfig::has_segmentor() const {
  return _internal_has_segmentor();
}
inline void LidarObstacleSegmentationConfig::clear_segmentor() {
  segmentor_.ClearToDefaultNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LidarObstacleSegmentationConfig::segmentor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
  return _internal_segmentor();
}
inline void LidarObstacleSegmentationConfig::set_segmentor(const std::string& value) {
  _internal_set_segmentor(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
}
inline std::string* LidarObstacleSegmentationConfig::mutable_segmentor() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
  return _internal_mutable_segmentor();
}
inline const std::string& LidarObstacleSegmentationConfig::_internal_segmentor() const {
  return segmentor_.GetNoArena();
}
inline void LidarObstacleSegmentationConfig::_internal_set_segmentor(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  segmentor_.SetNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get(), value);
}
inline void LidarObstacleSegmentationConfig::set_segmentor(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  segmentor_.SetNoArena(
    &::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
}
inline void LidarObstacleSegmentationConfig::set_segmentor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  segmentor_.SetNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
}
inline void LidarObstacleSegmentationConfig::set_segmentor(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  segmentor_.SetNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
}
inline std::string* LidarObstacleSegmentationConfig::_internal_mutable_segmentor() {
  _has_bits_[0] |= 0x00000001u;
  return segmentor_.MutableNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get());
}
inline std::string* LidarObstacleSegmentationConfig::release_segmentor() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
  if (!_internal_has_segmentor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return segmentor_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get());
}
inline void LidarObstacleSegmentationConfig::set_allocated_segmentor(std::string* segmentor) {
  if (segmentor != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  segmentor_.SetAllocatedNoArena(&::apollo::perception::lidar::LidarObstacleSegmentationConfig::_i_give_permission_to_break_this_code_default_segmentor_.get(), segmentor);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.LidarObstacleSegmentationConfig.segmentor)
}

// optional bool use_map_manager = 2 [default = true];
inline bool LidarObstacleSegmentationConfig::_internal_has_use_map_manager() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LidarObstacleSegmentationConfig::has_use_map_manager() const {
  return _internal_has_use_map_manager();
}
inline void LidarObstacleSegmentationConfig::clear_use_map_manager() {
  use_map_manager_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LidarObstacleSegmentationConfig::_internal_use_map_manager() const {
  return use_map_manager_;
}
inline bool LidarObstacleSegmentationConfig::use_map_manager() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleSegmentationConfig.use_map_manager)
  return _internal_use_map_manager();
}
inline void LidarObstacleSegmentationConfig::_internal_set_use_map_manager(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_map_manager_ = value;
}
inline void LidarObstacleSegmentationConfig::set_use_map_manager(bool value) {
  _internal_set_use_map_manager(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleSegmentationConfig.use_map_manager)
}

// optional bool use_object_filter_bank = 3 [default = true];
inline bool LidarObstacleSegmentationConfig::_internal_has_use_object_filter_bank() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LidarObstacleSegmentationConfig::has_use_object_filter_bank() const {
  return _internal_has_use_object_filter_bank();
}
inline void LidarObstacleSegmentationConfig::clear_use_object_filter_bank() {
  use_object_filter_bank_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LidarObstacleSegmentationConfig::_internal_use_object_filter_bank() const {
  return use_object_filter_bank_;
}
inline bool LidarObstacleSegmentationConfig::use_object_filter_bank() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.LidarObstacleSegmentationConfig.use_object_filter_bank)
  return _internal_use_object_filter_bank();
}
inline void LidarObstacleSegmentationConfig::_internal_set_use_object_filter_bank(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_object_filter_bank_ = value;
}
inline void LidarObstacleSegmentationConfig::set_use_object_filter_bank(bool value) {
  _internal_set_use_object_filter_bank(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.LidarObstacleSegmentationConfig.use_object_filter_bank)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5fsegmentation_5fconfig_2eproto
