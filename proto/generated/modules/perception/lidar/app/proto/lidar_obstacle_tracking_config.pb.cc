// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/app/proto/lidar_obstacle_tracking_config.proto

#include "modules/perception/lidar/app/proto/lidar_obstacle_tracking_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace perception {
namespace lidar {
class LidarObstacleTrackingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarObstacleTrackingConfig> _instance;
} _LidarObstacleTrackingConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_LidarObstacleTrackingConfig_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.DefaultConstruct();
  *::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get_mutable() = std::string("DummyMultiTargetTracker", 23);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get_mutable());
  ::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.DefaultConstruct();
  *::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get_mutable() = std::string("DummyClassifier", 15);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get_mutable());
  ::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.DefaultConstruct();
  *::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get_mutable() = std::string("DummyClassifier", 15);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_LidarObstacleTrackingConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::LidarObstacleTrackingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::LidarObstacleTrackingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarObstacleTrackingConfig_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LidarObstacleTrackingConfig_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::LidarObstacleTrackingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::LidarObstacleTrackingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::LidarObstacleTrackingConfig, multi_target_tracker_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::LidarObstacleTrackingConfig, frame_classifier_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::LidarObstacleTrackingConfig, fusion_classifier_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::perception::lidar::LidarObstacleTrackingConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_LidarObstacleTrackingConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nGmodules/perception/lidar/app/proto/lid"
  "ar_obstacle_tracking_config.proto\022\027apoll"
  "o.perception.lidar\"\253\001\n\033LidarObstacleTrac"
  "kingConfig\0225\n\024multi_target_tracker\030\001 \001(\t"
  ":\027DummyMultiTargetTracker\022)\n\020frame_class"
  "ifier\030\002 \001(\t:\017DummyClassifier\022*\n\021fusion_c"
  "lassifier\030\003 \001(\t:\017DummyClassifier"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_sccs[1] = {
  &scc_info_LidarObstacleTrackingConfig_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto = {
  &descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto, "modules/perception/lidar/app/proto/lidar_obstacle_tracking_config.proto", 272,
  &descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_once, descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_sccs, descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto), true);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void LidarObstacleTrackingConfig::InitAsDefaultInstance() {
}
class LidarObstacleTrackingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarObstacleTrackingConfig>()._has_bits_);
  static void set_has_multi_target_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fusion_classifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_;
LidarObstacleTrackingConfig::LidarObstacleTrackingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.LidarObstacleTrackingConfig)
}
LidarObstacleTrackingConfig::LidarObstacleTrackingConfig(const LidarObstacleTrackingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  multi_target_tracker_.UnsafeSetDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get());
  if (from._internal_has_multi_target_tracker()) {
    multi_target_tracker_.AssignWithDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get(), from.multi_target_tracker_);
  }
  frame_classifier_.UnsafeSetDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get());
  if (from._internal_has_frame_classifier()) {
    frame_classifier_.AssignWithDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get(), from.frame_classifier_);
  }
  fusion_classifier_.UnsafeSetDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get());
  if (from._internal_has_fusion_classifier()) {
    fusion_classifier_.AssignWithDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get(), from.fusion_classifier_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.LidarObstacleTrackingConfig)
}

void LidarObstacleTrackingConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarObstacleTrackingConfig_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto.base);
  multi_target_tracker_.UnsafeSetDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get());
  frame_classifier_.UnsafeSetDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get());
  fusion_classifier_.UnsafeSetDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get());
}

LidarObstacleTrackingConfig::~LidarObstacleTrackingConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.LidarObstacleTrackingConfig)
  SharedDtor();
}

void LidarObstacleTrackingConfig::SharedDtor() {
  multi_target_tracker_.DestroyNoArena(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get());
  frame_classifier_.DestroyNoArena(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get());
  fusion_classifier_.DestroyNoArena(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get());
}

void LidarObstacleTrackingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarObstacleTrackingConfig& LidarObstacleTrackingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarObstacleTrackingConfig_modules_2fperception_2flidar_2fapp_2fproto_2flidar_5fobstacle_5ftracking_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LidarObstacleTrackingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      multi_target_tracker_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      frame_classifier_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      fusion_classifier_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LidarObstacleTrackingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string multi_target_tracker = 1 [default = "DummyMultiTargetTracker"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_multi_target_tracker();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.LidarObstacleTrackingConfig.multi_target_tracker");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string frame_classifier = 2 [default = "DummyClassifier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_classifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.LidarObstacleTrackingConfig.frame_classifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fusion_classifier = 3 [default = "DummyClassifier"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fusion_classifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.LidarObstacleTrackingConfig.fusion_classifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarObstacleTrackingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string multi_target_tracker = 1 [default = "DummyMultiTargetTracker"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_multi_target_tracker().data(), static_cast<int>(this->_internal_multi_target_tracker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.LidarObstacleTrackingConfig.multi_target_tracker");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_multi_target_tracker(), target);
  }

  // optional string frame_classifier = 2 [default = "DummyClassifier"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_classifier().data(), static_cast<int>(this->_internal_frame_classifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.LidarObstacleTrackingConfig.frame_classifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_classifier(), target);
  }

  // optional string fusion_classifier = 3 [default = "DummyClassifier"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fusion_classifier().data(), static_cast<int>(this->_internal_fusion_classifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.LidarObstacleTrackingConfig.fusion_classifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fusion_classifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.LidarObstacleTrackingConfig)
  return target;
}

size_t LidarObstacleTrackingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string multi_target_tracker = 1 [default = "DummyMultiTargetTracker"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_multi_target_tracker());
    }

    // optional string frame_classifier = 2 [default = "DummyClassifier"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_classifier());
    }

    // optional string fusion_classifier = 3 [default = "DummyClassifier"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fusion_classifier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarObstacleTrackingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarObstacleTrackingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarObstacleTrackingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.LidarObstacleTrackingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.LidarObstacleTrackingConfig)
    MergeFrom(*source);
  }
}

void LidarObstacleTrackingConfig::MergeFrom(const LidarObstacleTrackingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      multi_target_tracker_.AssignWithDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get(), from.multi_target_tracker_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      frame_classifier_.AssignWithDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get(), from.frame_classifier_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      fusion_classifier_.AssignWithDefault(&::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get(), from.fusion_classifier_);
    }
  }
}

void LidarObstacleTrackingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarObstacleTrackingConfig::CopyFrom(const LidarObstacleTrackingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.LidarObstacleTrackingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarObstacleTrackingConfig::IsInitialized() const {
  return true;
}

void LidarObstacleTrackingConfig::InternalSwap(LidarObstacleTrackingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  multi_target_tracker_.Swap(&other->multi_target_tracker_, &::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_multi_target_tracker_.get(),
    GetArenaNoVirtual());
  frame_classifier_.Swap(&other->frame_classifier_, &::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_frame_classifier_.get(),
    GetArenaNoVirtual());
  fusion_classifier_.Swap(&other->fusion_classifier_, &::apollo::perception::lidar::LidarObstacleTrackingConfig::_i_give_permission_to_break_this_code_default_fusion_classifier_.get(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarObstacleTrackingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::LidarObstacleTrackingConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::LidarObstacleTrackingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::LidarObstacleTrackingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
