// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/roi_filter/hdmap_roi_filter/proto/hdmap_roi_filter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class HDMapRoiFilterConfig;
class HDMapRoiFilterConfigDefaultTypeInternal;
extern HDMapRoiFilterConfigDefaultTypeInternal _HDMapRoiFilterConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::HDMapRoiFilterConfig* Arena::CreateMaybeMessage<::apollo::perception::lidar::HDMapRoiFilterConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class HDMapRoiFilterConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.HDMapRoiFilterConfig) */ {
 public:
  HDMapRoiFilterConfig();
  virtual ~HDMapRoiFilterConfig();

  HDMapRoiFilterConfig(const HDMapRoiFilterConfig& from);
  HDMapRoiFilterConfig(HDMapRoiFilterConfig&& from) noexcept
    : HDMapRoiFilterConfig() {
    *this = ::std::move(from);
  }

  inline HDMapRoiFilterConfig& operator=(const HDMapRoiFilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDMapRoiFilterConfig& operator=(HDMapRoiFilterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HDMapRoiFilterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDMapRoiFilterConfig* internal_default_instance() {
    return reinterpret_cast<const HDMapRoiFilterConfig*>(
               &_HDMapRoiFilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HDMapRoiFilterConfig& a, HDMapRoiFilterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HDMapRoiFilterConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HDMapRoiFilterConfig* New() const final {
    return CreateMaybeMessage<HDMapRoiFilterConfig>(nullptr);
  }

  HDMapRoiFilterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HDMapRoiFilterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HDMapRoiFilterConfig& from);
  void MergeFrom(const HDMapRoiFilterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDMapRoiFilterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.HDMapRoiFilterConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtendDistFieldNumber = 3,
    kNoEdgeTableFieldNumber = 4,
    kSetRoiServiceFieldNumber = 5,
    kRangeFieldNumber = 1,
    kCellSizeFieldNumber = 2,
  };
  // optional double extend_dist = 3 [default = 0];
  bool has_extend_dist() const;
  private:
  bool _internal_has_extend_dist() const;
  public:
  void clear_extend_dist();
  double extend_dist() const;
  void set_extend_dist(double value);
  private:
  double _internal_extend_dist() const;
  void _internal_set_extend_dist(double value);
  public:

  // optional bool no_edge_table = 4 [default = false];
  bool has_no_edge_table() const;
  private:
  bool _internal_has_no_edge_table() const;
  public:
  void clear_no_edge_table();
  bool no_edge_table() const;
  void set_no_edge_table(bool value);
  private:
  bool _internal_no_edge_table() const;
  void _internal_set_no_edge_table(bool value);
  public:

  // optional bool set_roi_service = 5 [default = false];
  bool has_set_roi_service() const;
  private:
  bool _internal_has_set_roi_service() const;
  public:
  void clear_set_roi_service();
  bool set_roi_service() const;
  void set_set_roi_service(bool value);
  private:
  bool _internal_set_roi_service() const;
  void _internal_set_set_roi_service(bool value);
  public:

  // optional double range = 1 [default = 120];
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  double range() const;
  void set_range(double value);
  private:
  double _internal_range() const;
  void _internal_set_range(double value);
  public:

  // optional double cell_size = 2 [default = 0.25];
  bool has_cell_size() const;
  private:
  bool _internal_has_cell_size() const;
  public:
  void clear_cell_size();
  double cell_size() const;
  void set_cell_size(double value);
  private:
  double _internal_cell_size() const;
  void _internal_set_cell_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.HDMapRoiFilterConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double extend_dist_;
  bool no_edge_table_;
  bool set_roi_service_;
  double range_;
  double cell_size_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HDMapRoiFilterConfig

// optional double range = 1 [default = 120];
inline bool HDMapRoiFilterConfig::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HDMapRoiFilterConfig::has_range() const {
  return _internal_has_range();
}
inline void HDMapRoiFilterConfig::clear_range() {
  range_ = 120;
  _has_bits_[0] &= ~0x00000008u;
}
inline double HDMapRoiFilterConfig::_internal_range() const {
  return range_;
}
inline double HDMapRoiFilterConfig::range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.HDMapRoiFilterConfig.range)
  return _internal_range();
}
inline void HDMapRoiFilterConfig::_internal_set_range(double value) {
  _has_bits_[0] |= 0x00000008u;
  range_ = value;
}
inline void HDMapRoiFilterConfig::set_range(double value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.HDMapRoiFilterConfig.range)
}

// optional double cell_size = 2 [default = 0.25];
inline bool HDMapRoiFilterConfig::_internal_has_cell_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HDMapRoiFilterConfig::has_cell_size() const {
  return _internal_has_cell_size();
}
inline void HDMapRoiFilterConfig::clear_cell_size() {
  cell_size_ = 0.25;
  _has_bits_[0] &= ~0x00000010u;
}
inline double HDMapRoiFilterConfig::_internal_cell_size() const {
  return cell_size_;
}
inline double HDMapRoiFilterConfig::cell_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.HDMapRoiFilterConfig.cell_size)
  return _internal_cell_size();
}
inline void HDMapRoiFilterConfig::_internal_set_cell_size(double value) {
  _has_bits_[0] |= 0x00000010u;
  cell_size_ = value;
}
inline void HDMapRoiFilterConfig::set_cell_size(double value) {
  _internal_set_cell_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.HDMapRoiFilterConfig.cell_size)
}

// optional double extend_dist = 3 [default = 0];
inline bool HDMapRoiFilterConfig::_internal_has_extend_dist() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDMapRoiFilterConfig::has_extend_dist() const {
  return _internal_has_extend_dist();
}
inline void HDMapRoiFilterConfig::clear_extend_dist() {
  extend_dist_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HDMapRoiFilterConfig::_internal_extend_dist() const {
  return extend_dist_;
}
inline double HDMapRoiFilterConfig::extend_dist() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.HDMapRoiFilterConfig.extend_dist)
  return _internal_extend_dist();
}
inline void HDMapRoiFilterConfig::_internal_set_extend_dist(double value) {
  _has_bits_[0] |= 0x00000001u;
  extend_dist_ = value;
}
inline void HDMapRoiFilterConfig::set_extend_dist(double value) {
  _internal_set_extend_dist(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.HDMapRoiFilterConfig.extend_dist)
}

// optional bool no_edge_table = 4 [default = false];
inline bool HDMapRoiFilterConfig::_internal_has_no_edge_table() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HDMapRoiFilterConfig::has_no_edge_table() const {
  return _internal_has_no_edge_table();
}
inline void HDMapRoiFilterConfig::clear_no_edge_table() {
  no_edge_table_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool HDMapRoiFilterConfig::_internal_no_edge_table() const {
  return no_edge_table_;
}
inline bool HDMapRoiFilterConfig::no_edge_table() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.HDMapRoiFilterConfig.no_edge_table)
  return _internal_no_edge_table();
}
inline void HDMapRoiFilterConfig::_internal_set_no_edge_table(bool value) {
  _has_bits_[0] |= 0x00000002u;
  no_edge_table_ = value;
}
inline void HDMapRoiFilterConfig::set_no_edge_table(bool value) {
  _internal_set_no_edge_table(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.HDMapRoiFilterConfig.no_edge_table)
}

// optional bool set_roi_service = 5 [default = false];
inline bool HDMapRoiFilterConfig::_internal_has_set_roi_service() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HDMapRoiFilterConfig::has_set_roi_service() const {
  return _internal_has_set_roi_service();
}
inline void HDMapRoiFilterConfig::clear_set_roi_service() {
  set_roi_service_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool HDMapRoiFilterConfig::_internal_set_roi_service() const {
  return set_roi_service_;
}
inline bool HDMapRoiFilterConfig::set_roi_service() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.HDMapRoiFilterConfig.set_roi_service)
  return _internal_set_roi_service();
}
inline void HDMapRoiFilterConfig::_internal_set_set_roi_service(bool value) {
  _has_bits_[0] |= 0x00000004u;
  set_roi_service_ = value;
}
inline void HDMapRoiFilterConfig::set_set_roi_service(bool value) {
  _internal_set_set_roi_service(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.HDMapRoiFilterConfig.set_roi_service)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2froi_5ffilter_2fhdmap_5froi_5ffilter_2fproto_2fhdmap_5froi_5ffilter_2eproto
