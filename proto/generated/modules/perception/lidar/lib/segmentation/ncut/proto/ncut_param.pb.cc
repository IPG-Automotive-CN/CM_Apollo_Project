// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/segmentation/ncut/proto/ncut_param.proto

#include "modules/perception/lidar/lib/segmentation/ncut/proto/ncut_param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace perception {
namespace lidar {
class NCutSegmentationParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NCutSegmentationParam> _instance;
} _NCutSegmentationParam_default_instance_;
class NCutParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NCutParam> _instance;
} _NCutParam_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_NCutParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_NCutParam_default_instance_;
    new (ptr) ::apollo::perception::lidar::NCutParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::NCutParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NCutParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NCutParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_NCutSegmentationParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.DefaultConstruct();
  *::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get_mutable() = std::string("SpatioTemporalGroundDetector", 28);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get_mutable());
  ::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.DefaultConstruct();
  *::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get_mutable() = std::string("HdmapROIFilter", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_NCutSegmentationParam_default_instance_;
    new (ptr) ::apollo::perception::lidar::NCutSegmentationParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::NCutSegmentationParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NCutSegmentationParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NCutSegmentationParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, grid_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, height_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, partition_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, vehicle_filter_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, pedestrian_filter_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, outlier_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, outlier_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, outlier_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, outlier_min_num_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, ground_detector_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, roi_filter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, remove_ground_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutSegmentationParam, remove_roi_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, grid_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, connect_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, super_pixel_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, num_cuts_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, ncuts_stop_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, ncuts_enable_classifier_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, sigma_space_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, sigma_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, skeleton_cell_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, patch_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, outlier_width_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, outlier_height_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, outlier_num_points_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, overlap_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, felzenszwalb_sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, felzenszwalb_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NCutParam, felzenszwalb_min_size_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::apollo::perception::lidar::NCutSegmentationParam)},
  { 31, 53, sizeof(::apollo::perception::lidar::NCutParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_NCutSegmentationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_NCutParam_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nEmodules/perception/lidar/lib/segmentat"
  "ion/ncut/proto/ncut_param.proto\022\027apollo."
  "perception.lidar\"\322\003\n\025NCutSegmentationPar"
  "am\022\027\n\013grid_radius\030\001 \001(\002:\00280\022\035\n\020height_th"
  "reshold\030\002 \001(\002:\0032.5\022\036\n\023partition_cell_siz"
  "e\030\003 \001(\002:\0011\022%\n\030vehicle_filter_cell_size\030\004"
  " \001(\002:\0030.3\022(\n\033pedestrian_filter_cell_size"
  "\030\005 \001(\002:\0030.1\022\033\n\016outlier_length\030\006 \001(\002:\0030.1"
  "\022\032\n\routlier_width\030\007 \001(\002:\0030.1\022\033\n\016outlier_"
  "height\030\010 \001(\002:\0030.3\022!\n\026outlier_min_num_poi"
  "nts\030\t \001(\r:\0013\0225\n\017ground_detector\030\n \001(\t:\034S"
  "patioTemporalGroundDetector\022\"\n\nroi_filte"
  "r\030\013 \001(\t:\016HdmapROIFilter\022\"\n\024remove_ground"
  "_points\030\014 \001(\010:\004true\022\030\n\nremove_roi\030\r \001(\010:"
  "\004true\"\257\004\n\tNCutParam\022\027\n\013grid_radius\030\001 \001(\002"
  ":\00280\022\031\n\016connect_radius\030\002 \001(\002:\0011\022#\n\025super"
  "_pixel_cell_size\030\003 \001(\002:\0040.25\022\023\n\010num_cuts"
  "\030\004 \001(\r:\0015\022!\n\024ncuts_stop_threshold\030\005 \001(\002:"
  "\0030.4\022.\n!ncuts_enable_classifier_threshol"
  "d\030\006 \001(\002:\0030.3\022\030\n\013sigma_space\030\007 \001(\002:\0031.5\022\032"
  "\n\rsigma_feature\030\010 \001(\002:\0031.5\022\037\n\022skeleton_c"
  "ell_size\030\t \001(\002:\0030.2\022\025\n\npatch_size\030\n \001(\r:"
  "\0013\022$\n\027outlier_width_threshold\030\013 \001(\002:\0030.1"
  "\022%\n\030outlier_height_threshold\030\014 \001(\002:\0030.1\022"
  "(\n\034outlier_num_points_threshold\030\r \001(\r:\0021"
  "0\022\034\n\016overlap_factor\030\016 \001(\002:\0040.05\022\037\n\022felze"
  "nszwalb_sigma\030\017 \001(\002:\0030.5\022\032\n\016felzenszwalb"
  "_k\030\020 \001(\002:\00230\022!\n\025felzenszwalb_min_size\030\021 "
  "\001(\r:\00210"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_sccs[2] = {
  &scc_info_NCutParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.base,
  &scc_info_NCutSegmentationParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_once;
static bool descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto = {
  &descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto, "modules/perception/lidar/lib/segmentation/ncut/proto/ncut_param.proto", 1127,
  &descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_once, descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_sccs, descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto::offsets,
  file_level_metadata_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto, 2, file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto, file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto), true);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void NCutSegmentationParam::InitAsDefaultInstance() {
}
class NCutSegmentationParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NCutSegmentationParam>()._has_bits_);
  static void set_has_grid_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_partition_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vehicle_filter_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pedestrian_filter_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_outlier_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_outlier_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_outlier_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_outlier_min_num_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ground_detector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roi_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remove_ground_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_remove_roi(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_;
NCutSegmentationParam::NCutSegmentationParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.NCutSegmentationParam)
}
NCutSegmentationParam::NCutSegmentationParam(const NCutSegmentationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ground_detector_.UnsafeSetDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  if (from._internal_has_ground_detector()) {
    ground_detector_.AssignWithDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), from.ground_detector_);
  }
  roi_filter_.UnsafeSetDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  if (from._internal_has_roi_filter()) {
    roi_filter_.AssignWithDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), from.roi_filter_);
  }
  ::memcpy(&grid_radius_, &from.grid_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&remove_roi_) -
    reinterpret_cast<char*>(&grid_radius_)) + sizeof(remove_roi_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.NCutSegmentationParam)
}

void NCutSegmentationParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NCutSegmentationParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.base);
  ground_detector_.UnsafeSetDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  roi_filter_.UnsafeSetDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  grid_radius_ = 80;
  height_threshold_ = 2.5f;
  partition_cell_size_ = 1;
  vehicle_filter_cell_size_ = 0.3f;
  pedestrian_filter_cell_size_ = 0.1f;
  outlier_length_ = 0.1f;
  outlier_width_ = 0.1f;
  outlier_height_ = 0.3f;
  outlier_min_num_points_ = 3u;
  remove_ground_points_ = true;
  remove_roi_ = true;
}

NCutSegmentationParam::~NCutSegmentationParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.NCutSegmentationParam)
  SharedDtor();
}

void NCutSegmentationParam::SharedDtor() {
  ground_detector_.DestroyNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  roi_filter_.DestroyNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
}

void NCutSegmentationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NCutSegmentationParam& NCutSegmentationParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NCutSegmentationParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.base);
  return *internal_default_instance();
}


void NCutSegmentationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.NCutSegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ground_detector_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      roi_filter_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
    }
    grid_radius_ = 80;
    height_threshold_ = 2.5f;
    partition_cell_size_ = 1;
    vehicle_filter_cell_size_ = 0.3f;
    pedestrian_filter_cell_size_ = 0.1f;
    outlier_length_ = 0.1f;
  }
  if (cached_has_bits & 0x00001f00u) {
    outlier_width_ = 0.1f;
    outlier_height_ = 0.3f;
    outlier_min_num_points_ = 3u;
    remove_ground_points_ = true;
    remove_roi_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NCutSegmentationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float grid_radius = 1 [default = 80];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_grid_radius(&has_bits);
          grid_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height_threshold = 2 [default = 2.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_height_threshold(&has_bits);
          height_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float partition_cell_size = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_partition_cell_size(&has_bits);
          partition_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicle_filter_cell_size = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_vehicle_filter_cell_size(&has_bits);
          vehicle_filter_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pedestrian_filter_cell_size(&has_bits);
          pedestrian_filter_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outlier_length = 6 [default = 0.1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_outlier_length(&has_bits);
          outlier_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outlier_width = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_outlier_width(&has_bits);
          outlier_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outlier_height = 8 [default = 0.3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_outlier_height(&has_bits);
          outlier_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 outlier_min_num_points = 9 [default = 3];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_outlier_min_num_points(&has_bits);
          outlier_min_num_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ground_detector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NCutSegmentationParam.ground_detector");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string roi_filter = 11 [default = "HdmapROIFilter"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_roi_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NCutSegmentationParam.roi_filter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remove_ground_points = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_remove_ground_points(&has_bits);
          remove_ground_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remove_roi = 13 [default = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_remove_roi(&has_bits);
          remove_roi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NCutSegmentationParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.NCutSegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float grid_radius = 1 [default = 80];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_grid_radius(), target);
  }

  // optional float height_threshold = 2 [default = 2.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_height_threshold(), target);
  }

  // optional float partition_cell_size = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_partition_cell_size(), target);
  }

  // optional float vehicle_filter_cell_size = 4 [default = 0.3];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_vehicle_filter_cell_size(), target);
  }

  // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pedestrian_filter_cell_size(), target);
  }

  // optional float outlier_length = 6 [default = 0.1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_outlier_length(), target);
  }

  // optional float outlier_width = 7 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_outlier_width(), target);
  }

  // optional float outlier_height = 8 [default = 0.3];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_outlier_height(), target);
  }

  // optional uint32 outlier_min_num_points = 9 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_outlier_min_num_points(), target);
  }

  // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ground_detector().data(), static_cast<int>(this->_internal_ground_detector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NCutSegmentationParam.ground_detector");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ground_detector(), target);
  }

  // optional string roi_filter = 11 [default = "HdmapROIFilter"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_filter().data(), static_cast<int>(this->_internal_roi_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NCutSegmentationParam.roi_filter");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_roi_filter(), target);
  }

  // optional bool remove_ground_points = 12 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_remove_ground_points(), target);
  }

  // optional bool remove_roi = 13 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_remove_roi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.NCutSegmentationParam)
  return target;
}

size_t NCutSegmentationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.NCutSegmentationParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ground_detector());
    }

    // optional string roi_filter = 11 [default = "HdmapROIFilter"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_filter());
    }

    // optional float grid_radius = 1 [default = 80];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float height_threshold = 2 [default = 2.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float partition_cell_size = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float vehicle_filter_cell_size = 4 [default = 0.3];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float outlier_length = 6 [default = 0.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float outlier_width = 7 [default = 0.1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float outlier_height = 8 [default = 0.3];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 outlier_min_num_points = 9 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outlier_min_num_points());
    }

    // optional bool remove_ground_points = 12 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool remove_roi = 13 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NCutSegmentationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.NCutSegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NCutSegmentationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NCutSegmentationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.NCutSegmentationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.NCutSegmentationParam)
    MergeFrom(*source);
  }
}

void NCutSegmentationParam::MergeFrom(const NCutSegmentationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.NCutSegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ground_detector_.AssignWithDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), from.ground_detector_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      roi_filter_.AssignWithDefault(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), from.roi_filter_);
    }
    if (cached_has_bits & 0x00000004u) {
      grid_radius_ = from.grid_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_threshold_ = from.height_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      partition_cell_size_ = from.partition_cell_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      vehicle_filter_cell_size_ = from.vehicle_filter_cell_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      pedestrian_filter_cell_size_ = from.pedestrian_filter_cell_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      outlier_length_ = from.outlier_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      outlier_width_ = from.outlier_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      outlier_height_ = from.outlier_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      outlier_min_num_points_ = from.outlier_min_num_points_;
    }
    if (cached_has_bits & 0x00000800u) {
      remove_ground_points_ = from.remove_ground_points_;
    }
    if (cached_has_bits & 0x00001000u) {
      remove_roi_ = from.remove_roi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NCutSegmentationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.NCutSegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NCutSegmentationParam::CopyFrom(const NCutSegmentationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.NCutSegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NCutSegmentationParam::IsInitialized() const {
  return true;
}

void NCutSegmentationParam::InternalSwap(NCutSegmentationParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ground_detector_.Swap(&other->ground_detector_, &::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(),
    GetArenaNoVirtual());
  roi_filter_.Swap(&other->roi_filter_, &::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(),
    GetArenaNoVirtual());
  swap(grid_radius_, other->grid_radius_);
  swap(height_threshold_, other->height_threshold_);
  swap(partition_cell_size_, other->partition_cell_size_);
  swap(vehicle_filter_cell_size_, other->vehicle_filter_cell_size_);
  swap(pedestrian_filter_cell_size_, other->pedestrian_filter_cell_size_);
  swap(outlier_length_, other->outlier_length_);
  swap(outlier_width_, other->outlier_width_);
  swap(outlier_height_, other->outlier_height_);
  swap(outlier_min_num_points_, other->outlier_min_num_points_);
  swap(remove_ground_points_, other->remove_ground_points_);
  swap(remove_roi_, other->remove_roi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NCutSegmentationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NCutParam::InitAsDefaultInstance() {
}
class NCutParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NCutParam>()._has_bits_);
  static void set_has_grid_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connect_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_super_pixel_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_cuts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ncuts_stop_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ncuts_enable_classifier_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sigma_space(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sigma_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_skeleton_cell_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_patch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_outlier_width_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_outlier_height_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_outlier_num_points_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_overlap_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_felzenszwalb_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_felzenszwalb_k(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_felzenszwalb_min_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NCutParam::NCutParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.NCutParam)
}
NCutParam::NCutParam(const NCutParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&felzenszwalb_min_size_, &from.felzenszwalb_min_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&felzenszwalb_k_) -
    reinterpret_cast<char*>(&felzenszwalb_min_size_)) + sizeof(felzenszwalb_k_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.NCutParam)
}

void NCutParam::SharedCtor() {
  felzenszwalb_min_size_ = 10u;
  grid_radius_ = 80;
  connect_radius_ = 1;
  super_pixel_cell_size_ = 0.25f;
  num_cuts_ = 5u;
  ncuts_stop_threshold_ = 0.4f;
  ncuts_enable_classifier_threshold_ = 0.3f;
  sigma_space_ = 1.5f;
  sigma_feature_ = 1.5f;
  skeleton_cell_size_ = 0.2f;
  patch_size_ = 3u;
  outlier_width_threshold_ = 0.1f;
  outlier_height_threshold_ = 0.1f;
  outlier_num_points_threshold_ = 10u;
  overlap_factor_ = 0.05f;
  felzenszwalb_sigma_ = 0.5f;
  felzenszwalb_k_ = 30;
}

NCutParam::~NCutParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.NCutParam)
  SharedDtor();
}

void NCutParam::SharedDtor() {
}

void NCutParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NCutParam& NCutParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NCutParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.base);
  return *internal_default_instance();
}


void NCutParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.NCutParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    felzenszwalb_min_size_ = 10u;
    grid_radius_ = 80;
    connect_radius_ = 1;
    super_pixel_cell_size_ = 0.25f;
    num_cuts_ = 5u;
    ncuts_stop_threshold_ = 0.4f;
    ncuts_enable_classifier_threshold_ = 0.3f;
    sigma_space_ = 1.5f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    sigma_feature_ = 1.5f;
    skeleton_cell_size_ = 0.2f;
    patch_size_ = 3u;
    outlier_width_threshold_ = 0.1f;
    outlier_height_threshold_ = 0.1f;
    outlier_num_points_threshold_ = 10u;
    overlap_factor_ = 0.05f;
    felzenszwalb_sigma_ = 0.5f;
  }
  felzenszwalb_k_ = 30;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NCutParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float grid_radius = 1 [default = 80];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_grid_radius(&has_bits);
          grid_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float connect_radius = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_connect_radius(&has_bits);
          connect_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float super_pixel_cell_size = 3 [default = 0.25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_super_pixel_cell_size(&has_bits);
          super_pixel_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_cuts = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_cuts(&has_bits);
          num_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ncuts_stop_threshold = 5 [default = 0.4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_ncuts_stop_threshold(&has_bits);
          ncuts_stop_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_ncuts_enable_classifier_threshold(&has_bits);
          ncuts_enable_classifier_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma_space = 7 [default = 1.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_sigma_space(&has_bits);
          sigma_space_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigma_feature = 8 [default = 1.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_sigma_feature(&has_bits);
          sigma_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float skeleton_cell_size = 9 [default = 0.2];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_skeleton_cell_size(&has_bits);
          skeleton_cell_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 patch_size = 10 [default = 3];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_patch_size(&has_bits);
          patch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float outlier_width_threshold = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_outlier_width_threshold(&has_bits);
          outlier_width_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float outlier_height_threshold = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_outlier_height_threshold(&has_bits);
          outlier_height_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 outlier_num_points_threshold = 13 [default = 10];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_outlier_num_points_threshold(&has_bits);
          outlier_num_points_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float overlap_factor = 14 [default = 0.05];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_overlap_factor(&has_bits);
          overlap_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float felzenszwalb_sigma = 15 [default = 0.5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_felzenszwalb_sigma(&has_bits);
          felzenszwalb_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float felzenszwalb_k = 16 [default = 30];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_felzenszwalb_k(&has_bits);
          felzenszwalb_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 felzenszwalb_min_size = 17 [default = 10];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_felzenszwalb_min_size(&has_bits);
          felzenszwalb_min_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NCutParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.NCutParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float grid_radius = 1 [default = 80];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_grid_radius(), target);
  }

  // optional float connect_radius = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_connect_radius(), target);
  }

  // optional float super_pixel_cell_size = 3 [default = 0.25];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_super_pixel_cell_size(), target);
  }

  // optional uint32 num_cuts = 4 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_cuts(), target);
  }

  // optional float ncuts_stop_threshold = 5 [default = 0.4];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ncuts_stop_threshold(), target);
  }

  // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ncuts_enable_classifier_threshold(), target);
  }

  // optional float sigma_space = 7 [default = 1.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_sigma_space(), target);
  }

  // optional float sigma_feature = 8 [default = 1.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_sigma_feature(), target);
  }

  // optional float skeleton_cell_size = 9 [default = 0.2];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_skeleton_cell_size(), target);
  }

  // optional uint32 patch_size = 10 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_patch_size(), target);
  }

  // optional float outlier_width_threshold = 11 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_outlier_width_threshold(), target);
  }

  // optional float outlier_height_threshold = 12 [default = 0.1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_outlier_height_threshold(), target);
  }

  // optional uint32 outlier_num_points_threshold = 13 [default = 10];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_outlier_num_points_threshold(), target);
  }

  // optional float overlap_factor = 14 [default = 0.05];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_overlap_factor(), target);
  }

  // optional float felzenszwalb_sigma = 15 [default = 0.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_felzenszwalb_sigma(), target);
  }

  // optional float felzenszwalb_k = 16 [default = 30];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_felzenszwalb_k(), target);
  }

  // optional uint32 felzenszwalb_min_size = 17 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_felzenszwalb_min_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.NCutParam)
  return target;
}

size_t NCutParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.NCutParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 felzenszwalb_min_size = 17 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_felzenszwalb_min_size());
    }

    // optional float grid_radius = 1 [default = 80];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float connect_radius = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float super_pixel_cell_size = 3 [default = 0.25];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_cuts = 4 [default = 5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_cuts());
    }

    // optional float ncuts_stop_threshold = 5 [default = 0.4];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float sigma_space = 7 [default = 1.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float sigma_feature = 8 [default = 1.5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float skeleton_cell_size = 9 [default = 0.2];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 patch_size = 10 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_patch_size());
    }

    // optional float outlier_width_threshold = 11 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float outlier_height_threshold = 12 [default = 0.1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 outlier_num_points_threshold = 13 [default = 10];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outlier_num_points_threshold());
    }

    // optional float overlap_factor = 14 [default = 0.05];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float felzenszwalb_sigma = 15 [default = 0.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  // optional float felzenszwalb_k = 16 [default = 30];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NCutParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.NCutParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NCutParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NCutParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.NCutParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.NCutParam)
    MergeFrom(*source);
  }
}

void NCutParam::MergeFrom(const NCutParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.NCutParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      felzenszwalb_min_size_ = from.felzenszwalb_min_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      grid_radius_ = from.grid_radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      connect_radius_ = from.connect_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      super_pixel_cell_size_ = from.super_pixel_cell_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_cuts_ = from.num_cuts_;
    }
    if (cached_has_bits & 0x00000020u) {
      ncuts_stop_threshold_ = from.ncuts_stop_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      ncuts_enable_classifier_threshold_ = from.ncuts_enable_classifier_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      sigma_space_ = from.sigma_space_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sigma_feature_ = from.sigma_feature_;
    }
    if (cached_has_bits & 0x00000200u) {
      skeleton_cell_size_ = from.skeleton_cell_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      patch_size_ = from.patch_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      outlier_width_threshold_ = from.outlier_width_threshold_;
    }
    if (cached_has_bits & 0x00001000u) {
      outlier_height_threshold_ = from.outlier_height_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      outlier_num_points_threshold_ = from.outlier_num_points_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      overlap_factor_ = from.overlap_factor_;
    }
    if (cached_has_bits & 0x00008000u) {
      felzenszwalb_sigma_ = from.felzenszwalb_sigma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_felzenszwalb_k(from._internal_felzenszwalb_k());
  }
}

void NCutParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.NCutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NCutParam::CopyFrom(const NCutParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.NCutParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NCutParam::IsInitialized() const {
  return true;
}

void NCutParam::InternalSwap(NCutParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(felzenszwalb_min_size_, other->felzenszwalb_min_size_);
  swap(grid_radius_, other->grid_radius_);
  swap(connect_radius_, other->connect_radius_);
  swap(super_pixel_cell_size_, other->super_pixel_cell_size_);
  swap(num_cuts_, other->num_cuts_);
  swap(ncuts_stop_threshold_, other->ncuts_stop_threshold_);
  swap(ncuts_enable_classifier_threshold_, other->ncuts_enable_classifier_threshold_);
  swap(sigma_space_, other->sigma_space_);
  swap(sigma_feature_, other->sigma_feature_);
  swap(skeleton_cell_size_, other->skeleton_cell_size_);
  swap(patch_size_, other->patch_size_);
  swap(outlier_width_threshold_, other->outlier_width_threshold_);
  swap(outlier_height_threshold_, other->outlier_height_threshold_);
  swap(outlier_num_points_threshold_, other->outlier_num_points_threshold_);
  swap(overlap_factor_, other->overlap_factor_);
  swap(felzenszwalb_sigma_, other->felzenszwalb_sigma_);
  swap(felzenszwalb_k_, other->felzenszwalb_k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NCutParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::NCutSegmentationParam* Arena::CreateMaybeMessage< ::apollo::perception::lidar::NCutSegmentationParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::NCutSegmentationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::NCutParam* Arena::CreateMaybeMessage< ::apollo::perception::lidar::NCutParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::NCutParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
