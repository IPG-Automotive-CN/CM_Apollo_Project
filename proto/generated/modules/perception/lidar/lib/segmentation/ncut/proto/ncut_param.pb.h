// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/segmentation/ncut/proto/ncut_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class NCutParam;
class NCutParamDefaultTypeInternal;
extern NCutParamDefaultTypeInternal _NCutParam_default_instance_;
class NCutSegmentationParam;
class NCutSegmentationParamDefaultTypeInternal;
extern NCutSegmentationParamDefaultTypeInternal _NCutSegmentationParam_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::NCutParam* Arena::CreateMaybeMessage<::apollo::perception::lidar::NCutParam>(Arena*);
template<> ::apollo::perception::lidar::NCutSegmentationParam* Arena::CreateMaybeMessage<::apollo::perception::lidar::NCutSegmentationParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class NCutSegmentationParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.NCutSegmentationParam) */ {
 public:
  NCutSegmentationParam();
  virtual ~NCutSegmentationParam();

  NCutSegmentationParam(const NCutSegmentationParam& from);
  NCutSegmentationParam(NCutSegmentationParam&& from) noexcept
    : NCutSegmentationParam() {
    *this = ::std::move(from);
  }

  inline NCutSegmentationParam& operator=(const NCutSegmentationParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NCutSegmentationParam& operator=(NCutSegmentationParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NCutSegmentationParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NCutSegmentationParam* internal_default_instance() {
    return reinterpret_cast<const NCutSegmentationParam*>(
               &_NCutSegmentationParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NCutSegmentationParam& a, NCutSegmentationParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NCutSegmentationParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NCutSegmentationParam* New() const final {
    return CreateMaybeMessage<NCutSegmentationParam>(nullptr);
  }

  NCutSegmentationParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NCutSegmentationParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NCutSegmentationParam& from);
  void MergeFrom(const NCutSegmentationParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NCutSegmentationParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.NCutSegmentationParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroundDetectorFieldNumber = 10,
    kRoiFilterFieldNumber = 11,
    kGridRadiusFieldNumber = 1,
    kHeightThresholdFieldNumber = 2,
    kPartitionCellSizeFieldNumber = 3,
    kVehicleFilterCellSizeFieldNumber = 4,
    kPedestrianFilterCellSizeFieldNumber = 5,
    kOutlierLengthFieldNumber = 6,
    kOutlierWidthFieldNumber = 7,
    kOutlierHeightFieldNumber = 8,
    kOutlierMinNumPointsFieldNumber = 9,
    kRemoveGroundPointsFieldNumber = 12,
    kRemoveRoiFieldNumber = 13,
  };
  // optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
  bool has_ground_detector() const;
  private:
  bool _internal_has_ground_detector() const;
  public:
  void clear_ground_detector();
  const std::string& ground_detector() const;
  void set_ground_detector(const std::string& value);
  void set_ground_detector(std::string&& value);
  void set_ground_detector(const char* value);
  void set_ground_detector(const char* value, size_t size);
  std::string* mutable_ground_detector();
  std::string* release_ground_detector();
  void set_allocated_ground_detector(std::string* ground_detector);
  private:
  const std::string& _internal_ground_detector() const;
  void _internal_set_ground_detector(const std::string& value);
  std::string* _internal_mutable_ground_detector();
  public:

  // optional string roi_filter = 11 [default = "HdmapROIFilter"];
  bool has_roi_filter() const;
  private:
  bool _internal_has_roi_filter() const;
  public:
  void clear_roi_filter();
  const std::string& roi_filter() const;
  void set_roi_filter(const std::string& value);
  void set_roi_filter(std::string&& value);
  void set_roi_filter(const char* value);
  void set_roi_filter(const char* value, size_t size);
  std::string* mutable_roi_filter();
  std::string* release_roi_filter();
  void set_allocated_roi_filter(std::string* roi_filter);
  private:
  const std::string& _internal_roi_filter() const;
  void _internal_set_roi_filter(const std::string& value);
  std::string* _internal_mutable_roi_filter();
  public:

  // optional float grid_radius = 1 [default = 80];
  bool has_grid_radius() const;
  private:
  bool _internal_has_grid_radius() const;
  public:
  void clear_grid_radius();
  float grid_radius() const;
  void set_grid_radius(float value);
  private:
  float _internal_grid_radius() const;
  void _internal_set_grid_radius(float value);
  public:

  // optional float height_threshold = 2 [default = 2.5];
  bool has_height_threshold() const;
  private:
  bool _internal_has_height_threshold() const;
  public:
  void clear_height_threshold();
  float height_threshold() const;
  void set_height_threshold(float value);
  private:
  float _internal_height_threshold() const;
  void _internal_set_height_threshold(float value);
  public:

  // optional float partition_cell_size = 3 [default = 1];
  bool has_partition_cell_size() const;
  private:
  bool _internal_has_partition_cell_size() const;
  public:
  void clear_partition_cell_size();
  float partition_cell_size() const;
  void set_partition_cell_size(float value);
  private:
  float _internal_partition_cell_size() const;
  void _internal_set_partition_cell_size(float value);
  public:

  // optional float vehicle_filter_cell_size = 4 [default = 0.3];
  bool has_vehicle_filter_cell_size() const;
  private:
  bool _internal_has_vehicle_filter_cell_size() const;
  public:
  void clear_vehicle_filter_cell_size();
  float vehicle_filter_cell_size() const;
  void set_vehicle_filter_cell_size(float value);
  private:
  float _internal_vehicle_filter_cell_size() const;
  void _internal_set_vehicle_filter_cell_size(float value);
  public:

  // optional float pedestrian_filter_cell_size = 5 [default = 0.1];
  bool has_pedestrian_filter_cell_size() const;
  private:
  bool _internal_has_pedestrian_filter_cell_size() const;
  public:
  void clear_pedestrian_filter_cell_size();
  float pedestrian_filter_cell_size() const;
  void set_pedestrian_filter_cell_size(float value);
  private:
  float _internal_pedestrian_filter_cell_size() const;
  void _internal_set_pedestrian_filter_cell_size(float value);
  public:

  // optional float outlier_length = 6 [default = 0.1];
  bool has_outlier_length() const;
  private:
  bool _internal_has_outlier_length() const;
  public:
  void clear_outlier_length();
  float outlier_length() const;
  void set_outlier_length(float value);
  private:
  float _internal_outlier_length() const;
  void _internal_set_outlier_length(float value);
  public:

  // optional float outlier_width = 7 [default = 0.1];
  bool has_outlier_width() const;
  private:
  bool _internal_has_outlier_width() const;
  public:
  void clear_outlier_width();
  float outlier_width() const;
  void set_outlier_width(float value);
  private:
  float _internal_outlier_width() const;
  void _internal_set_outlier_width(float value);
  public:

  // optional float outlier_height = 8 [default = 0.3];
  bool has_outlier_height() const;
  private:
  bool _internal_has_outlier_height() const;
  public:
  void clear_outlier_height();
  float outlier_height() const;
  void set_outlier_height(float value);
  private:
  float _internal_outlier_height() const;
  void _internal_set_outlier_height(float value);
  public:

  // optional uint32 outlier_min_num_points = 9 [default = 3];
  bool has_outlier_min_num_points() const;
  private:
  bool _internal_has_outlier_min_num_points() const;
  public:
  void clear_outlier_min_num_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 outlier_min_num_points() const;
  void set_outlier_min_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outlier_min_num_points() const;
  void _internal_set_outlier_min_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool remove_ground_points = 12 [default = true];
  bool has_remove_ground_points() const;
  private:
  bool _internal_has_remove_ground_points() const;
  public:
  void clear_remove_ground_points();
  bool remove_ground_points() const;
  void set_remove_ground_points(bool value);
  private:
  bool _internal_remove_ground_points() const;
  void _internal_set_remove_ground_points(bool value);
  public:

  // optional bool remove_roi = 13 [default = true];
  bool has_remove_roi() const;
  private:
  bool _internal_has_remove_roi() const;
  public:
  void clear_remove_roi();
  bool remove_roi() const;
  void set_remove_roi(bool value);
  private:
  bool _internal_remove_roi() const;
  void _internal_set_remove_roi(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.NCutSegmentationParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_ground_detector_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ground_detector_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_roi_filter_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roi_filter_;
  float grid_radius_;
  float height_threshold_;
  float partition_cell_size_;
  float vehicle_filter_cell_size_;
  float pedestrian_filter_cell_size_;
  float outlier_length_;
  float outlier_width_;
  float outlier_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outlier_min_num_points_;
  bool remove_ground_points_;
  bool remove_roi_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto;
};
// -------------------------------------------------------------------

class NCutParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.NCutParam) */ {
 public:
  NCutParam();
  virtual ~NCutParam();

  NCutParam(const NCutParam& from);
  NCutParam(NCutParam&& from) noexcept
    : NCutParam() {
    *this = ::std::move(from);
  }

  inline NCutParam& operator=(const NCutParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NCutParam& operator=(NCutParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NCutParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NCutParam* internal_default_instance() {
    return reinterpret_cast<const NCutParam*>(
               &_NCutParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NCutParam& a, NCutParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NCutParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NCutParam* New() const final {
    return CreateMaybeMessage<NCutParam>(nullptr);
  }

  NCutParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NCutParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NCutParam& from);
  void MergeFrom(const NCutParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NCutParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.NCutParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFelzenszwalbMinSizeFieldNumber = 17,
    kGridRadiusFieldNumber = 1,
    kConnectRadiusFieldNumber = 2,
    kSuperPixelCellSizeFieldNumber = 3,
    kNumCutsFieldNumber = 4,
    kNcutsStopThresholdFieldNumber = 5,
    kNcutsEnableClassifierThresholdFieldNumber = 6,
    kSigmaSpaceFieldNumber = 7,
    kSigmaFeatureFieldNumber = 8,
    kSkeletonCellSizeFieldNumber = 9,
    kPatchSizeFieldNumber = 10,
    kOutlierWidthThresholdFieldNumber = 11,
    kOutlierHeightThresholdFieldNumber = 12,
    kOutlierNumPointsThresholdFieldNumber = 13,
    kOverlapFactorFieldNumber = 14,
    kFelzenszwalbSigmaFieldNumber = 15,
    kFelzenszwalbKFieldNumber = 16,
  };
  // optional uint32 felzenszwalb_min_size = 17 [default = 10];
  bool has_felzenszwalb_min_size() const;
  private:
  bool _internal_has_felzenszwalb_min_size() const;
  public:
  void clear_felzenszwalb_min_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 felzenszwalb_min_size() const;
  void set_felzenszwalb_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_felzenszwalb_min_size() const;
  void _internal_set_felzenszwalb_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float grid_radius = 1 [default = 80];
  bool has_grid_radius() const;
  private:
  bool _internal_has_grid_radius() const;
  public:
  void clear_grid_radius();
  float grid_radius() const;
  void set_grid_radius(float value);
  private:
  float _internal_grid_radius() const;
  void _internal_set_grid_radius(float value);
  public:

  // optional float connect_radius = 2 [default = 1];
  bool has_connect_radius() const;
  private:
  bool _internal_has_connect_radius() const;
  public:
  void clear_connect_radius();
  float connect_radius() const;
  void set_connect_radius(float value);
  private:
  float _internal_connect_radius() const;
  void _internal_set_connect_radius(float value);
  public:

  // optional float super_pixel_cell_size = 3 [default = 0.25];
  bool has_super_pixel_cell_size() const;
  private:
  bool _internal_has_super_pixel_cell_size() const;
  public:
  void clear_super_pixel_cell_size();
  float super_pixel_cell_size() const;
  void set_super_pixel_cell_size(float value);
  private:
  float _internal_super_pixel_cell_size() const;
  void _internal_set_super_pixel_cell_size(float value);
  public:

  // optional uint32 num_cuts = 4 [default = 5];
  bool has_num_cuts() const;
  private:
  bool _internal_has_num_cuts() const;
  public:
  void clear_num_cuts();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_cuts() const;
  void set_num_cuts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_cuts() const;
  void _internal_set_num_cuts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float ncuts_stop_threshold = 5 [default = 0.4];
  bool has_ncuts_stop_threshold() const;
  private:
  bool _internal_has_ncuts_stop_threshold() const;
  public:
  void clear_ncuts_stop_threshold();
  float ncuts_stop_threshold() const;
  void set_ncuts_stop_threshold(float value);
  private:
  float _internal_ncuts_stop_threshold() const;
  void _internal_set_ncuts_stop_threshold(float value);
  public:

  // optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
  bool has_ncuts_enable_classifier_threshold() const;
  private:
  bool _internal_has_ncuts_enable_classifier_threshold() const;
  public:
  void clear_ncuts_enable_classifier_threshold();
  float ncuts_enable_classifier_threshold() const;
  void set_ncuts_enable_classifier_threshold(float value);
  private:
  float _internal_ncuts_enable_classifier_threshold() const;
  void _internal_set_ncuts_enable_classifier_threshold(float value);
  public:

  // optional float sigma_space = 7 [default = 1.5];
  bool has_sigma_space() const;
  private:
  bool _internal_has_sigma_space() const;
  public:
  void clear_sigma_space();
  float sigma_space() const;
  void set_sigma_space(float value);
  private:
  float _internal_sigma_space() const;
  void _internal_set_sigma_space(float value);
  public:

  // optional float sigma_feature = 8 [default = 1.5];
  bool has_sigma_feature() const;
  private:
  bool _internal_has_sigma_feature() const;
  public:
  void clear_sigma_feature();
  float sigma_feature() const;
  void set_sigma_feature(float value);
  private:
  float _internal_sigma_feature() const;
  void _internal_set_sigma_feature(float value);
  public:

  // optional float skeleton_cell_size = 9 [default = 0.2];
  bool has_skeleton_cell_size() const;
  private:
  bool _internal_has_skeleton_cell_size() const;
  public:
  void clear_skeleton_cell_size();
  float skeleton_cell_size() const;
  void set_skeleton_cell_size(float value);
  private:
  float _internal_skeleton_cell_size() const;
  void _internal_set_skeleton_cell_size(float value);
  public:

  // optional uint32 patch_size = 10 [default = 3];
  bool has_patch_size() const;
  private:
  bool _internal_has_patch_size() const;
  public:
  void clear_patch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 patch_size() const;
  void set_patch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_patch_size() const;
  void _internal_set_patch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float outlier_width_threshold = 11 [default = 0.1];
  bool has_outlier_width_threshold() const;
  private:
  bool _internal_has_outlier_width_threshold() const;
  public:
  void clear_outlier_width_threshold();
  float outlier_width_threshold() const;
  void set_outlier_width_threshold(float value);
  private:
  float _internal_outlier_width_threshold() const;
  void _internal_set_outlier_width_threshold(float value);
  public:

  // optional float outlier_height_threshold = 12 [default = 0.1];
  bool has_outlier_height_threshold() const;
  private:
  bool _internal_has_outlier_height_threshold() const;
  public:
  void clear_outlier_height_threshold();
  float outlier_height_threshold() const;
  void set_outlier_height_threshold(float value);
  private:
  float _internal_outlier_height_threshold() const;
  void _internal_set_outlier_height_threshold(float value);
  public:

  // optional uint32 outlier_num_points_threshold = 13 [default = 10];
  bool has_outlier_num_points_threshold() const;
  private:
  bool _internal_has_outlier_num_points_threshold() const;
  public:
  void clear_outlier_num_points_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 outlier_num_points_threshold() const;
  void set_outlier_num_points_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outlier_num_points_threshold() const;
  void _internal_set_outlier_num_points_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float overlap_factor = 14 [default = 0.05];
  bool has_overlap_factor() const;
  private:
  bool _internal_has_overlap_factor() const;
  public:
  void clear_overlap_factor();
  float overlap_factor() const;
  void set_overlap_factor(float value);
  private:
  float _internal_overlap_factor() const;
  void _internal_set_overlap_factor(float value);
  public:

  // optional float felzenszwalb_sigma = 15 [default = 0.5];
  bool has_felzenszwalb_sigma() const;
  private:
  bool _internal_has_felzenszwalb_sigma() const;
  public:
  void clear_felzenszwalb_sigma();
  float felzenszwalb_sigma() const;
  void set_felzenszwalb_sigma(float value);
  private:
  float _internal_felzenszwalb_sigma() const;
  void _internal_set_felzenszwalb_sigma(float value);
  public:

  // optional float felzenszwalb_k = 16 [default = 30];
  bool has_felzenszwalb_k() const;
  private:
  bool _internal_has_felzenszwalb_k() const;
  public:
  void clear_felzenszwalb_k();
  float felzenszwalb_k() const;
  void set_felzenszwalb_k(float value);
  private:
  float _internal_felzenszwalb_k() const;
  void _internal_set_felzenszwalb_k(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.NCutParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 felzenszwalb_min_size_;
  float grid_radius_;
  float connect_radius_;
  float super_pixel_cell_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_cuts_;
  float ncuts_stop_threshold_;
  float ncuts_enable_classifier_threshold_;
  float sigma_space_;
  float sigma_feature_;
  float skeleton_cell_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 patch_size_;
  float outlier_width_threshold_;
  float outlier_height_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outlier_num_points_threshold_;
  float overlap_factor_;
  float felzenszwalb_sigma_;
  float felzenszwalb_k_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NCutSegmentationParam

// optional float grid_radius = 1 [default = 80];
inline bool NCutSegmentationParam::_internal_has_grid_radius() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_grid_radius() const {
  return _internal_has_grid_radius();
}
inline void NCutSegmentationParam::clear_grid_radius() {
  grid_radius_ = 80;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NCutSegmentationParam::_internal_grid_radius() const {
  return grid_radius_;
}
inline float NCutSegmentationParam::grid_radius() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.grid_radius)
  return _internal_grid_radius();
}
inline void NCutSegmentationParam::_internal_set_grid_radius(float value) {
  _has_bits_[0] |= 0x00000004u;
  grid_radius_ = value;
}
inline void NCutSegmentationParam::set_grid_radius(float value) {
  _internal_set_grid_radius(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.grid_radius)
}

// optional float height_threshold = 2 [default = 2.5];
inline bool NCutSegmentationParam::_internal_has_height_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_height_threshold() const {
  return _internal_has_height_threshold();
}
inline void NCutSegmentationParam::clear_height_threshold() {
  height_threshold_ = 2.5f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NCutSegmentationParam::_internal_height_threshold() const {
  return height_threshold_;
}
inline float NCutSegmentationParam::height_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.height_threshold)
  return _internal_height_threshold();
}
inline void NCutSegmentationParam::_internal_set_height_threshold(float value) {
  _has_bits_[0] |= 0x00000008u;
  height_threshold_ = value;
}
inline void NCutSegmentationParam::set_height_threshold(float value) {
  _internal_set_height_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.height_threshold)
}

// optional float partition_cell_size = 3 [default = 1];
inline bool NCutSegmentationParam::_internal_has_partition_cell_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_partition_cell_size() const {
  return _internal_has_partition_cell_size();
}
inline void NCutSegmentationParam::clear_partition_cell_size() {
  partition_cell_size_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline float NCutSegmentationParam::_internal_partition_cell_size() const {
  return partition_cell_size_;
}
inline float NCutSegmentationParam::partition_cell_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.partition_cell_size)
  return _internal_partition_cell_size();
}
inline void NCutSegmentationParam::_internal_set_partition_cell_size(float value) {
  _has_bits_[0] |= 0x00000010u;
  partition_cell_size_ = value;
}
inline void NCutSegmentationParam::set_partition_cell_size(float value) {
  _internal_set_partition_cell_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.partition_cell_size)
}

// optional float vehicle_filter_cell_size = 4 [default = 0.3];
inline bool NCutSegmentationParam::_internal_has_vehicle_filter_cell_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_vehicle_filter_cell_size() const {
  return _internal_has_vehicle_filter_cell_size();
}
inline void NCutSegmentationParam::clear_vehicle_filter_cell_size() {
  vehicle_filter_cell_size_ = 0.3f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float NCutSegmentationParam::_internal_vehicle_filter_cell_size() const {
  return vehicle_filter_cell_size_;
}
inline float NCutSegmentationParam::vehicle_filter_cell_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.vehicle_filter_cell_size)
  return _internal_vehicle_filter_cell_size();
}
inline void NCutSegmentationParam::_internal_set_vehicle_filter_cell_size(float value) {
  _has_bits_[0] |= 0x00000020u;
  vehicle_filter_cell_size_ = value;
}
inline void NCutSegmentationParam::set_vehicle_filter_cell_size(float value) {
  _internal_set_vehicle_filter_cell_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.vehicle_filter_cell_size)
}

// optional float pedestrian_filter_cell_size = 5 [default = 0.1];
inline bool NCutSegmentationParam::_internal_has_pedestrian_filter_cell_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_pedestrian_filter_cell_size() const {
  return _internal_has_pedestrian_filter_cell_size();
}
inline void NCutSegmentationParam::clear_pedestrian_filter_cell_size() {
  pedestrian_filter_cell_size_ = 0.1f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float NCutSegmentationParam::_internal_pedestrian_filter_cell_size() const {
  return pedestrian_filter_cell_size_;
}
inline float NCutSegmentationParam::pedestrian_filter_cell_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.pedestrian_filter_cell_size)
  return _internal_pedestrian_filter_cell_size();
}
inline void NCutSegmentationParam::_internal_set_pedestrian_filter_cell_size(float value) {
  _has_bits_[0] |= 0x00000040u;
  pedestrian_filter_cell_size_ = value;
}
inline void NCutSegmentationParam::set_pedestrian_filter_cell_size(float value) {
  _internal_set_pedestrian_filter_cell_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.pedestrian_filter_cell_size)
}

// optional float outlier_length = 6 [default = 0.1];
inline bool NCutSegmentationParam::_internal_has_outlier_length() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_outlier_length() const {
  return _internal_has_outlier_length();
}
inline void NCutSegmentationParam::clear_outlier_length() {
  outlier_length_ = 0.1f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float NCutSegmentationParam::_internal_outlier_length() const {
  return outlier_length_;
}
inline float NCutSegmentationParam::outlier_length() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.outlier_length)
  return _internal_outlier_length();
}
inline void NCutSegmentationParam::_internal_set_outlier_length(float value) {
  _has_bits_[0] |= 0x00000080u;
  outlier_length_ = value;
}
inline void NCutSegmentationParam::set_outlier_length(float value) {
  _internal_set_outlier_length(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.outlier_length)
}

// optional float outlier_width = 7 [default = 0.1];
inline bool NCutSegmentationParam::_internal_has_outlier_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_outlier_width() const {
  return _internal_has_outlier_width();
}
inline void NCutSegmentationParam::clear_outlier_width() {
  outlier_width_ = 0.1f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float NCutSegmentationParam::_internal_outlier_width() const {
  return outlier_width_;
}
inline float NCutSegmentationParam::outlier_width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.outlier_width)
  return _internal_outlier_width();
}
inline void NCutSegmentationParam::_internal_set_outlier_width(float value) {
  _has_bits_[0] |= 0x00000100u;
  outlier_width_ = value;
}
inline void NCutSegmentationParam::set_outlier_width(float value) {
  _internal_set_outlier_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.outlier_width)
}

// optional float outlier_height = 8 [default = 0.3];
inline bool NCutSegmentationParam::_internal_has_outlier_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_outlier_height() const {
  return _internal_has_outlier_height();
}
inline void NCutSegmentationParam::clear_outlier_height() {
  outlier_height_ = 0.3f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float NCutSegmentationParam::_internal_outlier_height() const {
  return outlier_height_;
}
inline float NCutSegmentationParam::outlier_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.outlier_height)
  return _internal_outlier_height();
}
inline void NCutSegmentationParam::_internal_set_outlier_height(float value) {
  _has_bits_[0] |= 0x00000200u;
  outlier_height_ = value;
}
inline void NCutSegmentationParam::set_outlier_height(float value) {
  _internal_set_outlier_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.outlier_height)
}

// optional uint32 outlier_min_num_points = 9 [default = 3];
inline bool NCutSegmentationParam::_internal_has_outlier_min_num_points() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_outlier_min_num_points() const {
  return _internal_has_outlier_min_num_points();
}
inline void NCutSegmentationParam::clear_outlier_min_num_points() {
  outlier_min_num_points_ = 3u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutSegmentationParam::_internal_outlier_min_num_points() const {
  return outlier_min_num_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutSegmentationParam::outlier_min_num_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.outlier_min_num_points)
  return _internal_outlier_min_num_points();
}
inline void NCutSegmentationParam::_internal_set_outlier_min_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  outlier_min_num_points_ = value;
}
inline void NCutSegmentationParam::set_outlier_min_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outlier_min_num_points(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.outlier_min_num_points)
}

// optional string ground_detector = 10 [default = "SpatioTemporalGroundDetector"];
inline bool NCutSegmentationParam::_internal_has_ground_detector() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_ground_detector() const {
  return _internal_has_ground_detector();
}
inline void NCutSegmentationParam::clear_ground_detector() {
  ground_detector_.ClearToDefaultNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NCutSegmentationParam::ground_detector() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
  return _internal_ground_detector();
}
inline void NCutSegmentationParam::set_ground_detector(const std::string& value) {
  _internal_set_ground_detector(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
}
inline std::string* NCutSegmentationParam::mutable_ground_detector() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
  return _internal_mutable_ground_detector();
}
inline const std::string& NCutSegmentationParam::_internal_ground_detector() const {
  return ground_detector_.GetNoArena();
}
inline void NCutSegmentationParam::_internal_set_ground_detector(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ground_detector_.SetNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), value);
}
inline void NCutSegmentationParam::set_ground_detector(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ground_detector_.SetNoArena(
    &::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
}
inline void NCutSegmentationParam::set_ground_detector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ground_detector_.SetNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
}
inline void NCutSegmentationParam::set_ground_detector(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ground_detector_.SetNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
}
inline std::string* NCutSegmentationParam::_internal_mutable_ground_detector() {
  _has_bits_[0] |= 0x00000001u;
  return ground_detector_.MutableNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
}
inline std::string* NCutSegmentationParam::release_ground_detector() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
  if (!_internal_has_ground_detector()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ground_detector_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
}
inline void NCutSegmentationParam::set_allocated_ground_detector(std::string* ground_detector) {
  if (ground_detector != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ground_detector_.SetAllocatedNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), ground_detector);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NCutSegmentationParam.ground_detector)
}

// optional string roi_filter = 11 [default = "HdmapROIFilter"];
inline bool NCutSegmentationParam::_internal_has_roi_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_roi_filter() const {
  return _internal_has_roi_filter();
}
inline void NCutSegmentationParam::clear_roi_filter() {
  roi_filter_.ClearToDefaultNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NCutSegmentationParam::roi_filter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
  return _internal_roi_filter();
}
inline void NCutSegmentationParam::set_roi_filter(const std::string& value) {
  _internal_set_roi_filter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
}
inline std::string* NCutSegmentationParam::mutable_roi_filter() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
  return _internal_mutable_roi_filter();
}
inline const std::string& NCutSegmentationParam::_internal_roi_filter() const {
  return roi_filter_.GetNoArena();
}
inline void NCutSegmentationParam::_internal_set_roi_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  roi_filter_.SetNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), value);
}
inline void NCutSegmentationParam::set_roi_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  roi_filter_.SetNoArena(
    &::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
}
inline void NCutSegmentationParam::set_roi_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  roi_filter_.SetNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
}
inline void NCutSegmentationParam::set_roi_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  roi_filter_.SetNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
}
inline std::string* NCutSegmentationParam::_internal_mutable_roi_filter() {
  _has_bits_[0] |= 0x00000002u;
  return roi_filter_.MutableNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
}
inline std::string* NCutSegmentationParam::release_roi_filter() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
  if (!_internal_has_roi_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return roi_filter_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
}
inline void NCutSegmentationParam::set_allocated_roi_filter(std::string* roi_filter) {
  if (roi_filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roi_filter_.SetAllocatedNoArena(&::apollo::perception::lidar::NCutSegmentationParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), roi_filter);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NCutSegmentationParam.roi_filter)
}

// optional bool remove_ground_points = 12 [default = true];
inline bool NCutSegmentationParam::_internal_has_remove_ground_points() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_remove_ground_points() const {
  return _internal_has_remove_ground_points();
}
inline void NCutSegmentationParam::clear_remove_ground_points() {
  remove_ground_points_ = true;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool NCutSegmentationParam::_internal_remove_ground_points() const {
  return remove_ground_points_;
}
inline bool NCutSegmentationParam::remove_ground_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.remove_ground_points)
  return _internal_remove_ground_points();
}
inline void NCutSegmentationParam::_internal_set_remove_ground_points(bool value) {
  _has_bits_[0] |= 0x00000800u;
  remove_ground_points_ = value;
}
inline void NCutSegmentationParam::set_remove_ground_points(bool value) {
  _internal_set_remove_ground_points(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.remove_ground_points)
}

// optional bool remove_roi = 13 [default = true];
inline bool NCutSegmentationParam::_internal_has_remove_roi() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NCutSegmentationParam::has_remove_roi() const {
  return _internal_has_remove_roi();
}
inline void NCutSegmentationParam::clear_remove_roi() {
  remove_roi_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool NCutSegmentationParam::_internal_remove_roi() const {
  return remove_roi_;
}
inline bool NCutSegmentationParam::remove_roi() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutSegmentationParam.remove_roi)
  return _internal_remove_roi();
}
inline void NCutSegmentationParam::_internal_set_remove_roi(bool value) {
  _has_bits_[0] |= 0x00001000u;
  remove_roi_ = value;
}
inline void NCutSegmentationParam::set_remove_roi(bool value) {
  _internal_set_remove_roi(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutSegmentationParam.remove_roi)
}

// -------------------------------------------------------------------

// NCutParam

// optional float grid_radius = 1 [default = 80];
inline bool NCutParam::_internal_has_grid_radius() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NCutParam::has_grid_radius() const {
  return _internal_has_grid_radius();
}
inline void NCutParam::clear_grid_radius() {
  grid_radius_ = 80;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NCutParam::_internal_grid_radius() const {
  return grid_radius_;
}
inline float NCutParam::grid_radius() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.grid_radius)
  return _internal_grid_radius();
}
inline void NCutParam::_internal_set_grid_radius(float value) {
  _has_bits_[0] |= 0x00000002u;
  grid_radius_ = value;
}
inline void NCutParam::set_grid_radius(float value) {
  _internal_set_grid_radius(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.grid_radius)
}

// optional float connect_radius = 2 [default = 1];
inline bool NCutParam::_internal_has_connect_radius() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NCutParam::has_connect_radius() const {
  return _internal_has_connect_radius();
}
inline void NCutParam::clear_connect_radius() {
  connect_radius_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NCutParam::_internal_connect_radius() const {
  return connect_radius_;
}
inline float NCutParam::connect_radius() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.connect_radius)
  return _internal_connect_radius();
}
inline void NCutParam::_internal_set_connect_radius(float value) {
  _has_bits_[0] |= 0x00000004u;
  connect_radius_ = value;
}
inline void NCutParam::set_connect_radius(float value) {
  _internal_set_connect_radius(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.connect_radius)
}

// optional float super_pixel_cell_size = 3 [default = 0.25];
inline bool NCutParam::_internal_has_super_pixel_cell_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NCutParam::has_super_pixel_cell_size() const {
  return _internal_has_super_pixel_cell_size();
}
inline void NCutParam::clear_super_pixel_cell_size() {
  super_pixel_cell_size_ = 0.25f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NCutParam::_internal_super_pixel_cell_size() const {
  return super_pixel_cell_size_;
}
inline float NCutParam::super_pixel_cell_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.super_pixel_cell_size)
  return _internal_super_pixel_cell_size();
}
inline void NCutParam::_internal_set_super_pixel_cell_size(float value) {
  _has_bits_[0] |= 0x00000008u;
  super_pixel_cell_size_ = value;
}
inline void NCutParam::set_super_pixel_cell_size(float value) {
  _internal_set_super_pixel_cell_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.super_pixel_cell_size)
}

// optional uint32 num_cuts = 4 [default = 5];
inline bool NCutParam::_internal_has_num_cuts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NCutParam::has_num_cuts() const {
  return _internal_has_num_cuts();
}
inline void NCutParam::clear_num_cuts() {
  num_cuts_ = 5u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::_internal_num_cuts() const {
  return num_cuts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::num_cuts() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.num_cuts)
  return _internal_num_cuts();
}
inline void NCutParam::_internal_set_num_cuts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_cuts_ = value;
}
inline void NCutParam::set_num_cuts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_cuts(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.num_cuts)
}

// optional float ncuts_stop_threshold = 5 [default = 0.4];
inline bool NCutParam::_internal_has_ncuts_stop_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NCutParam::has_ncuts_stop_threshold() const {
  return _internal_has_ncuts_stop_threshold();
}
inline void NCutParam::clear_ncuts_stop_threshold() {
  ncuts_stop_threshold_ = 0.4f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float NCutParam::_internal_ncuts_stop_threshold() const {
  return ncuts_stop_threshold_;
}
inline float NCutParam::ncuts_stop_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.ncuts_stop_threshold)
  return _internal_ncuts_stop_threshold();
}
inline void NCutParam::_internal_set_ncuts_stop_threshold(float value) {
  _has_bits_[0] |= 0x00000020u;
  ncuts_stop_threshold_ = value;
}
inline void NCutParam::set_ncuts_stop_threshold(float value) {
  _internal_set_ncuts_stop_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.ncuts_stop_threshold)
}

// optional float ncuts_enable_classifier_threshold = 6 [default = 0.3];
inline bool NCutParam::_internal_has_ncuts_enable_classifier_threshold() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NCutParam::has_ncuts_enable_classifier_threshold() const {
  return _internal_has_ncuts_enable_classifier_threshold();
}
inline void NCutParam::clear_ncuts_enable_classifier_threshold() {
  ncuts_enable_classifier_threshold_ = 0.3f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float NCutParam::_internal_ncuts_enable_classifier_threshold() const {
  return ncuts_enable_classifier_threshold_;
}
inline float NCutParam::ncuts_enable_classifier_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.ncuts_enable_classifier_threshold)
  return _internal_ncuts_enable_classifier_threshold();
}
inline void NCutParam::_internal_set_ncuts_enable_classifier_threshold(float value) {
  _has_bits_[0] |= 0x00000040u;
  ncuts_enable_classifier_threshold_ = value;
}
inline void NCutParam::set_ncuts_enable_classifier_threshold(float value) {
  _internal_set_ncuts_enable_classifier_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.ncuts_enable_classifier_threshold)
}

// optional float sigma_space = 7 [default = 1.5];
inline bool NCutParam::_internal_has_sigma_space() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NCutParam::has_sigma_space() const {
  return _internal_has_sigma_space();
}
inline void NCutParam::clear_sigma_space() {
  sigma_space_ = 1.5f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float NCutParam::_internal_sigma_space() const {
  return sigma_space_;
}
inline float NCutParam::sigma_space() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.sigma_space)
  return _internal_sigma_space();
}
inline void NCutParam::_internal_set_sigma_space(float value) {
  _has_bits_[0] |= 0x00000080u;
  sigma_space_ = value;
}
inline void NCutParam::set_sigma_space(float value) {
  _internal_set_sigma_space(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.sigma_space)
}

// optional float sigma_feature = 8 [default = 1.5];
inline bool NCutParam::_internal_has_sigma_feature() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NCutParam::has_sigma_feature() const {
  return _internal_has_sigma_feature();
}
inline void NCutParam::clear_sigma_feature() {
  sigma_feature_ = 1.5f;
  _has_bits_[0] &= ~0x00000100u;
}
inline float NCutParam::_internal_sigma_feature() const {
  return sigma_feature_;
}
inline float NCutParam::sigma_feature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.sigma_feature)
  return _internal_sigma_feature();
}
inline void NCutParam::_internal_set_sigma_feature(float value) {
  _has_bits_[0] |= 0x00000100u;
  sigma_feature_ = value;
}
inline void NCutParam::set_sigma_feature(float value) {
  _internal_set_sigma_feature(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.sigma_feature)
}

// optional float skeleton_cell_size = 9 [default = 0.2];
inline bool NCutParam::_internal_has_skeleton_cell_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NCutParam::has_skeleton_cell_size() const {
  return _internal_has_skeleton_cell_size();
}
inline void NCutParam::clear_skeleton_cell_size() {
  skeleton_cell_size_ = 0.2f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float NCutParam::_internal_skeleton_cell_size() const {
  return skeleton_cell_size_;
}
inline float NCutParam::skeleton_cell_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.skeleton_cell_size)
  return _internal_skeleton_cell_size();
}
inline void NCutParam::_internal_set_skeleton_cell_size(float value) {
  _has_bits_[0] |= 0x00000200u;
  skeleton_cell_size_ = value;
}
inline void NCutParam::set_skeleton_cell_size(float value) {
  _internal_set_skeleton_cell_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.skeleton_cell_size)
}

// optional uint32 patch_size = 10 [default = 3];
inline bool NCutParam::_internal_has_patch_size() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NCutParam::has_patch_size() const {
  return _internal_has_patch_size();
}
inline void NCutParam::clear_patch_size() {
  patch_size_ = 3u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::_internal_patch_size() const {
  return patch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::patch_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.patch_size)
  return _internal_patch_size();
}
inline void NCutParam::_internal_set_patch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  patch_size_ = value;
}
inline void NCutParam::set_patch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_patch_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.patch_size)
}

// optional float outlier_width_threshold = 11 [default = 0.1];
inline bool NCutParam::_internal_has_outlier_width_threshold() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NCutParam::has_outlier_width_threshold() const {
  return _internal_has_outlier_width_threshold();
}
inline void NCutParam::clear_outlier_width_threshold() {
  outlier_width_threshold_ = 0.1f;
  _has_bits_[0] &= ~0x00000800u;
}
inline float NCutParam::_internal_outlier_width_threshold() const {
  return outlier_width_threshold_;
}
inline float NCutParam::outlier_width_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.outlier_width_threshold)
  return _internal_outlier_width_threshold();
}
inline void NCutParam::_internal_set_outlier_width_threshold(float value) {
  _has_bits_[0] |= 0x00000800u;
  outlier_width_threshold_ = value;
}
inline void NCutParam::set_outlier_width_threshold(float value) {
  _internal_set_outlier_width_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.outlier_width_threshold)
}

// optional float outlier_height_threshold = 12 [default = 0.1];
inline bool NCutParam::_internal_has_outlier_height_threshold() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NCutParam::has_outlier_height_threshold() const {
  return _internal_has_outlier_height_threshold();
}
inline void NCutParam::clear_outlier_height_threshold() {
  outlier_height_threshold_ = 0.1f;
  _has_bits_[0] &= ~0x00001000u;
}
inline float NCutParam::_internal_outlier_height_threshold() const {
  return outlier_height_threshold_;
}
inline float NCutParam::outlier_height_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.outlier_height_threshold)
  return _internal_outlier_height_threshold();
}
inline void NCutParam::_internal_set_outlier_height_threshold(float value) {
  _has_bits_[0] |= 0x00001000u;
  outlier_height_threshold_ = value;
}
inline void NCutParam::set_outlier_height_threshold(float value) {
  _internal_set_outlier_height_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.outlier_height_threshold)
}

// optional uint32 outlier_num_points_threshold = 13 [default = 10];
inline bool NCutParam::_internal_has_outlier_num_points_threshold() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool NCutParam::has_outlier_num_points_threshold() const {
  return _internal_has_outlier_num_points_threshold();
}
inline void NCutParam::clear_outlier_num_points_threshold() {
  outlier_num_points_threshold_ = 10u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::_internal_outlier_num_points_threshold() const {
  return outlier_num_points_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::outlier_num_points_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.outlier_num_points_threshold)
  return _internal_outlier_num_points_threshold();
}
inline void NCutParam::_internal_set_outlier_num_points_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  outlier_num_points_threshold_ = value;
}
inline void NCutParam::set_outlier_num_points_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outlier_num_points_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.outlier_num_points_threshold)
}

// optional float overlap_factor = 14 [default = 0.05];
inline bool NCutParam::_internal_has_overlap_factor() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool NCutParam::has_overlap_factor() const {
  return _internal_has_overlap_factor();
}
inline void NCutParam::clear_overlap_factor() {
  overlap_factor_ = 0.05f;
  _has_bits_[0] &= ~0x00004000u;
}
inline float NCutParam::_internal_overlap_factor() const {
  return overlap_factor_;
}
inline float NCutParam::overlap_factor() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.overlap_factor)
  return _internal_overlap_factor();
}
inline void NCutParam::_internal_set_overlap_factor(float value) {
  _has_bits_[0] |= 0x00004000u;
  overlap_factor_ = value;
}
inline void NCutParam::set_overlap_factor(float value) {
  _internal_set_overlap_factor(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.overlap_factor)
}

// optional float felzenszwalb_sigma = 15 [default = 0.5];
inline bool NCutParam::_internal_has_felzenszwalb_sigma() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool NCutParam::has_felzenszwalb_sigma() const {
  return _internal_has_felzenszwalb_sigma();
}
inline void NCutParam::clear_felzenszwalb_sigma() {
  felzenszwalb_sigma_ = 0.5f;
  _has_bits_[0] &= ~0x00008000u;
}
inline float NCutParam::_internal_felzenszwalb_sigma() const {
  return felzenszwalb_sigma_;
}
inline float NCutParam::felzenszwalb_sigma() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.felzenszwalb_sigma)
  return _internal_felzenszwalb_sigma();
}
inline void NCutParam::_internal_set_felzenszwalb_sigma(float value) {
  _has_bits_[0] |= 0x00008000u;
  felzenszwalb_sigma_ = value;
}
inline void NCutParam::set_felzenszwalb_sigma(float value) {
  _internal_set_felzenszwalb_sigma(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.felzenszwalb_sigma)
}

// optional float felzenszwalb_k = 16 [default = 30];
inline bool NCutParam::_internal_has_felzenszwalb_k() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool NCutParam::has_felzenszwalb_k() const {
  return _internal_has_felzenszwalb_k();
}
inline void NCutParam::clear_felzenszwalb_k() {
  felzenszwalb_k_ = 30;
  _has_bits_[0] &= ~0x00010000u;
}
inline float NCutParam::_internal_felzenszwalb_k() const {
  return felzenszwalb_k_;
}
inline float NCutParam::felzenszwalb_k() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.felzenszwalb_k)
  return _internal_felzenszwalb_k();
}
inline void NCutParam::_internal_set_felzenszwalb_k(float value) {
  _has_bits_[0] |= 0x00010000u;
  felzenszwalb_k_ = value;
}
inline void NCutParam::set_felzenszwalb_k(float value) {
  _internal_set_felzenszwalb_k(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.felzenszwalb_k)
}

// optional uint32 felzenszwalb_min_size = 17 [default = 10];
inline bool NCutParam::_internal_has_felzenszwalb_min_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NCutParam::has_felzenszwalb_min_size() const {
  return _internal_has_felzenszwalb_min_size();
}
inline void NCutParam::clear_felzenszwalb_min_size() {
  felzenszwalb_min_size_ = 10u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::_internal_felzenszwalb_min_size() const {
  return felzenszwalb_min_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NCutParam::felzenszwalb_min_size() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NCutParam.felzenszwalb_min_size)
  return _internal_felzenszwalb_min_size();
}
inline void NCutParam::_internal_set_felzenszwalb_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  felzenszwalb_min_size_ = value;
}
inline void NCutParam::set_felzenszwalb_min_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_felzenszwalb_min_size(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NCutParam.felzenszwalb_min_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fsegmentation_2fncut_2fproto_2fncut_5fparam_2eproto
