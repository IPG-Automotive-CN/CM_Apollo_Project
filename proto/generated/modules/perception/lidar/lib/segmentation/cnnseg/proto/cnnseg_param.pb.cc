// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.proto

#include "modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class CNNSegParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNNSegParam> _instance;
} _CNNSegParam_default_instance_;
class NetworkParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkParam> _instance;
} _NetworkParam_default_instance_;
class FeatureParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureParam> _instance;
} _FeatureParam_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_CNNSegParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.DefaultConstruct();
  *::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get_mutable() = std::string("CaffeNet", 8);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get_mutable());
  ::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.DefaultConstruct();
  *::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get_mutable() = std::string("SpatioTemporalGroundDetector", 28);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get_mutable());
  ::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.DefaultConstruct();
  *::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get_mutable() = std::string("HdmapROIFilter", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_CNNSegParam_default_instance_;
    new (ptr) ::apollo::perception::lidar::CNNSegParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::CNNSegParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CNNSegParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CNNSegParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto}, {
      &scc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base,
      &scc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base,}};

static void InitDefaultsscc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_FeatureParam_default_instance_;
    new (ptr) ::apollo::perception::lidar::FeatureParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::FeatureParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto}, {}};

static void InitDefaultsscc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get_mutable() = std::string("instance_pt", 11);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get_mutable());
  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get_mutable() = std::string("category_score", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get_mutable());
  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get_mutable() = std::string("confidence_score", 16);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get_mutable());
  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get_mutable() = std::string("height_pt", 9);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get_mutable());
  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get_mutable() = std::string("class_score", 11);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get_mutable());
  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get_mutable() = std::string("heading_pt", 10);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get_mutable());
  ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.DefaultConstruct();
  *::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get_mutable() = std::string("data", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_NetworkParam_default_instance_;
    new (ptr) ::apollo::perception::lidar::NetworkParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::NetworkParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, model_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, network_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, feature_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, do_classification_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, do_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, ground_detector_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, roi_filter_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, remove_ground_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, objectness_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, confidence_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, height_thresh_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, min_pts_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::CNNSegParam, confidence_range_),
  0,
  3,
  4,
  7,
  8,
  5,
  1,
  2,
  6,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, instance_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, category_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, confidence_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, height_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, class_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, heading_pt_blob_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::NetworkParam, feature_blob_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, point_cloud_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, min_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, max_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, use_intensity_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::FeatureParam, use_constant_feature_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::apollo::perception::lidar::CNNSegParam)},
  { 33, 45, sizeof(::apollo::perception::lidar::NetworkParam)},
  { 52, 64, sizeof(::apollo::perception::lidar::FeatureParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_CNNSegParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_NetworkParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_FeatureParam_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nImodules/perception/lidar/lib/segmentat"
  "ion/cnnseg/proto/cnnseg_param.proto\022\027apo"
  "llo.perception.lidar\"\207\004\n\013CNNSegParam\022\034\n\n"
  "model_type\030\001 \001(\t:\010CaffeNet\022<\n\rnetwork_pa"
  "ram\030\002 \001(\0132%.apollo.perception.lidar.Netw"
  "orkParam\022<\n\rfeature_param\030\003 \001(\0132%.apollo"
  ".perception.lidar.FeatureParam\022\037\n\021do_cla"
  "ssification\030\004 \001(\010:\004true\022\030\n\ndo_heading\030\005 "
  "\001(\010:\004true\022\021\n\006gpu_id\030\006 \001(\r:\0010\0225\n\017ground_d"
  "etector\030\007 \001(\t:\034SpatioTemporalGroundDetec"
  "tor\022\"\n\nroi_filter\030\010 \001(\t:\016HdmapROIFilter\022"
  "#\n\024remove_ground_points\030\t \001(\010:\005false\022\036\n\021"
  "objectness_thresh\030\n \001(\002:\0030.5\022\036\n\021confiden"
  "ce_thresh\030\013 \001(\002:\0030.1\022\032\n\rheight_thresh\030\014 "
  "\001(\002:\0030.5\022\026\n\013min_pts_num\030\r \001(\r:\0013\022\034\n\020conf"
  "idence_range\030\016 \001(\002:\00260\"\225\002\n\014NetworkParam\022"
  "%\n\020instance_pt_blob\030\001 \001(\t:\013instance_pt\022("
  "\n\020category_pt_blob\030\002 \001(\t:\016category_score"
  "\022,\n\022confidence_pt_blob\030\003 \001(\t:\020confidence"
  "_score\022!\n\016height_pt_blob\030\004 \001(\t:\theight_p"
  "t\022\"\n\rclass_pt_blob\030\005 \001(\t:\013class_score\022#\n"
  "\017heading_pt_blob\030\006 \001(\t:\nheading_pt\022\032\n\014fe"
  "ature_blob\030\007 \001(\t:\004data\"\316\001\n\014FeatureParam\022"
  "\035\n\021point_cloud_range\030\001 \001(\002:\00260\022\022\n\005width\030"
  "\002 \001(\r:\003512\022\023\n\006height\030\003 \001(\r:\003512\022\026\n\nmin_h"
  "eight\030\004 \001(\002:\002-5\022\025\n\nmax_height\030\005 \001(\002:\0015\022#"
  "\n\025use_intensity_feature\030\006 \001(\010:\004true\022\"\n\024u"
  "se_constant_feature\030\007 \001(\010:\004true"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_sccs[3] = {
  &scc_info_CNNSegParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base,
  &scc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base,
  &scc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_once;
static bool descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto = {
  &descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto, "modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.proto", 1111,
  &descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_once, descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_sccs, descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto::offsets,
  file_level_metadata_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto, 3, file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto, file_level_service_descriptors_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto), true);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void CNNSegParam::InitAsDefaultInstance() {
  ::apollo::perception::lidar::_CNNSegParam_default_instance_._instance.get_mutable()->network_param_ = const_cast< ::apollo::perception::lidar::NetworkParam*>(
      ::apollo::perception::lidar::NetworkParam::internal_default_instance());
  ::apollo::perception::lidar::_CNNSegParam_default_instance_._instance.get_mutable()->feature_param_ = const_cast< ::apollo::perception::lidar::FeatureParam*>(
      ::apollo::perception::lidar::FeatureParam::internal_default_instance());
}
class CNNSegParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CNNSegParam>()._has_bits_);
  static void set_has_model_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::lidar::NetworkParam& network_param(const CNNSegParam* msg);
  static void set_has_network_param(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::lidar::FeatureParam& feature_param(const CNNSegParam* msg);
  static void set_has_feature_param(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_do_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_do_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ground_detector(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roi_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remove_ground_points(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_objectness_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_confidence_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_height_thresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_pts_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_confidence_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::perception::lidar::NetworkParam&
CNNSegParam::_Internal::network_param(const CNNSegParam* msg) {
  return *msg->network_param_;
}
const ::apollo::perception::lidar::FeatureParam&
CNNSegParam::_Internal::feature_param(const CNNSegParam* msg) {
  return *msg->feature_param_;
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_;
CNNSegParam::CNNSegParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.CNNSegParam)
}
CNNSegParam::CNNSegParam(const CNNSegParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_type_.UnsafeSetDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  if (from._internal_has_model_type()) {
    model_type_.AssignWithDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(), from.model_type_);
  }
  ground_detector_.UnsafeSetDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  if (from._internal_has_ground_detector()) {
    ground_detector_.AssignWithDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), from.ground_detector_);
  }
  roi_filter_.UnsafeSetDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  if (from._internal_has_roi_filter()) {
    roi_filter_.AssignWithDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), from.roi_filter_);
  }
  if (from._internal_has_network_param()) {
    network_param_ = new ::apollo::perception::lidar::NetworkParam(*from.network_param_);
  } else {
    network_param_ = nullptr;
  }
  if (from._internal_has_feature_param()) {
    feature_param_ = new ::apollo::perception::lidar::FeatureParam(*from.feature_param_);
  } else {
    feature_param_ = nullptr;
  }
  ::memcpy(&gpu_id_, &from.gpu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_range_) -
    reinterpret_cast<char*>(&gpu_id_)) + sizeof(confidence_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.CNNSegParam)
}

void CNNSegParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CNNSegParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base);
  model_type_.UnsafeSetDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  ground_detector_.UnsafeSetDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  roi_filter_.UnsafeSetDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  ::memset(&network_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remove_ground_points_) -
      reinterpret_cast<char*>(&network_param_)) + sizeof(remove_ground_points_));
  do_classification_ = true;
  do_heading_ = true;
  objectness_thresh_ = 0.5f;
  confidence_thresh_ = 0.1f;
  height_thresh_ = 0.5f;
  min_pts_num_ = 3u;
  confidence_range_ = 60;
}

CNNSegParam::~CNNSegParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.CNNSegParam)
  SharedDtor();
}

void CNNSegParam::SharedDtor() {
  model_type_.DestroyNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  ground_detector_.DestroyNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  roi_filter_.DestroyNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  if (this != internal_default_instance()) delete network_param_;
  if (this != internal_default_instance()) delete feature_param_;
}

void CNNSegParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNNSegParam& CNNSegParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNNSegParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base);
  return *internal_default_instance();
}


void CNNSegParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.CNNSegParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      model_type_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      ground_detector_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      roi_filter_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(network_param_ != nullptr);
      network_param_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(feature_param_ != nullptr);
      feature_param_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&gpu_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remove_ground_points_) -
        reinterpret_cast<char*>(&gpu_id_)) + sizeof(remove_ground_points_));
    do_classification_ = true;
  }
  if (cached_has_bits & 0x00003f00u) {
    do_heading_ = true;
    objectness_thresh_ = 0.5f;
    confidence_thresh_ = 0.1f;
    height_thresh_ = 0.5f;
    min_pts_num_ = 3u;
    confidence_range_ = 60;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CNNSegParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string model_type = 1 [default = "CaffeNet"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_model_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.CNNSegParam.model_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.lidar.NetworkParam network_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.lidar.FeatureParam feature_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool do_classification = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_do_classification(&has_bits);
          do_classification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool do_heading = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_do_heading(&has_bits);
          do_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpu_id = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ground_detector = 7 [default = "SpatioTemporalGroundDetector"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ground_detector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.CNNSegParam.ground_detector");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string roi_filter = 8 [default = "HdmapROIFilter"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_roi_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.CNNSegParam.roi_filter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool remove_ground_points = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_remove_ground_points(&has_bits);
          remove_ground_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float objectness_thresh = 10 [default = 0.5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_objectness_thresh(&has_bits);
          objectness_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float confidence_thresh = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_confidence_thresh(&has_bits);
          confidence_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height_thresh = 12 [default = 0.5];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_height_thresh(&has_bits);
          height_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_pts_num = 13 [default = 3];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_pts_num(&has_bits);
          min_pts_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence_range = 14 [default = 60];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_confidence_range(&has_bits);
          confidence_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNNSegParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.CNNSegParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_type = 1 [default = "CaffeNet"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.CNNSegParam.model_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_type(), target);
  }

  // optional .apollo.perception.lidar.NetworkParam network_param = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network_param(this), target, stream);
  }

  // optional .apollo.perception.lidar.FeatureParam feature_param = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::feature_param(this), target, stream);
  }

  // optional bool do_classification = 4 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_do_classification(), target);
  }

  // optional bool do_heading = 5 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_do_heading(), target);
  }

  // optional uint32 gpu_id = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gpu_id(), target);
  }

  // optional string ground_detector = 7 [default = "SpatioTemporalGroundDetector"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ground_detector().data(), static_cast<int>(this->_internal_ground_detector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.CNNSegParam.ground_detector");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ground_detector(), target);
  }

  // optional string roi_filter = 8 [default = "HdmapROIFilter"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_roi_filter().data(), static_cast<int>(this->_internal_roi_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.CNNSegParam.roi_filter");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_roi_filter(), target);
  }

  // optional bool remove_ground_points = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_remove_ground_points(), target);
  }

  // optional float objectness_thresh = 10 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_objectness_thresh(), target);
  }

  // optional float confidence_thresh = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_confidence_thresh(), target);
  }

  // optional float height_thresh = 12 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_height_thresh(), target);
  }

  // optional uint32 min_pts_num = 13 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_min_pts_num(), target);
  }

  // optional float confidence_range = 14 [default = 60];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_confidence_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.CNNSegParam)
  return target;
}

size_t CNNSegParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.CNNSegParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string model_type = 1 [default = "CaffeNet"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_type());
    }

    // optional string ground_detector = 7 [default = "SpatioTemporalGroundDetector"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ground_detector());
    }

    // optional string roi_filter = 8 [default = "HdmapROIFilter"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roi_filter());
    }

    // optional .apollo.perception.lidar.NetworkParam network_param = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_param_);
    }

    // optional .apollo.perception.lidar.FeatureParam feature_param = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_param_);
    }

    // optional uint32 gpu_id = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpu_id());
    }

    // optional bool remove_ground_points = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool do_classification = 4 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool do_heading = 5 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional float objectness_thresh = 10 [default = 0.5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float confidence_thresh = 11 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float height_thresh = 12 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 min_pts_num = 13 [default = 3];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_pts_num());
    }

    // optional float confidence_range = 14 [default = 60];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNNSegParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.CNNSegParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CNNSegParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNNSegParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.CNNSegParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.CNNSegParam)
    MergeFrom(*source);
  }
}

void CNNSegParam::MergeFrom(const CNNSegParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.CNNSegParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      model_type_.AssignWithDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(), from.model_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ground_detector_.AssignWithDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), from.ground_detector_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      roi_filter_.AssignWithDefault(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), from.roi_filter_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_network_param()->::apollo::perception::lidar::NetworkParam::MergeFrom(from._internal_network_param());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_feature_param()->::apollo::perception::lidar::FeatureParam::MergeFrom(from._internal_feature_param());
    }
    if (cached_has_bits & 0x00000020u) {
      gpu_id_ = from.gpu_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      remove_ground_points_ = from.remove_ground_points_;
    }
    if (cached_has_bits & 0x00000080u) {
      do_classification_ = from.do_classification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      do_heading_ = from.do_heading_;
    }
    if (cached_has_bits & 0x00000200u) {
      objectness_thresh_ = from.objectness_thresh_;
    }
    if (cached_has_bits & 0x00000400u) {
      confidence_thresh_ = from.confidence_thresh_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_thresh_ = from.height_thresh_;
    }
    if (cached_has_bits & 0x00001000u) {
      min_pts_num_ = from.min_pts_num_;
    }
    if (cached_has_bits & 0x00002000u) {
      confidence_range_ = from.confidence_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNNSegParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.CNNSegParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNNSegParam::CopyFrom(const CNNSegParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.CNNSegParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNNSegParam::IsInitialized() const {
  return true;
}

void CNNSegParam::InternalSwap(CNNSegParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_type_.Swap(&other->model_type_, &::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(),
    GetArenaNoVirtual());
  ground_detector_.Swap(&other->ground_detector_, &::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(),
    GetArenaNoVirtual());
  roi_filter_.Swap(&other->roi_filter_, &::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(),
    GetArenaNoVirtual());
  swap(network_param_, other->network_param_);
  swap(feature_param_, other->feature_param_);
  swap(gpu_id_, other->gpu_id_);
  swap(remove_ground_points_, other->remove_ground_points_);
  swap(do_classification_, other->do_classification_);
  swap(do_heading_, other->do_heading_);
  swap(objectness_thresh_, other->objectness_thresh_);
  swap(confidence_thresh_, other->confidence_thresh_);
  swap(height_thresh_, other->height_thresh_);
  swap(min_pts_num_, other->min_pts_num_);
  swap(confidence_range_, other->confidence_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNNSegParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkParam::InitAsDefaultInstance() {
}
class NetworkParam::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkParam>()._has_bits_);
  static void set_has_instance_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_confidence_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_class_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_pt_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_feature_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_;
NetworkParam::NetworkParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.NetworkParam)
}
NetworkParam::NetworkParam(const NetworkParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
  if (from._internal_has_instance_pt_blob()) {
    instance_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(), from.instance_pt_blob_);
  }
  category_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
  if (from._internal_has_category_pt_blob()) {
    category_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(), from.category_pt_blob_);
  }
  confidence_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
  if (from._internal_has_confidence_pt_blob()) {
    confidence_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(), from.confidence_pt_blob_);
  }
  height_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
  if (from._internal_has_height_pt_blob()) {
    height_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(), from.height_pt_blob_);
  }
  class_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
  if (from._internal_has_class_pt_blob()) {
    class_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(), from.class_pt_blob_);
  }
  heading_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
  if (from._internal_has_heading_pt_blob()) {
    heading_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(), from.heading_pt_blob_);
  }
  feature_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
  if (from._internal_has_feature_blob()) {
    feature_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(), from.feature_blob_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.NetworkParam)
}

void NetworkParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base);
  instance_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
  category_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
  confidence_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
  height_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
  class_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
  heading_pt_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
  feature_blob_.UnsafeSetDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
}

NetworkParam::~NetworkParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.NetworkParam)
  SharedDtor();
}

void NetworkParam::SharedDtor() {
  instance_pt_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
  category_pt_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
  confidence_pt_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
  height_pt_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
  class_pt_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
  heading_pt_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
  feature_blob_.DestroyNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
}

void NetworkParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkParam& NetworkParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base);
  return *internal_default_instance();
}


void NetworkParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.NetworkParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      instance_pt_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      category_pt_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      confidence_pt_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      height_pt_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      class_pt_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      heading_pt_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      feature_blob_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NetworkParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string instance_pt_blob = 1 [default = "instance_pt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instance_pt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.instance_pt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string category_pt_blob = 2 [default = "category_score"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_category_pt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.category_pt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string confidence_pt_blob = 3 [default = "confidence_score"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_confidence_pt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.confidence_pt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string height_pt_blob = 4 [default = "height_pt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_height_pt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.height_pt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string class_pt_blob = 5 [default = "class_score"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_class_pt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.class_pt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string heading_pt_blob = 6 [default = "heading_pt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_heading_pt_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.heading_pt_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string feature_blob = 7 [default = "data"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_feature_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.NetworkParam.feature_blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.NetworkParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instance_pt_blob().data(), static_cast<int>(this->_internal_instance_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.instance_pt_blob");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_pt_blob(), target);
  }

  // optional string category_pt_blob = 2 [default = "category_score"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category_pt_blob().data(), static_cast<int>(this->_internal_category_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.category_pt_blob");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category_pt_blob(), target);
  }

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_confidence_pt_blob().data(), static_cast<int>(this->_internal_confidence_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.confidence_pt_blob");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_confidence_pt_blob(), target);
  }

  // optional string height_pt_blob = 4 [default = "height_pt"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_height_pt_blob().data(), static_cast<int>(this->_internal_height_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.height_pt_blob");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_height_pt_blob(), target);
  }

  // optional string class_pt_blob = 5 [default = "class_score"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_class_pt_blob().data(), static_cast<int>(this->_internal_class_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.class_pt_blob");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_class_pt_blob(), target);
  }

  // optional string heading_pt_blob = 6 [default = "heading_pt"];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heading_pt_blob().data(), static_cast<int>(this->_internal_heading_pt_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.heading_pt_blob");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_heading_pt_blob(), target);
  }

  // optional string feature_blob = 7 [default = "data"];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_feature_blob().data(), static_cast<int>(this->_internal_feature_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.NetworkParam.feature_blob");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_feature_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.NetworkParam)
  return target;
}

size_t NetworkParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.NetworkParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string instance_pt_blob = 1 [default = "instance_pt"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance_pt_blob());
    }

    // optional string category_pt_blob = 2 [default = "category_score"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category_pt_blob());
    }

    // optional string confidence_pt_blob = 3 [default = "confidence_score"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_confidence_pt_blob());
    }

    // optional string height_pt_blob = 4 [default = "height_pt"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_height_pt_blob());
    }

    // optional string class_pt_blob = 5 [default = "class_score"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_pt_blob());
    }

    // optional string heading_pt_blob = 6 [default = "heading_pt"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heading_pt_blob());
    }

    // optional string feature_blob = 7 [default = "data"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_feature_blob());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.NetworkParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.NetworkParam)
    MergeFrom(*source);
  }
}

void NetworkParam::MergeFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.NetworkParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      instance_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(), from.instance_pt_blob_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      category_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(), from.category_pt_blob_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      confidence_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(), from.confidence_pt_blob_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      height_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(), from.height_pt_blob_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      class_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(), from.class_pt_blob_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      heading_pt_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(), from.heading_pt_blob_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      feature_blob_.AssignWithDefault(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(), from.feature_blob_);
    }
  }
}

void NetworkParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParam::CopyFrom(const NetworkParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.NetworkParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParam::IsInitialized() const {
  return true;
}

void NetworkParam::InternalSwap(NetworkParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  instance_pt_blob_.Swap(&other->instance_pt_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(),
    GetArenaNoVirtual());
  category_pt_blob_.Swap(&other->category_pt_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(),
    GetArenaNoVirtual());
  confidence_pt_blob_.Swap(&other->confidence_pt_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(),
    GetArenaNoVirtual());
  height_pt_blob_.Swap(&other->height_pt_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(),
    GetArenaNoVirtual());
  class_pt_blob_.Swap(&other->class_pt_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(),
    GetArenaNoVirtual());
  heading_pt_blob_.Swap(&other->heading_pt_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(),
    GetArenaNoVirtual());
  feature_blob_.Swap(&other->feature_blob_, &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureParam::InitAsDefaultInstance() {
}
class FeatureParam::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureParam>()._has_bits_);
  static void set_has_point_cloud_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_intensity_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_use_constant_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

FeatureParam::FeatureParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.FeatureParam)
}
FeatureParam::FeatureParam(const FeatureParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_cloud_range_, &from.point_cloud_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_constant_feature_) -
    reinterpret_cast<char*>(&point_cloud_range_)) + sizeof(use_constant_feature_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.FeatureParam)
}

void FeatureParam::SharedCtor() {
  point_cloud_range_ = 60;
  width_ = 512u;
  height_ = 512u;
  min_height_ = -5;
  max_height_ = 5;
  use_intensity_feature_ = true;
  use_constant_feature_ = true;
}

FeatureParam::~FeatureParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.FeatureParam)
  SharedDtor();
}

void FeatureParam::SharedDtor() {
}

void FeatureParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureParam& FeatureParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureParam_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.base);
  return *internal_default_instance();
}


void FeatureParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.FeatureParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    point_cloud_range_ = 60;
    width_ = 512u;
    height_ = 512u;
    min_height_ = -5;
    max_height_ = 5;
    use_intensity_feature_ = true;
    use_constant_feature_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FeatureParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float point_cloud_range = 1 [default = 60];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_point_cloud_range(&has_bits);
          point_cloud_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2 [default = 512];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3 [default = 512];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_height = 4 [default = -5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_min_height(&has_bits);
          min_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_height = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_max_height(&has_bits);
          max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool use_intensity_feature = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_intensity_feature(&has_bits);
          use_intensity_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_constant_feature = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_constant_feature(&has_bits);
          use_constant_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.FeatureParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float point_cloud_range = 1 [default = 60];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_point_cloud_range(), target);
  }

  // optional uint32 width = 2 [default = 512];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3 [default = 512];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional float min_height = 4 [default = -5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_height(), target);
  }

  // optional float max_height = 5 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_height(), target);
  }

  // optional bool use_intensity_feature = 6 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_intensity_feature(), target);
  }

  // optional bool use_constant_feature = 7 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_use_constant_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.FeatureParam)
  return target;
}

size_t FeatureParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.FeatureParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float point_cloud_range = 1 [default = 60];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 width = 2 [default = 512];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3 [default = 512];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional float min_height = 4 [default = -5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float max_height = 5 [default = 5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool use_intensity_feature = 6 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool use_constant_feature = 7 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.FeatureParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.FeatureParam)
    MergeFrom(*source);
  }
}

void FeatureParam::MergeFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.FeatureParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      point_cloud_range_ = from.point_cloud_range_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_height_ = from.min_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_height_ = from.max_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_intensity_feature_ = from.use_intensity_feature_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_constant_feature_ = from.use_constant_feature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeatureParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureParam::CopyFrom(const FeatureParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.FeatureParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureParam::IsInitialized() const {
  return true;
}

void FeatureParam::InternalSwap(FeatureParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(point_cloud_range_, other->point_cloud_range_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(min_height_, other->min_height_);
  swap(max_height_, other->max_height_);
  swap(use_intensity_feature_, other->use_intensity_feature_);
  swap(use_constant_feature_, other->use_constant_feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::CNNSegParam* Arena::CreateMaybeMessage< ::apollo::perception::lidar::CNNSegParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::CNNSegParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::NetworkParam* Arena::CreateMaybeMessage< ::apollo::perception::lidar::NetworkParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::NetworkParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::FeatureParam* Arena::CreateMaybeMessage< ::apollo::perception::lidar::FeatureParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::FeatureParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
