// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/segmentation/cnnseg/proto/cnnseg_param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class CNNSegParam;
class CNNSegParamDefaultTypeInternal;
extern CNNSegParamDefaultTypeInternal _CNNSegParam_default_instance_;
class FeatureParam;
class FeatureParamDefaultTypeInternal;
extern FeatureParamDefaultTypeInternal _FeatureParam_default_instance_;
class NetworkParam;
class NetworkParamDefaultTypeInternal;
extern NetworkParamDefaultTypeInternal _NetworkParam_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::CNNSegParam* Arena::CreateMaybeMessage<::apollo::perception::lidar::CNNSegParam>(Arena*);
template<> ::apollo::perception::lidar::FeatureParam* Arena::CreateMaybeMessage<::apollo::perception::lidar::FeatureParam>(Arena*);
template<> ::apollo::perception::lidar::NetworkParam* Arena::CreateMaybeMessage<::apollo::perception::lidar::NetworkParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class CNNSegParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.CNNSegParam) */ {
 public:
  CNNSegParam();
  virtual ~CNNSegParam();

  CNNSegParam(const CNNSegParam& from);
  CNNSegParam(CNNSegParam&& from) noexcept
    : CNNSegParam() {
    *this = ::std::move(from);
  }

  inline CNNSegParam& operator=(const CNNSegParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNNSegParam& operator=(CNNSegParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNNSegParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNNSegParam* internal_default_instance() {
    return reinterpret_cast<const CNNSegParam*>(
               &_CNNSegParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CNNSegParam& a, CNNSegParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CNNSegParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNNSegParam* New() const final {
    return CreateMaybeMessage<CNNSegParam>(nullptr);
  }

  CNNSegParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNNSegParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNNSegParam& from);
  void MergeFrom(const CNNSegParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNNSegParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.CNNSegParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeFieldNumber = 1,
    kGroundDetectorFieldNumber = 7,
    kRoiFilterFieldNumber = 8,
    kNetworkParamFieldNumber = 2,
    kFeatureParamFieldNumber = 3,
    kGpuIdFieldNumber = 6,
    kRemoveGroundPointsFieldNumber = 9,
    kDoClassificationFieldNumber = 4,
    kDoHeadingFieldNumber = 5,
    kObjectnessThreshFieldNumber = 10,
    kConfidenceThreshFieldNumber = 11,
    kHeightThreshFieldNumber = 12,
    kMinPtsNumFieldNumber = 13,
    kConfidenceRangeFieldNumber = 14,
  };
  // optional string model_type = 1 [default = "CaffeNet"];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  const std::string& model_type() const;
  void set_model_type(const std::string& value);
  void set_model_type(std::string&& value);
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  std::string* mutable_model_type();
  std::string* release_model_type();
  void set_allocated_model_type(std::string* model_type);
  private:
  const std::string& _internal_model_type() const;
  void _internal_set_model_type(const std::string& value);
  std::string* _internal_mutable_model_type();
  public:

  // optional string ground_detector = 7 [default = "SpatioTemporalGroundDetector"];
  bool has_ground_detector() const;
  private:
  bool _internal_has_ground_detector() const;
  public:
  void clear_ground_detector();
  const std::string& ground_detector() const;
  void set_ground_detector(const std::string& value);
  void set_ground_detector(std::string&& value);
  void set_ground_detector(const char* value);
  void set_ground_detector(const char* value, size_t size);
  std::string* mutable_ground_detector();
  std::string* release_ground_detector();
  void set_allocated_ground_detector(std::string* ground_detector);
  private:
  const std::string& _internal_ground_detector() const;
  void _internal_set_ground_detector(const std::string& value);
  std::string* _internal_mutable_ground_detector();
  public:

  // optional string roi_filter = 8 [default = "HdmapROIFilter"];
  bool has_roi_filter() const;
  private:
  bool _internal_has_roi_filter() const;
  public:
  void clear_roi_filter();
  const std::string& roi_filter() const;
  void set_roi_filter(const std::string& value);
  void set_roi_filter(std::string&& value);
  void set_roi_filter(const char* value);
  void set_roi_filter(const char* value, size_t size);
  std::string* mutable_roi_filter();
  std::string* release_roi_filter();
  void set_allocated_roi_filter(std::string* roi_filter);
  private:
  const std::string& _internal_roi_filter() const;
  void _internal_set_roi_filter(const std::string& value);
  std::string* _internal_mutable_roi_filter();
  public:

  // optional .apollo.perception.lidar.NetworkParam network_param = 2;
  bool has_network_param() const;
  private:
  bool _internal_has_network_param() const;
  public:
  void clear_network_param();
  const ::apollo::perception::lidar::NetworkParam& network_param() const;
  ::apollo::perception::lidar::NetworkParam* release_network_param();
  ::apollo::perception::lidar::NetworkParam* mutable_network_param();
  void set_allocated_network_param(::apollo::perception::lidar::NetworkParam* network_param);
  private:
  const ::apollo::perception::lidar::NetworkParam& _internal_network_param() const;
  ::apollo::perception::lidar::NetworkParam* _internal_mutable_network_param();
  public:

  // optional .apollo.perception.lidar.FeatureParam feature_param = 3;
  bool has_feature_param() const;
  private:
  bool _internal_has_feature_param() const;
  public:
  void clear_feature_param();
  const ::apollo::perception::lidar::FeatureParam& feature_param() const;
  ::apollo::perception::lidar::FeatureParam* release_feature_param();
  ::apollo::perception::lidar::FeatureParam* mutable_feature_param();
  void set_allocated_feature_param(::apollo::perception::lidar::FeatureParam* feature_param);
  private:
  const ::apollo::perception::lidar::FeatureParam& _internal_feature_param() const;
  ::apollo::perception::lidar::FeatureParam* _internal_mutable_feature_param();
  public:

  // optional uint32 gpu_id = 6 [default = 0];
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool remove_ground_points = 9 [default = false];
  bool has_remove_ground_points() const;
  private:
  bool _internal_has_remove_ground_points() const;
  public:
  void clear_remove_ground_points();
  bool remove_ground_points() const;
  void set_remove_ground_points(bool value);
  private:
  bool _internal_remove_ground_points() const;
  void _internal_set_remove_ground_points(bool value);
  public:

  // optional bool do_classification = 4 [default = true];
  bool has_do_classification() const;
  private:
  bool _internal_has_do_classification() const;
  public:
  void clear_do_classification();
  bool do_classification() const;
  void set_do_classification(bool value);
  private:
  bool _internal_do_classification() const;
  void _internal_set_do_classification(bool value);
  public:

  // optional bool do_heading = 5 [default = true];
  bool has_do_heading() const;
  private:
  bool _internal_has_do_heading() const;
  public:
  void clear_do_heading();
  bool do_heading() const;
  void set_do_heading(bool value);
  private:
  bool _internal_do_heading() const;
  void _internal_set_do_heading(bool value);
  public:

  // optional float objectness_thresh = 10 [default = 0.5];
  bool has_objectness_thresh() const;
  private:
  bool _internal_has_objectness_thresh() const;
  public:
  void clear_objectness_thresh();
  float objectness_thresh() const;
  void set_objectness_thresh(float value);
  private:
  float _internal_objectness_thresh() const;
  void _internal_set_objectness_thresh(float value);
  public:

  // optional float confidence_thresh = 11 [default = 0.1];
  bool has_confidence_thresh() const;
  private:
  bool _internal_has_confidence_thresh() const;
  public:
  void clear_confidence_thresh();
  float confidence_thresh() const;
  void set_confidence_thresh(float value);
  private:
  float _internal_confidence_thresh() const;
  void _internal_set_confidence_thresh(float value);
  public:

  // optional float height_thresh = 12 [default = 0.5];
  bool has_height_thresh() const;
  private:
  bool _internal_has_height_thresh() const;
  public:
  void clear_height_thresh();
  float height_thresh() const;
  void set_height_thresh(float value);
  private:
  float _internal_height_thresh() const;
  void _internal_set_height_thresh(float value);
  public:

  // optional uint32 min_pts_num = 13 [default = 3];
  bool has_min_pts_num() const;
  private:
  bool _internal_has_min_pts_num() const;
  public:
  void clear_min_pts_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_pts_num() const;
  void set_min_pts_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_pts_num() const;
  void _internal_set_min_pts_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float confidence_range = 14 [default = 60];
  bool has_confidence_range() const;
  private:
  bool _internal_has_confidence_range() const;
  public:
  void clear_confidence_range();
  float confidence_range() const;
  void set_confidence_range(float value);
  private:
  float _internal_confidence_range() const;
  void _internal_set_confidence_range(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.CNNSegParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_model_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_ground_detector_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ground_detector_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_roi_filter_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roi_filter_;
  ::apollo::perception::lidar::NetworkParam* network_param_;
  ::apollo::perception::lidar::FeatureParam* feature_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpu_id_;
  bool remove_ground_points_;
  bool do_classification_;
  bool do_heading_;
  float objectness_thresh_;
  float confidence_thresh_;
  float height_thresh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_pts_num_;
  float confidence_range_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto;
};
// -------------------------------------------------------------------

class NetworkParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.NetworkParam) */ {
 public:
  NetworkParam();
  virtual ~NetworkParam();

  NetworkParam(const NetworkParam& from);
  NetworkParam(NetworkParam&& from) noexcept
    : NetworkParam() {
    *this = ::std::move(from);
  }

  inline NetworkParam& operator=(const NetworkParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkParam& operator=(NetworkParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkParam* internal_default_instance() {
    return reinterpret_cast<const NetworkParam*>(
               &_NetworkParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkParam& a, NetworkParam& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkParam* New() const final {
    return CreateMaybeMessage<NetworkParam>(nullptr);
  }

  NetworkParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkParam& from);
  void MergeFrom(const NetworkParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.NetworkParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstancePtBlobFieldNumber = 1,
    kCategoryPtBlobFieldNumber = 2,
    kConfidencePtBlobFieldNumber = 3,
    kHeightPtBlobFieldNumber = 4,
    kClassPtBlobFieldNumber = 5,
    kHeadingPtBlobFieldNumber = 6,
    kFeatureBlobFieldNumber = 7,
  };
  // optional string instance_pt_blob = 1 [default = "instance_pt"];
  bool has_instance_pt_blob() const;
  private:
  bool _internal_has_instance_pt_blob() const;
  public:
  void clear_instance_pt_blob();
  const std::string& instance_pt_blob() const;
  void set_instance_pt_blob(const std::string& value);
  void set_instance_pt_blob(std::string&& value);
  void set_instance_pt_blob(const char* value);
  void set_instance_pt_blob(const char* value, size_t size);
  std::string* mutable_instance_pt_blob();
  std::string* release_instance_pt_blob();
  void set_allocated_instance_pt_blob(std::string* instance_pt_blob);
  private:
  const std::string& _internal_instance_pt_blob() const;
  void _internal_set_instance_pt_blob(const std::string& value);
  std::string* _internal_mutable_instance_pt_blob();
  public:

  // optional string category_pt_blob = 2 [default = "category_score"];
  bool has_category_pt_blob() const;
  private:
  bool _internal_has_category_pt_blob() const;
  public:
  void clear_category_pt_blob();
  const std::string& category_pt_blob() const;
  void set_category_pt_blob(const std::string& value);
  void set_category_pt_blob(std::string&& value);
  void set_category_pt_blob(const char* value);
  void set_category_pt_blob(const char* value, size_t size);
  std::string* mutable_category_pt_blob();
  std::string* release_category_pt_blob();
  void set_allocated_category_pt_blob(std::string* category_pt_blob);
  private:
  const std::string& _internal_category_pt_blob() const;
  void _internal_set_category_pt_blob(const std::string& value);
  std::string* _internal_mutable_category_pt_blob();
  public:

  // optional string confidence_pt_blob = 3 [default = "confidence_score"];
  bool has_confidence_pt_blob() const;
  private:
  bool _internal_has_confidence_pt_blob() const;
  public:
  void clear_confidence_pt_blob();
  const std::string& confidence_pt_blob() const;
  void set_confidence_pt_blob(const std::string& value);
  void set_confidence_pt_blob(std::string&& value);
  void set_confidence_pt_blob(const char* value);
  void set_confidence_pt_blob(const char* value, size_t size);
  std::string* mutable_confidence_pt_blob();
  std::string* release_confidence_pt_blob();
  void set_allocated_confidence_pt_blob(std::string* confidence_pt_blob);
  private:
  const std::string& _internal_confidence_pt_blob() const;
  void _internal_set_confidence_pt_blob(const std::string& value);
  std::string* _internal_mutable_confidence_pt_blob();
  public:

  // optional string height_pt_blob = 4 [default = "height_pt"];
  bool has_height_pt_blob() const;
  private:
  bool _internal_has_height_pt_blob() const;
  public:
  void clear_height_pt_blob();
  const std::string& height_pt_blob() const;
  void set_height_pt_blob(const std::string& value);
  void set_height_pt_blob(std::string&& value);
  void set_height_pt_blob(const char* value);
  void set_height_pt_blob(const char* value, size_t size);
  std::string* mutable_height_pt_blob();
  std::string* release_height_pt_blob();
  void set_allocated_height_pt_blob(std::string* height_pt_blob);
  private:
  const std::string& _internal_height_pt_blob() const;
  void _internal_set_height_pt_blob(const std::string& value);
  std::string* _internal_mutable_height_pt_blob();
  public:

  // optional string class_pt_blob = 5 [default = "class_score"];
  bool has_class_pt_blob() const;
  private:
  bool _internal_has_class_pt_blob() const;
  public:
  void clear_class_pt_blob();
  const std::string& class_pt_blob() const;
  void set_class_pt_blob(const std::string& value);
  void set_class_pt_blob(std::string&& value);
  void set_class_pt_blob(const char* value);
  void set_class_pt_blob(const char* value, size_t size);
  std::string* mutable_class_pt_blob();
  std::string* release_class_pt_blob();
  void set_allocated_class_pt_blob(std::string* class_pt_blob);
  private:
  const std::string& _internal_class_pt_blob() const;
  void _internal_set_class_pt_blob(const std::string& value);
  std::string* _internal_mutable_class_pt_blob();
  public:

  // optional string heading_pt_blob = 6 [default = "heading_pt"];
  bool has_heading_pt_blob() const;
  private:
  bool _internal_has_heading_pt_blob() const;
  public:
  void clear_heading_pt_blob();
  const std::string& heading_pt_blob() const;
  void set_heading_pt_blob(const std::string& value);
  void set_heading_pt_blob(std::string&& value);
  void set_heading_pt_blob(const char* value);
  void set_heading_pt_blob(const char* value, size_t size);
  std::string* mutable_heading_pt_blob();
  std::string* release_heading_pt_blob();
  void set_allocated_heading_pt_blob(std::string* heading_pt_blob);
  private:
  const std::string& _internal_heading_pt_blob() const;
  void _internal_set_heading_pt_blob(const std::string& value);
  std::string* _internal_mutable_heading_pt_blob();
  public:

  // optional string feature_blob = 7 [default = "data"];
  bool has_feature_blob() const;
  private:
  bool _internal_has_feature_blob() const;
  public:
  void clear_feature_blob();
  const std::string& feature_blob() const;
  void set_feature_blob(const std::string& value);
  void set_feature_blob(std::string&& value);
  void set_feature_blob(const char* value);
  void set_feature_blob(const char* value, size_t size);
  std::string* mutable_feature_blob();
  std::string* release_feature_blob();
  void set_allocated_feature_blob(std::string* feature_blob);
  private:
  const std::string& _internal_feature_blob() const;
  void _internal_set_feature_blob(const std::string& value);
  std::string* _internal_mutable_feature_blob();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.NetworkParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_instance_pt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_pt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_category_pt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_pt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_confidence_pt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_pt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_height_pt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr height_pt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_class_pt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_pt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_heading_pt_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heading_pt_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_feature_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_blob_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto;
};
// -------------------------------------------------------------------

class FeatureParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.FeatureParam) */ {
 public:
  FeatureParam();
  virtual ~FeatureParam();

  FeatureParam(const FeatureParam& from);
  FeatureParam(FeatureParam&& from) noexcept
    : FeatureParam() {
    *this = ::std::move(from);
  }

  inline FeatureParam& operator=(const FeatureParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureParam& operator=(FeatureParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureParam* internal_default_instance() {
    return reinterpret_cast<const FeatureParam*>(
               &_FeatureParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeatureParam& a, FeatureParam& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureParam* New() const final {
    return CreateMaybeMessage<FeatureParam>(nullptr);
  }

  FeatureParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureParam& from);
  void MergeFrom(const FeatureParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.FeatureParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudRangeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kMinHeightFieldNumber = 4,
    kMaxHeightFieldNumber = 5,
    kUseIntensityFeatureFieldNumber = 6,
    kUseConstantFeatureFieldNumber = 7,
  };
  // optional float point_cloud_range = 1 [default = 60];
  bool has_point_cloud_range() const;
  private:
  bool _internal_has_point_cloud_range() const;
  public:
  void clear_point_cloud_range();
  float point_cloud_range() const;
  void set_point_cloud_range(float value);
  private:
  float _internal_point_cloud_range() const;
  void _internal_set_point_cloud_range(float value);
  public:

  // optional uint32 width = 2 [default = 512];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3 [default = 512];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float min_height = 4 [default = -5];
  bool has_min_height() const;
  private:
  bool _internal_has_min_height() const;
  public:
  void clear_min_height();
  float min_height() const;
  void set_min_height(float value);
  private:
  float _internal_min_height() const;
  void _internal_set_min_height(float value);
  public:

  // optional float max_height = 5 [default = 5];
  bool has_max_height() const;
  private:
  bool _internal_has_max_height() const;
  public:
  void clear_max_height();
  float max_height() const;
  void set_max_height(float value);
  private:
  float _internal_max_height() const;
  void _internal_set_max_height(float value);
  public:

  // optional bool use_intensity_feature = 6 [default = true];
  bool has_use_intensity_feature() const;
  private:
  bool _internal_has_use_intensity_feature() const;
  public:
  void clear_use_intensity_feature();
  bool use_intensity_feature() const;
  void set_use_intensity_feature(bool value);
  private:
  bool _internal_use_intensity_feature() const;
  void _internal_set_use_intensity_feature(bool value);
  public:

  // optional bool use_constant_feature = 7 [default = true];
  bool has_use_constant_feature() const;
  private:
  bool _internal_has_use_constant_feature() const;
  public:
  void clear_use_constant_feature();
  bool use_constant_feature() const;
  void set_use_constant_feature(bool value);
  private:
  bool _internal_use_constant_feature() const;
  void _internal_set_use_constant_feature(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.FeatureParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float point_cloud_range_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  float min_height_;
  float max_height_;
  bool use_intensity_feature_;
  bool use_constant_feature_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CNNSegParam

// optional string model_type = 1 [default = "CaffeNet"];
inline bool CNNSegParam::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNNSegParam::has_model_type() const {
  return _internal_has_model_type();
}
inline void CNNSegParam::clear_model_type() {
  model_type_.ClearToDefaultNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNNSegParam::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.model_type)
  return _internal_model_type();
}
inline void CNNSegParam::set_model_type(const std::string& value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.model_type)
}
inline std::string* CNNSegParam::mutable_model_type() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.CNNSegParam.model_type)
  return _internal_mutable_model_type();
}
inline const std::string& CNNSegParam::_internal_model_type() const {
  return model_type_.GetNoArena();
}
inline void CNNSegParam::_internal_set_model_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(), value);
}
inline void CNNSegParam::set_model_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(
    &::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.CNNSegParam.model_type)
}
inline void CNNSegParam::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.CNNSegParam.model_type)
}
inline void CNNSegParam::set_model_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  model_type_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.CNNSegParam.model_type)
}
inline std::string* CNNSegParam::_internal_mutable_model_type() {
  _has_bits_[0] |= 0x00000001u;
  return model_type_.MutableNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline std::string* CNNSegParam::release_model_type() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.CNNSegParam.model_type)
  if (!_internal_has_model_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return model_type_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get());
}
inline void CNNSegParam::set_allocated_model_type(std::string* model_type) {
  if (model_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_type_.SetAllocatedNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_model_type_.get(), model_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.CNNSegParam.model_type)
}

// optional .apollo.perception.lidar.NetworkParam network_param = 2;
inline bool CNNSegParam::_internal_has_network_param() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || network_param_ != nullptr);
  return value;
}
inline bool CNNSegParam::has_network_param() const {
  return _internal_has_network_param();
}
inline void CNNSegParam::clear_network_param() {
  if (network_param_ != nullptr) network_param_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::perception::lidar::NetworkParam& CNNSegParam::_internal_network_param() const {
  const ::apollo::perception::lidar::NetworkParam* p = network_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::lidar::NetworkParam*>(
      &::apollo::perception::lidar::_NetworkParam_default_instance_);
}
inline const ::apollo::perception::lidar::NetworkParam& CNNSegParam::network_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.network_param)
  return _internal_network_param();
}
inline ::apollo::perception::lidar::NetworkParam* CNNSegParam::release_network_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.CNNSegParam.network_param)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::perception::lidar::NetworkParam* temp = network_param_;
  network_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::lidar::NetworkParam* CNNSegParam::_internal_mutable_network_param() {
  _has_bits_[0] |= 0x00000008u;
  if (network_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::lidar::NetworkParam>(GetArenaNoVirtual());
    network_param_ = p;
  }
  return network_param_;
}
inline ::apollo::perception::lidar::NetworkParam* CNNSegParam::mutable_network_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.CNNSegParam.network_param)
  return _internal_mutable_network_param();
}
inline void CNNSegParam::set_allocated_network_param(::apollo::perception::lidar::NetworkParam* network_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_param_;
  }
  if (network_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  network_param_ = network_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.CNNSegParam.network_param)
}

// optional .apollo.perception.lidar.FeatureParam feature_param = 3;
inline bool CNNSegParam::_internal_has_feature_param() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || feature_param_ != nullptr);
  return value;
}
inline bool CNNSegParam::has_feature_param() const {
  return _internal_has_feature_param();
}
inline void CNNSegParam::clear_feature_param() {
  if (feature_param_ != nullptr) feature_param_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::perception::lidar::FeatureParam& CNNSegParam::_internal_feature_param() const {
  const ::apollo::perception::lidar::FeatureParam* p = feature_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::lidar::FeatureParam*>(
      &::apollo::perception::lidar::_FeatureParam_default_instance_);
}
inline const ::apollo::perception::lidar::FeatureParam& CNNSegParam::feature_param() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.feature_param)
  return _internal_feature_param();
}
inline ::apollo::perception::lidar::FeatureParam* CNNSegParam::release_feature_param() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.CNNSegParam.feature_param)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::perception::lidar::FeatureParam* temp = feature_param_;
  feature_param_ = nullptr;
  return temp;
}
inline ::apollo::perception::lidar::FeatureParam* CNNSegParam::_internal_mutable_feature_param() {
  _has_bits_[0] |= 0x00000010u;
  if (feature_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::lidar::FeatureParam>(GetArenaNoVirtual());
    feature_param_ = p;
  }
  return feature_param_;
}
inline ::apollo::perception::lidar::FeatureParam* CNNSegParam::mutable_feature_param() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.CNNSegParam.feature_param)
  return _internal_mutable_feature_param();
}
inline void CNNSegParam::set_allocated_feature_param(::apollo::perception::lidar::FeatureParam* feature_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete feature_param_;
  }
  if (feature_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feature_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  feature_param_ = feature_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.CNNSegParam.feature_param)
}

// optional bool do_classification = 4 [default = true];
inline bool CNNSegParam::_internal_has_do_classification() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CNNSegParam::has_do_classification() const {
  return _internal_has_do_classification();
}
inline void CNNSegParam::clear_do_classification() {
  do_classification_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CNNSegParam::_internal_do_classification() const {
  return do_classification_;
}
inline bool CNNSegParam::do_classification() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.do_classification)
  return _internal_do_classification();
}
inline void CNNSegParam::_internal_set_do_classification(bool value) {
  _has_bits_[0] |= 0x00000080u;
  do_classification_ = value;
}
inline void CNNSegParam::set_do_classification(bool value) {
  _internal_set_do_classification(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.do_classification)
}

// optional bool do_heading = 5 [default = true];
inline bool CNNSegParam::_internal_has_do_heading() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CNNSegParam::has_do_heading() const {
  return _internal_has_do_heading();
}
inline void CNNSegParam::clear_do_heading() {
  do_heading_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CNNSegParam::_internal_do_heading() const {
  return do_heading_;
}
inline bool CNNSegParam::do_heading() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.do_heading)
  return _internal_do_heading();
}
inline void CNNSegParam::_internal_set_do_heading(bool value) {
  _has_bits_[0] |= 0x00000100u;
  do_heading_ = value;
}
inline void CNNSegParam::set_do_heading(bool value) {
  _internal_set_do_heading(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.do_heading)
}

// optional uint32 gpu_id = 6 [default = 0];
inline bool CNNSegParam::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CNNSegParam::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void CNNSegParam::clear_gpu_id() {
  gpu_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNNSegParam::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNNSegParam::gpu_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.gpu_id)
  return _internal_gpu_id();
}
inline void CNNSegParam::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  gpu_id_ = value;
}
inline void CNNSegParam::set_gpu_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.gpu_id)
}

// optional string ground_detector = 7 [default = "SpatioTemporalGroundDetector"];
inline bool CNNSegParam::_internal_has_ground_detector() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNNSegParam::has_ground_detector() const {
  return _internal_has_ground_detector();
}
inline void CNNSegParam::clear_ground_detector() {
  ground_detector_.ClearToDefaultNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CNNSegParam::ground_detector() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.ground_detector)
  return _internal_ground_detector();
}
inline void CNNSegParam::set_ground_detector(const std::string& value) {
  _internal_set_ground_detector(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.ground_detector)
}
inline std::string* CNNSegParam::mutable_ground_detector() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.CNNSegParam.ground_detector)
  return _internal_mutable_ground_detector();
}
inline const std::string& CNNSegParam::_internal_ground_detector() const {
  return ground_detector_.GetNoArena();
}
inline void CNNSegParam::_internal_set_ground_detector(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ground_detector_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), value);
}
inline void CNNSegParam::set_ground_detector(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ground_detector_.SetNoArena(
    &::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.CNNSegParam.ground_detector)
}
inline void CNNSegParam::set_ground_detector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ground_detector_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.CNNSegParam.ground_detector)
}
inline void CNNSegParam::set_ground_detector(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ground_detector_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.CNNSegParam.ground_detector)
}
inline std::string* CNNSegParam::_internal_mutable_ground_detector() {
  _has_bits_[0] |= 0x00000002u;
  return ground_detector_.MutableNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
}
inline std::string* CNNSegParam::release_ground_detector() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.CNNSegParam.ground_detector)
  if (!_internal_has_ground_detector()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ground_detector_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get());
}
inline void CNNSegParam::set_allocated_ground_detector(std::string* ground_detector) {
  if (ground_detector != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ground_detector_.SetAllocatedNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_ground_detector_.get(), ground_detector);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.CNNSegParam.ground_detector)
}

// optional string roi_filter = 8 [default = "HdmapROIFilter"];
inline bool CNNSegParam::_internal_has_roi_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNNSegParam::has_roi_filter() const {
  return _internal_has_roi_filter();
}
inline void CNNSegParam::clear_roi_filter() {
  roi_filter_.ClearToDefaultNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CNNSegParam::roi_filter() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.roi_filter)
  return _internal_roi_filter();
}
inline void CNNSegParam::set_roi_filter(const std::string& value) {
  _internal_set_roi_filter(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.roi_filter)
}
inline std::string* CNNSegParam::mutable_roi_filter() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.CNNSegParam.roi_filter)
  return _internal_mutable_roi_filter();
}
inline const std::string& CNNSegParam::_internal_roi_filter() const {
  return roi_filter_.GetNoArena();
}
inline void CNNSegParam::_internal_set_roi_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  roi_filter_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), value);
}
inline void CNNSegParam::set_roi_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  roi_filter_.SetNoArena(
    &::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.CNNSegParam.roi_filter)
}
inline void CNNSegParam::set_roi_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  roi_filter_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.CNNSegParam.roi_filter)
}
inline void CNNSegParam::set_roi_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  roi_filter_.SetNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.CNNSegParam.roi_filter)
}
inline std::string* CNNSegParam::_internal_mutable_roi_filter() {
  _has_bits_[0] |= 0x00000004u;
  return roi_filter_.MutableNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
}
inline std::string* CNNSegParam::release_roi_filter() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.CNNSegParam.roi_filter)
  if (!_internal_has_roi_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return roi_filter_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get());
}
inline void CNNSegParam::set_allocated_roi_filter(std::string* roi_filter) {
  if (roi_filter != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  roi_filter_.SetAllocatedNoArena(&::apollo::perception::lidar::CNNSegParam::_i_give_permission_to_break_this_code_default_roi_filter_.get(), roi_filter);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.CNNSegParam.roi_filter)
}

// optional bool remove_ground_points = 9 [default = false];
inline bool CNNSegParam::_internal_has_remove_ground_points() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CNNSegParam::has_remove_ground_points() const {
  return _internal_has_remove_ground_points();
}
inline void CNNSegParam::clear_remove_ground_points() {
  remove_ground_points_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CNNSegParam::_internal_remove_ground_points() const {
  return remove_ground_points_;
}
inline bool CNNSegParam::remove_ground_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.remove_ground_points)
  return _internal_remove_ground_points();
}
inline void CNNSegParam::_internal_set_remove_ground_points(bool value) {
  _has_bits_[0] |= 0x00000040u;
  remove_ground_points_ = value;
}
inline void CNNSegParam::set_remove_ground_points(bool value) {
  _internal_set_remove_ground_points(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.remove_ground_points)
}

// optional float objectness_thresh = 10 [default = 0.5];
inline bool CNNSegParam::_internal_has_objectness_thresh() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CNNSegParam::has_objectness_thresh() const {
  return _internal_has_objectness_thresh();
}
inline void CNNSegParam::clear_objectness_thresh() {
  objectness_thresh_ = 0.5f;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CNNSegParam::_internal_objectness_thresh() const {
  return objectness_thresh_;
}
inline float CNNSegParam::objectness_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.objectness_thresh)
  return _internal_objectness_thresh();
}
inline void CNNSegParam::_internal_set_objectness_thresh(float value) {
  _has_bits_[0] |= 0x00000200u;
  objectness_thresh_ = value;
}
inline void CNNSegParam::set_objectness_thresh(float value) {
  _internal_set_objectness_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.objectness_thresh)
}

// optional float confidence_thresh = 11 [default = 0.1];
inline bool CNNSegParam::_internal_has_confidence_thresh() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CNNSegParam::has_confidence_thresh() const {
  return _internal_has_confidence_thresh();
}
inline void CNNSegParam::clear_confidence_thresh() {
  confidence_thresh_ = 0.1f;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CNNSegParam::_internal_confidence_thresh() const {
  return confidence_thresh_;
}
inline float CNNSegParam::confidence_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.confidence_thresh)
  return _internal_confidence_thresh();
}
inline void CNNSegParam::_internal_set_confidence_thresh(float value) {
  _has_bits_[0] |= 0x00000400u;
  confidence_thresh_ = value;
}
inline void CNNSegParam::set_confidence_thresh(float value) {
  _internal_set_confidence_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.confidence_thresh)
}

// optional float height_thresh = 12 [default = 0.5];
inline bool CNNSegParam::_internal_has_height_thresh() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CNNSegParam::has_height_thresh() const {
  return _internal_has_height_thresh();
}
inline void CNNSegParam::clear_height_thresh() {
  height_thresh_ = 0.5f;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CNNSegParam::_internal_height_thresh() const {
  return height_thresh_;
}
inline float CNNSegParam::height_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.height_thresh)
  return _internal_height_thresh();
}
inline void CNNSegParam::_internal_set_height_thresh(float value) {
  _has_bits_[0] |= 0x00000800u;
  height_thresh_ = value;
}
inline void CNNSegParam::set_height_thresh(float value) {
  _internal_set_height_thresh(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.height_thresh)
}

// optional uint32 min_pts_num = 13 [default = 3];
inline bool CNNSegParam::_internal_has_min_pts_num() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CNNSegParam::has_min_pts_num() const {
  return _internal_has_min_pts_num();
}
inline void CNNSegParam::clear_min_pts_num() {
  min_pts_num_ = 3u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNNSegParam::_internal_min_pts_num() const {
  return min_pts_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNNSegParam::min_pts_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.min_pts_num)
  return _internal_min_pts_num();
}
inline void CNNSegParam::_internal_set_min_pts_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  min_pts_num_ = value;
}
inline void CNNSegParam::set_min_pts_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_pts_num(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.min_pts_num)
}

// optional float confidence_range = 14 [default = 60];
inline bool CNNSegParam::_internal_has_confidence_range() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CNNSegParam::has_confidence_range() const {
  return _internal_has_confidence_range();
}
inline void CNNSegParam::clear_confidence_range() {
  confidence_range_ = 60;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CNNSegParam::_internal_confidence_range() const {
  return confidence_range_;
}
inline float CNNSegParam::confidence_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.CNNSegParam.confidence_range)
  return _internal_confidence_range();
}
inline void CNNSegParam::_internal_set_confidence_range(float value) {
  _has_bits_[0] |= 0x00002000u;
  confidence_range_ = value;
}
inline void CNNSegParam::set_confidence_range(float value) {
  _internal_set_confidence_range(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.CNNSegParam.confidence_range)
}

// -------------------------------------------------------------------

// NetworkParam

// optional string instance_pt_blob = 1 [default = "instance_pt"];
inline bool NetworkParam::_internal_has_instance_pt_blob() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkParam::has_instance_pt_blob() const {
  return _internal_has_instance_pt_blob();
}
inline void NetworkParam::clear_instance_pt_blob() {
  instance_pt_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkParam::instance_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.instance_pt_blob)
  return _internal_instance_pt_blob();
}
inline void NetworkParam::set_instance_pt_blob(const std::string& value) {
  _internal_set_instance_pt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.instance_pt_blob)
}
inline std::string* NetworkParam::mutable_instance_pt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.instance_pt_blob)
  return _internal_mutable_instance_pt_blob();
}
inline const std::string& NetworkParam::_internal_instance_pt_blob() const {
  return instance_pt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_instance_pt_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  instance_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(), value);
}
inline void NetworkParam::set_instance_pt_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  instance_pt_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.instance_pt_blob)
}
inline void NetworkParam::set_instance_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  instance_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.instance_pt_blob)
}
inline void NetworkParam::set_instance_pt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  instance_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.instance_pt_blob)
}
inline std::string* NetworkParam::_internal_mutable_instance_pt_blob() {
  _has_bits_[0] |= 0x00000001u;
  return instance_pt_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
}
inline std::string* NetworkParam::release_instance_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.instance_pt_blob)
  if (!_internal_has_instance_pt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return instance_pt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get());
}
inline void NetworkParam::set_allocated_instance_pt_blob(std::string* instance_pt_blob) {
  if (instance_pt_blob != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  instance_pt_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_instance_pt_blob_.get(), instance_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.instance_pt_blob)
}

// optional string category_pt_blob = 2 [default = "category_score"];
inline bool NetworkParam::_internal_has_category_pt_blob() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkParam::has_category_pt_blob() const {
  return _internal_has_category_pt_blob();
}
inline void NetworkParam::clear_category_pt_blob() {
  category_pt_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkParam::category_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.category_pt_blob)
  return _internal_category_pt_blob();
}
inline void NetworkParam::set_category_pt_blob(const std::string& value) {
  _internal_set_category_pt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.category_pt_blob)
}
inline std::string* NetworkParam::mutable_category_pt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.category_pt_blob)
  return _internal_mutable_category_pt_blob();
}
inline const std::string& NetworkParam::_internal_category_pt_blob() const {
  return category_pt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_category_pt_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  category_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(), value);
}
inline void NetworkParam::set_category_pt_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  category_pt_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.category_pt_blob)
}
inline void NetworkParam::set_category_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  category_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.category_pt_blob)
}
inline void NetworkParam::set_category_pt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  category_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.category_pt_blob)
}
inline std::string* NetworkParam::_internal_mutable_category_pt_blob() {
  _has_bits_[0] |= 0x00000002u;
  return category_pt_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
}
inline std::string* NetworkParam::release_category_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.category_pt_blob)
  if (!_internal_has_category_pt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return category_pt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get());
}
inline void NetworkParam::set_allocated_category_pt_blob(std::string* category_pt_blob) {
  if (category_pt_blob != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  category_pt_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_category_pt_blob_.get(), category_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.category_pt_blob)
}

// optional string confidence_pt_blob = 3 [default = "confidence_score"];
inline bool NetworkParam::_internal_has_confidence_pt_blob() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkParam::has_confidence_pt_blob() const {
  return _internal_has_confidence_pt_blob();
}
inline void NetworkParam::clear_confidence_pt_blob() {
  confidence_pt_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkParam::confidence_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
  return _internal_confidence_pt_blob();
}
inline void NetworkParam::set_confidence_pt_blob(const std::string& value) {
  _internal_set_confidence_pt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
}
inline std::string* NetworkParam::mutable_confidence_pt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
  return _internal_mutable_confidence_pt_blob();
}
inline const std::string& NetworkParam::_internal_confidence_pt_blob() const {
  return confidence_pt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_confidence_pt_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  confidence_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(), value);
}
inline void NetworkParam::set_confidence_pt_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  confidence_pt_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
}
inline void NetworkParam::set_confidence_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  confidence_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
}
inline void NetworkParam::set_confidence_pt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  confidence_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
}
inline std::string* NetworkParam::_internal_mutable_confidence_pt_blob() {
  _has_bits_[0] |= 0x00000004u;
  return confidence_pt_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
}
inline std::string* NetworkParam::release_confidence_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
  if (!_internal_has_confidence_pt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return confidence_pt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get());
}
inline void NetworkParam::set_allocated_confidence_pt_blob(std::string* confidence_pt_blob) {
  if (confidence_pt_blob != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  confidence_pt_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_confidence_pt_blob_.get(), confidence_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.confidence_pt_blob)
}

// optional string height_pt_blob = 4 [default = "height_pt"];
inline bool NetworkParam::_internal_has_height_pt_blob() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkParam::has_height_pt_blob() const {
  return _internal_has_height_pt_blob();
}
inline void NetworkParam::clear_height_pt_blob() {
  height_pt_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NetworkParam::height_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.height_pt_blob)
  return _internal_height_pt_blob();
}
inline void NetworkParam::set_height_pt_blob(const std::string& value) {
  _internal_set_height_pt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.height_pt_blob)
}
inline std::string* NetworkParam::mutable_height_pt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.height_pt_blob)
  return _internal_mutable_height_pt_blob();
}
inline const std::string& NetworkParam::_internal_height_pt_blob() const {
  return height_pt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_height_pt_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  height_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(), value);
}
inline void NetworkParam::set_height_pt_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  height_pt_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.height_pt_blob)
}
inline void NetworkParam::set_height_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  height_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.height_pt_blob)
}
inline void NetworkParam::set_height_pt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  height_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.height_pt_blob)
}
inline std::string* NetworkParam::_internal_mutable_height_pt_blob() {
  _has_bits_[0] |= 0x00000008u;
  return height_pt_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
}
inline std::string* NetworkParam::release_height_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.height_pt_blob)
  if (!_internal_has_height_pt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return height_pt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get());
}
inline void NetworkParam::set_allocated_height_pt_blob(std::string* height_pt_blob) {
  if (height_pt_blob != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  height_pt_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_height_pt_blob_.get(), height_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.height_pt_blob)
}

// optional string class_pt_blob = 5 [default = "class_score"];
inline bool NetworkParam::_internal_has_class_pt_blob() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkParam::has_class_pt_blob() const {
  return _internal_has_class_pt_blob();
}
inline void NetworkParam::clear_class_pt_blob() {
  class_pt_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NetworkParam::class_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.class_pt_blob)
  return _internal_class_pt_blob();
}
inline void NetworkParam::set_class_pt_blob(const std::string& value) {
  _internal_set_class_pt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.class_pt_blob)
}
inline std::string* NetworkParam::mutable_class_pt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.class_pt_blob)
  return _internal_mutable_class_pt_blob();
}
inline const std::string& NetworkParam::_internal_class_pt_blob() const {
  return class_pt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_class_pt_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  class_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(), value);
}
inline void NetworkParam::set_class_pt_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  class_pt_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.class_pt_blob)
}
inline void NetworkParam::set_class_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  class_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.class_pt_blob)
}
inline void NetworkParam::set_class_pt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  class_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.class_pt_blob)
}
inline std::string* NetworkParam::_internal_mutable_class_pt_blob() {
  _has_bits_[0] |= 0x00000010u;
  return class_pt_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
}
inline std::string* NetworkParam::release_class_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.class_pt_blob)
  if (!_internal_has_class_pt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return class_pt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get());
}
inline void NetworkParam::set_allocated_class_pt_blob(std::string* class_pt_blob) {
  if (class_pt_blob != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  class_pt_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_class_pt_blob_.get(), class_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.class_pt_blob)
}

// optional string heading_pt_blob = 6 [default = "heading_pt"];
inline bool NetworkParam::_internal_has_heading_pt_blob() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkParam::has_heading_pt_blob() const {
  return _internal_has_heading_pt_blob();
}
inline void NetworkParam::clear_heading_pt_blob() {
  heading_pt_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NetworkParam::heading_pt_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.heading_pt_blob)
  return _internal_heading_pt_blob();
}
inline void NetworkParam::set_heading_pt_blob(const std::string& value) {
  _internal_set_heading_pt_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.heading_pt_blob)
}
inline std::string* NetworkParam::mutable_heading_pt_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.heading_pt_blob)
  return _internal_mutable_heading_pt_blob();
}
inline const std::string& NetworkParam::_internal_heading_pt_blob() const {
  return heading_pt_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_heading_pt_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  heading_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(), value);
}
inline void NetworkParam::set_heading_pt_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  heading_pt_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.heading_pt_blob)
}
inline void NetworkParam::set_heading_pt_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  heading_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.heading_pt_blob)
}
inline void NetworkParam::set_heading_pt_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  heading_pt_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.heading_pt_blob)
}
inline std::string* NetworkParam::_internal_mutable_heading_pt_blob() {
  _has_bits_[0] |= 0x00000020u;
  return heading_pt_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
}
inline std::string* NetworkParam::release_heading_pt_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.heading_pt_blob)
  if (!_internal_has_heading_pt_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return heading_pt_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get());
}
inline void NetworkParam::set_allocated_heading_pt_blob(std::string* heading_pt_blob) {
  if (heading_pt_blob != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  heading_pt_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_heading_pt_blob_.get(), heading_pt_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.heading_pt_blob)
}

// optional string feature_blob = 7 [default = "data"];
inline bool NetworkParam::_internal_has_feature_blob() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NetworkParam::has_feature_blob() const {
  return _internal_has_feature_blob();
}
inline void NetworkParam::clear_feature_blob() {
  feature_blob_.ClearToDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& NetworkParam::feature_blob() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.NetworkParam.feature_blob)
  return _internal_feature_blob();
}
inline void NetworkParam::set_feature_blob(const std::string& value) {
  _internal_set_feature_blob(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.NetworkParam.feature_blob)
}
inline std::string* NetworkParam::mutable_feature_blob() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.lidar.NetworkParam.feature_blob)
  return _internal_mutable_feature_blob();
}
inline const std::string& NetworkParam::_internal_feature_blob() const {
  return feature_blob_.GetNoArena();
}
inline void NetworkParam::_internal_set_feature_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  feature_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(), value);
}
inline void NetworkParam::set_feature_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  feature_blob_.SetNoArena(
    &::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.lidar.NetworkParam.feature_blob)
}
inline void NetworkParam::set_feature_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  feature_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.lidar.NetworkParam.feature_blob)
}
inline void NetworkParam::set_feature_blob(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  feature_blob_.SetNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.lidar.NetworkParam.feature_blob)
}
inline std::string* NetworkParam::_internal_mutable_feature_blob() {
  _has_bits_[0] |= 0x00000040u;
  return feature_blob_.MutableNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
}
inline std::string* NetworkParam::release_feature_blob() {
  // @@protoc_insertion_point(field_release:apollo.perception.lidar.NetworkParam.feature_blob)
  if (!_internal_has_feature_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return feature_blob_.ReleaseNonDefaultNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get());
}
inline void NetworkParam::set_allocated_feature_blob(std::string* feature_blob) {
  if (feature_blob != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  feature_blob_.SetAllocatedNoArena(&::apollo::perception::lidar::NetworkParam::_i_give_permission_to_break_this_code_default_feature_blob_.get(), feature_blob);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.lidar.NetworkParam.feature_blob)
}

// -------------------------------------------------------------------

// FeatureParam

// optional float point_cloud_range = 1 [default = 60];
inline bool FeatureParam::_internal_has_point_cloud_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureParam::has_point_cloud_range() const {
  return _internal_has_point_cloud_range();
}
inline void FeatureParam::clear_point_cloud_range() {
  point_cloud_range_ = 60;
  _has_bits_[0] &= ~0x00000001u;
}
inline float FeatureParam::_internal_point_cloud_range() const {
  return point_cloud_range_;
}
inline float FeatureParam::point_cloud_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.point_cloud_range)
  return _internal_point_cloud_range();
}
inline void FeatureParam::_internal_set_point_cloud_range(float value) {
  _has_bits_[0] |= 0x00000001u;
  point_cloud_range_ = value;
}
inline void FeatureParam::set_point_cloud_range(float value) {
  _internal_set_point_cloud_range(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.point_cloud_range)
}

// optional uint32 width = 2 [default = 512];
inline bool FeatureParam::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureParam::has_width() const {
  return _internal_has_width();
}
inline void FeatureParam::clear_width() {
  width_ = 512u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureParam::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureParam::width() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.width)
  return _internal_width();
}
inline void FeatureParam::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void FeatureParam::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.width)
}

// optional uint32 height = 3 [default = 512];
inline bool FeatureParam::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeatureParam::has_height() const {
  return _internal_has_height();
}
inline void FeatureParam::clear_height() {
  height_ = 512u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureParam::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureParam::height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.height)
  return _internal_height();
}
inline void FeatureParam::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void FeatureParam::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.height)
}

// optional float min_height = 4 [default = -5];
inline bool FeatureParam::_internal_has_min_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeatureParam::has_min_height() const {
  return _internal_has_min_height();
}
inline void FeatureParam::clear_min_height() {
  min_height_ = -5;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FeatureParam::_internal_min_height() const {
  return min_height_;
}
inline float FeatureParam::min_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.min_height)
  return _internal_min_height();
}
inline void FeatureParam::_internal_set_min_height(float value) {
  _has_bits_[0] |= 0x00000008u;
  min_height_ = value;
}
inline void FeatureParam::set_min_height(float value) {
  _internal_set_min_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.min_height)
}

// optional float max_height = 5 [default = 5];
inline bool FeatureParam::_internal_has_max_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FeatureParam::has_max_height() const {
  return _internal_has_max_height();
}
inline void FeatureParam::clear_max_height() {
  max_height_ = 5;
  _has_bits_[0] &= ~0x00000010u;
}
inline float FeatureParam::_internal_max_height() const {
  return max_height_;
}
inline float FeatureParam::max_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.max_height)
  return _internal_max_height();
}
inline void FeatureParam::_internal_set_max_height(float value) {
  _has_bits_[0] |= 0x00000010u;
  max_height_ = value;
}
inline void FeatureParam::set_max_height(float value) {
  _internal_set_max_height(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.max_height)
}

// optional bool use_intensity_feature = 6 [default = true];
inline bool FeatureParam::_internal_has_use_intensity_feature() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FeatureParam::has_use_intensity_feature() const {
  return _internal_has_use_intensity_feature();
}
inline void FeatureParam::clear_use_intensity_feature() {
  use_intensity_feature_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool FeatureParam::_internal_use_intensity_feature() const {
  return use_intensity_feature_;
}
inline bool FeatureParam::use_intensity_feature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.use_intensity_feature)
  return _internal_use_intensity_feature();
}
inline void FeatureParam::_internal_set_use_intensity_feature(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_intensity_feature_ = value;
}
inline void FeatureParam::set_use_intensity_feature(bool value) {
  _internal_set_use_intensity_feature(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.use_intensity_feature)
}

// optional bool use_constant_feature = 7 [default = true];
inline bool FeatureParam::_internal_has_use_constant_feature() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FeatureParam::has_use_constant_feature() const {
  return _internal_has_use_constant_feature();
}
inline void FeatureParam::clear_use_constant_feature() {
  use_constant_feature_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool FeatureParam::_internal_use_constant_feature() const {
  return use_constant_feature_;
}
inline bool FeatureParam::use_constant_feature() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.FeatureParam.use_constant_feature)
  return _internal_use_constant_feature();
}
inline void FeatureParam::_internal_set_use_constant_feature(bool value) {
  _has_bits_[0] |= 0x00000040u;
  use_constant_feature_ = value;
}
inline void FeatureParam::set_use_constant_feature(bool value) {
  _internal_set_use_constant_feature(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.FeatureParam.use_constant_feature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fsegmentation_2fcnnseg_2fproto_2fcnnseg_5fparam_2eproto
