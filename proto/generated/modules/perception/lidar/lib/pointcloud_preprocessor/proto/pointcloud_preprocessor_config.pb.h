// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/pointcloud_preprocessor/proto/pointcloud_preprocessor_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class PointCloudPreprocessorConfig;
class PointCloudPreprocessorConfigDefaultTypeInternal;
extern PointCloudPreprocessorConfigDefaultTypeInternal _PointCloudPreprocessorConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::lidar::PointCloudPreprocessorConfig* Arena::CreateMaybeMessage<::apollo::perception::lidar::PointCloudPreprocessorConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class PointCloudPreprocessorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.PointCloudPreprocessorConfig) */ {
 public:
  PointCloudPreprocessorConfig();
  virtual ~PointCloudPreprocessorConfig();

  PointCloudPreprocessorConfig(const PointCloudPreprocessorConfig& from);
  PointCloudPreprocessorConfig(PointCloudPreprocessorConfig&& from) noexcept
    : PointCloudPreprocessorConfig() {
    *this = ::std::move(from);
  }

  inline PointCloudPreprocessorConfig& operator=(const PointCloudPreprocessorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudPreprocessorConfig& operator=(PointCloudPreprocessorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloudPreprocessorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloudPreprocessorConfig* internal_default_instance() {
    return reinterpret_cast<const PointCloudPreprocessorConfig*>(
               &_PointCloudPreprocessorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointCloudPreprocessorConfig& a, PointCloudPreprocessorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudPreprocessorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloudPreprocessorConfig* New() const final {
    return CreateMaybeMessage<PointCloudPreprocessorConfig>(nullptr);
  }

  PointCloudPreprocessorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudPreprocessorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloudPreprocessorConfig& from);
  void MergeFrom(const PointCloudPreprocessorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudPreprocessorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.lidar.PointCloudPreprocessorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto);
    return ::descriptor_table_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxForwardXFieldNumber = 3,
    kBoxBackwardXFieldNumber = 4,
    kFilterNearbyBoxPointsFieldNumber = 2,
    kFilterHighZPointsFieldNumber = 7,
    kBoxForwardYFieldNumber = 5,
    kBoxBackwardYFieldNumber = 6,
    kFilterNaninfPointsFieldNumber = 1,
    kZThresholdFieldNumber = 8,
  };
  // optional float box_forward_x = 3 [default = 0];
  bool has_box_forward_x() const;
  private:
  bool _internal_has_box_forward_x() const;
  public:
  void clear_box_forward_x();
  float box_forward_x() const;
  void set_box_forward_x(float value);
  private:
  float _internal_box_forward_x() const;
  void _internal_set_box_forward_x(float value);
  public:

  // optional float box_backward_x = 4 [default = 0];
  bool has_box_backward_x() const;
  private:
  bool _internal_has_box_backward_x() const;
  public:
  void clear_box_backward_x();
  float box_backward_x() const;
  void set_box_backward_x(float value);
  private:
  float _internal_box_backward_x() const;
  void _internal_set_box_backward_x(float value);
  public:

  // optional bool filter_nearby_box_points = 2 [default = false];
  bool has_filter_nearby_box_points() const;
  private:
  bool _internal_has_filter_nearby_box_points() const;
  public:
  void clear_filter_nearby_box_points();
  bool filter_nearby_box_points() const;
  void set_filter_nearby_box_points(bool value);
  private:
  bool _internal_filter_nearby_box_points() const;
  void _internal_set_filter_nearby_box_points(bool value);
  public:

  // optional bool filter_high_z_points = 7 [default = false];
  bool has_filter_high_z_points() const;
  private:
  bool _internal_has_filter_high_z_points() const;
  public:
  void clear_filter_high_z_points();
  bool filter_high_z_points() const;
  void set_filter_high_z_points(bool value);
  private:
  bool _internal_filter_high_z_points() const;
  void _internal_set_filter_high_z_points(bool value);
  public:

  // optional float box_forward_y = 5 [default = 0];
  bool has_box_forward_y() const;
  private:
  bool _internal_has_box_forward_y() const;
  public:
  void clear_box_forward_y();
  float box_forward_y() const;
  void set_box_forward_y(float value);
  private:
  float _internal_box_forward_y() const;
  void _internal_set_box_forward_y(float value);
  public:

  // optional float box_backward_y = 6 [default = 0];
  bool has_box_backward_y() const;
  private:
  bool _internal_has_box_backward_y() const;
  public:
  void clear_box_backward_y();
  float box_backward_y() const;
  void set_box_backward_y(float value);
  private:
  float _internal_box_backward_y() const;
  void _internal_set_box_backward_y(float value);
  public:

  // optional bool filter_naninf_points = 1 [default = true];
  bool has_filter_naninf_points() const;
  private:
  bool _internal_has_filter_naninf_points() const;
  public:
  void clear_filter_naninf_points();
  bool filter_naninf_points() const;
  void set_filter_naninf_points(bool value);
  private:
  bool _internal_filter_naninf_points() const;
  void _internal_set_filter_naninf_points(bool value);
  public:

  // optional float z_threshold = 8 [default = 5];
  bool has_z_threshold() const;
  private:
  bool _internal_has_z_threshold() const;
  public:
  void clear_z_threshold();
  float z_threshold() const;
  void set_z_threshold(float value);
  private:
  float _internal_z_threshold() const;
  void _internal_set_z_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.PointCloudPreprocessorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float box_forward_x_;
  float box_backward_x_;
  bool filter_nearby_box_points_;
  bool filter_high_z_points_;
  float box_forward_y_;
  float box_backward_y_;
  bool filter_naninf_points_;
  float z_threshold_;
  friend struct ::TableStruct_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointCloudPreprocessorConfig

// optional bool filter_naninf_points = 1 [default = true];
inline bool PointCloudPreprocessorConfig::_internal_has_filter_naninf_points() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_filter_naninf_points() const {
  return _internal_has_filter_naninf_points();
}
inline void PointCloudPreprocessorConfig::clear_filter_naninf_points() {
  filter_naninf_points_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PointCloudPreprocessorConfig::_internal_filter_naninf_points() const {
  return filter_naninf_points_;
}
inline bool PointCloudPreprocessorConfig::filter_naninf_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_naninf_points)
  return _internal_filter_naninf_points();
}
inline void PointCloudPreprocessorConfig::_internal_set_filter_naninf_points(bool value) {
  _has_bits_[0] |= 0x00000040u;
  filter_naninf_points_ = value;
}
inline void PointCloudPreprocessorConfig::set_filter_naninf_points(bool value) {
  _internal_set_filter_naninf_points(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_naninf_points)
}

// optional bool filter_nearby_box_points = 2 [default = false];
inline bool PointCloudPreprocessorConfig::_internal_has_filter_nearby_box_points() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_filter_nearby_box_points() const {
  return _internal_has_filter_nearby_box_points();
}
inline void PointCloudPreprocessorConfig::clear_filter_nearby_box_points() {
  filter_nearby_box_points_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PointCloudPreprocessorConfig::_internal_filter_nearby_box_points() const {
  return filter_nearby_box_points_;
}
inline bool PointCloudPreprocessorConfig::filter_nearby_box_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_nearby_box_points)
  return _internal_filter_nearby_box_points();
}
inline void PointCloudPreprocessorConfig::_internal_set_filter_nearby_box_points(bool value) {
  _has_bits_[0] |= 0x00000004u;
  filter_nearby_box_points_ = value;
}
inline void PointCloudPreprocessorConfig::set_filter_nearby_box_points(bool value) {
  _internal_set_filter_nearby_box_points(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_nearby_box_points)
}

// optional float box_forward_x = 3 [default = 0];
inline bool PointCloudPreprocessorConfig::_internal_has_box_forward_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_box_forward_x() const {
  return _internal_has_box_forward_x();
}
inline void PointCloudPreprocessorConfig::clear_box_forward_x() {
  box_forward_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PointCloudPreprocessorConfig::_internal_box_forward_x() const {
  return box_forward_x_;
}
inline float PointCloudPreprocessorConfig::box_forward_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_x)
  return _internal_box_forward_x();
}
inline void PointCloudPreprocessorConfig::_internal_set_box_forward_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  box_forward_x_ = value;
}
inline void PointCloudPreprocessorConfig::set_box_forward_x(float value) {
  _internal_set_box_forward_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_x)
}

// optional float box_backward_x = 4 [default = 0];
inline bool PointCloudPreprocessorConfig::_internal_has_box_backward_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_box_backward_x() const {
  return _internal_has_box_backward_x();
}
inline void PointCloudPreprocessorConfig::clear_box_backward_x() {
  box_backward_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PointCloudPreprocessorConfig::_internal_box_backward_x() const {
  return box_backward_x_;
}
inline float PointCloudPreprocessorConfig::box_backward_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_x)
  return _internal_box_backward_x();
}
inline void PointCloudPreprocessorConfig::_internal_set_box_backward_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  box_backward_x_ = value;
}
inline void PointCloudPreprocessorConfig::set_box_backward_x(float value) {
  _internal_set_box_backward_x(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_x)
}

// optional float box_forward_y = 5 [default = 0];
inline bool PointCloudPreprocessorConfig::_internal_has_box_forward_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_box_forward_y() const {
  return _internal_has_box_forward_y();
}
inline void PointCloudPreprocessorConfig::clear_box_forward_y() {
  box_forward_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PointCloudPreprocessorConfig::_internal_box_forward_y() const {
  return box_forward_y_;
}
inline float PointCloudPreprocessorConfig::box_forward_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_y)
  return _internal_box_forward_y();
}
inline void PointCloudPreprocessorConfig::_internal_set_box_forward_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  box_forward_y_ = value;
}
inline void PointCloudPreprocessorConfig::set_box_forward_y(float value) {
  _internal_set_box_forward_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_y)
}

// optional float box_backward_y = 6 [default = 0];
inline bool PointCloudPreprocessorConfig::_internal_has_box_backward_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_box_backward_y() const {
  return _internal_has_box_backward_y();
}
inline void PointCloudPreprocessorConfig::clear_box_backward_y() {
  box_backward_y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PointCloudPreprocessorConfig::_internal_box_backward_y() const {
  return box_backward_y_;
}
inline float PointCloudPreprocessorConfig::box_backward_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_y)
  return _internal_box_backward_y();
}
inline void PointCloudPreprocessorConfig::_internal_set_box_backward_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  box_backward_y_ = value;
}
inline void PointCloudPreprocessorConfig::set_box_backward_y(float value) {
  _internal_set_box_backward_y(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_y)
}

// optional bool filter_high_z_points = 7 [default = false];
inline bool PointCloudPreprocessorConfig::_internal_has_filter_high_z_points() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_filter_high_z_points() const {
  return _internal_has_filter_high_z_points();
}
inline void PointCloudPreprocessorConfig::clear_filter_high_z_points() {
  filter_high_z_points_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PointCloudPreprocessorConfig::_internal_filter_high_z_points() const {
  return filter_high_z_points_;
}
inline bool PointCloudPreprocessorConfig::filter_high_z_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_high_z_points)
  return _internal_filter_high_z_points();
}
inline void PointCloudPreprocessorConfig::_internal_set_filter_high_z_points(bool value) {
  _has_bits_[0] |= 0x00000008u;
  filter_high_z_points_ = value;
}
inline void PointCloudPreprocessorConfig::set_filter_high_z_points(bool value) {
  _internal_set_filter_high_z_points(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_high_z_points)
}

// optional float z_threshold = 8 [default = 5];
inline bool PointCloudPreprocessorConfig::_internal_has_z_threshold() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PointCloudPreprocessorConfig::has_z_threshold() const {
  return _internal_has_z_threshold();
}
inline void PointCloudPreprocessorConfig::clear_z_threshold() {
  z_threshold_ = 5;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PointCloudPreprocessorConfig::_internal_z_threshold() const {
  return z_threshold_;
}
inline float PointCloudPreprocessorConfig::z_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.z_threshold)
  return _internal_z_threshold();
}
inline void PointCloudPreprocessorConfig::_internal_set_z_threshold(float value) {
  _has_bits_[0] |= 0x00000080u;
  z_threshold_ = value;
}
inline void PointCloudPreprocessorConfig::set_z_threshold(float value) {
  _internal_set_z_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.z_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2flidar_2flib_2fpointcloud_5fpreprocessor_2fproto_2fpointcloud_5fpreprocessor_5fconfig_2eproto
