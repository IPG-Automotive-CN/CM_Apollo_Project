// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto

#include "modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace lidar {
class MlfDistanceWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfDistanceWeight> _instance;
} _MlfDistanceWeight_default_instance_;
class MlfDistanceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfDistanceConfig> _instance;
} _MlfDistanceConfig_default_instance_;
class MlfTrackObjectMatcherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfTrackObjectMatcherConfig> _instance;
} _MlfTrackObjectMatcherConfig_default_instance_;
class MlfTrackerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfTrackerConfig> _instance;
} _MlfTrackerConfig_default_instance_;
class MlfMotionFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfMotionFilterConfig> _instance;
} _MlfMotionFilterConfig_default_instance_;
class MlfMotionRefinerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfMotionRefinerConfig> _instance;
} _MlfMotionRefinerConfig_default_instance_;
class MlfShapeFilterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfShapeFilterConfig> _instance;
} _MlfShapeFilterConfig_default_instance_;
class MlfEngineConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlfEngineConfig> _instance;
} _MlfEngineConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_MlfDistanceConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfDistanceConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfDistanceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfDistanceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MlfDistanceConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MlfDistanceConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {
      &scc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfDistanceWeight_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfDistanceWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfDistanceWeight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MlfEngineConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfEngineConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfEngineConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfEngineConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfEngineConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfEngineConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MlfMotionFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfMotionFilterConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfMotionFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfMotionFilterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfMotionFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfMotionFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MlfMotionRefinerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfMotionRefinerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfMotionRefinerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfMotionRefinerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfMotionRefinerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfMotionRefinerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MlfShapeFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfShapeFilterConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfShapeFilterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfShapeFilterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfShapeFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfShapeFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MlfTrackObjectMatcherConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.DefaultConstruct();
  *::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get_mutable() = std::string("MultiHmBipartiteGraphMatcher", 28);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get_mutable());
  ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.DefaultConstruct();
  *::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get_mutable() = std::string("GnnBipartiteGraphMatcher", 24);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get_mutable());
  {
    void* ptr = &::apollo::perception::lidar::_MlfTrackObjectMatcherConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfTrackObjectMatcherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfTrackObjectMatcherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfTrackObjectMatcherConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfTrackObjectMatcherConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MlfTrackerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MlfTrackerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MlfTrackerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MlfTrackerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlfTrackerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlfTrackerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, sensor_name_pair_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, location_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, direction_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, bbox_size_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, point_num_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, histogram_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, centroid_shift_dist_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceWeight, bbox_iou_dist_weight_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, foreground_weights_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfDistanceConfig, background_weights_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, foreground_mathcer_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, background_matcher_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, bound_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackObjectMatcherConfig, max_match_distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfTrackerConfig, filter_name_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, use_adaptive_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, use_breakdown_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, use_convergence_boostup_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, init_velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, init_acceleration_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, measured_velocity_variance_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, predict_variance_per_sqrsec_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, boostup_history_size_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, boostup_history_size_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, converged_confidence_minimum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, noise_maximum_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionFilterConfig, trust_orientation_range_),
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  4,
  0,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, claping_acceleration_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfMotionRefinerConfig, claping_speed_threshold_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, bottom_points_ignore_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfShapeFilterConfig, top_points_ignore_threshold_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, main_sensor_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, use_histogram_for_match_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, histogram_bin_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, output_predict_objects_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, reserved_invisible_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::lidar::MlfEngineConfig, use_frame_timestamp_),
  ~0u,
  2,
  3,
  0,
  4,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::perception::lidar::MlfDistanceWeight)},
  { 21, 28, sizeof(::apollo::perception::lidar::MlfDistanceConfig)},
  { 30, 39, sizeof(::apollo::perception::lidar::MlfTrackObjectMatcherConfig)},
  { 43, 49, sizeof(::apollo::perception::lidar::MlfTrackerConfig)},
  { 50, 67, sizeof(::apollo::perception::lidar::MlfMotionFilterConfig)},
  { 79, 86, sizeof(::apollo::perception::lidar::MlfMotionRefinerConfig)},
  { 88, 95, sizeof(::apollo::perception::lidar::MlfShapeFilterConfig)},
  { 97, 108, sizeof(::apollo::perception::lidar::MlfEngineConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfDistanceWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfDistanceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfTrackObjectMatcherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfTrackerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfMotionFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfMotionRefinerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfShapeFilterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::lidar::_MlfEngineConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n]modules/perception/lidar/lib/tracker/m"
  "ulti_lidar_fusion/proto/multi_lidar_fusi"
  "on_config.proto\022\027apollo.perception.lidar"
  "\"\240\002\n\021MlfDistanceWeight\022\032\n\020sensor_name_pa"
  "ir\030\001 \001(\t:\000\022\037\n\024location_dist_weight\030\002 \001(\002"
  ":\0010\022 \n\025direction_dist_weight\030\003 \001(\002:\0010\022 \n"
  "\025bbox_size_dist_weight\030\004 \001(\002:\0010\022 \n\025point"
  "_num_dist_weight\030\005 \001(\002:\0010\022 \n\025histogram_d"
  "ist_weight\030\006 \001(\002:\0010\022%\n\032centroid_shift_di"
  "st_weight\030\007 \001(\002:\0010\022\037\n\024bbox_iou_dist_weig"
  "ht\030\010 \001(\002:\0010\"\243\001\n\021MlfDistanceConfig\022F\n\022for"
  "eground_weights\030\001 \003(\0132*.apollo.perceptio"
  "n.lidar.MlfDistanceWeight\022F\n\022background_"
  "weights\030\002 \003(\0132*.apollo.perception.lidar."
  "MlfDistanceWeight\"\324\001\n\033MlfTrackObjectMatc"
  "herConfig\022\?\n\031foreground_mathcer_method\030\001"
  " \001(\t:\034MultiHmBipartiteGraphMatcher\022;\n\031ba"
  "ckground_matcher_method\030\002 \001(\t:\030GnnBipart"
  "iteGraphMatcher\022\030\n\013bound_value\030\003 \001(\002:\00310"
  "0\022\035\n\022max_match_distance\030\004 \001(\002:\0014\"\'\n\020MlfT"
  "rackerConfig\022\023\n\013filter_name\030\001 \003(\t\"\322\003\n\025Ml"
  "fMotionFilterConfig\022\032\n\014use_adaptive\030\001 \001("
  "\010:\004true\022\033\n\ruse_breakdown\030\002 \001(\010:\004true\022%\n\027"
  "use_convergence_boostup\030\003 \001(\010:\004true\022!\n\026i"
  "nit_velocity_variance\030\004 \001(\001:\0015\022&\n\032init_a"
  "cceleration_variance\030\005 \001(\001:\00210\022\'\n\032measur"
  "ed_velocity_variance\030\006 \001(\001:\0030.4\022\'\n\033predi"
  "ct_variance_per_sqrsec\030\007 \001(\001:\00210\022\'\n\034boos"
  "tup_history_size_minimum\030\010 \001(\r:\0013\022\'\n\034boo"
  "stup_history_size_maximum\030\t \001(\r:\0016\022)\n\034co"
  "nverged_confidence_minimum\030\n \001(\001:\0030.5\022\032\n"
  "\rnoise_maximum\030\014 \001(\001:\0030.1\022#\n\027trust_orien"
  "tation_range\030\r \001(\001:\00240\"h\n\026MlfMotionRefin"
  "erConfig\022*\n\036claping_acceleration_thresho"
  "ld\030\001 \001(\001:\00210\022\"\n\027claping_speed_threshold\030"
  "\002 \001(\001:\0011\"m\n\024MlfShapeFilterConfig\022+\n\036bott"
  "om_points_ignore_threshold\030\001 \001(\001:\0030.1\022(\n"
  "\033top_points_ignore_threshold\030\002 \001(\001:\0031.6\""
  "\336\001\n\017MlfEngineConfig\022\023\n\013main_sensor\030\001 \003(\t"
  "\022%\n\027use_histogram_for_match\030\002 \001(\010:\004true\022"
  "\036\n\022histogram_bin_size\030\003 \001(\r:\00210\022%\n\026outpu"
  "t_predict_objects\030\004 \001(\010:\005false\022$\n\027reserv"
  "ed_invisible_time\030\005 \001(\001:\0030.2\022\"\n\023use_fram"
  "e_timestamp\030\006 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_sccs[8] = {
  &scc_info_MlfDistanceConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfEngineConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfMotionFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfMotionRefinerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfShapeFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfTrackObjectMatcherConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
  &scc_info_MlfTrackerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = {
  &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto, "modules/perception/lidar/lib/tracker/multi_lidar_fusion/proto/multi_lidar_fusion_config.proto", 1744,
  &descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_once, descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_sccs, descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto, 8, file_level_enum_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto), true);
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void MlfDistanceWeight::InitAsDefaultInstance() {
}
class MlfDistanceWeight::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfDistanceWeight>()._has_bits_);
  static void set_has_sensor_name_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bbox_size_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_point_num_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_histogram_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_centroid_shift_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bbox_iou_dist_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MlfDistanceWeight::MlfDistanceWeight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfDistanceWeight)
}
MlfDistanceWeight::MlfDistanceWeight(const MlfDistanceWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_name_pair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sensor_name_pair()) {
    sensor_name_pair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_name_pair_);
  }
  ::memcpy(&location_dist_weight_, &from.location_dist_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&bbox_iou_dist_weight_) -
    reinterpret_cast<char*>(&location_dist_weight_)) + sizeof(bbox_iou_dist_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfDistanceWeight)
}

void MlfDistanceWeight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  sensor_name_pair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_dist_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bbox_iou_dist_weight_) -
      reinterpret_cast<char*>(&location_dist_weight_)) + sizeof(bbox_iou_dist_weight_));
}

MlfDistanceWeight::~MlfDistanceWeight() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfDistanceWeight)
  SharedDtor();
}

void MlfDistanceWeight::SharedDtor() {
  sensor_name_pair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MlfDistanceWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfDistanceWeight& MlfDistanceWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfDistanceWeight_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfDistanceWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfDistanceWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sensor_name_pair_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&location_dist_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bbox_iou_dist_weight_) -
        reinterpret_cast<char*>(&location_dist_weight_)) + sizeof(bbox_iou_dist_weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfDistanceWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sensor_name_pair = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sensor_name_pair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float location_dist_weight = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_location_dist_weight(&has_bits);
          location_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float direction_dist_weight = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_direction_dist_weight(&has_bits);
          direction_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bbox_size_dist_weight = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_bbox_size_dist_weight(&has_bits);
          bbox_size_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float point_num_dist_weight = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_point_num_dist_weight(&has_bits);
          point_num_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float histogram_dist_weight = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_histogram_dist_weight(&has_bits);
          histogram_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float centroid_shift_dist_weight = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_centroid_shift_dist_weight(&has_bits);
          centroid_shift_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bbox_iou_dist_weight = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_bbox_iou_dist_weight(&has_bits);
          bbox_iou_dist_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfDistanceWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfDistanceWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name_pair = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_name_pair().data(), static_cast<int>(this->_internal_sensor_name_pair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfDistanceWeight.sensor_name_pair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sensor_name_pair(), target);
  }

  // optional float location_dist_weight = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_location_dist_weight(), target);
  }

  // optional float direction_dist_weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_direction_dist_weight(), target);
  }

  // optional float bbox_size_dist_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bbox_size_dist_weight(), target);
  }

  // optional float point_num_dist_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_point_num_dist_weight(), target);
  }

  // optional float histogram_dist_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_histogram_dist_weight(), target);
  }

  // optional float centroid_shift_dist_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_centroid_shift_dist_weight(), target);
  }

  // optional float bbox_iou_dist_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bbox_iou_dist_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfDistanceWeight)
  return target;
}

size_t MlfDistanceWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfDistanceWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sensor_name_pair = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sensor_name_pair());
    }

    // optional float location_dist_weight = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float direction_dist_weight = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float bbox_size_dist_weight = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float point_num_dist_weight = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float histogram_dist_weight = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float centroid_shift_dist_weight = 7 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float bbox_iou_dist_weight = 8 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfDistanceWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfDistanceWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfDistanceWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfDistanceWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfDistanceWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfDistanceWeight)
    MergeFrom(*source);
  }
}

void MlfDistanceWeight::MergeFrom(const MlfDistanceWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfDistanceWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sensor_name_pair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_name_pair_);
    }
    if (cached_has_bits & 0x00000002u) {
      location_dist_weight_ = from.location_dist_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_dist_weight_ = from.direction_dist_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      bbox_size_dist_weight_ = from.bbox_size_dist_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      point_num_dist_weight_ = from.point_num_dist_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      histogram_dist_weight_ = from.histogram_dist_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      centroid_shift_dist_weight_ = from.centroid_shift_dist_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      bbox_iou_dist_weight_ = from.bbox_iou_dist_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfDistanceWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfDistanceWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfDistanceWeight::CopyFrom(const MlfDistanceWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfDistanceWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfDistanceWeight::IsInitialized() const {
  return true;
}

void MlfDistanceWeight::InternalSwap(MlfDistanceWeight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_name_pair_.Swap(&other->sensor_name_pair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_dist_weight_, other->location_dist_weight_);
  swap(direction_dist_weight_, other->direction_dist_weight_);
  swap(bbox_size_dist_weight_, other->bbox_size_dist_weight_);
  swap(point_num_dist_weight_, other->point_num_dist_weight_);
  swap(histogram_dist_weight_, other->histogram_dist_weight_);
  swap(centroid_shift_dist_weight_, other->centroid_shift_dist_weight_);
  swap(bbox_iou_dist_weight_, other->bbox_iou_dist_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfDistanceWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfDistanceConfig::InitAsDefaultInstance() {
}
class MlfDistanceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfDistanceConfig>()._has_bits_);
};

MlfDistanceConfig::MlfDistanceConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfDistanceConfig)
}
MlfDistanceConfig::MlfDistanceConfig(const MlfDistanceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      foreground_weights_(from.foreground_weights_),
      background_weights_(from.background_weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfDistanceConfig)
}

void MlfDistanceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MlfDistanceConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
}

MlfDistanceConfig::~MlfDistanceConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfDistanceConfig)
  SharedDtor();
}

void MlfDistanceConfig::SharedDtor() {
}

void MlfDistanceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfDistanceConfig& MlfDistanceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfDistanceConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfDistanceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfDistanceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foreground_weights_.Clear();
  background_weights_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfDistanceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foreground_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_background_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfDistanceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfDistanceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_foreground_weights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_foreground_weights(i), target, stream);
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_background_weights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_background_weights(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfDistanceConfig)
  return target;
}

size_t MlfDistanceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfDistanceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.lidar.MlfDistanceWeight foreground_weights = 1;
  total_size += 1UL * this->_internal_foreground_weights_size();
  for (const auto& msg : this->foreground_weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.lidar.MlfDistanceWeight background_weights = 2;
  total_size += 1UL * this->_internal_background_weights_size();
  for (const auto& msg : this->background_weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfDistanceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfDistanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfDistanceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfDistanceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfDistanceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfDistanceConfig)
    MergeFrom(*source);
  }
}

void MlfDistanceConfig::MergeFrom(const MlfDistanceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfDistanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  foreground_weights_.MergeFrom(from.foreground_weights_);
  background_weights_.MergeFrom(from.background_weights_);
}

void MlfDistanceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfDistanceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfDistanceConfig::CopyFrom(const MlfDistanceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfDistanceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfDistanceConfig::IsInitialized() const {
  return true;
}

void MlfDistanceConfig::InternalSwap(MlfDistanceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  foreground_weights_.InternalSwap(&other->foreground_weights_);
  background_weights_.InternalSwap(&other->background_weights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfDistanceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfTrackObjectMatcherConfig::InitAsDefaultInstance() {
}
class MlfTrackObjectMatcherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfTrackObjectMatcherConfig>()._has_bits_);
  static void set_has_foreground_mathcer_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_background_matcher_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bound_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_match_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_;
MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}
MlfTrackObjectMatcherConfig::MlfTrackObjectMatcherConfig(const MlfTrackObjectMatcherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foreground_mathcer_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  if (from._internal_has_foreground_mathcer_method()) {
    foreground_mathcer_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(), from.foreground_mathcer_method_);
  }
  background_matcher_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
  if (from._internal_has_background_matcher_method()) {
    background_matcher_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(), from.background_matcher_method_);
  }
  ::memcpy(&bound_value_, &from.bound_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_match_distance_) -
    reinterpret_cast<char*>(&bound_value_)) + sizeof(max_match_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
}

void MlfTrackObjectMatcherConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MlfTrackObjectMatcherConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  foreground_mathcer_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  background_matcher_method_.UnsafeSetDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
  bound_value_ = 100;
  max_match_distance_ = 4;
}

MlfTrackObjectMatcherConfig::~MlfTrackObjectMatcherConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  SharedDtor();
}

void MlfTrackObjectMatcherConfig::SharedDtor() {
  foreground_mathcer_method_.DestroyNoArena(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
  background_matcher_method_.DestroyNoArena(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
}

void MlfTrackObjectMatcherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfTrackObjectMatcherConfig& MlfTrackObjectMatcherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfTrackObjectMatcherConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfTrackObjectMatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      foreground_mathcer_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      background_matcher_method_.UnsafeMutablePointer()->assign(*&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get());
    }
    bound_value_ = 100;
    max_match_distance_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfTrackObjectMatcherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_foreground_mathcer_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_background_matcher_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float bound_value = 3 [default = 100];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bound_value(&has_bits);
          bound_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_match_distance = 4 [default = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_match_distance(&has_bits);
          max_match_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfTrackObjectMatcherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_foreground_mathcer_method().data(), static_cast<int>(this->_internal_foreground_mathcer_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.foreground_mathcer_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_foreground_mathcer_method(), target);
  }

  // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background_matcher_method().data(), static_cast<int>(this->_internal_background_matcher_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackObjectMatcherConfig.background_matcher_method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_background_matcher_method(), target);
  }

  // optional float bound_value = 3 [default = 100];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bound_value(), target);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_match_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  return target;
}

size_t MlfTrackObjectMatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string foreground_mathcer_method = 1 [default = "MultiHmBipartiteGraphMatcher"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_foreground_mathcer_method());
    }

    // optional string background_matcher_method = 2 [default = "GnnBipartiteGraphMatcher"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_matcher_method());
    }

    // optional float bound_value = 3 [default = 100];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_match_distance = 4 [default = 4];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfTrackObjectMatcherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfTrackObjectMatcherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfTrackObjectMatcherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
    MergeFrom(*source);
  }
}

void MlfTrackObjectMatcherConfig::MergeFrom(const MlfTrackObjectMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      foreground_mathcer_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(), from.foreground_mathcer_method_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      background_matcher_method_.AssignWithDefault(&::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(), from.background_matcher_method_);
    }
    if (cached_has_bits & 0x00000004u) {
      bound_value_ = from.bound_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_match_distance_ = from.max_match_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfTrackObjectMatcherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfTrackObjectMatcherConfig::CopyFrom(const MlfTrackObjectMatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfTrackObjectMatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfTrackObjectMatcherConfig::IsInitialized() const {
  return true;
}

void MlfTrackObjectMatcherConfig::InternalSwap(MlfTrackObjectMatcherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  foreground_mathcer_method_.Swap(&other->foreground_mathcer_method_, &::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_foreground_mathcer_method_.get(),
    GetArenaNoVirtual());
  background_matcher_method_.Swap(&other->background_matcher_method_, &::apollo::perception::lidar::MlfTrackObjectMatcherConfig::_i_give_permission_to_break_this_code_default_background_matcher_method_.get(),
    GetArenaNoVirtual());
  swap(bound_value_, other->bound_value_);
  swap(max_match_distance_, other->max_match_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfTrackObjectMatcherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfTrackerConfig::InitAsDefaultInstance() {
}
class MlfTrackerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfTrackerConfig>()._has_bits_);
};

MlfTrackerConfig::MlfTrackerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfTrackerConfig)
}
MlfTrackerConfig::MlfTrackerConfig(const MlfTrackerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      filter_name_(from.filter_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfTrackerConfig)
}

void MlfTrackerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MlfTrackerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
}

MlfTrackerConfig::~MlfTrackerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfTrackerConfig)
  SharedDtor();
}

void MlfTrackerConfig::SharedDtor() {
}

void MlfTrackerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfTrackerConfig& MlfTrackerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfTrackerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfTrackerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfTrackerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfTrackerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string filter_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filter_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.MlfTrackerConfig.filter_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfTrackerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfTrackerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filter_name = 1;
  for (int i = 0, n = this->_internal_filter_name_size(); i < n; i++) {
    const auto& s = this->_internal_filter_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfTrackerConfig.filter_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfTrackerConfig)
  return target;
}

size_t MlfTrackerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfTrackerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filter_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filter_name_.size());
  for (int i = 0, n = filter_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filter_name_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfTrackerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfTrackerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfTrackerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfTrackerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfTrackerConfig)
    MergeFrom(*source);
  }
}

void MlfTrackerConfig::MergeFrom(const MlfTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfTrackerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_name_.MergeFrom(from.filter_name_);
}

void MlfTrackerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfTrackerConfig::CopyFrom(const MlfTrackerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfTrackerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfTrackerConfig::IsInitialized() const {
  return true;
}

void MlfTrackerConfig::InternalSwap(MlfTrackerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filter_name_.InternalSwap(&other->filter_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfTrackerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfMotionFilterConfig::InitAsDefaultInstance() {
}
class MlfMotionFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfMotionFilterConfig>()._has_bits_);
  static void set_has_use_adaptive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_breakdown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_convergence_boostup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_init_velocity_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_init_acceleration_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_measured_velocity_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_predict_variance_per_sqrsec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_boostup_history_size_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_boostup_history_size_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_converged_confidence_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_noise_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_trust_orientation_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

MlfMotionFilterConfig::MlfMotionFilterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfMotionFilterConfig)
}
MlfMotionFilterConfig::MlfMotionFilterConfig(const MlfMotionFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boostup_history_size_maximum_, &from.boostup_history_size_maximum_,
    static_cast<size_t>(reinterpret_cast<char*>(&trust_orientation_range_) -
    reinterpret_cast<char*>(&boostup_history_size_maximum_)) + sizeof(trust_orientation_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfMotionFilterConfig)
}

void MlfMotionFilterConfig::SharedCtor() {
  boostup_history_size_maximum_ = 6u;
  use_adaptive_ = true;
  use_breakdown_ = true;
  use_convergence_boostup_ = true;
  boostup_history_size_minimum_ = 3u;
  init_velocity_variance_ = 5;
  init_acceleration_variance_ = 10;
  measured_velocity_variance_ = 0.4;
  predict_variance_per_sqrsec_ = 10;
  converged_confidence_minimum_ = 0.5;
  noise_maximum_ = 0.1;
  trust_orientation_range_ = 40;
}

MlfMotionFilterConfig::~MlfMotionFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfMotionFilterConfig)
  SharedDtor();
}

void MlfMotionFilterConfig::SharedDtor() {
}

void MlfMotionFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfMotionFilterConfig& MlfMotionFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfMotionFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfMotionFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfMotionFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    boostup_history_size_maximum_ = 6u;
    use_adaptive_ = true;
    use_breakdown_ = true;
    use_convergence_boostup_ = true;
    boostup_history_size_minimum_ = 3u;
    init_velocity_variance_ = 5;
    init_acceleration_variance_ = 10;
    measured_velocity_variance_ = 0.4;
  }
  if (cached_has_bits & 0x00000f00u) {
    predict_variance_per_sqrsec_ = 10;
    converged_confidence_minimum_ = 0.5;
    noise_maximum_ = 0.1;
    trust_orientation_range_ = 40;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfMotionFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_adaptive = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_adaptive(&has_bits);
          use_adaptive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_breakdown = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_breakdown(&has_bits);
          use_breakdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_convergence_boostup = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_convergence_boostup(&has_bits);
          use_convergence_boostup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double init_velocity_variance = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_init_velocity_variance(&has_bits);
          init_velocity_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double init_acceleration_variance = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_init_acceleration_variance(&has_bits);
          init_acceleration_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double measured_velocity_variance = 6 [default = 0.4];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_measured_velocity_variance(&has_bits);
          measured_velocity_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double predict_variance_per_sqrsec = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_predict_variance_per_sqrsec(&has_bits);
          predict_variance_per_sqrsec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 boostup_history_size_minimum = 8 [default = 3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_boostup_history_size_minimum(&has_bits);
          boostup_history_size_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 boostup_history_size_maximum = 9 [default = 6];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_boostup_history_size_maximum(&has_bits);
          boostup_history_size_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double converged_confidence_minimum = 10 [default = 0.5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_converged_confidence_minimum(&has_bits);
          converged_confidence_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double noise_maximum = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_noise_maximum(&has_bits);
          noise_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double trust_orientation_range = 13 [default = 40];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_trust_orientation_range(&has_bits);
          trust_orientation_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfMotionFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfMotionFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_adaptive = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_adaptive(), target);
  }

  // optional bool use_breakdown = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_breakdown(), target);
  }

  // optional bool use_convergence_boostup = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_convergence_boostup(), target);
  }

  // optional double init_velocity_variance = 4 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_init_velocity_variance(), target);
  }

  // optional double init_acceleration_variance = 5 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_init_acceleration_variance(), target);
  }

  // optional double measured_velocity_variance = 6 [default = 0.4];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_measured_velocity_variance(), target);
  }

  // optional double predict_variance_per_sqrsec = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_predict_variance_per_sqrsec(), target);
  }

  // optional uint32 boostup_history_size_minimum = 8 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_boostup_history_size_minimum(), target);
  }

  // optional uint32 boostup_history_size_maximum = 9 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_boostup_history_size_maximum(), target);
  }

  // optional double converged_confidence_minimum = 10 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_converged_confidence_minimum(), target);
  }

  // optional double noise_maximum = 12 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_noise_maximum(), target);
  }

  // optional double trust_orientation_range = 13 [default = 40];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_trust_orientation_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfMotionFilterConfig)
  return target;
}

size_t MlfMotionFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfMotionFilterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 boostup_history_size_maximum = 9 [default = 6];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boostup_history_size_maximum());
    }

    // optional bool use_adaptive = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_breakdown = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool use_convergence_boostup = 3 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 boostup_history_size_minimum = 8 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_boostup_history_size_minimum());
    }

    // optional double init_velocity_variance = 4 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double init_acceleration_variance = 5 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double measured_velocity_variance = 6 [default = 0.4];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double predict_variance_per_sqrsec = 7 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double converged_confidence_minimum = 10 [default = 0.5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double noise_maximum = 12 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double trust_orientation_range = 13 [default = 40];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfMotionFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfMotionFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfMotionFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfMotionFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfMotionFilterConfig)
    MergeFrom(*source);
  }
}

void MlfMotionFilterConfig::MergeFrom(const MlfMotionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      boostup_history_size_maximum_ = from.boostup_history_size_maximum_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_adaptive_ = from.use_adaptive_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_breakdown_ = from.use_breakdown_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_convergence_boostup_ = from.use_convergence_boostup_;
    }
    if (cached_has_bits & 0x00000010u) {
      boostup_history_size_minimum_ = from.boostup_history_size_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      init_velocity_variance_ = from.init_velocity_variance_;
    }
    if (cached_has_bits & 0x00000040u) {
      init_acceleration_variance_ = from.init_acceleration_variance_;
    }
    if (cached_has_bits & 0x00000080u) {
      measured_velocity_variance_ = from.measured_velocity_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      predict_variance_per_sqrsec_ = from.predict_variance_per_sqrsec_;
    }
    if (cached_has_bits & 0x00000200u) {
      converged_confidence_minimum_ = from.converged_confidence_minimum_;
    }
    if (cached_has_bits & 0x00000400u) {
      noise_maximum_ = from.noise_maximum_;
    }
    if (cached_has_bits & 0x00000800u) {
      trust_orientation_range_ = from.trust_orientation_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfMotionFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfMotionFilterConfig::CopyFrom(const MlfMotionFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfMotionFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfMotionFilterConfig::IsInitialized() const {
  return true;
}

void MlfMotionFilterConfig::InternalSwap(MlfMotionFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(boostup_history_size_maximum_, other->boostup_history_size_maximum_);
  swap(use_adaptive_, other->use_adaptive_);
  swap(use_breakdown_, other->use_breakdown_);
  swap(use_convergence_boostup_, other->use_convergence_boostup_);
  swap(boostup_history_size_minimum_, other->boostup_history_size_minimum_);
  swap(init_velocity_variance_, other->init_velocity_variance_);
  swap(init_acceleration_variance_, other->init_acceleration_variance_);
  swap(measured_velocity_variance_, other->measured_velocity_variance_);
  swap(predict_variance_per_sqrsec_, other->predict_variance_per_sqrsec_);
  swap(converged_confidence_minimum_, other->converged_confidence_minimum_);
  swap(noise_maximum_, other->noise_maximum_);
  swap(trust_orientation_range_, other->trust_orientation_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfMotionFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfMotionRefinerConfig::InitAsDefaultInstance() {
}
class MlfMotionRefinerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfMotionRefinerConfig>()._has_bits_);
  static void set_has_claping_acceleration_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claping_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MlfMotionRefinerConfig::MlfMotionRefinerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfMotionRefinerConfig)
}
MlfMotionRefinerConfig::MlfMotionRefinerConfig(const MlfMotionRefinerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&claping_acceleration_threshold_, &from.claping_acceleration_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&claping_speed_threshold_) -
    reinterpret_cast<char*>(&claping_acceleration_threshold_)) + sizeof(claping_speed_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfMotionRefinerConfig)
}

void MlfMotionRefinerConfig::SharedCtor() {
  claping_acceleration_threshold_ = 10;
  claping_speed_threshold_ = 1;
}

MlfMotionRefinerConfig::~MlfMotionRefinerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfMotionRefinerConfig)
  SharedDtor();
}

void MlfMotionRefinerConfig::SharedDtor() {
}

void MlfMotionRefinerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfMotionRefinerConfig& MlfMotionRefinerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfMotionRefinerConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfMotionRefinerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    claping_acceleration_threshold_ = 10;
    claping_speed_threshold_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfMotionRefinerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double claping_acceleration_threshold = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_claping_acceleration_threshold(&has_bits);
          claping_acceleration_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double claping_speed_threshold = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_claping_speed_threshold(&has_bits);
          claping_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfMotionRefinerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double claping_acceleration_threshold = 1 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_claping_acceleration_threshold(), target);
  }

  // optional double claping_speed_threshold = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_claping_speed_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfMotionRefinerConfig)
  return target;
}

size_t MlfMotionRefinerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double claping_acceleration_threshold = 1 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double claping_speed_threshold = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfMotionRefinerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfMotionRefinerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfMotionRefinerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfMotionRefinerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfMotionRefinerConfig)
    MergeFrom(*source);
  }
}

void MlfMotionRefinerConfig::MergeFrom(const MlfMotionRefinerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      claping_acceleration_threshold_ = from.claping_acceleration_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      claping_speed_threshold_ = from.claping_speed_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfMotionRefinerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfMotionRefinerConfig::CopyFrom(const MlfMotionRefinerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfMotionRefinerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfMotionRefinerConfig::IsInitialized() const {
  return true;
}

void MlfMotionRefinerConfig::InternalSwap(MlfMotionRefinerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(claping_acceleration_threshold_, other->claping_acceleration_threshold_);
  swap(claping_speed_threshold_, other->claping_speed_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfMotionRefinerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfShapeFilterConfig::InitAsDefaultInstance() {
}
class MlfShapeFilterConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfShapeFilterConfig>()._has_bits_);
  static void set_has_bottom_points_ignore_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_points_ignore_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MlfShapeFilterConfig::MlfShapeFilterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfShapeFilterConfig)
}
MlfShapeFilterConfig::MlfShapeFilterConfig(const MlfShapeFilterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bottom_points_ignore_threshold_, &from.bottom_points_ignore_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_points_ignore_threshold_) -
    reinterpret_cast<char*>(&bottom_points_ignore_threshold_)) + sizeof(top_points_ignore_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfShapeFilterConfig)
}

void MlfShapeFilterConfig::SharedCtor() {
  bottom_points_ignore_threshold_ = 0.1;
  top_points_ignore_threshold_ = 1.6;
}

MlfShapeFilterConfig::~MlfShapeFilterConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfShapeFilterConfig)
  SharedDtor();
}

void MlfShapeFilterConfig::SharedDtor() {
}

void MlfShapeFilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfShapeFilterConfig& MlfShapeFilterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfShapeFilterConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfShapeFilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfShapeFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    bottom_points_ignore_threshold_ = 0.1;
    top_points_ignore_threshold_ = 1.6;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfShapeFilterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_bottom_points_ignore_threshold(&has_bits);
          bottom_points_ignore_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double top_points_ignore_threshold = 2 [default = 1.6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_top_points_ignore_threshold(&has_bits);
          top_points_ignore_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfShapeFilterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfShapeFilterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_bottom_points_ignore_threshold(), target);
  }

  // optional double top_points_ignore_threshold = 2 [default = 1.6];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_top_points_ignore_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfShapeFilterConfig)
  return target;
}

size_t MlfShapeFilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfShapeFilterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double bottom_points_ignore_threshold = 1 [default = 0.1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double top_points_ignore_threshold = 2 [default = 1.6];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfShapeFilterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfShapeFilterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfShapeFilterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfShapeFilterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfShapeFilterConfig)
    MergeFrom(*source);
  }
}

void MlfShapeFilterConfig::MergeFrom(const MlfShapeFilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bottom_points_ignore_threshold_ = from.bottom_points_ignore_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_points_ignore_threshold_ = from.top_points_ignore_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfShapeFilterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfShapeFilterConfig::CopyFrom(const MlfShapeFilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfShapeFilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfShapeFilterConfig::IsInitialized() const {
  return true;
}

void MlfShapeFilterConfig::InternalSwap(MlfShapeFilterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bottom_points_ignore_threshold_, other->bottom_points_ignore_threshold_);
  swap(top_points_ignore_threshold_, other->top_points_ignore_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfShapeFilterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlfEngineConfig::InitAsDefaultInstance() {
}
class MlfEngineConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MlfEngineConfig>()._has_bits_);
  static void set_has_use_histogram_for_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_histogram_bin_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_predict_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reserved_invisible_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_frame_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MlfEngineConfig::MlfEngineConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MlfEngineConfig)
}
MlfEngineConfig::MlfEngineConfig(const MlfEngineConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      main_sensor_(from.main_sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_predict_objects_, &from.output_predict_objects_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserved_invisible_time_) -
    reinterpret_cast<char*>(&output_predict_objects_)) + sizeof(reserved_invisible_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MlfEngineConfig)
}

void MlfEngineConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MlfEngineConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  ::memset(&output_predict_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_frame_timestamp_) -
      reinterpret_cast<char*>(&output_predict_objects_)) + sizeof(use_frame_timestamp_));
  use_histogram_for_match_ = true;
  histogram_bin_size_ = 10u;
  reserved_invisible_time_ = 0.2;
}

MlfEngineConfig::~MlfEngineConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MlfEngineConfig)
  SharedDtor();
}

void MlfEngineConfig::SharedDtor() {
}

void MlfEngineConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlfEngineConfig& MlfEngineConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlfEngineConfig_modules_2fperception_2flidar_2flib_2ftracker_2fmulti_5flidar_5ffusion_2fproto_2fmulti_5flidar_5ffusion_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MlfEngineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MlfEngineConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_sensor_.Clear();
  ::memset(&output_predict_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_frame_timestamp_) -
      reinterpret_cast<char*>(&output_predict_objects_)) + sizeof(use_frame_timestamp_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    use_histogram_for_match_ = true;
    histogram_bin_size_ = 10u;
    reserved_invisible_time_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MlfEngineConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string main_sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_main_sensor();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.lidar.MlfEngineConfig.main_sensor");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool use_histogram_for_match = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_histogram_for_match(&has_bits);
          use_histogram_for_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 histogram_bin_size = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_histogram_bin_size(&has_bits);
          histogram_bin_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_predict_objects = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_predict_objects(&has_bits);
          output_predict_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reserved_invisible_time = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_reserved_invisible_time(&has_bits);
          reserved_invisible_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_frame_timestamp = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_frame_timestamp(&has_bits);
          use_frame_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlfEngineConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MlfEngineConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string main_sensor = 1;
  for (int i = 0, n = this->_internal_main_sensor_size(); i < n; i++) {
    const auto& s = this->_internal_main_sensor(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.lidar.MlfEngineConfig.main_sensor");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_histogram_for_match = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_histogram_for_match(), target);
  }

  // optional uint32 histogram_bin_size = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_histogram_bin_size(), target);
  }

  // optional bool output_predict_objects = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_predict_objects(), target);
  }

  // optional double reserved_invisible_time = 5 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_reserved_invisible_time(), target);
  }

  // optional bool use_frame_timestamp = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_frame_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MlfEngineConfig)
  return target;
}

size_t MlfEngineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MlfEngineConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string main_sensor = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(main_sensor_.size());
  for (int i = 0, n = main_sensor_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      main_sensor_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool output_predict_objects = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool use_frame_timestamp = 6 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool use_histogram_for_match = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 histogram_bin_size = 3 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_histogram_bin_size());
    }

    // optional double reserved_invisible_time = 5 [default = 0.2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlfEngineConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MlfEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MlfEngineConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlfEngineConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MlfEngineConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MlfEngineConfig)
    MergeFrom(*source);
  }
}

void MlfEngineConfig::MergeFrom(const MlfEngineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MlfEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  main_sensor_.MergeFrom(from.main_sensor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      output_predict_objects_ = from.output_predict_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_frame_timestamp_ = from.use_frame_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_histogram_for_match_ = from.use_histogram_for_match_;
    }
    if (cached_has_bits & 0x00000008u) {
      histogram_bin_size_ = from.histogram_bin_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      reserved_invisible_time_ = from.reserved_invisible_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MlfEngineConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MlfEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlfEngineConfig::CopyFrom(const MlfEngineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MlfEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlfEngineConfig::IsInitialized() const {
  return true;
}

void MlfEngineConfig::InternalSwap(MlfEngineConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  main_sensor_.InternalSwap(&other->main_sensor_);
  swap(output_predict_objects_, other->output_predict_objects_);
  swap(use_frame_timestamp_, other->use_frame_timestamp_);
  swap(use_histogram_for_match_, other->use_histogram_for_match_);
  swap(histogram_bin_size_, other->histogram_bin_size_);
  swap(reserved_invisible_time_, other->reserved_invisible_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MlfEngineConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfDistanceWeight* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfDistanceWeight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfDistanceWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfDistanceConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfDistanceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfDistanceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfTrackObjectMatcherConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfTrackObjectMatcherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfTrackObjectMatcherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfTrackerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfTrackerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfTrackerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfMotionFilterConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfMotionFilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfMotionFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfMotionRefinerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfMotionRefinerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfMotionRefinerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfShapeFilterConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfShapeFilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfShapeFilterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::lidar::MlfEngineConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MlfEngineConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MlfEngineConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
