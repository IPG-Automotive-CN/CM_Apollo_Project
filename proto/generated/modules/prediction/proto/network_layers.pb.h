// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/network_layers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
namespace apollo {
namespace prediction {
class ActivationParameter;
class ActivationParameterDefaultTypeInternal;
extern ActivationParameterDefaultTypeInternal _ActivationParameter_default_instance_;
class AvgPool1dParameter;
class AvgPool1dParameterDefaultTypeInternal;
extern AvgPool1dParameterDefaultTypeInternal _AvgPool1dParameter_default_instance_;
class BatchNormalizationParameter;
class BatchNormalizationParameterDefaultTypeInternal;
extern BatchNormalizationParameterDefaultTypeInternal _BatchNormalizationParameter_default_instance_;
class ConcatenateParameter;
class ConcatenateParameterDefaultTypeInternal;
extern ConcatenateParameterDefaultTypeInternal _ConcatenateParameter_default_instance_;
class Conv1dParameter;
class Conv1dParameterDefaultTypeInternal;
extern Conv1dParameterDefaultTypeInternal _Conv1dParameter_default_instance_;
class DenseParameter;
class DenseParameterDefaultTypeInternal;
extern DenseParameterDefaultTypeInternal _DenseParameter_default_instance_;
class FlattenParameter;
class FlattenParameterDefaultTypeInternal;
extern FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
class InputParameter;
class InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class LSTMParameter;
class LSTMParameterDefaultTypeInternal;
extern LSTMParameterDefaultTypeInternal _LSTMParameter_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class MaxPool1dParameter;
class MaxPool1dParameterDefaultTypeInternal;
extern MaxPool1dParameterDefaultTypeInternal _MaxPool1dParameter_default_instance_;
class TensorParameter;
class TensorParameterDefaultTypeInternal;
extern TensorParameterDefaultTypeInternal _TensorParameter_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::ActivationParameter* Arena::CreateMaybeMessage<::apollo::prediction::ActivationParameter>(Arena*);
template<> ::apollo::prediction::AvgPool1dParameter* Arena::CreateMaybeMessage<::apollo::prediction::AvgPool1dParameter>(Arena*);
template<> ::apollo::prediction::BatchNormalizationParameter* Arena::CreateMaybeMessage<::apollo::prediction::BatchNormalizationParameter>(Arena*);
template<> ::apollo::prediction::ConcatenateParameter* Arena::CreateMaybeMessage<::apollo::prediction::ConcatenateParameter>(Arena*);
template<> ::apollo::prediction::Conv1dParameter* Arena::CreateMaybeMessage<::apollo::prediction::Conv1dParameter>(Arena*);
template<> ::apollo::prediction::DenseParameter* Arena::CreateMaybeMessage<::apollo::prediction::DenseParameter>(Arena*);
template<> ::apollo::prediction::FlattenParameter* Arena::CreateMaybeMessage<::apollo::prediction::FlattenParameter>(Arena*);
template<> ::apollo::prediction::InputParameter* Arena::CreateMaybeMessage<::apollo::prediction::InputParameter>(Arena*);
template<> ::apollo::prediction::LSTMParameter* Arena::CreateMaybeMessage<::apollo::prediction::LSTMParameter>(Arena*);
template<> ::apollo::prediction::LayerParameter* Arena::CreateMaybeMessage<::apollo::prediction::LayerParameter>(Arena*);
template<> ::apollo::prediction::MaxPool1dParameter* Arena::CreateMaybeMessage<::apollo::prediction::MaxPool1dParameter>(Arena*);
template<> ::apollo::prediction::TensorParameter* Arena::CreateMaybeMessage<::apollo::prediction::TensorParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

// ===================================================================

class TensorParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.TensorParameter) */ {
 public:
  TensorParameter();
  virtual ~TensorParameter();

  TensorParameter(const TensorParameter& from);
  TensorParameter(TensorParameter&& from) noexcept
    : TensorParameter() {
    *this = ::std::move(from);
  }

  inline TensorParameter& operator=(const TensorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorParameter& operator=(TensorParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorParameter* internal_default_instance() {
    return reinterpret_cast<const TensorParameter*>(
               &_TensorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorParameter& a, TensorParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorParameter* New() const final {
    return CreateMaybeMessage<TensorParameter>(nullptr);
  }

  TensorParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorParameter& from);
  void MergeFrom(const TensorParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.TensorParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kShapeFieldNumber = 2,
  };
  // repeated float data = 1 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated int32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:apollo.prediction.TensorParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class InputParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);
  InputParameter(InputParameter&& from) noexcept
    : InputParameter() {
    *this = ::std::move(from);
  }

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameter& operator=(InputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputParameter& a, InputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputParameter* New() const final {
    return CreateMaybeMessage<InputParameter>(nullptr);
  }

  InputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.InputParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputShapeFieldNumber = 1,
    kDtypeFieldNumber = 2,
    kSparseFieldNumber = 3,
  };
  // repeated int32 input_shape = 1;
  int input_shape_size() const;
  private:
  int _internal_input_shape_size() const;
  public:
  void clear_input_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_input_shape() const;
  void _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_input_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 input_shape(int index) const;
  void set_input_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      input_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_input_shape();

  // optional string dtype = 2;
  bool has_dtype() const;
  private:
  bool _internal_has_dtype() const;
  public:
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // optional bool sparse = 3;
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  bool sparse() const;
  void set_sparse(bool value);
  private:
  bool _internal_sparse() const;
  void _internal_set_sparse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.InputParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > input_shape_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  bool sparse_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class DenseParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.DenseParameter) */ {
 public:
  DenseParameter();
  virtual ~DenseParameter();

  DenseParameter(const DenseParameter& from);
  DenseParameter(DenseParameter&& from) noexcept
    : DenseParameter() {
    *this = ::std::move(from);
  }

  inline DenseParameter& operator=(const DenseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseParameter& operator=(DenseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseParameter* internal_default_instance() {
    return reinterpret_cast<const DenseParameter*>(
               &_DenseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DenseParameter& a, DenseParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseParameter* New() const final {
    return CreateMaybeMessage<DenseParameter>(nullptr);
  }

  DenseParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseParameter& from);
  void MergeFrom(const DenseParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.DenseParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 2,
    kWeightsFieldNumber = 4,
    kBiasFieldNumber = 5,
    kUnitsFieldNumber = 1,
    kUseBiasFieldNumber = 3,
  };
  // optional string activation = 2;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const std::string& activation() const;
  void set_activation(const std::string& value);
  void set_activation(std::string&& value);
  void set_activation(const char* value);
  void set_activation(const char* value, size_t size);
  std::string* mutable_activation();
  std::string* release_activation();
  void set_allocated_activation(std::string* activation);
  private:
  const std::string& _internal_activation() const;
  void _internal_set_activation(const std::string& value);
  std::string* _internal_mutable_activation();
  public:

  // optional .apollo.prediction.TensorParameter weights = 4;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::apollo::prediction::TensorParameter& weights() const;
  ::apollo::prediction::TensorParameter* release_weights();
  ::apollo::prediction::TensorParameter* mutable_weights();
  void set_allocated_weights(::apollo::prediction::TensorParameter* weights);
  private:
  const ::apollo::prediction::TensorParameter& _internal_weights() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_weights();
  public:

  // optional .apollo.prediction.TensorParameter bias = 5;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::apollo::prediction::TensorParameter& bias() const;
  ::apollo::prediction::TensorParameter* release_bias();
  ::apollo::prediction::TensorParameter* mutable_bias();
  void set_allocated_bias(::apollo::prediction::TensorParameter* bias);
  private:
  const ::apollo::prediction::TensorParameter& _internal_bias() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_bias();
  public:

  // optional int32 units = 1;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  ::PROTOBUF_NAMESPACE_ID::int32 units() const;
  void set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_units() const;
  void _internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_bias = 3;
  bool has_use_bias() const;
  private:
  bool _internal_has_use_bias() const;
  public:
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.DenseParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_;
  ::apollo::prediction::TensorParameter* weights_;
  ::apollo::prediction::TensorParameter* bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 units_;
  bool use_bias_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class Conv1dParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Conv1dParameter) */ {
 public:
  Conv1dParameter();
  virtual ~Conv1dParameter();

  Conv1dParameter(const Conv1dParameter& from);
  Conv1dParameter(Conv1dParameter&& from) noexcept
    : Conv1dParameter() {
    *this = ::std::move(from);
  }

  inline Conv1dParameter& operator=(const Conv1dParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conv1dParameter& operator=(Conv1dParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conv1dParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conv1dParameter* internal_default_instance() {
    return reinterpret_cast<const Conv1dParameter*>(
               &_Conv1dParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Conv1dParameter& a, Conv1dParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Conv1dParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conv1dParameter* New() const final {
    return CreateMaybeMessage<Conv1dParameter>(nullptr);
  }

  Conv1dParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conv1dParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conv1dParameter& from);
  void MergeFrom(const Conv1dParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conv1dParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Conv1dParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kKernelFieldNumber = 3,
    kBiasFieldNumber = 4,
    kUseBiasFieldNumber = 2,
    kStrideFieldNumber = 5,
  };
  // repeated int32 shape = 1;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // optional .apollo.prediction.TensorParameter kernel = 3;
  bool has_kernel() const;
  private:
  bool _internal_has_kernel() const;
  public:
  void clear_kernel();
  const ::apollo::prediction::TensorParameter& kernel() const;
  ::apollo::prediction::TensorParameter* release_kernel();
  ::apollo::prediction::TensorParameter* mutable_kernel();
  void set_allocated_kernel(::apollo::prediction::TensorParameter* kernel);
  private:
  const ::apollo::prediction::TensorParameter& _internal_kernel() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_kernel();
  public:

  // optional .apollo.prediction.TensorParameter bias = 4;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::apollo::prediction::TensorParameter& bias() const;
  ::apollo::prediction::TensorParameter* release_bias();
  ::apollo::prediction::TensorParameter* mutable_bias();
  void set_allocated_bias(::apollo::prediction::TensorParameter* bias);
  private:
  const ::apollo::prediction::TensorParameter& _internal_bias() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_bias();
  public:

  // optional bool use_bias = 2;
  bool has_use_bias() const;
  private:
  bool _internal_has_use_bias() const;
  public:
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // optional int32 stride = 5;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.Conv1dParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  ::apollo::prediction::TensorParameter* kernel_;
  ::apollo::prediction::TensorParameter* bias_;
  bool use_bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class MaxPool1dParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.MaxPool1dParameter) */ {
 public:
  MaxPool1dParameter();
  virtual ~MaxPool1dParameter();

  MaxPool1dParameter(const MaxPool1dParameter& from);
  MaxPool1dParameter(MaxPool1dParameter&& from) noexcept
    : MaxPool1dParameter() {
    *this = ::std::move(from);
  }

  inline MaxPool1dParameter& operator=(const MaxPool1dParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaxPool1dParameter& operator=(MaxPool1dParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaxPool1dParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxPool1dParameter* internal_default_instance() {
    return reinterpret_cast<const MaxPool1dParameter*>(
               &_MaxPool1dParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MaxPool1dParameter& a, MaxPool1dParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MaxPool1dParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaxPool1dParameter* New() const final {
    return CreateMaybeMessage<MaxPool1dParameter>(nullptr);
  }

  MaxPool1dParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaxPool1dParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaxPool1dParameter& from);
  void MergeFrom(const MaxPool1dParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxPool1dParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.MaxPool1dParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // optional int32 kernel_size = 1;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 stride = 2;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.MaxPool1dParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class AvgPool1dParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.AvgPool1dParameter) */ {
 public:
  AvgPool1dParameter();
  virtual ~AvgPool1dParameter();

  AvgPool1dParameter(const AvgPool1dParameter& from);
  AvgPool1dParameter(AvgPool1dParameter&& from) noexcept
    : AvgPool1dParameter() {
    *this = ::std::move(from);
  }

  inline AvgPool1dParameter& operator=(const AvgPool1dParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvgPool1dParameter& operator=(AvgPool1dParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvgPool1dParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvgPool1dParameter* internal_default_instance() {
    return reinterpret_cast<const AvgPool1dParameter*>(
               &_AvgPool1dParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AvgPool1dParameter& a, AvgPool1dParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AvgPool1dParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvgPool1dParameter* New() const final {
    return CreateMaybeMessage<AvgPool1dParameter>(nullptr);
  }

  AvgPool1dParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvgPool1dParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvgPool1dParameter& from);
  void MergeFrom(const AvgPool1dParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvgPool1dParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.AvgPool1dParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // optional int32 kernel_size = 1;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 stride = 2;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.AvgPool1dParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class BatchNormalizationParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.BatchNormalizationParameter) */ {
 public:
  BatchNormalizationParameter();
  virtual ~BatchNormalizationParameter();

  BatchNormalizationParameter(const BatchNormalizationParameter& from);
  BatchNormalizationParameter(BatchNormalizationParameter&& from) noexcept
    : BatchNormalizationParameter() {
    *this = ::std::move(from);
  }

  inline BatchNormalizationParameter& operator=(const BatchNormalizationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchNormalizationParameter& operator=(BatchNormalizationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchNormalizationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchNormalizationParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormalizationParameter*>(
               &_BatchNormalizationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BatchNormalizationParameter& a, BatchNormalizationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchNormalizationParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchNormalizationParameter* New() const final {
    return CreateMaybeMessage<BatchNormalizationParameter>(nullptr);
  }

  BatchNormalizationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchNormalizationParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchNormalizationParameter& from);
  void MergeFrom(const BatchNormalizationParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchNormalizationParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.BatchNormalizationParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMuFieldNumber = 6,
    kSigmaFieldNumber = 7,
    kGammaFieldNumber = 8,
    kBetaFieldNumber = 9,
    kAxisFieldNumber = 2,
    kCenterFieldNumber = 3,
    kScaleFieldNumber = 4,
    kMomentumFieldNumber = 5,
    kEpsilonFieldNumber = 1,
  };
  // optional .apollo.prediction.TensorParameter mu = 6;
  bool has_mu() const;
  private:
  bool _internal_has_mu() const;
  public:
  void clear_mu();
  const ::apollo::prediction::TensorParameter& mu() const;
  ::apollo::prediction::TensorParameter* release_mu();
  ::apollo::prediction::TensorParameter* mutable_mu();
  void set_allocated_mu(::apollo::prediction::TensorParameter* mu);
  private:
  const ::apollo::prediction::TensorParameter& _internal_mu() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_mu();
  public:

  // optional .apollo.prediction.TensorParameter sigma = 7;
  bool has_sigma() const;
  private:
  bool _internal_has_sigma() const;
  public:
  void clear_sigma();
  const ::apollo::prediction::TensorParameter& sigma() const;
  ::apollo::prediction::TensorParameter* release_sigma();
  ::apollo::prediction::TensorParameter* mutable_sigma();
  void set_allocated_sigma(::apollo::prediction::TensorParameter* sigma);
  private:
  const ::apollo::prediction::TensorParameter& _internal_sigma() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_sigma();
  public:

  // optional .apollo.prediction.TensorParameter gamma = 8;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  const ::apollo::prediction::TensorParameter& gamma() const;
  ::apollo::prediction::TensorParameter* release_gamma();
  ::apollo::prediction::TensorParameter* mutable_gamma();
  void set_allocated_gamma(::apollo::prediction::TensorParameter* gamma);
  private:
  const ::apollo::prediction::TensorParameter& _internal_gamma() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_gamma();
  public:

  // optional .apollo.prediction.TensorParameter beta = 9;
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  const ::apollo::prediction::TensorParameter& beta() const;
  ::apollo::prediction::TensorParameter* release_beta();
  ::apollo::prediction::TensorParameter* mutable_beta();
  void set_allocated_beta(::apollo::prediction::TensorParameter* beta);
  private:
  const ::apollo::prediction::TensorParameter& _internal_beta() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_beta();
  public:

  // optional int32 axis = 2;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool center = 3;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  bool center() const;
  void set_center(bool value);
  private:
  bool _internal_center() const;
  void _internal_set_center(bool value);
  public:

  // optional bool scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  bool scale() const;
  void set_scale(bool value);
  private:
  bool _internal_scale() const;
  void _internal_set_scale(bool value);
  public:

  // optional float momentum = 5;
  bool has_momentum() const;
  private:
  bool _internal_has_momentum() const;
  public:
  void clear_momentum();
  float momentum() const;
  void set_momentum(float value);
  private:
  float _internal_momentum() const;
  void _internal_set_momentum(float value);
  public:

  // optional double epsilon = 1 [default = 1e-05];
  bool has_epsilon() const;
  private:
  bool _internal_has_epsilon() const;
  public:
  void clear_epsilon();
  double epsilon() const;
  void set_epsilon(double value);
  private:
  double _internal_epsilon() const;
  void _internal_set_epsilon(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.BatchNormalizationParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::prediction::TensorParameter* mu_;
  ::apollo::prediction::TensorParameter* sigma_;
  ::apollo::prediction::TensorParameter* gamma_;
  ::apollo::prediction::TensorParameter* beta_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool center_;
  bool scale_;
  float momentum_;
  double epsilon_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class LSTMParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LSTMParameter) */ {
 public:
  LSTMParameter();
  virtual ~LSTMParameter();

  LSTMParameter(const LSTMParameter& from);
  LSTMParameter(LSTMParameter&& from) noexcept
    : LSTMParameter() {
    *this = ::std::move(from);
  }

  inline LSTMParameter& operator=(const LSTMParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LSTMParameter& operator=(LSTMParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LSTMParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LSTMParameter* internal_default_instance() {
    return reinterpret_cast<const LSTMParameter*>(
               &_LSTMParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LSTMParameter& a, LSTMParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LSTMParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LSTMParameter* New() const final {
    return CreateMaybeMessage<LSTMParameter>(nullptr);
  }

  LSTMParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LSTMParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LSTMParameter& from);
  void MergeFrom(const LSTMParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LSTMParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LSTMParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 4,
    kRecurrentActivationFieldNumber = 5,
    kWeightsInputFieldNumber = 15,
    kWeightsForgetFieldNumber = 16,
    kWeightsCellFieldNumber = 17,
    kWeightsOutputFieldNumber = 18,
    kBiasInputFieldNumber = 19,
    kBiasForgetFieldNumber = 20,
    kBiasCellFieldNumber = 21,
    kBiasOutputFieldNumber = 22,
    kRecurrentWeightsInputFieldNumber = 25,
    kRecurrentWeightsForgetFieldNumber = 26,
    kRecurrentWeightsCellFieldNumber = 27,
    kRecurrentWeightsOutputFieldNumber = 28,
    kUnitsFieldNumber = 1,
    kReturnSequencesFieldNumber = 2,
    kStatefulFieldNumber = 3,
    kUseBiasFieldNumber = 6,
    kGoBackwardsFieldNumber = 8,
    kUnrollFieldNumber = 9,
    kImplementationFieldNumber = 10,
    kUnitForgetBiasFieldNumber = 7,
  };
  // optional string activation = 4;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const std::string& activation() const;
  void set_activation(const std::string& value);
  void set_activation(std::string&& value);
  void set_activation(const char* value);
  void set_activation(const char* value, size_t size);
  std::string* mutable_activation();
  std::string* release_activation();
  void set_allocated_activation(std::string* activation);
  private:
  const std::string& _internal_activation() const;
  void _internal_set_activation(const std::string& value);
  std::string* _internal_mutable_activation();
  public:

  // optional string recurrent_activation = 5;
  bool has_recurrent_activation() const;
  private:
  bool _internal_has_recurrent_activation() const;
  public:
  void clear_recurrent_activation();
  const std::string& recurrent_activation() const;
  void set_recurrent_activation(const std::string& value);
  void set_recurrent_activation(std::string&& value);
  void set_recurrent_activation(const char* value);
  void set_recurrent_activation(const char* value, size_t size);
  std::string* mutable_recurrent_activation();
  std::string* release_recurrent_activation();
  void set_allocated_recurrent_activation(std::string* recurrent_activation);
  private:
  const std::string& _internal_recurrent_activation() const;
  void _internal_set_recurrent_activation(const std::string& value);
  std::string* _internal_mutable_recurrent_activation();
  public:

  // optional .apollo.prediction.TensorParameter weights_input = 15;
  bool has_weights_input() const;
  private:
  bool _internal_has_weights_input() const;
  public:
  void clear_weights_input();
  const ::apollo::prediction::TensorParameter& weights_input() const;
  ::apollo::prediction::TensorParameter* release_weights_input();
  ::apollo::prediction::TensorParameter* mutable_weights_input();
  void set_allocated_weights_input(::apollo::prediction::TensorParameter* weights_input);
  private:
  const ::apollo::prediction::TensorParameter& _internal_weights_input() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_weights_input();
  public:

  // optional .apollo.prediction.TensorParameter weights_forget = 16;
  bool has_weights_forget() const;
  private:
  bool _internal_has_weights_forget() const;
  public:
  void clear_weights_forget();
  const ::apollo::prediction::TensorParameter& weights_forget() const;
  ::apollo::prediction::TensorParameter* release_weights_forget();
  ::apollo::prediction::TensorParameter* mutable_weights_forget();
  void set_allocated_weights_forget(::apollo::prediction::TensorParameter* weights_forget);
  private:
  const ::apollo::prediction::TensorParameter& _internal_weights_forget() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_weights_forget();
  public:

  // optional .apollo.prediction.TensorParameter weights_cell = 17;
  bool has_weights_cell() const;
  private:
  bool _internal_has_weights_cell() const;
  public:
  void clear_weights_cell();
  const ::apollo::prediction::TensorParameter& weights_cell() const;
  ::apollo::prediction::TensorParameter* release_weights_cell();
  ::apollo::prediction::TensorParameter* mutable_weights_cell();
  void set_allocated_weights_cell(::apollo::prediction::TensorParameter* weights_cell);
  private:
  const ::apollo::prediction::TensorParameter& _internal_weights_cell() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_weights_cell();
  public:

  // optional .apollo.prediction.TensorParameter weights_output = 18;
  bool has_weights_output() const;
  private:
  bool _internal_has_weights_output() const;
  public:
  void clear_weights_output();
  const ::apollo::prediction::TensorParameter& weights_output() const;
  ::apollo::prediction::TensorParameter* release_weights_output();
  ::apollo::prediction::TensorParameter* mutable_weights_output();
  void set_allocated_weights_output(::apollo::prediction::TensorParameter* weights_output);
  private:
  const ::apollo::prediction::TensorParameter& _internal_weights_output() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_weights_output();
  public:

  // optional .apollo.prediction.TensorParameter bias_input = 19;
  bool has_bias_input() const;
  private:
  bool _internal_has_bias_input() const;
  public:
  void clear_bias_input();
  const ::apollo::prediction::TensorParameter& bias_input() const;
  ::apollo::prediction::TensorParameter* release_bias_input();
  ::apollo::prediction::TensorParameter* mutable_bias_input();
  void set_allocated_bias_input(::apollo::prediction::TensorParameter* bias_input);
  private:
  const ::apollo::prediction::TensorParameter& _internal_bias_input() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_bias_input();
  public:

  // optional .apollo.prediction.TensorParameter bias_forget = 20;
  bool has_bias_forget() const;
  private:
  bool _internal_has_bias_forget() const;
  public:
  void clear_bias_forget();
  const ::apollo::prediction::TensorParameter& bias_forget() const;
  ::apollo::prediction::TensorParameter* release_bias_forget();
  ::apollo::prediction::TensorParameter* mutable_bias_forget();
  void set_allocated_bias_forget(::apollo::prediction::TensorParameter* bias_forget);
  private:
  const ::apollo::prediction::TensorParameter& _internal_bias_forget() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_bias_forget();
  public:

  // optional .apollo.prediction.TensorParameter bias_cell = 21;
  bool has_bias_cell() const;
  private:
  bool _internal_has_bias_cell() const;
  public:
  void clear_bias_cell();
  const ::apollo::prediction::TensorParameter& bias_cell() const;
  ::apollo::prediction::TensorParameter* release_bias_cell();
  ::apollo::prediction::TensorParameter* mutable_bias_cell();
  void set_allocated_bias_cell(::apollo::prediction::TensorParameter* bias_cell);
  private:
  const ::apollo::prediction::TensorParameter& _internal_bias_cell() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_bias_cell();
  public:

  // optional .apollo.prediction.TensorParameter bias_output = 22;
  bool has_bias_output() const;
  private:
  bool _internal_has_bias_output() const;
  public:
  void clear_bias_output();
  const ::apollo::prediction::TensorParameter& bias_output() const;
  ::apollo::prediction::TensorParameter* release_bias_output();
  ::apollo::prediction::TensorParameter* mutable_bias_output();
  void set_allocated_bias_output(::apollo::prediction::TensorParameter* bias_output);
  private:
  const ::apollo::prediction::TensorParameter& _internal_bias_output() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_bias_output();
  public:

  // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
  bool has_recurrent_weights_input() const;
  private:
  bool _internal_has_recurrent_weights_input() const;
  public:
  void clear_recurrent_weights_input();
  const ::apollo::prediction::TensorParameter& recurrent_weights_input() const;
  ::apollo::prediction::TensorParameter* release_recurrent_weights_input();
  ::apollo::prediction::TensorParameter* mutable_recurrent_weights_input();
  void set_allocated_recurrent_weights_input(::apollo::prediction::TensorParameter* recurrent_weights_input);
  private:
  const ::apollo::prediction::TensorParameter& _internal_recurrent_weights_input() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_recurrent_weights_input();
  public:

  // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
  bool has_recurrent_weights_forget() const;
  private:
  bool _internal_has_recurrent_weights_forget() const;
  public:
  void clear_recurrent_weights_forget();
  const ::apollo::prediction::TensorParameter& recurrent_weights_forget() const;
  ::apollo::prediction::TensorParameter* release_recurrent_weights_forget();
  ::apollo::prediction::TensorParameter* mutable_recurrent_weights_forget();
  void set_allocated_recurrent_weights_forget(::apollo::prediction::TensorParameter* recurrent_weights_forget);
  private:
  const ::apollo::prediction::TensorParameter& _internal_recurrent_weights_forget() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_recurrent_weights_forget();
  public:

  // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
  bool has_recurrent_weights_cell() const;
  private:
  bool _internal_has_recurrent_weights_cell() const;
  public:
  void clear_recurrent_weights_cell();
  const ::apollo::prediction::TensorParameter& recurrent_weights_cell() const;
  ::apollo::prediction::TensorParameter* release_recurrent_weights_cell();
  ::apollo::prediction::TensorParameter* mutable_recurrent_weights_cell();
  void set_allocated_recurrent_weights_cell(::apollo::prediction::TensorParameter* recurrent_weights_cell);
  private:
  const ::apollo::prediction::TensorParameter& _internal_recurrent_weights_cell() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_recurrent_weights_cell();
  public:

  // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
  bool has_recurrent_weights_output() const;
  private:
  bool _internal_has_recurrent_weights_output() const;
  public:
  void clear_recurrent_weights_output();
  const ::apollo::prediction::TensorParameter& recurrent_weights_output() const;
  ::apollo::prediction::TensorParameter* release_recurrent_weights_output();
  ::apollo::prediction::TensorParameter* mutable_recurrent_weights_output();
  void set_allocated_recurrent_weights_output(::apollo::prediction::TensorParameter* recurrent_weights_output);
  private:
  const ::apollo::prediction::TensorParameter& _internal_recurrent_weights_output() const;
  ::apollo::prediction::TensorParameter* _internal_mutable_recurrent_weights_output();
  public:

  // optional int32 units = 1;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  ::PROTOBUF_NAMESPACE_ID::int32 units() const;
  void set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_units() const;
  void _internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool return_sequences = 2;
  bool has_return_sequences() const;
  private:
  bool _internal_has_return_sequences() const;
  public:
  void clear_return_sequences();
  bool return_sequences() const;
  void set_return_sequences(bool value);
  private:
  bool _internal_return_sequences() const;
  void _internal_set_return_sequences(bool value);
  public:

  // optional bool stateful = 3;
  bool has_stateful() const;
  private:
  bool _internal_has_stateful() const;
  public:
  void clear_stateful();
  bool stateful() const;
  void set_stateful(bool value);
  private:
  bool _internal_stateful() const;
  void _internal_set_stateful(bool value);
  public:

  // optional bool use_bias = 6;
  bool has_use_bias() const;
  private:
  bool _internal_has_use_bias() const;
  public:
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // optional bool go_backwards = 8 [default = false];
  bool has_go_backwards() const;
  private:
  bool _internal_has_go_backwards() const;
  public:
  void clear_go_backwards();
  bool go_backwards() const;
  void set_go_backwards(bool value);
  private:
  bool _internal_go_backwards() const;
  void _internal_set_go_backwards(bool value);
  public:

  // optional bool unroll = 9 [default = false];
  bool has_unroll() const;
  private:
  bool _internal_has_unroll() const;
  public:
  void clear_unroll();
  bool unroll() const;
  void set_unroll(bool value);
  private:
  bool _internal_unroll() const;
  void _internal_set_unroll(bool value);
  public:

  // optional int32 implementation = 10 [default = 0];
  bool has_implementation() const;
  private:
  bool _internal_has_implementation() const;
  public:
  void clear_implementation();
  ::PROTOBUF_NAMESPACE_ID::int32 implementation() const;
  void set_implementation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_implementation() const;
  void _internal_set_implementation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool unit_forget_bias = 7 [default = true];
  bool has_unit_forget_bias() const;
  private:
  bool _internal_has_unit_forget_bias() const;
  public:
  void clear_unit_forget_bias();
  bool unit_forget_bias() const;
  void set_unit_forget_bias(bool value);
  private:
  bool _internal_unit_forget_bias() const;
  void _internal_set_unit_forget_bias(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.LSTMParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recurrent_activation_;
  ::apollo::prediction::TensorParameter* weights_input_;
  ::apollo::prediction::TensorParameter* weights_forget_;
  ::apollo::prediction::TensorParameter* weights_cell_;
  ::apollo::prediction::TensorParameter* weights_output_;
  ::apollo::prediction::TensorParameter* bias_input_;
  ::apollo::prediction::TensorParameter* bias_forget_;
  ::apollo::prediction::TensorParameter* bias_cell_;
  ::apollo::prediction::TensorParameter* bias_output_;
  ::apollo::prediction::TensorParameter* recurrent_weights_input_;
  ::apollo::prediction::TensorParameter* recurrent_weights_forget_;
  ::apollo::prediction::TensorParameter* recurrent_weights_cell_;
  ::apollo::prediction::TensorParameter* recurrent_weights_output_;
  ::PROTOBUF_NAMESPACE_ID::int32 units_;
  bool return_sequences_;
  bool stateful_;
  bool use_bias_;
  bool go_backwards_;
  bool unroll_;
  ::PROTOBUF_NAMESPACE_ID::int32 implementation_;
  bool unit_forget_bias_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class ActivationParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ActivationParameter) */ {
 public:
  ActivationParameter();
  virtual ~ActivationParameter();

  ActivationParameter(const ActivationParameter& from);
  ActivationParameter(ActivationParameter&& from) noexcept
    : ActivationParameter() {
    *this = ::std::move(from);
  }

  inline ActivationParameter& operator=(const ActivationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationParameter& operator=(ActivationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivationParameter* internal_default_instance() {
    return reinterpret_cast<const ActivationParameter*>(
               &_ActivationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ActivationParameter& a, ActivationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationParameter* New() const final {
    return CreateMaybeMessage<ActivationParameter>(nullptr);
  }

  ActivationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationParameter& from);
  void MergeFrom(const ActivationParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ActivationParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 1,
  };
  // optional string activation = 1;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const std::string& activation() const;
  void set_activation(const std::string& value);
  void set_activation(std::string&& value);
  void set_activation(const char* value);
  void set_activation(const char* value, size_t size);
  std::string* mutable_activation();
  std::string* release_activation();
  void set_allocated_activation(std::string* activation);
  private:
  const std::string& _internal_activation() const;
  void _internal_set_activation(const std::string& value);
  std::string* _internal_mutable_activation();
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ActivationParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class FlattenParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.FlattenParameter) */ {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);
  FlattenParameter(FlattenParameter&& from) noexcept
    : FlattenParameter() {
    *this = ::std::move(from);
  }

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlattenParameter& operator=(FlattenParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlattenParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FlattenParameter& a, FlattenParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FlattenParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlattenParameter* New() const final {
    return CreateMaybeMessage<FlattenParameter>(nullptr);
  }

  FlattenParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlattenParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlattenParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.FlattenParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.prediction.FlattenParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class ConcatenateParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ConcatenateParameter) */ {
 public:
  ConcatenateParameter();
  virtual ~ConcatenateParameter();

  ConcatenateParameter(const ConcatenateParameter& from);
  ConcatenateParameter(ConcatenateParameter&& from) noexcept
    : ConcatenateParameter() {
    *this = ::std::move(from);
  }

  inline ConcatenateParameter& operator=(const ConcatenateParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatenateParameter& operator=(ConcatenateParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConcatenateParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatenateParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatenateParameter*>(
               &_ConcatenateParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConcatenateParameter& a, ConcatenateParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatenateParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConcatenateParameter* New() const final {
    return CreateMaybeMessage<ConcatenateParameter>(nullptr);
  }

  ConcatenateParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConcatenateParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConcatenateParameter& from);
  void MergeFrom(const ConcatenateParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatenateParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ConcatenateParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
  };
  // optional int32 axis = 1;
  bool has_axis() const;
  private:
  bool _internal_has_axis() const;
  public:
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ConcatenateParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// -------------------------------------------------------------------

class LayerParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LayerParameter& default_instance();

  enum OneofLayersCase {
    kInput = 4,
    kActivation = 5,
    kDense = 6,
    kBatchNormalization = 7,
    kLstm = 8,
    kFlatten = 9,
    kConcatenate = 10,
    kConv1D = 11,
    kMaxpool1D = 12,
    kAvgpool1D = 13,
    ONEOF_LAYERS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const final {
    return CreateMaybeMessage<LayerParameter>(nullptr);
  }

  LayerParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayerParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.LayerParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kOrderNumberFieldNumber = 3,
    kInputFieldNumber = 4,
    kActivationFieldNumber = 5,
    kDenseFieldNumber = 6,
    kBatchNormalizationFieldNumber = 7,
    kLstmFieldNumber = 8,
    kFlattenFieldNumber = 9,
    kConcatenateFieldNumber = 10,
    kConv1DFieldNumber = 11,
    kMaxpool1DFieldNumber = 12,
    kAvgpool1DFieldNumber = 13,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 order_number = 3;
  bool has_order_number() const;
  private:
  bool _internal_has_order_number() const;
  public:
  void clear_order_number();
  ::PROTOBUF_NAMESPACE_ID::int32 order_number() const;
  void set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_number() const;
  void _internal_set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.prediction.InputParameter input = 4;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::apollo::prediction::InputParameter& input() const;
  ::apollo::prediction::InputParameter* release_input();
  ::apollo::prediction::InputParameter* mutable_input();
  void set_allocated_input(::apollo::prediction::InputParameter* input);
  private:
  const ::apollo::prediction::InputParameter& _internal_input() const;
  ::apollo::prediction::InputParameter* _internal_mutable_input();
  public:

  // optional .apollo.prediction.ActivationParameter activation = 5;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const ::apollo::prediction::ActivationParameter& activation() const;
  ::apollo::prediction::ActivationParameter* release_activation();
  ::apollo::prediction::ActivationParameter* mutable_activation();
  void set_allocated_activation(::apollo::prediction::ActivationParameter* activation);
  private:
  const ::apollo::prediction::ActivationParameter& _internal_activation() const;
  ::apollo::prediction::ActivationParameter* _internal_mutable_activation();
  public:

  // optional .apollo.prediction.DenseParameter dense = 6;
  bool has_dense() const;
  private:
  bool _internal_has_dense() const;
  public:
  void clear_dense();
  const ::apollo::prediction::DenseParameter& dense() const;
  ::apollo::prediction::DenseParameter* release_dense();
  ::apollo::prediction::DenseParameter* mutable_dense();
  void set_allocated_dense(::apollo::prediction::DenseParameter* dense);
  private:
  const ::apollo::prediction::DenseParameter& _internal_dense() const;
  ::apollo::prediction::DenseParameter* _internal_mutable_dense();
  public:

  // optional .apollo.prediction.BatchNormalizationParameter batch_normalization = 7;
  bool has_batch_normalization() const;
  private:
  bool _internal_has_batch_normalization() const;
  public:
  void clear_batch_normalization();
  const ::apollo::prediction::BatchNormalizationParameter& batch_normalization() const;
  ::apollo::prediction::BatchNormalizationParameter* release_batch_normalization();
  ::apollo::prediction::BatchNormalizationParameter* mutable_batch_normalization();
  void set_allocated_batch_normalization(::apollo::prediction::BatchNormalizationParameter* batch_normalization);
  private:
  const ::apollo::prediction::BatchNormalizationParameter& _internal_batch_normalization() const;
  ::apollo::prediction::BatchNormalizationParameter* _internal_mutable_batch_normalization();
  public:

  // optional .apollo.prediction.LSTMParameter lstm = 8;
  bool has_lstm() const;
  private:
  bool _internal_has_lstm() const;
  public:
  void clear_lstm();
  const ::apollo::prediction::LSTMParameter& lstm() const;
  ::apollo::prediction::LSTMParameter* release_lstm();
  ::apollo::prediction::LSTMParameter* mutable_lstm();
  void set_allocated_lstm(::apollo::prediction::LSTMParameter* lstm);
  private:
  const ::apollo::prediction::LSTMParameter& _internal_lstm() const;
  ::apollo::prediction::LSTMParameter* _internal_mutable_lstm();
  public:

  // optional .apollo.prediction.FlattenParameter flatten = 9;
  bool has_flatten() const;
  private:
  bool _internal_has_flatten() const;
  public:
  void clear_flatten();
  const ::apollo::prediction::FlattenParameter& flatten() const;
  ::apollo::prediction::FlattenParameter* release_flatten();
  ::apollo::prediction::FlattenParameter* mutable_flatten();
  void set_allocated_flatten(::apollo::prediction::FlattenParameter* flatten);
  private:
  const ::apollo::prediction::FlattenParameter& _internal_flatten() const;
  ::apollo::prediction::FlattenParameter* _internal_mutable_flatten();
  public:

  // optional .apollo.prediction.ConcatenateParameter concatenate = 10;
  bool has_concatenate() const;
  private:
  bool _internal_has_concatenate() const;
  public:
  void clear_concatenate();
  const ::apollo::prediction::ConcatenateParameter& concatenate() const;
  ::apollo::prediction::ConcatenateParameter* release_concatenate();
  ::apollo::prediction::ConcatenateParameter* mutable_concatenate();
  void set_allocated_concatenate(::apollo::prediction::ConcatenateParameter* concatenate);
  private:
  const ::apollo::prediction::ConcatenateParameter& _internal_concatenate() const;
  ::apollo::prediction::ConcatenateParameter* _internal_mutable_concatenate();
  public:

  // optional .apollo.prediction.Conv1dParameter conv1d = 11;
  bool has_conv1d() const;
  private:
  bool _internal_has_conv1d() const;
  public:
  void clear_conv1d();
  const ::apollo::prediction::Conv1dParameter& conv1d() const;
  ::apollo::prediction::Conv1dParameter* release_conv1d();
  ::apollo::prediction::Conv1dParameter* mutable_conv1d();
  void set_allocated_conv1d(::apollo::prediction::Conv1dParameter* conv1d);
  private:
  const ::apollo::prediction::Conv1dParameter& _internal_conv1d() const;
  ::apollo::prediction::Conv1dParameter* _internal_mutable_conv1d();
  public:

  // optional .apollo.prediction.MaxPool1dParameter maxpool1d = 12;
  bool has_maxpool1d() const;
  private:
  bool _internal_has_maxpool1d() const;
  public:
  void clear_maxpool1d();
  const ::apollo::prediction::MaxPool1dParameter& maxpool1d() const;
  ::apollo::prediction::MaxPool1dParameter* release_maxpool1d();
  ::apollo::prediction::MaxPool1dParameter* mutable_maxpool1d();
  void set_allocated_maxpool1d(::apollo::prediction::MaxPool1dParameter* maxpool1d);
  private:
  const ::apollo::prediction::MaxPool1dParameter& _internal_maxpool1d() const;
  ::apollo::prediction::MaxPool1dParameter* _internal_mutable_maxpool1d();
  public:

  // optional .apollo.prediction.AvgPool1dParameter avgpool1d = 13;
  bool has_avgpool1d() const;
  private:
  bool _internal_has_avgpool1d() const;
  public:
  void clear_avgpool1d();
  const ::apollo::prediction::AvgPool1dParameter& avgpool1d() const;
  ::apollo::prediction::AvgPool1dParameter* release_avgpool1d();
  ::apollo::prediction::AvgPool1dParameter* mutable_avgpool1d();
  void set_allocated_avgpool1d(::apollo::prediction::AvgPool1dParameter* avgpool1d);
  private:
  const ::apollo::prediction::AvgPool1dParameter& _internal_avgpool1d() const;
  ::apollo::prediction::AvgPool1dParameter* _internal_mutable_avgpool1d();
  public:

  void clear_oneof_layers();
  OneofLayersCase oneof_layers_case() const;
  // @@protoc_insertion_point(class_scope:apollo.prediction.LayerParameter)
 private:
  class _Internal;
  void set_has_input();
  void set_has_activation();
  void set_has_dense();
  void set_has_batch_normalization();
  void set_has_lstm();
  void set_has_flatten();
  void set_has_concatenate();
  void set_has_conv1d();
  void set_has_maxpool1d();
  void set_has_avgpool1d();

  inline bool has_oneof_layers() const;
  inline void clear_has_oneof_layers();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_number_;
  union OneofLayersUnion {
    OneofLayersUnion() {}
    ::apollo::prediction::InputParameter* input_;
    ::apollo::prediction::ActivationParameter* activation_;
    ::apollo::prediction::DenseParameter* dense_;
    ::apollo::prediction::BatchNormalizationParameter* batch_normalization_;
    ::apollo::prediction::LSTMParameter* lstm_;
    ::apollo::prediction::FlattenParameter* flatten_;
    ::apollo::prediction::ConcatenateParameter* concatenate_;
    ::apollo::prediction::Conv1dParameter* conv1d_;
    ::apollo::prediction::MaxPool1dParameter* maxpool1d_;
    ::apollo::prediction::AvgPool1dParameter* avgpool1d_;
  } oneof_layers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorParameter

// repeated float data = 1 [packed = true];
inline int TensorParameter::_internal_data_size() const {
  return data_.size();
}
inline int TensorParameter::data_size() const {
  return _internal_data_size();
}
inline void TensorParameter::clear_data() {
  data_.Clear();
}
inline float TensorParameter::_internal_data(int index) const {
  return data_.Get(index);
}
inline float TensorParameter::data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TensorParameter.data)
  return _internal_data(index);
}
inline void TensorParameter::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TensorParameter.data)
}
inline void TensorParameter::_internal_add_data(float value) {
  data_.Add(value);
}
inline void TensorParameter::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.TensorParameter.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorParameter::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorParameter::data() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.TensorParameter.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorParameter::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorParameter::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.TensorParameter.data)
  return _internal_mutable_data();
}

// repeated int32 shape = 2;
inline int TensorParameter::_internal_shape_size() const {
  return shape_.size();
}
inline int TensorParameter::shape_size() const {
  return _internal_shape_size();
}
inline void TensorParameter::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorParameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TensorParameter.shape)
  return _internal_shape(index);
}
inline void TensorParameter::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TensorParameter.shape)
}
inline void TensorParameter::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void TensorParameter::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.TensorParameter.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorParameter::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorParameter::shape() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.TensorParameter.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorParameter::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.TensorParameter.shape)
  return _internal_mutable_shape();
}

// -------------------------------------------------------------------

// InputParameter

// repeated int32 input_shape = 1;
inline int InputParameter::_internal_input_shape_size() const {
  return input_shape_.size();
}
inline int InputParameter::input_shape_size() const {
  return _internal_input_shape_size();
}
inline void InputParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputParameter::_internal_input_shape(int index) const {
  return input_shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.InputParameter.input_shape)
  return _internal_input_shape(index);
}
inline void InputParameter::set_input_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.InputParameter.input_shape)
}
inline void InputParameter::_internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_shape_.Add(value);
}
inline void InputParameter::add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_input_shape(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.InputParameter.input_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputParameter::_internal_input_shape() const {
  return input_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.InputParameter.input_shape)
  return _internal_input_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputParameter::_internal_mutable_input_shape() {
  return &input_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.InputParameter.input_shape)
  return _internal_mutable_input_shape();
}

// optional string dtype = 2;
inline bool InputParameter::_internal_has_dtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputParameter::has_dtype() const {
  return _internal_has_dtype();
}
inline void InputParameter::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputParameter::dtype() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.InputParameter.dtype)
  return _internal_dtype();
}
inline void InputParameter::set_dtype(const std::string& value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.InputParameter.dtype)
}
inline std::string* InputParameter::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.InputParameter.dtype)
  return _internal_mutable_dtype();
}
inline const std::string& InputParameter::_internal_dtype() const {
  return dtype_.GetNoArena();
}
inline void InputParameter::_internal_set_dtype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputParameter::set_dtype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.InputParameter.dtype)
}
inline void InputParameter::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.InputParameter.dtype)
}
inline void InputParameter::set_dtype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.InputParameter.dtype)
}
inline std::string* InputParameter::_internal_mutable_dtype() {
  _has_bits_[0] |= 0x00000001u;
  return dtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputParameter::release_dtype() {
  // @@protoc_insertion_point(field_release:apollo.prediction.InputParameter.dtype)
  if (!_internal_has_dtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dtype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputParameter::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.InputParameter.dtype)
}

// optional bool sparse = 3;
inline bool InputParameter::_internal_has_sparse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InputParameter::has_sparse() const {
  return _internal_has_sparse();
}
inline void InputParameter::clear_sparse() {
  sparse_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool InputParameter::_internal_sparse() const {
  return sparse_;
}
inline bool InputParameter::sparse() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.InputParameter.sparse)
  return _internal_sparse();
}
inline void InputParameter::_internal_set_sparse(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sparse_ = value;
}
inline void InputParameter::set_sparse(bool value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.InputParameter.sparse)
}

// -------------------------------------------------------------------

// DenseParameter

// optional int32 units = 1;
inline bool DenseParameter::_internal_has_units() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DenseParameter::has_units() const {
  return _internal_has_units();
}
inline void DenseParameter::clear_units() {
  units_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DenseParameter::_internal_units() const {
  return units_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DenseParameter::units() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.DenseParameter.units)
  return _internal_units();
}
inline void DenseParameter::_internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  units_ = value;
}
inline void DenseParameter::set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.DenseParameter.units)
}

// optional string activation = 2;
inline bool DenseParameter::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DenseParameter::has_activation() const {
  return _internal_has_activation();
}
inline void DenseParameter::clear_activation() {
  activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DenseParameter::activation() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.DenseParameter.activation)
  return _internal_activation();
}
inline void DenseParameter::set_activation(const std::string& value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.DenseParameter.activation)
}
inline std::string* DenseParameter::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.DenseParameter.activation)
  return _internal_mutable_activation();
}
inline const std::string& DenseParameter::_internal_activation() const {
  return activation_.GetNoArena();
}
inline void DenseParameter::_internal_set_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DenseParameter::set_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.DenseParameter.activation)
}
inline void DenseParameter::set_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.DenseParameter.activation)
}
inline void DenseParameter::set_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.DenseParameter.activation)
}
inline std::string* DenseParameter::_internal_mutable_activation() {
  _has_bits_[0] |= 0x00000001u;
  return activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DenseParameter::release_activation() {
  // @@protoc_insertion_point(field_release:apollo.prediction.DenseParameter.activation)
  if (!_internal_has_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DenseParameter::set_allocated_activation(std::string* activation) {
  if (activation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.DenseParameter.activation)
}

// optional bool use_bias = 3;
inline bool DenseParameter::_internal_has_use_bias() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DenseParameter::has_use_bias() const {
  return _internal_has_use_bias();
}
inline void DenseParameter::clear_use_bias() {
  use_bias_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DenseParameter::_internal_use_bias() const {
  return use_bias_;
}
inline bool DenseParameter::use_bias() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.DenseParameter.use_bias)
  return _internal_use_bias();
}
inline void DenseParameter::_internal_set_use_bias(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_bias_ = value;
}
inline void DenseParameter::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.DenseParameter.use_bias)
}

// optional .apollo.prediction.TensorParameter weights = 4;
inline bool DenseParameter::_internal_has_weights() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || weights_ != nullptr);
  return value;
}
inline bool DenseParameter::has_weights() const {
  return _internal_has_weights();
}
inline void DenseParameter::clear_weights() {
  if (weights_ != nullptr) weights_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::TensorParameter& DenseParameter::_internal_weights() const {
  const ::apollo::prediction::TensorParameter* p = weights_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& DenseParameter::weights() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.DenseParameter.weights)
  return _internal_weights();
}
inline ::apollo::prediction::TensorParameter* DenseParameter::release_weights() {
  // @@protoc_insertion_point(field_release:apollo.prediction.DenseParameter.weights)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::TensorParameter* temp = weights_;
  weights_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* DenseParameter::_internal_mutable_weights() {
  _has_bits_[0] |= 0x00000002u;
  if (weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    weights_ = p;
  }
  return weights_;
}
inline ::apollo::prediction::TensorParameter* DenseParameter::mutable_weights() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.DenseParameter.weights)
  return _internal_mutable_weights();
}
inline void DenseParameter::set_allocated_weights(::apollo::prediction::TensorParameter* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weights_;
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.DenseParameter.weights)
}

// optional .apollo.prediction.TensorParameter bias = 5;
inline bool DenseParameter::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool DenseParameter::has_bias() const {
  return _internal_has_bias();
}
inline void DenseParameter::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::prediction::TensorParameter& DenseParameter::_internal_bias() const {
  const ::apollo::prediction::TensorParameter* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& DenseParameter::bias() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.DenseParameter.bias)
  return _internal_bias();
}
inline ::apollo::prediction::TensorParameter* DenseParameter::release_bias() {
  // @@protoc_insertion_point(field_release:apollo.prediction.DenseParameter.bias)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::TensorParameter* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* DenseParameter::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000004u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::apollo::prediction::TensorParameter* DenseParameter::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.DenseParameter.bias)
  return _internal_mutable_bias();
}
inline void DenseParameter::set_allocated_bias(::apollo::prediction::TensorParameter* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.DenseParameter.bias)
}

// -------------------------------------------------------------------

// Conv1dParameter

// repeated int32 shape = 1;
inline int Conv1dParameter::_internal_shape_size() const {
  return shape_.size();
}
inline int Conv1dParameter::shape_size() const {
  return _internal_shape_size();
}
inline void Conv1dParameter::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Conv1dParameter.shape)
  return _internal_shape(index);
}
inline void Conv1dParameter::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Conv1dParameter.shape)
}
inline void Conv1dParameter::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void Conv1dParameter::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.Conv1dParameter.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Conv1dParameter::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Conv1dParameter::shape() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Conv1dParameter.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Conv1dParameter::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Conv1dParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Conv1dParameter.shape)
  return _internal_mutable_shape();
}

// optional bool use_bias = 2;
inline bool Conv1dParameter::_internal_has_use_bias() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Conv1dParameter::has_use_bias() const {
  return _internal_has_use_bias();
}
inline void Conv1dParameter::clear_use_bias() {
  use_bias_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Conv1dParameter::_internal_use_bias() const {
  return use_bias_;
}
inline bool Conv1dParameter::use_bias() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Conv1dParameter.use_bias)
  return _internal_use_bias();
}
inline void Conv1dParameter::_internal_set_use_bias(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_bias_ = value;
}
inline void Conv1dParameter::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Conv1dParameter.use_bias)
}

// optional .apollo.prediction.TensorParameter kernel = 3;
inline bool Conv1dParameter::_internal_has_kernel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || kernel_ != nullptr);
  return value;
}
inline bool Conv1dParameter::has_kernel() const {
  return _internal_has_kernel();
}
inline void Conv1dParameter::clear_kernel() {
  if (kernel_ != nullptr) kernel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::TensorParameter& Conv1dParameter::_internal_kernel() const {
  const ::apollo::prediction::TensorParameter* p = kernel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& Conv1dParameter::kernel() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Conv1dParameter.kernel)
  return _internal_kernel();
}
inline ::apollo::prediction::TensorParameter* Conv1dParameter::release_kernel() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Conv1dParameter.kernel)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::TensorParameter* temp = kernel_;
  kernel_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* Conv1dParameter::_internal_mutable_kernel() {
  _has_bits_[0] |= 0x00000001u;
  if (kernel_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    kernel_ = p;
  }
  return kernel_;
}
inline ::apollo::prediction::TensorParameter* Conv1dParameter::mutable_kernel() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Conv1dParameter.kernel)
  return _internal_mutable_kernel();
}
inline void Conv1dParameter::set_allocated_kernel(::apollo::prediction::TensorParameter* kernel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kernel_;
  }
  if (kernel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kernel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kernel_ = kernel;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Conv1dParameter.kernel)
}

// optional .apollo.prediction.TensorParameter bias = 4;
inline bool Conv1dParameter::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool Conv1dParameter::has_bias() const {
  return _internal_has_bias();
}
inline void Conv1dParameter::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::TensorParameter& Conv1dParameter::_internal_bias() const {
  const ::apollo::prediction::TensorParameter* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& Conv1dParameter::bias() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Conv1dParameter.bias)
  return _internal_bias();
}
inline ::apollo::prediction::TensorParameter* Conv1dParameter::release_bias() {
  // @@protoc_insertion_point(field_release:apollo.prediction.Conv1dParameter.bias)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::TensorParameter* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* Conv1dParameter::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::apollo::prediction::TensorParameter* Conv1dParameter::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.Conv1dParameter.bias)
  return _internal_mutable_bias();
}
inline void Conv1dParameter::set_allocated_bias(::apollo::prediction::TensorParameter* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.Conv1dParameter.bias)
}

// optional int32 stride = 5;
inline bool Conv1dParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Conv1dParameter::has_stride() const {
  return _internal_has_stride();
}
inline void Conv1dParameter::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Conv1dParameter.stride)
  return _internal_stride();
}
inline void Conv1dParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  stride_ = value;
}
inline void Conv1dParameter::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Conv1dParameter.stride)
}

// -------------------------------------------------------------------

// MaxPool1dParameter

// optional int32 kernel_size = 1;
inline bool MaxPool1dParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MaxPool1dParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void MaxPool1dParameter::clear_kernel_size() {
  kernel_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.MaxPool1dParameter.kernel_size)
  return _internal_kernel_size();
}
inline void MaxPool1dParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  kernel_size_ = value;
}
inline void MaxPool1dParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.MaxPool1dParameter.kernel_size)
}

// optional int32 stride = 2;
inline bool MaxPool1dParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MaxPool1dParameter::has_stride() const {
  return _internal_has_stride();
}
inline void MaxPool1dParameter::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.MaxPool1dParameter.stride)
  return _internal_stride();
}
inline void MaxPool1dParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  stride_ = value;
}
inline void MaxPool1dParameter::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.MaxPool1dParameter.stride)
}

// -------------------------------------------------------------------

// AvgPool1dParameter

// optional int32 kernel_size = 1;
inline bool AvgPool1dParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AvgPool1dParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void AvgPool1dParameter::clear_kernel_size() {
  kernel_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.AvgPool1dParameter.kernel_size)
  return _internal_kernel_size();
}
inline void AvgPool1dParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  kernel_size_ = value;
}
inline void AvgPool1dParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.AvgPool1dParameter.kernel_size)
}

// optional int32 stride = 2;
inline bool AvgPool1dParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AvgPool1dParameter::has_stride() const {
  return _internal_has_stride();
}
inline void AvgPool1dParameter::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::stride() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.AvgPool1dParameter.stride)
  return _internal_stride();
}
inline void AvgPool1dParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  stride_ = value;
}
inline void AvgPool1dParameter::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.AvgPool1dParameter.stride)
}

// -------------------------------------------------------------------

// BatchNormalizationParameter

// optional double epsilon = 1 [default = 1e-05];
inline bool BatchNormalizationParameter::_internal_has_epsilon() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BatchNormalizationParameter::has_epsilon() const {
  return _internal_has_epsilon();
}
inline void BatchNormalizationParameter::clear_epsilon() {
  epsilon_ = 1e-05;
  _has_bits_[0] &= ~0x00000100u;
}
inline double BatchNormalizationParameter::_internal_epsilon() const {
  return epsilon_;
}
inline double BatchNormalizationParameter::epsilon() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.epsilon)
  return _internal_epsilon();
}
inline void BatchNormalizationParameter::_internal_set_epsilon(double value) {
  _has_bits_[0] |= 0x00000100u;
  epsilon_ = value;
}
inline void BatchNormalizationParameter::set_epsilon(double value) {
  _internal_set_epsilon(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.BatchNormalizationParameter.epsilon)
}

// optional int32 axis = 2;
inline bool BatchNormalizationParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BatchNormalizationParameter::has_axis() const {
  return _internal_has_axis();
}
inline void BatchNormalizationParameter::clear_axis() {
  axis_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatchNormalizationParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatchNormalizationParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.axis)
  return _internal_axis();
}
inline void BatchNormalizationParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  axis_ = value;
}
inline void BatchNormalizationParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.BatchNormalizationParameter.axis)
}

// optional bool center = 3;
inline bool BatchNormalizationParameter::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BatchNormalizationParameter::has_center() const {
  return _internal_has_center();
}
inline void BatchNormalizationParameter::clear_center() {
  center_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BatchNormalizationParameter::_internal_center() const {
  return center_;
}
inline bool BatchNormalizationParameter::center() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.center)
  return _internal_center();
}
inline void BatchNormalizationParameter::_internal_set_center(bool value) {
  _has_bits_[0] |= 0x00000020u;
  center_ = value;
}
inline void BatchNormalizationParameter::set_center(bool value) {
  _internal_set_center(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.BatchNormalizationParameter.center)
}

// optional bool scale = 4;
inline bool BatchNormalizationParameter::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BatchNormalizationParameter::has_scale() const {
  return _internal_has_scale();
}
inline void BatchNormalizationParameter::clear_scale() {
  scale_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BatchNormalizationParameter::_internal_scale() const {
  return scale_;
}
inline bool BatchNormalizationParameter::scale() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.scale)
  return _internal_scale();
}
inline void BatchNormalizationParameter::_internal_set_scale(bool value) {
  _has_bits_[0] |= 0x00000040u;
  scale_ = value;
}
inline void BatchNormalizationParameter::set_scale(bool value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.BatchNormalizationParameter.scale)
}

// optional float momentum = 5;
inline bool BatchNormalizationParameter::_internal_has_momentum() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BatchNormalizationParameter::has_momentum() const {
  return _internal_has_momentum();
}
inline void BatchNormalizationParameter::clear_momentum() {
  momentum_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float BatchNormalizationParameter::_internal_momentum() const {
  return momentum_;
}
inline float BatchNormalizationParameter::momentum() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.momentum)
  return _internal_momentum();
}
inline void BatchNormalizationParameter::_internal_set_momentum(float value) {
  _has_bits_[0] |= 0x00000080u;
  momentum_ = value;
}
inline void BatchNormalizationParameter::set_momentum(float value) {
  _internal_set_momentum(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.BatchNormalizationParameter.momentum)
}

// optional .apollo.prediction.TensorParameter mu = 6;
inline bool BatchNormalizationParameter::_internal_has_mu() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mu_ != nullptr);
  return value;
}
inline bool BatchNormalizationParameter::has_mu() const {
  return _internal_has_mu();
}
inline void BatchNormalizationParameter::clear_mu() {
  if (mu_ != nullptr) mu_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::_internal_mu() const {
  const ::apollo::prediction::TensorParameter* p = mu_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::mu() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.mu)
  return _internal_mu();
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::release_mu() {
  // @@protoc_insertion_point(field_release:apollo.prediction.BatchNormalizationParameter.mu)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::prediction::TensorParameter* temp = mu_;
  mu_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::_internal_mutable_mu() {
  _has_bits_[0] |= 0x00000001u;
  if (mu_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    mu_ = p;
  }
  return mu_;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::mutable_mu() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.BatchNormalizationParameter.mu)
  return _internal_mutable_mu();
}
inline void BatchNormalizationParameter::set_allocated_mu(::apollo::prediction::TensorParameter* mu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mu_;
  }
  if (mu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mu_ = mu;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.BatchNormalizationParameter.mu)
}

// optional .apollo.prediction.TensorParameter sigma = 7;
inline bool BatchNormalizationParameter::_internal_has_sigma() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sigma_ != nullptr);
  return value;
}
inline bool BatchNormalizationParameter::has_sigma() const {
  return _internal_has_sigma();
}
inline void BatchNormalizationParameter::clear_sigma() {
  if (sigma_ != nullptr) sigma_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::_internal_sigma() const {
  const ::apollo::prediction::TensorParameter* p = sigma_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::sigma() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.sigma)
  return _internal_sigma();
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::release_sigma() {
  // @@protoc_insertion_point(field_release:apollo.prediction.BatchNormalizationParameter.sigma)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::TensorParameter* temp = sigma_;
  sigma_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::_internal_mutable_sigma() {
  _has_bits_[0] |= 0x00000002u;
  if (sigma_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    sigma_ = p;
  }
  return sigma_;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::mutable_sigma() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.BatchNormalizationParameter.sigma)
  return _internal_mutable_sigma();
}
inline void BatchNormalizationParameter::set_allocated_sigma(::apollo::prediction::TensorParameter* sigma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sigma_;
  }
  if (sigma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sigma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigma, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sigma_ = sigma;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.BatchNormalizationParameter.sigma)
}

// optional .apollo.prediction.TensorParameter gamma = 8;
inline bool BatchNormalizationParameter::_internal_has_gamma() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || gamma_ != nullptr);
  return value;
}
inline bool BatchNormalizationParameter::has_gamma() const {
  return _internal_has_gamma();
}
inline void BatchNormalizationParameter::clear_gamma() {
  if (gamma_ != nullptr) gamma_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::_internal_gamma() const {
  const ::apollo::prediction::TensorParameter* p = gamma_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::gamma() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.gamma)
  return _internal_gamma();
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::release_gamma() {
  // @@protoc_insertion_point(field_release:apollo.prediction.BatchNormalizationParameter.gamma)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::TensorParameter* temp = gamma_;
  gamma_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::_internal_mutable_gamma() {
  _has_bits_[0] |= 0x00000004u;
  if (gamma_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    gamma_ = p;
  }
  return gamma_;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::mutable_gamma() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.BatchNormalizationParameter.gamma)
  return _internal_mutable_gamma();
}
inline void BatchNormalizationParameter::set_allocated_gamma(::apollo::prediction::TensorParameter* gamma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gamma_;
  }
  if (gamma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gamma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamma, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gamma_ = gamma;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.BatchNormalizationParameter.gamma)
}

// optional .apollo.prediction.TensorParameter beta = 9;
inline bool BatchNormalizationParameter::_internal_has_beta() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || beta_ != nullptr);
  return value;
}
inline bool BatchNormalizationParameter::has_beta() const {
  return _internal_has_beta();
}
inline void BatchNormalizationParameter::clear_beta() {
  if (beta_ != nullptr) beta_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::_internal_beta() const {
  const ::apollo::prediction::TensorParameter* p = beta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& BatchNormalizationParameter::beta() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.BatchNormalizationParameter.beta)
  return _internal_beta();
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::release_beta() {
  // @@protoc_insertion_point(field_release:apollo.prediction.BatchNormalizationParameter.beta)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::TensorParameter* temp = beta_;
  beta_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::_internal_mutable_beta() {
  _has_bits_[0] |= 0x00000008u;
  if (beta_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    beta_ = p;
  }
  return beta_;
}
inline ::apollo::prediction::TensorParameter* BatchNormalizationParameter::mutable_beta() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.BatchNormalizationParameter.beta)
  return _internal_mutable_beta();
}
inline void BatchNormalizationParameter::set_allocated_beta(::apollo::prediction::TensorParameter* beta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete beta_;
  }
  if (beta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      beta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  beta_ = beta;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.BatchNormalizationParameter.beta)
}

// -------------------------------------------------------------------

// LSTMParameter

// optional int32 units = 1;
inline bool LSTMParameter::_internal_has_units() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LSTMParameter::has_units() const {
  return _internal_has_units();
}
inline void LSTMParameter::clear_units() {
  units_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LSTMParameter::_internal_units() const {
  return units_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LSTMParameter::units() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.units)
  return _internal_units();
}
inline void LSTMParameter::_internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  units_ = value;
}
inline void LSTMParameter::set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.units)
}

// optional bool return_sequences = 2;
inline bool LSTMParameter::_internal_has_return_sequences() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LSTMParameter::has_return_sequences() const {
  return _internal_has_return_sequences();
}
inline void LSTMParameter::clear_return_sequences() {
  return_sequences_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool LSTMParameter::_internal_return_sequences() const {
  return return_sequences_;
}
inline bool LSTMParameter::return_sequences() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.return_sequences)
  return _internal_return_sequences();
}
inline void LSTMParameter::_internal_set_return_sequences(bool value) {
  _has_bits_[0] |= 0x00008000u;
  return_sequences_ = value;
}
inline void LSTMParameter::set_return_sequences(bool value) {
  _internal_set_return_sequences(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.return_sequences)
}

// optional bool stateful = 3;
inline bool LSTMParameter::_internal_has_stateful() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LSTMParameter::has_stateful() const {
  return _internal_has_stateful();
}
inline void LSTMParameter::clear_stateful() {
  stateful_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool LSTMParameter::_internal_stateful() const {
  return stateful_;
}
inline bool LSTMParameter::stateful() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.stateful)
  return _internal_stateful();
}
inline void LSTMParameter::_internal_set_stateful(bool value) {
  _has_bits_[0] |= 0x00010000u;
  stateful_ = value;
}
inline void LSTMParameter::set_stateful(bool value) {
  _internal_set_stateful(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.stateful)
}

// optional string activation = 4;
inline bool LSTMParameter::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LSTMParameter::has_activation() const {
  return _internal_has_activation();
}
inline void LSTMParameter::clear_activation() {
  activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LSTMParameter::activation() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.activation)
  return _internal_activation();
}
inline void LSTMParameter::set_activation(const std::string& value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.activation)
}
inline std::string* LSTMParameter::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.activation)
  return _internal_mutable_activation();
}
inline const std::string& LSTMParameter::_internal_activation() const {
  return activation_.GetNoArena();
}
inline void LSTMParameter::_internal_set_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LSTMParameter::set_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LSTMParameter.activation)
}
inline void LSTMParameter::set_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LSTMParameter.activation)
}
inline void LSTMParameter::set_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LSTMParameter.activation)
}
inline std::string* LSTMParameter::_internal_mutable_activation() {
  _has_bits_[0] |= 0x00000001u;
  return activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LSTMParameter::release_activation() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.activation)
  if (!_internal_has_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LSTMParameter::set_allocated_activation(std::string* activation) {
  if (activation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.activation)
}

// optional string recurrent_activation = 5;
inline bool LSTMParameter::_internal_has_recurrent_activation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LSTMParameter::has_recurrent_activation() const {
  return _internal_has_recurrent_activation();
}
inline void LSTMParameter::clear_recurrent_activation() {
  recurrent_activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LSTMParameter::recurrent_activation() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.recurrent_activation)
  return _internal_recurrent_activation();
}
inline void LSTMParameter::set_recurrent_activation(const std::string& value) {
  _internal_set_recurrent_activation(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.recurrent_activation)
}
inline std::string* LSTMParameter::mutable_recurrent_activation() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.recurrent_activation)
  return _internal_mutable_recurrent_activation();
}
inline const std::string& LSTMParameter::_internal_recurrent_activation() const {
  return recurrent_activation_.GetNoArena();
}
inline void LSTMParameter::_internal_set_recurrent_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  recurrent_activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LSTMParameter::set_recurrent_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  recurrent_activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LSTMParameter.recurrent_activation)
}
inline void LSTMParameter::set_recurrent_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  recurrent_activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LSTMParameter.recurrent_activation)
}
inline void LSTMParameter::set_recurrent_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  recurrent_activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LSTMParameter.recurrent_activation)
}
inline std::string* LSTMParameter::_internal_mutable_recurrent_activation() {
  _has_bits_[0] |= 0x00000002u;
  return recurrent_activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LSTMParameter::release_recurrent_activation() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.recurrent_activation)
  if (!_internal_has_recurrent_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return recurrent_activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LSTMParameter::set_allocated_recurrent_activation(std::string* recurrent_activation) {
  if (recurrent_activation != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  recurrent_activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recurrent_activation);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.recurrent_activation)
}

// optional bool use_bias = 6;
inline bool LSTMParameter::_internal_has_use_bias() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LSTMParameter::has_use_bias() const {
  return _internal_has_use_bias();
}
inline void LSTMParameter::clear_use_bias() {
  use_bias_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool LSTMParameter::_internal_use_bias() const {
  return use_bias_;
}
inline bool LSTMParameter::use_bias() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.use_bias)
  return _internal_use_bias();
}
inline void LSTMParameter::_internal_set_use_bias(bool value) {
  _has_bits_[0] |= 0x00020000u;
  use_bias_ = value;
}
inline void LSTMParameter::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.use_bias)
}

// optional bool unit_forget_bias = 7 [default = true];
inline bool LSTMParameter::_internal_has_unit_forget_bias() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool LSTMParameter::has_unit_forget_bias() const {
  return _internal_has_unit_forget_bias();
}
inline void LSTMParameter::clear_unit_forget_bias() {
  unit_forget_bias_ = true;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool LSTMParameter::_internal_unit_forget_bias() const {
  return unit_forget_bias_;
}
inline bool LSTMParameter::unit_forget_bias() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.unit_forget_bias)
  return _internal_unit_forget_bias();
}
inline void LSTMParameter::_internal_set_unit_forget_bias(bool value) {
  _has_bits_[0] |= 0x00200000u;
  unit_forget_bias_ = value;
}
inline void LSTMParameter::set_unit_forget_bias(bool value) {
  _internal_set_unit_forget_bias(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.unit_forget_bias)
}

// optional bool go_backwards = 8 [default = false];
inline bool LSTMParameter::_internal_has_go_backwards() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LSTMParameter::has_go_backwards() const {
  return _internal_has_go_backwards();
}
inline void LSTMParameter::clear_go_backwards() {
  go_backwards_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool LSTMParameter::_internal_go_backwards() const {
  return go_backwards_;
}
inline bool LSTMParameter::go_backwards() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.go_backwards)
  return _internal_go_backwards();
}
inline void LSTMParameter::_internal_set_go_backwards(bool value) {
  _has_bits_[0] |= 0x00040000u;
  go_backwards_ = value;
}
inline void LSTMParameter::set_go_backwards(bool value) {
  _internal_set_go_backwards(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.go_backwards)
}

// optional bool unroll = 9 [default = false];
inline bool LSTMParameter::_internal_has_unroll() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LSTMParameter::has_unroll() const {
  return _internal_has_unroll();
}
inline void LSTMParameter::clear_unroll() {
  unroll_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool LSTMParameter::_internal_unroll() const {
  return unroll_;
}
inline bool LSTMParameter::unroll() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.unroll)
  return _internal_unroll();
}
inline void LSTMParameter::_internal_set_unroll(bool value) {
  _has_bits_[0] |= 0x00080000u;
  unroll_ = value;
}
inline void LSTMParameter::set_unroll(bool value) {
  _internal_set_unroll(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.unroll)
}

// optional int32 implementation = 10 [default = 0];
inline bool LSTMParameter::_internal_has_implementation() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool LSTMParameter::has_implementation() const {
  return _internal_has_implementation();
}
inline void LSTMParameter::clear_implementation() {
  implementation_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LSTMParameter::_internal_implementation() const {
  return implementation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LSTMParameter::implementation() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.implementation)
  return _internal_implementation();
}
inline void LSTMParameter::_internal_set_implementation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  implementation_ = value;
}
inline void LSTMParameter::set_implementation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_implementation(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LSTMParameter.implementation)
}

// optional .apollo.prediction.TensorParameter weights_input = 15;
inline bool LSTMParameter::_internal_has_weights_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || weights_input_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_weights_input() const {
  return _internal_has_weights_input();
}
inline void LSTMParameter::clear_weights_input() {
  if (weights_input_ != nullptr) weights_input_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_weights_input() const {
  const ::apollo::prediction::TensorParameter* p = weights_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::weights_input() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.weights_input)
  return _internal_weights_input();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_weights_input() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.weights_input)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::TensorParameter* temp = weights_input_;
  weights_input_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_weights_input() {
  _has_bits_[0] |= 0x00000004u;
  if (weights_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    weights_input_ = p;
  }
  return weights_input_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_weights_input() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.weights_input)
  return _internal_mutable_weights_input();
}
inline void LSTMParameter::set_allocated_weights_input(::apollo::prediction::TensorParameter* weights_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weights_input_;
  }
  if (weights_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weights_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights_input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  weights_input_ = weights_input;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.weights_input)
}

// optional .apollo.prediction.TensorParameter weights_forget = 16;
inline bool LSTMParameter::_internal_has_weights_forget() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || weights_forget_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_weights_forget() const {
  return _internal_has_weights_forget();
}
inline void LSTMParameter::clear_weights_forget() {
  if (weights_forget_ != nullptr) weights_forget_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_weights_forget() const {
  const ::apollo::prediction::TensorParameter* p = weights_forget_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::weights_forget() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.weights_forget)
  return _internal_weights_forget();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_weights_forget() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.weights_forget)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::prediction::TensorParameter* temp = weights_forget_;
  weights_forget_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_weights_forget() {
  _has_bits_[0] |= 0x00000008u;
  if (weights_forget_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    weights_forget_ = p;
  }
  return weights_forget_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_weights_forget() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.weights_forget)
  return _internal_mutable_weights_forget();
}
inline void LSTMParameter::set_allocated_weights_forget(::apollo::prediction::TensorParameter* weights_forget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weights_forget_;
  }
  if (weights_forget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weights_forget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights_forget, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  weights_forget_ = weights_forget;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.weights_forget)
}

// optional .apollo.prediction.TensorParameter weights_cell = 17;
inline bool LSTMParameter::_internal_has_weights_cell() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || weights_cell_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_weights_cell() const {
  return _internal_has_weights_cell();
}
inline void LSTMParameter::clear_weights_cell() {
  if (weights_cell_ != nullptr) weights_cell_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_weights_cell() const {
  const ::apollo::prediction::TensorParameter* p = weights_cell_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::weights_cell() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.weights_cell)
  return _internal_weights_cell();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_weights_cell() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.weights_cell)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::prediction::TensorParameter* temp = weights_cell_;
  weights_cell_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_weights_cell() {
  _has_bits_[0] |= 0x00000010u;
  if (weights_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    weights_cell_ = p;
  }
  return weights_cell_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_weights_cell() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.weights_cell)
  return _internal_mutable_weights_cell();
}
inline void LSTMParameter::set_allocated_weights_cell(::apollo::prediction::TensorParameter* weights_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weights_cell_;
  }
  if (weights_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weights_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights_cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  weights_cell_ = weights_cell;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.weights_cell)
}

// optional .apollo.prediction.TensorParameter weights_output = 18;
inline bool LSTMParameter::_internal_has_weights_output() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || weights_output_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_weights_output() const {
  return _internal_has_weights_output();
}
inline void LSTMParameter::clear_weights_output() {
  if (weights_output_ != nullptr) weights_output_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_weights_output() const {
  const ::apollo::prediction::TensorParameter* p = weights_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::weights_output() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.weights_output)
  return _internal_weights_output();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_weights_output() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.weights_output)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::prediction::TensorParameter* temp = weights_output_;
  weights_output_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_weights_output() {
  _has_bits_[0] |= 0x00000020u;
  if (weights_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    weights_output_ = p;
  }
  return weights_output_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_weights_output() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.weights_output)
  return _internal_mutable_weights_output();
}
inline void LSTMParameter::set_allocated_weights_output(::apollo::prediction::TensorParameter* weights_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weights_output_;
  }
  if (weights_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weights_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  weights_output_ = weights_output;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.weights_output)
}

// optional .apollo.prediction.TensorParameter bias_input = 19;
inline bool LSTMParameter::_internal_has_bias_input() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || bias_input_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_bias_input() const {
  return _internal_has_bias_input();
}
inline void LSTMParameter::clear_bias_input() {
  if (bias_input_ != nullptr) bias_input_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_bias_input() const {
  const ::apollo::prediction::TensorParameter* p = bias_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::bias_input() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.bias_input)
  return _internal_bias_input();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_bias_input() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.bias_input)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::prediction::TensorParameter* temp = bias_input_;
  bias_input_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_bias_input() {
  _has_bits_[0] |= 0x00000040u;
  if (bias_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    bias_input_ = p;
  }
  return bias_input_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_bias_input() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.bias_input)
  return _internal_mutable_bias_input();
}
inline void LSTMParameter::set_allocated_bias_input(::apollo::prediction::TensorParameter* bias_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_input_;
  }
  if (bias_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bias_input_ = bias_input;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.bias_input)
}

// optional .apollo.prediction.TensorParameter bias_forget = 20;
inline bool LSTMParameter::_internal_has_bias_forget() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || bias_forget_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_bias_forget() const {
  return _internal_has_bias_forget();
}
inline void LSTMParameter::clear_bias_forget() {
  if (bias_forget_ != nullptr) bias_forget_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_bias_forget() const {
  const ::apollo::prediction::TensorParameter* p = bias_forget_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::bias_forget() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.bias_forget)
  return _internal_bias_forget();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_bias_forget() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.bias_forget)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::prediction::TensorParameter* temp = bias_forget_;
  bias_forget_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_bias_forget() {
  _has_bits_[0] |= 0x00000080u;
  if (bias_forget_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    bias_forget_ = p;
  }
  return bias_forget_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_bias_forget() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.bias_forget)
  return _internal_mutable_bias_forget();
}
inline void LSTMParameter::set_allocated_bias_forget(::apollo::prediction::TensorParameter* bias_forget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_forget_;
  }
  if (bias_forget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_forget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_forget, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  bias_forget_ = bias_forget;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.bias_forget)
}

// optional .apollo.prediction.TensorParameter bias_cell = 21;
inline bool LSTMParameter::_internal_has_bias_cell() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || bias_cell_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_bias_cell() const {
  return _internal_has_bias_cell();
}
inline void LSTMParameter::clear_bias_cell() {
  if (bias_cell_ != nullptr) bias_cell_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_bias_cell() const {
  const ::apollo::prediction::TensorParameter* p = bias_cell_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::bias_cell() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.bias_cell)
  return _internal_bias_cell();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_bias_cell() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.bias_cell)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::prediction::TensorParameter* temp = bias_cell_;
  bias_cell_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_bias_cell() {
  _has_bits_[0] |= 0x00000100u;
  if (bias_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    bias_cell_ = p;
  }
  return bias_cell_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_bias_cell() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.bias_cell)
  return _internal_mutable_bias_cell();
}
inline void LSTMParameter::set_allocated_bias_cell(::apollo::prediction::TensorParameter* bias_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_cell_;
  }
  if (bias_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  bias_cell_ = bias_cell;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.bias_cell)
}

// optional .apollo.prediction.TensorParameter bias_output = 22;
inline bool LSTMParameter::_internal_has_bias_output() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || bias_output_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_bias_output() const {
  return _internal_has_bias_output();
}
inline void LSTMParameter::clear_bias_output() {
  if (bias_output_ != nullptr) bias_output_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_bias_output() const {
  const ::apollo::prediction::TensorParameter* p = bias_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::bias_output() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.bias_output)
  return _internal_bias_output();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_bias_output() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.bias_output)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::prediction::TensorParameter* temp = bias_output_;
  bias_output_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_bias_output() {
  _has_bits_[0] |= 0x00000200u;
  if (bias_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    bias_output_ = p;
  }
  return bias_output_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_bias_output() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.bias_output)
  return _internal_mutable_bias_output();
}
inline void LSTMParameter::set_allocated_bias_output(::apollo::prediction::TensorParameter* bias_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_output_;
  }
  if (bias_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  bias_output_ = bias_output;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.bias_output)
}

// optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
inline bool LSTMParameter::_internal_has_recurrent_weights_input() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || recurrent_weights_input_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_recurrent_weights_input() const {
  return _internal_has_recurrent_weights_input();
}
inline void LSTMParameter::clear_recurrent_weights_input() {
  if (recurrent_weights_input_ != nullptr) recurrent_weights_input_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_recurrent_weights_input() const {
  const ::apollo::prediction::TensorParameter* p = recurrent_weights_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::recurrent_weights_input() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.recurrent_weights_input)
  return _internal_recurrent_weights_input();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_recurrent_weights_input() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.recurrent_weights_input)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::prediction::TensorParameter* temp = recurrent_weights_input_;
  recurrent_weights_input_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_recurrent_weights_input() {
  _has_bits_[0] |= 0x00000400u;
  if (recurrent_weights_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    recurrent_weights_input_ = p;
  }
  return recurrent_weights_input_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_recurrent_weights_input() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.recurrent_weights_input)
  return _internal_mutable_recurrent_weights_input();
}
inline void LSTMParameter::set_allocated_recurrent_weights_input(::apollo::prediction::TensorParameter* recurrent_weights_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recurrent_weights_input_;
  }
  if (recurrent_weights_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recurrent_weights_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recurrent_weights_input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  recurrent_weights_input_ = recurrent_weights_input;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.recurrent_weights_input)
}

// optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
inline bool LSTMParameter::_internal_has_recurrent_weights_forget() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || recurrent_weights_forget_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_recurrent_weights_forget() const {
  return _internal_has_recurrent_weights_forget();
}
inline void LSTMParameter::clear_recurrent_weights_forget() {
  if (recurrent_weights_forget_ != nullptr) recurrent_weights_forget_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_recurrent_weights_forget() const {
  const ::apollo::prediction::TensorParameter* p = recurrent_weights_forget_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::recurrent_weights_forget() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.recurrent_weights_forget)
  return _internal_recurrent_weights_forget();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_recurrent_weights_forget() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.recurrent_weights_forget)
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::prediction::TensorParameter* temp = recurrent_weights_forget_;
  recurrent_weights_forget_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_recurrent_weights_forget() {
  _has_bits_[0] |= 0x00000800u;
  if (recurrent_weights_forget_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    recurrent_weights_forget_ = p;
  }
  return recurrent_weights_forget_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_recurrent_weights_forget() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.recurrent_weights_forget)
  return _internal_mutable_recurrent_weights_forget();
}
inline void LSTMParameter::set_allocated_recurrent_weights_forget(::apollo::prediction::TensorParameter* recurrent_weights_forget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recurrent_weights_forget_;
  }
  if (recurrent_weights_forget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recurrent_weights_forget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recurrent_weights_forget, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  recurrent_weights_forget_ = recurrent_weights_forget;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.recurrent_weights_forget)
}

// optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
inline bool LSTMParameter::_internal_has_recurrent_weights_cell() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || recurrent_weights_cell_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_recurrent_weights_cell() const {
  return _internal_has_recurrent_weights_cell();
}
inline void LSTMParameter::clear_recurrent_weights_cell() {
  if (recurrent_weights_cell_ != nullptr) recurrent_weights_cell_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_recurrent_weights_cell() const {
  const ::apollo::prediction::TensorParameter* p = recurrent_weights_cell_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::recurrent_weights_cell() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.recurrent_weights_cell)
  return _internal_recurrent_weights_cell();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_recurrent_weights_cell() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.recurrent_weights_cell)
  _has_bits_[0] &= ~0x00001000u;
  ::apollo::prediction::TensorParameter* temp = recurrent_weights_cell_;
  recurrent_weights_cell_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_recurrent_weights_cell() {
  _has_bits_[0] |= 0x00001000u;
  if (recurrent_weights_cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    recurrent_weights_cell_ = p;
  }
  return recurrent_weights_cell_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_recurrent_weights_cell() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.recurrent_weights_cell)
  return _internal_mutable_recurrent_weights_cell();
}
inline void LSTMParameter::set_allocated_recurrent_weights_cell(::apollo::prediction::TensorParameter* recurrent_weights_cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recurrent_weights_cell_;
  }
  if (recurrent_weights_cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recurrent_weights_cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recurrent_weights_cell, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  recurrent_weights_cell_ = recurrent_weights_cell;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.recurrent_weights_cell)
}

// optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
inline bool LSTMParameter::_internal_has_recurrent_weights_output() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || recurrent_weights_output_ != nullptr);
  return value;
}
inline bool LSTMParameter::has_recurrent_weights_output() const {
  return _internal_has_recurrent_weights_output();
}
inline void LSTMParameter::clear_recurrent_weights_output() {
  if (recurrent_weights_output_ != nullptr) recurrent_weights_output_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::_internal_recurrent_weights_output() const {
  const ::apollo::prediction::TensorParameter* p = recurrent_weights_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::TensorParameter*>(
      &::apollo::prediction::_TensorParameter_default_instance_);
}
inline const ::apollo::prediction::TensorParameter& LSTMParameter::recurrent_weights_output() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LSTMParameter.recurrent_weights_output)
  return _internal_recurrent_weights_output();
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::release_recurrent_weights_output() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LSTMParameter.recurrent_weights_output)
  _has_bits_[0] &= ~0x00002000u;
  ::apollo::prediction::TensorParameter* temp = recurrent_weights_output_;
  recurrent_weights_output_ = nullptr;
  return temp;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::_internal_mutable_recurrent_weights_output() {
  _has_bits_[0] |= 0x00002000u;
  if (recurrent_weights_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TensorParameter>(GetArenaNoVirtual());
    recurrent_weights_output_ = p;
  }
  return recurrent_weights_output_;
}
inline ::apollo::prediction::TensorParameter* LSTMParameter::mutable_recurrent_weights_output() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LSTMParameter.recurrent_weights_output)
  return _internal_mutable_recurrent_weights_output();
}
inline void LSTMParameter::set_allocated_recurrent_weights_output(::apollo::prediction::TensorParameter* recurrent_weights_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete recurrent_weights_output_;
  }
  if (recurrent_weights_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recurrent_weights_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recurrent_weights_output, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  recurrent_weights_output_ = recurrent_weights_output;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LSTMParameter.recurrent_weights_output)
}

// -------------------------------------------------------------------

// ActivationParameter

// optional string activation = 1;
inline bool ActivationParameter::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActivationParameter::has_activation() const {
  return _internal_has_activation();
}
inline void ActivationParameter::clear_activation() {
  activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivationParameter::activation() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ActivationParameter.activation)
  return _internal_activation();
}
inline void ActivationParameter::set_activation(const std::string& value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ActivationParameter.activation)
}
inline std::string* ActivationParameter::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.ActivationParameter.activation)
  return _internal_mutable_activation();
}
inline const std::string& ActivationParameter::_internal_activation() const {
  return activation_.GetNoArena();
}
inline void ActivationParameter::_internal_set_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivationParameter::set_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.ActivationParameter.activation)
}
inline void ActivationParameter::set_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.ActivationParameter.activation)
}
inline void ActivationParameter::set_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.ActivationParameter.activation)
}
inline std::string* ActivationParameter::_internal_mutable_activation() {
  _has_bits_[0] |= 0x00000001u;
  return activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivationParameter::release_activation() {
  // @@protoc_insertion_point(field_release:apollo.prediction.ActivationParameter.activation)
  if (!_internal_has_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivationParameter::set_allocated_activation(std::string* activation) {
  if (activation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.ActivationParameter.activation)
}

// -------------------------------------------------------------------

// FlattenParameter

// -------------------------------------------------------------------

// ConcatenateParameter

// optional int32 axis = 1;
inline bool ConcatenateParameter::_internal_has_axis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConcatenateParameter::has_axis() const {
  return _internal_has_axis();
}
inline void ConcatenateParameter::clear_axis() {
  axis_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConcatenateParameter::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConcatenateParameter::axis() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ConcatenateParameter.axis)
  return _internal_axis();
}
inline void ConcatenateParameter::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  axis_ = value;
}
inline void ConcatenateParameter::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ConcatenateParameter.axis)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string type = 1;
inline bool LayerParameter::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerParameter::has_type() const {
  return _internal_has_type();
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.type)
  return _internal_type();
}
inline void LayerParameter::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LayerParameter.type)
}
inline std::string* LayerParameter::mutable_type() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.type)
  return _internal_mutable_type();
}
inline const std::string& LayerParameter::_internal_type() const {
  return type_.GetNoArena();
}
inline void LayerParameter::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LayerParameter::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LayerParameter.type)
}
inline std::string* LayerParameter::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.type)
}

// optional string name = 2;
inline bool LayerParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerParameter::has_name() const {
  return _internal_has_name();
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.name)
  return _internal_name();
}
inline void LayerParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LayerParameter.name)
}
inline std::string* LayerParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.name)
  return _internal_mutable_name();
}
inline const std::string& LayerParameter::_internal_name() const {
  return name_.GetNoArena();
}
inline void LayerParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LayerParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LayerParameter.name)
}
inline std::string* LayerParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.name)
}

// optional int32 order_number = 3;
inline bool LayerParameter::_internal_has_order_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayerParameter::has_order_number() const {
  return _internal_has_order_number();
}
inline void LayerParameter::clear_order_number() {
  order_number_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerParameter::_internal_order_number() const {
  return order_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayerParameter::order_number() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.order_number)
  return _internal_order_number();
}
inline void LayerParameter::_internal_set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  order_number_ = value;
}
inline void LayerParameter::set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_number(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LayerParameter.order_number)
}

// optional .apollo.prediction.InputParameter input = 4;
inline bool LayerParameter::_internal_has_input() const {
  return oneof_layers_case() == kInput;
}
inline bool LayerParameter::has_input() const {
  return _internal_has_input();
}
inline void LayerParameter::set_has_input() {
  _oneof_case_[0] = kInput;
}
inline void LayerParameter::clear_input() {
  if (_internal_has_input()) {
    delete oneof_layers_.input_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::InputParameter* LayerParameter::release_input() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.input)
  if (_internal_has_input()) {
    clear_has_oneof_layers();
      ::apollo::prediction::InputParameter* temp = oneof_layers_.input_;
    oneof_layers_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::InputParameter& LayerParameter::_internal_input() const {
  return _internal_has_input()
      ? *oneof_layers_.input_
      : *reinterpret_cast< ::apollo::prediction::InputParameter*>(&::apollo::prediction::_InputParameter_default_instance_);
}
inline const ::apollo::prediction::InputParameter& LayerParameter::input() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.input)
  return _internal_input();
}
inline ::apollo::prediction::InputParameter* LayerParameter::_internal_mutable_input() {
  if (!_internal_has_input()) {
    clear_oneof_layers();
    set_has_input();
    oneof_layers_.input_ = CreateMaybeMessage< ::apollo::prediction::InputParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.input_;
}
inline ::apollo::prediction::InputParameter* LayerParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.input)
  return _internal_mutable_input();
}

// optional .apollo.prediction.ActivationParameter activation = 5;
inline bool LayerParameter::_internal_has_activation() const {
  return oneof_layers_case() == kActivation;
}
inline bool LayerParameter::has_activation() const {
  return _internal_has_activation();
}
inline void LayerParameter::set_has_activation() {
  _oneof_case_[0] = kActivation;
}
inline void LayerParameter::clear_activation() {
  if (_internal_has_activation()) {
    delete oneof_layers_.activation_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::ActivationParameter* LayerParameter::release_activation() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.activation)
  if (_internal_has_activation()) {
    clear_has_oneof_layers();
      ::apollo::prediction::ActivationParameter* temp = oneof_layers_.activation_;
    oneof_layers_.activation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::ActivationParameter& LayerParameter::_internal_activation() const {
  return _internal_has_activation()
      ? *oneof_layers_.activation_
      : *reinterpret_cast< ::apollo::prediction::ActivationParameter*>(&::apollo::prediction::_ActivationParameter_default_instance_);
}
inline const ::apollo::prediction::ActivationParameter& LayerParameter::activation() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.activation)
  return _internal_activation();
}
inline ::apollo::prediction::ActivationParameter* LayerParameter::_internal_mutable_activation() {
  if (!_internal_has_activation()) {
    clear_oneof_layers();
    set_has_activation();
    oneof_layers_.activation_ = CreateMaybeMessage< ::apollo::prediction::ActivationParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.activation_;
}
inline ::apollo::prediction::ActivationParameter* LayerParameter::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.activation)
  return _internal_mutable_activation();
}

// optional .apollo.prediction.DenseParameter dense = 6;
inline bool LayerParameter::_internal_has_dense() const {
  return oneof_layers_case() == kDense;
}
inline bool LayerParameter::has_dense() const {
  return _internal_has_dense();
}
inline void LayerParameter::set_has_dense() {
  _oneof_case_[0] = kDense;
}
inline void LayerParameter::clear_dense() {
  if (_internal_has_dense()) {
    delete oneof_layers_.dense_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::DenseParameter* LayerParameter::release_dense() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.dense)
  if (_internal_has_dense()) {
    clear_has_oneof_layers();
      ::apollo::prediction::DenseParameter* temp = oneof_layers_.dense_;
    oneof_layers_.dense_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::DenseParameter& LayerParameter::_internal_dense() const {
  return _internal_has_dense()
      ? *oneof_layers_.dense_
      : *reinterpret_cast< ::apollo::prediction::DenseParameter*>(&::apollo::prediction::_DenseParameter_default_instance_);
}
inline const ::apollo::prediction::DenseParameter& LayerParameter::dense() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.dense)
  return _internal_dense();
}
inline ::apollo::prediction::DenseParameter* LayerParameter::_internal_mutable_dense() {
  if (!_internal_has_dense()) {
    clear_oneof_layers();
    set_has_dense();
    oneof_layers_.dense_ = CreateMaybeMessage< ::apollo::prediction::DenseParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.dense_;
}
inline ::apollo::prediction::DenseParameter* LayerParameter::mutable_dense() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.dense)
  return _internal_mutable_dense();
}

// optional .apollo.prediction.BatchNormalizationParameter batch_normalization = 7;
inline bool LayerParameter::_internal_has_batch_normalization() const {
  return oneof_layers_case() == kBatchNormalization;
}
inline bool LayerParameter::has_batch_normalization() const {
  return _internal_has_batch_normalization();
}
inline void LayerParameter::set_has_batch_normalization() {
  _oneof_case_[0] = kBatchNormalization;
}
inline void LayerParameter::clear_batch_normalization() {
  if (_internal_has_batch_normalization()) {
    delete oneof_layers_.batch_normalization_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::BatchNormalizationParameter* LayerParameter::release_batch_normalization() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.batch_normalization)
  if (_internal_has_batch_normalization()) {
    clear_has_oneof_layers();
      ::apollo::prediction::BatchNormalizationParameter* temp = oneof_layers_.batch_normalization_;
    oneof_layers_.batch_normalization_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::BatchNormalizationParameter& LayerParameter::_internal_batch_normalization() const {
  return _internal_has_batch_normalization()
      ? *oneof_layers_.batch_normalization_
      : *reinterpret_cast< ::apollo::prediction::BatchNormalizationParameter*>(&::apollo::prediction::_BatchNormalizationParameter_default_instance_);
}
inline const ::apollo::prediction::BatchNormalizationParameter& LayerParameter::batch_normalization() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.batch_normalization)
  return _internal_batch_normalization();
}
inline ::apollo::prediction::BatchNormalizationParameter* LayerParameter::_internal_mutable_batch_normalization() {
  if (!_internal_has_batch_normalization()) {
    clear_oneof_layers();
    set_has_batch_normalization();
    oneof_layers_.batch_normalization_ = CreateMaybeMessage< ::apollo::prediction::BatchNormalizationParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.batch_normalization_;
}
inline ::apollo::prediction::BatchNormalizationParameter* LayerParameter::mutable_batch_normalization() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.batch_normalization)
  return _internal_mutable_batch_normalization();
}

// optional .apollo.prediction.LSTMParameter lstm = 8;
inline bool LayerParameter::_internal_has_lstm() const {
  return oneof_layers_case() == kLstm;
}
inline bool LayerParameter::has_lstm() const {
  return _internal_has_lstm();
}
inline void LayerParameter::set_has_lstm() {
  _oneof_case_[0] = kLstm;
}
inline void LayerParameter::clear_lstm() {
  if (_internal_has_lstm()) {
    delete oneof_layers_.lstm_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::LSTMParameter* LayerParameter::release_lstm() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.lstm)
  if (_internal_has_lstm()) {
    clear_has_oneof_layers();
      ::apollo::prediction::LSTMParameter* temp = oneof_layers_.lstm_;
    oneof_layers_.lstm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::LSTMParameter& LayerParameter::_internal_lstm() const {
  return _internal_has_lstm()
      ? *oneof_layers_.lstm_
      : *reinterpret_cast< ::apollo::prediction::LSTMParameter*>(&::apollo::prediction::_LSTMParameter_default_instance_);
}
inline const ::apollo::prediction::LSTMParameter& LayerParameter::lstm() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.lstm)
  return _internal_lstm();
}
inline ::apollo::prediction::LSTMParameter* LayerParameter::_internal_mutable_lstm() {
  if (!_internal_has_lstm()) {
    clear_oneof_layers();
    set_has_lstm();
    oneof_layers_.lstm_ = CreateMaybeMessage< ::apollo::prediction::LSTMParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.lstm_;
}
inline ::apollo::prediction::LSTMParameter* LayerParameter::mutable_lstm() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.lstm)
  return _internal_mutable_lstm();
}

// optional .apollo.prediction.FlattenParameter flatten = 9;
inline bool LayerParameter::_internal_has_flatten() const {
  return oneof_layers_case() == kFlatten;
}
inline bool LayerParameter::has_flatten() const {
  return _internal_has_flatten();
}
inline void LayerParameter::set_has_flatten() {
  _oneof_case_[0] = kFlatten;
}
inline void LayerParameter::clear_flatten() {
  if (_internal_has_flatten()) {
    delete oneof_layers_.flatten_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::FlattenParameter* LayerParameter::release_flatten() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.flatten)
  if (_internal_has_flatten()) {
    clear_has_oneof_layers();
      ::apollo::prediction::FlattenParameter* temp = oneof_layers_.flatten_;
    oneof_layers_.flatten_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::FlattenParameter& LayerParameter::_internal_flatten() const {
  return _internal_has_flatten()
      ? *oneof_layers_.flatten_
      : *reinterpret_cast< ::apollo::prediction::FlattenParameter*>(&::apollo::prediction::_FlattenParameter_default_instance_);
}
inline const ::apollo::prediction::FlattenParameter& LayerParameter::flatten() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.flatten)
  return _internal_flatten();
}
inline ::apollo::prediction::FlattenParameter* LayerParameter::_internal_mutable_flatten() {
  if (!_internal_has_flatten()) {
    clear_oneof_layers();
    set_has_flatten();
    oneof_layers_.flatten_ = CreateMaybeMessage< ::apollo::prediction::FlattenParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.flatten_;
}
inline ::apollo::prediction::FlattenParameter* LayerParameter::mutable_flatten() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.flatten)
  return _internal_mutable_flatten();
}

// optional .apollo.prediction.ConcatenateParameter concatenate = 10;
inline bool LayerParameter::_internal_has_concatenate() const {
  return oneof_layers_case() == kConcatenate;
}
inline bool LayerParameter::has_concatenate() const {
  return _internal_has_concatenate();
}
inline void LayerParameter::set_has_concatenate() {
  _oneof_case_[0] = kConcatenate;
}
inline void LayerParameter::clear_concatenate() {
  if (_internal_has_concatenate()) {
    delete oneof_layers_.concatenate_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::ConcatenateParameter* LayerParameter::release_concatenate() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.concatenate)
  if (_internal_has_concatenate()) {
    clear_has_oneof_layers();
      ::apollo::prediction::ConcatenateParameter* temp = oneof_layers_.concatenate_;
    oneof_layers_.concatenate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::ConcatenateParameter& LayerParameter::_internal_concatenate() const {
  return _internal_has_concatenate()
      ? *oneof_layers_.concatenate_
      : *reinterpret_cast< ::apollo::prediction::ConcatenateParameter*>(&::apollo::prediction::_ConcatenateParameter_default_instance_);
}
inline const ::apollo::prediction::ConcatenateParameter& LayerParameter::concatenate() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.concatenate)
  return _internal_concatenate();
}
inline ::apollo::prediction::ConcatenateParameter* LayerParameter::_internal_mutable_concatenate() {
  if (!_internal_has_concatenate()) {
    clear_oneof_layers();
    set_has_concatenate();
    oneof_layers_.concatenate_ = CreateMaybeMessage< ::apollo::prediction::ConcatenateParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.concatenate_;
}
inline ::apollo::prediction::ConcatenateParameter* LayerParameter::mutable_concatenate() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.concatenate)
  return _internal_mutable_concatenate();
}

// optional .apollo.prediction.Conv1dParameter conv1d = 11;
inline bool LayerParameter::_internal_has_conv1d() const {
  return oneof_layers_case() == kConv1D;
}
inline bool LayerParameter::has_conv1d() const {
  return _internal_has_conv1d();
}
inline void LayerParameter::set_has_conv1d() {
  _oneof_case_[0] = kConv1D;
}
inline void LayerParameter::clear_conv1d() {
  if (_internal_has_conv1d()) {
    delete oneof_layers_.conv1d_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::Conv1dParameter* LayerParameter::release_conv1d() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.conv1d)
  if (_internal_has_conv1d()) {
    clear_has_oneof_layers();
      ::apollo::prediction::Conv1dParameter* temp = oneof_layers_.conv1d_;
    oneof_layers_.conv1d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::Conv1dParameter& LayerParameter::_internal_conv1d() const {
  return _internal_has_conv1d()
      ? *oneof_layers_.conv1d_
      : *reinterpret_cast< ::apollo::prediction::Conv1dParameter*>(&::apollo::prediction::_Conv1dParameter_default_instance_);
}
inline const ::apollo::prediction::Conv1dParameter& LayerParameter::conv1d() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.conv1d)
  return _internal_conv1d();
}
inline ::apollo::prediction::Conv1dParameter* LayerParameter::_internal_mutable_conv1d() {
  if (!_internal_has_conv1d()) {
    clear_oneof_layers();
    set_has_conv1d();
    oneof_layers_.conv1d_ = CreateMaybeMessage< ::apollo::prediction::Conv1dParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.conv1d_;
}
inline ::apollo::prediction::Conv1dParameter* LayerParameter::mutable_conv1d() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.conv1d)
  return _internal_mutable_conv1d();
}

// optional .apollo.prediction.MaxPool1dParameter maxpool1d = 12;
inline bool LayerParameter::_internal_has_maxpool1d() const {
  return oneof_layers_case() == kMaxpool1D;
}
inline bool LayerParameter::has_maxpool1d() const {
  return _internal_has_maxpool1d();
}
inline void LayerParameter::set_has_maxpool1d() {
  _oneof_case_[0] = kMaxpool1D;
}
inline void LayerParameter::clear_maxpool1d() {
  if (_internal_has_maxpool1d()) {
    delete oneof_layers_.maxpool1d_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::MaxPool1dParameter* LayerParameter::release_maxpool1d() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.maxpool1d)
  if (_internal_has_maxpool1d()) {
    clear_has_oneof_layers();
      ::apollo::prediction::MaxPool1dParameter* temp = oneof_layers_.maxpool1d_;
    oneof_layers_.maxpool1d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::MaxPool1dParameter& LayerParameter::_internal_maxpool1d() const {
  return _internal_has_maxpool1d()
      ? *oneof_layers_.maxpool1d_
      : *reinterpret_cast< ::apollo::prediction::MaxPool1dParameter*>(&::apollo::prediction::_MaxPool1dParameter_default_instance_);
}
inline const ::apollo::prediction::MaxPool1dParameter& LayerParameter::maxpool1d() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.maxpool1d)
  return _internal_maxpool1d();
}
inline ::apollo::prediction::MaxPool1dParameter* LayerParameter::_internal_mutable_maxpool1d() {
  if (!_internal_has_maxpool1d()) {
    clear_oneof_layers();
    set_has_maxpool1d();
    oneof_layers_.maxpool1d_ = CreateMaybeMessage< ::apollo::prediction::MaxPool1dParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.maxpool1d_;
}
inline ::apollo::prediction::MaxPool1dParameter* LayerParameter::mutable_maxpool1d() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.maxpool1d)
  return _internal_mutable_maxpool1d();
}

// optional .apollo.prediction.AvgPool1dParameter avgpool1d = 13;
inline bool LayerParameter::_internal_has_avgpool1d() const {
  return oneof_layers_case() == kAvgpool1D;
}
inline bool LayerParameter::has_avgpool1d() const {
  return _internal_has_avgpool1d();
}
inline void LayerParameter::set_has_avgpool1d() {
  _oneof_case_[0] = kAvgpool1D;
}
inline void LayerParameter::clear_avgpool1d() {
  if (_internal_has_avgpool1d()) {
    delete oneof_layers_.avgpool1d_;
    clear_has_oneof_layers();
  }
}
inline ::apollo::prediction::AvgPool1dParameter* LayerParameter::release_avgpool1d() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LayerParameter.avgpool1d)
  if (_internal_has_avgpool1d()) {
    clear_has_oneof_layers();
      ::apollo::prediction::AvgPool1dParameter* temp = oneof_layers_.avgpool1d_;
    oneof_layers_.avgpool1d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::prediction::AvgPool1dParameter& LayerParameter::_internal_avgpool1d() const {
  return _internal_has_avgpool1d()
      ? *oneof_layers_.avgpool1d_
      : *reinterpret_cast< ::apollo::prediction::AvgPool1dParameter*>(&::apollo::prediction::_AvgPool1dParameter_default_instance_);
}
inline const ::apollo::prediction::AvgPool1dParameter& LayerParameter::avgpool1d() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LayerParameter.avgpool1d)
  return _internal_avgpool1d();
}
inline ::apollo::prediction::AvgPool1dParameter* LayerParameter::_internal_mutable_avgpool1d() {
  if (!_internal_has_avgpool1d()) {
    clear_oneof_layers();
    set_has_avgpool1d();
    oneof_layers_.avgpool1d_ = CreateMaybeMessage< ::apollo::prediction::AvgPool1dParameter >(
        GetArenaNoVirtual());
  }
  return oneof_layers_.avgpool1d_;
}
inline ::apollo::prediction::AvgPool1dParameter* LayerParameter::mutable_avgpool1d() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LayerParameter.avgpool1d)
  return _internal_mutable_avgpool1d();
}

inline bool LayerParameter::has_oneof_layers() const {
  return oneof_layers_case() != ONEOF_LAYERS_NOT_SET;
}
inline void LayerParameter::clear_has_oneof_layers() {
  _oneof_case_[0] = ONEOF_LAYERS_NOT_SET;
}
inline LayerParameter::OneofLayersCase LayerParameter::oneof_layers_case() const {
  return LayerParameter::OneofLayersCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto
