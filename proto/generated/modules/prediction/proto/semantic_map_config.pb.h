// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/semantic_map_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto;
namespace apollo {
namespace prediction {
class SemanticMapConfig;
class SemanticMapConfigDefaultTypeInternal;
extern SemanticMapConfigDefaultTypeInternal _SemanticMapConfig_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::SemanticMapConfig* Arena::CreateMaybeMessage<::apollo::prediction::SemanticMapConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

// ===================================================================

class SemanticMapConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.SemanticMapConfig) */ {
 public:
  SemanticMapConfig();
  virtual ~SemanticMapConfig();

  SemanticMapConfig(const SemanticMapConfig& from);
  SemanticMapConfig(SemanticMapConfig&& from) noexcept
    : SemanticMapConfig() {
    *this = ::std::move(from);
  }

  inline SemanticMapConfig& operator=(const SemanticMapConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemanticMapConfig& operator=(SemanticMapConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SemanticMapConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SemanticMapConfig* internal_default_instance() {
    return reinterpret_cast<const SemanticMapConfig*>(
               &_SemanticMapConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SemanticMapConfig& a, SemanticMapConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SemanticMapConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SemanticMapConfig* New() const final {
    return CreateMaybeMessage<SemanticMapConfig>(nullptr);
  }

  SemanticMapConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SemanticMapConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SemanticMapConfig& from);
  void MergeFrom(const SemanticMapConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemanticMapConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.SemanticMapConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasePointFieldNumber = 1,
    kDimXFieldNumber = 2,
    kDimYFieldNumber = 3,
    kResolutionFieldNumber = 4,
    kObservationRangeFieldNumber = 5,
  };
  // optional .apollo.common.Point3D base_point = 1;
  bool has_base_point() const;
  private:
  bool _internal_has_base_point() const;
  public:
  void clear_base_point();
  const ::apollo::common::Point3D& base_point() const;
  ::apollo::common::Point3D* release_base_point();
  ::apollo::common::Point3D* mutable_base_point();
  void set_allocated_base_point(::apollo::common::Point3D* base_point);
  private:
  const ::apollo::common::Point3D& _internal_base_point() const;
  ::apollo::common::Point3D* _internal_mutable_base_point();
  public:

  // optional int32 dim_x = 2;
  bool has_dim_x() const;
  private:
  bool _internal_has_dim_x() const;
  public:
  void clear_dim_x();
  ::PROTOBUF_NAMESPACE_ID::int32 dim_x() const;
  void set_dim_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim_x() const;
  void _internal_set_dim_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dim_y = 3;
  bool has_dim_y() const;
  private:
  bool _internal_has_dim_y() const;
  public:
  void clear_dim_y();
  ::PROTOBUF_NAMESPACE_ID::int32 dim_y() const;
  void set_dim_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim_y() const;
  void _internal_set_dim_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double resolution = 4 [default = 0.1];
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // optional double observation_range = 5 [default = 100];
  bool has_observation_range() const;
  private:
  bool _internal_has_observation_range() const;
  public:
  void clear_observation_range();
  double observation_range() const;
  void set_observation_range(double value);
  private:
  double _internal_observation_range() const;
  void _internal_set_observation_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.SemanticMapConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Point3D* base_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 dim_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 dim_y_;
  double resolution_;
  double observation_range_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SemanticMapConfig

// optional .apollo.common.Point3D base_point = 1;
inline bool SemanticMapConfig::_internal_has_base_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_point_ != nullptr);
  return value;
}
inline bool SemanticMapConfig::has_base_point() const {
  return _internal_has_base_point();
}
inline const ::apollo::common::Point3D& SemanticMapConfig::_internal_base_point() const {
  const ::apollo::common::Point3D* p = base_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& SemanticMapConfig::base_point() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.SemanticMapConfig.base_point)
  return _internal_base_point();
}
inline ::apollo::common::Point3D* SemanticMapConfig::release_base_point() {
  // @@protoc_insertion_point(field_release:apollo.prediction.SemanticMapConfig.base_point)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = base_point_;
  base_point_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* SemanticMapConfig::_internal_mutable_base_point() {
  _has_bits_[0] |= 0x00000001u;
  if (base_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    base_point_ = p;
  }
  return base_point_;
}
inline ::apollo::common::Point3D* SemanticMapConfig::mutable_base_point() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.SemanticMapConfig.base_point)
  return _internal_mutable_base_point();
}
inline void SemanticMapConfig::set_allocated_base_point(::apollo::common::Point3D* base_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_point_);
  }
  if (base_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_point_ = base_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.SemanticMapConfig.base_point)
}

// optional int32 dim_x = 2;
inline bool SemanticMapConfig::_internal_has_dim_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SemanticMapConfig::has_dim_x() const {
  return _internal_has_dim_x();
}
inline void SemanticMapConfig::clear_dim_x() {
  dim_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemanticMapConfig::_internal_dim_x() const {
  return dim_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemanticMapConfig::dim_x() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.SemanticMapConfig.dim_x)
  return _internal_dim_x();
}
inline void SemanticMapConfig::_internal_set_dim_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dim_x_ = value;
}
inline void SemanticMapConfig::set_dim_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dim_x(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.SemanticMapConfig.dim_x)
}

// optional int32 dim_y = 3;
inline bool SemanticMapConfig::_internal_has_dim_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SemanticMapConfig::has_dim_y() const {
  return _internal_has_dim_y();
}
inline void SemanticMapConfig::clear_dim_y() {
  dim_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemanticMapConfig::_internal_dim_y() const {
  return dim_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemanticMapConfig::dim_y() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.SemanticMapConfig.dim_y)
  return _internal_dim_y();
}
inline void SemanticMapConfig::_internal_set_dim_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  dim_y_ = value;
}
inline void SemanticMapConfig::set_dim_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dim_y(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.SemanticMapConfig.dim_y)
}

// optional double resolution = 4 [default = 0.1];
inline bool SemanticMapConfig::_internal_has_resolution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SemanticMapConfig::has_resolution() const {
  return _internal_has_resolution();
}
inline void SemanticMapConfig::clear_resolution() {
  resolution_ = 0.1;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SemanticMapConfig::_internal_resolution() const {
  return resolution_;
}
inline double SemanticMapConfig::resolution() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.SemanticMapConfig.resolution)
  return _internal_resolution();
}
inline void SemanticMapConfig::_internal_set_resolution(double value) {
  _has_bits_[0] |= 0x00000008u;
  resolution_ = value;
}
inline void SemanticMapConfig::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.SemanticMapConfig.resolution)
}

// optional double observation_range = 5 [default = 100];
inline bool SemanticMapConfig::_internal_has_observation_range() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SemanticMapConfig::has_observation_range() const {
  return _internal_has_observation_range();
}
inline void SemanticMapConfig::clear_observation_range() {
  observation_range_ = 100;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SemanticMapConfig::_internal_observation_range() const {
  return observation_range_;
}
inline double SemanticMapConfig::observation_range() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.SemanticMapConfig.observation_range)
  return _internal_observation_range();
}
inline void SemanticMapConfig::_internal_set_observation_range(double value) {
  _has_bits_[0] |= 0x00000010u;
  observation_range_ = value;
}
inline void SemanticMapConfig::set_observation_range(double value) {
  _internal_set_observation_range(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.SemanticMapConfig.observation_range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto
