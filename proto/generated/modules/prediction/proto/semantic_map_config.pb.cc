// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/semantic_map_config.proto

#include "modules/prediction/proto/semantic_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto;
namespace apollo {
namespace prediction {
class SemanticMapConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SemanticMapConfig> _instance;
} _SemanticMapConfig_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_SemanticMapConfig_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_SemanticMapConfig_default_instance_;
    new (ptr) ::apollo::prediction::SemanticMapConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::SemanticMapConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SemanticMapConfig_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SemanticMapConfig_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto}, {
      &scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, base_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, dim_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, dim_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::SemanticMapConfig, observation_range_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::prediction::SemanticMapConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_SemanticMapConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/prediction/proto/semantic_map_"
  "config.proto\022\021apollo.prediction\032#modules"
  "/common/proto/geometry.proto\"\226\001\n\021Semanti"
  "cMapConfig\022*\n\nbase_point\030\001 \001(\0132\026.apollo."
  "common.Point3D\022\r\n\005dim_x\030\002 \001(\005\022\r\n\005dim_y\030\003"
  " \001(\005\022\027\n\nresolution\030\004 \001(\001:\0030.1\022\036\n\021observa"
  "tion_range\030\005 \001(\001:\003100"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_sccs[1] = {
  &scc_info_SemanticMapConfig_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto = {
  &descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto, "modules/prediction/proto/semantic_map_config.proto", 261,
  &descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto), true);
namespace apollo {
namespace prediction {

// ===================================================================

void SemanticMapConfig::InitAsDefaultInstance() {
  ::apollo::prediction::_SemanticMapConfig_default_instance_._instance.get_mutable()->base_point_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
class SemanticMapConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SemanticMapConfig>()._has_bits_);
  static const ::apollo::common::Point3D& base_point(const SemanticMapConfig* msg);
  static void set_has_base_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dim_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dim_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_observation_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Point3D&
SemanticMapConfig::_Internal::base_point(const SemanticMapConfig* msg) {
  return *msg->base_point_;
}
void SemanticMapConfig::clear_base_point() {
  if (base_point_ != nullptr) base_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SemanticMapConfig::SemanticMapConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.SemanticMapConfig)
}
SemanticMapConfig::SemanticMapConfig(const SemanticMapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_base_point()) {
    base_point_ = new ::apollo::common::Point3D(*from.base_point_);
  } else {
    base_point_ = nullptr;
  }
  ::memcpy(&dim_x_, &from.dim_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&observation_range_) -
    reinterpret_cast<char*>(&dim_x_)) + sizeof(observation_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.SemanticMapConfig)
}

void SemanticMapConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SemanticMapConfig_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto.base);
  ::memset(&base_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_y_) -
      reinterpret_cast<char*>(&base_point_)) + sizeof(dim_y_));
  resolution_ = 0.1;
  observation_range_ = 100;
}

SemanticMapConfig::~SemanticMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.prediction.SemanticMapConfig)
  SharedDtor();
}

void SemanticMapConfig::SharedDtor() {
  if (this != internal_default_instance()) delete base_point_;
}

void SemanticMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SemanticMapConfig& SemanticMapConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SemanticMapConfig_modules_2fprediction_2fproto_2fsemantic_5fmap_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SemanticMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.SemanticMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_point_ != nullptr);
    base_point_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&dim_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dim_y_) -
        reinterpret_cast<char*>(&dim_x_)) + sizeof(dim_y_));
    resolution_ = 0.1;
    observation_range_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SemanticMapConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Point3D base_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dim_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dim_x(&has_bits);
          dim_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dim_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dim_y(&has_bits);
          dim_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double resolution = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_resolution(&has_bits);
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double observation_range = 5 [default = 100];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_observation_range(&has_bits);
          observation_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SemanticMapConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.SemanticMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D base_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_point(this), target, stream);
  }

  // optional int32 dim_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dim_x(), target);
  }

  // optional int32 dim_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dim_y(), target);
  }

  // optional double resolution = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_resolution(), target);
  }

  // optional double observation_range = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_observation_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.SemanticMapConfig)
  return target;
}

size_t SemanticMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.SemanticMapConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Point3D base_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_point_);
    }

    // optional int32 dim_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dim_x());
    }

    // optional int32 dim_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dim_y());
    }

    // optional double resolution = 4 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double observation_range = 5 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemanticMapConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.SemanticMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SemanticMapConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SemanticMapConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.SemanticMapConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.SemanticMapConfig)
    MergeFrom(*source);
  }
}

void SemanticMapConfig::MergeFrom(const SemanticMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.SemanticMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base_point()->::apollo::common::Point3D::MergeFrom(from._internal_base_point());
    }
    if (cached_has_bits & 0x00000002u) {
      dim_x_ = from.dim_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      dim_y_ = from.dim_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      observation_range_ = from.observation_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SemanticMapConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.SemanticMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemanticMapConfig::CopyFrom(const SemanticMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.SemanticMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemanticMapConfig::IsInitialized() const {
  return true;
}

void SemanticMapConfig::InternalSwap(SemanticMapConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(base_point_, other->base_point_);
  swap(dim_x_, other->dim_x_);
  swap(dim_y_, other->dim_y_);
  swap(resolution_, other->resolution_);
  swap(observation_range_, other->observation_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SemanticMapConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::SemanticMapConfig* Arena::CreateMaybeMessage< ::apollo::prediction::SemanticMapConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::SemanticMapConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
