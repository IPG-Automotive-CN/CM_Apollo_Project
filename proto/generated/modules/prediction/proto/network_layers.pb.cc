// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/network_layers.proto

#include "modules/prediction/proto/network_layers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
namespace apollo {
namespace prediction {
class TensorParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorParameter> _instance;
} _TensorParameter_default_instance_;
class InputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputParameter> _instance;
} _InputParameter_default_instance_;
class DenseParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DenseParameter> _instance;
} _DenseParameter_default_instance_;
class Conv1dParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conv1dParameter> _instance;
} _Conv1dParameter_default_instance_;
class MaxPool1dParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaxPool1dParameter> _instance;
} _MaxPool1dParameter_default_instance_;
class AvgPool1dParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvgPool1dParameter> _instance;
} _AvgPool1dParameter_default_instance_;
class BatchNormalizationParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchNormalizationParameter> _instance;
} _BatchNormalizationParameter_default_instance_;
class LSTMParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LSTMParameter> _instance;
} _LSTMParameter_default_instance_;
class ActivationParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationParameter> _instance;
} _ActivationParameter_default_instance_;
class FlattenParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlattenParameter> _instance;
} _FlattenParameter_default_instance_;
class ConcatenateParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConcatenateParameter> _instance;
} _ConcatenateParameter_default_instance_;
class LayerParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayerParameter> _instance;
  const ::apollo::prediction::InputParameter* input_;
  const ::apollo::prediction::ActivationParameter* activation_;
  const ::apollo::prediction::DenseParameter* dense_;
  const ::apollo::prediction::BatchNormalizationParameter* batch_normalization_;
  const ::apollo::prediction::LSTMParameter* lstm_;
  const ::apollo::prediction::FlattenParameter* flatten_;
  const ::apollo::prediction::ConcatenateParameter* concatenate_;
  const ::apollo::prediction::Conv1dParameter* conv1d_;
  const ::apollo::prediction::MaxPool1dParameter* maxpool1d_;
  const ::apollo::prediction::AvgPool1dParameter* avgpool1d_;
} _LayerParameter_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ActivationParameter_default_instance_;
    new (ptr) ::apollo::prediction::ActivationParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ActivationParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static void InitDefaultsscc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_AvgPool1dParameter_default_instance_;
    new (ptr) ::apollo::prediction::AvgPool1dParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::AvgPool1dParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static void InitDefaultsscc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_BatchNormalizationParameter_default_instance_;
    new (ptr) ::apollo::prediction::BatchNormalizationParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::BatchNormalizationParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {
      &scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,}};

static void InitDefaultsscc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ConcatenateParameter_default_instance_;
    new (ptr) ::apollo::prediction::ConcatenateParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ConcatenateParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static void InitDefaultsscc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Conv1dParameter_default_instance_;
    new (ptr) ::apollo::prediction::Conv1dParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Conv1dParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {
      &scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,}};

static void InitDefaultsscc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_DenseParameter_default_instance_;
    new (ptr) ::apollo::prediction::DenseParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::DenseParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {
      &scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,}};

static void InitDefaultsscc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_FlattenParameter_default_instance_;
    new (ptr) ::apollo::prediction::FlattenParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::FlattenParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static void InitDefaultsscc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_InputParameter_default_instance_;
    new (ptr) ::apollo::prediction::InputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::InputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static void InitDefaultsscc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LSTMParameter_default_instance_;
    new (ptr) ::apollo::prediction::LSTMParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LSTMParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {
      &scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,}};

static void InitDefaultsscc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LayerParameter_default_instance_;
    new (ptr) ::apollo::prediction::LayerParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LayerParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {
      &scc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,}};

static void InitDefaultsscc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_MaxPool1dParameter_default_instance_;
    new (ptr) ::apollo::prediction::MaxPool1dParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::MaxPool1dParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static void InitDefaultsscc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_TensorParameter_default_instance_;
    new (ptr) ::apollo::prediction::TensorParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::TensorParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, data_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::TensorParameter, shape_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, input_shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, dtype_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::InputParameter, sparse_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, units_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, activation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, use_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, weights_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::DenseParameter, bias_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, shape_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, use_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, kernel_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Conv1dParameter, stride_),
  ~0u,
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::MaxPool1dParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::MaxPool1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::MaxPool1dParameter, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::MaxPool1dParameter, stride_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::AvgPool1dParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::AvgPool1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::AvgPool1dParameter, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::AvgPool1dParameter, stride_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, epsilon_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, axis_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, center_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, scale_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, momentum_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, mu_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, sigma_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, gamma_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::BatchNormalizationParameter, beta_),
  8,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, units_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, return_sequences_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, stateful_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, activation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, recurrent_activation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, use_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, unit_forget_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, go_backwards_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, unroll_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, implementation_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, weights_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, weights_forget_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, weights_cell_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, weights_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, bias_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, bias_forget_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, bias_cell_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, bias_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, recurrent_weights_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, recurrent_weights_forget_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, recurrent_weights_cell_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LSTMParameter, recurrent_weights_output_),
  14,
  15,
  16,
  0,
  1,
  17,
  21,
  18,
  19,
  20,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ActivationParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ActivationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ActivationParameter, activation_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FlattenParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FlattenParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ConcatenateParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ConcatenateParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ConcatenateParameter, axis_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, order_number_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, input_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, activation_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, dense_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, batch_normalization_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, lstm_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, flatten_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, concatenate_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, conv1d_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, maxpool1d_),
  offsetof(::apollo::prediction::LayerParameterDefaultTypeInternal, avgpool1d_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LayerParameter, oneof_layers_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::prediction::TensorParameter)},
  { 9, 17, sizeof(::apollo::prediction::InputParameter)},
  { 20, 30, sizeof(::apollo::prediction::DenseParameter)},
  { 35, 45, sizeof(::apollo::prediction::Conv1dParameter)},
  { 50, 57, sizeof(::apollo::prediction::MaxPool1dParameter)},
  { 59, 66, sizeof(::apollo::prediction::AvgPool1dParameter)},
  { 68, 82, sizeof(::apollo::prediction::BatchNormalizationParameter)},
  { 91, 118, sizeof(::apollo::prediction::LSTMParameter)},
  { 140, 146, sizeof(::apollo::prediction::ActivationParameter)},
  { 147, 152, sizeof(::apollo::prediction::FlattenParameter)},
  { 152, 158, sizeof(::apollo::prediction::ConcatenateParameter)},
  { 159, 178, sizeof(::apollo::prediction::LayerParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_TensorParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_InputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_DenseParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Conv1dParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_MaxPool1dParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_AvgPool1dParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_BatchNormalizationParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LSTMParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_ActivationParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_FlattenParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_ConcatenateParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LayerParameter_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/prediction/proto/network_layer"
  "s.proto\022\021apollo.prediction\"2\n\017TensorPara"
  "meter\022\020\n\004data\030\001 \003(\002B\002\020\001\022\r\n\005shape\030\002 \003(\005\"D"
  "\n\016InputParameter\022\023\n\013input_shape\030\001 \003(\005\022\r\n"
  "\005dtype\030\002 \001(\t\022\016\n\006sparse\030\003 \001(\010\"\254\001\n\016DensePa"
  "rameter\022\r\n\005units\030\001 \001(\005\022\022\n\nactivation\030\002 \001"
  "(\t\022\020\n\010use_bias\030\003 \001(\010\0223\n\007weights\030\004 \001(\0132\"."
  "apollo.prediction.TensorParameter\0220\n\004bia"
  "s\030\005 \001(\0132\".apollo.prediction.TensorParame"
  "ter\"\250\001\n\017Conv1dParameter\022\r\n\005shape\030\001 \003(\005\022\020"
  "\n\010use_bias\030\002 \001(\010\0222\n\006kernel\030\003 \001(\0132\".apoll"
  "o.prediction.TensorParameter\0220\n\004bias\030\004 \001"
  "(\0132\".apollo.prediction.TensorParameter\022\016"
  "\n\006stride\030\005 \001(\005\"9\n\022MaxPool1dParameter\022\023\n\013"
  "kernel_size\030\001 \001(\005\022\016\n\006stride\030\002 \001(\005\"9\n\022Avg"
  "Pool1dParameter\022\023\n\013kernel_size\030\001 \001(\005\022\016\n\006"
  "stride\030\002 \001(\005\"\274\002\n\033BatchNormalizationParam"
  "eter\022\026\n\007epsilon\030\001 \001(\001:\0051e-05\022\014\n\004axis\030\002 \001"
  "(\005\022\016\n\006center\030\003 \001(\010\022\r\n\005scale\030\004 \001(\010\022\020\n\010mom"
  "entum\030\005 \001(\002\022.\n\002mu\030\006 \001(\0132\".apollo.predict"
  "ion.TensorParameter\0221\n\005sigma\030\007 \001(\0132\".apo"
  "llo.prediction.TensorParameter\0221\n\005gamma\030"
  "\010 \001(\0132\".apollo.prediction.TensorParamete"
  "r\0220\n\004beta\030\t \001(\0132\".apollo.prediction.Tens"
  "orParameter\"\340\007\n\rLSTMParameter\022\r\n\005units\030\001"
  " \001(\005\022\030\n\020return_sequences\030\002 \001(\010\022\020\n\010statef"
  "ul\030\003 \001(\010\022\022\n\nactivation\030\004 \001(\t\022\034\n\024recurren"
  "t_activation\030\005 \001(\t\022\020\n\010use_bias\030\006 \001(\010\022\036\n\020"
  "unit_forget_bias\030\007 \001(\010:\004true\022\033\n\014go_backw"
  "ards\030\010 \001(\010:\005false\022\025\n\006unroll\030\t \001(\010:\005false"
  "\022\031\n\016implementation\030\n \001(\005:\0010\0229\n\rweights_i"
  "nput\030\017 \001(\0132\".apollo.prediction.TensorPar"
  "ameter\022:\n\016weights_forget\030\020 \001(\0132\".apollo."
  "prediction.TensorParameter\0228\n\014weights_ce"
  "ll\030\021 \001(\0132\".apollo.prediction.TensorParam"
  "eter\022:\n\016weights_output\030\022 \001(\0132\".apollo.pr"
  "ediction.TensorParameter\0226\n\nbias_input\030\023"
  " \001(\0132\".apollo.prediction.TensorParameter"
  "\0227\n\013bias_forget\030\024 \001(\0132\".apollo.predictio"
  "n.TensorParameter\0225\n\tbias_cell\030\025 \001(\0132\".a"
  "pollo.prediction.TensorParameter\0227\n\013bias"
  "_output\030\026 \001(\0132\".apollo.prediction.Tensor"
  "Parameter\022C\n\027recurrent_weights_input\030\031 \001"
  "(\0132\".apollo.prediction.TensorParameter\022D"
  "\n\030recurrent_weights_forget\030\032 \001(\0132\".apoll"
  "o.prediction.TensorParameter\022B\n\026recurren"
  "t_weights_cell\030\033 \001(\0132\".apollo.prediction"
  ".TensorParameter\022D\n\030recurrent_weights_ou"
  "tput\030\034 \001(\0132\".apollo.prediction.TensorPar"
  "ameter\")\n\023ActivationParameter\022\022\n\nactivat"
  "ion\030\001 \001(\t\"\022\n\020FlattenParameter\"$\n\024Concate"
  "nateParameter\022\014\n\004axis\030\001 \001(\005\"\237\005\n\016LayerPar"
  "ameter\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\024\n\014or"
  "der_number\030\003 \001(\005\0222\n\005input\030\004 \001(\0132!.apollo"
  ".prediction.InputParameterH\000\022<\n\nactivati"
  "on\030\005 \001(\0132&.apollo.prediction.ActivationP"
  "arameterH\000\0222\n\005dense\030\006 \001(\0132!.apollo.predi"
  "ction.DenseParameterH\000\022M\n\023batch_normaliz"
  "ation\030\007 \001(\0132..apollo.prediction.BatchNor"
  "malizationParameterH\000\0220\n\004lstm\030\010 \001(\0132 .ap"
  "ollo.prediction.LSTMParameterH\000\0226\n\007flatt"
  "en\030\t \001(\0132#.apollo.prediction.FlattenPara"
  "meterH\000\022>\n\013concatenate\030\n \001(\0132\'.apollo.pr"
  "ediction.ConcatenateParameterH\000\0224\n\006conv1"
  "d\030\013 \001(\0132\".apollo.prediction.Conv1dParame"
  "terH\000\022:\n\tmaxpool1d\030\014 \001(\0132%.apollo.predic"
  "tion.MaxPool1dParameterH\000\022:\n\tavgpool1d\030\r"
  " \001(\0132%.apollo.prediction.AvgPool1dParame"
  "terH\000B\016\n\014oneof_layers"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_sccs[12] = {
  &scc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
  &scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once;
static bool descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = {
  &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_initialized, descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto, "modules/prediction/proto/network_layers.proto", 2741,
  &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto, 12, file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto), true);
namespace apollo {
namespace prediction {

// ===================================================================

void TensorParameter::InitAsDefaultInstance() {
}
class TensorParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorParameter>()._has_bits_);
};

TensorParameter::TensorParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.TensorParameter)
}
TensorParameter::TensorParameter(const TensorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.TensorParameter)
}

void TensorParameter::SharedCtor() {
}

TensorParameter::~TensorParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.TensorParameter)
  SharedDtor();
}

void TensorParameter::SharedDtor() {
}

void TensorParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorParameter& TensorParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void TensorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.TensorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TensorParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.TensorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shape(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.TensorParameter)
  return target;
}

size_t TensorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.TensorParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.TensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.TensorParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.TensorParameter)
    MergeFrom(*source);
  }
}

void TensorParameter::MergeFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.TensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  shape_.MergeFrom(from.shape_);
}

void TensorParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.TensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorParameter::CopyFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.TensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParameter::IsInitialized() const {
  return true;
}

void TensorParameter::InternalSwap(TensorParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  shape_.InternalSwap(&other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputParameter::InitAsDefaultInstance() {
}
class InputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InputParameter>()._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputParameter::InputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_shape_(from.input_shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dtype()) {
    dtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dtype_);
  }
  sparse_ = from.sparse_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.InputParameter)
}

void InputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparse_ = false;
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputParameter& InputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.InputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dtype_.ClearNonDefaultToEmptyNoArena();
  }
  sparse_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 input_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.InputParameter.dtype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sparse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sparse(&has_bits);
          sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.InputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  for (int i = 0, n = this->_internal_input_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_input_shape(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string dtype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.InputParameter.dtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dtype(), target);
  }

  // optional bool sparse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sparse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.InputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string dtype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dtype());
    }

    // optional bool sparse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.InputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_shape_.MergeFrom(from.input_shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dtype_);
    }
    if (cached_has_bits & 0x00000002u) {
      sparse_ = from.sparse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_shape_.InternalSwap(&other->input_shape_);
  dtype_.Swap(&other->dtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sparse_, other->sparse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DenseParameter::InitAsDefaultInstance() {
  ::apollo::prediction::_DenseParameter_default_instance_._instance.get_mutable()->weights_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_DenseParameter_default_instance_._instance.get_mutable()->bias_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
}
class DenseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseParameter>()._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::TensorParameter& weights(const DenseParameter* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::TensorParameter& bias(const DenseParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::prediction::TensorParameter&
DenseParameter::_Internal::weights(const DenseParameter* msg) {
  return *msg->weights_;
}
const ::apollo::prediction::TensorParameter&
DenseParameter::_Internal::bias(const DenseParameter* msg) {
  return *msg->bias_;
}
DenseParameter::DenseParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.DenseParameter)
}
DenseParameter::DenseParameter(const DenseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activation()) {
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
  if (from._internal_has_weights()) {
    weights_ = new ::apollo::prediction::TensorParameter(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::apollo::prediction::TensorParameter(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&units_, &from.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_bias_) -
    reinterpret_cast<char*>(&units_)) + sizeof(use_bias_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.DenseParameter)
}

void DenseParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&weights_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_bias_) -
      reinterpret_cast<char*>(&weights_)) + sizeof(use_bias_));
}

DenseParameter::~DenseParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.DenseParameter)
  SharedDtor();
}

void DenseParameter::SharedDtor() {
  activation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete weights_;
  if (this != internal_default_instance()) delete bias_;
}

void DenseParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DenseParameter& DenseParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DenseParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void DenseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.DenseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      activation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(weights_ != nullptr);
      weights_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_bias_) -
        reinterpret_cast<char*>(&units_)) + sizeof(use_bias_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DenseParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_units(&has_bits);
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_activation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.DenseParameter.activation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_bias(&has_bits);
          use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DenseParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.DenseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 units = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // optional string activation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.DenseParameter.activation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activation(), target);
  }

  // optional bool use_bias = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_bias(), target);
  }

  // optional .apollo.prediction.TensorParameter weights = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weights(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.DenseParameter)
  return target;
}

size_t DenseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.DenseParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string activation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation());
    }

    // optional .apollo.prediction.TensorParameter weights = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_);
    }

    // optional .apollo.prediction.TensorParameter bias = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_);
    }

    // optional int32 units = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_units());
    }

    // optional bool use_bias = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenseParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.DenseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DenseParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.DenseParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.DenseParameter)
    MergeFrom(*source);
  }
}

void DenseParameter::MergeFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.DenseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weights()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bias()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000008u) {
      units_ = from.units_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_bias_ = from.use_bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DenseParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseParameter::CopyFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseParameter::IsInitialized() const {
  return true;
}

void DenseParameter::InternalSwap(DenseParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activation_.Swap(&other->activation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weights_, other->weights_);
  swap(bias_, other->bias_);
  swap(units_, other->units_);
  swap(use_bias_, other->use_bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conv1dParameter::InitAsDefaultInstance() {
  ::apollo::prediction::_Conv1dParameter_default_instance_._instance.get_mutable()->kernel_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_Conv1dParameter_default_instance_._instance.get_mutable()->bias_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
}
class Conv1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Conv1dParameter>()._has_bits_);
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::TensorParameter& kernel(const Conv1dParameter* msg);
  static void set_has_kernel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::TensorParameter& bias(const Conv1dParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::TensorParameter&
Conv1dParameter::_Internal::kernel(const Conv1dParameter* msg) {
  return *msg->kernel_;
}
const ::apollo::prediction::TensorParameter&
Conv1dParameter::_Internal::bias(const Conv1dParameter* msg) {
  return *msg->bias_;
}
Conv1dParameter::Conv1dParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Conv1dParameter)
}
Conv1dParameter::Conv1dParameter(const Conv1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_kernel()) {
    kernel_ = new ::apollo::prediction::TensorParameter(*from.kernel_);
  } else {
    kernel_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::apollo::prediction::TensorParameter(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&use_bias_, &from.use_bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&use_bias_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Conv1dParameter)
}

void Conv1dParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  ::memset(&kernel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&kernel_)) + sizeof(stride_));
}

Conv1dParameter::~Conv1dParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Conv1dParameter)
  SharedDtor();
}

void Conv1dParameter::SharedDtor() {
  if (this != internal_default_instance()) delete kernel_;
  if (this != internal_default_instance()) delete bias_;
}

void Conv1dParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conv1dParameter& Conv1dParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conv1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void Conv1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Conv1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(kernel_ != nullptr);
      kernel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&use_bias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&use_bias_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Conv1dParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_bias(&has_bits);
          use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter kernel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conv1dParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Conv1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shape(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_bias = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_bias(), target);
  }

  // optional .apollo.prediction.TensorParameter kernel = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kernel(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bias(this), target, stream);
  }

  // optional int32 stride = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Conv1dParameter)
  return target;
}

size_t Conv1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Conv1dParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.prediction.TensorParameter kernel = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kernel_);
    }

    // optional .apollo.prediction.TensorParameter bias = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_);
    }

    // optional bool use_bias = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 stride = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conv1dParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Conv1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Conv1dParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conv1dParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Conv1dParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Conv1dParameter)
    MergeFrom(*source);
  }
}

void Conv1dParameter::MergeFrom(const Conv1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Conv1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_kernel()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_kernel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000004u) {
      use_bias_ = from.use_bias_;
    }
    if (cached_has_bits & 0x00000008u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Conv1dParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Conv1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conv1dParameter::CopyFrom(const Conv1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Conv1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv1dParameter::IsInitialized() const {
  return true;
}

void Conv1dParameter::InternalSwap(Conv1dParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
  swap(kernel_, other->kernel_);
  swap(bias_, other->bias_);
  swap(use_bias_, other->use_bias_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conv1dParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaxPool1dParameter::InitAsDefaultInstance() {
}
class MaxPool1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MaxPool1dParameter>()._has_bits_);
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MaxPool1dParameter::MaxPool1dParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.MaxPool1dParameter)
}
MaxPool1dParameter::MaxPool1dParameter(const MaxPool1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kernel_size_, &from.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.MaxPool1dParameter)
}

void MaxPool1dParameter::SharedCtor() {
  ::memset(&kernel_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
}

MaxPool1dParameter::~MaxPool1dParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.MaxPool1dParameter)
  SharedDtor();
}

void MaxPool1dParameter::SharedDtor() {
}

void MaxPool1dParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaxPool1dParameter& MaxPool1dParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaxPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void MaxPool1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.MaxPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&kernel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MaxPool1dParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 kernel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxPool1dParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.MaxPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kernel_size(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.MaxPool1dParameter)
  return target;
}

size_t MaxPool1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.MaxPool1dParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kernel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kernel_size());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxPool1dParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.MaxPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxPool1dParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaxPool1dParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.MaxPool1dParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.MaxPool1dParameter)
    MergeFrom(*source);
  }
}

void MaxPool1dParameter::MergeFrom(const MaxPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.MaxPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaxPool1dParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.MaxPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxPool1dParameter::CopyFrom(const MaxPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.MaxPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxPool1dParameter::IsInitialized() const {
  return true;
}

void MaxPool1dParameter::InternalSwap(MaxPool1dParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kernel_size_, other->kernel_size_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxPool1dParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvgPool1dParameter::InitAsDefaultInstance() {
}
class AvgPool1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AvgPool1dParameter>()._has_bits_);
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AvgPool1dParameter::AvgPool1dParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.AvgPool1dParameter)
}
AvgPool1dParameter::AvgPool1dParameter(const AvgPool1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kernel_size_, &from.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.AvgPool1dParameter)
}

void AvgPool1dParameter::SharedCtor() {
  ::memset(&kernel_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
}

AvgPool1dParameter::~AvgPool1dParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.AvgPool1dParameter)
  SharedDtor();
}

void AvgPool1dParameter::SharedDtor() {
}

void AvgPool1dParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvgPool1dParameter& AvgPool1dParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvgPool1dParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void AvgPool1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.AvgPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&kernel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AvgPool1dParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 kernel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvgPool1dParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.AvgPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kernel_size(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.AvgPool1dParameter)
  return target;
}

size_t AvgPool1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.AvgPool1dParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kernel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kernel_size());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvgPool1dParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.AvgPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AvgPool1dParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvgPool1dParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.AvgPool1dParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.AvgPool1dParameter)
    MergeFrom(*source);
  }
}

void AvgPool1dParameter::MergeFrom(const AvgPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.AvgPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvgPool1dParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.AvgPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvgPool1dParameter::CopyFrom(const AvgPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.AvgPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvgPool1dParameter::IsInitialized() const {
  return true;
}

void AvgPool1dParameter::InternalSwap(AvgPool1dParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kernel_size_, other->kernel_size_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvgPool1dParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchNormalizationParameter::InitAsDefaultInstance() {
  ::apollo::prediction::_BatchNormalizationParameter_default_instance_._instance.get_mutable()->mu_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_BatchNormalizationParameter_default_instance_._instance.get_mutable()->sigma_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_BatchNormalizationParameter_default_instance_._instance.get_mutable()->gamma_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_BatchNormalizationParameter_default_instance_._instance.get_mutable()->beta_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
}
class BatchNormalizationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchNormalizationParameter>()._has_bits_);
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_momentum(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::prediction::TensorParameter& mu(const BatchNormalizationParameter* msg);
  static void set_has_mu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::TensorParameter& sigma(const BatchNormalizationParameter* msg);
  static void set_has_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::TensorParameter& gamma(const BatchNormalizationParameter* msg);
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::TensorParameter& beta(const BatchNormalizationParameter* msg);
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::mu(const BatchNormalizationParameter* msg) {
  return *msg->mu_;
}
const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::sigma(const BatchNormalizationParameter* msg) {
  return *msg->sigma_;
}
const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::gamma(const BatchNormalizationParameter* msg) {
  return *msg->gamma_;
}
const ::apollo::prediction::TensorParameter&
BatchNormalizationParameter::_Internal::beta(const BatchNormalizationParameter* msg) {
  return *msg->beta_;
}
BatchNormalizationParameter::BatchNormalizationParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.BatchNormalizationParameter)
}
BatchNormalizationParameter::BatchNormalizationParameter(const BatchNormalizationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mu()) {
    mu_ = new ::apollo::prediction::TensorParameter(*from.mu_);
  } else {
    mu_ = nullptr;
  }
  if (from._internal_has_sigma()) {
    sigma_ = new ::apollo::prediction::TensorParameter(*from.sigma_);
  } else {
    sigma_ = nullptr;
  }
  if (from._internal_has_gamma()) {
    gamma_ = new ::apollo::prediction::TensorParameter(*from.gamma_);
  } else {
    gamma_ = nullptr;
  }
  if (from._internal_has_beta()) {
    beta_ = new ::apollo::prediction::TensorParameter(*from.beta_);
  } else {
    beta_ = nullptr;
  }
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&epsilon_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(epsilon_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.BatchNormalizationParameter)
}

void BatchNormalizationParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&momentum_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(momentum_));
  epsilon_ = 1e-05;
}

BatchNormalizationParameter::~BatchNormalizationParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.BatchNormalizationParameter)
  SharedDtor();
}

void BatchNormalizationParameter::SharedDtor() {
  if (this != internal_default_instance()) delete mu_;
  if (this != internal_default_instance()) delete sigma_;
  if (this != internal_default_instance()) delete gamma_;
  if (this != internal_default_instance()) delete beta_;
}

void BatchNormalizationParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchNormalizationParameter& BatchNormalizationParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchNormalizationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void BatchNormalizationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.BatchNormalizationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mu_ != nullptr);
      mu_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sigma_ != nullptr);
      sigma_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gamma_ != nullptr);
      gamma_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(beta_ != nullptr);
      beta_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&axis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&momentum_) -
        reinterpret_cast<char*>(&axis_)) + sizeof(momentum_));
  }
  epsilon_ = 1e-05;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BatchNormalizationParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double epsilon = 1 [default = 1e-05];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_epsilon(&has_bits);
          epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 axis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_center(&has_bits);
          center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float momentum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_momentum(&has_bits);
          momentum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter mu = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter sigma = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sigma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter gamma = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter beta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_beta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchNormalizationParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.BatchNormalizationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double epsilon = 1 [default = 1e-05];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_epsilon(), target);
  }

  // optional int32 axis = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // optional bool center = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_center(), target);
  }

  // optional bool scale = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_scale(), target);
  }

  // optional float momentum = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_momentum(), target);
  }

  // optional .apollo.prediction.TensorParameter mu = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mu(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter sigma = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sigma(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter gamma = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gamma(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter beta = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::beta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.BatchNormalizationParameter)
  return target;
}

size_t BatchNormalizationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.BatchNormalizationParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.prediction.TensorParameter mu = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mu_);
    }

    // optional .apollo.prediction.TensorParameter sigma = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sigma_);
    }

    // optional .apollo.prediction.TensorParameter gamma = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gamma_);
    }

    // optional .apollo.prediction.TensorParameter beta = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *beta_);
    }

    // optional int32 axis = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_axis());
    }

    // optional bool center = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool scale = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float momentum = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional double epsilon = 1 [default = 1e-05];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchNormalizationParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.BatchNormalizationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchNormalizationParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchNormalizationParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.BatchNormalizationParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.BatchNormalizationParameter)
    MergeFrom(*source);
  }
}

void BatchNormalizationParameter::MergeFrom(const BatchNormalizationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.BatchNormalizationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mu()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_mu());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sigma()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_sigma());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gamma()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_gamma());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_beta()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_beta());
    }
    if (cached_has_bits & 0x00000010u) {
      axis_ = from.axis_;
    }
    if (cached_has_bits & 0x00000020u) {
      center_ = from.center_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      momentum_ = from.momentum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_epsilon(from._internal_epsilon());
  }
}

void BatchNormalizationParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.BatchNormalizationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchNormalizationParameter::CopyFrom(const BatchNormalizationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.BatchNormalizationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchNormalizationParameter::IsInitialized() const {
  return true;
}

void BatchNormalizationParameter::InternalSwap(BatchNormalizationParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mu_, other->mu_);
  swap(sigma_, other->sigma_);
  swap(gamma_, other->gamma_);
  swap(beta_, other->beta_);
  swap(axis_, other->axis_);
  swap(center_, other->center_);
  swap(scale_, other->scale_);
  swap(momentum_, other->momentum_);
  swap(epsilon_, other->epsilon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchNormalizationParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LSTMParameter::InitAsDefaultInstance() {
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->weights_input_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->weights_forget_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->weights_cell_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->weights_output_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->bias_input_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->bias_forget_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->bias_cell_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->bias_output_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->recurrent_weights_input_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->recurrent_weights_forget_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->recurrent_weights_cell_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
  ::apollo::prediction::_LSTMParameter_default_instance_._instance.get_mutable()->recurrent_weights_output_ = const_cast< ::apollo::prediction::TensorParameter*>(
      ::apollo::prediction::TensorParameter::internal_default_instance());
}
class LSTMParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LSTMParameter>()._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_return_sequences(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_stateful(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recurrent_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_unit_forget_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_go_backwards(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_unroll(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_implementation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::prediction::TensorParameter& weights_input(const LSTMParameter* msg);
  static void set_has_weights_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::TensorParameter& weights_forget(const LSTMParameter* msg);
  static void set_has_weights_forget(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::prediction::TensorParameter& weights_cell(const LSTMParameter* msg);
  static void set_has_weights_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::TensorParameter& weights_output(const LSTMParameter* msg);
  static void set_has_weights_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::prediction::TensorParameter& bias_input(const LSTMParameter* msg);
  static void set_has_bias_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::prediction::TensorParameter& bias_forget(const LSTMParameter* msg);
  static void set_has_bias_forget(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::prediction::TensorParameter& bias_cell(const LSTMParameter* msg);
  static void set_has_bias_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::prediction::TensorParameter& bias_output(const LSTMParameter* msg);
  static void set_has_bias_output(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_input(const LSTMParameter* msg);
  static void set_has_recurrent_weights_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_forget(const LSTMParameter* msg);
  static void set_has_recurrent_weights_forget(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_cell(const LSTMParameter* msg);
  static void set_has_recurrent_weights_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::prediction::TensorParameter& recurrent_weights_output(const LSTMParameter* msg);
  static void set_has_recurrent_weights_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_input(const LSTMParameter* msg) {
  return *msg->weights_input_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_forget(const LSTMParameter* msg) {
  return *msg->weights_forget_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_cell(const LSTMParameter* msg) {
  return *msg->weights_cell_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::weights_output(const LSTMParameter* msg) {
  return *msg->weights_output_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_input(const LSTMParameter* msg) {
  return *msg->bias_input_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_forget(const LSTMParameter* msg) {
  return *msg->bias_forget_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_cell(const LSTMParameter* msg) {
  return *msg->bias_cell_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::bias_output(const LSTMParameter* msg) {
  return *msg->bias_output_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_input(const LSTMParameter* msg) {
  return *msg->recurrent_weights_input_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_forget(const LSTMParameter* msg) {
  return *msg->recurrent_weights_forget_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_cell(const LSTMParameter* msg) {
  return *msg->recurrent_weights_cell_;
}
const ::apollo::prediction::TensorParameter&
LSTMParameter::_Internal::recurrent_weights_output(const LSTMParameter* msg) {
  return *msg->recurrent_weights_output_;
}
LSTMParameter::LSTMParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LSTMParameter)
}
LSTMParameter::LSTMParameter(const LSTMParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activation()) {
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
  recurrent_activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recurrent_activation()) {
    recurrent_activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recurrent_activation_);
  }
  if (from._internal_has_weights_input()) {
    weights_input_ = new ::apollo::prediction::TensorParameter(*from.weights_input_);
  } else {
    weights_input_ = nullptr;
  }
  if (from._internal_has_weights_forget()) {
    weights_forget_ = new ::apollo::prediction::TensorParameter(*from.weights_forget_);
  } else {
    weights_forget_ = nullptr;
  }
  if (from._internal_has_weights_cell()) {
    weights_cell_ = new ::apollo::prediction::TensorParameter(*from.weights_cell_);
  } else {
    weights_cell_ = nullptr;
  }
  if (from._internal_has_weights_output()) {
    weights_output_ = new ::apollo::prediction::TensorParameter(*from.weights_output_);
  } else {
    weights_output_ = nullptr;
  }
  if (from._internal_has_bias_input()) {
    bias_input_ = new ::apollo::prediction::TensorParameter(*from.bias_input_);
  } else {
    bias_input_ = nullptr;
  }
  if (from._internal_has_bias_forget()) {
    bias_forget_ = new ::apollo::prediction::TensorParameter(*from.bias_forget_);
  } else {
    bias_forget_ = nullptr;
  }
  if (from._internal_has_bias_cell()) {
    bias_cell_ = new ::apollo::prediction::TensorParameter(*from.bias_cell_);
  } else {
    bias_cell_ = nullptr;
  }
  if (from._internal_has_bias_output()) {
    bias_output_ = new ::apollo::prediction::TensorParameter(*from.bias_output_);
  } else {
    bias_output_ = nullptr;
  }
  if (from._internal_has_recurrent_weights_input()) {
    recurrent_weights_input_ = new ::apollo::prediction::TensorParameter(*from.recurrent_weights_input_);
  } else {
    recurrent_weights_input_ = nullptr;
  }
  if (from._internal_has_recurrent_weights_forget()) {
    recurrent_weights_forget_ = new ::apollo::prediction::TensorParameter(*from.recurrent_weights_forget_);
  } else {
    recurrent_weights_forget_ = nullptr;
  }
  if (from._internal_has_recurrent_weights_cell()) {
    recurrent_weights_cell_ = new ::apollo::prediction::TensorParameter(*from.recurrent_weights_cell_);
  } else {
    recurrent_weights_cell_ = nullptr;
  }
  if (from._internal_has_recurrent_weights_output()) {
    recurrent_weights_output_ = new ::apollo::prediction::TensorParameter(*from.recurrent_weights_output_);
  } else {
    recurrent_weights_output_ = nullptr;
  }
  ::memcpy(&units_, &from.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_forget_bias_) -
    reinterpret_cast<char*>(&units_)) + sizeof(unit_forget_bias_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LSTMParameter)
}

void LSTMParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recurrent_activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&weights_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&implementation_) -
      reinterpret_cast<char*>(&weights_input_)) + sizeof(implementation_));
  unit_forget_bias_ = true;
}

LSTMParameter::~LSTMParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LSTMParameter)
  SharedDtor();
}

void LSTMParameter::SharedDtor() {
  activation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recurrent_activation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete weights_input_;
  if (this != internal_default_instance()) delete weights_forget_;
  if (this != internal_default_instance()) delete weights_cell_;
  if (this != internal_default_instance()) delete weights_output_;
  if (this != internal_default_instance()) delete bias_input_;
  if (this != internal_default_instance()) delete bias_forget_;
  if (this != internal_default_instance()) delete bias_cell_;
  if (this != internal_default_instance()) delete bias_output_;
  if (this != internal_default_instance()) delete recurrent_weights_input_;
  if (this != internal_default_instance()) delete recurrent_weights_forget_;
  if (this != internal_default_instance()) delete recurrent_weights_cell_;
  if (this != internal_default_instance()) delete recurrent_weights_output_;
}

void LSTMParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LSTMParameter& LSTMParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LSTMParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void LSTMParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LSTMParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      activation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      recurrent_activation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(weights_input_ != nullptr);
      weights_input_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(weights_forget_ != nullptr);
      weights_forget_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(weights_cell_ != nullptr);
      weights_cell_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(weights_output_ != nullptr);
      weights_output_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bias_input_ != nullptr);
      bias_input_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(bias_forget_ != nullptr);
      bias_forget_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(bias_cell_ != nullptr);
      bias_cell_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(bias_output_ != nullptr);
      bias_output_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(recurrent_weights_input_ != nullptr);
      recurrent_weights_input_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(recurrent_weights_forget_ != nullptr);
      recurrent_weights_forget_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(recurrent_weights_cell_ != nullptr);
      recurrent_weights_cell_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(recurrent_weights_output_ != nullptr);
      recurrent_weights_output_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&return_sequences_) -
        reinterpret_cast<char*>(&units_)) + sizeof(return_sequences_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&stateful_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&implementation_) -
        reinterpret_cast<char*>(&stateful_)) + sizeof(implementation_));
    unit_forget_bias_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LSTMParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_units(&has_bits);
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool return_sequences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_return_sequences(&has_bits);
          return_sequences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stateful = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stateful(&has_bits);
          stateful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_activation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LSTMParameter.activation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string recurrent_activation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_recurrent_activation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LSTMParameter.recurrent_activation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bias = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_bias(&has_bits);
          use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unit_forget_bias = 7 [default = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_unit_forget_bias(&has_bits);
          unit_forget_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool go_backwards = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_go_backwards(&has_bits);
          go_backwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unroll = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_unroll(&has_bits);
          unroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 implementation = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_implementation(&has_bits);
          implementation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_input = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_forget = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_forget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_cell = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter weights_output = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_input = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_forget = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_forget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_cell = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter bias_output = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_forget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_recurrent_weights_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LSTMParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LSTMParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 units = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // optional bool return_sequences = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_return_sequences(), target);
  }

  // optional bool stateful = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_stateful(), target);
  }

  // optional string activation = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LSTMParameter.activation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activation(), target);
  }

  // optional string recurrent_activation = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recurrent_activation().data(), static_cast<int>(this->_internal_recurrent_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LSTMParameter.recurrent_activation");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_recurrent_activation(), target);
  }

  // optional bool use_bias = 6;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_bias(), target);
  }

  // optional bool unit_forget_bias = 7 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_unit_forget_bias(), target);
  }

  // optional bool go_backwards = 8 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_go_backwards(), target);
  }

  // optional bool unroll = 9 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_unroll(), target);
  }

  // optional int32 implementation = 10 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_implementation(), target);
  }

  // optional .apollo.prediction.TensorParameter weights_input = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::weights_input(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter weights_forget = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::weights_forget(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter weights_cell = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::weights_cell(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter weights_output = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::weights_output(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_input = 19;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::bias_input(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_forget = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::bias_forget(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_cell = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::bias_cell(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter bias_output = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::bias_output(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::recurrent_weights_input(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::recurrent_weights_forget(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::recurrent_weights_cell(this), target, stream);
  }

  // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::recurrent_weights_output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LSTMParameter)
  return target;
}

size_t LSTMParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LSTMParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string activation = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation());
    }

    // optional string recurrent_activation = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recurrent_activation());
    }

    // optional .apollo.prediction.TensorParameter weights_input = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_input_);
    }

    // optional .apollo.prediction.TensorParameter weights_forget = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_forget_);
    }

    // optional .apollo.prediction.TensorParameter weights_cell = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_cell_);
    }

    // optional .apollo.prediction.TensorParameter weights_output = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_output_);
    }

    // optional .apollo.prediction.TensorParameter bias_input = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_input_);
    }

    // optional .apollo.prediction.TensorParameter bias_forget = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_forget_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.prediction.TensorParameter bias_cell = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_cell_);
    }

    // optional .apollo.prediction.TensorParameter bias_output = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_output_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_input = 25;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recurrent_weights_input_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_forget = 26;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recurrent_weights_forget_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_cell = 27;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recurrent_weights_cell_);
    }

    // optional .apollo.prediction.TensorParameter recurrent_weights_output = 28;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recurrent_weights_output_);
    }

    // optional int32 units = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_units());
    }

    // optional bool return_sequences = 2;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional bool stateful = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool use_bias = 6;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool go_backwards = 8 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool unroll = 9 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional int32 implementation = 10 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_implementation());
    }

    // optional bool unit_forget_bias = 7 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LSTMParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LSTMParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LSTMParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LSTMParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LSTMParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LSTMParameter)
    MergeFrom(*source);
  }
}

void LSTMParameter::MergeFrom(const LSTMParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LSTMParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      recurrent_activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recurrent_activation_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_weights_input()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_input());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_weights_forget()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_forget());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_weights_cell()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_cell());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_weights_output()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_weights_output());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_bias_input()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_input());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_bias_forget()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_forget());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_bias_cell()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_cell());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_bias_output()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_bias_output());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_recurrent_weights_input()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_input());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_recurrent_weights_forget()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_forget());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_recurrent_weights_cell()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_cell());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_recurrent_weights_output()->::apollo::prediction::TensorParameter::MergeFrom(from._internal_recurrent_weights_output());
    }
    if (cached_has_bits & 0x00004000u) {
      units_ = from.units_;
    }
    if (cached_has_bits & 0x00008000u) {
      return_sequences_ = from.return_sequences_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      stateful_ = from.stateful_;
    }
    if (cached_has_bits & 0x00020000u) {
      use_bias_ = from.use_bias_;
    }
    if (cached_has_bits & 0x00040000u) {
      go_backwards_ = from.go_backwards_;
    }
    if (cached_has_bits & 0x00080000u) {
      unroll_ = from.unroll_;
    }
    if (cached_has_bits & 0x00100000u) {
      implementation_ = from.implementation_;
    }
    if (cached_has_bits & 0x00200000u) {
      unit_forget_bias_ = from.unit_forget_bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LSTMParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LSTMParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSTMParameter::CopyFrom(const LSTMParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LSTMParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSTMParameter::IsInitialized() const {
  return true;
}

void LSTMParameter::InternalSwap(LSTMParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activation_.Swap(&other->activation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recurrent_activation_.Swap(&other->recurrent_activation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weights_input_, other->weights_input_);
  swap(weights_forget_, other->weights_forget_);
  swap(weights_cell_, other->weights_cell_);
  swap(weights_output_, other->weights_output_);
  swap(bias_input_, other->bias_input_);
  swap(bias_forget_, other->bias_forget_);
  swap(bias_cell_, other->bias_cell_);
  swap(bias_output_, other->bias_output_);
  swap(recurrent_weights_input_, other->recurrent_weights_input_);
  swap(recurrent_weights_forget_, other->recurrent_weights_forget_);
  swap(recurrent_weights_cell_, other->recurrent_weights_cell_);
  swap(recurrent_weights_output_, other->recurrent_weights_output_);
  swap(units_, other->units_);
  swap(return_sequences_, other->return_sequences_);
  swap(stateful_, other->stateful_);
  swap(use_bias_, other->use_bias_);
  swap(go_backwards_, other->go_backwards_);
  swap(unroll_, other->unroll_);
  swap(implementation_, other->implementation_);
  swap(unit_forget_bias_, other->unit_forget_bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LSTMParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivationParameter::InitAsDefaultInstance() {
}
class ActivationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivationParameter>()._has_bits_);
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActivationParameter::ActivationParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ActivationParameter)
}
ActivationParameter::ActivationParameter(const ActivationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activation()) {
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ActivationParameter)
}

void ActivationParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActivationParameter::~ActivationParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ActivationParameter)
  SharedDtor();
}

void ActivationParameter::SharedDtor() {
  activation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivationParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationParameter& ActivationParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void ActivationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ActivationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    activation_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ActivationParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_activation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.ActivationParameter.activation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ActivationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string activation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.ActivationParameter.activation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ActivationParameter)
  return target;
}

size_t ActivationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ActivationParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string activation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ActivationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ActivationParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ActivationParameter)
    MergeFrom(*source);
  }
}

void ActivationParameter::MergeFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ActivationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activation()) {
    _has_bits_[0] |= 0x00000001u;
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
}

void ActivationParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ActivationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationParameter::CopyFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ActivationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationParameter::IsInitialized() const {
  return true;
}

void ActivationParameter::InternalSwap(ActivationParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activation_.Swap(&other->activation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlattenParameter::InitAsDefaultInstance() {
}
class FlattenParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<FlattenParameter>()._has_bits_);
};

FlattenParameter::FlattenParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.FlattenParameter)
}
FlattenParameter::FlattenParameter(const FlattenParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FlattenParameter)
}

void FlattenParameter::SharedCtor() {
}

FlattenParameter::~FlattenParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.FlattenParameter)
  SharedDtor();
}

void FlattenParameter::SharedDtor() {
}

void FlattenParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlattenParameter& FlattenParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlattenParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void FlattenParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.FlattenParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FlattenParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlattenParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.FlattenParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.FlattenParameter)
  return target;
}

size_t FlattenParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.FlattenParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlattenParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FlattenParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlattenParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.FlattenParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.FlattenParameter)
    MergeFrom(*source);
  }
}

void FlattenParameter::MergeFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.FlattenParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FlattenParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlattenParameter::CopyFrom(const FlattenParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.FlattenParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlattenParameter::IsInitialized() const {
  return true;
}

void FlattenParameter::InternalSwap(FlattenParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlattenParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConcatenateParameter::InitAsDefaultInstance() {
}
class ConcatenateParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcatenateParameter>()._has_bits_);
  static void set_has_axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConcatenateParameter::ConcatenateParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ConcatenateParameter)
}
ConcatenateParameter::ConcatenateParameter(const ConcatenateParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  axis_ = from.axis_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ConcatenateParameter)
}

void ConcatenateParameter::SharedCtor() {
  axis_ = 0;
}

ConcatenateParameter::~ConcatenateParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ConcatenateParameter)
  SharedDtor();
}

void ConcatenateParameter::SharedDtor() {
}

void ConcatenateParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConcatenateParameter& ConcatenateParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConcatenateParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void ConcatenateParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ConcatenateParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConcatenateParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_axis(&has_bits);
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcatenateParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ConcatenateParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 axis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ConcatenateParameter)
  return target;
}

size_t ConcatenateParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ConcatenateParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 axis = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatenateParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ConcatenateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatenateParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConcatenateParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ConcatenateParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ConcatenateParameter)
    MergeFrom(*source);
  }
}

void ConcatenateParameter::MergeFrom(const ConcatenateParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ConcatenateParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_axis()) {
    _internal_set_axis(from._internal_axis());
  }
}

void ConcatenateParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ConcatenateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatenateParameter::CopyFrom(const ConcatenateParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ConcatenateParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatenateParameter::IsInitialized() const {
  return true;
}

void ConcatenateParameter::InternalSwap(ConcatenateParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(axis_, other->axis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcatenateParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LayerParameter::InitAsDefaultInstance() {
  ::apollo::prediction::_LayerParameter_default_instance_.input_ = const_cast< ::apollo::prediction::InputParameter*>(
      ::apollo::prediction::InputParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.activation_ = const_cast< ::apollo::prediction::ActivationParameter*>(
      ::apollo::prediction::ActivationParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.dense_ = const_cast< ::apollo::prediction::DenseParameter*>(
      ::apollo::prediction::DenseParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.batch_normalization_ = const_cast< ::apollo::prediction::BatchNormalizationParameter*>(
      ::apollo::prediction::BatchNormalizationParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.lstm_ = const_cast< ::apollo::prediction::LSTMParameter*>(
      ::apollo::prediction::LSTMParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.flatten_ = const_cast< ::apollo::prediction::FlattenParameter*>(
      ::apollo::prediction::FlattenParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.concatenate_ = const_cast< ::apollo::prediction::ConcatenateParameter*>(
      ::apollo::prediction::ConcatenateParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.conv1d_ = const_cast< ::apollo::prediction::Conv1dParameter*>(
      ::apollo::prediction::Conv1dParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.maxpool1d_ = const_cast< ::apollo::prediction::MaxPool1dParameter*>(
      ::apollo::prediction::MaxPool1dParameter::internal_default_instance());
  ::apollo::prediction::_LayerParameter_default_instance_.avgpool1d_ = const_cast< ::apollo::prediction::AvgPool1dParameter*>(
      ::apollo::prediction::AvgPool1dParameter::internal_default_instance());
}
class LayerParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LayerParameter>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::InputParameter& input(const LayerParameter* msg);
  static const ::apollo::prediction::ActivationParameter& activation(const LayerParameter* msg);
  static const ::apollo::prediction::DenseParameter& dense(const LayerParameter* msg);
  static const ::apollo::prediction::BatchNormalizationParameter& batch_normalization(const LayerParameter* msg);
  static const ::apollo::prediction::LSTMParameter& lstm(const LayerParameter* msg);
  static const ::apollo::prediction::FlattenParameter& flatten(const LayerParameter* msg);
  static const ::apollo::prediction::ConcatenateParameter& concatenate(const LayerParameter* msg);
  static const ::apollo::prediction::Conv1dParameter& conv1d(const LayerParameter* msg);
  static const ::apollo::prediction::MaxPool1dParameter& maxpool1d(const LayerParameter* msg);
  static const ::apollo::prediction::AvgPool1dParameter& avgpool1d(const LayerParameter* msg);
};

const ::apollo::prediction::InputParameter&
LayerParameter::_Internal::input(const LayerParameter* msg) {
  return *msg->oneof_layers_.input_;
}
const ::apollo::prediction::ActivationParameter&
LayerParameter::_Internal::activation(const LayerParameter* msg) {
  return *msg->oneof_layers_.activation_;
}
const ::apollo::prediction::DenseParameter&
LayerParameter::_Internal::dense(const LayerParameter* msg) {
  return *msg->oneof_layers_.dense_;
}
const ::apollo::prediction::BatchNormalizationParameter&
LayerParameter::_Internal::batch_normalization(const LayerParameter* msg) {
  return *msg->oneof_layers_.batch_normalization_;
}
const ::apollo::prediction::LSTMParameter&
LayerParameter::_Internal::lstm(const LayerParameter* msg) {
  return *msg->oneof_layers_.lstm_;
}
const ::apollo::prediction::FlattenParameter&
LayerParameter::_Internal::flatten(const LayerParameter* msg) {
  return *msg->oneof_layers_.flatten_;
}
const ::apollo::prediction::ConcatenateParameter&
LayerParameter::_Internal::concatenate(const LayerParameter* msg) {
  return *msg->oneof_layers_.concatenate_;
}
const ::apollo::prediction::Conv1dParameter&
LayerParameter::_Internal::conv1d(const LayerParameter* msg) {
  return *msg->oneof_layers_.conv1d_;
}
const ::apollo::prediction::MaxPool1dParameter&
LayerParameter::_Internal::maxpool1d(const LayerParameter* msg) {
  return *msg->oneof_layers_.maxpool1d_;
}
const ::apollo::prediction::AvgPool1dParameter&
LayerParameter::_Internal::avgpool1d(const LayerParameter* msg) {
  return *msg->oneof_layers_.avgpool1d_;
}
void LayerParameter::set_allocated_input(::apollo::prediction::InputParameter* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    set_has_input();
    oneof_layers_.input_ = input;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.input)
}
void LayerParameter::set_allocated_activation(::apollo::prediction::ActivationParameter* activation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (activation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation, submessage_arena);
    }
    set_has_activation();
    oneof_layers_.activation_ = activation;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.activation)
}
void LayerParameter::set_allocated_dense(::apollo::prediction::DenseParameter* dense) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (dense) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dense = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dense, submessage_arena);
    }
    set_has_dense();
    oneof_layers_.dense_ = dense;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.dense)
}
void LayerParameter::set_allocated_batch_normalization(::apollo::prediction::BatchNormalizationParameter* batch_normalization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (batch_normalization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      batch_normalization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batch_normalization, submessage_arena);
    }
    set_has_batch_normalization();
    oneof_layers_.batch_normalization_ = batch_normalization;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.batch_normalization)
}
void LayerParameter::set_allocated_lstm(::apollo::prediction::LSTMParameter* lstm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (lstm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lstm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lstm, submessage_arena);
    }
    set_has_lstm();
    oneof_layers_.lstm_ = lstm;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.lstm)
}
void LayerParameter::set_allocated_flatten(::apollo::prediction::FlattenParameter* flatten) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (flatten) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flatten = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flatten, submessage_arena);
    }
    set_has_flatten();
    oneof_layers_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.flatten)
}
void LayerParameter::set_allocated_concatenate(::apollo::prediction::ConcatenateParameter* concatenate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (concatenate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concatenate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concatenate, submessage_arena);
    }
    set_has_concatenate();
    oneof_layers_.concatenate_ = concatenate;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.concatenate)
}
void LayerParameter::set_allocated_conv1d(::apollo::prediction::Conv1dParameter* conv1d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (conv1d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv1d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv1d, submessage_arena);
    }
    set_has_conv1d();
    oneof_layers_.conv1d_ = conv1d;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.conv1d)
}
void LayerParameter::set_allocated_maxpool1d(::apollo::prediction::MaxPool1dParameter* maxpool1d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (maxpool1d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maxpool1d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxpool1d, submessage_arena);
    }
    set_has_maxpool1d();
    oneof_layers_.maxpool1d_ = maxpool1d;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.maxpool1d)
}
void LayerParameter::set_allocated_avgpool1d(::apollo::prediction::AvgPool1dParameter* avgpool1d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_layers();
  if (avgpool1d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avgpool1d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avgpool1d, submessage_arena);
    }
    set_has_avgpool1d();
    oneof_layers_.avgpool1d_ = avgpool1d;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LayerParameter.avgpool1d)
}
LayerParameter::LayerParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LayerParameter)
}
LayerParameter::LayerParameter(const LayerParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  order_number_ = from.order_number_;
  clear_has_oneof_layers();
  switch (from.oneof_layers_case()) {
    case kInput: {
      _internal_mutable_input()->::apollo::prediction::InputParameter::MergeFrom(from._internal_input());
      break;
    }
    case kActivation: {
      _internal_mutable_activation()->::apollo::prediction::ActivationParameter::MergeFrom(from._internal_activation());
      break;
    }
    case kDense: {
      _internal_mutable_dense()->::apollo::prediction::DenseParameter::MergeFrom(from._internal_dense());
      break;
    }
    case kBatchNormalization: {
      _internal_mutable_batch_normalization()->::apollo::prediction::BatchNormalizationParameter::MergeFrom(from._internal_batch_normalization());
      break;
    }
    case kLstm: {
      _internal_mutable_lstm()->::apollo::prediction::LSTMParameter::MergeFrom(from._internal_lstm());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::apollo::prediction::FlattenParameter::MergeFrom(from._internal_flatten());
      break;
    }
    case kConcatenate: {
      _internal_mutable_concatenate()->::apollo::prediction::ConcatenateParameter::MergeFrom(from._internal_concatenate());
      break;
    }
    case kConv1D: {
      _internal_mutable_conv1d()->::apollo::prediction::Conv1dParameter::MergeFrom(from._internal_conv1d());
      break;
    }
    case kMaxpool1D: {
      _internal_mutable_maxpool1d()->::apollo::prediction::MaxPool1dParameter::MergeFrom(from._internal_maxpool1d());
      break;
    }
    case kAvgpool1D: {
      _internal_mutable_avgpool1d()->::apollo::prediction::AvgPool1dParameter::MergeFrom(from._internal_avgpool1d());
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LayerParameter)
}

void LayerParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_number_ = 0;
  clear_has_oneof_layers();
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_oneof_layers()) {
    clear_oneof_layers();
  }
}

void LayerParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayerParameter& LayerParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base);
  return *internal_default_instance();
}


void LayerParameter::clear_oneof_layers() {
// @@protoc_insertion_point(one_of_clear_start:apollo.prediction.LayerParameter)
  switch (oneof_layers_case()) {
    case kInput: {
      delete oneof_layers_.input_;
      break;
    }
    case kActivation: {
      delete oneof_layers_.activation_;
      break;
    }
    case kDense: {
      delete oneof_layers_.dense_;
      break;
    }
    case kBatchNormalization: {
      delete oneof_layers_.batch_normalization_;
      break;
    }
    case kLstm: {
      delete oneof_layers_.lstm_;
      break;
    }
    case kFlatten: {
      delete oneof_layers_.flatten_;
      break;
    }
    case kConcatenate: {
      delete oneof_layers_.concatenate_;
      break;
    }
    case kConv1D: {
      delete oneof_layers_.conv1d_;
      break;
    }
    case kMaxpool1D: {
      delete oneof_layers_.maxpool1d_;
      break;
    }
    case kAvgpool1D: {
      delete oneof_layers_.avgpool1d_;
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_LAYERS_NOT_SET;
}


void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  order_number_ = 0;
  clear_oneof_layers();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayerParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LayerParameter.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LayerParameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 order_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order_number(&has_bits);
          order_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.InputParameter input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ActivationParameter activation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.DenseParameter dense = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dense(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.BatchNormalizationParameter batch_normalization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_normalization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.LSTMParameter lstm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lstm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.FlattenParameter flatten = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatten(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ConcatenateParameter concatenate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_concatenate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.Conv1dParameter conv1d = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.MaxPool1dParameter maxpool1d = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_maxpool1d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.AvgPool1dParameter avgpool1d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_avgpool1d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayerParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LayerParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LayerParameter.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LayerParameter.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 order_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_number(), target);
  }

  switch (oneof_layers_case()) {
    case kInput: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::input(this), target, stream);
      break;
    }
    case kActivation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::activation(this), target, stream);
      break;
    }
    case kDense: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::dense(this), target, stream);
      break;
    }
    case kBatchNormalization: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::batch_normalization(this), target, stream);
      break;
    }
    case kLstm: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::lstm(this), target, stream);
      break;
    }
    case kFlatten: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::flatten(this), target, stream);
      break;
    }
    case kConcatenate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::concatenate(this), target, stream);
      break;
    }
    case kConv1D: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::conv1d(this), target, stream);
      break;
    }
    case kMaxpool1D: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::maxpool1d(this), target, stream);
      break;
    }
    case kAvgpool1D: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::avgpool1d(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LayerParameter)
  return target;
}

size_t LayerParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LayerParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 order_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_order_number());
    }

  }
  switch (oneof_layers_case()) {
    // optional .apollo.prediction.InputParameter input = 4;
    case kInput: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.input_);
      break;
    }
    // optional .apollo.prediction.ActivationParameter activation = 5;
    case kActivation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.activation_);
      break;
    }
    // optional .apollo.prediction.DenseParameter dense = 6;
    case kDense: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.dense_);
      break;
    }
    // optional .apollo.prediction.BatchNormalizationParameter batch_normalization = 7;
    case kBatchNormalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.batch_normalization_);
      break;
    }
    // optional .apollo.prediction.LSTMParameter lstm = 8;
    case kLstm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.lstm_);
      break;
    }
    // optional .apollo.prediction.FlattenParameter flatten = 9;
    case kFlatten: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.flatten_);
      break;
    }
    // optional .apollo.prediction.ConcatenateParameter concatenate = 10;
    case kConcatenate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.concatenate_);
      break;
    }
    // optional .apollo.prediction.Conv1dParameter conv1d = 11;
    case kConv1D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.conv1d_);
      break;
    }
    // optional .apollo.prediction.MaxPool1dParameter maxpool1d = 12;
    case kMaxpool1D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.maxpool1d_);
      break;
    }
    // optional .apollo.prediction.AvgPool1dParameter avgpool1d = 13;
    case kAvgpool1D: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_layers_.avgpool1d_);
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayerParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LayerParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LayerParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LayerParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LayerParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      order_number_ = from.order_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.oneof_layers_case()) {
    case kInput: {
      _internal_mutable_input()->::apollo::prediction::InputParameter::MergeFrom(from._internal_input());
      break;
    }
    case kActivation: {
      _internal_mutable_activation()->::apollo::prediction::ActivationParameter::MergeFrom(from._internal_activation());
      break;
    }
    case kDense: {
      _internal_mutable_dense()->::apollo::prediction::DenseParameter::MergeFrom(from._internal_dense());
      break;
    }
    case kBatchNormalization: {
      _internal_mutable_batch_normalization()->::apollo::prediction::BatchNormalizationParameter::MergeFrom(from._internal_batch_normalization());
      break;
    }
    case kLstm: {
      _internal_mutable_lstm()->::apollo::prediction::LSTMParameter::MergeFrom(from._internal_lstm());
      break;
    }
    case kFlatten: {
      _internal_mutable_flatten()->::apollo::prediction::FlattenParameter::MergeFrom(from._internal_flatten());
      break;
    }
    case kConcatenate: {
      _internal_mutable_concatenate()->::apollo::prediction::ConcatenateParameter::MergeFrom(from._internal_concatenate());
      break;
    }
    case kConv1D: {
      _internal_mutable_conv1d()->::apollo::prediction::Conv1dParameter::MergeFrom(from._internal_conv1d());
      break;
    }
    case kMaxpool1D: {
      _internal_mutable_maxpool1d()->::apollo::prediction::MaxPool1dParameter::MergeFrom(from._internal_maxpool1d());
      break;
    }
    case kAvgpool1D: {
      _internal_mutable_avgpool1d()->::apollo::prediction::AvgPool1dParameter::MergeFrom(from._internal_avgpool1d());
      break;
    }
    case ONEOF_LAYERS_NOT_SET: {
      break;
    }
  }
}

void LayerParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {
  return true;
}

void LayerParameter::InternalSwap(LayerParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_number_, other->order_number_);
  swap(oneof_layers_, other->oneof_layers_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayerParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::TensorParameter* Arena::CreateMaybeMessage< ::apollo::prediction::TensorParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::TensorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::InputParameter* Arena::CreateMaybeMessage< ::apollo::prediction::InputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::InputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::DenseParameter* Arena::CreateMaybeMessage< ::apollo::prediction::DenseParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::DenseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Conv1dParameter* Arena::CreateMaybeMessage< ::apollo::prediction::Conv1dParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Conv1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::MaxPool1dParameter* Arena::CreateMaybeMessage< ::apollo::prediction::MaxPool1dParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::MaxPool1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::AvgPool1dParameter* Arena::CreateMaybeMessage< ::apollo::prediction::AvgPool1dParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::AvgPool1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::BatchNormalizationParameter* Arena::CreateMaybeMessage< ::apollo::prediction::BatchNormalizationParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::BatchNormalizationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LSTMParameter* Arena::CreateMaybeMessage< ::apollo::prediction::LSTMParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LSTMParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ActivationParameter* Arena::CreateMaybeMessage< ::apollo::prediction::ActivationParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ActivationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::FlattenParameter* Arena::CreateMaybeMessage< ::apollo::prediction::FlattenParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::FlattenParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ConcatenateParameter* Arena::CreateMaybeMessage< ::apollo::prediction::ConcatenateParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ConcatenateParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LayerParameter* Arena::CreateMaybeMessage< ::apollo::prediction::LayerParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LayerParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
