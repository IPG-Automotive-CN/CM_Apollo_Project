// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_obstacle.proto

#include "modules/prediction/proto/prediction_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PerceptionObstacle_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scenario_modules_2fprediction_2fproto_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto;
namespace apollo {
namespace prediction {
class ObstacleIntentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleIntent> _instance;
} _ObstacleIntent_default_instance_;
class IntentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Intent> _instance;
} _Intent_default_instance_;
class PredictionObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictionObstacle> _instance;
} _PredictionObstacle_default_instance_;
class PredictionObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictionObstacles> _instance;
} _PredictionObstacles_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Intent_default_instance_;
    new (ptr) ::apollo::prediction::Intent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Intent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstacleIntent_default_instance_;
    new (ptr) ::apollo::prediction::ObstacleIntent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstacleIntent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto}, {}};

static void InitDefaultsscc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_PredictionObstacle_default_instance_;
    new (ptr) ::apollo::prediction::PredictionObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::PredictionObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto}, {
      &scc_info_PerceptionObstacle_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.base,
      &scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto.base,
      &scc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
      &scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto.base,}};

static void InitDefaultsscc_info_PredictionObstacles_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_PredictionObstacles_default_instance_;
    new (ptr) ::apollo::prediction::PredictionObstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::PredictionObstacles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PredictionObstacles_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PredictionObstacles_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
      &scc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
      &scc_info_Scenario_modules_2fprediction_2fproto_2fscenario_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleIntent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleIntent, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Intent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Intent, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, predicted_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, intent_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacle, is_static_),
  0,
  3,
  4,
  ~0u,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, prediction_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, perception_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, intent_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionObstacles, scenario_),
  0,
  ~0u,
  5,
  3,
  4,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::prediction::ObstacleIntent)},
  { 7, 13, sizeof(::apollo::prediction::Intent)},
  { 14, 26, sizeof(::apollo::prediction::PredictionObstacle)},
  { 33, 45, sizeof(::apollo::prediction::PredictionObstacles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_ObstacleIntent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Intent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_PredictionObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_PredictionObstacles_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/prediction/proto/prediction_ob"
  "stacle.proto\022\021apollo.prediction\032%modules"
  "/common/proto/error_code.proto\032!modules/"
  "common/proto/header.proto\032\'modules/predi"
  "ction/proto/scenario.proto\0322modules/perc"
  "eption/proto/perception_obstacle.proto\032&"
  "modules/prediction/proto/feature.proto\"\366"
  "\001\n\016ObstacleIntent\022=\n\004type\030\001 \001(\0162&.apollo"
  ".prediction.ObstacleIntent.Type:\007UNKNOWN"
  "\"\244\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\016\n\nSTAT"
  "IONARY\020\002\022\n\n\006MOVING\020\003\022\017\n\013CHANGE_LANE\020\004\022\024\n"
  "\020LOW_ACCELERATION\020\005\022\025\n\021HIGH_ACCELERATION"
  "\020\006\022\024\n\020LOW_DECELERATION\020\007\022\025\n\021HIGH_DECELER"
  "ATION\020\010\"{\n\006Intent\0225\n\004type\030\001 \001(\0162\036.apollo"
  ".prediction.Intent.Type:\007UNKNOWN\":\n\004Type"
  "\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\n\n\006CRUISE\020\002\022\017\n\013C"
  "HANGE_LANE\020\003\"\274\002\n\022PredictionObstacle\022B\n\023p"
  "erception_obstacle\030\001 \001(\0132%.apollo.percep"
  "tion.PerceptionObstacle\022\021\n\ttimestamp\030\002 \001"
  "(\001\022\030\n\020predicted_period\030\003 \001(\001\0221\n\ntrajecto"
  "ry\030\004 \003(\0132\035.apollo.prediction.Trajectory\022"
  "1\n\006intent\030\005 \001(\0132!.apollo.prediction.Obst"
  "acleIntent\0225\n\010priority\030\006 \001(\0132#.apollo.pr"
  "ediction.ObstaclePriority\022\030\n\tis_static\030\007"
  " \001(\010:\005false\"\303\002\n\023PredictionObstacles\022%\n\006h"
  "eader\030\001 \001(\0132\025.apollo.common.Header\022B\n\023pr"
  "ediction_obstacle\030\002 \003(\0132%.apollo.predict"
  "ion.PredictionObstacle\0227\n\025perception_err"
  "or_code\030\003 \001(\0162\030.apollo.common.ErrorCode\022"
  "\027\n\017start_timestamp\030\004 \001(\001\022\025\n\rend_timestam"
  "p\030\005 \001(\001\022)\n\006intent\030\006 \001(\0132\031.apollo.predict"
  "ion.Intent\022-\n\010scenario\030\007 \001(\0132\033.apollo.pr"
  "ediction.Scenario"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fscenario_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_sccs[4] = {
  &scc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
  &scc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
  &scc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
  &scc_info_PredictionObstacles_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once;
static bool descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto = {
  &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_initialized, descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto, "modules/prediction/proto/prediction_obstacle.proto", 1297,
  &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto, 4, file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto), true);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleIntent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[0];
}
bool ObstacleIntent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleIntent_Type ObstacleIntent::UNKNOWN;
constexpr ObstacleIntent_Type ObstacleIntent::STOP;
constexpr ObstacleIntent_Type ObstacleIntent::STATIONARY;
constexpr ObstacleIntent_Type ObstacleIntent::MOVING;
constexpr ObstacleIntent_Type ObstacleIntent::CHANGE_LANE;
constexpr ObstacleIntent_Type ObstacleIntent::LOW_ACCELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::HIGH_ACCELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::LOW_DECELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::HIGH_DECELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::Type_MIN;
constexpr ObstacleIntent_Type ObstacleIntent::Type_MAX;
constexpr int ObstacleIntent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto[1];
}
bool Intent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Intent_Type Intent::UNKNOWN;
constexpr Intent_Type Intent::STOP;
constexpr Intent_Type Intent::CRUISE;
constexpr Intent_Type Intent::CHANGE_LANE;
constexpr Intent_Type Intent::Type_MIN;
constexpr Intent_Type Intent::Type_MAX;
constexpr int Intent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ObstacleIntent::InitAsDefaultInstance() {
}
class ObstacleIntent::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleIntent>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstacleIntent::ObstacleIntent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleIntent)
}
ObstacleIntent::ObstacleIntent(const ObstacleIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleIntent)
}

void ObstacleIntent::SharedCtor() {
  type_ = 0;
}

ObstacleIntent::~ObstacleIntent() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleIntent)
  SharedDtor();
}

void ObstacleIntent::SharedDtor() {
}

void ObstacleIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleIntent& ObstacleIntent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleIntent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void ObstacleIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleIntent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleIntent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::prediction::ObstacleIntent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleIntent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleIntent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleIntent)
  return target;
}

size_t ObstacleIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleIntent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleIntent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleIntent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleIntent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleIntent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleIntent)
    MergeFrom(*source);
  }
}

void ObstacleIntent::MergeFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void ObstacleIntent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleIntent::CopyFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleIntent::IsInitialized() const {
  return true;
}

void ObstacleIntent::InternalSwap(ObstacleIntent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleIntent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Intent::InitAsDefaultInstance() {
}
class Intent::_Internal {
 public:
  using HasBits = decltype(std::declval<Intent>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Intent::Intent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Intent)
}
Intent::Intent(const Intent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Intent)
}

void Intent::SharedCtor() {
  type_ = 0;
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
}

void Intent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intent& Intent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Intent_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Intent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Intent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::Intent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::prediction::Intent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Intent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Intent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Intent)
  return target;
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Intent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  const Intent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Intent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Intent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Intent)
    MergeFrom(*source);
  }
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void Intent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::InternalSwap(Intent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Intent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictionObstacle::InitAsDefaultInstance() {
  ::apollo::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->perception_obstacle_ = const_cast< ::apollo::perception::PerceptionObstacle*>(
      ::apollo::perception::PerceptionObstacle::internal_default_instance());
  ::apollo::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->intent_ = const_cast< ::apollo::prediction::ObstacleIntent*>(
      ::apollo::prediction::ObstacleIntent::internal_default_instance());
  ::apollo::prediction::_PredictionObstacle_default_instance_._instance.get_mutable()->priority_ = const_cast< ::apollo::prediction::ObstaclePriority*>(
      ::apollo::prediction::ObstaclePriority::internal_default_instance());
}
class PredictionObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionObstacle>()._has_bits_);
  static const ::apollo::perception::PerceptionObstacle& perception_obstacle(const PredictionObstacle* msg);
  static void set_has_perception_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_predicted_period(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::ObstacleIntent& intent(const PredictionObstacle* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::ObstaclePriority& priority(const PredictionObstacle* msg);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_static(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::PerceptionObstacle&
PredictionObstacle::_Internal::perception_obstacle(const PredictionObstacle* msg) {
  return *msg->perception_obstacle_;
}
const ::apollo::prediction::ObstacleIntent&
PredictionObstacle::_Internal::intent(const PredictionObstacle* msg) {
  return *msg->intent_;
}
const ::apollo::prediction::ObstaclePriority&
PredictionObstacle::_Internal::priority(const PredictionObstacle* msg) {
  return *msg->priority_;
}
void PredictionObstacle::clear_perception_obstacle() {
  if (perception_obstacle_ != nullptr) perception_obstacle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacle::clear_trajectory() {
  trajectory_.Clear();
}
void PredictionObstacle::clear_priority() {
  if (priority_ != nullptr) priority_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PredictionObstacle::PredictionObstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.PredictionObstacle)
}
PredictionObstacle::PredictionObstacle(const PredictionObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_perception_obstacle()) {
    perception_obstacle_ = new ::apollo::perception::PerceptionObstacle(*from.perception_obstacle_);
  } else {
    perception_obstacle_ = nullptr;
  }
  if (from._internal_has_intent()) {
    intent_ = new ::apollo::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::apollo::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionObstacle)
}

void PredictionObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base);
  ::memset(&perception_obstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&perception_obstacle_)) + sizeof(is_static_));
}

PredictionObstacle::~PredictionObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionObstacle)
  SharedDtor();
}

void PredictionObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete perception_obstacle_;
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete priority_;
}

void PredictionObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionObstacle& PredictionObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictionObstacle_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PredictionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(perception_obstacle_ != nullptr);
      perception_obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(priority_ != nullptr);
      priority_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_static_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(is_static_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PredictionObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perception_obstacle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double predicted_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_predicted_period(&has_bits);
          predicted_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Trajectory trajectory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleIntent intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_static = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_static(&has_bits);
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::perception_obstacle(this), target, stream);
  }

  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // optional double predicted_period = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_predicted_period(), target);
  }

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_trajectory(i), target, stream);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intent(this), target, stream);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::priority(this), target, stream);
  }

  // optional bool is_static = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_static(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionObstacle)
  return target;
}

size_t PredictionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *perception_obstacle_);
    }

    // optional .apollo.prediction.ObstacleIntent intent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_);
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictionObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.PredictionObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.PredictionObstacle)
    MergeFrom(*source);
  }
}

void PredictionObstacle::MergeFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_perception_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from._internal_perception_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_intent()->::apollo::prediction::ObstacleIntent::MergeFrom(from._internal_intent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      predicted_period_ = from.predicted_period_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_static_ = from.is_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacle::CopyFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacle::IsInitialized() const {
  return true;
}

void PredictionObstacle::InternalSwap(PredictionObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_.InternalSwap(&other->trajectory_);
  swap(perception_obstacle_, other->perception_obstacle_);
  swap(intent_, other->intent_);
  swap(priority_, other->priority_);
  swap(timestamp_, other->timestamp_);
  swap(predicted_period_, other->predicted_period_);
  swap(is_static_, other->is_static_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictionObstacles::InitAsDefaultInstance() {
  ::apollo::prediction::_PredictionObstacles_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::prediction::_PredictionObstacles_default_instance_._instance.get_mutable()->intent_ = const_cast< ::apollo::prediction::Intent*>(
      ::apollo::prediction::Intent::internal_default_instance());
  ::apollo::prediction::_PredictionObstacles_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::apollo::prediction::Scenario*>(
      ::apollo::prediction::Scenario::internal_default_instance());
}
class PredictionObstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionObstacles>()._has_bits_);
  static const ::apollo::common::Header& header(const PredictionObstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_perception_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::prediction::Intent& intent(const PredictionObstacles* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::Scenario& scenario(const PredictionObstacles* msg);
  static void set_has_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
PredictionObstacles::_Internal::header(const PredictionObstacles* msg) {
  return *msg->header_;
}
const ::apollo::prediction::Intent&
PredictionObstacles::_Internal::intent(const PredictionObstacles* msg) {
  return *msg->intent_;
}
const ::apollo::prediction::Scenario&
PredictionObstacles::_Internal::scenario(const PredictionObstacles* msg) {
  return *msg->scenario_;
}
void PredictionObstacles::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacles::clear_scenario() {
  if (scenario_ != nullptr) scenario_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PredictionObstacles::PredictionObstacles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.PredictionObstacles)
}
PredictionObstacles::PredictionObstacles(const PredictionObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prediction_obstacle_(from.prediction_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_intent()) {
    intent_ = new ::apollo::prediction::Intent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from._internal_has_scenario()) {
    scenario_ = new ::apollo::prediction::Scenario(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&perception_error_code_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(perception_error_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionObstacles)
}

void PredictionObstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictionObstacles_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_error_code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(perception_error_code_));
}

PredictionObstacles::~PredictionObstacles() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionObstacles)
  SharedDtor();
}

void PredictionObstacles::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete scenario_;
}

void PredictionObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionObstacles& PredictionObstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictionObstacles_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto.base);
  return *internal_default_instance();
}


void PredictionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intent_ != nullptr);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scenario_ != nullptr);
      scenario_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perception_error_code_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(perception_error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PredictionObstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prediction_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.ErrorCode perception_error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::ErrorCode_IsValid(val))) {
            _internal_set_perception_error_code(static_cast<::apollo::common::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double start_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.Intent intent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.Scenario scenario = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionObstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prediction_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_prediction_obstacle(i), target, stream);
  }

  // optional .apollo.common.ErrorCode perception_error_code = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_perception_error_code(), target);
  }

  // optional double start_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_timestamp(), target);
  }

  // optional double end_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_end_timestamp(), target);
  }

  // optional .apollo.prediction.Intent intent = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::intent(this), target, stream);
  }

  // optional .apollo.prediction.Scenario scenario = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scenario(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionObstacles)
  return target;
}

size_t PredictionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionObstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  total_size += 1UL * this->_internal_prediction_obstacle_size();
  for (const auto& msg : this->prediction_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.prediction.Intent intent = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .apollo.prediction.Scenario scenario = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_);
    }

    // optional double start_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double end_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.ErrorCode perception_error_code = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_perception_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionObstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictionObstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.PredictionObstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.PredictionObstacles)
    MergeFrom(*source);
  }
}

void PredictionObstacles::MergeFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prediction_obstacle_.MergeFrom(from.prediction_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_intent()->::apollo::prediction::Intent::MergeFrom(from._internal_intent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_scenario()->::apollo::prediction::Scenario::MergeFrom(from._internal_scenario());
    }
    if (cached_has_bits & 0x00000008u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      perception_error_code_ = from.perception_error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacles::CopyFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacles::IsInitialized() const {
  return true;
}

void PredictionObstacles::InternalSwap(PredictionObstacles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prediction_obstacle_.InternalSwap(&other->prediction_obstacle_);
  swap(header_, other->header_);
  swap(intent_, other->intent_);
  swap(scenario_, other->scenario_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(perception_error_code_, other->perception_error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleIntent* Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleIntent >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstacleIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Intent* Arena::CreateMaybeMessage< ::apollo::prediction::Intent >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Intent >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionObstacle* Arena::CreateMaybeMessage< ::apollo::prediction::PredictionObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::PredictionObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionObstacles* Arena::CreateMaybeMessage< ::apollo::prediction::PredictionObstacles >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::PredictionObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
