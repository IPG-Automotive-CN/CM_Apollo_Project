// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#include "modules/prediction/proto/prediction_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
namespace apollo {
namespace prediction {
class ObstacleConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleConf> _instance;
} _ObstacleConf_default_instance_;
class PredictionConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictionConf> _instance;
} _PredictionConf_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstacleConf_default_instance_;
    new (ptr) ::apollo::prediction::ObstacleConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstacleConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_PredictionConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_PredictionConf_default_instance_;
    new (ptr) ::apollo::prediction::PredictionConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::PredictionConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictionConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PredictionConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto}, {
      &scc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, obstacle_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, obstacle_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, priority_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, evaluator_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleConf, predictor_type_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::PredictionConf, obstacle_conf_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::prediction::ObstacleConf)},
  { 15, 21, sizeof(::apollo::prediction::PredictionConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_ObstacleConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_PredictionConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/prediction/proto/prediction_co"
  "nf.proto\022\021apollo.prediction\0322modules/per"
  "ception/proto/perception_obstacle.proto\032"
  "&modules/prediction/proto/feature.proto\""
  "\306\007\n\014ObstacleConf\022A\n\robstacle_type\030\001 \001(\0162"
  "*.apollo.perception.PerceptionObstacle.T"
  "ype\022G\n\017obstacle_status\030\002 \001(\0162..apollo.pr"
  "ediction.ObstacleConf.ObstacleStatus\022C\n\r"
  "priority_type\030\005 \001(\0162,.apollo.prediction."
  "ObstaclePriority.Priority\022E\n\016evaluator_t"
  "ype\030\003 \001(\0162-.apollo.prediction.ObstacleCo"
  "nf.EvaluatorType\022E\n\016predictor_type\030\004 \001(\016"
  "2-.apollo.prediction.ObstacleConf.Predic"
  "torType\"X\n\016ObstacleStatus\022\013\n\007ON_LANE\020\000\022\014"
  "\n\010OFF_LANE\020\001\022\016\n\nSTATIONARY\020\003\022\n\n\006MOVING\020\004"
  "\022\017\n\013IN_JUNCTION\020\005\"\377\001\n\rEvaluatorType\022\021\n\rM"
  "LP_EVALUATOR\020\000\022\021\n\rRNN_EVALUATOR\020\001\022\022\n\016COS"
  "T_EVALUATOR\020\002\022\030\n\024CRUISE_MLP_EVALUATOR\020\003\022"
  "\032\n\026JUNCTION_MLP_EVALUATOR\020\004\022\037\n\033CYCLIST_K"
  "EEP_LANE_EVALUATOR\020\005\022\033\n\027LANE_SCANNING_EV"
  "ALUATOR\020\006\022$\n PEDESTRIAN_INTERACTION_EVAL"
  "UATOR\020\007\022\032\n\026JUNCTION_MAP_EVALUATOR\020\010\"\372\001\n\r"
  "PredictorType\022\033\n\027LANE_SEQUENCE_PREDICTOR"
  "\020\000\022\027\n\023FREE_MOVE_PREDICTOR\020\001\022\026\n\022REGIONAL_"
  "PREDICTOR\020\002\022\033\n\027MOVE_SEQUENCE_PREDICTOR\020\003"
  "\022\023\n\017EMPTY_PREDICTOR\020\004\022\031\n\025SINGLE_LANE_PRE"
  "DICTOR\020\005\022\026\n\022JUNCTION_PREDICTOR\020\006\022\033\n\027EXTR"
  "APOLATION_PREDICTOR\020\007\022\031\n\025INTERACTION_PRE"
  "DICTOR\020\010\"H\n\016PredictionConf\0226\n\robstacle_c"
  "onf\030\001 \003(\0132\037.apollo.prediction.ObstacleCo"
  "nf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_deps[2] = {
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_sccs[2] = {
  &scc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.base,
  &scc_info_PredictionConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_once;
static bool descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto = {
  &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_initialized, descriptor_table_protodef_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto, "modules/prediction/proto/prediction_conf.proto", 1202,
  &descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto, 2, file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto), true);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[0];
}
bool ObstacleConf_ObstacleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleConf_ObstacleStatus ObstacleConf::ON_LANE;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::OFF_LANE;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::STATIONARY;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::MOVING;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::IN_JUNCTION;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MIN;
constexpr ObstacleConf_ObstacleStatus ObstacleConf::ObstacleStatus_MAX;
constexpr int ObstacleConf::ObstacleStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[1];
}
bool ObstacleConf_EvaluatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleConf_EvaluatorType ObstacleConf::MLP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::RNN_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::COST_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::CRUISE_MLP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::JUNCTION_MLP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::CYCLIST_KEEP_LANE_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::LANE_SCANNING_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::PEDESTRIAN_INTERACTION_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::JUNCTION_MAP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MIN;
constexpr ObstacleConf_EvaluatorType ObstacleConf::EvaluatorType_MAX;
constexpr int ObstacleConf::EvaluatorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_PredictorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto[2];
}
bool ObstacleConf_PredictorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstacleConf_PredictorType ObstacleConf::LANE_SEQUENCE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::FREE_MOVE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::REGIONAL_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::MOVE_SEQUENCE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::EMPTY_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::SINGLE_LANE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::JUNCTION_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::EXTRAPOLATION_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::INTERACTION_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf::PredictorType_MIN;
constexpr ObstacleConf_PredictorType ObstacleConf::PredictorType_MAX;
constexpr int ObstacleConf::PredictorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ObstacleConf::InitAsDefaultInstance() {
}
class ObstacleConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleConf>()._has_bits_);
  static void set_has_obstacle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_priority_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_evaluator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predictor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObstacleConf::ObstacleConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleConf)
}
ObstacleConf::ObstacleConf(const ObstacleConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obstacle_type_, &from.obstacle_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_type_) -
    reinterpret_cast<char*>(&obstacle_type_)) + sizeof(priority_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleConf)
}

void ObstacleConf::SharedCtor() {
  ::memset(&obstacle_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictor_type_) -
      reinterpret_cast<char*>(&obstacle_type_)) + sizeof(predictor_type_));
  priority_type_ = 1;
}

ObstacleConf::~ObstacleConf() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleConf)
  SharedDtor();
}

void ObstacleConf::SharedDtor() {
}

void ObstacleConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleConf& ObstacleConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ObstacleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&obstacle_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&predictor_type_) -
        reinterpret_cast<char*>(&obstacle_type_)) + sizeof(predictor_type_));
    priority_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_obstacle_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(val))) {
            _internal_set_obstacle_status(static_cast<::apollo::prediction::ObstacleConf_ObstacleStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(val))) {
            _internal_set_evaluator_type(static_cast<::apollo::prediction::ObstacleConf_EvaluatorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstacleConf_PredictorType_IsValid(val))) {
            _internal_set_predictor_type(static_cast<::apollo::prediction::ObstacleConf_PredictorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstaclePriority_Priority_IsValid(val))) {
            _internal_set_priority_type(static_cast<::apollo::prediction::ObstaclePriority_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_obstacle_type(), target);
  }

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_obstacle_status(), target);
  }

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_evaluator_type(), target);
  }

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_predictor_type(), target);
  }

  // optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_priority_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleConf)
  return target;
}

size_t ObstacleConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_obstacle_type());
    }

    // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_obstacle_status());
    }

    // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evaluator_type());
    }

    // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_predictor_type());
    }

    // optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleConf)
    MergeFrom(*source);
  }
}

void ObstacleConf::MergeFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      obstacle_type_ = from.obstacle_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_status_ = from.obstacle_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      evaluator_type_ = from.evaluator_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      predictor_type_ = from.predictor_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_type_ = from.priority_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleConf::CopyFrom(const ObstacleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleConf::IsInitialized() const {
  return true;
}

void ObstacleConf::InternalSwap(ObstacleConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(obstacle_type_, other->obstacle_type_);
  swap(obstacle_status_, other->obstacle_status_);
  swap(evaluator_type_, other->evaluator_type_);
  swap(predictor_type_, other->predictor_type_);
  swap(priority_type_, other->priority_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictionConf::InitAsDefaultInstance() {
}
class PredictionConf::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionConf>()._has_bits_);
};

PredictionConf::PredictionConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.PredictionConf)
}
PredictionConf::PredictionConf(const PredictionConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacle_conf_(from.obstacle_conf_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.PredictionConf)
}

void PredictionConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictionConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.base);
}

PredictionConf::~PredictionConf() {
  // @@protoc_insertion_point(destructor:apollo.prediction.PredictionConf)
  SharedDtor();
}

void PredictionConf::SharedDtor() {
}

void PredictionConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionConf& PredictionConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictionConf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.base);
  return *internal_default_instance();
}


void PredictionConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.PredictionConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_conf_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PredictionConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_conf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.PredictionConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_conf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_obstacle_conf(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.PredictionConf)
  return target;
}

size_t PredictionConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.PredictionConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  total_size += 1UL * this->_internal_obstacle_conf_size();
  for (const auto& msg : this->obstacle_conf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.PredictionConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictionConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.PredictionConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.PredictionConf)
    MergeFrom(*source);
  }
}

void PredictionConf::MergeFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.PredictionConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_conf_.MergeFrom(from.obstacle_conf_);
}

void PredictionConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionConf::CopyFrom(const PredictionConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.PredictionConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionConf::IsInitialized() const {
  return true;
}

void PredictionConf::InternalSwap(PredictionConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_conf_.InternalSwap(&other->obstacle_conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleConf* Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstacleConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::PredictionConf* Arena::CreateMaybeMessage< ::apollo::prediction::PredictionConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::PredictionConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
