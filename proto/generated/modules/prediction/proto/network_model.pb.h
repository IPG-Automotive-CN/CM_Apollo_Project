// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/network_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/prediction/proto/network_layers.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
namespace apollo {
namespace prediction {
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class Performance;
class PerformanceDefaultTypeInternal;
extern PerformanceDefaultTypeInternal _Performance_default_instance_;
class VerificationSample;
class VerificationSampleDefaultTypeInternal;
extern VerificationSampleDefaultTypeInternal _VerificationSample_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::NetParameter* Arena::CreateMaybeMessage<::apollo::prediction::NetParameter>(Arena*);
template<> ::apollo::prediction::Performance* Arena::CreateMaybeMessage<::apollo::prediction::Performance>(Arena*);
template<> ::apollo::prediction::VerificationSample* Arena::CreateMaybeMessage<::apollo::prediction::VerificationSample>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

// ===================================================================

class VerificationSample :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.VerificationSample) */ {
 public:
  VerificationSample();
  virtual ~VerificationSample();

  VerificationSample(const VerificationSample& from);
  VerificationSample(VerificationSample&& from) noexcept
    : VerificationSample() {
    *this = ::std::move(from);
  }

  inline VerificationSample& operator=(const VerificationSample& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerificationSample& operator=(VerificationSample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerificationSample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerificationSample* internal_default_instance() {
    return reinterpret_cast<const VerificationSample*>(
               &_VerificationSample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VerificationSample& a, VerificationSample& b) {
    a.Swap(&b);
  }
  inline void Swap(VerificationSample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerificationSample* New() const final {
    return CreateMaybeMessage<VerificationSample>(nullptr);
  }

  VerificationSample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerificationSample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerificationSample& from);
  void MergeFrom(const VerificationSample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerificationSample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.VerificationSample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
    kProbabilityFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // repeated .apollo.prediction.TensorParameter features = 1;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  ::apollo::prediction::TensorParameter* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::TensorParameter >*
      mutable_features();
  private:
  const ::apollo::prediction::TensorParameter& _internal_features(int index) const;
  ::apollo::prediction::TensorParameter* _internal_add_features();
  public:
  const ::apollo::prediction::TensorParameter& features(int index) const;
  ::apollo::prediction::TensorParameter* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::TensorParameter >&
      features() const;

  // optional float probability = 2;
  bool has_probability() const;
  private:
  bool _internal_has_probability() const;
  public:
  void clear_probability();
  float probability() const;
  void set_probability(float value);
  private:
  float _internal_probability() const;
  void _internal_set_probability(float value);
  public:

  // optional float distance = 3;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.VerificationSample)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::TensorParameter > features_;
  float probability_;
  float distance_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Performance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Performance) */ {
 public:
  Performance();
  virtual ~Performance();

  Performance(const Performance& from);
  Performance(Performance&& from) noexcept
    : Performance() {
    *this = ::std::move(from);
  }

  inline Performance& operator=(const Performance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Performance& operator=(Performance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Performance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Performance* internal_default_instance() {
    return reinterpret_cast<const Performance*>(
               &_Performance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Performance& a, Performance& b) {
    a.Swap(&b);
  }
  inline void Swap(Performance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Performance* New() const final {
    return CreateMaybeMessage<Performance>(nullptr);
  }

  Performance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Performance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Performance& from);
  void MergeFrom(const Performance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Performance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.Performance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccuracyFieldNumber = 1,
    kRecallFieldNumber = 2,
    kPrecisionFieldNumber = 3,
  };
  // repeated float accuracy = 1;
  int accuracy_size() const;
  private:
  int _internal_accuracy_size() const;
  public:
  void clear_accuracy();
  private:
  float _internal_accuracy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_accuracy() const;
  void _internal_add_accuracy(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_accuracy();
  public:
  float accuracy(int index) const;
  void set_accuracy(int index, float value);
  void add_accuracy(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      accuracy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_accuracy();

  // repeated float recall = 2;
  int recall_size() const;
  private:
  int _internal_recall_size() const;
  public:
  void clear_recall();
  private:
  float _internal_recall(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_recall() const;
  void _internal_add_recall(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_recall();
  public:
  float recall(int index) const;
  void set_recall(int index, float value);
  void add_recall(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      recall() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_recall();

  // repeated float precision = 3;
  int precision_size() const;
  private:
  int _internal_precision_size() const;
  public:
  void clear_precision();
  private:
  float _internal_precision(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_precision() const;
  void _internal_add_precision(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_precision();
  public:
  float precision(int index) const;
  void set_precision(int index, float value);
  void add_precision(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      precision() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_precision();

  // @@protoc_insertion_point(class_scope:apollo.prediction.Performance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > accuracy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > recall_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > precision_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class NetParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetParameter* New() const final {
    return CreateMaybeMessage<NetParameter>(nullptr);
  }

  NetParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.NetParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 3,
    kVerificationSamplesFieldNumber = 4,
    kNameFieldNumber = 2,
    kPerformanceFieldNumber = 5,
    kIdFieldNumber = 1,
    kTimeDumpedFieldNumber = 6,
  };
  // repeated .apollo.prediction.LayerParameter layers = 3;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::apollo::prediction::LayerParameter* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LayerParameter >*
      mutable_layers();
  private:
  const ::apollo::prediction::LayerParameter& _internal_layers(int index) const;
  ::apollo::prediction::LayerParameter* _internal_add_layers();
  public:
  const ::apollo::prediction::LayerParameter& layers(int index) const;
  ::apollo::prediction::LayerParameter* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LayerParameter >&
      layers() const;

  // repeated .apollo.prediction.VerificationSample verification_samples = 4;
  int verification_samples_size() const;
  private:
  int _internal_verification_samples_size() const;
  public:
  void clear_verification_samples();
  ::apollo::prediction::VerificationSample* mutable_verification_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VerificationSample >*
      mutable_verification_samples();
  private:
  const ::apollo::prediction::VerificationSample& _internal_verification_samples(int index) const;
  ::apollo::prediction::VerificationSample* _internal_add_verification_samples();
  public:
  const ::apollo::prediction::VerificationSample& verification_samples(int index) const;
  ::apollo::prediction::VerificationSample* add_verification_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VerificationSample >&
      verification_samples() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.prediction.Performance performance = 5;
  bool has_performance() const;
  private:
  bool _internal_has_performance() const;
  public:
  void clear_performance();
  const ::apollo::prediction::Performance& performance() const;
  ::apollo::prediction::Performance* release_performance();
  ::apollo::prediction::Performance* mutable_performance();
  void set_allocated_performance(::apollo::prediction::Performance* performance);
  private:
  const ::apollo::prediction::Performance& _internal_performance() const;
  ::apollo::prediction::Performance* _internal_mutable_performance();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float time_dumped = 6;
  bool has_time_dumped() const;
  private:
  bool _internal_has_time_dumped() const;
  public:
  void clear_time_dumped();
  float time_dumped() const;
  void set_time_dumped(float value);
  private:
  float _internal_time_dumped() const;
  void _internal_set_time_dumped(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.NetParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LayerParameter > layers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VerificationSample > verification_samples_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::apollo::prediction::Performance* performance_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float time_dumped_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerificationSample

// repeated .apollo.prediction.TensorParameter features = 1;
inline int VerificationSample::_internal_features_size() const {
  return features_.size();
}
inline int VerificationSample::features_size() const {
  return _internal_features_size();
}
inline ::apollo::prediction::TensorParameter* VerificationSample::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.VerificationSample.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::TensorParameter >*
VerificationSample::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.VerificationSample.features)
  return &features_;
}
inline const ::apollo::prediction::TensorParameter& VerificationSample::_internal_features(int index) const {
  return features_.Get(index);
}
inline const ::apollo::prediction::TensorParameter& VerificationSample::features(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.VerificationSample.features)
  return _internal_features(index);
}
inline ::apollo::prediction::TensorParameter* VerificationSample::_internal_add_features() {
  return features_.Add();
}
inline ::apollo::prediction::TensorParameter* VerificationSample::add_features() {
  // @@protoc_insertion_point(field_add:apollo.prediction.VerificationSample.features)
  return _internal_add_features();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::TensorParameter >&
VerificationSample::features() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.VerificationSample.features)
  return features_;
}

// optional float probability = 2;
inline bool VerificationSample::_internal_has_probability() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerificationSample::has_probability() const {
  return _internal_has_probability();
}
inline void VerificationSample::clear_probability() {
  probability_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VerificationSample::_internal_probability() const {
  return probability_;
}
inline float VerificationSample::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.VerificationSample.probability)
  return _internal_probability();
}
inline void VerificationSample::_internal_set_probability(float value) {
  _has_bits_[0] |= 0x00000001u;
  probability_ = value;
}
inline void VerificationSample::set_probability(float value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.VerificationSample.probability)
}

// optional float distance = 3;
inline bool VerificationSample::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerificationSample::has_distance() const {
  return _internal_has_distance();
}
inline void VerificationSample::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float VerificationSample::_internal_distance() const {
  return distance_;
}
inline float VerificationSample::distance() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.VerificationSample.distance)
  return _internal_distance();
}
inline void VerificationSample::_internal_set_distance(float value) {
  _has_bits_[0] |= 0x00000002u;
  distance_ = value;
}
inline void VerificationSample::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.VerificationSample.distance)
}

// -------------------------------------------------------------------

// Performance

// repeated float accuracy = 1;
inline int Performance::_internal_accuracy_size() const {
  return accuracy_.size();
}
inline int Performance::accuracy_size() const {
  return _internal_accuracy_size();
}
inline void Performance::clear_accuracy() {
  accuracy_.Clear();
}
inline float Performance::_internal_accuracy(int index) const {
  return accuracy_.Get(index);
}
inline float Performance::accuracy(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Performance.accuracy)
  return _internal_accuracy(index);
}
inline void Performance::set_accuracy(int index, float value) {
  accuracy_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Performance.accuracy)
}
inline void Performance::_internal_add_accuracy(float value) {
  accuracy_.Add(value);
}
inline void Performance::add_accuracy(float value) {
  _internal_add_accuracy(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.Performance.accuracy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Performance::_internal_accuracy() const {
  return accuracy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Performance::accuracy() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Performance.accuracy)
  return _internal_accuracy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Performance::_internal_mutable_accuracy() {
  return &accuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Performance::mutable_accuracy() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Performance.accuracy)
  return _internal_mutable_accuracy();
}

// repeated float recall = 2;
inline int Performance::_internal_recall_size() const {
  return recall_.size();
}
inline int Performance::recall_size() const {
  return _internal_recall_size();
}
inline void Performance::clear_recall() {
  recall_.Clear();
}
inline float Performance::_internal_recall(int index) const {
  return recall_.Get(index);
}
inline float Performance::recall(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Performance.recall)
  return _internal_recall(index);
}
inline void Performance::set_recall(int index, float value) {
  recall_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Performance.recall)
}
inline void Performance::_internal_add_recall(float value) {
  recall_.Add(value);
}
inline void Performance::add_recall(float value) {
  _internal_add_recall(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.Performance.recall)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Performance::_internal_recall() const {
  return recall_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Performance::recall() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Performance.recall)
  return _internal_recall();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Performance::_internal_mutable_recall() {
  return &recall_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Performance::mutable_recall() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Performance.recall)
  return _internal_mutable_recall();
}

// repeated float precision = 3;
inline int Performance::_internal_precision_size() const {
  return precision_.size();
}
inline int Performance::precision_size() const {
  return _internal_precision_size();
}
inline void Performance::clear_precision() {
  precision_.Clear();
}
inline float Performance::_internal_precision(int index) const {
  return precision_.Get(index);
}
inline float Performance::precision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Performance.precision)
  return _internal_precision(index);
}
inline void Performance::set_precision(int index, float value) {
  precision_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.Performance.precision)
}
inline void Performance::_internal_add_precision(float value) {
  precision_.Add(value);
}
inline void Performance::add_precision(float value) {
  _internal_add_precision(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.Performance.precision)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Performance::_internal_precision() const {
  return precision_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Performance::precision() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.Performance.precision)
  return _internal_precision();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Performance::_internal_mutable_precision() {
  return &precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Performance::mutable_precision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.Performance.precision)
  return _internal_mutable_precision();
}

// -------------------------------------------------------------------

// NetParameter

// optional int32 id = 1;
inline bool NetParameter::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetParameter::has_id() const {
  return _internal_has_id();
}
inline void NetParameter::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetParameter::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NetParameter.id)
  return _internal_id();
}
inline void NetParameter::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void NetParameter::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.NetParameter.id)
}

// optional string name = 2;
inline bool NetParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetParameter::has_name() const {
  return _internal_has_name();
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NetParameter.name)
  return _internal_name();
}
inline void NetParameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.NetParameter.name)
}
inline std::string* NetParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.NetParameter.name)
  return _internal_mutable_name();
}
inline const std::string& NetParameter::_internal_name() const {
  return name_.GetNoArena();
}
inline void NetParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetParameter::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.NetParameter.name)
}
inline std::string* NetParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.NetParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.NetParameter.name)
}

// repeated .apollo.prediction.LayerParameter layers = 3;
inline int NetParameter::_internal_layers_size() const {
  return layers_.size();
}
inline int NetParameter::layers_size() const {
  return _internal_layers_size();
}
inline ::apollo::prediction::LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.NetParameter.layers)
  return &layers_;
}
inline const ::apollo::prediction::LayerParameter& NetParameter::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::apollo::prediction::LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NetParameter.layers)
  return _internal_layers(index);
}
inline ::apollo::prediction::LayerParameter* NetParameter::_internal_add_layers() {
  return layers_.Add();
}
inline ::apollo::prediction::LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:apollo.prediction.NetParameter.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.NetParameter.layers)
  return layers_;
}

// repeated .apollo.prediction.VerificationSample verification_samples = 4;
inline int NetParameter::_internal_verification_samples_size() const {
  return verification_samples_.size();
}
inline int NetParameter::verification_samples_size() const {
  return _internal_verification_samples_size();
}
inline void NetParameter::clear_verification_samples() {
  verification_samples_.Clear();
}
inline ::apollo::prediction::VerificationSample* NetParameter::mutable_verification_samples(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.NetParameter.verification_samples)
  return verification_samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VerificationSample >*
NetParameter::mutable_verification_samples() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.NetParameter.verification_samples)
  return &verification_samples_;
}
inline const ::apollo::prediction::VerificationSample& NetParameter::_internal_verification_samples(int index) const {
  return verification_samples_.Get(index);
}
inline const ::apollo::prediction::VerificationSample& NetParameter::verification_samples(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NetParameter.verification_samples)
  return _internal_verification_samples(index);
}
inline ::apollo::prediction::VerificationSample* NetParameter::_internal_add_verification_samples() {
  return verification_samples_.Add();
}
inline ::apollo::prediction::VerificationSample* NetParameter::add_verification_samples() {
  // @@protoc_insertion_point(field_add:apollo.prediction.NetParameter.verification_samples)
  return _internal_add_verification_samples();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::VerificationSample >&
NetParameter::verification_samples() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.NetParameter.verification_samples)
  return verification_samples_;
}

// optional .apollo.prediction.Performance performance = 5;
inline bool NetParameter::_internal_has_performance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || performance_ != nullptr);
  return value;
}
inline bool NetParameter::has_performance() const {
  return _internal_has_performance();
}
inline void NetParameter::clear_performance() {
  if (performance_ != nullptr) performance_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::prediction::Performance& NetParameter::_internal_performance() const {
  const ::apollo::prediction::Performance* p = performance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::Performance*>(
      &::apollo::prediction::_Performance_default_instance_);
}
inline const ::apollo::prediction::Performance& NetParameter::performance() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NetParameter.performance)
  return _internal_performance();
}
inline ::apollo::prediction::Performance* NetParameter::release_performance() {
  // @@protoc_insertion_point(field_release:apollo.prediction.NetParameter.performance)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::prediction::Performance* temp = performance_;
  performance_ = nullptr;
  return temp;
}
inline ::apollo::prediction::Performance* NetParameter::_internal_mutable_performance() {
  _has_bits_[0] |= 0x00000002u;
  if (performance_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Performance>(GetArenaNoVirtual());
    performance_ = p;
  }
  return performance_;
}
inline ::apollo::prediction::Performance* NetParameter::mutable_performance() {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.NetParameter.performance)
  return _internal_mutable_performance();
}
inline void NetParameter::set_allocated_performance(::apollo::prediction::Performance* performance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete performance_;
  }
  if (performance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      performance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, performance, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  performance_ = performance;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.NetParameter.performance)
}

// optional float time_dumped = 6;
inline bool NetParameter::_internal_has_time_dumped() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetParameter::has_time_dumped() const {
  return _internal_has_time_dumped();
}
inline void NetParameter::clear_time_dumped() {
  time_dumped_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float NetParameter::_internal_time_dumped() const {
  return time_dumped_;
}
inline float NetParameter::time_dumped() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NetParameter.time_dumped)
  return _internal_time_dumped();
}
inline void NetParameter::_internal_set_time_dumped(float value) {
  _has_bits_[0] |= 0x00000008u;
  time_dumped_ = value;
}
inline void NetParameter::set_time_dumped(float value) {
  _internal_set_time_dumped(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.NetParameter.time_dumped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto
