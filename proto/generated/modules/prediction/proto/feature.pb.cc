// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#include "modules/prediction/proto/feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneGraph_modules_2fprediction_2fproto_2flane_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictionTrajectoryPoint_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto;
namespace apollo {
namespace prediction {
class LaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane> _instance;
} _Lane_default_instance_;
class LaneFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneFeature> _instance;
} _LaneFeature_default_instance_;
class JunctionExitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JunctionExit> _instance;
} _JunctionExit_default_instance_;
class JunctionFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JunctionFeature> _instance;
} _JunctionFeature_default_instance_;
class ObstaclePriorityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstaclePriority> _instance;
} _ObstaclePriority_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class FeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feature> _instance;
} _Feature_default_instance_;
class ObstacleHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleHistory> _instance;
} _ObstacleHistory_default_instance_;
class FrameEnvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameEnv> _instance;
} _FrameEnv_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Feature_default_instance_;
    new (ptr) ::apollo::prediction::Feature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Feature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,
      &scc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto.base,
      &scc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base,
      &scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto.base,
      &scc_info_PredictionTrajectoryPoint_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto.base,
      &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto.base,}};

static void InitDefaultsscc_info_FrameEnv_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_FrameEnv_default_instance_;
    new (ptr) ::apollo::prediction::FrameEnv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::FrameEnv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameEnv_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameEnv_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto.base,}};

static void InitDefaultsscc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_JunctionExit_default_instance_;
    new (ptr) ::apollo::prediction::JunctionExit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::JunctionExit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_JunctionFeature_default_instance_;
    new (ptr) ::apollo::prediction::JunctionFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::JunctionFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base,
      &scc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto.base,}};

static void InitDefaultsscc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Lane_default_instance_;
    new (ptr) ::apollo::prediction::Lane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Lane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base,
      &scc_info_LaneGraph_modules_2fprediction_2fproto_2flane_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneFeature_default_instance_;
    new (ptr) ::apollo::prediction::LaneFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto}, {}};

static void InitDefaultsscc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstacleHistory_default_instance_;
    new (ptr) ::apollo::prediction::ObstacleHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstacleHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto.base,}};

static void InitDefaultsscc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstaclePriority_default_instance_;
    new (ptr) ::apollo::prediction::ObstaclePriority();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstaclePriority::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto}, {}};

static void InitDefaultsscc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Trajectory_default_instance_;
    new (ptr) ::apollo::prediction::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto}, {
      &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, current_lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, nearby_lane_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, lane_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, lane_graph_ordered_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Lane, label_update_time_delta_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_turn_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, angle_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, dist_to_left_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, dist_to_right_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_type_),
  0,
  7,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_width_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, enter_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_exit_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_mlp_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_mlp_label_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_mlp_probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::JunctionFeature, start_lane_id_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, priority_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Trajectory, trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, front_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, raw_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, junction_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, t_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, t_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, t_velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, t_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, t_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, t_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, is_still_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, label_update_time_delta_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, is_near_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, future_trajectory_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, short_term_predicted_trajectory_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, predicted_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Feature, adc_trajectory_point_),
  19,
  ~0u,
  0,
  9,
  1,
  10,
  2,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  21,
  3,
  8,
  4,
  5,
  22,
  23,
  6,
  24,
  26,
  20,
  25,
  7,
  27,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, is_trainable_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, ego_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::FrameEnv, obstacles_history_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::prediction::Lane)},
  { 17, 31, sizeof(::apollo::prediction::LaneFeature)},
  { 40, 49, sizeof(::apollo::prediction::JunctionExit)},
  { 53, 66, sizeof(::apollo::prediction::JunctionFeature)},
  { 74, 80, sizeof(::apollo::prediction::ObstaclePriority)},
  { 81, 88, sizeof(::apollo::prediction::Trajectory)},
  { 90, 128, sizeof(::apollo::prediction::Feature)},
  { 161, 168, sizeof(::apollo::prediction::ObstacleHistory)},
  { 170, 178, sizeof(::apollo::prediction::FrameEnv)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Lane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_LaneFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_JunctionExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_JunctionFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_ObstaclePriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_ObstacleHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_FrameEnv_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/prediction/proto/feature.proto"
  "\022\021apollo.prediction\032#modules/common/prot"
  "o/geometry.proto\032$modules/common/proto/p"
  "nc_point.proto\032 modules/map/proto/map_la"
  "ne.proto\0322modules/perception/proto/perce"
  "ption_obstacle.proto\032)modules/prediction"
  "/proto/lane_graph.proto\032/modules/predict"
  "ion/proto/prediction_point.proto\"\304\002\n\004Lan"
  "e\022<\n\024current_lane_feature\030\001 \003(\0132\036.apollo"
  ".prediction.LaneFeature\0224\n\014lane_feature\030"
  "\002 \001(\0132\036.apollo.prediction.LaneFeature\022;\n"
  "\023nearby_lane_feature\030\003 \003(\0132\036.apollo.pred"
  "iction.LaneFeature\0220\n\nlane_graph\030\004 \001(\0132\034"
  ".apollo.prediction.LaneGraph\0228\n\022lane_gra"
  "ph_ordered\030\005 \001(\0132\034.apollo.prediction.Lan"
  "eGraph\022\037\n\027label_update_time_delta\030\032 \001(\001\""
  "\357\001\n\013LaneFeature\022\017\n\007lane_id\030\001 \001(\t\022\026\n\016lane"
  "_turn_type\030\002 \001(\r\022\016\n\006lane_s\030\003 \001(\001\022\016\n\006lane"
  "_l\030\004 \001(\001\022\022\n\nangle_diff\030\005 \001(\001\022\035\n\025dist_to_"
  "left_boundary\030\006 \001(\001\022\036\n\026dist_to_right_bou"
  "ndary\030\007 \001(\001\022\024\n\014lane_heading\030\010 \001(\001\022.\n\tlan"
  "e_type\030\t \001(\0162\033.apollo.hdmap.Lane.LaneTyp"
  "e\"}\n\014JunctionExit\022\024\n\014exit_lane_id\030\001 \001(\t\022"
  "-\n\rexit_position\030\002 \001(\0132\026.apollo.common.P"
  "oint3D\022\024\n\014exit_heading\030\003 \001(\001\022\022\n\nexit_wid"
  "th\030\004 \001(\001\"\235\002\n\017JunctionFeature\022\023\n\013junction"
  "_id\030\001 \001(\t\022\026\n\016junction_range\030\002 \001(\001\0222\n\nent"
  "er_lane\030\003 \001(\0132\036.apollo.prediction.LaneFe"
  "ature\0226\n\rjunction_exit\030\004 \003(\0132\037.apollo.pr"
  "ediction.JunctionExit\022\034\n\024junction_mlp_fe"
  "ature\030\005 \003(\001\022\032\n\022junction_mlp_label\030\006 \003(\005\022"
  " \n\030junction_mlp_probability\030\007 \003(\001\022\025\n\rsta"
  "rt_lane_id\030\010 \003(\t\"\213\001\n\020ObstaclePriority\022F\n"
  "\010priority\030\031 \001(\0162,.apollo.prediction.Obst"
  "aclePriority.Priority:\006NORMAL\"/\n\010Priorit"
  "y\022\013\n\007CAUTION\020\001\022\n\n\006NORMAL\020\002\022\n\n\006IGNORE\020\003\"["
  "\n\nTrajectory\022\023\n\013probability\030\001 \001(\001\0228\n\020tra"
  "jectory_point\030\002 \003(\0132\036.apollo.common.Traj"
  "ectoryPoint\"\346\t\n\007Feature\022\n\n\002id\030\001 \001(\005\022-\n\rp"
  "olygon_point\030\036 \003(\0132\026.apollo.common.Point"
  "3D\022(\n\010position\030\002 \001(\0132\026.apollo.common.Poi"
  "nt3D\022.\n\016front_position\030\033 \001(\0132\026.apollo.co"
  "mmon.Point3D\022(\n\010velocity\030\003 \001(\0132\026.apollo."
  "common.Point3D\022,\n\014raw_velocity\030\034 \001(\0132\026.a"
  "pollo.common.Point3D\022,\n\014acceleration\030\004 \001"
  "(\0132\026.apollo.common.Point3D\022\030\n\020velocity_h"
  "eading\030\005 \001(\001\022\r\n\005speed\030\006 \001(\001\022\013\n\003acc\030\007 \001(\001"
  "\022\r\n\005theta\030\010 \001(\001\022\016\n\006length\030\t \001(\001\022\r\n\005width"
  "\030\n \001(\001\022\016\n\006height\030\013 \001(\001\022\025\n\rtracking_time\030"
  "\014 \001(\001\022\021\n\ttimestamp\030\r \001(\001\022%\n\004lane\030\016 \001(\0132\027"
  ".apollo.prediction.Lane\022<\n\020junction_feat"
  "ure\030\032 \001(\0132\".apollo.prediction.JunctionFe"
  "ature\022*\n\nt_position\030\020 \001(\0132\026.apollo.commo"
  "n.Point3D\022.\n\nt_velocity\030\021 \001(\0132\026.apollo.c"
  "ommon.Point3DB\002\030\001\022\036\n\022t_velocity_heading\030"
  "\022 \001(\001B\002\030\001\022\023\n\007t_speed\030\023 \001(\001B\002\030\001\0222\n\016t_acce"
  "leration\030\024 \001(\0132\026.apollo.common.Point3DB\002"
  "\030\001\022\021\n\005t_acc\030\025 \001(\001B\002\030\001\022\027\n\010is_still\030\026 \001(\010:"
  "\005false\0228\n\004type\030\027 \001(\0162*.apollo.perception"
  ".PerceptionObstacle.Type\022\037\n\027label_update"
  "_time_delta\030\030 \001(\001\0225\n\010priority\030\031 \001(\0132#.ap"
  "ollo.prediction.ObstaclePriority\022\037\n\020is_n"
  "ear_junction\030\035 \001(\010:\005false\022N\n\030future_traj"
  "ectory_points\030\037 \003(\0132,.apollo.prediction."
  "PredictionTrajectoryPoint\022N\n&short_term_"
  "predicted_trajectory_points\030  \003(\0132\036.apol"
  "lo.common.TrajectoryPoint\022;\n\024predicted_t"
  "rajectory\030! \003(\0132\035.apollo.prediction.Traj"
  "ectory\022<\n\024adc_trajectory_point\030\" \003(\0132\036.a"
  "pollo.common.TrajectoryPoint\"[\n\017Obstacle"
  "History\022+\n\007feature\030\001 \003(\0132\032.apollo.predic"
  "tion.Feature\022\033\n\014is_trainable\030\002 \001(\010:\005fals"
  "e\"\225\001\n\010FrameEnv\022\021\n\ttimestamp\030\001 \001(\001\0227\n\013ego"
  "_history\030\002 \001(\0132\".apollo.prediction.Obsta"
  "cleHistory\022=\n\021obstacles_history\030\003 \003(\0132\"."
  "apollo.prediction.ObstacleHistory"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_deps[6] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2flane_5fgraph_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_sccs[9] = {
  &scc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_FrameEnv_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto.base,
  &scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once;
static bool descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto = {
  &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_initialized, descriptor_table_protodef_modules_2fprediction_2fproto_2ffeature_2eproto, "modules/prediction/proto/feature.proto", 3033,
  &descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto_deps, 9, 6,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2ffeature_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2ffeature_2eproto, 9, file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2ffeature_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto), true);
namespace apollo {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstaclePriority_Priority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto);
  return file_level_enum_descriptors_modules_2fprediction_2fproto_2ffeature_2eproto[0];
}
bool ObstaclePriority_Priority_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObstaclePriority_Priority ObstaclePriority::CAUTION;
constexpr ObstaclePriority_Priority ObstaclePriority::NORMAL;
constexpr ObstaclePriority_Priority ObstaclePriority::IGNORE;
constexpr ObstaclePriority_Priority ObstaclePriority::Priority_MIN;
constexpr ObstaclePriority_Priority ObstaclePriority::Priority_MAX;
constexpr int ObstaclePriority::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::apollo::prediction::_Lane_default_instance_._instance.get_mutable()->lane_feature_ = const_cast< ::apollo::prediction::LaneFeature*>(
      ::apollo::prediction::LaneFeature::internal_default_instance());
  ::apollo::prediction::_Lane_default_instance_._instance.get_mutable()->lane_graph_ = const_cast< ::apollo::prediction::LaneGraph*>(
      ::apollo::prediction::LaneGraph::internal_default_instance());
  ::apollo::prediction::_Lane_default_instance_._instance.get_mutable()->lane_graph_ordered_ = const_cast< ::apollo::prediction::LaneGraph*>(
      ::apollo::prediction::LaneGraph::internal_default_instance());
}
class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._has_bits_);
  static const ::apollo::prediction::LaneFeature& lane_feature(const Lane* msg);
  static void set_has_lane_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::LaneGraph& lane_graph(const Lane* msg);
  static void set_has_lane_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::LaneGraph& lane_graph_ordered(const Lane* msg);
  static void set_has_lane_graph_ordered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label_update_time_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::LaneFeature&
Lane::_Internal::lane_feature(const Lane* msg) {
  return *msg->lane_feature_;
}
const ::apollo::prediction::LaneGraph&
Lane::_Internal::lane_graph(const Lane* msg) {
  return *msg->lane_graph_;
}
const ::apollo::prediction::LaneGraph&
Lane::_Internal::lane_graph_ordered(const Lane* msg) {
  return *msg->lane_graph_ordered_;
}
void Lane::clear_lane_graph() {
  if (lane_graph_ != nullptr) lane_graph_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_lane_graph_ordered() {
  if (lane_graph_ordered_ != nullptr) lane_graph_ordered_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Lane::Lane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      current_lane_feature_(from.current_lane_feature_),
      nearby_lane_feature_(from.nearby_lane_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lane_feature()) {
    lane_feature_ = new ::apollo::prediction::LaneFeature(*from.lane_feature_);
  } else {
    lane_feature_ = nullptr;
  }
  if (from._internal_has_lane_graph()) {
    lane_graph_ = new ::apollo::prediction::LaneGraph(*from.lane_graph_);
  } else {
    lane_graph_ = nullptr;
  }
  if (from._internal_has_lane_graph_ordered()) {
    lane_graph_ordered_ = new ::apollo::prediction::LaneGraph(*from.lane_graph_ordered_);
  } else {
    lane_graph_ordered_ = nullptr;
  }
  label_update_time_delta_ = from.label_update_time_delta_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Lane)
}

void Lane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  ::memset(&lane_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_update_time_delta_) -
      reinterpret_cast<char*>(&lane_feature_)) + sizeof(label_update_time_delta_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete lane_feature_;
  if (this != internal_default_instance()) delete lane_graph_;
  if (this != internal_default_instance()) delete lane_graph_ordered_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane& Lane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_lane_feature_.Clear();
  nearby_lane_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lane_feature_ != nullptr);
      lane_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_graph_ != nullptr);
      lane_graph_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lane_graph_ordered_ != nullptr);
      lane_graph_ordered_->Clear();
    }
  }
  label_update_time_delta_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_current_lane_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneFeature lane_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nearby_lane_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneGraph lane_graph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_graph_ordered(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double label_update_time_delta = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_label_update_time_delta(&has_bits);
          label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_current_lane_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_current_lane_feature(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lane_feature(this), target, stream);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nearby_lane_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nearby_lane_feature(i), target, stream);
  }

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lane_graph(this), target, stream);
  }

  // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lane_graph_ordered(this), target, stream);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_label_update_time_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Lane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  total_size += 1UL * this->_internal_current_lane_feature_size();
  for (const auto& msg : this->current_lane_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  total_size += 1UL * this->_internal_nearby_lane_feature_size();
  for (const auto& msg : this->nearby_lane_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.prediction.LaneFeature lane_feature = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_feature_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_graph_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_graph_ordered_);
    }

    // optional double label_update_time_delta = 26;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Lane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_lane_feature_.MergeFrom(from.current_lane_feature_);
  nearby_lane_feature_.MergeFrom(from.nearby_lane_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_feature()->::apollo::prediction::LaneFeature::MergeFrom(from._internal_lane_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_graph()->::apollo::prediction::LaneGraph::MergeFrom(from._internal_lane_graph());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_graph_ordered()->::apollo::prediction::LaneGraph::MergeFrom(from._internal_lane_graph_ordered());
    }
    if (cached_has_bits & 0x00000008u) {
      label_update_time_delta_ = from.label_update_time_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_lane_feature_.InternalSwap(&other->current_lane_feature_);
  nearby_lane_feature_.InternalSwap(&other->nearby_lane_feature_);
  swap(lane_feature_, other->lane_feature_);
  swap(lane_graph_, other->lane_graph_);
  swap(lane_graph_ordered_, other->lane_graph_ordered_);
  swap(label_update_time_delta_, other->label_update_time_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneFeature::InitAsDefaultInstance() {
}
class LaneFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneFeature>()._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_turn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lane_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angle_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dist_to_left_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dist_to_right_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lane_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

LaneFeature::LaneFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneFeature)
}
LaneFeature::LaneFeature(const LaneFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lane_id()) {
    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_type_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneFeature)
}

void LaneFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_turn_type_) -
      reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_turn_type_));
  lane_type_ = 1;
}

LaneFeature::~LaneFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneFeature)
  SharedDtor();
}

void LaneFeature::SharedDtor() {
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneFeature& LaneFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void LaneFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_turn_type_) -
        reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_turn_type_));
  }
  lane_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaneFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.LaneFeature.lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_turn_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane_turn_type(&has_bits);
          lane_turn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lane_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lane_s(&has_bits);
          lane_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lane_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lane_l(&has_bits);
          lane_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double angle_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_angle_diff(&has_bits);
          angle_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dist_to_left_boundary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_dist_to_left_boundary(&has_bits);
          dist_to_left_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dist_to_right_boundary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_dist_to_right_boundary(&has_bits);
          dist_to_right_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lane_heading = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_lane_heading(&has_bits);
          lane_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneType_IsValid(val))) {
            _internal_set_lane_type(static_cast<::apollo::hdmap::Lane_LaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneFeature.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane_turn_type(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lane_l(), target);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_angle_diff(), target);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dist_to_left_boundary(), target);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dist_to_right_boundary(), target);
  }

  // optional double lane_heading = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_lane_heading(), target);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneFeature)
  return target;
}

size_t LaneFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double lane_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double dist_to_left_boundary = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double dist_to_right_boundary = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double lane_heading = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_turn_type());
    }

  }
  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lane_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneFeature)
    MergeFrom(*source);
  }
}

void LaneFeature::MergeFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      angle_diff_ = from.angle_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      dist_to_left_boundary_ = from.dist_to_left_boundary_;
    }
    if (cached_has_bits & 0x00000020u) {
      dist_to_right_boundary_ = from.dist_to_right_boundary_;
    }
    if (cached_has_bits & 0x00000040u) {
      lane_heading_ = from.lane_heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_turn_type_ = from.lane_turn_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_lane_type(from._internal_lane_type());
  }
}

void LaneFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneFeature::CopyFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeature::IsInitialized() const {
  return true;
}

void LaneFeature::InternalSwap(LaneFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_s_, other->lane_s_);
  swap(lane_l_, other->lane_l_);
  swap(angle_diff_, other->angle_diff_);
  swap(dist_to_left_boundary_, other->dist_to_left_boundary_);
  swap(dist_to_right_boundary_, other->dist_to_right_boundary_);
  swap(lane_heading_, other->lane_heading_);
  swap(lane_turn_type_, other->lane_turn_type_);
  swap(lane_type_, other->lane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JunctionExit::InitAsDefaultInstance() {
  ::apollo::prediction::_JunctionExit_default_instance_._instance.get_mutable()->exit_position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
class JunctionExit::_Internal {
 public:
  using HasBits = decltype(std::declval<JunctionExit>()._has_bits_);
  static void set_has_exit_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& exit_position(const JunctionExit* msg);
  static void set_has_exit_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exit_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exit_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Point3D&
JunctionExit::_Internal::exit_position(const JunctionExit* msg) {
  return *msg->exit_position_;
}
void JunctionExit::clear_exit_position() {
  if (exit_position_ != nullptr) exit_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
JunctionExit::JunctionExit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.JunctionExit)
}
JunctionExit::JunctionExit(const JunctionExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exit_lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exit_lane_id()) {
    exit_lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exit_lane_id_);
  }
  if (from._internal_has_exit_position()) {
    exit_position_ = new ::apollo::common::Point3D(*from.exit_position_);
  } else {
    exit_position_ = nullptr;
  }
  ::memcpy(&exit_heading_, &from.exit_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_width_) -
    reinterpret_cast<char*>(&exit_heading_)) + sizeof(exit_width_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.JunctionExit)
}

void JunctionExit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  exit_lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_width_) -
      reinterpret_cast<char*>(&exit_position_)) + sizeof(exit_width_));
}

JunctionExit::~JunctionExit() {
  // @@protoc_insertion_point(destructor:apollo.prediction.JunctionExit)
  SharedDtor();
}

void JunctionExit::SharedDtor() {
  exit_lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exit_position_;
}

void JunctionExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JunctionExit& JunctionExit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JunctionExit_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void JunctionExit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.JunctionExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      exit_lane_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(exit_position_ != nullptr);
      exit_position_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&exit_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exit_width_) -
        reinterpret_cast<char*>(&exit_heading_)) + sizeof(exit_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JunctionExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string exit_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_exit_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.JunctionExit.exit_lane_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D exit_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exit_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double exit_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_exit_heading(&has_bits);
          exit_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double exit_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_exit_width(&has_bits);
          exit_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JunctionExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.JunctionExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string exit_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exit_lane_id().data(), static_cast<int>(this->_internal_exit_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionExit.exit_lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exit_lane_id(), target);
  }

  // optional .apollo.common.Point3D exit_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exit_position(this), target, stream);
  }

  // optional double exit_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_exit_heading(), target);
  }

  // optional double exit_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_exit_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.JunctionExit)
  return target;
}

size_t JunctionExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.JunctionExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string exit_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exit_lane_id());
    }

    // optional .apollo.common.Point3D exit_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exit_position_);
    }

    // optional double exit_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double exit_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JunctionExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.JunctionExit)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JunctionExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.JunctionExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.JunctionExit)
    MergeFrom(*source);
  }
}

void JunctionExit::MergeFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.JunctionExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      exit_lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exit_lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_exit_position()->::apollo::common::Point3D::MergeFrom(from._internal_exit_position());
    }
    if (cached_has_bits & 0x00000004u) {
      exit_heading_ = from.exit_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      exit_width_ = from.exit_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JunctionExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.JunctionExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionExit::CopyFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.JunctionExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionExit::IsInitialized() const {
  return true;
}

void JunctionExit::InternalSwap(JunctionExit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exit_lane_id_.Swap(&other->exit_lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exit_position_, other->exit_position_);
  swap(exit_heading_, other->exit_heading_);
  swap(exit_width_, other->exit_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionExit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JunctionFeature::InitAsDefaultInstance() {
  ::apollo::prediction::_JunctionFeature_default_instance_._instance.get_mutable()->enter_lane_ = const_cast< ::apollo::prediction::LaneFeature*>(
      ::apollo::prediction::LaneFeature::internal_default_instance());
}
class JunctionFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<JunctionFeature>()._has_bits_);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_junction_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::prediction::LaneFeature& enter_lane(const JunctionFeature* msg);
  static void set_has_enter_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::prediction::LaneFeature&
JunctionFeature::_Internal::enter_lane(const JunctionFeature* msg) {
  return *msg->enter_lane_;
}
JunctionFeature::JunctionFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.JunctionFeature)
}
JunctionFeature::JunctionFeature(const JunctionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      junction_exit_(from.junction_exit_),
      junction_mlp_feature_(from.junction_mlp_feature_),
      junction_mlp_label_(from.junction_mlp_label_),
      junction_mlp_probability_(from.junction_mlp_probability_),
      start_lane_id_(from.start_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  junction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_junction_id()) {
    junction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.junction_id_);
  }
  if (from._internal_has_enter_lane()) {
    enter_lane_ = new ::apollo::prediction::LaneFeature(*from.enter_lane_);
  } else {
    enter_lane_ = nullptr;
  }
  junction_range_ = from.junction_range_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.JunctionFeature)
}

void JunctionFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  junction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enter_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&junction_range_) -
      reinterpret_cast<char*>(&enter_lane_)) + sizeof(junction_range_));
}

JunctionFeature::~JunctionFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.JunctionFeature)
  SharedDtor();
}

void JunctionFeature::SharedDtor() {
  junction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enter_lane_;
}

void JunctionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JunctionFeature& JunctionFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JunctionFeature_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void JunctionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.JunctionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  junction_exit_.Clear();
  junction_mlp_feature_.Clear();
  junction_mlp_label_.Clear();
  junction_mlp_probability_.Clear();
  start_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      junction_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enter_lane_ != nullptr);
      enter_lane_->Clear();
    }
  }
  junction_range_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JunctionFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string junction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_junction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.JunctionFeature.junction_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double junction_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_junction_range(&has_bits);
          junction_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.LaneFeature enter_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_enter_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.JunctionExit junction_exit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction_exit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double junction_mlp_feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_junction_mlp_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_junction_mlp_feature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 junction_mlp_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_junction_mlp_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_junction_mlp_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double junction_mlp_probability = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_junction_mlp_probability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_junction_mlp_probability(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string start_lane_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_start_lane_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.JunctionFeature.start_lane_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JunctionFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.JunctionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string junction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_junction_id().data(), static_cast<int>(this->_internal_junction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.junction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_junction_id(), target);
  }

  // optional double junction_range = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_junction_range(), target);
  }

  // optional .apollo.prediction.LaneFeature enter_lane = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::enter_lane(this), target, stream);
  }

  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_junction_exit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_junction_exit(i), target, stream);
  }

  // repeated double junction_mlp_feature = 5;
  for (int i = 0, n = this->_internal_junction_mlp_feature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_junction_mlp_feature(i), target);
  }

  // repeated int32 junction_mlp_label = 6;
  for (int i = 0, n = this->_internal_junction_mlp_label_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_junction_mlp_label(i), target);
  }

  // repeated double junction_mlp_probability = 7;
  for (int i = 0, n = this->_internal_junction_mlp_probability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_junction_mlp_probability(i), target);
  }

  // repeated string start_lane_id = 8;
  for (int i = 0, n = this->_internal_start_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_start_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.start_lane_id");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.JunctionFeature)
  return target;
}

size_t JunctionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.JunctionFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  total_size += 1UL * this->_internal_junction_exit_size();
  for (const auto& msg : this->junction_exit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double junction_mlp_feature = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_junction_mlp_feature_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_junction_mlp_feature_size());
    total_size += data_size;
  }

  // repeated int32 junction_mlp_label = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->junction_mlp_label_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_junction_mlp_label_size());
    total_size += data_size;
  }

  // repeated double junction_mlp_probability = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_junction_mlp_probability_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_junction_mlp_probability_size());
    total_size += data_size;
  }

  // repeated string start_lane_id = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(start_lane_id_.size());
  for (int i = 0, n = start_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      start_lane_id_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string junction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_junction_id());
    }

    // optional .apollo.prediction.LaneFeature enter_lane = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enter_lane_);
    }

    // optional double junction_range = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JunctionFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.JunctionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JunctionFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.JunctionFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.JunctionFeature)
    MergeFrom(*source);
  }
}

void JunctionFeature::MergeFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.JunctionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  junction_exit_.MergeFrom(from.junction_exit_);
  junction_mlp_feature_.MergeFrom(from.junction_mlp_feature_);
  junction_mlp_label_.MergeFrom(from.junction_mlp_label_);
  junction_mlp_probability_.MergeFrom(from.junction_mlp_probability_);
  start_lane_id_.MergeFrom(from.start_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      junction_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.junction_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_enter_lane()->::apollo::prediction::LaneFeature::MergeFrom(from._internal_enter_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      junction_range_ = from.junction_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JunctionFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.JunctionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionFeature::CopyFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.JunctionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionFeature::IsInitialized() const {
  return true;
}

void JunctionFeature::InternalSwap(JunctionFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  junction_exit_.InternalSwap(&other->junction_exit_);
  junction_mlp_feature_.InternalSwap(&other->junction_mlp_feature_);
  junction_mlp_label_.InternalSwap(&other->junction_mlp_label_);
  junction_mlp_probability_.InternalSwap(&other->junction_mlp_probability_);
  start_lane_id_.InternalSwap(&other->start_lane_id_);
  junction_id_.Swap(&other->junction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enter_lane_, other->enter_lane_);
  swap(junction_range_, other->junction_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstaclePriority::InitAsDefaultInstance() {
}
class ObstaclePriority::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstaclePriority>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstaclePriority::ObstaclePriority()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstaclePriority)
}
ObstaclePriority::ObstaclePriority(const ObstaclePriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstaclePriority)
}

void ObstaclePriority::SharedCtor() {
  priority_ = 2;
}

ObstaclePriority::~ObstaclePriority() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstaclePriority)
  SharedDtor();
}

void ObstaclePriority::SharedDtor() {
}

void ObstaclePriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstaclePriority& ObstaclePriority::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void ObstaclePriority::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstaclePriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstaclePriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::prediction::ObstaclePriority_Priority_IsValid(val))) {
            _internal_set_priority(static_cast<::apollo::prediction::ObstaclePriority_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstaclePriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstaclePriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstaclePriority)
  return target;
}

size_t ObstaclePriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstaclePriority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstaclePriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstaclePriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstaclePriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstaclePriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstaclePriority)
    MergeFrom(*source);
  }
}

void ObstaclePriority::MergeFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_priority()) {
    _internal_set_priority(from._internal_priority());
  }
}

void ObstaclePriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstaclePriority::CopyFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePriority::IsInitialized() const {
  return true;
}

void ObstaclePriority::InternalSwap(ObstaclePriority* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstaclePriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
Trajectory::Trajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Trajectory)
}

void Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->front_position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->raw_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->lane_ = const_cast< ::apollo::prediction::Lane*>(
      ::apollo::prediction::Lane::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->junction_feature_ = const_cast< ::apollo::prediction::JunctionFeature*>(
      ::apollo::prediction::JunctionFeature::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->t_position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->t_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->t_acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->priority_ = const_cast< ::apollo::prediction::ObstaclePriority*>(
      ::apollo::prediction::ObstaclePriority::internal_default_instance());
}
class Feature::_Internal {
 public:
  using HasBits = decltype(std::declval<Feature>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::common::Point3D& position(const Feature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point3D& front_position(const Feature* msg);
  static void set_has_front_position(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::common::Point3D& velocity(const Feature* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& raw_velocity(const Feature* msg);
  static void set_has_raw_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::common::Point3D& acceleration(const Feature* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::prediction::Lane& lane(const Feature* msg);
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::prediction::JunctionFeature& junction_feature(const Feature* msg);
  static void set_has_junction_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::common::Point3D& t_position(const Feature* msg);
  static void set_has_t_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& t_velocity(const Feature* msg);
  static void set_has_t_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_t_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_t_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::common::Point3D& t_acceleration(const Feature* msg);
  static void set_has_t_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_t_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_still(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_label_update_time_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::prediction::ObstaclePriority& priority(const Feature* msg);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_near_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
};

const ::apollo::common::Point3D&
Feature::_Internal::position(const Feature* msg) {
  return *msg->position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::front_position(const Feature* msg) {
  return *msg->front_position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::velocity(const Feature* msg) {
  return *msg->velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::raw_velocity(const Feature* msg) {
  return *msg->raw_velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::acceleration(const Feature* msg) {
  return *msg->acceleration_;
}
const ::apollo::prediction::Lane&
Feature::_Internal::lane(const Feature* msg) {
  return *msg->lane_;
}
const ::apollo::prediction::JunctionFeature&
Feature::_Internal::junction_feature(const Feature* msg) {
  return *msg->junction_feature_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_position(const Feature* msg) {
  return *msg->t_position_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_velocity(const Feature* msg) {
  return *msg->t_velocity_;
}
const ::apollo::common::Point3D&
Feature::_Internal::t_acceleration(const Feature* msg) {
  return *msg->t_acceleration_;
}
const ::apollo::prediction::ObstaclePriority&
Feature::_Internal::priority(const Feature* msg) {
  return *msg->priority_;
}
void Feature::clear_polygon_point() {
  polygon_point_.Clear();
}
void Feature::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Feature::clear_front_position() {
  if (front_position_ != nullptr) front_position_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void Feature::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Feature::clear_raw_velocity() {
  if (raw_velocity_ != nullptr) raw_velocity_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void Feature::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Feature::clear_t_position() {
  if (t_position_ != nullptr) t_position_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Feature::clear_t_velocity() {
  if (t_velocity_ != nullptr) t_velocity_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Feature::clear_t_acceleration() {
  if (t_acceleration_ != nullptr) t_acceleration_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Feature::clear_future_trajectory_points() {
  future_trajectory_points_.Clear();
}
void Feature::clear_short_term_predicted_trajectory_points() {
  short_term_predicted_trajectory_points_.Clear();
}
void Feature::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
Feature::Feature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_),
      future_trajectory_points_(from.future_trajectory_points_),
      short_term_predicted_trajectory_points_(from.short_term_predicted_trajectory_points_),
      predicted_trajectory_(from.predicted_trajectory_),
      adc_trajectory_point_(from.adc_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::apollo::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_lane()) {
    lane_ = new ::apollo::prediction::Lane(*from.lane_);
  } else {
    lane_ = nullptr;
  }
  if (from._internal_has_t_position()) {
    t_position_ = new ::apollo::common::Point3D(*from.t_position_);
  } else {
    t_position_ = nullptr;
  }
  if (from._internal_has_t_velocity()) {
    t_velocity_ = new ::apollo::common::Point3D(*from.t_velocity_);
  } else {
    t_velocity_ = nullptr;
  }
  if (from._internal_has_t_acceleration()) {
    t_acceleration_ = new ::apollo::common::Point3D(*from.t_acceleration_);
  } else {
    t_acceleration_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::apollo::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_junction_feature()) {
    junction_feature_ = new ::apollo::prediction::JunctionFeature(*from.junction_feature_);
  } else {
    junction_feature_ = nullptr;
  }
  if (from._internal_has_front_position()) {
    front_position_ = new ::apollo::common::Point3D(*from.front_position_);
  } else {
    front_position_ = nullptr;
  }
  if (from._internal_has_raw_velocity()) {
    raw_velocity_ = new ::apollo::common::Point3D(*from.raw_velocity_);
  } else {
    raw_velocity_ = nullptr;
  }
  ::memcpy(&velocity_heading_, &from.velocity_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_junction_) -
    reinterpret_cast<char*>(&velocity_heading_)) + sizeof(is_near_junction_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Feature)
}

void Feature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_near_junction_) -
      reinterpret_cast<char*>(&position_)) + sizeof(is_near_junction_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete lane_;
  if (this != internal_default_instance()) delete t_position_;
  if (this != internal_default_instance()) delete t_velocity_;
  if (this != internal_default_instance()) delete t_acceleration_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete junction_feature_;
  if (this != internal_default_instance()) delete front_position_;
  if (this != internal_default_instance()) delete raw_velocity_;
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature& Feature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feature_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  future_trajectory_points_.Clear();
  short_term_predicted_trajectory_points_.Clear();
  predicted_trajectory_.Clear();
  adc_trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lane_ != nullptr);
      lane_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(t_position_ != nullptr);
      t_position_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(t_velocity_ != nullptr);
      t_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(t_acceleration_ != nullptr);
      t_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(priority_ != nullptr);
      priority_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(junction_feature_ != nullptr);
      junction_feature_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(front_position_ != nullptr);
      front_position_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(raw_velocity_ != nullptr);
      raw_velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&velocity_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&velocity_heading_)) + sizeof(length_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_speed_) -
        reinterpret_cast<char*>(&width_)) + sizeof(t_speed_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&t_acc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_near_junction_) -
        reinterpret_cast<char*>(&t_acc_)) + sizeof(is_near_junction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double velocity_heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_velocity_heading(&has_bits);
          velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_acc(&has_bits);
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double tracking_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_tracking_time(&has_bits);
          tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.Lane lane = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double t_velocity_heading = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_t_velocity_heading(&has_bits);
          t_velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double t_speed = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_t_speed(&has_bits);
          t_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double t_acc = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_t_acc(&has_bits);
          t_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_still = 22 [default = false];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_still(&has_bits);
          is_still_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double label_update_time_delta = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_label_update_time_delta(&has_bits);
          label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority priority = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.JunctionFeature junction_feature = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D front_position = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D raw_velocity = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_near_junction = 29 [default = false];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_is_near_junction(&has_bits);
          is_near_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D polygon_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_future_trajectory_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_short_term_predicted_trajectory_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_predicted_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // optional .apollo.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceleration(this), target, stream);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_velocity_heading(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed(), target);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acc(), target);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_theta(), target);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_length(), target);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_height(), target);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_tracking_time(), target);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_timestamp(), target);
  }

  // optional .apollo.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::lane(this), target, stream);
  }

  // optional .apollo.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::t_position(this), target, stream);
  }

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::t_velocity(this), target, stream);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_t_velocity_heading(), target);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_t_speed(), target);
  }

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::t_acceleration(this), target, stream);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_t_acc(), target);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_still(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_type(), target);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_label_update_time_delta(), target);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 25;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::priority(this), target, stream);
  }

  // optional .apollo.prediction.JunctionFeature junction_feature = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::junction_feature(this), target, stream);
  }

  // optional .apollo.common.Point3D front_position = 27;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::front_position(this), target, stream);
  }

  // optional .apollo.common.Point3D raw_velocity = 28;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::raw_velocity(this), target, stream);
  }

  // optional bool is_near_junction = 29 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_is_near_junction(), target);
  }

  // repeated .apollo.common.Point3D polygon_point = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_polygon_point(i), target, stream);
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_future_trajectory_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_future_trajectory_points(i), target, stream);
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_short_term_predicted_trajectory_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_short_term_predicted_trajectory_points(i), target, stream);
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predicted_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_predicted_trajectory(i), target, stream);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_adc_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D polygon_point = 30;
  total_size += 2UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  total_size += 2UL * this->_internal_future_trajectory_points_size();
  for (const auto& msg : this->future_trajectory_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  total_size += 2UL * this->_internal_short_term_predicted_trajectory_points_size();
  for (const auto& msg : this->short_term_predicted_trajectory_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  total_size += 2UL * this->_internal_predicted_trajectory_size();
  for (const auto& msg : this->predicted_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  total_size += 2UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D velocity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .apollo.prediction.Lane lane = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_);
    }

    // optional .apollo.common.Point3D t_position = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_position_);
    }

    // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_velocity_);
    }

    // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_acceleration_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *priority_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.prediction.JunctionFeature junction_feature = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *junction_feature_);
    }

    // optional .apollo.common.Point3D front_position = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *front_position_);
    }

    // optional .apollo.common.Point3D raw_velocity = 28;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *raw_velocity_);
    }

    // optional double velocity_heading = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double acc = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double theta = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double width = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double height = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double timestamp = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional double t_velocity_heading = 18 [deprecated = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double t_speed = 19 [deprecated = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional double t_acc = 21 [deprecated = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double label_update_time_delta = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_still = 22 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_near_junction = 29 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Feature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  future_trajectory_points_.MergeFrom(from.future_trajectory_points_);
  short_term_predicted_trajectory_points_.MergeFrom(from.short_term_predicted_trajectory_points_);
  predicted_trajectory_.MergeFrom(from.predicted_trajectory_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_lane()->::apollo::prediction::Lane::MergeFrom(from._internal_lane());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_t_position()->::apollo::common::Point3D::MergeFrom(from._internal_t_position());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_t_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_t_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_t_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_t_acceleration());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_junction_feature()->::apollo::prediction::JunctionFeature::MergeFrom(from._internal_junction_feature());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_front_position()->::apollo::common::Point3D::MergeFrom(from._internal_front_position());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_raw_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_raw_velocity());
    }
    if (cached_has_bits & 0x00000800u) {
      velocity_heading_ = from.velocity_heading_;
    }
    if (cached_has_bits & 0x00001000u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_ = from.acc_;
    }
    if (cached_has_bits & 0x00004000u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00008000u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00020000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00040000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00100000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00200000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00400000u) {
      t_velocity_heading_ = from.t_velocity_heading_;
    }
    if (cached_has_bits & 0x00800000u) {
      t_speed_ = from.t_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      t_acc_ = from.t_acc_;
    }
    if (cached_has_bits & 0x02000000u) {
      label_update_time_delta_ = from.label_update_time_delta_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_still_ = from.is_still_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_near_junction_ = from.is_near_junction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Feature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(future_trajectory_points_)) return false;
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_point_.InternalSwap(&other->polygon_point_);
  future_trajectory_points_.InternalSwap(&other->future_trajectory_points_);
  short_term_predicted_trajectory_points_.InternalSwap(&other->short_term_predicted_trajectory_points_);
  predicted_trajectory_.InternalSwap(&other->predicted_trajectory_);
  adc_trajectory_point_.InternalSwap(&other->adc_trajectory_point_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(lane_, other->lane_);
  swap(t_position_, other->t_position_);
  swap(t_velocity_, other->t_velocity_);
  swap(t_acceleration_, other->t_acceleration_);
  swap(priority_, other->priority_);
  swap(junction_feature_, other->junction_feature_);
  swap(front_position_, other->front_position_);
  swap(raw_velocity_, other->raw_velocity_);
  swap(velocity_heading_, other->velocity_heading_);
  swap(speed_, other->speed_);
  swap(acc_, other->acc_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(tracking_time_, other->tracking_time_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(t_velocity_heading_, other->t_velocity_heading_);
  swap(t_speed_, other->t_speed_);
  swap(t_acc_, other->t_acc_);
  swap(label_update_time_delta_, other->label_update_time_delta_);
  swap(is_still_, other->is_still_);
  swap(is_near_junction_, other->is_near_junction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleHistory::InitAsDefaultInstance() {
}
class ObstacleHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleHistory>()._has_bits_);
  static void set_has_is_trainable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObstacleHistory::ObstacleHistory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleHistory)
}
ObstacleHistory::ObstacleHistory(const ObstacleHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_trainable_ = from.is_trainable_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleHistory)
}

void ObstacleHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  is_trainable_ = false;
}

ObstacleHistory::~ObstacleHistory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleHistory)
  SharedDtor();
}

void ObstacleHistory::SharedDtor() {
}

void ObstacleHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleHistory& ObstacleHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleHistory_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void ObstacleHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  is_trainable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.prediction.Feature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_trainable = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_trainable(&has_bits);
          is_trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_feature(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_trainable = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_trainable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleHistory)
  return target;
}

size_t ObstacleHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_trainable = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleHistory)
    MergeFrom(*source);
  }
}

void ObstacleHistory::MergeFrom(const ObstacleHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from._internal_has_is_trainable()) {
    _internal_set_is_trainable(from._internal_is_trainable());
  }
}

void ObstacleHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleHistory::CopyFrom(const ObstacleHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleHistory::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(feature_)) return false;
  return true;
}

void ObstacleHistory::InternalSwap(ObstacleHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_.InternalSwap(&other->feature_);
  swap(is_trainable_, other->is_trainable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameEnv::InitAsDefaultInstance() {
  ::apollo::prediction::_FrameEnv_default_instance_._instance.get_mutable()->ego_history_ = const_cast< ::apollo::prediction::ObstacleHistory*>(
      ::apollo::prediction::ObstacleHistory::internal_default_instance());
}
class FrameEnv::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameEnv>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::prediction::ObstacleHistory& ego_history(const FrameEnv* msg);
  static void set_has_ego_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::prediction::ObstacleHistory&
FrameEnv::_Internal::ego_history(const FrameEnv* msg) {
  return *msg->ego_history_;
}
FrameEnv::FrameEnv()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.FrameEnv)
}
FrameEnv::FrameEnv(const FrameEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacles_history_(from.obstacles_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ego_history()) {
    ego_history_ = new ::apollo::prediction::ObstacleHistory(*from.ego_history_);
  } else {
    ego_history_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FrameEnv)
}

void FrameEnv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameEnv_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  ::memset(&ego_history_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ego_history_)) + sizeof(timestamp_));
}

FrameEnv::~FrameEnv() {
  // @@protoc_insertion_point(destructor:apollo.prediction.FrameEnv)
  SharedDtor();
}

void FrameEnv::SharedDtor() {
  if (this != internal_default_instance()) delete ego_history_;
}

void FrameEnv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameEnv& FrameEnv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameEnv_modules_2fprediction_2fproto_2ffeature_2eproto.base);
  return *internal_default_instance();
}


void FrameEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.FrameEnv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ego_history_ != nullptr);
    ego_history_->Clear();
  }
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FrameEnv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleHistory ego_history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ego_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameEnv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.FrameEnv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional .apollo.prediction.ObstacleHistory ego_history = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ego_history(this), target, stream);
  }

  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_obstacles_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.FrameEnv)
  return target;
}

size_t FrameEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.FrameEnv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  total_size += 1UL * this->_internal_obstacles_history_size();
  for (const auto& msg : this->obstacles_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.prediction.ObstacleHistory ego_history = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ego_history_);
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameEnv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.FrameEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameEnv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameEnv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.FrameEnv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.FrameEnv)
    MergeFrom(*source);
  }
}

void FrameEnv::MergeFrom(const FrameEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.FrameEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_history_.MergeFrom(from.obstacles_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ego_history()->::apollo::prediction::ObstacleHistory::MergeFrom(from._internal_ego_history());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameEnv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.FrameEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameEnv::CopyFrom(const FrameEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.FrameEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameEnv::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(obstacles_history_)) return false;
  if (_internal_has_ego_history()) {
    if (!ego_history_->IsInitialized()) return false;
  }
  return true;
}

void FrameEnv::InternalSwap(FrameEnv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacles_history_.InternalSwap(&other->obstacles_history_);
  swap(ego_history_, other->ego_history_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameEnv::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::Lane* Arena::CreateMaybeMessage< ::apollo::prediction::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::LaneFeature* Arena::CreateMaybeMessage< ::apollo::prediction::LaneFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::JunctionExit* Arena::CreateMaybeMessage< ::apollo::prediction::JunctionExit >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::JunctionExit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::JunctionFeature* Arena::CreateMaybeMessage< ::apollo::prediction::JunctionFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::JunctionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstaclePriority* Arena::CreateMaybeMessage< ::apollo::prediction::ObstaclePriority >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstaclePriority >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Trajectory* Arena::CreateMaybeMessage< ::apollo::prediction::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Feature* Arena::CreateMaybeMessage< ::apollo::prediction::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::ObstacleHistory* Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleHistory >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstacleHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::FrameEnv* Arena::CreateMaybeMessage< ::apollo::prediction::FrameEnv >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::FrameEnv >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
