// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/prediction/proto/feature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
namespace apollo {
namespace prediction {
class ObstacleConf;
class ObstacleConfDefaultTypeInternal;
extern ObstacleConfDefaultTypeInternal _ObstacleConf_default_instance_;
class PredictionConf;
class PredictionConfDefaultTypeInternal;
extern PredictionConfDefaultTypeInternal _PredictionConf_default_instance_;
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::prediction::ObstacleConf* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleConf>(Arena*);
template<> ::apollo::prediction::PredictionConf* Arena::CreateMaybeMessage<::apollo::prediction::PredictionConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace prediction {

enum ObstacleConf_ObstacleStatus : int {
  ObstacleConf_ObstacleStatus_ON_LANE = 0,
  ObstacleConf_ObstacleStatus_OFF_LANE = 1,
  ObstacleConf_ObstacleStatus_STATIONARY = 3,
  ObstacleConf_ObstacleStatus_MOVING = 4,
  ObstacleConf_ObstacleStatus_IN_JUNCTION = 5
};
bool ObstacleConf_ObstacleStatus_IsValid(int value);
constexpr ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MIN = ObstacleConf_ObstacleStatus_ON_LANE;
constexpr ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MAX = ObstacleConf_ObstacleStatus_IN_JUNCTION;
constexpr int ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE = ObstacleConf_ObstacleStatus_ObstacleStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor();
template<typename T>
inline const std::string& ObstacleConf_ObstacleStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleConf_ObstacleStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleConf_ObstacleStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleConf_ObstacleStatus_descriptor(), enum_t_value);
}
inline bool ObstacleConf_ObstacleStatus_Parse(
    const std::string& name, ObstacleConf_ObstacleStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleConf_ObstacleStatus>(
    ObstacleConf_ObstacleStatus_descriptor(), name, value);
}
enum ObstacleConf_EvaluatorType : int {
  ObstacleConf_EvaluatorType_MLP_EVALUATOR = 0,
  ObstacleConf_EvaluatorType_RNN_EVALUATOR = 1,
  ObstacleConf_EvaluatorType_COST_EVALUATOR = 2,
  ObstacleConf_EvaluatorType_CRUISE_MLP_EVALUATOR = 3,
  ObstacleConf_EvaluatorType_JUNCTION_MLP_EVALUATOR = 4,
  ObstacleConf_EvaluatorType_CYCLIST_KEEP_LANE_EVALUATOR = 5,
  ObstacleConf_EvaluatorType_LANE_SCANNING_EVALUATOR = 6,
  ObstacleConf_EvaluatorType_PEDESTRIAN_INTERACTION_EVALUATOR = 7,
  ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR = 8
};
bool ObstacleConf_EvaluatorType_IsValid(int value);
constexpr ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MIN = ObstacleConf_EvaluatorType_MLP_EVALUATOR;
constexpr ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MAX = ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR;
constexpr int ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE = ObstacleConf_EvaluatorType_EvaluatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor();
template<typename T>
inline const std::string& ObstacleConf_EvaluatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleConf_EvaluatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleConf_EvaluatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleConf_EvaluatorType_descriptor(), enum_t_value);
}
inline bool ObstacleConf_EvaluatorType_Parse(
    const std::string& name, ObstacleConf_EvaluatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleConf_EvaluatorType>(
    ObstacleConf_EvaluatorType_descriptor(), name, value);
}
enum ObstacleConf_PredictorType : int {
  ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR = 0,
  ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR = 1,
  ObstacleConf_PredictorType_REGIONAL_PREDICTOR = 2,
  ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR = 3,
  ObstacleConf_PredictorType_EMPTY_PREDICTOR = 4,
  ObstacleConf_PredictorType_SINGLE_LANE_PREDICTOR = 5,
  ObstacleConf_PredictorType_JUNCTION_PREDICTOR = 6,
  ObstacleConf_PredictorType_EXTRAPOLATION_PREDICTOR = 7,
  ObstacleConf_PredictorType_INTERACTION_PREDICTOR = 8
};
bool ObstacleConf_PredictorType_IsValid(int value);
constexpr ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MIN = ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
constexpr ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MAX = ObstacleConf_PredictorType_INTERACTION_PREDICTOR;
constexpr int ObstacleConf_PredictorType_PredictorType_ARRAYSIZE = ObstacleConf_PredictorType_PredictorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleConf_PredictorType_descriptor();
template<typename T>
inline const std::string& ObstacleConf_PredictorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleConf_PredictorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleConf_PredictorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleConf_PredictorType_descriptor(), enum_t_value);
}
inline bool ObstacleConf_PredictorType_Parse(
    const std::string& name, ObstacleConf_PredictorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleConf_PredictorType>(
    ObstacleConf_PredictorType_descriptor(), name, value);
}
// ===================================================================

class ObstacleConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleConf) */ {
 public:
  ObstacleConf();
  virtual ~ObstacleConf();

  ObstacleConf(const ObstacleConf& from);
  ObstacleConf(ObstacleConf&& from) noexcept
    : ObstacleConf() {
    *this = ::std::move(from);
  }

  inline ObstacleConf& operator=(const ObstacleConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleConf& operator=(ObstacleConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstacleConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleConf* internal_default_instance() {
    return reinterpret_cast<const ObstacleConf*>(
               &_ObstacleConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObstacleConf& a, ObstacleConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstacleConf* New() const final {
    return CreateMaybeMessage<ObstacleConf>(nullptr);
  }

  ObstacleConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstacleConf& from);
  void MergeFrom(const ObstacleConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.ObstacleConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObstacleConf_ObstacleStatus ObstacleStatus;
  static constexpr ObstacleStatus ON_LANE =
    ObstacleConf_ObstacleStatus_ON_LANE;
  static constexpr ObstacleStatus OFF_LANE =
    ObstacleConf_ObstacleStatus_OFF_LANE;
  static constexpr ObstacleStatus STATIONARY =
    ObstacleConf_ObstacleStatus_STATIONARY;
  static constexpr ObstacleStatus MOVING =
    ObstacleConf_ObstacleStatus_MOVING;
  static constexpr ObstacleStatus IN_JUNCTION =
    ObstacleConf_ObstacleStatus_IN_JUNCTION;
  static inline bool ObstacleStatus_IsValid(int value) {
    return ObstacleConf_ObstacleStatus_IsValid(value);
  }
  static constexpr ObstacleStatus ObstacleStatus_MIN =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MIN;
  static constexpr ObstacleStatus ObstacleStatus_MAX =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MAX;
  static constexpr int ObstacleStatus_ARRAYSIZE =
    ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObstacleStatus_descriptor() {
    return ObstacleConf_ObstacleStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ObstacleStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObstacleStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObstacleStatus_Name.");
    return ObstacleConf_ObstacleStatus_Name(enum_t_value);
  }
  static inline bool ObstacleStatus_Parse(const std::string& name,
      ObstacleStatus* value) {
    return ObstacleConf_ObstacleStatus_Parse(name, value);
  }

  typedef ObstacleConf_EvaluatorType EvaluatorType;
  static constexpr EvaluatorType MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_MLP_EVALUATOR;
  static constexpr EvaluatorType RNN_EVALUATOR =
    ObstacleConf_EvaluatorType_RNN_EVALUATOR;
  static constexpr EvaluatorType COST_EVALUATOR =
    ObstacleConf_EvaluatorType_COST_EVALUATOR;
  static constexpr EvaluatorType CRUISE_MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_CRUISE_MLP_EVALUATOR;
  static constexpr EvaluatorType JUNCTION_MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_JUNCTION_MLP_EVALUATOR;
  static constexpr EvaluatorType CYCLIST_KEEP_LANE_EVALUATOR =
    ObstacleConf_EvaluatorType_CYCLIST_KEEP_LANE_EVALUATOR;
  static constexpr EvaluatorType LANE_SCANNING_EVALUATOR =
    ObstacleConf_EvaluatorType_LANE_SCANNING_EVALUATOR;
  static constexpr EvaluatorType PEDESTRIAN_INTERACTION_EVALUATOR =
    ObstacleConf_EvaluatorType_PEDESTRIAN_INTERACTION_EVALUATOR;
  static constexpr EvaluatorType JUNCTION_MAP_EVALUATOR =
    ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR;
  static inline bool EvaluatorType_IsValid(int value) {
    return ObstacleConf_EvaluatorType_IsValid(value);
  }
  static constexpr EvaluatorType EvaluatorType_MIN =
    ObstacleConf_EvaluatorType_EvaluatorType_MIN;
  static constexpr EvaluatorType EvaluatorType_MAX =
    ObstacleConf_EvaluatorType_EvaluatorType_MAX;
  static constexpr int EvaluatorType_ARRAYSIZE =
    ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EvaluatorType_descriptor() {
    return ObstacleConf_EvaluatorType_descriptor();
  }
  template<typename T>
  static inline const std::string& EvaluatorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EvaluatorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EvaluatorType_Name.");
    return ObstacleConf_EvaluatorType_Name(enum_t_value);
  }
  static inline bool EvaluatorType_Parse(const std::string& name,
      EvaluatorType* value) {
    return ObstacleConf_EvaluatorType_Parse(name, value);
  }

  typedef ObstacleConf_PredictorType PredictorType;
  static constexpr PredictorType LANE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
  static constexpr PredictorType FREE_MOVE_PREDICTOR =
    ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR;
  static constexpr PredictorType REGIONAL_PREDICTOR =
    ObstacleConf_PredictorType_REGIONAL_PREDICTOR;
  static constexpr PredictorType MOVE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR;
  static constexpr PredictorType EMPTY_PREDICTOR =
    ObstacleConf_PredictorType_EMPTY_PREDICTOR;
  static constexpr PredictorType SINGLE_LANE_PREDICTOR =
    ObstacleConf_PredictorType_SINGLE_LANE_PREDICTOR;
  static constexpr PredictorType JUNCTION_PREDICTOR =
    ObstacleConf_PredictorType_JUNCTION_PREDICTOR;
  static constexpr PredictorType EXTRAPOLATION_PREDICTOR =
    ObstacleConf_PredictorType_EXTRAPOLATION_PREDICTOR;
  static constexpr PredictorType INTERACTION_PREDICTOR =
    ObstacleConf_PredictorType_INTERACTION_PREDICTOR;
  static inline bool PredictorType_IsValid(int value) {
    return ObstacleConf_PredictorType_IsValid(value);
  }
  static constexpr PredictorType PredictorType_MIN =
    ObstacleConf_PredictorType_PredictorType_MIN;
  static constexpr PredictorType PredictorType_MAX =
    ObstacleConf_PredictorType_PredictorType_MAX;
  static constexpr int PredictorType_ARRAYSIZE =
    ObstacleConf_PredictorType_PredictorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PredictorType_descriptor() {
    return ObstacleConf_PredictorType_descriptor();
  }
  template<typename T>
  static inline const std::string& PredictorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PredictorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PredictorType_Name.");
    return ObstacleConf_PredictorType_Name(enum_t_value);
  }
  static inline bool PredictorType_Parse(const std::string& name,
      PredictorType* value) {
    return ObstacleConf_PredictorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleTypeFieldNumber = 1,
    kObstacleStatusFieldNumber = 2,
    kEvaluatorTypeFieldNumber = 3,
    kPredictorTypeFieldNumber = 4,
    kPriorityTypeFieldNumber = 5,
  };
  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  bool has_obstacle_type() const;
  private:
  bool _internal_has_obstacle_type() const;
  public:
  void clear_obstacle_type();
  ::apollo::perception::PerceptionObstacle_Type obstacle_type() const;
  void set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value);
  private:
  ::apollo::perception::PerceptionObstacle_Type _internal_obstacle_type() const;
  void _internal_set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value);
  public:

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
  bool has_obstacle_status() const;
  private:
  bool _internal_has_obstacle_status() const;
  public:
  void clear_obstacle_status();
  ::apollo::prediction::ObstacleConf_ObstacleStatus obstacle_status() const;
  void set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value);
  private:
  ::apollo::prediction::ObstacleConf_ObstacleStatus _internal_obstacle_status() const;
  void _internal_set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value);
  public:

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  bool has_evaluator_type() const;
  private:
  bool _internal_has_evaluator_type() const;
  public:
  void clear_evaluator_type();
  ::apollo::prediction::ObstacleConf_EvaluatorType evaluator_type() const;
  void set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value);
  private:
  ::apollo::prediction::ObstacleConf_EvaluatorType _internal_evaluator_type() const;
  void _internal_set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value);
  public:

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  bool has_predictor_type() const;
  private:
  bool _internal_has_predictor_type() const;
  public:
  void clear_predictor_type();
  ::apollo::prediction::ObstacleConf_PredictorType predictor_type() const;
  void set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value);
  private:
  ::apollo::prediction::ObstacleConf_PredictorType _internal_predictor_type() const;
  void _internal_set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value);
  public:

  // optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
  bool has_priority_type() const;
  private:
  bool _internal_has_priority_type() const;
  public:
  void clear_priority_type();
  ::apollo::prediction::ObstaclePriority_Priority priority_type() const;
  void set_priority_type(::apollo::prediction::ObstaclePriority_Priority value);
  private:
  ::apollo::prediction::ObstaclePriority_Priority _internal_priority_type() const;
  void _internal_set_priority_type(::apollo::prediction::ObstaclePriority_Priority value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int obstacle_type_;
  int obstacle_status_;
  int evaluator_type_;
  int predictor_type_;
  int priority_type_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PredictionConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionConf) */ {
 public:
  PredictionConf();
  virtual ~PredictionConf();

  PredictionConf(const PredictionConf& from);
  PredictionConf(PredictionConf&& from) noexcept
    : PredictionConf() {
    *this = ::std::move(from);
  }

  inline PredictionConf& operator=(const PredictionConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionConf& operator=(PredictionConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionConf* internal_default_instance() {
    return reinterpret_cast<const PredictionConf*>(
               &_PredictionConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PredictionConf& a, PredictionConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionConf* New() const final {
    return CreateMaybeMessage<PredictionConf>(nullptr);
  }

  PredictionConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionConf& from);
  void MergeFrom(const PredictionConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.prediction.PredictionConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto);
    return ::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleConfFieldNumber = 1,
  };
  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
  int obstacle_conf_size() const;
  private:
  int _internal_obstacle_conf_size() const;
  public:
  void clear_obstacle_conf();
  ::apollo::prediction::ObstacleConf* mutable_obstacle_conf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
      mutable_obstacle_conf();
  private:
  const ::apollo::prediction::ObstacleConf& _internal_obstacle_conf(int index) const;
  ::apollo::prediction::ObstacleConf* _internal_add_obstacle_conf();
  public:
  const ::apollo::prediction::ObstacleConf& obstacle_conf(int index) const;
  ::apollo::prediction::ObstacleConf* add_obstacle_conf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
      obstacle_conf() const;

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf > obstacle_conf_;
  friend struct ::TableStruct_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleConf

// optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
inline bool ObstacleConf::_internal_has_obstacle_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleConf::has_obstacle_type() const {
  return _internal_has_obstacle_type();
}
inline void ObstacleConf::clear_obstacle_type() {
  obstacle_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::perception::PerceptionObstacle_Type ObstacleConf::_internal_obstacle_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(obstacle_type_);
}
inline ::apollo::perception::PerceptionObstacle_Type ObstacleConf::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_type)
  return _internal_obstacle_type();
}
inline void ObstacleConf::_internal_set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  obstacle_type_ = value;
}
inline void ObstacleConf::set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  _internal_set_obstacle_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_type)
}

// optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2;
inline bool ObstacleConf::_internal_has_obstacle_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObstacleConf::has_obstacle_status() const {
  return _internal_has_obstacle_status();
}
inline void ObstacleConf::clear_obstacle_status() {
  obstacle_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::_internal_obstacle_status() const {
  return static_cast< ::apollo::prediction::ObstacleConf_ObstacleStatus >(obstacle_status_);
}
inline ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_status)
  return _internal_obstacle_status();
}
inline void ObstacleConf::_internal_set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  assert(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  obstacle_status_ = value;
}
inline void ObstacleConf::set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  _internal_set_obstacle_status(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_status)
}

// optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
inline bool ObstacleConf::_internal_has_priority_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ObstacleConf::has_priority_type() const {
  return _internal_has_priority_type();
}
inline void ObstacleConf::clear_priority_type() {
  priority_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstacleConf::_internal_priority_type() const {
  return static_cast< ::apollo::prediction::ObstaclePriority_Priority >(priority_type_);
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstacleConf::priority_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.priority_type)
  return _internal_priority_type();
}
inline void ObstacleConf::_internal_set_priority_type(::apollo::prediction::ObstaclePriority_Priority value) {
  assert(::apollo::prediction::ObstaclePriority_Priority_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  priority_type_ = value;
}
inline void ObstacleConf::set_priority_type(::apollo::prediction::ObstaclePriority_Priority value) {
  _internal_set_priority_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.priority_type)
}

// optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
inline bool ObstacleConf::_internal_has_evaluator_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObstacleConf::has_evaluator_type() const {
  return _internal_has_evaluator_type();
}
inline void ObstacleConf::clear_evaluator_type() {
  evaluator_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::_internal_evaluator_type() const {
  return static_cast< ::apollo::prediction::ObstacleConf_EvaluatorType >(evaluator_type_);
}
inline ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::evaluator_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.evaluator_type)
  return _internal_evaluator_type();
}
inline void ObstacleConf::_internal_set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  assert(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  evaluator_type_ = value;
}
inline void ObstacleConf::set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  _internal_set_evaluator_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.evaluator_type)
}

// optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
inline bool ObstacleConf::_internal_has_predictor_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObstacleConf::has_predictor_type() const {
  return _internal_has_predictor_type();
}
inline void ObstacleConf::clear_predictor_type() {
  predictor_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::_internal_predictor_type() const {
  return static_cast< ::apollo::prediction::ObstacleConf_PredictorType >(predictor_type_);
}
inline ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::predictor_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.predictor_type)
  return _internal_predictor_type();
}
inline void ObstacleConf::_internal_set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  assert(::apollo::prediction::ObstacleConf_PredictorType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  predictor_type_ = value;
}
inline void ObstacleConf::set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  _internal_set_predictor_type(value);
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.predictor_type)
}

// -------------------------------------------------------------------

// PredictionConf

// repeated .apollo.prediction.ObstacleConf obstacle_conf = 1;
inline int PredictionConf::_internal_obstacle_conf_size() const {
  return obstacle_conf_.size();
}
inline int PredictionConf::obstacle_conf_size() const {
  return _internal_obstacle_conf_size();
}
inline void PredictionConf::clear_obstacle_conf() {
  obstacle_conf_.Clear();
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::mutable_obstacle_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
PredictionConf::mutable_obstacle_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionConf.obstacle_conf)
  return &obstacle_conf_;
}
inline const ::apollo::prediction::ObstacleConf& PredictionConf::_internal_obstacle_conf(int index) const {
  return obstacle_conf_.Get(index);
}
inline const ::apollo::prediction::ObstacleConf& PredictionConf::obstacle_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.obstacle_conf)
  return _internal_obstacle_conf(index);
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::_internal_add_obstacle_conf() {
  return obstacle_conf_.Add();
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::add_obstacle_conf() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionConf.obstacle_conf)
  return _internal_add_obstacle_conf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
PredictionConf::obstacle_conf() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_ObstacleStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_ObstacleStatus>() {
  return ::apollo::prediction::ObstacleConf_ObstacleStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_EvaluatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_EvaluatorType>() {
  return ::apollo::prediction::ObstacleConf_EvaluatorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_PredictorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_PredictorType>() {
  return ::apollo::prediction::ObstacleConf_PredictorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
