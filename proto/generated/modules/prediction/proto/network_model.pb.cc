// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/network_model.proto

#include "modules/prediction/proto/network_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto;
namespace apollo {
namespace prediction {
class VerificationSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerificationSample> _instance;
} _VerificationSample_default_instance_;
class PerformanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Performance> _instance;
} _Performance_default_instance_;
class NetParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetParameter> _instance;
} _NetParameter_default_instance_;
}  // namespace prediction
}  // namespace apollo
static void InitDefaultsscc_info_NetParameter_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_NetParameter_default_instance_;
    new (ptr) ::apollo::prediction::NetParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::NetParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NetParameter_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NetParameter_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto}, {
      &scc_info_LayerParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,
      &scc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base,
      &scc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Performance_default_instance_;
    new (ptr) ::apollo::prediction::Performance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Performance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_VerificationSample_default_instance_;
    new (ptr) ::apollo::prediction::VerificationSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::VerificationSample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto}, {
      &scc_info_TensorParameter_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, features_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::VerificationSample, distance_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, accuracy_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, recall_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::Performance, precision_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, layers_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, verification_samples_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, performance_),
  PROTOBUF_FIELD_OFFSET(::apollo::prediction::NetParameter, time_dumped_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::prediction::VerificationSample)},
  { 11, 19, sizeof(::apollo::prediction::Performance)},
  { 22, 33, sizeof(::apollo::prediction::NetParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_VerificationSample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_Performance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::prediction::_NetParameter_default_instance_),
};

const char descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/prediction/proto/network_model"
  ".proto\022\021apollo.prediction\032-modules/predi"
  "ction/proto/network_layers.proto\"q\n\022Veri"
  "ficationSample\0224\n\010features\030\001 \003(\0132\".apoll"
  "o.prediction.TensorParameter\022\023\n\013probabil"
  "ity\030\002 \001(\002\022\020\n\010distance\030\003 \001(\002\"B\n\013Performan"
  "ce\022\020\n\010accuracy\030\001 \003(\002\022\016\n\006recall\030\002 \003(\002\022\021\n\t"
  "precision\030\003 \003(\002\"\352\001\n\014NetParameter\022\n\n\002id\030\001"
  " \001(\005\022\014\n\004name\030\002 \001(\t\0221\n\006layers\030\003 \003(\0132!.apo"
  "llo.prediction.LayerParameter\022C\n\024verific"
  "ation_samples\030\004 \003(\0132%.apollo.prediction."
  "VerificationSample\0223\n\013performance\030\005 \001(\0132"
  "\036.apollo.prediction.Performance\022\023\n\013time_"
  "dumped\030\006 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_deps[1] = {
  &::descriptor_table_modules_2fprediction_2fproto_2fnetwork_5flayers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_sccs[3] = {
  &scc_info_NetParameter_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base,
  &scc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base,
  &scc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once;
static bool descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = {
  &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_initialized, descriptor_table_protodef_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto, "modules/prediction/proto/network_model.proto", 532,
  &descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_once, descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_sccs, descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto::offsets,
  file_level_metadata_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto, 3, file_level_enum_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto, file_level_service_descriptors_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto), true);
namespace apollo {
namespace prediction {

// ===================================================================

void VerificationSample::InitAsDefaultInstance() {
}
class VerificationSample::_Internal {
 public:
  using HasBits = decltype(std::declval<VerificationSample>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void VerificationSample::clear_features() {
  features_.Clear();
}
VerificationSample::VerificationSample()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.VerificationSample)
}
VerificationSample::VerificationSample(const VerificationSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&probability_, &from.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&probability_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VerificationSample)
}

void VerificationSample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base);
  ::memset(&probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&probability_)) + sizeof(distance_));
}

VerificationSample::~VerificationSample() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VerificationSample)
  SharedDtor();
}

void VerificationSample::SharedDtor() {
}

void VerificationSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerificationSample& VerificationSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerificationSample_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void VerificationSample::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VerificationSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&probability_)) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VerificationSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.prediction.TensorParameter features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerificationSample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VerificationSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.TensorParameter features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_features_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_features(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float probability = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_probability(), target);
  }

  // optional float distance = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VerificationSample)
  return target;
}

size_t VerificationSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VerificationSample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.TensorParameter features = 1;
  total_size += 1UL * this->_internal_features_size();
  for (const auto& msg : this->features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float probability = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float distance = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerificationSample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.VerificationSample)
  GOOGLE_DCHECK_NE(&from, this);
  const VerificationSample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerificationSample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.VerificationSample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.VerificationSample)
    MergeFrom(*source);
  }
}

void VerificationSample::MergeFrom(const VerificationSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VerificationSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerificationSample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.VerificationSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerificationSample::CopyFrom(const VerificationSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VerificationSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerificationSample::IsInitialized() const {
  return true;
}

void VerificationSample::InternalSwap(VerificationSample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  features_.InternalSwap(&other->features_);
  swap(probability_, other->probability_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerificationSample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Performance::InitAsDefaultInstance() {
}
class Performance::_Internal {
 public:
  using HasBits = decltype(std::declval<Performance>()._has_bits_);
};

Performance::Performance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      accuracy_(from.accuracy_),
      recall_(from.recall_),
      precision_(from.precision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Performance)
}

void Performance::SharedCtor() {
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Performance)
  SharedDtor();
}

void Performance::SharedDtor() {
}

void Performance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Performance& Performance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Performance_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accuracy_.Clear();
  recall_.Clear();
  precision_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Performance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float accuracy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_accuracy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_accuracy(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float recall = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_recall(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_recall(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_precision(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_precision(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Performance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float accuracy = 1;
  for (int i = 0, n = this->_internal_accuracy_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_accuracy(i), target);
  }

  // repeated float recall = 2;
  for (int i = 0, n = this->_internal_recall_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_recall(i), target);
  }

  // repeated float precision = 3;
  for (int i = 0, n = this->_internal_precision_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_precision(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Performance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float accuracy = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_accuracy_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_accuracy_size());
    total_size += data_size;
  }

  // repeated float recall = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_recall_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_recall_size());
    total_size += data_size;
  }

  // repeated float precision = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_precision_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_precision_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Performance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  const Performance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Performance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Performance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Performance)
    MergeFrom(*source);
  }
}

void Performance::MergeFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accuracy_.MergeFrom(from.accuracy_);
  recall_.MergeFrom(from.recall_);
  precision_.MergeFrom(from.precision_);
}

void Performance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accuracy_.InternalSwap(&other->accuracy_);
  recall_.InternalSwap(&other->recall_);
  precision_.InternalSwap(&other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetParameter::InitAsDefaultInstance() {
  ::apollo::prediction::_NetParameter_default_instance_._instance.get_mutable()->performance_ = const_cast< ::apollo::prediction::Performance*>(
      ::apollo::prediction::Performance::internal_default_instance());
}
class NetParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<NetParameter>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::Performance& performance(const NetParameter* msg);
  static void set_has_performance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_dumped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::prediction::Performance&
NetParameter::_Internal::performance(const NetParameter* msg) {
  return *msg->performance_;
}
void NetParameter::clear_layers() {
  layers_.Clear();
}
NetParameter::NetParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.NetParameter)
}
NetParameter::NetParameter(const NetParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layers_(from.layers_),
      verification_samples_(from.verification_samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_performance()) {
    performance_ = new ::apollo::prediction::Performance(*from.performance_);
  } else {
    performance_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_dumped_) -
    reinterpret_cast<char*>(&id_)) + sizeof(time_dumped_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.NetParameter)
}

void NetParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetParameter_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&performance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_dumped_) -
      reinterpret_cast<char*>(&performance_)) + sizeof(time_dumped_));
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:apollo.prediction.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete performance_;
}

void NetParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetParameter& NetParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetParameter_modules_2fprediction_2fproto_2fnetwork_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.NetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layers_.Clear();
  verification_samples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(performance_ != nullptr);
      performance_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_dumped_) -
        reinterpret_cast<char*>(&id_)) + sizeof(time_dumped_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NetParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.prediction.NetParameter.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.LayerParameter layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.prediction.VerificationSample verification_samples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_verification_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.Performance performance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_performance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time_dumped = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_time_dumped(&has_bits);
          time_dumped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.NetParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.prediction.NetParameter.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .apollo.prediction.LayerParameter layers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_layers(i), target, stream);
  }

  // repeated .apollo.prediction.VerificationSample verification_samples = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_verification_samples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_verification_samples(i), target, stream);
  }

  // optional .apollo.prediction.Performance performance = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::performance(this), target, stream);
  }

  // optional float time_dumped = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_time_dumped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.NetParameter)
  return target;
}

size_t NetParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.NetParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.prediction.LayerParameter layers = 3;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.prediction.VerificationSample verification_samples = 4;
  total_size += 1UL * this->_internal_verification_samples_size();
  for (const auto& msg : this->verification_samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.prediction.Performance performance = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *performance_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional float time_dumped = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.NetParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.NetParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layers_.MergeFrom(from.layers_);
  verification_samples_.MergeFrom(from.verification_samples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_performance()->::apollo::prediction::Performance::MergeFrom(from._internal_performance());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_dumped_ = from.time_dumped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {
  return true;
}

void NetParameter::InternalSwap(NetParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layers_.InternalSwap(&other->layers_);
  verification_samples_.InternalSwap(&other->verification_samples_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(performance_, other->performance_);
  swap(id_, other->id_);
  swap(time_dumped_, other->time_dumped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::prediction::VerificationSample* Arena::CreateMaybeMessage< ::apollo::prediction::VerificationSample >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::VerificationSample >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::Performance* Arena::CreateMaybeMessage< ::apollo::prediction::Performance >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::prediction::NetParameter* Arena::CreateMaybeMessage< ::apollo::prediction::NetParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::NetParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
