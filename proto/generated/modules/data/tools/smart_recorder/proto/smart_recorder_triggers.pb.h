// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/tools/smart_recorder/proto/smart_recorder_triggers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
namespace apollo {
namespace data {
class RecordSegmentSetting;
class RecordSegmentSettingDefaultTypeInternal;
extern RecordSegmentSettingDefaultTypeInternal _RecordSegmentSetting_default_instance_;
class SmartRecordTrigger;
class SmartRecordTriggerDefaultTypeInternal;
extern SmartRecordTriggerDefaultTypeInternal _SmartRecordTrigger_default_instance_;
class Trigger;
class TriggerDefaultTypeInternal;
extern TriggerDefaultTypeInternal _Trigger_default_instance_;
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::data::RecordSegmentSetting* Arena::CreateMaybeMessage<::apollo::data::RecordSegmentSetting>(Arena*);
template<> ::apollo::data::SmartRecordTrigger* Arena::CreateMaybeMessage<::apollo::data::SmartRecordTrigger>(Arena*);
template<> ::apollo::data::Trigger* Arena::CreateMaybeMessage<::apollo::data::Trigger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace data {

// ===================================================================

class RecordSegmentSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.RecordSegmentSetting) */ {
 public:
  RecordSegmentSetting();
  virtual ~RecordSegmentSetting();

  RecordSegmentSetting(const RecordSegmentSetting& from);
  RecordSegmentSetting(RecordSegmentSetting&& from) noexcept
    : RecordSegmentSetting() {
    *this = ::std::move(from);
  }

  inline RecordSegmentSetting& operator=(const RecordSegmentSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordSegmentSetting& operator=(RecordSegmentSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordSegmentSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordSegmentSetting* internal_default_instance() {
    return reinterpret_cast<const RecordSegmentSetting*>(
               &_RecordSegmentSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordSegmentSetting& a, RecordSegmentSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordSegmentSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordSegmentSetting* New() const final {
    return CreateMaybeMessage<RecordSegmentSetting>(nullptr);
  }

  RecordSegmentSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordSegmentSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordSegmentSetting& from);
  void MergeFrom(const RecordSegmentSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSegmentSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.RecordSegmentSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto);
    return ::descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeSegmentFieldNumber = 1,
    kTimeSegmentFieldNumber = 2,
  };
  // optional int32 size_segment = 1 [default = 500];
  bool has_size_segment() const;
  private:
  bool _internal_has_size_segment() const;
  public:
  void clear_size_segment();
  ::PROTOBUF_NAMESPACE_ID::int32 size_segment() const;
  void set_size_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size_segment() const;
  void _internal_set_size_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 time_segment = 2 [default = 180];
  bool has_time_segment() const;
  private:
  bool _internal_has_time_segment() const;
  public:
  void clear_time_segment();
  ::PROTOBUF_NAMESPACE_ID::int32 time_segment() const;
  void set_time_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_segment() const;
  void _internal_set_time_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.RecordSegmentSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_segment_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_segment_;
  friend struct ::TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
};
// -------------------------------------------------------------------

class Trigger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Trigger) */ {
 public:
  Trigger();
  virtual ~Trigger();

  Trigger(const Trigger& from);
  Trigger(Trigger&& from) noexcept
    : Trigger() {
    *this = ::std::move(from);
  }

  inline Trigger& operator=(const Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trigger& operator=(Trigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trigger* internal_default_instance() {
    return reinterpret_cast<const Trigger*>(
               &_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trigger& a, Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Trigger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trigger* New() const final {
    return CreateMaybeMessage<Trigger>(nullptr);
  }

  Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trigger& from);
  void MergeFrom(const Trigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Trigger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto);
    return ::descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerNameFieldNumber = 1,
    kBackwardTimeFieldNumber = 3,
    kForwardTimeFieldNumber = 4,
    kEnabledFieldNumber = 2,
  };
  // optional string trigger_name = 1;
  bool has_trigger_name() const;
  private:
  bool _internal_has_trigger_name() const;
  public:
  void clear_trigger_name();
  const std::string& trigger_name() const;
  void set_trigger_name(const std::string& value);
  void set_trigger_name(std::string&& value);
  void set_trigger_name(const char* value);
  void set_trigger_name(const char* value, size_t size);
  std::string* mutable_trigger_name();
  std::string* release_trigger_name();
  void set_allocated_trigger_name(std::string* trigger_name);
  private:
  const std::string& _internal_trigger_name() const;
  void _internal_set_trigger_name(const std::string& value);
  std::string* _internal_mutable_trigger_name();
  public:

  // optional double backward_time = 3;
  bool has_backward_time() const;
  private:
  bool _internal_has_backward_time() const;
  public:
  void clear_backward_time();
  double backward_time() const;
  void set_backward_time(double value);
  private:
  double _internal_backward_time() const;
  void _internal_set_backward_time(double value);
  public:

  // optional double forward_time = 4;
  bool has_forward_time() const;
  private:
  bool _internal_has_forward_time() const;
  public:
  void clear_forward_time();
  double forward_time() const;
  void set_forward_time(double value);
  private:
  double _internal_forward_time() const;
  void _internal_set_forward_time(double value);
  public:

  // optional bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Trigger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_name_;
  double backward_time_;
  double forward_time_;
  bool enabled_;
  friend struct ::TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
};
// -------------------------------------------------------------------

class SmartRecordTrigger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.SmartRecordTrigger) */ {
 public:
  SmartRecordTrigger();
  virtual ~SmartRecordTrigger();

  SmartRecordTrigger(const SmartRecordTrigger& from);
  SmartRecordTrigger(SmartRecordTrigger&& from) noexcept
    : SmartRecordTrigger() {
    *this = ::std::move(from);
  }

  inline SmartRecordTrigger& operator=(const SmartRecordTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartRecordTrigger& operator=(SmartRecordTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartRecordTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartRecordTrigger* internal_default_instance() {
    return reinterpret_cast<const SmartRecordTrigger*>(
               &_SmartRecordTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SmartRecordTrigger& a, SmartRecordTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartRecordTrigger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartRecordTrigger* New() const final {
    return CreateMaybeMessage<SmartRecordTrigger>(nullptr);
  }

  SmartRecordTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartRecordTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartRecordTrigger& from);
  void MergeFrom(const SmartRecordTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartRecordTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.SmartRecordTrigger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto);
    return ::descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggersFieldNumber = 2,
    kSegmentSettingFieldNumber = 1,
    kMaxBackwardTimeFieldNumber = 3,
    kMinRestoreChunkFieldNumber = 4,
  };
  // repeated .apollo.data.Trigger triggers = 2;
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;
  public:
  void clear_triggers();
  ::apollo::data::Trigger* mutable_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >*
      mutable_triggers();
  private:
  const ::apollo::data::Trigger& _internal_triggers(int index) const;
  ::apollo::data::Trigger* _internal_add_triggers();
  public:
  const ::apollo::data::Trigger& triggers(int index) const;
  ::apollo::data::Trigger* add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >&
      triggers() const;

  // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
  bool has_segment_setting() const;
  private:
  bool _internal_has_segment_setting() const;
  public:
  void clear_segment_setting();
  const ::apollo::data::RecordSegmentSetting& segment_setting() const;
  ::apollo::data::RecordSegmentSetting* release_segment_setting();
  ::apollo::data::RecordSegmentSetting* mutable_segment_setting();
  void set_allocated_segment_setting(::apollo::data::RecordSegmentSetting* segment_setting);
  private:
  const ::apollo::data::RecordSegmentSetting& _internal_segment_setting() const;
  ::apollo::data::RecordSegmentSetting* _internal_mutable_segment_setting();
  public:

  // optional double max_backward_time = 3 [default = 30];
  bool has_max_backward_time() const;
  private:
  bool _internal_has_max_backward_time() const;
  public:
  void clear_max_backward_time();
  double max_backward_time() const;
  void set_max_backward_time(double value);
  private:
  double _internal_max_backward_time() const;
  void _internal_set_max_backward_time(double value);
  public:

  // optional double min_restore_chunk = 4 [default = 5];
  bool has_min_restore_chunk() const;
  private:
  bool _internal_has_min_restore_chunk() const;
  public:
  void clear_min_restore_chunk();
  double min_restore_chunk() const;
  void set_min_restore_chunk(double value);
  private:
  double _internal_min_restore_chunk() const;
  void _internal_set_min_restore_chunk(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.SmartRecordTrigger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger > triggers_;
  ::apollo::data::RecordSegmentSetting* segment_setting_;
  double max_backward_time_;
  double min_restore_chunk_;
  friend struct ::TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordSegmentSetting

// optional int32 size_segment = 1 [default = 500];
inline bool RecordSegmentSetting::_internal_has_size_segment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordSegmentSetting::has_size_segment() const {
  return _internal_has_size_segment();
}
inline void RecordSegmentSetting::clear_size_segment() {
  size_segment_ = 500;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordSegmentSetting::_internal_size_segment() const {
  return size_segment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordSegmentSetting::size_segment() const {
  // @@protoc_insertion_point(field_get:apollo.data.RecordSegmentSetting.size_segment)
  return _internal_size_segment();
}
inline void RecordSegmentSetting::_internal_set_size_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_segment_ = value;
}
inline void RecordSegmentSetting::set_size_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size_segment(value);
  // @@protoc_insertion_point(field_set:apollo.data.RecordSegmentSetting.size_segment)
}

// optional int32 time_segment = 2 [default = 180];
inline bool RecordSegmentSetting::_internal_has_time_segment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordSegmentSetting::has_time_segment() const {
  return _internal_has_time_segment();
}
inline void RecordSegmentSetting::clear_time_segment() {
  time_segment_ = 180;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordSegmentSetting::_internal_time_segment() const {
  return time_segment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordSegmentSetting::time_segment() const {
  // @@protoc_insertion_point(field_get:apollo.data.RecordSegmentSetting.time_segment)
  return _internal_time_segment();
}
inline void RecordSegmentSetting::_internal_set_time_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_segment_ = value;
}
inline void RecordSegmentSetting::set_time_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_segment(value);
  // @@protoc_insertion_point(field_set:apollo.data.RecordSegmentSetting.time_segment)
}

// -------------------------------------------------------------------

// Trigger

// optional string trigger_name = 1;
inline bool Trigger::_internal_has_trigger_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Trigger::has_trigger_name() const {
  return _internal_has_trigger_name();
}
inline void Trigger::clear_trigger_name() {
  trigger_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Trigger::trigger_name() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.trigger_name)
  return _internal_trigger_name();
}
inline void Trigger::set_trigger_name(const std::string& value) {
  _internal_set_trigger_name(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.trigger_name)
}
inline std::string* Trigger::mutable_trigger_name() {
  // @@protoc_insertion_point(field_mutable:apollo.data.Trigger.trigger_name)
  return _internal_mutable_trigger_name();
}
inline const std::string& Trigger::_internal_trigger_name() const {
  return trigger_name_.GetNoArena();
}
inline void Trigger::_internal_set_trigger_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trigger_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Trigger::set_trigger_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trigger_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.Trigger.trigger_name)
}
inline void Trigger::set_trigger_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trigger_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Trigger.trigger_name)
}
inline void Trigger::set_trigger_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trigger_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Trigger.trigger_name)
}
inline std::string* Trigger::_internal_mutable_trigger_name() {
  _has_bits_[0] |= 0x00000001u;
  return trigger_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Trigger::release_trigger_name() {
  // @@protoc_insertion_point(field_release:apollo.data.Trigger.trigger_name)
  if (!_internal_has_trigger_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trigger_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Trigger::set_allocated_trigger_name(std::string* trigger_name) {
  if (trigger_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trigger_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trigger_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Trigger.trigger_name)
}

// optional bool enabled = 2;
inline bool Trigger::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Trigger::has_enabled() const {
  return _internal_has_enabled();
}
inline void Trigger::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Trigger::_internal_enabled() const {
  return enabled_;
}
inline bool Trigger::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.enabled)
  return _internal_enabled();
}
inline void Trigger::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enabled_ = value;
}
inline void Trigger::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.enabled)
}

// optional double backward_time = 3;
inline bool Trigger::_internal_has_backward_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Trigger::has_backward_time() const {
  return _internal_has_backward_time();
}
inline void Trigger::clear_backward_time() {
  backward_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Trigger::_internal_backward_time() const {
  return backward_time_;
}
inline double Trigger::backward_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.backward_time)
  return _internal_backward_time();
}
inline void Trigger::_internal_set_backward_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  backward_time_ = value;
}
inline void Trigger::set_backward_time(double value) {
  _internal_set_backward_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.backward_time)
}

// optional double forward_time = 4;
inline bool Trigger::_internal_has_forward_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Trigger::has_forward_time() const {
  return _internal_has_forward_time();
}
inline void Trigger::clear_forward_time() {
  forward_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Trigger::_internal_forward_time() const {
  return forward_time_;
}
inline double Trigger::forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.forward_time)
  return _internal_forward_time();
}
inline void Trigger::_internal_set_forward_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  forward_time_ = value;
}
inline void Trigger::set_forward_time(double value) {
  _internal_set_forward_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.forward_time)
}

// -------------------------------------------------------------------

// SmartRecordTrigger

// optional .apollo.data.RecordSegmentSetting segment_setting = 1;
inline bool SmartRecordTrigger::_internal_has_segment_setting() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || segment_setting_ != nullptr);
  return value;
}
inline bool SmartRecordTrigger::has_segment_setting() const {
  return _internal_has_segment_setting();
}
inline void SmartRecordTrigger::clear_segment_setting() {
  if (segment_setting_ != nullptr) segment_setting_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::data::RecordSegmentSetting& SmartRecordTrigger::_internal_segment_setting() const {
  const ::apollo::data::RecordSegmentSetting* p = segment_setting_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::RecordSegmentSetting*>(
      &::apollo::data::_RecordSegmentSetting_default_instance_);
}
inline const ::apollo::data::RecordSegmentSetting& SmartRecordTrigger::segment_setting() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.segment_setting)
  return _internal_segment_setting();
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::release_segment_setting() {
  // @@protoc_insertion_point(field_release:apollo.data.SmartRecordTrigger.segment_setting)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::data::RecordSegmentSetting* temp = segment_setting_;
  segment_setting_ = nullptr;
  return temp;
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::_internal_mutable_segment_setting() {
  _has_bits_[0] |= 0x00000001u;
  if (segment_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::RecordSegmentSetting>(GetArenaNoVirtual());
    segment_setting_ = p;
  }
  return segment_setting_;
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::mutable_segment_setting() {
  // @@protoc_insertion_point(field_mutable:apollo.data.SmartRecordTrigger.segment_setting)
  return _internal_mutable_segment_setting();
}
inline void SmartRecordTrigger::set_allocated_segment_setting(::apollo::data::RecordSegmentSetting* segment_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete segment_setting_;
  }
  if (segment_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      segment_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_setting, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  segment_setting_ = segment_setting;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SmartRecordTrigger.segment_setting)
}

// repeated .apollo.data.Trigger triggers = 2;
inline int SmartRecordTrigger::_internal_triggers_size() const {
  return triggers_.size();
}
inline int SmartRecordTrigger::triggers_size() const {
  return _internal_triggers_size();
}
inline void SmartRecordTrigger::clear_triggers() {
  triggers_.Clear();
}
inline ::apollo::data::Trigger* SmartRecordTrigger::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.SmartRecordTrigger.triggers)
  return triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >*
SmartRecordTrigger::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.SmartRecordTrigger.triggers)
  return &triggers_;
}
inline const ::apollo::data::Trigger& SmartRecordTrigger::_internal_triggers(int index) const {
  return triggers_.Get(index);
}
inline const ::apollo::data::Trigger& SmartRecordTrigger::triggers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.triggers)
  return _internal_triggers(index);
}
inline ::apollo::data::Trigger* SmartRecordTrigger::_internal_add_triggers() {
  return triggers_.Add();
}
inline ::apollo::data::Trigger* SmartRecordTrigger::add_triggers() {
  // @@protoc_insertion_point(field_add:apollo.data.SmartRecordTrigger.triggers)
  return _internal_add_triggers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >&
SmartRecordTrigger::triggers() const {
  // @@protoc_insertion_point(field_list:apollo.data.SmartRecordTrigger.triggers)
  return triggers_;
}

// optional double max_backward_time = 3 [default = 30];
inline bool SmartRecordTrigger::_internal_has_max_backward_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SmartRecordTrigger::has_max_backward_time() const {
  return _internal_has_max_backward_time();
}
inline void SmartRecordTrigger::clear_max_backward_time() {
  max_backward_time_ = 30;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SmartRecordTrigger::_internal_max_backward_time() const {
  return max_backward_time_;
}
inline double SmartRecordTrigger::max_backward_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.max_backward_time)
  return _internal_max_backward_time();
}
inline void SmartRecordTrigger::_internal_set_max_backward_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_backward_time_ = value;
}
inline void SmartRecordTrigger::set_max_backward_time(double value) {
  _internal_set_max_backward_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.SmartRecordTrigger.max_backward_time)
}

// optional double min_restore_chunk = 4 [default = 5];
inline bool SmartRecordTrigger::_internal_has_min_restore_chunk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SmartRecordTrigger::has_min_restore_chunk() const {
  return _internal_has_min_restore_chunk();
}
inline void SmartRecordTrigger::clear_min_restore_chunk() {
  min_restore_chunk_ = 5;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SmartRecordTrigger::_internal_min_restore_chunk() const {
  return min_restore_chunk_;
}
inline double SmartRecordTrigger::min_restore_chunk() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.min_restore_chunk)
  return _internal_min_restore_chunk();
}
inline void SmartRecordTrigger::_internal_set_min_restore_chunk(double value) {
  _has_bits_[0] |= 0x00000004u;
  min_restore_chunk_ = value;
}
inline void SmartRecordTrigger::set_min_restore_chunk(double value) {
  _internal_set_min_restore_chunk(value);
  // @@protoc_insertion_point(field_set:apollo.data.SmartRecordTrigger.min_restore_chunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto
