// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/tools/smart_recorder/proto/smart_recorder_triggers.proto

#include "modules/data/tools/smart_recorder/proto/smart_recorder_triggers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
namespace apollo {
namespace data {
class RecordSegmentSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordSegmentSetting> _instance;
} _RecordSegmentSetting_default_instance_;
class TriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trigger> _instance;
} _Trigger_default_instance_;
class SmartRecordTriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmartRecordTrigger> _instance;
} _SmartRecordTrigger_default_instance_;
}  // namespace data
}  // namespace apollo
static void InitDefaultsscc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_RecordSegmentSetting_default_instance_;
    new (ptr) ::apollo::data::RecordSegmentSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::RecordSegmentSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto}, {}};

static void InitDefaultsscc_info_SmartRecordTrigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_SmartRecordTrigger_default_instance_;
    new (ptr) ::apollo::data::SmartRecordTrigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::SmartRecordTrigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmartRecordTrigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SmartRecordTrigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto}, {
      &scc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base,
      &scc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base,}};

static void InitDefaultsscc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_Trigger_default_instance_;
    new (ptr) ::apollo::data::Trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::Trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, size_segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, time_segment_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, trigger_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, backward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, forward_time_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, segment_setting_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, triggers_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, max_backward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, min_restore_chunk_),
  0,
  ~0u,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::data::RecordSegmentSetting)},
  { 9, 18, sizeof(::apollo::data::Trigger)},
  { 22, 31, sizeof(::apollo::data::SmartRecordTrigger)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_RecordSegmentSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_Trigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_SmartRecordTrigger_default_instance_),
};

const char descriptor_table_protodef_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nEmodules/data/tools/smart_recorder/prot"
  "o/smart_recorder_triggers.proto\022\013apollo."
  "data\"L\n\024RecordSegmentSetting\022\031\n\014size_seg"
  "ment\030\001 \001(\005:\003500\022\031\n\014time_segment\030\002 \001(\005:\0031"
  "80\"]\n\007Trigger\022\024\n\014trigger_name\030\001 \001(\t\022\017\n\007e"
  "nabled\030\002 \001(\010\022\025\n\rbackward_time\030\003 \001(\001\022\024\n\014f"
  "orward_time\030\004 \001(\001\"\265\001\n\022SmartRecordTrigger"
  "\022:\n\017segment_setting\030\001 \001(\0132!.apollo.data."
  "RecordSegmentSetting\022&\n\010triggers\030\002 \003(\0132\024"
  ".apollo.data.Trigger\022\035\n\021max_backward_tim"
  "e\030\003 \001(\001:\00230\022\034\n\021min_restore_chunk\030\004 \001(\001:\001"
  "5"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_sccs[3] = {
  &scc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base,
  &scc_info_SmartRecordTrigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base,
  &scc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once;
static bool descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = {
  &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_initialized, descriptor_table_protodef_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto, "modules/data/tools/smart_recorder/proto/smart_recorder_triggers.proto", 441,
  &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once, descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_sccs, descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto::offsets,
  file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto, 3, file_level_enum_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto, file_level_service_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto), true);
namespace apollo {
namespace data {

// ===================================================================

void RecordSegmentSetting::InitAsDefaultInstance() {
}
class RecordSegmentSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordSegmentSetting>()._has_bits_);
  static void set_has_size_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RecordSegmentSetting::RecordSegmentSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.RecordSegmentSetting)
}
RecordSegmentSetting::RecordSegmentSetting(const RecordSegmentSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_segment_, &from.size_segment_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_segment_) -
    reinterpret_cast<char*>(&size_segment_)) + sizeof(time_segment_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.RecordSegmentSetting)
}

void RecordSegmentSetting::SharedCtor() {
  size_segment_ = 500;
  time_segment_ = 180;
}

RecordSegmentSetting::~RecordSegmentSetting() {
  // @@protoc_insertion_point(destructor:apollo.data.RecordSegmentSetting)
  SharedDtor();
}

void RecordSegmentSetting::SharedDtor() {
}

void RecordSegmentSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordSegmentSetting& RecordSegmentSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordSegmentSetting_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base);
  return *internal_default_instance();
}


void RecordSegmentSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.RecordSegmentSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    size_segment_ = 500;
    time_segment_ = 180;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RecordSegmentSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 size_segment = 1 [default = 500];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size_segment(&has_bits);
          size_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_segment = 2 [default = 180];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_segment(&has_bits);
          time_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordSegmentSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.RecordSegmentSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size_segment = 1 [default = 500];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size_segment(), target);
  }

  // optional int32 time_segment = 2 [default = 180];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_segment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.RecordSegmentSetting)
  return target;
}

size_t RecordSegmentSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.RecordSegmentSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 size_segment = 1 [default = 500];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size_segment());
    }

    // optional int32 time_segment = 2 [default = 180];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_segment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordSegmentSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.RecordSegmentSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordSegmentSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordSegmentSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.RecordSegmentSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.RecordSegmentSetting)
    MergeFrom(*source);
  }
}

void RecordSegmentSetting::MergeFrom(const RecordSegmentSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.RecordSegmentSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_segment_ = from.size_segment_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_segment_ = from.time_segment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordSegmentSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.RecordSegmentSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordSegmentSetting::CopyFrom(const RecordSegmentSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.RecordSegmentSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSegmentSetting::IsInitialized() const {
  return true;
}

void RecordSegmentSetting::InternalSwap(RecordSegmentSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_segment_, other->size_segment_);
  swap(time_segment_, other->time_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSegmentSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trigger::InitAsDefaultInstance() {
}
class Trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<Trigger>()._has_bits_);
  static void set_has_trigger_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_backward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Trigger::Trigger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.Trigger)
}
Trigger::Trigger(const Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trigger_name()) {
    trigger_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trigger_name_);
  }
  ::memcpy(&backward_time_, &from.backward_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&backward_time_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.Trigger)
}

void Trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base);
  trigger_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&backward_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&backward_time_)) + sizeof(enabled_));
}

Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:apollo.data.Trigger)
  SharedDtor();
}

void Trigger::SharedDtor() {
  trigger_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trigger& Trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base);
  return *internal_default_instance();
}


void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trigger_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&backward_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&backward_time_)) + sizeof(enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string trigger_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trigger_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.Trigger.trigger_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double backward_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_backward_time(&has_bits);
          backward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double forward_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_forward_time(&has_bits);
          forward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trigger_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trigger_name().data(), static_cast<int>(this->_internal_trigger_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Trigger.trigger_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trigger_name(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // optional double backward_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_backward_time(), target);
  }

  // optional double forward_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_forward_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Trigger)
  return target;
}

size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Trigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string trigger_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trigger_name());
    }

    // optional double backward_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double forward_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Trigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.Trigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.Trigger)
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trigger_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trigger_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      backward_time_ = from.backward_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      forward_time_ = from.forward_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trigger_name_.Swap(&other->trigger_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(backward_time_, other->backward_time_);
  swap(forward_time_, other->forward_time_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmartRecordTrigger::InitAsDefaultInstance() {
  ::apollo::data::_SmartRecordTrigger_default_instance_._instance.get_mutable()->segment_setting_ = const_cast< ::apollo::data::RecordSegmentSetting*>(
      ::apollo::data::RecordSegmentSetting::internal_default_instance());
}
class SmartRecordTrigger::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartRecordTrigger>()._has_bits_);
  static const ::apollo::data::RecordSegmentSetting& segment_setting(const SmartRecordTrigger* msg);
  static void set_has_segment_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_backward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_restore_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::data::RecordSegmentSetting&
SmartRecordTrigger::_Internal::segment_setting(const SmartRecordTrigger* msg) {
  return *msg->segment_setting_;
}
SmartRecordTrigger::SmartRecordTrigger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.SmartRecordTrigger)
}
SmartRecordTrigger::SmartRecordTrigger(const SmartRecordTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      triggers_(from.triggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_segment_setting()) {
    segment_setting_ = new ::apollo::data::RecordSegmentSetting(*from.segment_setting_);
  } else {
    segment_setting_ = nullptr;
  }
  ::memcpy(&max_backward_time_, &from.max_backward_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_restore_chunk_) -
    reinterpret_cast<char*>(&max_backward_time_)) + sizeof(min_restore_chunk_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.SmartRecordTrigger)
}

void SmartRecordTrigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmartRecordTrigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base);
  segment_setting_ = nullptr;
  max_backward_time_ = 30;
  min_restore_chunk_ = 5;
}

SmartRecordTrigger::~SmartRecordTrigger() {
  // @@protoc_insertion_point(destructor:apollo.data.SmartRecordTrigger)
  SharedDtor();
}

void SmartRecordTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete segment_setting_;
}

void SmartRecordTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmartRecordTrigger& SmartRecordTrigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmartRecordTrigger_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto.base);
  return *internal_default_instance();
}


void SmartRecordTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.SmartRecordTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(segment_setting_ != nullptr);
      segment_setting_->Clear();
    }
    max_backward_time_ = 30;
    min_restore_chunk_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SmartRecordTrigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.data.Trigger triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double max_backward_time = 3 [default = 30];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_backward_time(&has_bits);
          max_backward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_restore_chunk = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_restore_chunk(&has_bits);
          min_restore_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmartRecordTrigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.SmartRecordTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::segment_setting(this), target, stream);
  }

  // repeated .apollo.data.Trigger triggers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_triggers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_triggers(i), target, stream);
  }

  // optional double max_backward_time = 3 [default = 30];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_backward_time(), target);
  }

  // optional double min_restore_chunk = 4 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_restore_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.SmartRecordTrigger)
  return target;
}

size_t SmartRecordTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.SmartRecordTrigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.data.Trigger triggers = 2;
  total_size += 1UL * this->_internal_triggers_size();
  for (const auto& msg : this->triggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *segment_setting_);
    }

    // optional double max_backward_time = 3 [default = 30];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_restore_chunk = 4 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartRecordTrigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.SmartRecordTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartRecordTrigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmartRecordTrigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.SmartRecordTrigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.SmartRecordTrigger)
    MergeFrom(*source);
  }
}

void SmartRecordTrigger::MergeFrom(const SmartRecordTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.SmartRecordTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggers_.MergeFrom(from.triggers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_segment_setting()->::apollo::data::RecordSegmentSetting::MergeFrom(from._internal_segment_setting());
    }
    if (cached_has_bits & 0x00000002u) {
      max_backward_time_ = from.max_backward_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_restore_chunk_ = from.min_restore_chunk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SmartRecordTrigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.SmartRecordTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartRecordTrigger::CopyFrom(const SmartRecordTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.SmartRecordTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartRecordTrigger::IsInitialized() const {
  return true;
}

void SmartRecordTrigger::InternalSwap(SmartRecordTrigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  triggers_.InternalSwap(&other->triggers_);
  swap(segment_setting_, other->segment_setting_);
  swap(max_backward_time_, other->max_backward_time_);
  swap(min_restore_chunk_, other->min_restore_chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartRecordTrigger::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::data::RecordSegmentSetting* Arena::CreateMaybeMessage< ::apollo::data::RecordSegmentSetting >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::RecordSegmentSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Trigger* Arena::CreateMaybeMessage< ::apollo::data::Trigger >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::SmartRecordTrigger* Arena::CreateMaybeMessage< ::apollo::data::SmartRecordTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::SmartRecordTrigger >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
