// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/static_info.proto

#include "modules/data/proto/static_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CanbusConf_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VehicleConfig_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ControlConf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fstatic_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto;
namespace apollo {
namespace data {
class VehicleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleInfo> _instance;
} _VehicleInfo_default_instance_;
class EnvironmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentInfo> _instance;
} _EnvironmentInfo_default_instance_;
class HardwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardwareInfo_ConfigsEntry_DoNotUse> _instance;
} _HardwareInfo_ConfigsEntry_DoNotUse_default_instance_;
class HardwareInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardwareInfo> _instance;
} _HardwareInfo_default_instance_;
class SoftwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareInfo_ConfigsEntry_DoNotUse> _instance;
} _SoftwareInfo_ConfigsEntry_DoNotUse_default_instance_;
class SoftwareInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareInfo> _instance;
} _SoftwareInfo_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class StaticInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticInfo> _instance;
} _StaticInfo_default_instance_;
class StaticInfoConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticInfoConf> _instance;
} _StaticInfoConf_default_instance_;
}  // namespace data
}  // namespace apollo
static void InitDefaultsscc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_EnvironmentInfo_default_instance_;
    new (ptr) ::apollo::data::EnvironmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::EnvironmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_HardwareInfo_default_instance_;
    new (ptr) ::apollo::data::HardwareInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::HardwareInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {
      &scc_info_HardwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_HardwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_HardwareInfo_ConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse();
  }
  ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HardwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_SoftwareInfo_default_instance_;
    new (ptr) ::apollo::data::SoftwareInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::SoftwareInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {
      &scc_info_SoftwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
      &scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_SoftwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_SoftwareInfo_ConfigsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse();
  }
  ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_StaticInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_StaticInfo_default_instance_;
    new (ptr) ::apollo::data::StaticInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::StaticInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StaticInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_StaticInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {
      &scc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
      &scc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
      &scc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
      &scc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
      &scc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_StaticInfoConf_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_StaticInfoConf_default_instance_;
    new (ptr) ::apollo::data::StaticInfoConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::StaticInfoConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaticInfoConf_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StaticInfoConf_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_UserInfo_default_instance_;
    new (ptr) ::apollo::data::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::data::_VehicleInfo_default_instance_;
    new (ptr) ::apollo::data::VehicleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::data::VehicleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto}, {
      &scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
      &scc_info_CanbusConf_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto.base,
      &scc_info_VehicleConfig_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.base,
      &scc_info_ControlConf_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdata_2fproto_2fstatic_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, brand_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, model_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, license_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, canbus_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, vehicle_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, control_config_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, map_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, temperature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo, configs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, docker_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, commit_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, configs_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, latest_routing_request_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, entity_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, driver_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, co_driver_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, environment_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, hardware_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, software_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, user_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, hardware_configs_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, software_configs_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::data::VehicleInfo)},
  { 19, 26, sizeof(::apollo::data::EnvironmentInfo)},
  { 28, 35, sizeof(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse)},
  { 37, 43, sizeof(::apollo::data::HardwareInfo)},
  { 44, 51, sizeof(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse)},
  { 53, 63, sizeof(::apollo::data::SoftwareInfo)},
  { 68, 76, sizeof(::apollo::data::UserInfo)},
  { 79, 89, sizeof(::apollo::data::StaticInfo)},
  { 94, 101, sizeof(::apollo::data::StaticInfoConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_VehicleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_EnvironmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_HardwareInfo_ConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_HardwareInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_SoftwareInfo_ConfigsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_SoftwareInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_StaticInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::data::_StaticInfoConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/data/proto/static_info.proto\022\013"
  "apollo.data\032&modules/canbus/proto/canbus"
  "_conf.proto\032\"modules/canbus/proto/chassi"
  "s.proto\0321modules/common/configs/proto/ve"
  "hicle_config.proto\032(modules/control/prot"
  "o/control_conf.proto\032#modules/routing/pr"
  "oto/routing.proto\"\200\003\n\013VehicleInfo\022\014\n\004nam"
  "e\030\001 \001(\t\022-\n\005brand\030\002 \001(\0162\036.apollo.data.Veh"
  "icleInfo.Brand\022-\n\005model\030\003 \001(\0162\036.apollo.d"
  "ata.VehicleInfo.Model\022+\n\007license\030\004 \001(\0132\026"
  ".apollo.canbus.LicenseB\002\030\001\022.\n\013canbus_con"
  "f\030\005 \001(\0132\031.apollo.canbus.CanbusConf\0224\n\016ve"
  "hicle_config\030\006 \001(\0132\034.apollo.common.Vehic"
  "leConfig\0223\n\016control_config\030\007 \001(\0132\033.apoll"
  "o.control.ControlConf\"\036\n\005Brand\022\013\n\007LINCOL"
  "N\020\001\022\010\n\004FORD\020\002\"\035\n\005Model\022\007\n\003MKZ\020\001\022\013\n\007TRANS"
  "IT\020\002\"<\n\017EnvironmentInfo\022\024\n\010map_name\030\001 \001("
  "\tB\002\030\001\022\023\n\013temperature\030\002 \001(\002\"w\n\014HardwareIn"
  "fo\0227\n\007configs\030\001 \003(\0132&.apollo.data.Hardwa"
  "reInfo.ConfigsEntry\032.\n\014ConfigsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\366\001\n\014Software"
  "Info\022\030\n\014docker_image\030\001 \001(\tB\002\030\001\022\021\n\tcommit"
  "_id\030\002 \001(\t\022\020\n\004mode\030\003 \001(\tB\002\030\001\0227\n\007configs\030\004"
  " \003(\0132&.apollo.data.SoftwareInfo.ConfigsE"
  "ntry\022>\n\026latest_routing_request\030\005 \001(\0132\036.a"
  "pollo.routing.RoutingRequest\032.\n\014ConfigsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"=\n\010"
  "UserInfo\022\016\n\006entity\030\001 \001(\t\022\016\n\006driver\030\002 \001(\t"
  "\022\021\n\tco_driver\030\003 \001(\t\"\351\001\n\nStaticInfo\022)\n\007ve"
  "hicle\030\001 \001(\0132\030.apollo.data.VehicleInfo\0221\n"
  "\013environment\030\002 \001(\0132\034.apollo.data.Environ"
  "mentInfo\022+\n\010hardware\030\003 \001(\0132\031.apollo.data"
  ".HardwareInfo\022+\n\010software\030\004 \001(\0132\031.apollo"
  ".data.SoftwareInfo\022#\n\004user\030\005 \001(\0132\025.apoll"
  "o.data.UserInfo\"D\n\016StaticInfoConf\022\030\n\020har"
  "dware_configs\030\001 \003(\t\022\030\n\020software_configs\030"
  "\002 \003(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_sccs[9] = {
  &scc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_HardwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_SoftwareInfo_ConfigsEntry_DoNotUse_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_StaticInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_StaticInfoConf_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
  &scc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once;
static bool descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto = {
  &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_initialized, descriptor_table_protodef_modules_2fdata_2fproto_2fstatic_5finfo_2eproto, "modules/data/proto/static_info.proto", 1445,
  &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once, descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_sccs, descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_deps, 9, 5,
  schemas, file_default_instances, TableStruct_modules_2fdata_2fproto_2fstatic_5finfo_2eproto::offsets,
  file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto, 9, file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto, file_level_service_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdata_2fproto_2fstatic_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto), true);
namespace apollo {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleInfo_Brand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto);
  return file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[0];
}
bool VehicleInfo_Brand_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VehicleInfo_Brand VehicleInfo::LINCOLN;
constexpr VehicleInfo_Brand VehicleInfo::FORD;
constexpr VehicleInfo_Brand VehicleInfo::Brand_MIN;
constexpr VehicleInfo_Brand VehicleInfo::Brand_MAX;
constexpr int VehicleInfo::Brand_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleInfo_Model_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto);
  return file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[1];
}
bool VehicleInfo_Model_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VehicleInfo_Model VehicleInfo::MKZ;
constexpr VehicleInfo_Model VehicleInfo::TRANSIT;
constexpr VehicleInfo_Model VehicleInfo::Model_MIN;
constexpr VehicleInfo_Model VehicleInfo::Model_MAX;
constexpr int VehicleInfo::Model_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
  ::apollo::data::_VehicleInfo_default_instance_._instance.get_mutable()->license_ = const_cast< ::apollo::canbus::License*>(
      ::apollo::canbus::License::internal_default_instance());
  ::apollo::data::_VehicleInfo_default_instance_._instance.get_mutable()->canbus_conf_ = const_cast< ::apollo::canbus::CanbusConf*>(
      ::apollo::canbus::CanbusConf::internal_default_instance());
  ::apollo::data::_VehicleInfo_default_instance_._instance.get_mutable()->vehicle_config_ = const_cast< ::apollo::common::VehicleConfig*>(
      ::apollo::common::VehicleConfig::internal_default_instance());
  ::apollo::data::_VehicleInfo_default_instance_._instance.get_mutable()->control_config_ = const_cast< ::apollo::control::ControlConf*>(
      ::apollo::control::ControlConf::internal_default_instance());
}
class VehicleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::License& license(const VehicleInfo* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::CanbusConf& canbus_conf(const VehicleInfo* msg);
  static void set_has_canbus_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::VehicleConfig& vehicle_config(const VehicleInfo* msg);
  static void set_has_vehicle_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::control::ControlConf& control_config(const VehicleInfo* msg);
  static void set_has_control_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::canbus::License&
VehicleInfo::_Internal::license(const VehicleInfo* msg) {
  return *msg->license_;
}
const ::apollo::canbus::CanbusConf&
VehicleInfo::_Internal::canbus_conf(const VehicleInfo* msg) {
  return *msg->canbus_conf_;
}
const ::apollo::common::VehicleConfig&
VehicleInfo::_Internal::vehicle_config(const VehicleInfo* msg) {
  return *msg->vehicle_config_;
}
const ::apollo::control::ControlConf&
VehicleInfo::_Internal::control_config(const VehicleInfo* msg) {
  return *msg->control_config_;
}
void VehicleInfo::clear_license() {
  if (license_ != nullptr) license_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleInfo::clear_canbus_conf() {
  if (canbus_conf_ != nullptr) canbus_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleInfo::clear_vehicle_config() {
  if (vehicle_config_ != nullptr) vehicle_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleInfo::clear_control_config() {
  if (control_config_ != nullptr) control_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
VehicleInfo::VehicleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_license()) {
    license_ = new ::apollo::canbus::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  if (from._internal_has_canbus_conf()) {
    canbus_conf_ = new ::apollo::canbus::CanbusConf(*from.canbus_conf_);
  } else {
    canbus_conf_ = nullptr;
  }
  if (from._internal_has_vehicle_config()) {
    vehicle_config_ = new ::apollo::common::VehicleConfig(*from.vehicle_config_);
  } else {
    vehicle_config_ = nullptr;
  }
  if (from._internal_has_control_config()) {
    control_config_ = new ::apollo::control::ControlConf(*from.control_config_);
  } else {
    control_config_ = nullptr;
  }
  ::memcpy(&brand_, &from.brand_,
    static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&brand_)) + sizeof(model_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&license_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_config_) -
      reinterpret_cast<char*>(&license_)) + sizeof(control_config_));
  brand_ = 1;
  model_ = 1;
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete license_;
  if (this != internal_default_instance()) delete canbus_conf_;
  if (this != internal_default_instance()) delete vehicle_config_;
  if (this != internal_default_instance()) delete control_config_;
}

void VehicleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleInfo& VehicleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(license_ != nullptr);
      license_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(canbus_conf_ != nullptr);
      canbus_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vehicle_config_ != nullptr);
      vehicle_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(control_config_ != nullptr);
      control_config_->Clear();
    }
    brand_ = 1;
    model_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.VehicleInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.data.VehicleInfo.Brand brand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::data::VehicleInfo_Brand_IsValid(val))) {
            _internal_set_brand(static_cast<::apollo::data::VehicleInfo_Brand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.data.VehicleInfo.Model model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::data::VehicleInfo_Model_IsValid(val))) {
            _internal_set_model(static_cast<::apollo::data::VehicleInfo_Model>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.License license = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.CanbusConf canbus_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_canbus_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleConfig vehicle_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.ControlConf control_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.VehicleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.VehicleInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.data.VehicleInfo.Brand brand = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_brand(), target);
  }

  // optional .apollo.data.VehicleInfo.Model model = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_model(), target);
  }

  // optional .apollo.canbus.License license = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::license(this), target, stream);
  }

  // optional .apollo.canbus.CanbusConf canbus_conf = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::canbus_conf(this), target, stream);
  }

  // optional .apollo.common.VehicleConfig vehicle_config = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vehicle_config(this), target, stream);
  }

  // optional .apollo.control.ControlConf control_config = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::control_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.VehicleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.canbus.License license = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *license_);
    }

    // optional .apollo.canbus.CanbusConf canbus_conf = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canbus_conf_);
    }

    // optional .apollo.common.VehicleConfig vehicle_config = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_config_);
    }

    // optional .apollo.control.ControlConf control_config = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_config_);
    }

    // optional .apollo.data.VehicleInfo.Brand brand = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
    }

    // optional .apollo.data.VehicleInfo.Model model = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.VehicleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_license()->::apollo::canbus::License::MergeFrom(from._internal_license());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_canbus_conf()->::apollo::canbus::CanbusConf::MergeFrom(from._internal_canbus_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vehicle_config()->::apollo::common::VehicleConfig::MergeFrom(from._internal_vehicle_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_control_config()->::apollo::control::ControlConf::MergeFrom(from._internal_control_config());
    }
    if (cached_has_bits & 0x00000020u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000040u) {
      model_ = from.model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(license_, other->license_);
  swap(canbus_conf_, other->canbus_conf_);
  swap(vehicle_config_, other->vehicle_config_);
  swap(control_config_, other->control_config_);
  swap(brand_, other->brand_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentInfo::InitAsDefaultInstance() {
}
class EnvironmentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentInfo>()._has_bits_);
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnvironmentInfo::EnvironmentInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.EnvironmentInfo)
}
EnvironmentInfo::EnvironmentInfo(const EnvironmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:apollo.data.EnvironmentInfo)
}

void EnvironmentInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  temperature_ = 0;
}

EnvironmentInfo::~EnvironmentInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.EnvironmentInfo)
  SharedDtor();
}

void EnvironmentInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnvironmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentInfo& EnvironmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.EnvironmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_name_.ClearNonDefaultToEmptyNoArena();
  }
  temperature_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EnvironmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string map_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.EnvironmentInfo.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.EnvironmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.EnvironmentInfo.map_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_name(), target);
  }

  // optional float temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.EnvironmentInfo)
  return target;
}

size_t EnvironmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.EnvironmentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional float temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.EnvironmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.EnvironmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.EnvironmentInfo)
    MergeFrom(*source);
  }
}

void EnvironmentInfo::MergeFrom(const EnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.EnvironmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      map_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnvironmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.EnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentInfo::CopyFrom(const EnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.EnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentInfo::IsInitialized() const {
  return true;
}

void EnvironmentInfo::InternalSwap(EnvironmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HardwareInfo_ConfigsEntry_DoNotUse::HardwareInfo_ConfigsEntry_DoNotUse() {}
HardwareInfo_ConfigsEntry_DoNotUse::HardwareInfo_ConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HardwareInfo_ConfigsEntry_DoNotUse::MergeFrom(const HardwareInfo_ConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HardwareInfo_ConfigsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HardwareInfo_ConfigsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HardwareInfo::InitAsDefaultInstance() {
}
class HardwareInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<HardwareInfo>()._has_bits_);
};

HardwareInfo::HardwareInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.HardwareInfo)
}
HardwareInfo::HardwareInfo(const HardwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configs_.MergeFrom(from.configs_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.HardwareInfo)
}

void HardwareInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
}

HardwareInfo::~HardwareInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.HardwareInfo)
  SharedDtor();
}

void HardwareInfo::SharedDtor() {
}

void HardwareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HardwareInfo& HardwareInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HardwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.HardwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HardwareInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HardwareInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.HardwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configs = 1;
  if (!this->_internal_configs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.data.HardwareInfo.ConfigsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.data.HardwareInfo.ConfigsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_configs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configs().begin();
          it != this->_internal_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HardwareInfo_ConfigsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configs().begin();
          it != this->_internal_configs().end(); ++it) {
        target = HardwareInfo_ConfigsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.HardwareInfo)
  return target;
}

size_t HardwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.HardwareInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configs().begin();
      it != this->_internal_configs().end(); ++it) {
    total_size += HardwareInfo_ConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HardwareInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HardwareInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HardwareInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.HardwareInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.HardwareInfo)
    MergeFrom(*source);
  }
}

void HardwareInfo::MergeFrom(const HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
}

void HardwareInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareInfo::CopyFrom(const HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareInfo::IsInitialized() const {
  return true;
}

void HardwareInfo::InternalSwap(HardwareInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configs_.Swap(&other->configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardwareInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SoftwareInfo_ConfigsEntry_DoNotUse::SoftwareInfo_ConfigsEntry_DoNotUse() {}
SoftwareInfo_ConfigsEntry_DoNotUse::SoftwareInfo_ConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SoftwareInfo_ConfigsEntry_DoNotUse::MergeFrom(const SoftwareInfo_ConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo_ConfigsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SoftwareInfo_ConfigsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SoftwareInfo::InitAsDefaultInstance() {
  ::apollo::data::_SoftwareInfo_default_instance_._instance.get_mutable()->latest_routing_request_ = const_cast< ::apollo::routing::RoutingRequest*>(
      ::apollo::routing::RoutingRequest::internal_default_instance());
}
class SoftwareInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareInfo>()._has_bits_);
  static void set_has_docker_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::routing::RoutingRequest& latest_routing_request(const SoftwareInfo* msg);
  static void set_has_latest_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::routing::RoutingRequest&
SoftwareInfo::_Internal::latest_routing_request(const SoftwareInfo* msg) {
  return *msg->latest_routing_request_;
}
void SoftwareInfo::clear_latest_routing_request() {
  if (latest_routing_request_ != nullptr) latest_routing_request_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SoftwareInfo::SoftwareInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.SoftwareInfo)
}
SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configs_.MergeFrom(from.configs_);
  docker_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_docker_image()) {
    docker_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.docker_image_);
  }
  commit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commit_id()) {
    commit_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commit_id_);
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mode()) {
    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from._internal_has_latest_routing_request()) {
    latest_routing_request_ = new ::apollo::routing::RoutingRequest(*from.latest_routing_request_);
  } else {
    latest_routing_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.SoftwareInfo)
}

void SoftwareInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  docker_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_routing_request_ = nullptr;
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.SoftwareInfo)
  SharedDtor();
}

void SoftwareInfo::SharedDtor() {
  docker_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commit_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete latest_routing_request_;
}

void SoftwareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareInfo& SoftwareInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.SoftwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      docker_image_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      commit_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      mode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latest_routing_request_ != nullptr);
      latest_routing_request_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SoftwareInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string docker_image = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_docker_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.SoftwareInfo.docker_image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string commit_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commit_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.SoftwareInfo.commit_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mode = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.SoftwareInfo.mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> configs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_routing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.SoftwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string docker_image = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docker_image().data(), static_cast<int>(this->_internal_docker_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.docker_image");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docker_image(), target);
  }

  // optional string commit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commit_id().data(), static_cast<int>(this->_internal_commit_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.commit_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commit_id(), target);
  }

  // optional string mode = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mode(), target);
  }

  // map<string, string> configs = 4;
  if (!this->_internal_configs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.data.SoftwareInfo.ConfigsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.data.SoftwareInfo.ConfigsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_configs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_configs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configs().begin();
          it != this->_internal_configs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SoftwareInfo_ConfigsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configs().begin();
          it != this->_internal_configs().end(); ++it) {
        target = SoftwareInfo_ConfigsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::latest_routing_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.SoftwareInfo)
  return target;
}

size_t SoftwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.SoftwareInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configs().begin();
      it != this->_internal_configs().end(); ++it) {
    total_size += SoftwareInfo_ConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string docker_image = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docker_image());
    }

    // optional string commit_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_commit_id());
    }

    // optional string mode = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mode());
    }

    // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latest_routing_request_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.SoftwareInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.SoftwareInfo)
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configs_.MergeFrom(from.configs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      docker_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.docker_image_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      commit_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commit_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latest_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_latest_routing_request());
    }
  }
}

void SoftwareInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {
  return true;
}

void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  configs_.Swap(&other->configs_);
  docker_image_.Swap(&other->docker_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commit_id_.Swap(&other->commit_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(latest_routing_request_, other->latest_routing_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo>()._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_co_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserInfo::UserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity()) {
    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_driver()) {
    driver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_);
  }
  co_driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_co_driver()) {
    co_driver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.co_driver_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  co_driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  co_driver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      entity_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      driver_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      co_driver_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.UserInfo.entity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_driver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.UserInfo.driver");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string co_driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_co_driver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.UserInfo.co_driver");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string entity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // optional string driver = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_driver().data(), static_cast<int>(this->_internal_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.driver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_driver(), target);
  }

  // optional string co_driver = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_co_driver().data(), static_cast<int>(this->_internal_co_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.co_driver");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_co_driver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string entity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entity());
    }

    // optional string driver = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver());
    }

    // optional string co_driver = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_co_driver());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      driver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.driver_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      co_driver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.co_driver_);
    }
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_.Swap(&other->entity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  driver_.Swap(&other->driver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  co_driver_.Swap(&other->co_driver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticInfo::InitAsDefaultInstance() {
  ::apollo::data::_StaticInfo_default_instance_._instance.get_mutable()->vehicle_ = const_cast< ::apollo::data::VehicleInfo*>(
      ::apollo::data::VehicleInfo::internal_default_instance());
  ::apollo::data::_StaticInfo_default_instance_._instance.get_mutable()->environment_ = const_cast< ::apollo::data::EnvironmentInfo*>(
      ::apollo::data::EnvironmentInfo::internal_default_instance());
  ::apollo::data::_StaticInfo_default_instance_._instance.get_mutable()->hardware_ = const_cast< ::apollo::data::HardwareInfo*>(
      ::apollo::data::HardwareInfo::internal_default_instance());
  ::apollo::data::_StaticInfo_default_instance_._instance.get_mutable()->software_ = const_cast< ::apollo::data::SoftwareInfo*>(
      ::apollo::data::SoftwareInfo::internal_default_instance());
  ::apollo::data::_StaticInfo_default_instance_._instance.get_mutable()->user_ = const_cast< ::apollo::data::UserInfo*>(
      ::apollo::data::UserInfo::internal_default_instance());
}
class StaticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticInfo>()._has_bits_);
  static const ::apollo::data::VehicleInfo& vehicle(const StaticInfo* msg);
  static void set_has_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::data::EnvironmentInfo& environment(const StaticInfo* msg);
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::data::HardwareInfo& hardware(const StaticInfo* msg);
  static void set_has_hardware(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::data::SoftwareInfo& software(const StaticInfo* msg);
  static void set_has_software(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::data::UserInfo& user(const StaticInfo* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::data::VehicleInfo&
StaticInfo::_Internal::vehicle(const StaticInfo* msg) {
  return *msg->vehicle_;
}
const ::apollo::data::EnvironmentInfo&
StaticInfo::_Internal::environment(const StaticInfo* msg) {
  return *msg->environment_;
}
const ::apollo::data::HardwareInfo&
StaticInfo::_Internal::hardware(const StaticInfo* msg) {
  return *msg->hardware_;
}
const ::apollo::data::SoftwareInfo&
StaticInfo::_Internal::software(const StaticInfo* msg) {
  return *msg->software_;
}
const ::apollo::data::UserInfo&
StaticInfo::_Internal::user(const StaticInfo* msg) {
  return *msg->user_;
}
StaticInfo::StaticInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.StaticInfo)
}
StaticInfo::StaticInfo(const StaticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vehicle()) {
    vehicle_ = new ::apollo::data::VehicleInfo(*from.vehicle_);
  } else {
    vehicle_ = nullptr;
  }
  if (from._internal_has_environment()) {
    environment_ = new ::apollo::data::EnvironmentInfo(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  if (from._internal_has_hardware()) {
    hardware_ = new ::apollo::data::HardwareInfo(*from.hardware_);
  } else {
    hardware_ = nullptr;
  }
  if (from._internal_has_software()) {
    software_ = new ::apollo::data::SoftwareInfo(*from.software_);
  } else {
    software_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::apollo::data::UserInfo(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.StaticInfo)
}

void StaticInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  ::memset(&vehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_) -
      reinterpret_cast<char*>(&vehicle_)) + sizeof(user_));
}

StaticInfo::~StaticInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.StaticInfo)
  SharedDtor();
}

void StaticInfo::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_;
  if (this != internal_default_instance()) delete environment_;
  if (this != internal_default_instance()) delete hardware_;
  if (this != internal_default_instance()) delete software_;
  if (this != internal_default_instance()) delete user_;
}

void StaticInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticInfo& StaticInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticInfo_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void StaticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.StaticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_ != nullptr);
      vehicle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(environment_ != nullptr);
      environment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hardware_ != nullptr);
      hardware_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(software_ != nullptr);
      software_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_ != nullptr);
      user_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StaticInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.data.VehicleInfo vehicle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.data.EnvironmentInfo environment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.data.HardwareInfo hardware = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.data.SoftwareInfo software = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_software(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.data.UserInfo user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.StaticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.data.VehicleInfo vehicle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vehicle(this), target, stream);
  }

  // optional .apollo.data.EnvironmentInfo environment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::environment(this), target, stream);
  }

  // optional .apollo.data.HardwareInfo hardware = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hardware(this), target, stream);
  }

  // optional .apollo.data.SoftwareInfo software = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::software(this), target, stream);
  }

  // optional .apollo.data.UserInfo user = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.StaticInfo)
  return target;
}

size_t StaticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.StaticInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.data.VehicleInfo vehicle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_);
    }

    // optional .apollo.data.EnvironmentInfo environment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *environment_);
    }

    // optional .apollo.data.HardwareInfo hardware = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hardware_);
    }

    // optional .apollo.data.SoftwareInfo software = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *software_);
    }

    // optional .apollo.data.UserInfo user = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.StaticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.StaticInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.StaticInfo)
    MergeFrom(*source);
  }
}

void StaticInfo::MergeFrom(const StaticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.StaticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle()->::apollo::data::VehicleInfo::MergeFrom(from._internal_vehicle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_environment()->::apollo::data::EnvironmentInfo::MergeFrom(from._internal_environment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_hardware()->::apollo::data::HardwareInfo::MergeFrom(from._internal_hardware());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_software()->::apollo::data::SoftwareInfo::MergeFrom(from._internal_software());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_user()->::apollo::data::UserInfo::MergeFrom(from._internal_user());
    }
  }
}

void StaticInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.StaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticInfo::CopyFrom(const StaticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.StaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfo::IsInitialized() const {
  return true;
}

void StaticInfo::InternalSwap(StaticInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_, other->vehicle_);
  swap(environment_, other->environment_);
  swap(hardware_, other->hardware_);
  swap(software_, other->software_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticInfoConf::InitAsDefaultInstance() {
}
class StaticInfoConf::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticInfoConf>()._has_bits_);
};

StaticInfoConf::StaticInfoConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.data.StaticInfoConf)
}
StaticInfoConf::StaticInfoConf(const StaticInfoConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hardware_configs_(from.hardware_configs_),
      software_configs_(from.software_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.StaticInfoConf)
}

void StaticInfoConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticInfoConf_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
}

StaticInfoConf::~StaticInfoConf() {
  // @@protoc_insertion_point(destructor:apollo.data.StaticInfoConf)
  SharedDtor();
}

void StaticInfoConf::SharedDtor() {
}

void StaticInfoConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticInfoConf& StaticInfoConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticInfoConf_modules_2fdata_2fproto_2fstatic_5finfo_2eproto.base);
  return *internal_default_instance();
}


void StaticInfoConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.StaticInfoConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hardware_configs_.Clear();
  software_configs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StaticInfoConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string hardware_configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hardware_configs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.StaticInfoConf.hardware_configs");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string software_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_software_configs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.data.StaticInfoConf.software_configs");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticInfoConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.StaticInfoConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hardware_configs = 1;
  for (int i = 0, n = this->_internal_hardware_configs_size(); i < n; i++) {
    const auto& s = this->_internal_hardware_configs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.hardware_configs");
    target = stream->WriteString(1, s, target);
  }

  // repeated string software_configs = 2;
  for (int i = 0, n = this->_internal_software_configs_size(); i < n; i++) {
    const auto& s = this->_internal_software_configs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.software_configs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.StaticInfoConf)
  return target;
}

size_t StaticInfoConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.StaticInfoConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hardware_configs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hardware_configs_.size());
  for (int i = 0, n = hardware_configs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hardware_configs_.Get(i));
  }

  // repeated string software_configs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(software_configs_.size());
  for (int i = 0, n = software_configs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      software_configs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticInfoConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.data.StaticInfoConf)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticInfoConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticInfoConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.data.StaticInfoConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.data.StaticInfoConf)
    MergeFrom(*source);
  }
}

void StaticInfoConf::MergeFrom(const StaticInfoConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.StaticInfoConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hardware_configs_.MergeFrom(from.hardware_configs_);
  software_configs_.MergeFrom(from.software_configs_);
}

void StaticInfoConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.data.StaticInfoConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticInfoConf::CopyFrom(const StaticInfoConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.StaticInfoConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfoConf::IsInitialized() const {
  return true;
}

void StaticInfoConf::InternalSwap(StaticInfoConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hardware_configs_.InternalSwap(&other->hardware_configs_);
  software_configs_.InternalSwap(&other->software_configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticInfoConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::data::VehicleInfo* Arena::CreateMaybeMessage< ::apollo::data::VehicleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::VehicleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::EnvironmentInfo* Arena::CreateMaybeMessage< ::apollo::data::EnvironmentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::EnvironmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::HardwareInfo* Arena::CreateMaybeMessage< ::apollo::data::HardwareInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::HardwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::SoftwareInfo* Arena::CreateMaybeMessage< ::apollo::data::SoftwareInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::SoftwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::UserInfo* Arena::CreateMaybeMessage< ::apollo::data::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::StaticInfo* Arena::CreateMaybeMessage< ::apollo::data::StaticInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::StaticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::StaticInfoConf* Arena::CreateMaybeMessage< ::apollo::data::StaticInfoConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::data::StaticInfoConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
