// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2fframe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2fframe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fframe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdata_2fproto_2fframe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2fproto_2fframe_2eproto;
namespace apollo {
namespace data {
class CameraImage;
class CameraImageDefaultTypeInternal;
extern CameraImageDefaultTypeInternal _CameraImage_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class GPSPose;
class GPSPoseDefaultTypeInternal;
extern GPSPoseDefaultTypeInternal _GPSPose_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RadarPoint;
class RadarPointDefaultTypeInternal;
extern RadarPointDefaultTypeInternal _RadarPoint_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector4;
class Vector4DefaultTypeInternal;
extern Vector4DefaultTypeInternal _Vector4_default_instance_;
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::data::CameraImage* Arena::CreateMaybeMessage<::apollo::data::CameraImage>(Arena*);
template<> ::apollo::data::Frame* Arena::CreateMaybeMessage<::apollo::data::Frame>(Arena*);
template<> ::apollo::data::GPSPose* Arena::CreateMaybeMessage<::apollo::data::GPSPose>(Arena*);
template<> ::apollo::data::Quaternion* Arena::CreateMaybeMessage<::apollo::data::Quaternion>(Arena*);
template<> ::apollo::data::RadarPoint* Arena::CreateMaybeMessage<::apollo::data::RadarPoint>(Arena*);
template<> ::apollo::data::Vector3* Arena::CreateMaybeMessage<::apollo::data::Vector3>(Arena*);
template<> ::apollo::data::Vector4* Arena::CreateMaybeMessage<::apollo::data::Vector4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace data {

enum RadarPoint_RadarType : int {
  RadarPoint_RadarType_FRONT = 1,
  RadarPoint_RadarType_REAR = 2
};
bool RadarPoint_RadarType_IsValid(int value);
constexpr RadarPoint_RadarType RadarPoint_RadarType_RadarType_MIN = RadarPoint_RadarType_FRONT;
constexpr RadarPoint_RadarType RadarPoint_RadarType_RadarType_MAX = RadarPoint_RadarType_REAR;
constexpr int RadarPoint_RadarType_RadarType_ARRAYSIZE = RadarPoint_RadarType_RadarType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarPoint_RadarType_descriptor();
template<typename T>
inline const std::string& RadarPoint_RadarType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RadarPoint_RadarType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RadarPoint_RadarType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RadarPoint_RadarType_descriptor(), enum_t_value);
}
inline bool RadarPoint_RadarType_Parse(
    const std::string& name, RadarPoint_RadarType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RadarPoint_RadarType>(
    RadarPoint_RadarType_descriptor(), name, value);
}
// ===================================================================

class Vector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Vector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Vector3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class Vector4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Vector4) */ {
 public:
  Vector4();
  virtual ~Vector4();

  Vector4(const Vector4& from);
  Vector4(Vector4&& from) noexcept
    : Vector4() {
    *this = ::std::move(from);
  }

  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4& operator=(Vector4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector4* internal_default_instance() {
    return reinterpret_cast<const Vector4*>(
               &_Vector4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector4& a, Vector4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector4* New() const final {
    return CreateMaybeMessage<Vector4>(nullptr);
  }

  Vector4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector4& from);
  void MergeFrom(const Vector4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Vector4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIFieldNumber = 4,
    kIsGroundFieldNumber = 5,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double i = 4;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  double i() const;
  void set_i(double value);
  private:
  double _internal_i() const;
  void _internal_set_i(double value);
  public:

  // optional bool is_ground = 5 [default = false];
  bool has_is_ground() const;
  private:
  bool _internal_has_is_ground() const;
  public:
  void clear_is_ground();
  bool is_ground() const;
  void set_is_ground(bool value);
  private:
  bool _internal_is_ground() const;
  void _internal_set_is_ground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Vector4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double i_;
  bool is_ground_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double w_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class GPSPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.GPSPose) */ {
 public:
  GPSPose();
  virtual ~GPSPose();

  GPSPose(const GPSPose& from);
  GPSPose(GPSPose&& from) noexcept
    : GPSPose() {
    *this = ::std::move(from);
  }

  inline GPSPose& operator=(const GPSPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSPose& operator=(GPSPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSPose* internal_default_instance() {
    return reinterpret_cast<const GPSPose*>(
               &_GPSPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GPSPose& a, GPSPose& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSPose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSPose* New() const final {
    return CreateMaybeMessage<GPSPose>(nullptr);
  }

  GPSPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSPose& from);
  void MergeFrom(const GPSPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.GPSPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kBearingFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
    kQwFieldNumber = 7,
    kQxFieldNumber = 8,
    kQyFieldNumber = 9,
    kQzFieldNumber = 10,
  };
  // optional double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // optional double lon = 2;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // optional double bearing = 3;
  bool has_bearing() const;
  private:
  bool _internal_has_bearing() const;
  public:
  void clear_bearing();
  double bearing() const;
  void set_bearing(double value);
  private:
  double _internal_bearing() const;
  void _internal_set_bearing(double value);
  public:

  // optional double x = 4;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 5;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 6;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double qw = 7;
  bool has_qw() const;
  private:
  bool _internal_has_qw() const;
  public:
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // optional double qx = 8;
  bool has_qx() const;
  private:
  bool _internal_has_qx() const;
  public:
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // optional double qy = 9;
  bool has_qy() const;
  private:
  bool _internal_has_qy() const;
  public:
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // optional double qz = 10;
  bool has_qz() const;
  private:
  bool _internal_has_qz() const;
  public:
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.GPSPose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lat_;
  double lon_;
  double bearing_;
  double x_;
  double y_;
  double z_;
  double qw_;
  double qx_;
  double qy_;
  double qz_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class CameraImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.CameraImage) */ {
 public:
  CameraImage();
  virtual ~CameraImage();

  CameraImage(const CameraImage& from);
  CameraImage(CameraImage&& from) noexcept
    : CameraImage() {
    *this = ::std::move(from);
  }

  inline CameraImage& operator=(const CameraImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraImage& operator=(CameraImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraImage* internal_default_instance() {
    return reinterpret_cast<const CameraImage*>(
               &_CameraImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CameraImage& a, CameraImage& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraImage* New() const final {
    return CreateMaybeMessage<CameraImage>(nullptr);
  }

  CameraImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraImage& from);
  void MergeFrom(const CameraImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.CameraImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageUrlFieldNumber = 2,
    kChannelFieldNumber = 15,
    kPositionFieldNumber = 3,
    kHeadingFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kFxFieldNumber = 5,
    kFyFieldNumber = 6,
    kCxFieldNumber = 7,
    kCyFieldNumber = 8,
    kSkewFieldNumber = 9,
    kK1FieldNumber = 10,
    kK2FieldNumber = 11,
    kK3FieldNumber = 12,
    kP1FieldNumber = 13,
    kP2FieldNumber = 14,
  };
  // optional string image_url = 2;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  void set_image_url(const std::string& value);
  void set_image_url(std::string&& value);
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  std::string* mutable_image_url();
  std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string channel = 15;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // optional .apollo.data.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::data::Vector3& position() const;
  ::apollo::data::Vector3* release_position();
  ::apollo::data::Vector3* mutable_position();
  void set_allocated_position(::apollo::data::Vector3* position);
  private:
  const ::apollo::data::Vector3& _internal_position() const;
  ::apollo::data::Vector3* _internal_mutable_position();
  public:

  // optional .apollo.data.Quaternion heading = 4;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  const ::apollo::data::Quaternion& heading() const;
  ::apollo::data::Quaternion* release_heading();
  ::apollo::data::Quaternion* mutable_heading();
  void set_allocated_heading(::apollo::data::Quaternion* heading);
  private:
  const ::apollo::data::Quaternion& _internal_heading() const;
  ::apollo::data::Quaternion* _internal_mutable_heading();
  public:

  // optional double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double fx = 5;
  bool has_fx() const;
  private:
  bool _internal_has_fx() const;
  public:
  void clear_fx();
  double fx() const;
  void set_fx(double value);
  private:
  double _internal_fx() const;
  void _internal_set_fx(double value);
  public:

  // optional double fy = 6;
  bool has_fy() const;
  private:
  bool _internal_has_fy() const;
  public:
  void clear_fy();
  double fy() const;
  void set_fy(double value);
  private:
  double _internal_fy() const;
  void _internal_set_fy(double value);
  public:

  // optional double cx = 7;
  bool has_cx() const;
  private:
  bool _internal_has_cx() const;
  public:
  void clear_cx();
  double cx() const;
  void set_cx(double value);
  private:
  double _internal_cx() const;
  void _internal_set_cx(double value);
  public:

  // optional double cy = 8;
  bool has_cy() const;
  private:
  bool _internal_has_cy() const;
  public:
  void clear_cy();
  double cy() const;
  void set_cy(double value);
  private:
  double _internal_cy() const;
  void _internal_set_cy(double value);
  public:

  // optional double skew = 9;
  bool has_skew() const;
  private:
  bool _internal_has_skew() const;
  public:
  void clear_skew();
  double skew() const;
  void set_skew(double value);
  private:
  double _internal_skew() const;
  void _internal_set_skew(double value);
  public:

  // optional double k1 = 10;
  bool has_k1() const;
  private:
  bool _internal_has_k1() const;
  public:
  void clear_k1();
  double k1() const;
  void set_k1(double value);
  private:
  double _internal_k1() const;
  void _internal_set_k1(double value);
  public:

  // optional double k2 = 11;
  bool has_k2() const;
  private:
  bool _internal_has_k2() const;
  public:
  void clear_k2();
  double k2() const;
  void set_k2(double value);
  private:
  double _internal_k2() const;
  void _internal_set_k2(double value);
  public:

  // optional double k3 = 12;
  bool has_k3() const;
  private:
  bool _internal_has_k3() const;
  public:
  void clear_k3();
  double k3() const;
  void set_k3(double value);
  private:
  double _internal_k3() const;
  void _internal_set_k3(double value);
  public:

  // optional double p1 = 13;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  double p1() const;
  void set_p1(double value);
  private:
  double _internal_p1() const;
  void _internal_set_p1(double value);
  public:

  // optional double p2 = 14;
  bool has_p2() const;
  private:
  bool _internal_has_p2() const;
  public:
  void clear_p2();
  double p2() const;
  void set_p2(double value);
  private:
  double _internal_p2() const;
  void _internal_set_p2(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.CameraImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::apollo::data::Vector3* position_;
  ::apollo::data::Quaternion* heading_;
  double timestamp_;
  double fx_;
  double fy_;
  double cx_;
  double cy_;
  double skew_;
  double k1_;
  double k2_;
  double k3_;
  double p1_;
  double p2_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class RadarPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.RadarPoint) */ {
 public:
  RadarPoint();
  virtual ~RadarPoint();

  RadarPoint(const RadarPoint& from);
  RadarPoint(RadarPoint&& from) noexcept
    : RadarPoint() {
    *this = ::std::move(from);
  }

  inline RadarPoint& operator=(const RadarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarPoint& operator=(RadarPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarPoint* internal_default_instance() {
    return reinterpret_cast<const RadarPoint*>(
               &_RadarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RadarPoint& a, RadarPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarPoint* New() const final {
    return CreateMaybeMessage<RadarPoint>(nullptr);
  }

  RadarPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarPoint& from);
  void MergeFrom(const RadarPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.RadarPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RadarPoint_RadarType RadarType;
  static constexpr RadarType FRONT =
    RadarPoint_RadarType_FRONT;
  static constexpr RadarType REAR =
    RadarPoint_RadarType_REAR;
  static inline bool RadarType_IsValid(int value) {
    return RadarPoint_RadarType_IsValid(value);
  }
  static constexpr RadarType RadarType_MIN =
    RadarPoint_RadarType_RadarType_MIN;
  static constexpr RadarType RadarType_MAX =
    RadarPoint_RadarType_RadarType_MAX;
  static constexpr int RadarType_ARRAYSIZE =
    RadarPoint_RadarType_RadarType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RadarType_descriptor() {
    return RadarPoint_RadarType_descriptor();
  }
  template<typename T>
  static inline const std::string& RadarType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RadarType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RadarType_Name.");
    return RadarPoint_RadarType_Name(enum_t_value);
  }
  static inline bool RadarType_Parse(const std::string& name,
      RadarType* value) {
    return RadarPoint_RadarType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional .apollo.data.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::data::Vector3& position() const;
  ::apollo::data::Vector3* release_position();
  ::apollo::data::Vector3* mutable_position();
  void set_allocated_position(::apollo::data::Vector3* position);
  private:
  const ::apollo::data::Vector3& _internal_position() const;
  ::apollo::data::Vector3* _internal_mutable_position();
  public:

  // optional .apollo.data.Vector3 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::apollo::data::Vector3& direction() const;
  ::apollo::data::Vector3* release_direction();
  ::apollo::data::Vector3* mutable_direction();
  void set_allocated_direction(::apollo::data::Vector3* direction);
  private:
  const ::apollo::data::Vector3& _internal_direction() const;
  ::apollo::data::Vector3* _internal_mutable_direction();
  public:

  // optional .apollo.data.RadarPoint.RadarType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::data::RadarPoint_RadarType type() const;
  void set_type(::apollo::data::RadarPoint_RadarType value);
  private:
  ::apollo::data::RadarPoint_RadarType _internal_type() const;
  void _internal_set_type(::apollo::data::RadarPoint_RadarType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.RadarPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::data::Vector3* position_;
  ::apollo::data::Vector3* direction_;
  int type_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto);
    return ::descriptor_table_modules_2fdata_2fproto_2fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 4,
    kRadarPointsFieldNumber = 5,
    kImagesFieldNumber = 6,
    kDataFileFieldNumber = 9,
    kDevicePositionFieldNumber = 1,
    kDeviceHeadingFieldNumber = 2,
    kDeviceGpsPoseFieldNumber = 3,
    kTimestampFieldNumber = 7,
    kFrameSeqFieldNumber = 8,
  };
  // repeated .apollo.data.Vector4 points = 4;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::apollo::data::Vector4* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Vector4 >*
      mutable_points();
  private:
  const ::apollo::data::Vector4& _internal_points(int index) const;
  ::apollo::data::Vector4* _internal_add_points();
  public:
  const ::apollo::data::Vector4& points(int index) const;
  ::apollo::data::Vector4* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Vector4 >&
      points() const;

  // repeated .apollo.data.RadarPoint radar_points = 5;
  int radar_points_size() const;
  private:
  int _internal_radar_points_size() const;
  public:
  void clear_radar_points();
  ::apollo::data::RadarPoint* mutable_radar_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::RadarPoint >*
      mutable_radar_points();
  private:
  const ::apollo::data::RadarPoint& _internal_radar_points(int index) const;
  ::apollo::data::RadarPoint* _internal_add_radar_points();
  public:
  const ::apollo::data::RadarPoint& radar_points(int index) const;
  ::apollo::data::RadarPoint* add_radar_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::RadarPoint >&
      radar_points() const;

  // repeated .apollo.data.CameraImage images = 6;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::apollo::data::CameraImage* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::CameraImage >*
      mutable_images();
  private:
  const ::apollo::data::CameraImage& _internal_images(int index) const;
  ::apollo::data::CameraImage* _internal_add_images();
  public:
  const ::apollo::data::CameraImage& images(int index) const;
  ::apollo::data::CameraImage* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::CameraImage >&
      images() const;

  // optional string data_file = 9;
  bool has_data_file() const;
  private:
  bool _internal_has_data_file() const;
  public:
  void clear_data_file();
  const std::string& data_file() const;
  void set_data_file(const std::string& value);
  void set_data_file(std::string&& value);
  void set_data_file(const char* value);
  void set_data_file(const char* value, size_t size);
  std::string* mutable_data_file();
  std::string* release_data_file();
  void set_allocated_data_file(std::string* data_file);
  private:
  const std::string& _internal_data_file() const;
  void _internal_set_data_file(const std::string& value);
  std::string* _internal_mutable_data_file();
  public:

  // optional .apollo.data.Vector3 device_position = 1;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::apollo::data::Vector3& device_position() const;
  ::apollo::data::Vector3* release_device_position();
  ::apollo::data::Vector3* mutable_device_position();
  void set_allocated_device_position(::apollo::data::Vector3* device_position);
  private:
  const ::apollo::data::Vector3& _internal_device_position() const;
  ::apollo::data::Vector3* _internal_mutable_device_position();
  public:

  // optional .apollo.data.Quaternion device_heading = 2;
  bool has_device_heading() const;
  private:
  bool _internal_has_device_heading() const;
  public:
  void clear_device_heading();
  const ::apollo::data::Quaternion& device_heading() const;
  ::apollo::data::Quaternion* release_device_heading();
  ::apollo::data::Quaternion* mutable_device_heading();
  void set_allocated_device_heading(::apollo::data::Quaternion* device_heading);
  private:
  const ::apollo::data::Quaternion& _internal_device_heading() const;
  ::apollo::data::Quaternion* _internal_mutable_device_heading();
  public:

  // optional .apollo.data.GPSPose device_gps_pose = 3;
  bool has_device_gps_pose() const;
  private:
  bool _internal_has_device_gps_pose() const;
  public:
  void clear_device_gps_pose();
  const ::apollo::data::GPSPose& device_gps_pose() const;
  ::apollo::data::GPSPose* release_device_gps_pose();
  ::apollo::data::GPSPose* mutable_device_gps_pose();
  void set_allocated_device_gps_pose(::apollo::data::GPSPose* device_gps_pose);
  private:
  const ::apollo::data::GPSPose& _internal_device_gps_pose() const;
  ::apollo::data::GPSPose* _internal_mutable_device_gps_pose();
  public:

  // optional double timestamp = 7;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional int32 frame_seq = 8;
  bool has_frame_seq() const;
  private:
  bool _internal_has_frame_seq() const;
  public:
  void clear_frame_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_seq() const;
  void set_frame_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_seq() const;
  void _internal_set_frame_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Vector4 > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::RadarPoint > radar_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::CameraImage > images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_file_;
  ::apollo::data::Vector3* device_position_;
  ::apollo::data::Quaternion* device_heading_;
  ::apollo::data::GPSPose* device_gps_pose_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_seq_;
  friend struct ::TableStruct_modules_2fdata_2fproto_2fframe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// optional double x = 1;
inline bool Vector3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector3::has_x() const {
  return _internal_has_x();
}
inline void Vector3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector3.x)
}

// optional double y = 2;
inline bool Vector3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector3::has_y() const {
  return _internal_has_y();
}
inline void Vector3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector3.y)
}

// optional double z = 3;
inline bool Vector3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector3::has_z() const {
  return _internal_has_z();
}
inline void Vector3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector3.z)
}

// -------------------------------------------------------------------

// Vector4

// optional double x = 1;
inline bool Vector4::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector4::has_x() const {
  return _internal_has_x();
}
inline void Vector4::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vector4::_internal_x() const {
  return x_;
}
inline double Vector4::x() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector4.x)
  return _internal_x();
}
inline void Vector4::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Vector4::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector4.x)
}

// optional double y = 2;
inline bool Vector4::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector4::has_y() const {
  return _internal_has_y();
}
inline void Vector4::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vector4::_internal_y() const {
  return y_;
}
inline double Vector4::y() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector4.y)
  return _internal_y();
}
inline void Vector4::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Vector4::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector4.y)
}

// optional double z = 3;
inline bool Vector4::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector4::has_z() const {
  return _internal_has_z();
}
inline void Vector4::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vector4::_internal_z() const {
  return z_;
}
inline double Vector4::z() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector4.z)
  return _internal_z();
}
inline void Vector4::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Vector4::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector4.z)
}

// optional double i = 4;
inline bool Vector4::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vector4::has_i() const {
  return _internal_has_i();
}
inline void Vector4::clear_i() {
  i_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Vector4::_internal_i() const {
  return i_;
}
inline double Vector4::i() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector4.i)
  return _internal_i();
}
inline void Vector4::_internal_set_i(double value) {
  _has_bits_[0] |= 0x00000008u;
  i_ = value;
}
inline void Vector4::set_i(double value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector4.i)
}

// optional bool is_ground = 5 [default = false];
inline bool Vector4::_internal_has_is_ground() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vector4::has_is_ground() const {
  return _internal_has_is_ground();
}
inline void Vector4::clear_is_ground() {
  is_ground_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Vector4::_internal_is_ground() const {
  return is_ground_;
}
inline bool Vector4::is_ground() const {
  // @@protoc_insertion_point(field_get:apollo.data.Vector4.is_ground)
  return _internal_is_ground();
}
inline void Vector4::_internal_set_is_ground(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_ground_ = value;
}
inline void Vector4::set_is_ground(bool value) {
  _internal_set_is_ground(value);
  // @@protoc_insertion_point(field_set:apollo.data.Vector4.is_ground)
}

// -------------------------------------------------------------------

// Quaternion

// optional double x = 1;
inline bool Quaternion::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quaternion::has_x() const {
  return _internal_has_x();
}
inline void Quaternion::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:apollo.data.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.data.Quaternion.x)
}

// optional double y = 2;
inline bool Quaternion::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quaternion::has_y() const {
  return _internal_has_y();
}
inline void Quaternion::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:apollo.data.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.data.Quaternion.y)
}

// optional double z = 3;
inline bool Quaternion::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Quaternion::has_z() const {
  return _internal_has_z();
}
inline void Quaternion::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:apollo.data.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.data.Quaternion.z)
}

// optional double w = 4;
inline bool Quaternion::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Quaternion::has_w() const {
  return _internal_has_w();
}
inline void Quaternion::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:apollo.data.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:apollo.data.Quaternion.w)
}

// -------------------------------------------------------------------

// GPSPose

// optional double lat = 1;
inline bool GPSPose::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GPSPose::has_lat() const {
  return _internal_has_lat();
}
inline void GPSPose::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GPSPose::_internal_lat() const {
  return lat_;
}
inline double GPSPose::lat() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.lat)
  return _internal_lat();
}
inline void GPSPose::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000001u;
  lat_ = value;
}
inline void GPSPose::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.lat)
}

// optional double lon = 2;
inline bool GPSPose::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GPSPose::has_lon() const {
  return _internal_has_lon();
}
inline void GPSPose::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GPSPose::_internal_lon() const {
  return lon_;
}
inline double GPSPose::lon() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.lon)
  return _internal_lon();
}
inline void GPSPose::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000002u;
  lon_ = value;
}
inline void GPSPose::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.lon)
}

// optional double bearing = 3;
inline bool GPSPose::_internal_has_bearing() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GPSPose::has_bearing() const {
  return _internal_has_bearing();
}
inline void GPSPose::clear_bearing() {
  bearing_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GPSPose::_internal_bearing() const {
  return bearing_;
}
inline double GPSPose::bearing() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.bearing)
  return _internal_bearing();
}
inline void GPSPose::_internal_set_bearing(double value) {
  _has_bits_[0] |= 0x00000004u;
  bearing_ = value;
}
inline void GPSPose::set_bearing(double value) {
  _internal_set_bearing(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.bearing)
}

// optional double x = 4;
inline bool GPSPose::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GPSPose::has_x() const {
  return _internal_has_x();
}
inline void GPSPose::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GPSPose::_internal_x() const {
  return x_;
}
inline double GPSPose::x() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.x)
  return _internal_x();
}
inline void GPSPose::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
}
inline void GPSPose::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.x)
}

// optional double y = 5;
inline bool GPSPose::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GPSPose::has_y() const {
  return _internal_has_y();
}
inline void GPSPose::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GPSPose::_internal_y() const {
  return y_;
}
inline double GPSPose::y() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.y)
  return _internal_y();
}
inline void GPSPose::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void GPSPose::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.y)
}

// optional double z = 6;
inline bool GPSPose::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GPSPose::has_z() const {
  return _internal_has_z();
}
inline void GPSPose::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GPSPose::_internal_z() const {
  return z_;
}
inline double GPSPose::z() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.z)
  return _internal_z();
}
inline void GPSPose::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000020u;
  z_ = value;
}
inline void GPSPose::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.z)
}

// optional double qw = 7;
inline bool GPSPose::_internal_has_qw() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GPSPose::has_qw() const {
  return _internal_has_qw();
}
inline void GPSPose::clear_qw() {
  qw_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double GPSPose::_internal_qw() const {
  return qw_;
}
inline double GPSPose::qw() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.qw)
  return _internal_qw();
}
inline void GPSPose::_internal_set_qw(double value) {
  _has_bits_[0] |= 0x00000040u;
  qw_ = value;
}
inline void GPSPose::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.qw)
}

// optional double qx = 8;
inline bool GPSPose::_internal_has_qx() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GPSPose::has_qx() const {
  return _internal_has_qx();
}
inline void GPSPose::clear_qx() {
  qx_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double GPSPose::_internal_qx() const {
  return qx_;
}
inline double GPSPose::qx() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.qx)
  return _internal_qx();
}
inline void GPSPose::_internal_set_qx(double value) {
  _has_bits_[0] |= 0x00000080u;
  qx_ = value;
}
inline void GPSPose::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.qx)
}

// optional double qy = 9;
inline bool GPSPose::_internal_has_qy() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GPSPose::has_qy() const {
  return _internal_has_qy();
}
inline void GPSPose::clear_qy() {
  qy_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double GPSPose::_internal_qy() const {
  return qy_;
}
inline double GPSPose::qy() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.qy)
  return _internal_qy();
}
inline void GPSPose::_internal_set_qy(double value) {
  _has_bits_[0] |= 0x00000100u;
  qy_ = value;
}
inline void GPSPose::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.qy)
}

// optional double qz = 10;
inline bool GPSPose::_internal_has_qz() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GPSPose::has_qz() const {
  return _internal_has_qz();
}
inline void GPSPose::clear_qz() {
  qz_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double GPSPose::_internal_qz() const {
  return qz_;
}
inline double GPSPose::qz() const {
  // @@protoc_insertion_point(field_get:apollo.data.GPSPose.qz)
  return _internal_qz();
}
inline void GPSPose::_internal_set_qz(double value) {
  _has_bits_[0] |= 0x00000200u;
  qz_ = value;
}
inline void GPSPose::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:apollo.data.GPSPose.qz)
}

// -------------------------------------------------------------------

// CameraImage

// optional double timestamp = 1;
inline bool CameraImage::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraImage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CameraImage::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CameraImage::_internal_timestamp() const {
  return timestamp_;
}
inline double CameraImage::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.timestamp)
  return _internal_timestamp();
}
inline void CameraImage::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void CameraImage::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.timestamp)
}

// optional string image_url = 2;
inline bool CameraImage::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraImage::has_image_url() const {
  return _internal_has_image_url();
}
inline void CameraImage::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraImage::image_url() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.image_url)
  return _internal_image_url();
}
inline void CameraImage::set_image_url(const std::string& value) {
  _internal_set_image_url(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.image_url)
}
inline std::string* CameraImage::mutable_image_url() {
  // @@protoc_insertion_point(field_mutable:apollo.data.CameraImage.image_url)
  return _internal_mutable_image_url();
}
inline const std::string& CameraImage::_internal_image_url() const {
  return image_url_.GetNoArena();
}
inline void CameraImage::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraImage::set_image_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.CameraImage.image_url)
}
inline void CameraImage::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.CameraImage.image_url)
}
inline void CameraImage::set_image_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.CameraImage.image_url)
}
inline std::string* CameraImage::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000001u;
  return image_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraImage::release_image_url() {
  // @@protoc_insertion_point(field_release:apollo.data.CameraImage.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraImage::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.CameraImage.image_url)
}

// optional .apollo.data.Vector3 position = 3;
inline bool CameraImage::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool CameraImage::has_position() const {
  return _internal_has_position();
}
inline void CameraImage::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::data::Vector3& CameraImage::_internal_position() const {
  const ::apollo::data::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::Vector3*>(
      &::apollo::data::_Vector3_default_instance_);
}
inline const ::apollo::data::Vector3& CameraImage::position() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.position)
  return _internal_position();
}
inline ::apollo::data::Vector3* CameraImage::release_position() {
  // @@protoc_insertion_point(field_release:apollo.data.CameraImage.position)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::data::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::data::Vector3* CameraImage::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000004u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::apollo::data::Vector3* CameraImage::mutable_position() {
  // @@protoc_insertion_point(field_mutable:apollo.data.CameraImage.position)
  return _internal_mutable_position();
}
inline void CameraImage::set_allocated_position(::apollo::data::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.CameraImage.position)
}

// optional .apollo.data.Quaternion heading = 4;
inline bool CameraImage::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || heading_ != nullptr);
  return value;
}
inline bool CameraImage::has_heading() const {
  return _internal_has_heading();
}
inline void CameraImage::clear_heading() {
  if (heading_ != nullptr) heading_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::data::Quaternion& CameraImage::_internal_heading() const {
  const ::apollo::data::Quaternion* p = heading_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::Quaternion*>(
      &::apollo::data::_Quaternion_default_instance_);
}
inline const ::apollo::data::Quaternion& CameraImage::heading() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.heading)
  return _internal_heading();
}
inline ::apollo::data::Quaternion* CameraImage::release_heading() {
  // @@protoc_insertion_point(field_release:apollo.data.CameraImage.heading)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::data::Quaternion* temp = heading_;
  heading_ = nullptr;
  return temp;
}
inline ::apollo::data::Quaternion* CameraImage::_internal_mutable_heading() {
  _has_bits_[0] |= 0x00000008u;
  if (heading_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::Quaternion>(GetArenaNoVirtual());
    heading_ = p;
  }
  return heading_;
}
inline ::apollo::data::Quaternion* CameraImage::mutable_heading() {
  // @@protoc_insertion_point(field_mutable:apollo.data.CameraImage.heading)
  return _internal_mutable_heading();
}
inline void CameraImage::set_allocated_heading(::apollo::data::Quaternion* heading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete heading_;
  }
  if (heading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  heading_ = heading;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.CameraImage.heading)
}

// optional double fx = 5;
inline bool CameraImage::_internal_has_fx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraImage::has_fx() const {
  return _internal_has_fx();
}
inline void CameraImage::clear_fx() {
  fx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CameraImage::_internal_fx() const {
  return fx_;
}
inline double CameraImage::fx() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.fx)
  return _internal_fx();
}
inline void CameraImage::_internal_set_fx(double value) {
  _has_bits_[0] |= 0x00000020u;
  fx_ = value;
}
inline void CameraImage::set_fx(double value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.fx)
}

// optional double fy = 6;
inline bool CameraImage::_internal_has_fy() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CameraImage::has_fy() const {
  return _internal_has_fy();
}
inline void CameraImage::clear_fy() {
  fy_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CameraImage::_internal_fy() const {
  return fy_;
}
inline double CameraImage::fy() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.fy)
  return _internal_fy();
}
inline void CameraImage::_internal_set_fy(double value) {
  _has_bits_[0] |= 0x00000040u;
  fy_ = value;
}
inline void CameraImage::set_fy(double value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.fy)
}

// optional double cx = 7;
inline bool CameraImage::_internal_has_cx() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CameraImage::has_cx() const {
  return _internal_has_cx();
}
inline void CameraImage::clear_cx() {
  cx_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double CameraImage::_internal_cx() const {
  return cx_;
}
inline double CameraImage::cx() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.cx)
  return _internal_cx();
}
inline void CameraImage::_internal_set_cx(double value) {
  _has_bits_[0] |= 0x00000080u;
  cx_ = value;
}
inline void CameraImage::set_cx(double value) {
  _internal_set_cx(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.cx)
}

// optional double cy = 8;
inline bool CameraImage::_internal_has_cy() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CameraImage::has_cy() const {
  return _internal_has_cy();
}
inline void CameraImage::clear_cy() {
  cy_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double CameraImage::_internal_cy() const {
  return cy_;
}
inline double CameraImage::cy() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.cy)
  return _internal_cy();
}
inline void CameraImage::_internal_set_cy(double value) {
  _has_bits_[0] |= 0x00000100u;
  cy_ = value;
}
inline void CameraImage::set_cy(double value) {
  _internal_set_cy(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.cy)
}

// optional double skew = 9;
inline bool CameraImage::_internal_has_skew() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CameraImage::has_skew() const {
  return _internal_has_skew();
}
inline void CameraImage::clear_skew() {
  skew_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double CameraImage::_internal_skew() const {
  return skew_;
}
inline double CameraImage::skew() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.skew)
  return _internal_skew();
}
inline void CameraImage::_internal_set_skew(double value) {
  _has_bits_[0] |= 0x00000200u;
  skew_ = value;
}
inline void CameraImage::set_skew(double value) {
  _internal_set_skew(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.skew)
}

// optional double k1 = 10;
inline bool CameraImage::_internal_has_k1() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CameraImage::has_k1() const {
  return _internal_has_k1();
}
inline void CameraImage::clear_k1() {
  k1_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double CameraImage::_internal_k1() const {
  return k1_;
}
inline double CameraImage::k1() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.k1)
  return _internal_k1();
}
inline void CameraImage::_internal_set_k1(double value) {
  _has_bits_[0] |= 0x00000400u;
  k1_ = value;
}
inline void CameraImage::set_k1(double value) {
  _internal_set_k1(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.k1)
}

// optional double k2 = 11;
inline bool CameraImage::_internal_has_k2() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CameraImage::has_k2() const {
  return _internal_has_k2();
}
inline void CameraImage::clear_k2() {
  k2_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double CameraImage::_internal_k2() const {
  return k2_;
}
inline double CameraImage::k2() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.k2)
  return _internal_k2();
}
inline void CameraImage::_internal_set_k2(double value) {
  _has_bits_[0] |= 0x00000800u;
  k2_ = value;
}
inline void CameraImage::set_k2(double value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.k2)
}

// optional double k3 = 12;
inline bool CameraImage::_internal_has_k3() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CameraImage::has_k3() const {
  return _internal_has_k3();
}
inline void CameraImage::clear_k3() {
  k3_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double CameraImage::_internal_k3() const {
  return k3_;
}
inline double CameraImage::k3() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.k3)
  return _internal_k3();
}
inline void CameraImage::_internal_set_k3(double value) {
  _has_bits_[0] |= 0x00001000u;
  k3_ = value;
}
inline void CameraImage::set_k3(double value) {
  _internal_set_k3(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.k3)
}

// optional double p1 = 13;
inline bool CameraImage::_internal_has_p1() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CameraImage::has_p1() const {
  return _internal_has_p1();
}
inline void CameraImage::clear_p1() {
  p1_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double CameraImage::_internal_p1() const {
  return p1_;
}
inline double CameraImage::p1() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.p1)
  return _internal_p1();
}
inline void CameraImage::_internal_set_p1(double value) {
  _has_bits_[0] |= 0x00002000u;
  p1_ = value;
}
inline void CameraImage::set_p1(double value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.p1)
}

// optional double p2 = 14;
inline bool CameraImage::_internal_has_p2() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CameraImage::has_p2() const {
  return _internal_has_p2();
}
inline void CameraImage::clear_p2() {
  p2_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double CameraImage::_internal_p2() const {
  return p2_;
}
inline double CameraImage::p2() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.p2)
  return _internal_p2();
}
inline void CameraImage::_internal_set_p2(double value) {
  _has_bits_[0] |= 0x00004000u;
  p2_ = value;
}
inline void CameraImage::set_p2(double value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.p2)
}

// optional string channel = 15;
inline bool CameraImage::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraImage::has_channel() const {
  return _internal_has_channel();
}
inline void CameraImage::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraImage::channel() const {
  // @@protoc_insertion_point(field_get:apollo.data.CameraImage.channel)
  return _internal_channel();
}
inline void CameraImage::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:apollo.data.CameraImage.channel)
}
inline std::string* CameraImage::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.data.CameraImage.channel)
  return _internal_mutable_channel();
}
inline const std::string& CameraImage::_internal_channel() const {
  return channel_.GetNoArena();
}
inline void CameraImage::_internal_set_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraImage::set_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.CameraImage.channel)
}
inline void CameraImage::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.CameraImage.channel)
}
inline void CameraImage::set_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.CameraImage.channel)
}
inline std::string* CameraImage::_internal_mutable_channel() {
  _has_bits_[0] |= 0x00000002u;
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraImage::release_channel() {
  // @@protoc_insertion_point(field_release:apollo.data.CameraImage.channel)
  if (!_internal_has_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraImage::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.CameraImage.channel)
}

// -------------------------------------------------------------------

// RadarPoint

// optional .apollo.data.Vector3 position = 1;
inline bool RadarPoint::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool RadarPoint::has_position() const {
  return _internal_has_position();
}
inline void RadarPoint::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::data::Vector3& RadarPoint::_internal_position() const {
  const ::apollo::data::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::Vector3*>(
      &::apollo::data::_Vector3_default_instance_);
}
inline const ::apollo::data::Vector3& RadarPoint::position() const {
  // @@protoc_insertion_point(field_get:apollo.data.RadarPoint.position)
  return _internal_position();
}
inline ::apollo::data::Vector3* RadarPoint::release_position() {
  // @@protoc_insertion_point(field_release:apollo.data.RadarPoint.position)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::data::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::data::Vector3* RadarPoint::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::apollo::data::Vector3* RadarPoint::mutable_position() {
  // @@protoc_insertion_point(field_mutable:apollo.data.RadarPoint.position)
  return _internal_mutable_position();
}
inline void RadarPoint::set_allocated_position(::apollo::data::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.RadarPoint.position)
}

// optional .apollo.data.Vector3 direction = 2;
inline bool RadarPoint::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || direction_ != nullptr);
  return value;
}
inline bool RadarPoint::has_direction() const {
  return _internal_has_direction();
}
inline void RadarPoint::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::data::Vector3& RadarPoint::_internal_direction() const {
  const ::apollo::data::Vector3* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::Vector3*>(
      &::apollo::data::_Vector3_default_instance_);
}
inline const ::apollo::data::Vector3& RadarPoint::direction() const {
  // @@protoc_insertion_point(field_get:apollo.data.RadarPoint.direction)
  return _internal_direction();
}
inline ::apollo::data::Vector3* RadarPoint::release_direction() {
  // @@protoc_insertion_point(field_release:apollo.data.RadarPoint.direction)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::data::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::apollo::data::Vector3* RadarPoint::_internal_mutable_direction() {
  _has_bits_[0] |= 0x00000002u;
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::Vector3>(GetArenaNoVirtual());
    direction_ = p;
  }
  return direction_;
}
inline ::apollo::data::Vector3* RadarPoint::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:apollo.data.RadarPoint.direction)
  return _internal_mutable_direction();
}
inline void RadarPoint::set_allocated_direction(::apollo::data::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.RadarPoint.direction)
}

// optional .apollo.data.RadarPoint.RadarType type = 3;
inline bool RadarPoint::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarPoint::has_type() const {
  return _internal_has_type();
}
inline void RadarPoint::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::data::RadarPoint_RadarType RadarPoint::_internal_type() const {
  return static_cast< ::apollo::data::RadarPoint_RadarType >(type_);
}
inline ::apollo::data::RadarPoint_RadarType RadarPoint::type() const {
  // @@protoc_insertion_point(field_get:apollo.data.RadarPoint.type)
  return _internal_type();
}
inline void RadarPoint::_internal_set_type(::apollo::data::RadarPoint_RadarType value) {
  assert(::apollo::data::RadarPoint_RadarType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void RadarPoint::set_type(::apollo::data::RadarPoint_RadarType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.data.RadarPoint.type)
}

// -------------------------------------------------------------------

// Frame

// optional .apollo.data.Vector3 device_position = 1;
inline bool Frame::_internal_has_device_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || device_position_ != nullptr);
  return value;
}
inline bool Frame::has_device_position() const {
  return _internal_has_device_position();
}
inline void Frame::clear_device_position() {
  if (device_position_ != nullptr) device_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::data::Vector3& Frame::_internal_device_position() const {
  const ::apollo::data::Vector3* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::Vector3*>(
      &::apollo::data::_Vector3_default_instance_);
}
inline const ::apollo::data::Vector3& Frame::device_position() const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.device_position)
  return _internal_device_position();
}
inline ::apollo::data::Vector3* Frame::release_device_position() {
  // @@protoc_insertion_point(field_release:apollo.data.Frame.device_position)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::data::Vector3* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::apollo::data::Vector3* Frame::_internal_mutable_device_position() {
  _has_bits_[0] |= 0x00000002u;
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::Vector3>(GetArenaNoVirtual());
    device_position_ = p;
  }
  return device_position_;
}
inline ::apollo::data::Vector3* Frame::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.device_position)
  return _internal_mutable_device_position();
}
inline void Frame::set_allocated_device_position(::apollo::data::Vector3* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_position_;
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Frame.device_position)
}

// optional .apollo.data.Quaternion device_heading = 2;
inline bool Frame::_internal_has_device_heading() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || device_heading_ != nullptr);
  return value;
}
inline bool Frame::has_device_heading() const {
  return _internal_has_device_heading();
}
inline void Frame::clear_device_heading() {
  if (device_heading_ != nullptr) device_heading_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::data::Quaternion& Frame::_internal_device_heading() const {
  const ::apollo::data::Quaternion* p = device_heading_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::Quaternion*>(
      &::apollo::data::_Quaternion_default_instance_);
}
inline const ::apollo::data::Quaternion& Frame::device_heading() const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.device_heading)
  return _internal_device_heading();
}
inline ::apollo::data::Quaternion* Frame::release_device_heading() {
  // @@protoc_insertion_point(field_release:apollo.data.Frame.device_heading)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::data::Quaternion* temp = device_heading_;
  device_heading_ = nullptr;
  return temp;
}
inline ::apollo::data::Quaternion* Frame::_internal_mutable_device_heading() {
  _has_bits_[0] |= 0x00000004u;
  if (device_heading_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::Quaternion>(GetArenaNoVirtual());
    device_heading_ = p;
  }
  return device_heading_;
}
inline ::apollo::data::Quaternion* Frame::mutable_device_heading() {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.device_heading)
  return _internal_mutable_device_heading();
}
inline void Frame::set_allocated_device_heading(::apollo::data::Quaternion* device_heading) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_heading_;
  }
  if (device_heading) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_heading = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_heading, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_heading_ = device_heading;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Frame.device_heading)
}

// optional .apollo.data.GPSPose device_gps_pose = 3;
inline bool Frame::_internal_has_device_gps_pose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || device_gps_pose_ != nullptr);
  return value;
}
inline bool Frame::has_device_gps_pose() const {
  return _internal_has_device_gps_pose();
}
inline void Frame::clear_device_gps_pose() {
  if (device_gps_pose_ != nullptr) device_gps_pose_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::data::GPSPose& Frame::_internal_device_gps_pose() const {
  const ::apollo::data::GPSPose* p = device_gps_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::data::GPSPose*>(
      &::apollo::data::_GPSPose_default_instance_);
}
inline const ::apollo::data::GPSPose& Frame::device_gps_pose() const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.device_gps_pose)
  return _internal_device_gps_pose();
}
inline ::apollo::data::GPSPose* Frame::release_device_gps_pose() {
  // @@protoc_insertion_point(field_release:apollo.data.Frame.device_gps_pose)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::data::GPSPose* temp = device_gps_pose_;
  device_gps_pose_ = nullptr;
  return temp;
}
inline ::apollo::data::GPSPose* Frame::_internal_mutable_device_gps_pose() {
  _has_bits_[0] |= 0x00000008u;
  if (device_gps_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::GPSPose>(GetArenaNoVirtual());
    device_gps_pose_ = p;
  }
  return device_gps_pose_;
}
inline ::apollo::data::GPSPose* Frame::mutable_device_gps_pose() {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.device_gps_pose)
  return _internal_mutable_device_gps_pose();
}
inline void Frame::set_allocated_device_gps_pose(::apollo::data::GPSPose* device_gps_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_gps_pose_;
  }
  if (device_gps_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_gps_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_gps_pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  device_gps_pose_ = device_gps_pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Frame.device_gps_pose)
}

// repeated .apollo.data.Vector4 points = 4;
inline int Frame::_internal_points_size() const {
  return points_.size();
}
inline int Frame::points_size() const {
  return _internal_points_size();
}
inline void Frame::clear_points() {
  points_.Clear();
}
inline ::apollo::data::Vector4* Frame::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Vector4 >*
Frame::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Frame.points)
  return &points_;
}
inline const ::apollo::data::Vector4& Frame::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::apollo::data::Vector4& Frame::points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.points)
  return _internal_points(index);
}
inline ::apollo::data::Vector4* Frame::_internal_add_points() {
  return points_.Add();
}
inline ::apollo::data::Vector4* Frame::add_points() {
  // @@protoc_insertion_point(field_add:apollo.data.Frame.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Vector4 >&
Frame::points() const {
  // @@protoc_insertion_point(field_list:apollo.data.Frame.points)
  return points_;
}

// repeated .apollo.data.RadarPoint radar_points = 5;
inline int Frame::_internal_radar_points_size() const {
  return radar_points_.size();
}
inline int Frame::radar_points_size() const {
  return _internal_radar_points_size();
}
inline void Frame::clear_radar_points() {
  radar_points_.Clear();
}
inline ::apollo::data::RadarPoint* Frame::mutable_radar_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.radar_points)
  return radar_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::RadarPoint >*
Frame::mutable_radar_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Frame.radar_points)
  return &radar_points_;
}
inline const ::apollo::data::RadarPoint& Frame::_internal_radar_points(int index) const {
  return radar_points_.Get(index);
}
inline const ::apollo::data::RadarPoint& Frame::radar_points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.radar_points)
  return _internal_radar_points(index);
}
inline ::apollo::data::RadarPoint* Frame::_internal_add_radar_points() {
  return radar_points_.Add();
}
inline ::apollo::data::RadarPoint* Frame::add_radar_points() {
  // @@protoc_insertion_point(field_add:apollo.data.Frame.radar_points)
  return _internal_add_radar_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::RadarPoint >&
Frame::radar_points() const {
  // @@protoc_insertion_point(field_list:apollo.data.Frame.radar_points)
  return radar_points_;
}

// repeated .apollo.data.CameraImage images = 6;
inline int Frame::_internal_images_size() const {
  return images_.size();
}
inline int Frame::images_size() const {
  return _internal_images_size();
}
inline void Frame::clear_images() {
  images_.Clear();
}
inline ::apollo::data::CameraImage* Frame::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::CameraImage >*
Frame::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Frame.images)
  return &images_;
}
inline const ::apollo::data::CameraImage& Frame::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::apollo::data::CameraImage& Frame::images(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.images)
  return _internal_images(index);
}
inline ::apollo::data::CameraImage* Frame::_internal_add_images() {
  return images_.Add();
}
inline ::apollo::data::CameraImage* Frame::add_images() {
  // @@protoc_insertion_point(field_add:apollo.data.Frame.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::CameraImage >&
Frame::images() const {
  // @@protoc_insertion_point(field_list:apollo.data.Frame.images)
  return images_;
}

// optional double timestamp = 7;
inline bool Frame::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Frame::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Frame::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Frame::_internal_timestamp() const {
  return timestamp_;
}
inline double Frame::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.timestamp)
  return _internal_timestamp();
}
inline void Frame::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void Frame::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.data.Frame.timestamp)
}

// optional int32 frame_seq = 8;
inline bool Frame::_internal_has_frame_seq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Frame::has_frame_seq() const {
  return _internal_has_frame_seq();
}
inline void Frame::clear_frame_seq() {
  frame_seq_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_frame_seq() const {
  return frame_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::frame_seq() const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.frame_seq)
  return _internal_frame_seq();
}
inline void Frame::_internal_set_frame_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  frame_seq_ = value;
}
inline void Frame::set_frame_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_seq(value);
  // @@protoc_insertion_point(field_set:apollo.data.Frame.frame_seq)
}

// optional string data_file = 9;
inline bool Frame::_internal_has_data_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Frame::has_data_file() const {
  return _internal_has_data_file();
}
inline void Frame::clear_data_file() {
  data_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Frame::data_file() const {
  // @@protoc_insertion_point(field_get:apollo.data.Frame.data_file)
  return _internal_data_file();
}
inline void Frame::set_data_file(const std::string& value) {
  _internal_set_data_file(value);
  // @@protoc_insertion_point(field_set:apollo.data.Frame.data_file)
}
inline std::string* Frame::mutable_data_file() {
  // @@protoc_insertion_point(field_mutable:apollo.data.Frame.data_file)
  return _internal_mutable_data_file();
}
inline const std::string& Frame::_internal_data_file() const {
  return data_file_.GetNoArena();
}
inline void Frame::_internal_set_data_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Frame::set_data_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.data.Frame.data_file)
}
inline void Frame::set_data_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.data.Frame.data_file)
}
inline void Frame::set_data_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Frame.data_file)
}
inline std::string* Frame::_internal_mutable_data_file() {
  _has_bits_[0] |= 0x00000001u;
  return data_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Frame::release_data_file() {
  // @@protoc_insertion_point(field_release:apollo.data.Frame.data_file)
  if (!_internal_has_data_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_data_file(std::string* data_file) {
  if (data_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Frame.data_file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::data::RadarPoint_RadarType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::data::RadarPoint_RadarType>() {
  return ::apollo::data::RadarPoint_RadarType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2fframe_2eproto
