// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/gnss_pnt_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/drivers/gnss/proto/gnss_raw_observation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto;
namespace apollo {
namespace localization {
class GnssPntResult;
class GnssPntResultDefaultTypeInternal;
extern GnssPntResultDefaultTypeInternal _GnssPntResult_default_instance_;
class SatDirCosine;
class SatDirCosineDefaultTypeInternal;
extern SatDirCosineDefaultTypeInternal _SatDirCosine_default_instance_;
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::localization::GnssPntResult* Arena::CreateMaybeMessage<::apollo::localization::GnssPntResult>(Arena*);
template<> ::apollo::localization::SatDirCosine* Arena::CreateMaybeMessage<::apollo::localization::SatDirCosine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace localization {

enum PntType : int {
  PNT_INVALID = 0,
  PNT_SPP = 1,
  PNT_PHASE_TD = 2,
  PNT_CODE_DIFF = 3,
  PNT_RTK_FLOAT = 4,
  PNT_RTK_FIXED = 5
};
bool PntType_IsValid(int value);
constexpr PntType PntType_MIN = PNT_INVALID;
constexpr PntType PntType_MAX = PNT_RTK_FIXED;
constexpr int PntType_ARRAYSIZE = PntType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PntType_descriptor();
template<typename T>
inline const std::string& PntType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PntType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PntType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PntType_descriptor(), enum_t_value);
}
inline bool PntType_Parse(
    const std::string& name, PntType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PntType>(
    PntType_descriptor(), name, value);
}
// ===================================================================

class SatDirCosine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.localization.SatDirCosine) */ {
 public:
  SatDirCosine();
  virtual ~SatDirCosine();

  SatDirCosine(const SatDirCosine& from);
  SatDirCosine(SatDirCosine&& from) noexcept
    : SatDirCosine() {
    *this = ::std::move(from);
  }

  inline SatDirCosine& operator=(const SatDirCosine& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatDirCosine& operator=(SatDirCosine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SatDirCosine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SatDirCosine* internal_default_instance() {
    return reinterpret_cast<const SatDirCosine*>(
               &_SatDirCosine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SatDirCosine& a, SatDirCosine& b) {
    a.Swap(&b);
  }
  inline void Swap(SatDirCosine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SatDirCosine* New() const final {
    return CreateMaybeMessage<SatDirCosine>(nullptr);
  }

  SatDirCosine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SatDirCosine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SatDirCosine& from);
  void MergeFrom(const SatDirCosine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SatDirCosine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.localization.SatDirCosine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto);
    return ::descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSatPrnFieldNumber = 1,
    kSatSysFieldNumber = 2,
    kCosineXFieldNumber = 3,
    kCosineYFieldNumber = 4,
    kCosineZFieldNumber = 5,
  };
  // optional uint32 sat_prn = 1;
  bool has_sat_prn() const;
  private:
  bool _internal_has_sat_prn() const;
  public:
  void clear_sat_prn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn() const;
  void set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sat_prn() const;
  void _internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sat_sys = 2;
  bool has_sat_sys() const;
  private:
  bool _internal_has_sat_sys() const;
  public:
  void clear_sat_sys();
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_sys() const;
  void set_sat_sys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sat_sys() const;
  void _internal_set_sat_sys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double cosine_x = 3;
  bool has_cosine_x() const;
  private:
  bool _internal_has_cosine_x() const;
  public:
  void clear_cosine_x();
  double cosine_x() const;
  void set_cosine_x(double value);
  private:
  double _internal_cosine_x() const;
  void _internal_set_cosine_x(double value);
  public:

  // optional double cosine_y = 4;
  bool has_cosine_y() const;
  private:
  bool _internal_has_cosine_y() const;
  public:
  void clear_cosine_y();
  double cosine_y() const;
  void set_cosine_y(double value);
  private:
  double _internal_cosine_y() const;
  void _internal_set_cosine_y(double value);
  public:

  // optional double cosine_z = 5;
  bool has_cosine_z() const;
  private:
  bool _internal_has_cosine_z() const;
  public:
  void clear_cosine_z();
  double cosine_z() const;
  void set_cosine_z(double value);
  private:
  double _internal_cosine_z() const;
  void _internal_set_cosine_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.localization.SatDirCosine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_sys_;
  double cosine_x_;
  double cosine_y_;
  double cosine_z_;
  friend struct ::TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto;
};
// -------------------------------------------------------------------

class GnssPntResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.localization.GnssPntResult) */ {
 public:
  GnssPntResult();
  virtual ~GnssPntResult();

  GnssPntResult(const GnssPntResult& from);
  GnssPntResult(GnssPntResult&& from) noexcept
    : GnssPntResult() {
    *this = ::std::move(from);
  }

  inline GnssPntResult& operator=(const GnssPntResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssPntResult& operator=(GnssPntResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssPntResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssPntResult* internal_default_instance() {
    return reinterpret_cast<const GnssPntResult*>(
               &_GnssPntResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GnssPntResult& a, GnssPntResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssPntResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssPntResult* New() const final {
    return CreateMaybeMessage<GnssPntResult>(nullptr);
  }

  GnssPntResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssPntResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssPntResult& from);
  void MergeFrom(const GnssPntResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssPntResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.localization.GnssPntResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto);
    return ::descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSatDirCosineFieldNumber = 19,
    kReceiverIdFieldNumber = 1,
    kGnssWeekFieldNumber = 3,
    kGnssSecondSFieldNumber = 4,
    kPosXMFieldNumber = 6,
    kPosYMFieldNumber = 7,
    kPosZMFieldNumber = 8,
    kStdPosXMFieldNumber = 9,
    kStdPosYMFieldNumber = 10,
    kStdPosZMFieldNumber = 11,
    kPntTypeFieldNumber = 5,
    kSovledSatNumFieldNumber = 18,
    kVelXMFieldNumber = 12,
    kVelYMFieldNumber = 13,
    kVelZMFieldNumber = 14,
    kStdVelXMFieldNumber = 15,
    kStdVelYMFieldNumber = 16,
    kStdVelZMFieldNumber = 17,
    kPdopFieldNumber = 20,
    kHdopFieldNumber = 21,
    kVdopFieldNumber = 22,
    kTimeTypeFieldNumber = 2,
  };
  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  int sat_dir_cosine_size() const;
  private:
  int _internal_sat_dir_cosine_size() const;
  public:
  void clear_sat_dir_cosine();
  ::apollo::localization::SatDirCosine* mutable_sat_dir_cosine(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::localization::SatDirCosine >*
      mutable_sat_dir_cosine();
  private:
  const ::apollo::localization::SatDirCosine& _internal_sat_dir_cosine(int index) const;
  ::apollo::localization::SatDirCosine* _internal_add_sat_dir_cosine();
  public:
  const ::apollo::localization::SatDirCosine& sat_dir_cosine(int index) const;
  ::apollo::localization::SatDirCosine* add_sat_dir_cosine();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::localization::SatDirCosine >&
      sat_dir_cosine() const;

  // optional uint32 receiver_id = 1;
  bool has_receiver_id() const;
  private:
  bool _internal_has_receiver_id() const;
  public:
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gnss_week = 3;
  bool has_gnss_week() const;
  private:
  bool _internal_has_gnss_week() const;
  public:
  void clear_gnss_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gnss_week() const;
  void set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gnss_week() const;
  void _internal_set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double gnss_second_s = 4;
  bool has_gnss_second_s() const;
  private:
  bool _internal_has_gnss_second_s() const;
  public:
  void clear_gnss_second_s();
  double gnss_second_s() const;
  void set_gnss_second_s(double value);
  private:
  double _internal_gnss_second_s() const;
  void _internal_set_gnss_second_s(double value);
  public:

  // optional double pos_x_m = 6;
  bool has_pos_x_m() const;
  private:
  bool _internal_has_pos_x_m() const;
  public:
  void clear_pos_x_m();
  double pos_x_m() const;
  void set_pos_x_m(double value);
  private:
  double _internal_pos_x_m() const;
  void _internal_set_pos_x_m(double value);
  public:

  // optional double pos_y_m = 7;
  bool has_pos_y_m() const;
  private:
  bool _internal_has_pos_y_m() const;
  public:
  void clear_pos_y_m();
  double pos_y_m() const;
  void set_pos_y_m(double value);
  private:
  double _internal_pos_y_m() const;
  void _internal_set_pos_y_m(double value);
  public:

  // optional double pos_z_m = 8;
  bool has_pos_z_m() const;
  private:
  bool _internal_has_pos_z_m() const;
  public:
  void clear_pos_z_m();
  double pos_z_m() const;
  void set_pos_z_m(double value);
  private:
  double _internal_pos_z_m() const;
  void _internal_set_pos_z_m(double value);
  public:

  // optional double std_pos_x_m = 9;
  bool has_std_pos_x_m() const;
  private:
  bool _internal_has_std_pos_x_m() const;
  public:
  void clear_std_pos_x_m();
  double std_pos_x_m() const;
  void set_std_pos_x_m(double value);
  private:
  double _internal_std_pos_x_m() const;
  void _internal_set_std_pos_x_m(double value);
  public:

  // optional double std_pos_y_m = 10;
  bool has_std_pos_y_m() const;
  private:
  bool _internal_has_std_pos_y_m() const;
  public:
  void clear_std_pos_y_m();
  double std_pos_y_m() const;
  void set_std_pos_y_m(double value);
  private:
  double _internal_std_pos_y_m() const;
  void _internal_set_std_pos_y_m(double value);
  public:

  // optional double std_pos_z_m = 11;
  bool has_std_pos_z_m() const;
  private:
  bool _internal_has_std_pos_z_m() const;
  public:
  void clear_std_pos_z_m();
  double std_pos_z_m() const;
  void set_std_pos_z_m(double value);
  private:
  double _internal_std_pos_z_m() const;
  void _internal_set_std_pos_z_m(double value);
  public:

  // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
  bool has_pnt_type() const;
  private:
  bool _internal_has_pnt_type() const;
  public:
  void clear_pnt_type();
  ::apollo::localization::PntType pnt_type() const;
  void set_pnt_type(::apollo::localization::PntType value);
  private:
  ::apollo::localization::PntType _internal_pnt_type() const;
  void _internal_set_pnt_type(::apollo::localization::PntType value);
  public:

  // optional uint32 sovled_sat_num = 18;
  bool has_sovled_sat_num() const;
  private:
  bool _internal_has_sovled_sat_num() const;
  public:
  void clear_sovled_sat_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sovled_sat_num() const;
  void set_sovled_sat_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sovled_sat_num() const;
  void _internal_set_sovled_sat_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double vel_x_m = 12;
  bool has_vel_x_m() const;
  private:
  bool _internal_has_vel_x_m() const;
  public:
  void clear_vel_x_m();
  double vel_x_m() const;
  void set_vel_x_m(double value);
  private:
  double _internal_vel_x_m() const;
  void _internal_set_vel_x_m(double value);
  public:

  // optional double vel_y_m = 13;
  bool has_vel_y_m() const;
  private:
  bool _internal_has_vel_y_m() const;
  public:
  void clear_vel_y_m();
  double vel_y_m() const;
  void set_vel_y_m(double value);
  private:
  double _internal_vel_y_m() const;
  void _internal_set_vel_y_m(double value);
  public:

  // optional double vel_z_m = 14;
  bool has_vel_z_m() const;
  private:
  bool _internal_has_vel_z_m() const;
  public:
  void clear_vel_z_m();
  double vel_z_m() const;
  void set_vel_z_m(double value);
  private:
  double _internal_vel_z_m() const;
  void _internal_set_vel_z_m(double value);
  public:

  // optional double std_vel_x_m = 15;
  bool has_std_vel_x_m() const;
  private:
  bool _internal_has_std_vel_x_m() const;
  public:
  void clear_std_vel_x_m();
  double std_vel_x_m() const;
  void set_std_vel_x_m(double value);
  private:
  double _internal_std_vel_x_m() const;
  void _internal_set_std_vel_x_m(double value);
  public:

  // optional double std_vel_y_m = 16;
  bool has_std_vel_y_m() const;
  private:
  bool _internal_has_std_vel_y_m() const;
  public:
  void clear_std_vel_y_m();
  double std_vel_y_m() const;
  void set_std_vel_y_m(double value);
  private:
  double _internal_std_vel_y_m() const;
  void _internal_set_std_vel_y_m(double value);
  public:

  // optional double std_vel_z_m = 17;
  bool has_std_vel_z_m() const;
  private:
  bool _internal_has_std_vel_z_m() const;
  public:
  void clear_std_vel_z_m();
  double std_vel_z_m() const;
  void set_std_vel_z_m(double value);
  private:
  double _internal_std_vel_z_m() const;
  void _internal_set_std_vel_z_m(double value);
  public:

  // optional double pdop = 20;
  bool has_pdop() const;
  private:
  bool _internal_has_pdop() const;
  public:
  void clear_pdop();
  double pdop() const;
  void set_pdop(double value);
  private:
  double _internal_pdop() const;
  void _internal_set_pdop(double value);
  public:

  // optional double hdop = 21;
  bool has_hdop() const;
  private:
  bool _internal_has_hdop() const;
  public:
  void clear_hdop();
  double hdop() const;
  void set_hdop(double value);
  private:
  double _internal_hdop() const;
  void _internal_set_hdop(double value);
  public:

  // optional double vdop = 22;
  bool has_vdop() const;
  private:
  bool _internal_has_vdop() const;
  public:
  void clear_vdop();
  double vdop() const;
  void set_vdop(double value);
  private:
  double _internal_vdop() const;
  void _internal_set_vdop(double value);
  public:

  // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
  bool has_time_type() const;
  private:
  bool _internal_has_time_type() const;
  public:
  void clear_time_type();
  ::apollo::drivers::gnss::GnssTimeType time_type() const;
  void set_time_type(::apollo::drivers::gnss::GnssTimeType value);
  private:
  ::apollo::drivers::gnss::GnssTimeType _internal_time_type() const;
  void _internal_set_time_type(::apollo::drivers::gnss::GnssTimeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.localization.GnssPntResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::localization::SatDirCosine > sat_dir_cosine_;
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gnss_week_;
  double gnss_second_s_;
  double pos_x_m_;
  double pos_y_m_;
  double pos_z_m_;
  double std_pos_x_m_;
  double std_pos_y_m_;
  double std_pos_z_m_;
  int pnt_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sovled_sat_num_;
  double vel_x_m_;
  double vel_y_m_;
  double vel_z_m_;
  double std_vel_x_m_;
  double std_vel_y_m_;
  double std_vel_z_m_;
  double pdop_;
  double hdop_;
  double vdop_;
  int time_type_;
  friend struct ::TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SatDirCosine

// optional uint32 sat_prn = 1;
inline bool SatDirCosine::_internal_has_sat_prn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SatDirCosine::has_sat_prn() const {
  return _internal_has_sat_prn();
}
inline void SatDirCosine::clear_sat_prn() {
  sat_prn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatDirCosine::_internal_sat_prn() const {
  return sat_prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatDirCosine::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.sat_prn)
  return _internal_sat_prn();
}
inline void SatDirCosine::_internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sat_prn_ = value;
}
inline void SatDirCosine::set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sat_prn(value);
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.sat_prn)
}

// optional uint32 sat_sys = 2;
inline bool SatDirCosine::_internal_has_sat_sys() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SatDirCosine::has_sat_sys() const {
  return _internal_has_sat_sys();
}
inline void SatDirCosine::clear_sat_sys() {
  sat_sys_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatDirCosine::_internal_sat_sys() const {
  return sat_sys_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatDirCosine::sat_sys() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.sat_sys)
  return _internal_sat_sys();
}
inline void SatDirCosine::_internal_set_sat_sys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sat_sys_ = value;
}
inline void SatDirCosine::set_sat_sys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sat_sys(value);
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.sat_sys)
}

// optional double cosine_x = 3;
inline bool SatDirCosine::_internal_has_cosine_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SatDirCosine::has_cosine_x() const {
  return _internal_has_cosine_x();
}
inline void SatDirCosine::clear_cosine_x() {
  cosine_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SatDirCosine::_internal_cosine_x() const {
  return cosine_x_;
}
inline double SatDirCosine::cosine_x() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_x)
  return _internal_cosine_x();
}
inline void SatDirCosine::_internal_set_cosine_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  cosine_x_ = value;
}
inline void SatDirCosine::set_cosine_x(double value) {
  _internal_set_cosine_x(value);
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_x)
}

// optional double cosine_y = 4;
inline bool SatDirCosine::_internal_has_cosine_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SatDirCosine::has_cosine_y() const {
  return _internal_has_cosine_y();
}
inline void SatDirCosine::clear_cosine_y() {
  cosine_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SatDirCosine::_internal_cosine_y() const {
  return cosine_y_;
}
inline double SatDirCosine::cosine_y() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_y)
  return _internal_cosine_y();
}
inline void SatDirCosine::_internal_set_cosine_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  cosine_y_ = value;
}
inline void SatDirCosine::set_cosine_y(double value) {
  _internal_set_cosine_y(value);
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_y)
}

// optional double cosine_z = 5;
inline bool SatDirCosine::_internal_has_cosine_z() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SatDirCosine::has_cosine_z() const {
  return _internal_has_cosine_z();
}
inline void SatDirCosine::clear_cosine_z() {
  cosine_z_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SatDirCosine::_internal_cosine_z() const {
  return cosine_z_;
}
inline double SatDirCosine::cosine_z() const {
  // @@protoc_insertion_point(field_get:apollo.localization.SatDirCosine.cosine_z)
  return _internal_cosine_z();
}
inline void SatDirCosine::_internal_set_cosine_z(double value) {
  _has_bits_[0] |= 0x00000010u;
  cosine_z_ = value;
}
inline void SatDirCosine::set_cosine_z(double value) {
  _internal_set_cosine_z(value);
  // @@protoc_insertion_point(field_set:apollo.localization.SatDirCosine.cosine_z)
}

// -------------------------------------------------------------------

// GnssPntResult

// optional uint32 receiver_id = 1;
inline bool GnssPntResult::_internal_has_receiver_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GnssPntResult::has_receiver_id() const {
  return _internal_has_receiver_id();
}
inline void GnssPntResult::clear_receiver_id() {
  receiver_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssPntResult::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssPntResult::receiver_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.receiver_id)
  return _internal_receiver_id();
}
inline void GnssPntResult::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_id_ = value;
}
inline void GnssPntResult::set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.receiver_id)
}

// optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
inline bool GnssPntResult::_internal_has_time_type() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool GnssPntResult::has_time_type() const {
  return _internal_has_time_type();
}
inline void GnssPntResult::clear_time_type() {
  time_type_ = 1;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::apollo::drivers::gnss::GnssTimeType GnssPntResult::_internal_time_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(time_type_);
}
inline ::apollo::drivers::gnss::GnssTimeType GnssPntResult::time_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.time_type)
  return _internal_time_type();
}
inline void GnssPntResult::_internal_set_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  time_type_ = value;
}
inline void GnssPntResult::set_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  _internal_set_time_type(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.time_type)
}

// optional uint32 gnss_week = 3;
inline bool GnssPntResult::_internal_has_gnss_week() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GnssPntResult::has_gnss_week() const {
  return _internal_has_gnss_week();
}
inline void GnssPntResult::clear_gnss_week() {
  gnss_week_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssPntResult::_internal_gnss_week() const {
  return gnss_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssPntResult::gnss_week() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.gnss_week)
  return _internal_gnss_week();
}
inline void GnssPntResult::_internal_set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gnss_week_ = value;
}
inline void GnssPntResult::set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gnss_week(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.gnss_week)
}

// optional double gnss_second_s = 4;
inline bool GnssPntResult::_internal_has_gnss_second_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GnssPntResult::has_gnss_second_s() const {
  return _internal_has_gnss_second_s();
}
inline void GnssPntResult::clear_gnss_second_s() {
  gnss_second_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GnssPntResult::_internal_gnss_second_s() const {
  return gnss_second_s_;
}
inline double GnssPntResult::gnss_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.gnss_second_s)
  return _internal_gnss_second_s();
}
inline void GnssPntResult::_internal_set_gnss_second_s(double value) {
  _has_bits_[0] |= 0x00000004u;
  gnss_second_s_ = value;
}
inline void GnssPntResult::set_gnss_second_s(double value) {
  _internal_set_gnss_second_s(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.gnss_second_s)
}

// optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
inline bool GnssPntResult::_internal_has_pnt_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GnssPntResult::has_pnt_type() const {
  return _internal_has_pnt_type();
}
inline void GnssPntResult::clear_pnt_type() {
  pnt_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::localization::PntType GnssPntResult::_internal_pnt_type() const {
  return static_cast< ::apollo::localization::PntType >(pnt_type_);
}
inline ::apollo::localization::PntType GnssPntResult::pnt_type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pnt_type)
  return _internal_pnt_type();
}
inline void GnssPntResult::_internal_set_pnt_type(::apollo::localization::PntType value) {
  assert(::apollo::localization::PntType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  pnt_type_ = value;
}
inline void GnssPntResult::set_pnt_type(::apollo::localization::PntType value) {
  _internal_set_pnt_type(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pnt_type)
}

// optional double pos_x_m = 6;
inline bool GnssPntResult::_internal_has_pos_x_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GnssPntResult::has_pos_x_m() const {
  return _internal_has_pos_x_m();
}
inline void GnssPntResult::clear_pos_x_m() {
  pos_x_m_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GnssPntResult::_internal_pos_x_m() const {
  return pos_x_m_;
}
inline double GnssPntResult::pos_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_x_m)
  return _internal_pos_x_m();
}
inline void GnssPntResult::_internal_set_pos_x_m(double value) {
  _has_bits_[0] |= 0x00000008u;
  pos_x_m_ = value;
}
inline void GnssPntResult::set_pos_x_m(double value) {
  _internal_set_pos_x_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_x_m)
}

// optional double pos_y_m = 7;
inline bool GnssPntResult::_internal_has_pos_y_m() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GnssPntResult::has_pos_y_m() const {
  return _internal_has_pos_y_m();
}
inline void GnssPntResult::clear_pos_y_m() {
  pos_y_m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GnssPntResult::_internal_pos_y_m() const {
  return pos_y_m_;
}
inline double GnssPntResult::pos_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_y_m)
  return _internal_pos_y_m();
}
inline void GnssPntResult::_internal_set_pos_y_m(double value) {
  _has_bits_[0] |= 0x00000010u;
  pos_y_m_ = value;
}
inline void GnssPntResult::set_pos_y_m(double value) {
  _internal_set_pos_y_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_y_m)
}

// optional double pos_z_m = 8;
inline bool GnssPntResult::_internal_has_pos_z_m() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GnssPntResult::has_pos_z_m() const {
  return _internal_has_pos_z_m();
}
inline void GnssPntResult::clear_pos_z_m() {
  pos_z_m_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GnssPntResult::_internal_pos_z_m() const {
  return pos_z_m_;
}
inline double GnssPntResult::pos_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pos_z_m)
  return _internal_pos_z_m();
}
inline void GnssPntResult::_internal_set_pos_z_m(double value) {
  _has_bits_[0] |= 0x00000020u;
  pos_z_m_ = value;
}
inline void GnssPntResult::set_pos_z_m(double value) {
  _internal_set_pos_z_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pos_z_m)
}

// optional double std_pos_x_m = 9;
inline bool GnssPntResult::_internal_has_std_pos_x_m() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GnssPntResult::has_std_pos_x_m() const {
  return _internal_has_std_pos_x_m();
}
inline void GnssPntResult::clear_std_pos_x_m() {
  std_pos_x_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double GnssPntResult::_internal_std_pos_x_m() const {
  return std_pos_x_m_;
}
inline double GnssPntResult::std_pos_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_x_m)
  return _internal_std_pos_x_m();
}
inline void GnssPntResult::_internal_set_std_pos_x_m(double value) {
  _has_bits_[0] |= 0x00000040u;
  std_pos_x_m_ = value;
}
inline void GnssPntResult::set_std_pos_x_m(double value) {
  _internal_set_std_pos_x_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_x_m)
}

// optional double std_pos_y_m = 10;
inline bool GnssPntResult::_internal_has_std_pos_y_m() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GnssPntResult::has_std_pos_y_m() const {
  return _internal_has_std_pos_y_m();
}
inline void GnssPntResult::clear_std_pos_y_m() {
  std_pos_y_m_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double GnssPntResult::_internal_std_pos_y_m() const {
  return std_pos_y_m_;
}
inline double GnssPntResult::std_pos_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_y_m)
  return _internal_std_pos_y_m();
}
inline void GnssPntResult::_internal_set_std_pos_y_m(double value) {
  _has_bits_[0] |= 0x00000080u;
  std_pos_y_m_ = value;
}
inline void GnssPntResult::set_std_pos_y_m(double value) {
  _internal_set_std_pos_y_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_y_m)
}

// optional double std_pos_z_m = 11;
inline bool GnssPntResult::_internal_has_std_pos_z_m() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GnssPntResult::has_std_pos_z_m() const {
  return _internal_has_std_pos_z_m();
}
inline void GnssPntResult::clear_std_pos_z_m() {
  std_pos_z_m_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double GnssPntResult::_internal_std_pos_z_m() const {
  return std_pos_z_m_;
}
inline double GnssPntResult::std_pos_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_pos_z_m)
  return _internal_std_pos_z_m();
}
inline void GnssPntResult::_internal_set_std_pos_z_m(double value) {
  _has_bits_[0] |= 0x00000100u;
  std_pos_z_m_ = value;
}
inline void GnssPntResult::set_std_pos_z_m(double value) {
  _internal_set_std_pos_z_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_pos_z_m)
}

// optional double vel_x_m = 12;
inline bool GnssPntResult::_internal_has_vel_x_m() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GnssPntResult::has_vel_x_m() const {
  return _internal_has_vel_x_m();
}
inline void GnssPntResult::clear_vel_x_m() {
  vel_x_m_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double GnssPntResult::_internal_vel_x_m() const {
  return vel_x_m_;
}
inline double GnssPntResult::vel_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_x_m)
  return _internal_vel_x_m();
}
inline void GnssPntResult::_internal_set_vel_x_m(double value) {
  _has_bits_[0] |= 0x00000800u;
  vel_x_m_ = value;
}
inline void GnssPntResult::set_vel_x_m(double value) {
  _internal_set_vel_x_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_x_m)
}

// optional double vel_y_m = 13;
inline bool GnssPntResult::_internal_has_vel_y_m() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GnssPntResult::has_vel_y_m() const {
  return _internal_has_vel_y_m();
}
inline void GnssPntResult::clear_vel_y_m() {
  vel_y_m_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double GnssPntResult::_internal_vel_y_m() const {
  return vel_y_m_;
}
inline double GnssPntResult::vel_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_y_m)
  return _internal_vel_y_m();
}
inline void GnssPntResult::_internal_set_vel_y_m(double value) {
  _has_bits_[0] |= 0x00001000u;
  vel_y_m_ = value;
}
inline void GnssPntResult::set_vel_y_m(double value) {
  _internal_set_vel_y_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_y_m)
}

// optional double vel_z_m = 14;
inline bool GnssPntResult::_internal_has_vel_z_m() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GnssPntResult::has_vel_z_m() const {
  return _internal_has_vel_z_m();
}
inline void GnssPntResult::clear_vel_z_m() {
  vel_z_m_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double GnssPntResult::_internal_vel_z_m() const {
  return vel_z_m_;
}
inline double GnssPntResult::vel_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vel_z_m)
  return _internal_vel_z_m();
}
inline void GnssPntResult::_internal_set_vel_z_m(double value) {
  _has_bits_[0] |= 0x00002000u;
  vel_z_m_ = value;
}
inline void GnssPntResult::set_vel_z_m(double value) {
  _internal_set_vel_z_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vel_z_m)
}

// optional double std_vel_x_m = 15;
inline bool GnssPntResult::_internal_has_std_vel_x_m() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool GnssPntResult::has_std_vel_x_m() const {
  return _internal_has_std_vel_x_m();
}
inline void GnssPntResult::clear_std_vel_x_m() {
  std_vel_x_m_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double GnssPntResult::_internal_std_vel_x_m() const {
  return std_vel_x_m_;
}
inline double GnssPntResult::std_vel_x_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_x_m)
  return _internal_std_vel_x_m();
}
inline void GnssPntResult::_internal_set_std_vel_x_m(double value) {
  _has_bits_[0] |= 0x00004000u;
  std_vel_x_m_ = value;
}
inline void GnssPntResult::set_std_vel_x_m(double value) {
  _internal_set_std_vel_x_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_x_m)
}

// optional double std_vel_y_m = 16;
inline bool GnssPntResult::_internal_has_std_vel_y_m() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool GnssPntResult::has_std_vel_y_m() const {
  return _internal_has_std_vel_y_m();
}
inline void GnssPntResult::clear_std_vel_y_m() {
  std_vel_y_m_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double GnssPntResult::_internal_std_vel_y_m() const {
  return std_vel_y_m_;
}
inline double GnssPntResult::std_vel_y_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_y_m)
  return _internal_std_vel_y_m();
}
inline void GnssPntResult::_internal_set_std_vel_y_m(double value) {
  _has_bits_[0] |= 0x00008000u;
  std_vel_y_m_ = value;
}
inline void GnssPntResult::set_std_vel_y_m(double value) {
  _internal_set_std_vel_y_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_y_m)
}

// optional double std_vel_z_m = 17;
inline bool GnssPntResult::_internal_has_std_vel_z_m() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool GnssPntResult::has_std_vel_z_m() const {
  return _internal_has_std_vel_z_m();
}
inline void GnssPntResult::clear_std_vel_z_m() {
  std_vel_z_m_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double GnssPntResult::_internal_std_vel_z_m() const {
  return std_vel_z_m_;
}
inline double GnssPntResult::std_vel_z_m() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.std_vel_z_m)
  return _internal_std_vel_z_m();
}
inline void GnssPntResult::_internal_set_std_vel_z_m(double value) {
  _has_bits_[0] |= 0x00010000u;
  std_vel_z_m_ = value;
}
inline void GnssPntResult::set_std_vel_z_m(double value) {
  _internal_set_std_vel_z_m(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.std_vel_z_m)
}

// optional uint32 sovled_sat_num = 18;
inline bool GnssPntResult::_internal_has_sovled_sat_num() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GnssPntResult::has_sovled_sat_num() const {
  return _internal_has_sovled_sat_num();
}
inline void GnssPntResult::clear_sovled_sat_num() {
  sovled_sat_num_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssPntResult::_internal_sovled_sat_num() const {
  return sovled_sat_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssPntResult::sovled_sat_num() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.sovled_sat_num)
  return _internal_sovled_sat_num();
}
inline void GnssPntResult::_internal_set_sovled_sat_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  sovled_sat_num_ = value;
}
inline void GnssPntResult::set_sovled_sat_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sovled_sat_num(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.sovled_sat_num)
}

// repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
inline int GnssPntResult::_internal_sat_dir_cosine_size() const {
  return sat_dir_cosine_.size();
}
inline int GnssPntResult::sat_dir_cosine_size() const {
  return _internal_sat_dir_cosine_size();
}
inline void GnssPntResult::clear_sat_dir_cosine() {
  sat_dir_cosine_.Clear();
}
inline ::apollo::localization::SatDirCosine* GnssPntResult::mutable_sat_dir_cosine(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::localization::SatDirCosine >*
GnssPntResult::mutable_sat_dir_cosine() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.GnssPntResult.sat_dir_cosine)
  return &sat_dir_cosine_;
}
inline const ::apollo::localization::SatDirCosine& GnssPntResult::_internal_sat_dir_cosine(int index) const {
  return sat_dir_cosine_.Get(index);
}
inline const ::apollo::localization::SatDirCosine& GnssPntResult::sat_dir_cosine(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.sat_dir_cosine)
  return _internal_sat_dir_cosine(index);
}
inline ::apollo::localization::SatDirCosine* GnssPntResult::_internal_add_sat_dir_cosine() {
  return sat_dir_cosine_.Add();
}
inline ::apollo::localization::SatDirCosine* GnssPntResult::add_sat_dir_cosine() {
  // @@protoc_insertion_point(field_add:apollo.localization.GnssPntResult.sat_dir_cosine)
  return _internal_add_sat_dir_cosine();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::localization::SatDirCosine >&
GnssPntResult::sat_dir_cosine() const {
  // @@protoc_insertion_point(field_list:apollo.localization.GnssPntResult.sat_dir_cosine)
  return sat_dir_cosine_;
}

// optional double pdop = 20;
inline bool GnssPntResult::_internal_has_pdop() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool GnssPntResult::has_pdop() const {
  return _internal_has_pdop();
}
inline void GnssPntResult::clear_pdop() {
  pdop_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double GnssPntResult::_internal_pdop() const {
  return pdop_;
}
inline double GnssPntResult::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.pdop)
  return _internal_pdop();
}
inline void GnssPntResult::_internal_set_pdop(double value) {
  _has_bits_[0] |= 0x00020000u;
  pdop_ = value;
}
inline void GnssPntResult::set_pdop(double value) {
  _internal_set_pdop(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.pdop)
}

// optional double hdop = 21;
inline bool GnssPntResult::_internal_has_hdop() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool GnssPntResult::has_hdop() const {
  return _internal_has_hdop();
}
inline void GnssPntResult::clear_hdop() {
  hdop_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double GnssPntResult::_internal_hdop() const {
  return hdop_;
}
inline double GnssPntResult::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.hdop)
  return _internal_hdop();
}
inline void GnssPntResult::_internal_set_hdop(double value) {
  _has_bits_[0] |= 0x00040000u;
  hdop_ = value;
}
inline void GnssPntResult::set_hdop(double value) {
  _internal_set_hdop(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.hdop)
}

// optional double vdop = 22;
inline bool GnssPntResult::_internal_has_vdop() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool GnssPntResult::has_vdop() const {
  return _internal_has_vdop();
}
inline void GnssPntResult::clear_vdop() {
  vdop_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double GnssPntResult::_internal_vdop() const {
  return vdop_;
}
inline double GnssPntResult::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.localization.GnssPntResult.vdop)
  return _internal_vdop();
}
inline void GnssPntResult::_internal_set_vdop(double value) {
  _has_bits_[0] |= 0x00080000u;
  vdop_ = value;
}
inline void GnssPntResult::set_vdop(double value) {
  _internal_set_vdop(value);
  // @@protoc_insertion_point(field_set:apollo.localization.GnssPntResult.vdop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::localization::PntType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::localization::PntType>() {
  return ::apollo::localization::PntType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto
