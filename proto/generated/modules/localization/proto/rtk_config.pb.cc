// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/rtk_config.proto

#include "modules/localization/proto/rtk_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace localization {
namespace rtk_config {
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo
static void InitDefaultsscc_info_Config_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::localization::rtk_config::_Config_default_instance_;
    new (ptr) ::apollo::localization::rtk_config::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::localization::rtk_config::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, localization_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, localization_status_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, imu_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, gps_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, gps_status_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, broadcast_tf_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, broadcast_tf_child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, imu_list_max_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, gps_imu_time_diff_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, map_offset_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, map_offset_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::rtk_config::Config, map_offset_z_),
  0,
  5,
  1,
  2,
  6,
  3,
  4,
  11,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::apollo::localization::rtk_config::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::localization::rtk_config::_Config_default_instance_),
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/localization/proto/rtk_config."
  "proto\022\036apollo.localization.rtk_config\"\315\002"
  "\n\006Config\022\032\n\022localization_topic\030\001 \001(\t\022!\n\031"
  "localization_status_topic\030\013 \001(\t\022\021\n\timu_t"
  "opic\030\002 \001(\t\022\021\n\tgps_topic\030\003 \001(\t\022\030\n\020gps_sta"
  "tus_topic\030\014 \001(\t\022\035\n\025broadcast_tf_frame_id"
  "\030\004 \001(\t\022#\n\033broadcast_tf_child_frame_id\030\005 "
  "\001(\t\022\031\n\021imu_list_max_size\030\006 \001(\005\022#\n\033gps_im"
  "u_time_diff_threshold\030\007 \001(\001\022\024\n\014map_offse"
  "t_x\030\010 \001(\001\022\024\n\014map_offset_y\030\t \001(\001\022\024\n\014map_o"
  "ffset_z\030\n \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_sccs[1] = {
  &scc_info_Config_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_once;
static bool descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = {
  &descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto, "modules/localization/proto/rtk_config.proto", 413,
  &descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_once, descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_sccs, descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto, file_level_service_descriptors_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto), true);
namespace apollo {
namespace localization {
namespace rtk_config {

// ===================================================================

void Config::InitAsDefaultInstance() {
}
class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_localization_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization_status_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_imu_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gps_status_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_broadcast_tf_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_broadcast_tf_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imu_list_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gps_imu_time_diff_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_map_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_map_offset_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Config::Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.rtk_config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localization_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localization_topic()) {
    localization_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localization_topic_);
  }
  imu_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imu_topic()) {
    imu_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imu_topic_);
  }
  gps_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gps_topic()) {
    gps_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gps_topic_);
  }
  broadcast_tf_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_broadcast_tf_frame_id()) {
    broadcast_tf_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.broadcast_tf_frame_id_);
  }
  broadcast_tf_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_broadcast_tf_child_frame_id()) {
    broadcast_tf_child_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.broadcast_tf_child_frame_id_);
  }
  localization_status_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localization_status_topic()) {
    localization_status_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localization_status_topic_);
  }
  gps_status_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gps_status_topic()) {
    gps_status_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gps_status_topic_);
  }
  ::memcpy(&gps_imu_time_diff_threshold_, &from.gps_imu_time_diff_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_list_max_size_) -
    reinterpret_cast<char*>(&gps_imu_time_diff_threshold_)) + sizeof(imu_list_max_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.rtk_config.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto.base);
  localization_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imu_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gps_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_tf_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_tf_child_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localization_status_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gps_status_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gps_imu_time_diff_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_list_max_size_) -
      reinterpret_cast<char*>(&gps_imu_time_diff_threshold_)) + sizeof(imu_list_max_size_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.localization.rtk_config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  localization_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imu_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gps_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_tf_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broadcast_tf_child_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localization_status_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gps_status_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.rtk_config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      localization_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      imu_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gps_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_tf_frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_tf_child_frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      localization_status_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      gps_status_topic_.ClearNonDefaultToEmptyNoArena();
    }
  }
  gps_imu_time_diff_threshold_ = 0;
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&map_offset_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imu_list_max_size_) -
        reinterpret_cast<char*>(&map_offset_x_)) + sizeof(imu_list_max_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string localization_topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_localization_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.localization_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string imu_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_imu_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.imu_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gps_topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gps_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.gps_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string broadcast_tf_frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_broadcast_tf_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.broadcast_tf_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string broadcast_tf_child_frame_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_broadcast_tf_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 imu_list_max_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_imu_list_max_size(&has_bits);
          imu_list_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gps_imu_time_diff_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_gps_imu_time_diff_threshold(&has_bits);
          gps_imu_time_diff_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double map_offset_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_map_offset_x(&has_bits);
          map_offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double map_offset_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_map_offset_y(&has_bits);
          map_offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double map_offset_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_map_offset_z(&has_bits);
          map_offset_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string localization_status_topic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_localization_status_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.localization_status_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gps_status_topic = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_gps_status_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.localization.rtk_config.Config.gps_status_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.rtk_config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string localization_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_topic().data(), static_cast<int>(this->_internal_localization_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.localization_topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_localization_topic(), target);
  }

  // optional string imu_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imu_topic().data(), static_cast<int>(this->_internal_imu_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.imu_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_imu_topic(), target);
  }

  // optional string gps_topic = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gps_topic().data(), static_cast<int>(this->_internal_gps_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.gps_topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gps_topic(), target);
  }

  // optional string broadcast_tf_frame_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_tf_frame_id().data(), static_cast<int>(this->_internal_broadcast_tf_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.broadcast_tf_frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_broadcast_tf_frame_id(), target);
  }

  // optional string broadcast_tf_child_frame_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_tf_child_frame_id().data(), static_cast<int>(this->_internal_broadcast_tf_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_broadcast_tf_child_frame_id(), target);
  }

  // optional int32 imu_list_max_size = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_imu_list_max_size(), target);
  }

  // optional double gps_imu_time_diff_threshold = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_gps_imu_time_diff_threshold(), target);
  }

  // optional double map_offset_x = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_map_offset_x(), target);
  }

  // optional double map_offset_y = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_map_offset_y(), target);
  }

  // optional double map_offset_z = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_map_offset_z(), target);
  }

  // optional string localization_status_topic = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_status_topic().data(), static_cast<int>(this->_internal_localization_status_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.localization_status_topic");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_localization_status_topic(), target);
  }

  // optional string gps_status_topic = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gps_status_topic().data(), static_cast<int>(this->_internal_gps_status_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.localization.rtk_config.Config.gps_status_topic");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_gps_status_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.rtk_config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.rtk_config.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string localization_topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_topic());
    }

    // optional string imu_topic = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imu_topic());
    }

    // optional string gps_topic = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gps_topic());
    }

    // optional string broadcast_tf_frame_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_tf_frame_id());
    }

    // optional string broadcast_tf_child_frame_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_tf_child_frame_id());
    }

    // optional string localization_status_topic = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_status_topic());
    }

    // optional string gps_status_topic = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gps_status_topic());
    }

    // optional double gps_imu_time_diff_threshold = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double map_offset_x = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double map_offset_y = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double map_offset_z = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 imu_list_max_size = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_imu_list_max_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.rtk_config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.rtk_config.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.rtk_config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.rtk_config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      localization_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localization_topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      imu_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imu_topic_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      gps_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gps_topic_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      broadcast_tf_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.broadcast_tf_frame_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      broadcast_tf_child_frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.broadcast_tf_child_frame_id_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      localization_status_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localization_status_topic_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      gps_status_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gps_status_topic_);
    }
    if (cached_has_bits & 0x00000080u) {
      gps_imu_time_diff_threshold_ = from.gps_imu_time_diff_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      map_offset_x_ = from.map_offset_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      map_offset_y_ = from.map_offset_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      map_offset_z_ = from.map_offset_z_;
    }
    if (cached_has_bits & 0x00000800u) {
      imu_list_max_size_ = from.imu_list_max_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.rtk_config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.rtk_config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  localization_topic_.Swap(&other->localization_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imu_topic_.Swap(&other->imu_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gps_topic_.Swap(&other->gps_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broadcast_tf_frame_id_.Swap(&other->broadcast_tf_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broadcast_tf_child_frame_id_.Swap(&other->broadcast_tf_child_frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  localization_status_topic_.Swap(&other->localization_status_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gps_status_topic_.Swap(&other->gps_status_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gps_imu_time_diff_threshold_, other->gps_imu_time_diff_threshold_);
  swap(map_offset_x_, other->map_offset_x_);
  swap(map_offset_y_, other->map_offset_y_);
  swap(map_offset_z_, other->map_offset_z_);
  swap(imu_list_max_size_, other->imu_list_max_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::rtk_config::Config* Arena::CreateMaybeMessage< ::apollo::localization::rtk_config::Config >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::localization::rtk_config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
