// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/gnss_pnt_result.proto

#include "modules/localization/proto/gnss_pnt_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto;
namespace apollo {
namespace localization {
class SatDirCosineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SatDirCosine> _instance;
} _SatDirCosine_default_instance_;
class GnssPntResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssPntResult> _instance;
} _GnssPntResult_default_instance_;
}  // namespace localization
}  // namespace apollo
static void InitDefaultsscc_info_GnssPntResult_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::localization::_GnssPntResult_default_instance_;
    new (ptr) ::apollo::localization::GnssPntResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::localization::GnssPntResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssPntResult_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GnssPntResult_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto}, {
      &scc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::localization::_SatDirCosine_default_instance_;
    new (ptr) ::apollo::localization::SatDirCosine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::localization::SatDirCosine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, sat_prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, sat_sys_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, cosine_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, cosine_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::SatDirCosine, cosine_z_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, time_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, gnss_week_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, gnss_second_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, pnt_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, pos_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, pos_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, pos_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, std_pos_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, std_pos_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, std_pos_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, vel_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, vel_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, vel_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, std_vel_x_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, std_vel_y_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, std_vel_z_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, sovled_sat_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, sat_dir_cosine_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, pdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, hdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::localization::GnssPntResult, vdop_),
  0,
  20,
  1,
  2,
  9,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  12,
  13,
  14,
  15,
  16,
  10,
  ~0u,
  17,
  18,
  19,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::localization::SatDirCosine)},
  { 15, 42, sizeof(::apollo::localization::GnssPntResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::localization::_SatDirCosine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::localization::_GnssPntResult_default_instance_),
};

const char descriptor_table_protodef_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/localization/proto/gnss_pnt_re"
  "sult.proto\022\023apollo.localization\0325modules"
  "/drivers/gnss/proto/gnss_raw_observation"
  ".proto\"f\n\014SatDirCosine\022\017\n\007sat_prn\030\001 \001(\r\022"
  "\017\n\007sat_sys\030\002 \001(\r\022\020\n\010cosine_x\030\003 \001(\001\022\020\n\010co"
  "sine_y\030\004 \001(\001\022\020\n\010cosine_z\030\005 \001(\001\"\254\004\n\rGnssP"
  "ntResult\022\023\n\013receiver_id\030\001 \001(\r\022>\n\ttime_ty"
  "pe\030\002 \001(\0162!.apollo.drivers.gnss.GnssTimeT"
  "ype:\010GPS_TIME\022\021\n\tgnss_week\030\003 \001(\r\022\025\n\rgnss"
  "_second_s\030\004 \001(\001\022;\n\010pnt_type\030\005 \001(\0162\034.apol"
  "lo.localization.PntType:\013PNT_INVALID\022\017\n\007"
  "pos_x_m\030\006 \001(\001\022\017\n\007pos_y_m\030\007 \001(\001\022\017\n\007pos_z_"
  "m\030\010 \001(\001\022\023\n\013std_pos_x_m\030\t \001(\001\022\023\n\013std_pos_"
  "y_m\030\n \001(\001\022\023\n\013std_pos_z_m\030\013 \001(\001\022\017\n\007vel_x_"
  "m\030\014 \001(\001\022\017\n\007vel_y_m\030\r \001(\001\022\017\n\007vel_z_m\030\016 \001("
  "\001\022\023\n\013std_vel_x_m\030\017 \001(\001\022\023\n\013std_vel_y_m\030\020 "
  "\001(\001\022\023\n\013std_vel_z_m\030\021 \001(\001\022\026\n\016sovled_sat_n"
  "um\030\022 \001(\r\0229\n\016sat_dir_cosine\030\023 \003(\0132!.apoll"
  "o.localization.SatDirCosine\022\014\n\004pdop\030\024 \001("
  "\001\022\014\n\004hdop\030\025 \001(\001\022\014\n\004vdop\030\026 \001(\001*r\n\007PntType"
  "\022\017\n\013PNT_INVALID\020\000\022\013\n\007PNT_SPP\020\001\022\020\n\014PNT_PH"
  "ASE_TD\020\002\022\021\n\rPNT_CODE_DIFF\020\003\022\021\n\rPNT_RTK_F"
  "LOAT\020\004\022\021\n\rPNT_RTK_FIXED\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_sccs[2] = {
  &scc_info_GnssPntResult_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.base,
  &scc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_once;
static bool descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto = {
  &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_initialized, descriptor_table_protodef_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto, "modules/localization/proto/gnss_pnt_result.proto", 905,
  &descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_once, descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_sccs, descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto::offsets,
  file_level_metadata_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto, 2, file_level_enum_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto, file_level_service_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto), true);
namespace apollo {
namespace localization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PntType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto);
  return file_level_enum_descriptors_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto[0];
}
bool PntType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SatDirCosine::InitAsDefaultInstance() {
}
class SatDirCosine::_Internal {
 public:
  using HasBits = decltype(std::declval<SatDirCosine>()._has_bits_);
  static void set_has_sat_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sat_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cosine_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cosine_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cosine_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SatDirCosine::SatDirCosine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.SatDirCosine)
}
SatDirCosine::SatDirCosine(const SatDirCosine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_prn_, &from.sat_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&cosine_z_) -
    reinterpret_cast<char*>(&sat_prn_)) + sizeof(cosine_z_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.SatDirCosine)
}

void SatDirCosine::SharedCtor() {
  ::memset(&sat_prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cosine_z_) -
      reinterpret_cast<char*>(&sat_prn_)) + sizeof(cosine_z_));
}

SatDirCosine::~SatDirCosine() {
  // @@protoc_insertion_point(destructor:apollo.localization.SatDirCosine)
  SharedDtor();
}

void SatDirCosine::SharedDtor() {
}

void SatDirCosine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SatDirCosine& SatDirCosine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SatDirCosine_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.base);
  return *internal_default_instance();
}


void SatDirCosine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.SatDirCosine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&sat_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cosine_z_) -
        reinterpret_cast<char*>(&sat_prn_)) + sizeof(cosine_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SatDirCosine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sat_prn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sat_prn(&has_bits);
          sat_prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sat_sys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sat_sys(&has_bits);
          sat_sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cosine_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cosine_x(&has_bits);
          cosine_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cosine_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_cosine_y(&has_bits);
          cosine_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cosine_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_cosine_z(&has_bits);
          cosine_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SatDirCosine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.SatDirCosine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sat_prn(), target);
  }

  // optional uint32 sat_sys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sat_sys(), target);
  }

  // optional double cosine_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cosine_x(), target);
  }

  // optional double cosine_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cosine_y(), target);
  }

  // optional double cosine_z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cosine_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.SatDirCosine)
  return target;
}

size_t SatDirCosine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.SatDirCosine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 sat_prn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sat_prn());
    }

    // optional uint32 sat_sys = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sat_sys());
    }

    // optional double cosine_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double cosine_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double cosine_z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SatDirCosine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.SatDirCosine)
  GOOGLE_DCHECK_NE(&from, this);
  const SatDirCosine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SatDirCosine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.SatDirCosine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.SatDirCosine)
    MergeFrom(*source);
  }
}

void SatDirCosine::MergeFrom(const SatDirCosine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.SatDirCosine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sat_prn_ = from.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      sat_sys_ = from.sat_sys_;
    }
    if (cached_has_bits & 0x00000004u) {
      cosine_x_ = from.cosine_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      cosine_y_ = from.cosine_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      cosine_z_ = from.cosine_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SatDirCosine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.SatDirCosine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatDirCosine::CopyFrom(const SatDirCosine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.SatDirCosine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatDirCosine::IsInitialized() const {
  return true;
}

void SatDirCosine::InternalSwap(SatDirCosine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sat_prn_, other->sat_prn_);
  swap(sat_sys_, other->sat_sys_);
  swap(cosine_x_, other->cosine_x_);
  swap(cosine_y_, other->cosine_y_);
  swap(cosine_z_, other->cosine_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SatDirCosine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssPntResult::InitAsDefaultInstance() {
}
class GnssPntResult::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssPntResult>()._has_bits_);
  static void set_has_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gnss_week(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gnss_second_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pnt_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pos_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pos_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_std_pos_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_std_pos_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_std_pos_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vel_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vel_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vel_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_std_vel_x_m(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_std_vel_y_m(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_std_vel_z_m(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sovled_sat_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

GnssPntResult::GnssPntResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.localization.GnssPntResult)
}
GnssPntResult::GnssPntResult(const GnssPntResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sat_dir_cosine_(from.sat_dir_cosine_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receiver_id_, &from.receiver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_type_) -
    reinterpret_cast<char*>(&receiver_id_)) + sizeof(time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.localization.GnssPntResult)
}

void GnssPntResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssPntResult_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.base);
  ::memset(&receiver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vdop_) -
      reinterpret_cast<char*>(&receiver_id_)) + sizeof(vdop_));
  time_type_ = 1;
}

GnssPntResult::~GnssPntResult() {
  // @@protoc_insertion_point(destructor:apollo.localization.GnssPntResult)
  SharedDtor();
}

void GnssPntResult::SharedDtor() {
}

void GnssPntResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssPntResult& GnssPntResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssPntResult_modules_2flocalization_2fproto_2fgnss_5fpnt_5fresult_2eproto.base);
  return *internal_default_instance();
}


void GnssPntResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.localization.GnssPntResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sat_dir_cosine_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&receiver_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&std_pos_y_m_) -
        reinterpret_cast<char*>(&receiver_id_)) + sizeof(std_pos_y_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&std_pos_z_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&std_vel_y_m_) -
        reinterpret_cast<char*>(&std_pos_z_m_)) + sizeof(std_vel_y_m_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&std_vel_z_m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vdop_) -
        reinterpret_cast<char*>(&std_vel_z_m_)) + sizeof(vdop_));
    time_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GnssPntResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 receiver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_receiver_id(&has_bits);
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::GnssTimeType_IsValid(val))) {
            _internal_set_time_type(static_cast<::apollo::drivers::gnss::GnssTimeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 gnss_week = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gnss_week(&has_bits);
          gnss_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gnss_second_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gnss_second_s(&has_bits);
          gnss_second_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::localization::PntType_IsValid(val))) {
            _internal_set_pnt_type(static_cast<::apollo::localization::PntType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double pos_x_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_pos_x_m(&has_bits);
          pos_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pos_y_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_pos_y_m(&has_bits);
          pos_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pos_z_m = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_pos_z_m(&has_bits);
          pos_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double std_pos_x_m = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_std_pos_x_m(&has_bits);
          std_pos_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double std_pos_y_m = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_std_pos_y_m(&has_bits);
          std_pos_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double std_pos_z_m = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_std_pos_z_m(&has_bits);
          std_pos_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vel_x_m = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_vel_x_m(&has_bits);
          vel_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vel_y_m = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_vel_y_m(&has_bits);
          vel_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vel_z_m = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_vel_z_m(&has_bits);
          vel_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double std_vel_x_m = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_std_vel_x_m(&has_bits);
          std_vel_x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double std_vel_y_m = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_std_vel_y_m(&has_bits);
          std_vel_y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double std_vel_z_m = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_std_vel_z_m(&has_bits);
          std_vel_z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 sovled_sat_num = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_sovled_sat_num(&has_bits);
          sovled_sat_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sat_dir_cosine(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double pdop = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_pdop(&has_bits);
          pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hdop = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_hdop(&has_bits);
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vdop = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_vdop(&has_bits);
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssPntResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.localization.GnssPntResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_receiver_id(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gnss_second_s(), target);
  }

  // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pnt_type(), target);
  }

  // optional double pos_x_m = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pos_x_m(), target);
  }

  // optional double pos_y_m = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pos_y_m(), target);
  }

  // optional double pos_z_m = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pos_z_m(), target);
  }

  // optional double std_pos_x_m = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_std_pos_x_m(), target);
  }

  // optional double std_pos_y_m = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_std_pos_y_m(), target);
  }

  // optional double std_pos_z_m = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_std_pos_z_m(), target);
  }

  // optional double vel_x_m = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_vel_x_m(), target);
  }

  // optional double vel_y_m = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_vel_y_m(), target);
  }

  // optional double vel_z_m = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_vel_z_m(), target);
  }

  // optional double std_vel_x_m = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_std_vel_x_m(), target);
  }

  // optional double std_vel_y_m = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_std_vel_y_m(), target);
  }

  // optional double std_vel_z_m = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_std_vel_z_m(), target);
  }

  // optional uint32 sovled_sat_num = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sovled_sat_num(), target);
  }

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sat_dir_cosine_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_sat_dir_cosine(i), target, stream);
  }

  // optional double pdop = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_pdop(), target);
  }

  // optional double hdop = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_hdop(), target);
  }

  // optional double vdop = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_vdop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.localization.GnssPntResult)
  return target;
}

size_t GnssPntResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.localization.GnssPntResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.localization.SatDirCosine sat_dir_cosine = 19;
  total_size += 2UL * this->_internal_sat_dir_cosine_size();
  for (const auto& msg : this->sat_dir_cosine_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 receiver_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_receiver_id());
    }

    // optional uint32 gnss_week = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double pos_x_m = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double pos_y_m = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double pos_z_m = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double std_pos_x_m = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double std_pos_y_m = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double std_pos_z_m = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional .apollo.localization.PntType pnt_type = 5 [default = PNT_INVALID];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pnt_type());
    }

    // optional uint32 sovled_sat_num = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sovled_sat_num());
    }

    // optional double vel_x_m = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double vel_y_m = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double vel_z_m = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double std_vel_x_m = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double std_vel_y_m = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double std_vel_z_m = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double pdop = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double hdop = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.drivers.gnss.GnssTimeType time_type = 2 [default = GPS_TIME];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssPntResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.localization.GnssPntResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssPntResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssPntResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.localization.GnssPntResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.localization.GnssPntResult)
    MergeFrom(*source);
  }
}

void GnssPntResult::MergeFrom(const GnssPntResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.localization.GnssPntResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sat_dir_cosine_.MergeFrom(from.sat_dir_cosine_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      receiver_id_ = from.receiver_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gnss_week_ = from.gnss_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_second_s_ = from.gnss_second_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_x_m_ = from.pos_x_m_;
    }
    if (cached_has_bits & 0x00000010u) {
      pos_y_m_ = from.pos_y_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      pos_z_m_ = from.pos_z_m_;
    }
    if (cached_has_bits & 0x00000040u) {
      std_pos_x_m_ = from.std_pos_x_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      std_pos_y_m_ = from.std_pos_y_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      std_pos_z_m_ = from.std_pos_z_m_;
    }
    if (cached_has_bits & 0x00000200u) {
      pnt_type_ = from.pnt_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      sovled_sat_num_ = from.sovled_sat_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      vel_x_m_ = from.vel_x_m_;
    }
    if (cached_has_bits & 0x00001000u) {
      vel_y_m_ = from.vel_y_m_;
    }
    if (cached_has_bits & 0x00002000u) {
      vel_z_m_ = from.vel_z_m_;
    }
    if (cached_has_bits & 0x00004000u) {
      std_vel_x_m_ = from.std_vel_x_m_;
    }
    if (cached_has_bits & 0x00008000u) {
      std_vel_y_m_ = from.std_vel_y_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      std_vel_z_m_ = from.std_vel_z_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      pdop_ = from.pdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00080000u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00100000u) {
      time_type_ = from.time_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssPntResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.localization.GnssPntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssPntResult::CopyFrom(const GnssPntResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.localization.GnssPntResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssPntResult::IsInitialized() const {
  return true;
}

void GnssPntResult::InternalSwap(GnssPntResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sat_dir_cosine_.InternalSwap(&other->sat_dir_cosine_);
  swap(receiver_id_, other->receiver_id_);
  swap(gnss_week_, other->gnss_week_);
  swap(gnss_second_s_, other->gnss_second_s_);
  swap(pos_x_m_, other->pos_x_m_);
  swap(pos_y_m_, other->pos_y_m_);
  swap(pos_z_m_, other->pos_z_m_);
  swap(std_pos_x_m_, other->std_pos_x_m_);
  swap(std_pos_y_m_, other->std_pos_y_m_);
  swap(std_pos_z_m_, other->std_pos_z_m_);
  swap(pnt_type_, other->pnt_type_);
  swap(sovled_sat_num_, other->sovled_sat_num_);
  swap(vel_x_m_, other->vel_x_m_);
  swap(vel_y_m_, other->vel_y_m_);
  swap(vel_z_m_, other->vel_z_m_);
  swap(std_vel_x_m_, other->std_vel_x_m_);
  swap(std_vel_y_m_, other->std_vel_y_m_);
  swap(std_vel_z_m_, other->std_vel_z_m_);
  swap(pdop_, other->pdop_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(time_type_, other->time_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssPntResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::localization::SatDirCosine* Arena::CreateMaybeMessage< ::apollo::localization::SatDirCosine >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::localization::SatDirCosine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::localization::GnssPntResult* Arena::CreateMaybeMessage< ::apollo::localization::GnssPntResult >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::localization::GnssPntResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
