// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/bridge/proto/udp_bridge_remote_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto;
namespace apollo {
namespace bridge {
class UDPBridgeReceiverRemoteInfo;
class UDPBridgeReceiverRemoteInfoDefaultTypeInternal;
extern UDPBridgeReceiverRemoteInfoDefaultTypeInternal _UDPBridgeReceiverRemoteInfo_default_instance_;
class UDPBridgeSenderRemoteInfo;
class UDPBridgeSenderRemoteInfoDefaultTypeInternal;
extern UDPBridgeSenderRemoteInfoDefaultTypeInternal _UDPBridgeSenderRemoteInfo_default_instance_;
}  // namespace bridge
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::bridge::UDPBridgeReceiverRemoteInfo* Arena::CreateMaybeMessage<::apollo::bridge::UDPBridgeReceiverRemoteInfo>(Arena*);
template<> ::apollo::bridge::UDPBridgeSenderRemoteInfo* Arena::CreateMaybeMessage<::apollo::bridge::UDPBridgeSenderRemoteInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace bridge {

// ===================================================================

class UDPBridgeSenderRemoteInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.bridge.UDPBridgeSenderRemoteInfo) */ {
 public:
  UDPBridgeSenderRemoteInfo();
  virtual ~UDPBridgeSenderRemoteInfo();

  UDPBridgeSenderRemoteInfo(const UDPBridgeSenderRemoteInfo& from);
  UDPBridgeSenderRemoteInfo(UDPBridgeSenderRemoteInfo&& from) noexcept
    : UDPBridgeSenderRemoteInfo() {
    *this = ::std::move(from);
  }

  inline UDPBridgeSenderRemoteInfo& operator=(const UDPBridgeSenderRemoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UDPBridgeSenderRemoteInfo& operator=(UDPBridgeSenderRemoteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UDPBridgeSenderRemoteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDPBridgeSenderRemoteInfo* internal_default_instance() {
    return reinterpret_cast<const UDPBridgeSenderRemoteInfo*>(
               &_UDPBridgeSenderRemoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UDPBridgeSenderRemoteInfo& a, UDPBridgeSenderRemoteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UDPBridgeSenderRemoteInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UDPBridgeSenderRemoteInfo* New() const final {
    return CreateMaybeMessage<UDPBridgeSenderRemoteInfo>(nullptr);
  }

  UDPBridgeSenderRemoteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UDPBridgeSenderRemoteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UDPBridgeSenderRemoteInfo& from);
  void MergeFrom(const UDPBridgeSenderRemoteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDPBridgeSenderRemoteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.bridge.UDPBridgeSenderRemoteInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto);
    return ::descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIpFieldNumber = 1,
    kProtoNameFieldNumber = 3,
    kRemotePortFieldNumber = 2,
  };
  // optional string remote_ip = 1 [default = "127.0.0.1"];
  bool has_remote_ip() const;
  private:
  bool _internal_has_remote_ip() const;
  public:
  void clear_remote_ip();
  const std::string& remote_ip() const;
  void set_remote_ip(const std::string& value);
  void set_remote_ip(std::string&& value);
  void set_remote_ip(const char* value);
  void set_remote_ip(const char* value, size_t size);
  std::string* mutable_remote_ip();
  std::string* release_remote_ip();
  void set_allocated_remote_ip(std::string* remote_ip);
  private:
  const std::string& _internal_remote_ip() const;
  void _internal_set_remote_ip(const std::string& value);
  std::string* _internal_mutable_remote_ip();
  public:

  // optional string proto_name = 3 [default = "ProtoMsgName"];
  bool has_proto_name() const;
  private:
  bool _internal_has_proto_name() const;
  public:
  void clear_proto_name();
  const std::string& proto_name() const;
  void set_proto_name(const std::string& value);
  void set_proto_name(std::string&& value);
  void set_proto_name(const char* value);
  void set_proto_name(const char* value, size_t size);
  std::string* mutable_proto_name();
  std::string* release_proto_name();
  void set_allocated_proto_name(std::string* proto_name);
  private:
  const std::string& _internal_proto_name() const;
  void _internal_set_proto_name(const std::string& value);
  std::string* _internal_mutable_proto_name();
  public:

  // optional int32 remote_port = 2 [default = 8900];
  bool has_remote_port() const;
  private:
  bool _internal_has_remote_port() const;
  public:
  void clear_remote_port();
  ::PROTOBUF_NAMESPACE_ID::int32 remote_port() const;
  void set_remote_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remote_port() const;
  void _internal_set_remote_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.bridge.UDPBridgeSenderRemoteInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_remote_ip_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_ip_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_proto_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 remote_port_;
  friend struct ::TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto;
};
// -------------------------------------------------------------------

class UDPBridgeReceiverRemoteInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.bridge.UDPBridgeReceiverRemoteInfo) */ {
 public:
  UDPBridgeReceiverRemoteInfo();
  virtual ~UDPBridgeReceiverRemoteInfo();

  UDPBridgeReceiverRemoteInfo(const UDPBridgeReceiverRemoteInfo& from);
  UDPBridgeReceiverRemoteInfo(UDPBridgeReceiverRemoteInfo&& from) noexcept
    : UDPBridgeReceiverRemoteInfo() {
    *this = ::std::move(from);
  }

  inline UDPBridgeReceiverRemoteInfo& operator=(const UDPBridgeReceiverRemoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UDPBridgeReceiverRemoteInfo& operator=(UDPBridgeReceiverRemoteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UDPBridgeReceiverRemoteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDPBridgeReceiverRemoteInfo* internal_default_instance() {
    return reinterpret_cast<const UDPBridgeReceiverRemoteInfo*>(
               &_UDPBridgeReceiverRemoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UDPBridgeReceiverRemoteInfo& a, UDPBridgeReceiverRemoteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UDPBridgeReceiverRemoteInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UDPBridgeReceiverRemoteInfo* New() const final {
    return CreateMaybeMessage<UDPBridgeReceiverRemoteInfo>(nullptr);
  }

  UDPBridgeReceiverRemoteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UDPBridgeReceiverRemoteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UDPBridgeReceiverRemoteInfo& from);
  void MergeFrom(const UDPBridgeReceiverRemoteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDPBridgeReceiverRemoteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.bridge.UDPBridgeReceiverRemoteInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto);
    return ::descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicNameFieldNumber = 1,
    kProtoNameFieldNumber = 3,
    kBindPortFieldNumber = 2,
  };
  // optional string topic_name = 1 [default = ""];
  bool has_topic_name() const;
  private:
  bool _internal_has_topic_name() const;
  public:
  void clear_topic_name();
  const std::string& topic_name() const;
  void set_topic_name(const std::string& value);
  void set_topic_name(std::string&& value);
  void set_topic_name(const char* value);
  void set_topic_name(const char* value, size_t size);
  std::string* mutable_topic_name();
  std::string* release_topic_name();
  void set_allocated_topic_name(std::string* topic_name);
  private:
  const std::string& _internal_topic_name() const;
  void _internal_set_topic_name(const std::string& value);
  std::string* _internal_mutable_topic_name();
  public:

  // optional string proto_name = 3 [default = "ProtoMsgName"];
  bool has_proto_name() const;
  private:
  bool _internal_has_proto_name() const;
  public:
  void clear_proto_name();
  const std::string& proto_name() const;
  void set_proto_name(const std::string& value);
  void set_proto_name(std::string&& value);
  void set_proto_name(const char* value);
  void set_proto_name(const char* value, size_t size);
  std::string* mutable_proto_name();
  std::string* release_proto_name();
  void set_allocated_proto_name(std::string* proto_name);
  private:
  const std::string& _internal_proto_name() const;
  void _internal_set_proto_name(const std::string& value);
  std::string* _internal_mutable_proto_name();
  public:

  // optional int32 bind_port = 2 [default = 8500];
  bool has_bind_port() const;
  private:
  bool _internal_has_bind_port() const;
  public:
  void clear_bind_port();
  ::PROTOBUF_NAMESPACE_ID::int32 bind_port() const;
  void set_bind_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bind_port() const;
  void _internal_set_bind_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.bridge.UDPBridgeReceiverRemoteInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_name_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_proto_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 bind_port_;
  friend struct ::TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UDPBridgeSenderRemoteInfo

// optional string remote_ip = 1 [default = "127.0.0.1"];
inline bool UDPBridgeSenderRemoteInfo::_internal_has_remote_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UDPBridgeSenderRemoteInfo::has_remote_ip() const {
  return _internal_has_remote_ip();
}
inline void UDPBridgeSenderRemoteInfo::clear_remote_ip() {
  remote_ip_.ClearToDefaultNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UDPBridgeSenderRemoteInfo::remote_ip() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
  return _internal_remote_ip();
}
inline void UDPBridgeSenderRemoteInfo::set_remote_ip(const std::string& value) {
  _internal_set_remote_ip(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
}
inline std::string* UDPBridgeSenderRemoteInfo::mutable_remote_ip() {
  // @@protoc_insertion_point(field_mutable:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
  return _internal_mutable_remote_ip();
}
inline const std::string& UDPBridgeSenderRemoteInfo::_internal_remote_ip() const {
  return remote_ip_.GetNoArena();
}
inline void UDPBridgeSenderRemoteInfo::_internal_set_remote_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_ip_.SetNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(), value);
}
inline void UDPBridgeSenderRemoteInfo::set_remote_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_ip_.SetNoArena(
    &::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
}
inline void UDPBridgeSenderRemoteInfo::set_remote_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  remote_ip_.SetNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
}
inline void UDPBridgeSenderRemoteInfo::set_remote_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  remote_ip_.SetNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
}
inline std::string* UDPBridgeSenderRemoteInfo::_internal_mutable_remote_ip() {
  _has_bits_[0] |= 0x00000001u;
  return remote_ip_.MutableNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
}
inline std::string* UDPBridgeSenderRemoteInfo::release_remote_ip() {
  // @@protoc_insertion_point(field_release:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
  if (!_internal_has_remote_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return remote_ip_.ReleaseNonDefaultNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
}
inline void UDPBridgeSenderRemoteInfo::set_allocated_remote_ip(std::string* remote_ip) {
  if (remote_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_ip_.SetAllocatedNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(), remote_ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip)
}

// optional int32 remote_port = 2 [default = 8900];
inline bool UDPBridgeSenderRemoteInfo::_internal_has_remote_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UDPBridgeSenderRemoteInfo::has_remote_port() const {
  return _internal_has_remote_port();
}
inline void UDPBridgeSenderRemoteInfo::clear_remote_port() {
  remote_port_ = 8900;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UDPBridgeSenderRemoteInfo::_internal_remote_port() const {
  return remote_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UDPBridgeSenderRemoteInfo::remote_port() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_port)
  return _internal_remote_port();
}
inline void UDPBridgeSenderRemoteInfo::_internal_set_remote_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  remote_port_ = value;
}
inline void UDPBridgeSenderRemoteInfo::set_remote_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.UDPBridgeSenderRemoteInfo.remote_port)
}

// optional string proto_name = 3 [default = "ProtoMsgName"];
inline bool UDPBridgeSenderRemoteInfo::_internal_has_proto_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UDPBridgeSenderRemoteInfo::has_proto_name() const {
  return _internal_has_proto_name();
}
inline void UDPBridgeSenderRemoteInfo::clear_proto_name() {
  proto_name_.ClearToDefaultNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UDPBridgeSenderRemoteInfo::proto_name() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
  return _internal_proto_name();
}
inline void UDPBridgeSenderRemoteInfo::set_proto_name(const std::string& value) {
  _internal_set_proto_name(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
}
inline std::string* UDPBridgeSenderRemoteInfo::mutable_proto_name() {
  // @@protoc_insertion_point(field_mutable:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
  return _internal_mutable_proto_name();
}
inline const std::string& UDPBridgeSenderRemoteInfo::_internal_proto_name() const {
  return proto_name_.GetNoArena();
}
inline void UDPBridgeSenderRemoteInfo::_internal_set_proto_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), value);
}
inline void UDPBridgeSenderRemoteInfo::set_proto_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(
    &::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
}
inline void UDPBridgeSenderRemoteInfo::set_proto_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
}
inline void UDPBridgeSenderRemoteInfo::set_proto_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
}
inline std::string* UDPBridgeSenderRemoteInfo::_internal_mutable_proto_name() {
  _has_bits_[0] |= 0x00000002u;
  return proto_name_.MutableNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
}
inline std::string* UDPBridgeSenderRemoteInfo::release_proto_name() {
  // @@protoc_insertion_point(field_release:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
  if (!_internal_has_proto_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_name_.ReleaseNonDefaultNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
}
inline void UDPBridgeSenderRemoteInfo::set_allocated_proto_name(std::string* proto_name) {
  if (proto_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_name_.SetAllocatedNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), proto_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name)
}

// -------------------------------------------------------------------

// UDPBridgeReceiverRemoteInfo

// optional string topic_name = 1 [default = ""];
inline bool UDPBridgeReceiverRemoteInfo::_internal_has_topic_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UDPBridgeReceiverRemoteInfo::has_topic_name() const {
  return _internal_has_topic_name();
}
inline void UDPBridgeReceiverRemoteInfo::clear_topic_name() {
  topic_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UDPBridgeReceiverRemoteInfo::topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
  return _internal_topic_name();
}
inline void UDPBridgeReceiverRemoteInfo::set_topic_name(const std::string& value) {
  _internal_set_topic_name(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
}
inline std::string* UDPBridgeReceiverRemoteInfo::mutable_topic_name() {
  // @@protoc_insertion_point(field_mutable:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
  return _internal_mutable_topic_name();
}
inline const std::string& UDPBridgeReceiverRemoteInfo::_internal_topic_name() const {
  return topic_name_.GetNoArena();
}
inline void UDPBridgeReceiverRemoteInfo::_internal_set_topic_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UDPBridgeReceiverRemoteInfo::set_topic_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
}
inline void UDPBridgeReceiverRemoteInfo::set_topic_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topic_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
}
inline void UDPBridgeReceiverRemoteInfo::set_topic_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topic_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
}
inline std::string* UDPBridgeReceiverRemoteInfo::_internal_mutable_topic_name() {
  _has_bits_[0] |= 0x00000001u;
  return topic_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UDPBridgeReceiverRemoteInfo::release_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
  if (!_internal_has_topic_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topic_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UDPBridgeReceiverRemoteInfo::set_allocated_topic_name(std::string* topic_name) {
  if (topic_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topic_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name)
}

// optional int32 bind_port = 2 [default = 8500];
inline bool UDPBridgeReceiverRemoteInfo::_internal_has_bind_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UDPBridgeReceiverRemoteInfo::has_bind_port() const {
  return _internal_has_bind_port();
}
inline void UDPBridgeReceiverRemoteInfo::clear_bind_port() {
  bind_port_ = 8500;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UDPBridgeReceiverRemoteInfo::_internal_bind_port() const {
  return bind_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UDPBridgeReceiverRemoteInfo::bind_port() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.UDPBridgeReceiverRemoteInfo.bind_port)
  return _internal_bind_port();
}
inline void UDPBridgeReceiverRemoteInfo::_internal_set_bind_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  bind_port_ = value;
}
inline void UDPBridgeReceiverRemoteInfo::set_bind_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bind_port(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.UDPBridgeReceiverRemoteInfo.bind_port)
}

// optional string proto_name = 3 [default = "ProtoMsgName"];
inline bool UDPBridgeReceiverRemoteInfo::_internal_has_proto_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UDPBridgeReceiverRemoteInfo::has_proto_name() const {
  return _internal_has_proto_name();
}
inline void UDPBridgeReceiverRemoteInfo::clear_proto_name() {
  proto_name_.ClearToDefaultNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UDPBridgeReceiverRemoteInfo::proto_name() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
  return _internal_proto_name();
}
inline void UDPBridgeReceiverRemoteInfo::set_proto_name(const std::string& value) {
  _internal_set_proto_name(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
}
inline std::string* UDPBridgeReceiverRemoteInfo::mutable_proto_name() {
  // @@protoc_insertion_point(field_mutable:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
  return _internal_mutable_proto_name();
}
inline const std::string& UDPBridgeReceiverRemoteInfo::_internal_proto_name() const {
  return proto_name_.GetNoArena();
}
inline void UDPBridgeReceiverRemoteInfo::_internal_set_proto_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), value);
}
inline void UDPBridgeReceiverRemoteInfo::set_proto_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(
    &::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
}
inline void UDPBridgeReceiverRemoteInfo::set_proto_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
}
inline void UDPBridgeReceiverRemoteInfo::set_proto_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proto_name_.SetNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
}
inline std::string* UDPBridgeReceiverRemoteInfo::_internal_mutable_proto_name() {
  _has_bits_[0] |= 0x00000002u;
  return proto_name_.MutableNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
}
inline std::string* UDPBridgeReceiverRemoteInfo::release_proto_name() {
  // @@protoc_insertion_point(field_release:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
  if (!_internal_has_proto_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proto_name_.ReleaseNonDefaultNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
}
inline void UDPBridgeReceiverRemoteInfo::set_allocated_proto_name(std::string* proto_name) {
  if (proto_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proto_name_.SetAllocatedNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), proto_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bridge
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto
