// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/bridge/proto/udp_bridge_remote_info.proto

#include "modules/bridge/proto/udp_bridge_remote_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace bridge {
class UDPBridgeSenderRemoteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UDPBridgeSenderRemoteInfo> _instance;
} _UDPBridgeSenderRemoteInfo_default_instance_;
class UDPBridgeReceiverRemoteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UDPBridgeReceiverRemoteInfo> _instance;
} _UDPBridgeReceiverRemoteInfo_default_instance_;
}  // namespace bridge
}  // namespace apollo
static void InitDefaultsscc_info_UDPBridgeReceiverRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.DefaultConstruct();
  *::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get_mutable() = std::string("ProtoMsgName", 12);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get_mutable());
  {
    void* ptr = &::apollo::bridge::_UDPBridgeReceiverRemoteInfo_default_instance_;
    new (ptr) ::apollo::bridge::UDPBridgeReceiverRemoteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::bridge::UDPBridgeReceiverRemoteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UDPBridgeReceiverRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UDPBridgeReceiverRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_UDPBridgeSenderRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.DefaultConstruct();
  *::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get_mutable() = std::string("127.0.0.1", 9);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get_mutable());
  ::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.DefaultConstruct();
  *::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get_mutable() = std::string("ProtoMsgName", 12);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get_mutable());
  {
    void* ptr = &::apollo::bridge::_UDPBridgeSenderRemoteInfo_default_instance_;
    new (ptr) ::apollo::bridge::UDPBridgeSenderRemoteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::bridge::UDPBridgeSenderRemoteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UDPBridgeSenderRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UDPBridgeSenderRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, remote_ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, remote_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeSenderRemoteInfo, proto_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, topic_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, bind_port_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::UDPBridgeReceiverRemoteInfo, proto_name_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::bridge::UDPBridgeSenderRemoteInfo)},
  { 11, 19, sizeof(::apollo::bridge::UDPBridgeReceiverRemoteInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::bridge::_UDPBridgeSenderRemoteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::bridge::_UDPBridgeReceiverRemoteInfo_default_instance_),
};

const char descriptor_table_protodef_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/bridge/proto/udp_bridge_remote"
  "_info.proto\022\rapollo.bridge\"v\n\031UDPBridgeS"
  "enderRemoteInfo\022\034\n\tremote_ip\030\001 \001(\t:\t127."
  "0.0.1\022\031\n\013remote_port\030\002 \001(\005:\0048900\022 \n\nprot"
  "o_name\030\003 \001(\t:\014ProtoMsgName\"n\n\033UDPBridgeR"
  "eceiverRemoteInfo\022\024\n\ntopic_name\030\001 \001(\t:\000\022"
  "\027\n\tbind_port\030\002 \001(\005:\0048500\022 \n\nproto_name\030\003"
  " \001(\t:\014ProtoMsgName"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_sccs[2] = {
  &scc_info_UDPBridgeReceiverRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.base,
  &scc_info_UDPBridgeSenderRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_once;
static bool descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = {
  &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_initialized, descriptor_table_protodef_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto, "modules/bridge/proto/udp_bridge_remote_info.proto", 298,
  &descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_once, descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_sccs, descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto::offsets,
  file_level_metadata_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto, 2, file_level_enum_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto, file_level_service_descriptors_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto), true);
namespace apollo {
namespace bridge {

// ===================================================================

void UDPBridgeSenderRemoteInfo::InitAsDefaultInstance() {
}
class UDPBridgeSenderRemoteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UDPBridgeSenderRemoteInfo>()._has_bits_);
  static void set_has_remote_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remote_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proto_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_;
UDPBridgeSenderRemoteInfo::UDPBridgeSenderRemoteInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.bridge.UDPBridgeSenderRemoteInfo)
}
UDPBridgeSenderRemoteInfo::UDPBridgeSenderRemoteInfo(const UDPBridgeSenderRemoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_ip_.UnsafeSetDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
  if (from._internal_has_remote_ip()) {
    remote_ip_.AssignWithDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(), from.remote_ip_);
  }
  proto_name_.UnsafeSetDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
  if (from._internal_has_proto_name()) {
    proto_name_.AssignWithDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), from.proto_name_);
  }
  remote_port_ = from.remote_port_;
  // @@protoc_insertion_point(copy_constructor:apollo.bridge.UDPBridgeSenderRemoteInfo)
}

void UDPBridgeSenderRemoteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UDPBridgeSenderRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.base);
  remote_ip_.UnsafeSetDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
  proto_name_.UnsafeSetDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
  remote_port_ = 8900;
}

UDPBridgeSenderRemoteInfo::~UDPBridgeSenderRemoteInfo() {
  // @@protoc_insertion_point(destructor:apollo.bridge.UDPBridgeSenderRemoteInfo)
  SharedDtor();
}

void UDPBridgeSenderRemoteInfo::SharedDtor() {
  remote_ip_.DestroyNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
  proto_name_.DestroyNoArena(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
}

void UDPBridgeSenderRemoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UDPBridgeSenderRemoteInfo& UDPBridgeSenderRemoteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UDPBridgeSenderRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.base);
  return *internal_default_instance();
}


void UDPBridgeSenderRemoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      remote_ip_.UnsafeMutablePointer()->assign(*&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      proto_name_.UnsafeMutablePointer()->assign(*&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
    }
    remote_port_ = 8900;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UDPBridgeSenderRemoteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string remote_ip = 1 [default = "127.0.0.1"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 remote_port = 2 [default = 8900];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remote_port(&has_bits);
          remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proto_name = 3 [default = "ProtoMsgName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proto_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UDPBridgeSenderRemoteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string remote_ip = 1 [default = "127.0.0.1"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_remote_ip().data(), static_cast<int>(this->_internal_remote_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeSenderRemoteInfo.remote_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_ip(), target);
  }

  // optional int32 remote_port = 2 [default = 8900];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_remote_port(), target);
  }

  // optional string proto_name = 3 [default = "ProtoMsgName"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_name().data(), static_cast<int>(this->_internal_proto_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeSenderRemoteInfo.proto_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proto_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.bridge.UDPBridgeSenderRemoteInfo)
  return target;
}

size_t UDPBridgeSenderRemoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string remote_ip = 1 [default = "127.0.0.1"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remote_ip());
    }

    // optional string proto_name = 3 [default = "ProtoMsgName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_name());
    }

    // optional int32 remote_port = 2 [default = 8900];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_remote_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UDPBridgeSenderRemoteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UDPBridgeSenderRemoteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UDPBridgeSenderRemoteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.bridge.UDPBridgeSenderRemoteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.bridge.UDPBridgeSenderRemoteInfo)
    MergeFrom(*source);
  }
}

void UDPBridgeSenderRemoteInfo::MergeFrom(const UDPBridgeSenderRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      remote_ip_.AssignWithDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(), from.remote_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      proto_name_.AssignWithDefault(&::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), from.proto_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      remote_port_ = from.remote_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UDPBridgeSenderRemoteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDPBridgeSenderRemoteInfo::CopyFrom(const UDPBridgeSenderRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.bridge.UDPBridgeSenderRemoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDPBridgeSenderRemoteInfo::IsInitialized() const {
  return true;
}

void UDPBridgeSenderRemoteInfo::InternalSwap(UDPBridgeSenderRemoteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  remote_ip_.Swap(&other->remote_ip_, &::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_remote_ip_.get(),
    GetArenaNoVirtual());
  proto_name_.Swap(&other->proto_name_, &::apollo::bridge::UDPBridgeSenderRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(),
    GetArenaNoVirtual());
  swap(remote_port_, other->remote_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UDPBridgeSenderRemoteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UDPBridgeReceiverRemoteInfo::InitAsDefaultInstance() {
}
class UDPBridgeReceiverRemoteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UDPBridgeReceiverRemoteInfo>()._has_bits_);
  static void set_has_topic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bind_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proto_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_;
UDPBridgeReceiverRemoteInfo::UDPBridgeReceiverRemoteInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.bridge.UDPBridgeReceiverRemoteInfo)
}
UDPBridgeReceiverRemoteInfo::UDPBridgeReceiverRemoteInfo(const UDPBridgeReceiverRemoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topic_name()) {
    topic_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
  }
  proto_name_.UnsafeSetDefault(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
  if (from._internal_has_proto_name()) {
    proto_name_.AssignWithDefault(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), from.proto_name_);
  }
  bind_port_ = from.bind_port_;
  // @@protoc_insertion_point(copy_constructor:apollo.bridge.UDPBridgeReceiverRemoteInfo)
}

void UDPBridgeReceiverRemoteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UDPBridgeReceiverRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.base);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_name_.UnsafeSetDefault(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
  bind_port_ = 8500;
}

UDPBridgeReceiverRemoteInfo::~UDPBridgeReceiverRemoteInfo() {
  // @@protoc_insertion_point(destructor:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  SharedDtor();
}

void UDPBridgeReceiverRemoteInfo::SharedDtor() {
  topic_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_name_.DestroyNoArena(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
}

void UDPBridgeReceiverRemoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UDPBridgeReceiverRemoteInfo& UDPBridgeReceiverRemoteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UDPBridgeReceiverRemoteInfo_modules_2fbridge_2fproto_2fudp_5fbridge_5fremote_5finfo_2eproto.base);
  return *internal_default_instance();
}


void UDPBridgeReceiverRemoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      topic_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      proto_name_.UnsafeMutablePointer()->assign(*&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get());
    }
    bind_port_ = 8500;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UDPBridgeReceiverRemoteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string topic_name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bind_port = 2 [default = 8500];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bind_port(&has_bits);
          bind_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string proto_name = 3 [default = "ProtoMsgName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proto_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UDPBridgeReceiverRemoteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topic_name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic_name().data(), static_cast<int>(this->_internal_topic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeReceiverRemoteInfo.topic_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // optional int32 bind_port = 2 [default = 8500];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bind_port(), target);
  }

  // optional string proto_name = 3 [default = "ProtoMsgName"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proto_name().data(), static_cast<int>(this->_internal_proto_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.bridge.UDPBridgeReceiverRemoteInfo.proto_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proto_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  return target;
}

size_t UDPBridgeReceiverRemoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string topic_name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic_name());
    }

    // optional string proto_name = 3 [default = "ProtoMsgName"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proto_name());
    }

    // optional int32 bind_port = 2 [default = 8500];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bind_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UDPBridgeReceiverRemoteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UDPBridgeReceiverRemoteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UDPBridgeReceiverRemoteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.bridge.UDPBridgeReceiverRemoteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.bridge.UDPBridgeReceiverRemoteInfo)
    MergeFrom(*source);
  }
}

void UDPBridgeReceiverRemoteInfo::MergeFrom(const UDPBridgeReceiverRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      topic_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      proto_name_.AssignWithDefault(&::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(), from.proto_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      bind_port_ = from.bind_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UDPBridgeReceiverRemoteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDPBridgeReceiverRemoteInfo::CopyFrom(const UDPBridgeReceiverRemoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.bridge.UDPBridgeReceiverRemoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDPBridgeReceiverRemoteInfo::IsInitialized() const {
  return true;
}

void UDPBridgeReceiverRemoteInfo::InternalSwap(UDPBridgeReceiverRemoteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topic_name_.Swap(&other->topic_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proto_name_.Swap(&other->proto_name_, &::apollo::bridge::UDPBridgeReceiverRemoteInfo::_i_give_permission_to_break_this_code_default_proto_name_.get(),
    GetArenaNoVirtual());
  swap(bind_port_, other->bind_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UDPBridgeReceiverRemoteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::bridge::UDPBridgeSenderRemoteInfo* Arena::CreateMaybeMessage< ::apollo::bridge::UDPBridgeSenderRemoteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::bridge::UDPBridgeSenderRemoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::bridge::UDPBridgeReceiverRemoteInfo* Arena::CreateMaybeMessage< ::apollo::bridge::UDPBridgeReceiverRemoteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::bridge::UDPBridgeReceiverRemoteInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
