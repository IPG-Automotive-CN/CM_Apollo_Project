// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/relative_map_config.proto

#include "modules/map/relative_map/proto/relative_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
namespace apollo {
namespace relative_map {
class MapGenerationParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapGenerationParam> _instance;
} _MapGenerationParam_default_instance_;
class NavigationLaneConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationLaneConfig> _instance;
} _NavigationLaneConfig_default_instance_;
class RelativeMapConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelativeMapConfig> _instance;
} _RelativeMapConfig_default_instance_;
}  // namespace relative_map
}  // namespace apollo
static void InitDefaultsscc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_MapGenerationParam_default_instance_;
    new (ptr) ::apollo::relative_map::MapGenerationParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::MapGenerationParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigationLaneConfig_default_instance_;
    new (ptr) ::apollo::relative_map::NavigationLaneConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigationLaneConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_RelativeMapConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_RelativeMapConfig_default_instance_;
    new (ptr) ::apollo::relative_map::RelativeMapConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::RelativeMapConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RelativeMapConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RelativeMapConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto}, {
      &scc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base,
      &scc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, default_left_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, default_right_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, default_speed_limit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_lane_marker_quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, lane_source_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_len_from_navigation_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_len_for_navigation_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_len_for_navigation_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, ratio_navigation_lane_len_to_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_distance_to_navigation_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_view_range_to_use_lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_lane_half_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_lane_half_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, lane_marker_weight_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, map_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, navigation_lane_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::relative_map::MapGenerationParam)},
  { 11, 27, sizeof(::apollo::relative_map::NavigationLaneConfig)},
  { 38, 45, sizeof(::apollo::relative_map::RelativeMapConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_MapGenerationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_NavigationLaneConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_RelativeMapConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8modules/map/relative_map/proto/relativ"
  "e_map_config.proto\022\023apollo.relative_map\""
  "\177\n\022MapGenerationParam\022 \n\022default_left_wi"
  "dth\030\001 \001(\001:\0041.75\022!\n\023default_right_width\030\002"
  " \001(\001:\0041.75\022$\n\023default_speed_limit\030\003 \001(\001:"
  "\00729.0576\"\252\004\n\024NavigationLaneConfig\022$\n\027min"
  "_lane_marker_quality\030\001 \001(\001:\0030.5\022I\n\013lane_"
  "source\030\002 \001(\01624.apollo.relative_map.Navig"
  "ationLaneConfig.LaneSource\022)\n\034max_len_fr"
  "om_navigation_line\030\003 \001(\001:\003250\022(\n\033min_len"
  "_for_navigation_lane\030\004 \001(\001:\003150\022(\n\033max_l"
  "en_for_navigation_lane\030\005 \001(\001:\003250\022-\n\"rat"
  "io_navigation_lane_len_to_speed\030\006 \001(\001:\0018"
  "\022+\n\037max_distance_to_navigation_line\030\007 \001("
  "\001:\00215\022.\n!min_view_range_to_use_lane_mark"
  "er\030\010 \001(\001:\0030.5\022 \n\023min_lane_half_width\030\t \001"
  "(\001:\0031.5\022\036\n\023max_lane_half_width\030\n \001(\001:\0012\022"
  "\037\n\022lane_marker_weight\030\013 \001(\001:\0030.1\"3\n\nLane"
  "Source\022\016\n\nPERCEPTION\020\001\022\025\n\021OFFLINE_GENERA"
  "TED\020\002\"\223\001\n\021RelativeMapConfig\022:\n\tmap_param"
  "\030\001 \001(\0132\'.apollo.relative_map.MapGenerati"
  "onParam\022B\n\017navigation_lane\030\002 \001(\0132).apoll"
  "o.relative_map.NavigationLaneConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_sccs[3] = {
  &scc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base,
  &scc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base,
  &scc_info_RelativeMapConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto = {
  &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto, "modules/map/relative_map/proto/relative_map_config.proto", 915,
  &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once, descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_sccs, descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto, 3, file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto, file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto), true);
namespace apollo {
namespace relative_map {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[0];
}
bool NavigationLaneConfig_LaneSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::PERCEPTION;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::OFFLINE_GENERATED;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MIN;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MAX;
constexpr int NavigationLaneConfig::LaneSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MapGenerationParam::InitAsDefaultInstance() {
}
class MapGenerationParam::_Internal {
 public:
  using HasBits = decltype(std::declval<MapGenerationParam>()._has_bits_);
  static void set_has_default_left_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_right_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MapGenerationParam::MapGenerationParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.MapGenerationParam)
}
MapGenerationParam::MapGenerationParam(const MapGenerationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&default_left_width_, &from.default_left_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_speed_limit_) -
    reinterpret_cast<char*>(&default_left_width_)) + sizeof(default_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapGenerationParam)
}

void MapGenerationParam::SharedCtor() {
  default_left_width_ = 1.75;
  default_right_width_ = 1.75;
  default_speed_limit_ = 29.0576;
}

MapGenerationParam::~MapGenerationParam() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapGenerationParam)
  SharedDtor();
}

void MapGenerationParam::SharedDtor() {
}

void MapGenerationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapGenerationParam& MapGenerationParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapGenerationParam_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MapGenerationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapGenerationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    default_left_width_ = 1.75;
    default_right_width_ = 1.75;
    default_speed_limit_ = 29.0576;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapGenerationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double default_left_width = 1 [default = 1.75];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_default_left_width(&has_bits);
          default_left_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double default_right_width = 2 [default = 1.75];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_default_right_width(&has_bits);
          default_right_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double default_speed_limit = 3 [default = 29.0576];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_default_speed_limit(&has_bits);
          default_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapGenerationParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapGenerationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double default_left_width = 1 [default = 1.75];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_default_left_width(), target);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_default_right_width(), target);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_default_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapGenerationParam)
  return target;
}

size_t MapGenerationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapGenerationParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double default_left_width = 1 [default = 1.75];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double default_right_width = 2 [default = 1.75];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double default_speed_limit = 3 [default = 29.0576];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGenerationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGenerationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapGenerationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.MapGenerationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.MapGenerationParam)
    MergeFrom(*source);
  }
}

void MapGenerationParam::MergeFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      default_left_width_ = from.default_left_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_right_width_ = from.default_right_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_speed_limit_ = from.default_speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapGenerationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGenerationParam::CopyFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGenerationParam::IsInitialized() const {
  return true;
}

void MapGenerationParam::InternalSwap(MapGenerationParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_left_width_, other->default_left_width_);
  swap(default_right_width_, other->default_right_width_);
  swap(default_speed_limit_, other->default_speed_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapGenerationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationLaneConfig::InitAsDefaultInstance() {
}
class NavigationLaneConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationLaneConfig>()._has_bits_);
  static void set_has_min_lane_marker_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_len_from_navigation_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_len_for_navigation_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_len_for_navigation_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ratio_navigation_lane_len_to_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_distance_to_navigation_line(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_view_range_to_use_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_lane_half_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_lane_half_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lane_marker_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

NavigationLaneConfig::NavigationLaneConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationLaneConfig)
}
NavigationLaneConfig::NavigationLaneConfig(const NavigationLaneConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_source_, &from.lane_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_marker_weight_) -
    reinterpret_cast<char*>(&lane_source_)) + sizeof(lane_marker_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationLaneConfig)
}

void NavigationLaneConfig::SharedCtor() {
  lane_source_ = 1;
  min_lane_marker_quality_ = 0.5;
  max_len_from_navigation_line_ = 250;
  min_len_for_navigation_lane_ = 150;
  max_len_for_navigation_lane_ = 250;
  ratio_navigation_lane_len_to_speed_ = 8;
  max_distance_to_navigation_line_ = 15;
  min_view_range_to_use_lane_marker_ = 0.5;
  min_lane_half_width_ = 1.5;
  max_lane_half_width_ = 2;
  lane_marker_weight_ = 0.1;
}

NavigationLaneConfig::~NavigationLaneConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationLaneConfig)
  SharedDtor();
}

void NavigationLaneConfig::SharedDtor() {
}

void NavigationLaneConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationLaneConfig& NavigationLaneConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationLaneConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void NavigationLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationLaneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    lane_source_ = 1;
    min_lane_marker_quality_ = 0.5;
    max_len_from_navigation_line_ = 250;
    min_len_for_navigation_lane_ = 150;
    max_len_for_navigation_lane_ = 250;
    ratio_navigation_lane_len_to_speed_ = 8;
    max_distance_to_navigation_line_ = 15;
    min_view_range_to_use_lane_marker_ = 0.5;
  }
  if (cached_has_bits & 0x00000700u) {
    min_lane_half_width_ = 1.5;
    max_lane_half_width_ = 2;
    lane_marker_weight_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NavigationLaneConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_lane_marker_quality = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_lane_marker_quality(&has_bits);
          min_lane_marker_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(val))) {
            _internal_set_lane_source(static_cast<::apollo::relative_map::NavigationLaneConfig_LaneSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double max_len_from_navigation_line = 3 [default = 250];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_len_from_navigation_line(&has_bits);
          max_len_from_navigation_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_len_for_navigation_lane = 4 [default = 150];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_len_for_navigation_lane(&has_bits);
          min_len_for_navigation_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_len_for_navigation_lane = 5 [default = 250];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_len_for_navigation_lane(&has_bits);
          max_len_for_navigation_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ratio_navigation_lane_len_to_speed(&has_bits);
          ratio_navigation_lane_len_to_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_distance_to_navigation_line = 7 [default = 15];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_max_distance_to_navigation_line(&has_bits);
          max_distance_to_navigation_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_min_view_range_to_use_lane_marker(&has_bits);
          min_view_range_to_use_lane_marker_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_lane_half_width = 9 [default = 1.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_min_lane_half_width(&has_bits);
          min_lane_half_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_lane_half_width = 10 [default = 2];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_max_lane_half_width(&has_bits);
          max_lane_half_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lane_marker_weight = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_lane_marker_weight(&has_bits);
          lane_marker_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationLaneConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationLaneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_lane_marker_quality(), target);
  }

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lane_source(), target);
  }

  // optional double max_len_from_navigation_line = 3 [default = 250];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_len_from_navigation_line(), target);
  }

  // optional double min_len_for_navigation_lane = 4 [default = 150];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_len_for_navigation_lane(), target);
  }

  // optional double max_len_for_navigation_lane = 5 [default = 250];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_len_for_navigation_lane(), target);
  }

  // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ratio_navigation_lane_len_to_speed(), target);
  }

  // optional double max_distance_to_navigation_line = 7 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_distance_to_navigation_line(), target);
  }

  // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_min_view_range_to_use_lane_marker(), target);
  }

  // optional double min_lane_half_width = 9 [default = 1.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_min_lane_half_width(), target);
  }

  // optional double max_lane_half_width = 10 [default = 2];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_lane_half_width(), target);
  }

  // optional double lane_marker_weight = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_lane_marker_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationLaneConfig)
  return target;
}

size_t NavigationLaneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationLaneConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lane_source());
    }

    // optional double min_lane_marker_quality = 1 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_len_from_navigation_line = 3 [default = 250];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min_len_for_navigation_lane = 4 [default = 150];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_len_for_navigation_lane = 5 [default = 250];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_distance_to_navigation_line = 7 [default = 15];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double min_lane_half_width = 9 [default = 1.5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double max_lane_half_width = 10 [default = 2];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double lane_marker_weight = 11 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationLaneConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationLaneConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationLaneConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationLaneConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationLaneConfig)
    MergeFrom(*source);
  }
}

void NavigationLaneConfig::MergeFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lane_source_ = from.lane_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_lane_marker_quality_ = from.min_lane_marker_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_len_from_navigation_line_ = from.max_len_from_navigation_line_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_len_for_navigation_lane_ = from.min_len_for_navigation_lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_len_for_navigation_lane_ = from.max_len_for_navigation_lane_;
    }
    if (cached_has_bits & 0x00000020u) {
      ratio_navigation_lane_len_to_speed_ = from.ratio_navigation_lane_len_to_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_distance_to_navigation_line_ = from.max_distance_to_navigation_line_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_view_range_to_use_lane_marker_ = from.min_view_range_to_use_lane_marker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      min_lane_half_width_ = from.min_lane_half_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_lane_half_width_ = from.max_lane_half_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      lane_marker_weight_ = from.lane_marker_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationLaneConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationLaneConfig::CopyFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationLaneConfig::IsInitialized() const {
  return true;
}

void NavigationLaneConfig::InternalSwap(NavigationLaneConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lane_source_, other->lane_source_);
  swap(min_lane_marker_quality_, other->min_lane_marker_quality_);
  swap(max_len_from_navigation_line_, other->max_len_from_navigation_line_);
  swap(min_len_for_navigation_lane_, other->min_len_for_navigation_lane_);
  swap(max_len_for_navigation_lane_, other->max_len_for_navigation_lane_);
  swap(ratio_navigation_lane_len_to_speed_, other->ratio_navigation_lane_len_to_speed_);
  swap(max_distance_to_navigation_line_, other->max_distance_to_navigation_line_);
  swap(min_view_range_to_use_lane_marker_, other->min_view_range_to_use_lane_marker_);
  swap(min_lane_half_width_, other->min_lane_half_width_);
  swap(max_lane_half_width_, other->max_lane_half_width_);
  swap(lane_marker_weight_, other->lane_marker_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationLaneConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelativeMapConfig::InitAsDefaultInstance() {
  ::apollo::relative_map::_RelativeMapConfig_default_instance_._instance.get_mutable()->map_param_ = const_cast< ::apollo::relative_map::MapGenerationParam*>(
      ::apollo::relative_map::MapGenerationParam::internal_default_instance());
  ::apollo::relative_map::_RelativeMapConfig_default_instance_._instance.get_mutable()->navigation_lane_ = const_cast< ::apollo::relative_map::NavigationLaneConfig*>(
      ::apollo::relative_map::NavigationLaneConfig::internal_default_instance());
}
class RelativeMapConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeMapConfig>()._has_bits_);
  static const ::apollo::relative_map::MapGenerationParam& map_param(const RelativeMapConfig* msg);
  static void set_has_map_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::relative_map::NavigationLaneConfig& navigation_lane(const RelativeMapConfig* msg);
  static void set_has_navigation_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::relative_map::MapGenerationParam&
RelativeMapConfig::_Internal::map_param(const RelativeMapConfig* msg) {
  return *msg->map_param_;
}
const ::apollo::relative_map::NavigationLaneConfig&
RelativeMapConfig::_Internal::navigation_lane(const RelativeMapConfig* msg) {
  return *msg->navigation_lane_;
}
RelativeMapConfig::RelativeMapConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.RelativeMapConfig)
}
RelativeMapConfig::RelativeMapConfig(const RelativeMapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_map_param()) {
    map_param_ = new ::apollo::relative_map::MapGenerationParam(*from.map_param_);
  } else {
    map_param_ = nullptr;
  }
  if (from._internal_has_navigation_lane()) {
    navigation_lane_ = new ::apollo::relative_map::NavigationLaneConfig(*from.navigation_lane_);
  } else {
    navigation_lane_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.RelativeMapConfig)
}

void RelativeMapConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelativeMapConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base);
  ::memset(&map_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navigation_lane_) -
      reinterpret_cast<char*>(&map_param_)) + sizeof(navigation_lane_));
}

RelativeMapConfig::~RelativeMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.RelativeMapConfig)
  SharedDtor();
}

void RelativeMapConfig::SharedDtor() {
  if (this != internal_default_instance()) delete map_param_;
  if (this != internal_default_instance()) delete navigation_lane_;
}

void RelativeMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelativeMapConfig& RelativeMapConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelativeMapConfig_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RelativeMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.RelativeMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(map_param_ != nullptr);
      map_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(navigation_lane_ != nullptr);
      navigation_lane_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RelativeMapConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.relative_map.MapGenerationParam map_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelativeMapConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.RelativeMapConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_param(this), target, stream);
  }

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::navigation_lane(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.RelativeMapConfig)
  return target;
}

size_t RelativeMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.RelativeMapConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.relative_map.MapGenerationParam map_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_param_);
    }

    // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_lane_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeMapConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeMapConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelativeMapConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.RelativeMapConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.RelativeMapConfig)
    MergeFrom(*source);
  }
}

void RelativeMapConfig::MergeFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_map_param()->::apollo::relative_map::MapGenerationParam::MergeFrom(from._internal_map_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_navigation_lane()->::apollo::relative_map::NavigationLaneConfig::MergeFrom(from._internal_navigation_lane());
    }
  }
}

void RelativeMapConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeMapConfig::CopyFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeMapConfig::IsInitialized() const {
  return true;
}

void RelativeMapConfig::InternalSwap(RelativeMapConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(map_param_, other->map_param_);
  swap(navigation_lane_, other->navigation_lane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeMapConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::relative_map::MapGenerationParam* Arena::CreateMaybeMessage< ::apollo::relative_map::MapGenerationParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::MapGenerationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::NavigationLaneConfig* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationLaneConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigationLaneConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::RelativeMapConfig* Arena::CreateMaybeMessage< ::apollo::relative_map::RelativeMapConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::RelativeMapConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
