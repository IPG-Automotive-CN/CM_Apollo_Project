// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigation.proto

#include "modules/map/relative_map/proto/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Map_modules_2fmap_2fproto_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2flocalization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LocalizationEstimate_modules_2flocalization_2fproto_2flocalization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkers_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapMsg_NavigationPathEntry_DoNotUse_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
namespace apollo {
namespace relative_map {
class NavigationPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationPath> _instance;
} _NavigationPath_default_instance_;
class NavigationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationInfo> _instance;
} _NavigationInfo_default_instance_;
class MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapMsg_NavigationPathEntry_DoNotUse> _instance;
} _MapMsg_NavigationPathEntry_DoNotUse_default_instance_;
class MapMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapMsg> _instance;
} _MapMsg_default_instance_;
}  // namespace relative_map
}  // namespace apollo
static void InitDefaultsscc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_MapMsg_default_instance_;
    new (ptr) ::apollo::relative_map::MapMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::MapMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Map_modules_2fmap_2fproto_2fmap_2eproto.base,
      &scc_info_MapMsg_NavigationPathEntry_DoNotUse_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,
      &scc_info_LaneMarkers_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.base,
      &scc_info_LocalizationEstimate_modules_2flocalization_2fproto_2flocalization_2eproto.base,}};

static void InitDefaultsscc_info_MapMsg_NavigationPathEntry_DoNotUse_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_MapMsg_NavigationPathEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse();
  }
  ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapMsg_NavigationPathEntry_DoNotUse_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapMsg_NavigationPathEntry_DoNotUse_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto}, {
      &scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,}};

static void InitDefaultsscc_info_NavigationInfo_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigationInfo_default_instance_;
    new (ptr) ::apollo::relative_map::NavigationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NavigationInfo_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NavigationInfo_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,}};

static void InitDefaultsscc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigationPath_default_instance_;
    new (ptr) ::apollo::relative_map::NavigationPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigationPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto}, {
      &scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, path_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, path_priority_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, navigation_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, hdmap_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, navigation_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, localization_),
  0,
  1,
  ~0u,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::relative_map::NavigationPath)},
  { 9, 16, sizeof(::apollo::relative_map::NavigationInfo)},
  { 18, 25, sizeof(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse)},
  { 27, 37, sizeof(::apollo::relative_map::MapMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_NavigationPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_NavigationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_MapMsg_NavigationPathEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::relative_map::_MapMsg_default_instance_),
};

const char descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/map/relative_map/proto/navigat"
  "ion.proto\022\023apollo.relative_map\032!modules/"
  "common/proto/header.proto\032$modules/commo"
  "n/proto/pnc_point.proto\032-modules/localiz"
  "ation/proto/localization.proto\032\033modules/"
  "map/proto/map.proto\0322modules/perception/"
  "proto/perception_obstacle.proto\"J\n\016Navig"
  "ationPath\022!\n\004path\030\001 \001(\0132\023.apollo.common."
  "Path\022\025\n\rpath_priority\030\002 \001(\r\"u\n\016Navigatio"
  "nInfo\022%\n\006header\030\001 \001(\0132\025.apollo.common.He"
  "ader\022<\n\017navigation_path\030\002 \003(\0132#.apollo.r"
  "elative_map.NavigationPath\"\355\002\n\006MapMsg\022%\n"
  "\006header\030\001 \001(\0132\025.apollo.common.Header\022 \n\005"
  "hdmap\030\002 \001(\0132\021.apollo.hdmap.Map\022H\n\017naviga"
  "tion_path\030\003 \003(\0132/.apollo.relative_map.Ma"
  "pMsg.NavigationPathEntry\0223\n\013lane_marker\030"
  "\004 \001(\0132\036.apollo.perception.LaneMarkers\022\?\n"
  "\014localization\030\005 \001(\0132).apollo.localizatio"
  "n.LocalizationEstimate\032Z\n\023NavigationPath"
  "Entry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.apol"
  "lo.relative_map.NavigationPath:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_sccs[4] = {
  &scc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,
  &scc_info_MapMsg_NavigationPathEntry_DoNotUse_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,
  &scc_info_NavigationInfo_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,
  &scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once;
static bool descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = {
  &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_initialized, descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto, "modules/map/relative_map/proto/navigation.proto", 834,
  &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once, descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_sccs, descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::offsets,
  file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto, 4, file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto, file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto), true);
namespace apollo {
namespace relative_map {

// ===================================================================

void NavigationPath::InitAsDefaultInstance() {
  ::apollo::relative_map::_NavigationPath_default_instance_._instance.get_mutable()->path_ = const_cast< ::apollo::common::Path*>(
      ::apollo::common::Path::internal_default_instance());
}
class NavigationPath::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationPath>()._has_bits_);
  static const ::apollo::common::Path& path(const NavigationPath* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Path&
NavigationPath::_Internal::path(const NavigationPath* msg) {
  return *msg->path_;
}
void NavigationPath::clear_path() {
  if (path_ != nullptr) path_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NavigationPath::NavigationPath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationPath)
}
NavigationPath::NavigationPath(const NavigationPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::apollo::common::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  path_priority_ = from.path_priority_;
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationPath)
}

void NavigationPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base);
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_priority_) -
      reinterpret_cast<char*>(&path_)) + sizeof(path_priority_));
}

NavigationPath::~NavigationPath() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationPath)
  SharedDtor();
}

void NavigationPath::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void NavigationPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationPath& NavigationPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationPath_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(path_ != nullptr);
    path_->Clear();
  }
  path_priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NavigationPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 path_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_path_priority(&has_bits);
          path_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Path path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // optional uint32 path_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_path_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationPath)
  return target;
}

size_t NavigationPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Path path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_);
    }

    // optional uint32 path_priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_path_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationPath)
    MergeFrom(*source);
  }
}

void NavigationPath::MergeFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path()->::apollo::common::Path::MergeFrom(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      path_priority_ = from.path_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPath::CopyFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPath::IsInitialized() const {
  return true;
}

void NavigationPath::InternalSwap(NavigationPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(path_, other->path_);
  swap(path_priority_, other->path_priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationInfo::InitAsDefaultInstance() {
  ::apollo::relative_map::_NavigationInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class NavigationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationInfo>()._has_bits_);
  static const ::apollo::common::Header& header(const NavigationInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
NavigationInfo::_Internal::header(const NavigationInfo* msg) {
  return *msg->header_;
}
void NavigationInfo::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NavigationInfo::NavigationInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationInfo)
}
NavigationInfo::NavigationInfo(const NavigationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      navigation_path_(from.navigation_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationInfo)
}

void NavigationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationInfo_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base);
  header_ = nullptr;
}

NavigationInfo::~NavigationInfo() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationInfo)
  SharedDtor();
}

void NavigationInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NavigationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationInfo& NavigationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationInfo_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navigation_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NavigationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_navigation_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_navigation_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_navigation_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationInfo)
  return target;
}

size_t NavigationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  total_size += 1UL * this->_internal_navigation_path_size();
  for (const auto& msg : this->navigation_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.common.Header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationInfo)
    MergeFrom(*source);
  }
}

void NavigationInfo::MergeFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_path_.MergeFrom(from.navigation_path_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
  }
}

void NavigationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationInfo::CopyFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationInfo::IsInitialized() const {
  return true;
}

void NavigationInfo::InternalSwap(NavigationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  navigation_path_.InternalSwap(&other->navigation_path_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse() {}
MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapMsg_NavigationPathEntry_DoNotUse::MergeFrom(const MapMsg_NavigationPathEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapMsg_NavigationPathEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MapMsg_NavigationPathEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MapMsg::InitAsDefaultInstance() {
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->hdmap_ = const_cast< ::apollo::hdmap::Map*>(
      ::apollo::hdmap::Map::internal_default_instance());
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(
      ::apollo::perception::LaneMarkers::internal_default_instance());
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->localization_ = const_cast< ::apollo::localization::LocalizationEstimate*>(
      ::apollo::localization::LocalizationEstimate::internal_default_instance());
}
class MapMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<MapMsg>()._has_bits_);
  static const ::apollo::common::Header& header(const MapMsg* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Map& hdmap(const MapMsg* msg);
  static void set_has_hdmap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::LaneMarkers& lane_marker(const MapMsg* msg);
  static void set_has_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::localization::LocalizationEstimate& localization(const MapMsg* msg);
  static void set_has_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
MapMsg::_Internal::header(const MapMsg* msg) {
  return *msg->header_;
}
const ::apollo::hdmap::Map&
MapMsg::_Internal::hdmap(const MapMsg* msg) {
  return *msg->hdmap_;
}
const ::apollo::perception::LaneMarkers&
MapMsg::_Internal::lane_marker(const MapMsg* msg) {
  return *msg->lane_marker_;
}
const ::apollo::localization::LocalizationEstimate&
MapMsg::_Internal::localization(const MapMsg* msg) {
  return *msg->localization_;
}
void MapMsg::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MapMsg::clear_hdmap() {
  if (hdmap_ != nullptr) hdmap_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void MapMsg::clear_lane_marker() {
  if (lane_marker_ != nullptr) lane_marker_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void MapMsg::clear_localization() {
  if (localization_ != nullptr) localization_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
MapMsg::MapMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.MapMsg)
}
MapMsg::MapMsg(const MapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  navigation_path_.MergeFrom(from.navigation_path_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_hdmap()) {
    hdmap_ = new ::apollo::hdmap::Map(*from.hdmap_);
  } else {
    hdmap_ = nullptr;
  }
  if (from._internal_has_lane_marker()) {
    lane_marker_ = new ::apollo::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = nullptr;
  }
  if (from._internal_has_localization()) {
    localization_ = new ::apollo::localization::LocalizationEstimate(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapMsg)
}

void MapMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_) -
      reinterpret_cast<char*>(&header_)) + sizeof(localization_));
}

MapMsg::~MapMsg() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapMsg)
  SharedDtor();
}

void MapMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete hdmap_;
  if (this != internal_default_instance()) delete lane_marker_;
  if (this != internal_default_instance()) delete localization_;
}

void MapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapMsg& MapMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base);
  return *internal_default_instance();
}


void MapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navigation_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hdmap_ != nullptr);
      hdmap_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lane_marker_ != nullptr);
      lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(localization_ != nullptr);
      localization_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Map hdmap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&navigation_path_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.localization.LocalizationEstimate localization = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.hdmap.Map hdmap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hdmap(this), target, stream);
  }

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  if (!this->_internal_navigation_path().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_navigation_path().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_navigation_path().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->_internal_navigation_path().begin();
          it != this->_internal_navigation_path().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapMsg_NavigationPathEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->_internal_navigation_path().begin();
          it != this->_internal_navigation_path().end(); ++it) {
        target = MapMsg_NavigationPathEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lane_marker(this), target, stream);
  }

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::localization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapMsg)
  return target;
}

size_t MapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_navigation_path_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::relative_map::NavigationPath >::const_iterator
      it = this->_internal_navigation_path().begin();
      it != this->_internal_navigation_path().end(); ++it) {
    total_size += MapMsg_NavigationPathEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.hdmap.Map hdmap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdmap_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_marker_);
    }

    // optional .apollo.localization.LocalizationEstimate localization = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.MapMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.MapMsg)
    MergeFrom(*source);
  }
}

void MapMsg::MergeFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_path_.MergeFrom(from.navigation_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hdmap()->::apollo::hdmap::Map::MergeFrom(from._internal_hdmap());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from._internal_lane_marker());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_localization()->::apollo::localization::LocalizationEstimate::MergeFrom(from._internal_localization());
    }
  }
}

void MapMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMsg::CopyFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMsg::IsInitialized() const {
  return true;
}

void MapMsg::InternalSwap(MapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  navigation_path_.Swap(&other->navigation_path_);
  swap(header_, other->header_);
  swap(hdmap_, other->hdmap_);
  swap(lane_marker_, other->lane_marker_);
  swap(localization_, other->localization_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::relative_map::NavigationPath* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationPath >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigationPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::NavigationInfo* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::MapMsg* Arena::CreateMaybeMessage< ::apollo::relative_map::MapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::MapMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
