// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_model_input.proto

#include "modules/planning/proto/auto_tuning_model_input.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
namespace apollo {
namespace planning {
namespace autotuning {
class PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPointwiseFeature_ObstacleFeature> _instance;
} _PathPointwiseFeature_ObstacleFeature_default_instance_;
class PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPointwiseFeature_BoundRelatedFeature> _instance;
} _PathPointwiseFeature_BoundRelatedFeature_default_instance_;
class PathPointwiseFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPointwiseFeature> _instance;
} _PathPointwiseFeature_default_instance_;
class SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPointwiseFeature_ObstacleFeature> _instance;
} _SpeedPointwiseFeature_ObstacleFeature_default_instance_;
class SpeedPointwiseFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPointwiseFeature> _instance;
} _SpeedPointwiseFeature_default_instance_;
class TrajectoryPointwiseFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPointwiseFeature> _instance;
} _TrajectoryPointwiseFeature_default_instance_;
class TrajectoryFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryFeature> _instance;
} _TrajectoryFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointwiseFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointwiseFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {
      &scc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
      &scc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,}};

static void InitDefaultsscc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {}};

static void InitDefaultsscc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointwiseFeature_ObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {}};

static void InitDefaultsscc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointwiseFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointwiseFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointwiseFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {
      &scc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,}};

static void InitDefaultsscc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointwiseFeature_ObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrajectoryFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {
      &scc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryPointwiseFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryPointwiseFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto}, {
      &scc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
      &scc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, lateral_distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, bound_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, crossable_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, dl_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, ddl_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, obstacle_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, left_bound_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, right_bound_feature_),
  2,
  3,
  4,
  5,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, longitudinal_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, obstacle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, lateral_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, relative_v_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, follow_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, overtake_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, nudge_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, stop_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, collision_times_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, virtual_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, lateral_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, path_curvature_abs_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, sidepass_front_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, sidepass_rear_obs_feature_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  6,
  7,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, path_input_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, speed_input_feature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, point_feature_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature)},
  { 7, 14, sizeof(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature)},
  { 16, 28, sizeof(::apollo::planning::autotuning::PathPointwiseFeature)},
  { 35, 45, sizeof(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature)},
  { 50, 71, sizeof(::apollo::planning::autotuning::SpeedPointwiseFeature)},
  { 87, 94, sizeof(::apollo::planning::autotuning::TrajectoryPointwiseFeature)},
  { 96, 102, sizeof(::apollo::planning::autotuning::TrajectoryFeature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_PathPointwiseFeature_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_SpeedPointwiseFeature_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_SpeedPointwiseFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_TrajectoryFeature_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/planning/proto/auto_tuning_mod"
  "el_input.proto\022\032apollo.planning.autotuni"
  "ng\"\371\004\n\024PathPointwiseFeature\022\t\n\001l\030\001 \001(\001\022\n"
  "\n\002dl\030\002 \001(\001\022\013\n\003ddl\030\003 \001(\001\022\r\n\005kappa\030\004 \001(\001\022W"
  "\n\robstacle_info\030\005 \003(\0132@.apollo.planning."
  "autotuning.PathPointwiseFeature.Obstacle"
  "Feature\022`\n\022left_bound_feature\030\006 \001(\0132D.ap"
  "ollo.planning.autotuning.PathPointwiseFe"
  "ature.BoundRelatedFeature\022a\n\023right_bound"
  "_feature\030\007 \001(\0132D.apollo.planning.autotun"
  "ing.PathPointwiseFeature.BoundRelatedFea"
  "ture\032+\n\017ObstacleFeature\022\030\n\020lateral_dista"
  "nce\030\001 \001(\001\032\342\001\n\023BoundRelatedFeature\022\026\n\016bou"
  "nd_distance\030\001 \001(\001\022l\n\017crossable_level\030\002 \001"
  "(\0162S.apollo.planning.autotuning.PathPoin"
  "twiseFeature.BoundRelatedFeature.Crossab"
  "leLevel\"E\n\016CrossableLevel\022\016\n\nCROSS_FREE\020"
  "\000\022\016\n\nCROSS_ABLE\020\001\022\023\n\017CROSS_FORBIDDEN\020\002\"\207"
  "\010\n\025SpeedPointwiseFeature\022\014\n\001s\030\001 \001(\001:\0010\022\014"
  "\n\001t\030\002 \001(\001:\0010\022\014\n\001v\030\003 \001(\001:\0010\022\026\n\013speed_limi"
  "t\030\004 \001(\001:\0010\022\016\n\003acc\030\005 \001(\001:\0010\022\017\n\004jerk\030\006 \001(\001"
  ":\0010\022]\n\022follow_obs_feature\030\007 \003(\0132A.apollo"
  ".planning.autotuning.SpeedPointwiseFeatu"
  "re.ObstacleFeature\022_\n\024overtake_obs_featu"
  "re\030\010 \003(\0132A.apollo.planning.autotuning.Sp"
  "eedPointwiseFeature.ObstacleFeature\022\\\n\021n"
  "udge_obs_feature\030\t \003(\0132A.apollo.planning"
  ".autotuning.SpeedPointwiseFeature.Obstac"
  "leFeature\022[\n\020stop_obs_feature\030\n \003(\0132A.ap"
  "ollo.planning.autotuning.SpeedPointwiseF"
  "eature.ObstacleFeature\022\032\n\017collision_time"
  "s\030\013 \001(\005:\0010\022^\n\023virtual_obs_feature\030\014 \003(\0132"
  "A.apollo.planning.autotuning.SpeedPointw"
  "iseFeature.ObstacleFeature\022\026\n\013lateral_ac"
  "c\030\r \001(\001:\0010\022\035\n\022path_curvature_abs\030\016 \001(\001:\001"
  "0\022e\n\032sidepass_front_obs_feature\030\017 \003(\0132A."
  "apollo.planning.autotuning.SpeedPointwis"
  "eFeature.ObstacleFeature\022d\n\031sidepass_rea"
  "r_obs_feature\030\020 \003(\0132A.apollo.planning.au"
  "totuning.SpeedPointwiseFeature.ObstacleF"
  "eature\032\217\001\n\017ObstacleFeature\022\035\n\025longitudin"
  "al_distance\030\001 \001(\001\022\026\n\016obstacle_speed\030\002 \001("
  "\001\022\034\n\020lateral_distance\030\003 \001(\001:\00210\022\023\n\013proba"
  "bility\030\004 \001(\001\022\022\n\nrelative_v\030\005 \001(\001\"\272\001\n\032Tra"
  "jectoryPointwiseFeature\022L\n\022path_input_fe"
  "ature\030\001 \001(\01320.apollo.planning.autotuning"
  ".PathPointwiseFeature\022N\n\023speed_input_fea"
  "ture\030\002 \001(\01321.apollo.planning.autotuning."
  "SpeedPointwiseFeature\"b\n\021TrajectoryFeatu"
  "re\022M\n\rpoint_feature\030\001 \003(\01326.apollo.plann"
  "ing.autotuning.TrajectoryPointwiseFeatur"
  "e"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_sccs[7] = {
  &scc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
  &scc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
  &scc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
  &scc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
  &scc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
  &scc_info_TrajectoryFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
  &scc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto, "modules/planning/proto/auto_tuning_model_input.proto", 2041,
  &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto, 7, file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto), true);
namespace apollo {
namespace planning {
namespace autotuning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[0];
}
bool PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FREE;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_ABLE;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FORBIDDEN;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MIN;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MAX;
constexpr int PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PathPointwiseFeature_ObstacleFeature::InitAsDefaultInstance() {
}
class PathPointwiseFeature_ObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointwiseFeature_ObstacleFeature>()._has_bits_);
  static void set_has_lateral_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}
PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature(const PathPointwiseFeature_ObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lateral_distance_ = from.lateral_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

void PathPointwiseFeature_ObstacleFeature::SharedCtor() {
  lateral_distance_ = 0;
}

PathPointwiseFeature_ObstacleFeature::~PathPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  SharedDtor();
}

void PathPointwiseFeature_ObstacleFeature::SharedDtor() {
}

void PathPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPointwiseFeature_ObstacleFeature& PathPointwiseFeature_ObstacleFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void PathPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lateral_distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PathPointwiseFeature_ObstacleFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_distance(&has_bits);
          lateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPointwiseFeature_ObstacleFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return target;
}

size_t PathPointwiseFeature_ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double lateral_distance = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointwiseFeature_ObstacleFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointwiseFeature_ObstacleFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPointwiseFeature_ObstacleFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature_ObstacleFeature::MergeFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lateral_distance()) {
    _internal_set_lateral_distance(from._internal_lateral_distance());
  }
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_ObstacleFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature_ObstacleFeature::InternalSwap(PathPointwiseFeature_ObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lateral_distance_, other->lateral_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointwiseFeature_ObstacleFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPointwiseFeature_BoundRelatedFeature::InitAsDefaultInstance() {
}
class PathPointwiseFeature_BoundRelatedFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointwiseFeature_BoundRelatedFeature>()._has_bits_);
  static void set_has_bound_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crossable_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}
PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature(const PathPointwiseFeature_BoundRelatedFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bound_distance_, &from.bound_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&crossable_level_) -
    reinterpret_cast<char*>(&bound_distance_)) + sizeof(crossable_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

void PathPointwiseFeature_BoundRelatedFeature::SharedCtor() {
  ::memset(&bound_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crossable_level_) -
      reinterpret_cast<char*>(&bound_distance_)) + sizeof(crossable_level_));
}

PathPointwiseFeature_BoundRelatedFeature::~PathPointwiseFeature_BoundRelatedFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  SharedDtor();
}

void PathPointwiseFeature_BoundRelatedFeature::SharedDtor() {
}

void PathPointwiseFeature_BoundRelatedFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature_BoundRelatedFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPointwiseFeature_BoundRelatedFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void PathPointwiseFeature_BoundRelatedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&bound_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crossable_level_) -
        reinterpret_cast<char*>(&bound_distance_)) + sizeof(crossable_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PathPointwiseFeature_BoundRelatedFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double bound_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_bound_distance(&has_bits);
          bound_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(val))) {
            _internal_set_crossable_level(static_cast<::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPointwiseFeature_BoundRelatedFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bound_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_bound_distance(), target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_crossable_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return target;
}

size_t PathPointwiseFeature_BoundRelatedFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double bound_distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crossable_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointwiseFeature_BoundRelatedFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPointwiseFeature_BoundRelatedFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bound_distance_ = from.bound_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      crossable_level_ = from.crossable_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_BoundRelatedFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature_BoundRelatedFeature::InternalSwap(PathPointwiseFeature_BoundRelatedFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bound_distance_, other->bound_distance_);
  swap(crossable_level_, other->crossable_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointwiseFeature_BoundRelatedFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathPointwiseFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_._instance.get_mutable()->left_bound_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(
      ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::internal_default_instance());
  ::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_._instance.get_mutable()->right_bound_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(
      ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::internal_default_instance());
}
class PathPointwiseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointwiseFeature>()._has_bits_);
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ddl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& left_bound_feature(const PathPointwiseFeature* msg);
  static void set_has_left_bound_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& right_bound_feature(const PathPointwiseFeature* msg);
  static void set_has_right_bound_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature&
PathPointwiseFeature::_Internal::left_bound_feature(const PathPointwiseFeature* msg) {
  return *msg->left_bound_feature_;
}
const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature&
PathPointwiseFeature::_Internal::right_bound_feature(const PathPointwiseFeature* msg) {
  return *msg->right_bound_feature_;
}
PathPointwiseFeature::PathPointwiseFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature)
}
PathPointwiseFeature::PathPointwiseFeature(const PathPointwiseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacle_info_(from.obstacle_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_left_bound_feature()) {
    left_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature(*from.left_bound_feature_);
  } else {
    left_bound_feature_ = nullptr;
  }
  if (from._internal_has_right_bound_feature()) {
    right_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature(*from.right_bound_feature_);
  } else {
    right_bound_feature_ = nullptr;
  }
  ::memcpy(&l_, &from.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&kappa_) -
    reinterpret_cast<char*>(&l_)) + sizeof(kappa_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature)
}

void PathPointwiseFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  ::memset(&left_bound_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&left_bound_feature_)) + sizeof(kappa_));
}

PathPointwiseFeature::~PathPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature)
  SharedDtor();
}

void PathPointwiseFeature::SharedDtor() {
  if (this != internal_default_instance()) delete left_bound_feature_;
  if (this != internal_default_instance()) delete right_bound_feature_;
}

void PathPointwiseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPointwiseFeature& PathPointwiseFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void PathPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_bound_feature_ != nullptr);
      left_bound_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_bound_feature_ != nullptr);
      right_bound_feature_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&l_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kappa_) -
        reinterpret_cast<char*>(&l_)) + sizeof(kappa_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PathPointwiseFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_dl(&has_bits);
          dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ddl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_ddl(&has_bits);
          ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_kappa(&has_bits);
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_bound_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_bound_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPointwiseFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_l(), target);
  }

  // optional double dl = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dl(), target);
  }

  // optional double ddl = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ddl(), target);
  }

  // optional double kappa = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_kappa(), target);
  }

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_obstacle_info(i), target, stream);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::left_bound_feature(this), target, stream);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::right_bound_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature)
  return target;
}

size_t PathPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  total_size += 1UL * this->_internal_obstacle_info_size();
  for (const auto& msg : this->obstacle_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *left_bound_feature_);
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_bound_feature_);
    }

    // optional double l = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double dl = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ddl = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointwiseFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointwiseFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPointwiseFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature::MergeFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_info_.MergeFrom(from.obstacle_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from._internal_left_bound_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from._internal_right_bound_feature());
    }
    if (cached_has_bits & 0x00000004u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000008u) {
      dl_ = from.dl_;
    }
    if (cached_has_bits & 0x00000010u) {
      ddl_ = from.ddl_;
    }
    if (cached_has_bits & 0x00000020u) {
      kappa_ = from.kappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPointwiseFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature::CopyFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature::InternalSwap(PathPointwiseFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_info_.InternalSwap(&other->obstacle_info_);
  swap(left_bound_feature_, other->left_bound_feature_);
  swap(right_bound_feature_, other->right_bound_feature_);
  swap(l_, other->l_);
  swap(dl_, other->dl_);
  swap(ddl_, other->ddl_);
  swap(kappa_, other->kappa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointwiseFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedPointwiseFeature_ObstacleFeature::InitAsDefaultInstance() {
}
class SpeedPointwiseFeature_ObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointwiseFeature_ObstacleFeature>()._has_bits_);
  static void set_has_longitudinal_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lateral_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relative_v(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}
SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature(const SpeedPointwiseFeature_ObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitudinal_distance_, &from.longitudinal_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&lateral_distance_) -
    reinterpret_cast<char*>(&longitudinal_distance_)) + sizeof(lateral_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

void SpeedPointwiseFeature_ObstacleFeature::SharedCtor() {
  ::memset(&longitudinal_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_v_) -
      reinterpret_cast<char*>(&longitudinal_distance_)) + sizeof(relative_v_));
  lateral_distance_ = 10;
}

SpeedPointwiseFeature_ObstacleFeature::~SpeedPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  SharedDtor();
}

void SpeedPointwiseFeature_ObstacleFeature::SharedDtor() {
}

void SpeedPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature_ObstacleFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPointwiseFeature_ObstacleFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void SpeedPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&longitudinal_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relative_v_) -
        reinterpret_cast<char*>(&longitudinal_distance_)) + sizeof(relative_v_));
    lateral_distance_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpeedPointwiseFeature_ObstacleFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double longitudinal_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_longitudinal_distance(&has_bits);
          longitudinal_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double obstacle_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_obstacle_speed(&has_bits);
          obstacle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_distance = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lateral_distance(&has_bits);
          lateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_relative_v(&has_bits);
          relative_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPointwiseFeature_ObstacleFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitudinal_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitudinal_distance(), target);
  }

  // optional double obstacle_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_obstacle_speed(), target);
  }

  // optional double lateral_distance = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lateral_distance(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_probability(), target);
  }

  // optional double relative_v = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_relative_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return target;
}

size_t SpeedPointwiseFeature_ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double longitudinal_distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double probability = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double lateral_distance = 3 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointwiseFeature_ObstacleFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPointwiseFeature_ObstacleFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
    MergeFrom(*source);
  }
}

void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      longitudinal_distance_ = from.longitudinal_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_speed_ = from.obstacle_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      relative_v_ = from.relative_v_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_distance_ = from.lateral_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature_ObstacleFeature::IsInitialized() const {
  return true;
}

void SpeedPointwiseFeature_ObstacleFeature::InternalSwap(SpeedPointwiseFeature_ObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(longitudinal_distance_, other->longitudinal_distance_);
  swap(obstacle_speed_, other->obstacle_speed_);
  swap(probability_, other->probability_);
  swap(relative_v_, other->relative_v_);
  swap(lateral_distance_, other->lateral_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointwiseFeature_ObstacleFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedPointwiseFeature::InitAsDefaultInstance() {
}
class SpeedPointwiseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointwiseFeature>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_collision_times(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateral_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_path_curvature_abs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SpeedPointwiseFeature::SpeedPointwiseFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}
SpeedPointwiseFeature::SpeedPointwiseFeature(const SpeedPointwiseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      follow_obs_feature_(from.follow_obs_feature_),
      overtake_obs_feature_(from.overtake_obs_feature_),
      nudge_obs_feature_(from.nudge_obs_feature_),
      stop_obs_feature_(from.stop_obs_feature_),
      virtual_obs_feature_(from.virtual_obs_feature_),
      sidepass_front_obs_feature_(from.sidepass_front_obs_feature_),
      sidepass_rear_obs_feature_(from.sidepass_rear_obs_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_times_) -
    reinterpret_cast<char*>(&s_)) + sizeof(collision_times_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}

void SpeedPointwiseFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_times_) -
      reinterpret_cast<char*>(&s_)) + sizeof(collision_times_));
}

SpeedPointwiseFeature::~SpeedPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature)
  SharedDtor();
}

void SpeedPointwiseFeature::SharedDtor() {
}

void SpeedPointwiseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPointwiseFeature& SpeedPointwiseFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void SpeedPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  follow_obs_feature_.Clear();
  overtake_obs_feature_.Clear();
  nudge_obs_feature_.Clear();
  stop_obs_feature_.Clear();
  virtual_obs_feature_.Clear();
  sidepass_front_obs_feature_.Clear();
  sidepass_rear_obs_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_curvature_abs_) -
        reinterpret_cast<char*>(&s_)) + sizeof(path_curvature_abs_));
  }
  collision_times_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpeedPointwiseFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double t = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_t(&has_bits);
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double v = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_acc(&has_bits);
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_jerk(&has_bits);
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_follow_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overtake_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nudge_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 collision_times = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_collision_times(&has_bits);
          collision_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double lateral_acc = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_lateral_acc(&has_bits);
          lateral_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_curvature_abs = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_path_curvature_abs(&has_bits);
          path_curvature_abs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sidepass_front_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sidepass_rear_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPointwiseFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double t = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // optional double v = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // optional double speed_limit = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_limit(), target);
  }

  // optional double acc = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acc(), target);
  }

  // optional double jerk = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_jerk(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_follow_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_follow_obs_feature(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overtake_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_overtake_obs_feature(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nudge_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_nudge_obs_feature(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_stop_obs_feature(i), target, stream);
  }

  // optional int32 collision_times = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_collision_times(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtual_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_virtual_obs_feature(i), target, stream);
  }

  // optional double lateral_acc = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_lateral_acc(), target);
  }

  // optional double path_curvature_abs = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_path_curvature_abs(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sidepass_front_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_sidepass_front_obs_feature(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sidepass_rear_obs_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_sidepass_rear_obs_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature)
  return target;
}

size_t SpeedPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  total_size += 1UL * this->_internal_follow_obs_feature_size();
  for (const auto& msg : this->follow_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  total_size += 1UL * this->_internal_overtake_obs_feature_size();
  for (const auto& msg : this->overtake_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  total_size += 1UL * this->_internal_nudge_obs_feature_size();
  for (const auto& msg : this->nudge_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  total_size += 1UL * this->_internal_stop_obs_feature_size();
  for (const auto& msg : this->stop_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  total_size += 1UL * this->_internal_virtual_obs_feature_size();
  for (const auto& msg : this->virtual_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  total_size += 1UL * this->_internal_sidepass_front_obs_feature_size();
  for (const auto& msg : this->sidepass_front_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  total_size += 2UL * this->_internal_sidepass_rear_obs_feature_size();
  for (const auto& msg : this->sidepass_rear_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double s = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double t = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double acc = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double jerk = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double lateral_acc = 13 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double path_curvature_abs = 14 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional int32 collision_times = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_collision_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointwiseFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointwiseFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPointwiseFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointwiseFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointwiseFeature)
    MergeFrom(*source);
  }
}

void SpeedPointwiseFeature::MergeFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  follow_obs_feature_.MergeFrom(from.follow_obs_feature_);
  overtake_obs_feature_.MergeFrom(from.overtake_obs_feature_);
  nudge_obs_feature_.MergeFrom(from.nudge_obs_feature_);
  stop_obs_feature_.MergeFrom(from.stop_obs_feature_);
  virtual_obs_feature_.MergeFrom(from.virtual_obs_feature_);
  sidepass_front_obs_feature_.MergeFrom(from.sidepass_front_obs_feature_);
  sidepass_rear_obs_feature_.MergeFrom(from.sidepass_rear_obs_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_ = from.acc_;
    }
    if (cached_has_bits & 0x00000020u) {
      jerk_ = from.jerk_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_acc_ = from.lateral_acc_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_curvature_abs_ = from.path_curvature_abs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_collision_times(from._internal_collision_times());
  }
}

void SpeedPointwiseFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointwiseFeature::CopyFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature::IsInitialized() const {
  return true;
}

void SpeedPointwiseFeature::InternalSwap(SpeedPointwiseFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  follow_obs_feature_.InternalSwap(&other->follow_obs_feature_);
  overtake_obs_feature_.InternalSwap(&other->overtake_obs_feature_);
  nudge_obs_feature_.InternalSwap(&other->nudge_obs_feature_);
  stop_obs_feature_.InternalSwap(&other->stop_obs_feature_);
  virtual_obs_feature_.InternalSwap(&other->virtual_obs_feature_);
  sidepass_front_obs_feature_.InternalSwap(&other->sidepass_front_obs_feature_);
  sidepass_rear_obs_feature_.InternalSwap(&other->sidepass_rear_obs_feature_);
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(v_, other->v_);
  swap(speed_limit_, other->speed_limit_);
  swap(acc_, other->acc_);
  swap(jerk_, other->jerk_);
  swap(lateral_acc_, other->lateral_acc_);
  swap(path_curvature_abs_, other->path_curvature_abs_);
  swap(collision_times_, other->collision_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointwiseFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPointwiseFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_._instance.get_mutable()->path_input_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature*>(
      ::apollo::planning::autotuning::PathPointwiseFeature::internal_default_instance());
  ::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_._instance.get_mutable()->speed_input_feature_ = const_cast< ::apollo::planning::autotuning::SpeedPointwiseFeature*>(
      ::apollo::planning::autotuning::SpeedPointwiseFeature::internal_default_instance());
}
class TrajectoryPointwiseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointwiseFeature>()._has_bits_);
  static const ::apollo::planning::autotuning::PathPointwiseFeature& path_input_feature(const TrajectoryPointwiseFeature* msg);
  static void set_has_path_input_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::autotuning::SpeedPointwiseFeature& speed_input_feature(const TrajectoryPointwiseFeature* msg);
  static void set_has_speed_input_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::autotuning::PathPointwiseFeature&
TrajectoryPointwiseFeature::_Internal::path_input_feature(const TrajectoryPointwiseFeature* msg) {
  return *msg->path_input_feature_;
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature&
TrajectoryPointwiseFeature::_Internal::speed_input_feature(const TrajectoryPointwiseFeature* msg) {
  return *msg->speed_input_feature_;
}
TrajectoryPointwiseFeature::TrajectoryPointwiseFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}
TrajectoryPointwiseFeature::TrajectoryPointwiseFeature(const TrajectoryPointwiseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path_input_feature()) {
    path_input_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature(*from.path_input_feature_);
  } else {
    path_input_feature_ = nullptr;
  }
  if (from._internal_has_speed_input_feature()) {
    speed_input_feature_ = new ::apollo::planning::autotuning::SpeedPointwiseFeature(*from.speed_input_feature_);
  } else {
    speed_input_feature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

void TrajectoryPointwiseFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  ::memset(&path_input_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_input_feature_) -
      reinterpret_cast<char*>(&path_input_feature_)) + sizeof(speed_input_feature_));
}

TrajectoryPointwiseFeature::~TrajectoryPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  SharedDtor();
}

void TrajectoryPointwiseFeature::SharedDtor() {
  if (this != internal_default_instance()) delete path_input_feature_;
  if (this != internal_default_instance()) delete speed_input_feature_;
}

void TrajectoryPointwiseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPointwiseFeature& TrajectoryPointwiseFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPointwiseFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_input_feature_ != nullptr);
      path_input_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_input_feature_ != nullptr);
      speed_input_feature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajectoryPointwiseFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_input_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_input_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPointwiseFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_input_feature(this), target, stream);
  }

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::speed_input_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return target;
}

size_t TrajectoryPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_input_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_input_feature_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPointwiseFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointwiseFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPointwiseFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryPointwiseFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryPointwiseFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointwiseFeature::MergeFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_input_feature()->::apollo::planning::autotuning::PathPointwiseFeature::MergeFrom(from._internal_path_input_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speed_input_feature()->::apollo::planning::autotuning::SpeedPointwiseFeature::MergeFrom(from._internal_speed_input_feature());
    }
  }
}

void TrajectoryPointwiseFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointwiseFeature::CopyFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointwiseFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointwiseFeature::InternalSwap(TrajectoryPointwiseFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(path_input_feature_, other->path_input_feature_);
  swap(speed_input_feature_, other->speed_input_feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointwiseFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryFeature::InitAsDefaultInstance() {
}
class TrajectoryFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryFeature>()._has_bits_);
};

TrajectoryFeature::TrajectoryFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryFeature)
}
TrajectoryFeature::TrajectoryFeature(const TrajectoryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_feature_(from.point_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryFeature)
}

void TrajectoryFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
}

TrajectoryFeature::~TrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryFeature)
  SharedDtor();
}

void TrajectoryFeature::SharedDtor() {
}

void TrajectoryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryFeature& TrajectoryFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_feature_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajectoryFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point_feature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryFeature)
  return target;
}

size_t TrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  total_size += 1UL * this->_internal_point_feature_size();
  for (const auto& msg : this->point_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryFeature)
    MergeFrom(*source);
  }
}

void TrajectoryFeature::MergeFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_feature_.MergeFrom(from.point_feature_);
}

void TrajectoryFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryFeature::CopyFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryFeature::IsInitialized() const {
  return true;
}

void TrajectoryFeature::InternalSwap(TrajectoryFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_feature_.InternalSwap(&other->point_feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointwiseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointwiseFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointwiseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointwiseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryPointwiseFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
