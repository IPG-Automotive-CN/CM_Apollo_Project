// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_partition_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto;
namespace apollo {
namespace planning {
class OpenSpaceTrajectoryPartitionConfig;
class OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal _OpenSpaceTrajectoryPartitionConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryPartitionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class OpenSpaceTrajectoryPartitionConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceTrajectoryPartitionConfig) */ {
 public:
  OpenSpaceTrajectoryPartitionConfig();
  virtual ~OpenSpaceTrajectoryPartitionConfig();

  OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from);
  OpenSpaceTrajectoryPartitionConfig(OpenSpaceTrajectoryPartitionConfig&& from) noexcept
    : OpenSpaceTrajectoryPartitionConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceTrajectoryPartitionConfig& operator=(const OpenSpaceTrajectoryPartitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSpaceTrajectoryPartitionConfig& operator=(OpenSpaceTrajectoryPartitionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenSpaceTrajectoryPartitionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceTrajectoryPartitionConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryPartitionConfig*>(
               &_OpenSpaceTrajectoryPartitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenSpaceTrajectoryPartitionConfig& a, OpenSpaceTrajectoryPartitionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSpaceTrajectoryPartitionConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryPartitionConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryPartitionConfig>(nullptr);
  }

  OpenSpaceTrajectoryPartitionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryPartitionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceTrajectoryPartitionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.OpenSpaceTrajectoryPartitionConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGearShiftMaxTFieldNumber = 1,
    kGearShiftUnitTFieldNumber = 2,
    kGearShiftPeriodDurationFieldNumber = 3,
    kInterpolatedPiecesNumFieldNumber = 4,
    kInitialGearCheckHorizonFieldNumber = 5,
    kHeadingSearchRangeFieldNumber = 6,
    kHeadingTrackRangeFieldNumber = 7,
    kHeadingOffsetToMidpointFieldNumber = 9,
    kDistanceSearchRangeFieldNumber = 8,
    kLateralOffsetToMidpointFieldNumber = 10,
    kLongitudinalOffsetToMidpointFieldNumber = 11,
    kVehicleBoxIouThresholdToMidpointFieldNumber = 12,
  };
  // optional double gear_shift_max_t = 1;
  bool has_gear_shift_max_t() const;
  private:
  bool _internal_has_gear_shift_max_t() const;
  public:
  void clear_gear_shift_max_t();
  double gear_shift_max_t() const;
  void set_gear_shift_max_t(double value);
  private:
  double _internal_gear_shift_max_t() const;
  void _internal_set_gear_shift_max_t(double value);
  public:

  // optional double gear_shift_unit_t = 2;
  bool has_gear_shift_unit_t() const;
  private:
  bool _internal_has_gear_shift_unit_t() const;
  public:
  void clear_gear_shift_unit_t();
  double gear_shift_unit_t() const;
  void set_gear_shift_unit_t(double value);
  private:
  double _internal_gear_shift_unit_t() const;
  void _internal_set_gear_shift_unit_t(double value);
  public:

  // optional double gear_shift_period_duration = 3;
  bool has_gear_shift_period_duration() const;
  private:
  bool _internal_has_gear_shift_period_duration() const;
  public:
  void clear_gear_shift_period_duration();
  double gear_shift_period_duration() const;
  void set_gear_shift_period_duration(double value);
  private:
  double _internal_gear_shift_period_duration() const;
  void _internal_set_gear_shift_period_duration(double value);
  public:

  // optional uint64 interpolated_pieces_num = 4;
  bool has_interpolated_pieces_num() const;
  private:
  bool _internal_has_interpolated_pieces_num() const;
  public:
  void clear_interpolated_pieces_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 interpolated_pieces_num() const;
  void set_interpolated_pieces_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_interpolated_pieces_num() const;
  void _internal_set_interpolated_pieces_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 initial_gear_check_horizon = 5;
  bool has_initial_gear_check_horizon() const;
  private:
  bool _internal_has_initial_gear_check_horizon() const;
  public:
  void clear_initial_gear_check_horizon();
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_gear_check_horizon() const;
  void set_initial_gear_check_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initial_gear_check_horizon() const;
  void _internal_set_initial_gear_check_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double heading_search_range = 6;
  bool has_heading_search_range() const;
  private:
  bool _internal_has_heading_search_range() const;
  public:
  void clear_heading_search_range();
  double heading_search_range() const;
  void set_heading_search_range(double value);
  private:
  double _internal_heading_search_range() const;
  void _internal_set_heading_search_range(double value);
  public:

  // optional double heading_track_range = 7;
  bool has_heading_track_range() const;
  private:
  bool _internal_has_heading_track_range() const;
  public:
  void clear_heading_track_range();
  double heading_track_range() const;
  void set_heading_track_range(double value);
  private:
  double _internal_heading_track_range() const;
  void _internal_set_heading_track_range(double value);
  public:

  // optional double heading_offset_to_midpoint = 9;
  bool has_heading_offset_to_midpoint() const;
  private:
  bool _internal_has_heading_offset_to_midpoint() const;
  public:
  void clear_heading_offset_to_midpoint();
  double heading_offset_to_midpoint() const;
  void set_heading_offset_to_midpoint(double value);
  private:
  double _internal_heading_offset_to_midpoint() const;
  void _internal_set_heading_offset_to_midpoint(double value);
  public:

  // optional double distance_search_range = 8 [default = 1e-06];
  bool has_distance_search_range() const;
  private:
  bool _internal_has_distance_search_range() const;
  public:
  void clear_distance_search_range();
  double distance_search_range() const;
  void set_distance_search_range(double value);
  private:
  double _internal_distance_search_range() const;
  void _internal_set_distance_search_range(double value);
  public:

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  bool has_lateral_offset_to_midpoint() const;
  private:
  bool _internal_has_lateral_offset_to_midpoint() const;
  public:
  void clear_lateral_offset_to_midpoint();
  double lateral_offset_to_midpoint() const;
  void set_lateral_offset_to_midpoint(double value);
  private:
  double _internal_lateral_offset_to_midpoint() const;
  void _internal_set_lateral_offset_to_midpoint(double value);
  public:

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  bool has_longitudinal_offset_to_midpoint() const;
  private:
  bool _internal_has_longitudinal_offset_to_midpoint() const;
  public:
  void clear_longitudinal_offset_to_midpoint();
  double longitudinal_offset_to_midpoint() const;
  void set_longitudinal_offset_to_midpoint(double value);
  private:
  double _internal_longitudinal_offset_to_midpoint() const;
  void _internal_set_longitudinal_offset_to_midpoint(double value);
  public:

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  bool has_vehicle_box_iou_threshold_to_midpoint() const;
  private:
  bool _internal_has_vehicle_box_iou_threshold_to_midpoint() const;
  public:
  void clear_vehicle_box_iou_threshold_to_midpoint();
  double vehicle_box_iou_threshold_to_midpoint() const;
  void set_vehicle_box_iou_threshold_to_midpoint(double value);
  private:
  double _internal_vehicle_box_iou_threshold_to_midpoint() const;
  void _internal_set_vehicle_box_iou_threshold_to_midpoint(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double gear_shift_max_t_;
  double gear_shift_unit_t_;
  double gear_shift_period_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 interpolated_pieces_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_gear_check_horizon_;
  double heading_search_range_;
  double heading_track_range_;
  double heading_offset_to_midpoint_;
  double distance_search_range_;
  double lateral_offset_to_midpoint_;
  double longitudinal_offset_to_midpoint_;
  double vehicle_box_iou_threshold_to_midpoint_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSpaceTrajectoryPartitionConfig

// optional double gear_shift_max_t = 1;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_gear_shift_max_t() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return _internal_has_gear_shift_max_t();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_gear_shift_max_t() const {
  return gear_shift_max_t_;
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
  return _internal_gear_shift_max_t();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_gear_shift_max_t(double value) {
  _has_bits_[0] |= 0x00000001u;
  gear_shift_max_t_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  _internal_set_gear_shift_max_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 2;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_gear_shift_unit_t() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return _internal_has_gear_shift_unit_t();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_gear_shift_unit_t() const {
  return gear_shift_unit_t_;
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
  return _internal_gear_shift_unit_t();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_gear_shift_unit_t(double value) {
  _has_bits_[0] |= 0x00000002u;
  gear_shift_unit_t_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  _internal_set_gear_shift_unit_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
}

// optional double gear_shift_period_duration = 3;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_gear_shift_period_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return _internal_has_gear_shift_period_duration();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_gear_shift_period_duration() const {
  return gear_shift_period_duration_;
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
  return _internal_gear_shift_period_duration();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_gear_shift_period_duration(double value) {
  _has_bits_[0] |= 0x00000004u;
  gear_shift_period_duration_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  _internal_set_gear_shift_period_duration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional uint64 interpolated_pieces_num = 4;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_interpolated_pieces_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return _internal_has_interpolated_pieces_num();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenSpaceTrajectoryPartitionConfig::_internal_interpolated_pieces_num() const {
  return interpolated_pieces_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenSpaceTrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
  return _internal_interpolated_pieces_num();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_interpolated_pieces_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  interpolated_pieces_num_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_interpolated_pieces_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_interpolated_pieces_num(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 5;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_initial_gear_check_horizon() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return _internal_has_initial_gear_check_horizon();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenSpaceTrajectoryPartitionConfig::_internal_initial_gear_check_horizon() const {
  return initial_gear_check_horizon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenSpaceTrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
  return _internal_initial_gear_check_horizon();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_initial_gear_check_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  initial_gear_check_horizon_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_initial_gear_check_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initial_gear_check_horizon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_search_range = 6;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_heading_search_range() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_search_range() const {
  return _internal_has_heading_search_range();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_search_range() {
  heading_search_range_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_heading_search_range() const {
  return heading_search_range_;
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
  return _internal_heading_search_range();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_heading_search_range(double value) {
  _has_bits_[0] |= 0x00000020u;
  heading_search_range_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_search_range(double value) {
  _internal_set_heading_search_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
}

// optional double heading_track_range = 7;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_heading_track_range() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_track_range() const {
  return _internal_has_heading_track_range();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_track_range() {
  heading_track_range_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_heading_track_range() const {
  return heading_track_range_;
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_track_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
  return _internal_heading_track_range();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_heading_track_range(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_track_range_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_track_range(double value) {
  _internal_set_heading_track_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
}

// optional double distance_search_range = 8 [default = 1e-06];
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_distance_search_range() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_distance_search_range() const {
  return _internal_has_distance_search_range();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_distance_search_range() {
  distance_search_range_ = 1e-06;
  _has_bits_[0] &= ~0x00000100u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_distance_search_range() const {
  return distance_search_range_;
}
inline double OpenSpaceTrajectoryPartitionConfig::distance_search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
  return _internal_distance_search_range();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_distance_search_range(double value) {
  _has_bits_[0] |= 0x00000100u;
  distance_search_range_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_distance_search_range(double value) {
  _internal_set_distance_search_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
}

// optional double heading_offset_to_midpoint = 9;
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_heading_offset_to_midpoint() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_offset_to_midpoint() const {
  return _internal_has_heading_offset_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_offset_to_midpoint() {
  heading_offset_to_midpoint_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_heading_offset_to_midpoint() const {
  return heading_offset_to_midpoint_;
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
  return _internal_heading_offset_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_heading_offset_to_midpoint(double value) {
  _has_bits_[0] |= 0x00000080u;
  heading_offset_to_midpoint_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_offset_to_midpoint(double value) {
  _internal_set_heading_offset_to_midpoint(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
}

// optional double lateral_offset_to_midpoint = 10 [default = 0.1];
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_lateral_offset_to_midpoint() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_lateral_offset_to_midpoint() const {
  return _internal_has_lateral_offset_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_lateral_offset_to_midpoint() {
  lateral_offset_to_midpoint_ = 0.1;
  _has_bits_[0] &= ~0x00000200u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_lateral_offset_to_midpoint() const {
  return lateral_offset_to_midpoint_;
}
inline double OpenSpaceTrajectoryPartitionConfig::lateral_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
  return _internal_lateral_offset_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_lateral_offset_to_midpoint(double value) {
  _has_bits_[0] |= 0x00000200u;
  lateral_offset_to_midpoint_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_lateral_offset_to_midpoint(double value) {
  _internal_set_lateral_offset_to_midpoint(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
}

// optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_longitudinal_offset_to_midpoint() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_longitudinal_offset_to_midpoint() const {
  return _internal_has_longitudinal_offset_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_longitudinal_offset_to_midpoint() {
  longitudinal_offset_to_midpoint_ = 0.1;
  _has_bits_[0] &= ~0x00000400u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_longitudinal_offset_to_midpoint() const {
  return longitudinal_offset_to_midpoint_;
}
inline double OpenSpaceTrajectoryPartitionConfig::longitudinal_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
  return _internal_longitudinal_offset_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_longitudinal_offset_to_midpoint(double value) {
  _has_bits_[0] |= 0x00000400u;
  longitudinal_offset_to_midpoint_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_longitudinal_offset_to_midpoint(double value) {
  _internal_set_longitudinal_offset_to_midpoint(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
}

// optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
inline bool OpenSpaceTrajectoryPartitionConfig::_internal_has_vehicle_box_iou_threshold_to_midpoint() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryPartitionConfig::has_vehicle_box_iou_threshold_to_midpoint() const {
  return _internal_has_vehicle_box_iou_threshold_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_vehicle_box_iou_threshold_to_midpoint() {
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  _has_bits_[0] &= ~0x00000800u;
}
inline double OpenSpaceTrajectoryPartitionConfig::_internal_vehicle_box_iou_threshold_to_midpoint() const {
  return vehicle_box_iou_threshold_to_midpoint_;
}
inline double OpenSpaceTrajectoryPartitionConfig::vehicle_box_iou_threshold_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
  return _internal_vehicle_box_iou_threshold_to_midpoint();
}
inline void OpenSpaceTrajectoryPartitionConfig::_internal_set_vehicle_box_iou_threshold_to_midpoint(double value) {
  _has_bits_[0] |= 0x00000800u;
  vehicle_box_iou_threshold_to_midpoint_ = value;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_vehicle_box_iou_threshold_to_midpoint(double value) {
  _internal_set_vehicle_box_iou_threshold_to_midpoint(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto
