// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_raw_feature.proto

#include "modules/planning/proto/auto_tuning_raw_feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrenetFramePoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
namespace apollo {
namespace planning {
namespace autotuning {
class PathPointRawFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPointRawFeature> _instance;
} _PathPointRawFeature_default_instance_;
class SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPointRawFeature_ObjectDecisionFeature> _instance;
} _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
class SpeedPointRawFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPointRawFeature> _instance;
} _SpeedPointRawFeature_default_instance_;
class ObstacleSTRawData_STPointPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleSTRawData_STPointPair> _instance;
} _ObstacleSTRawData_STPointPair_default_instance_;
class ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleSTRawData_ObstacleSTData> _instance;
} _ObstacleSTRawData_ObstacleSTData_default_instance_;
class ObstacleSTRawDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleSTRawData> _instance;
} _ObstacleSTRawData_default_instance_;
class TrajectoryPointRawFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPointRawFeature> _instance;
} _TrajectoryPointRawFeature_default_instance_;
class TrajectoryRawFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryRawFeature> _instance;
} _TrajectoryRawFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_ObstacleSTRawData_default_instance_;
    new (ptr) ::apollo::planning::autotuning::ObstacleSTRawData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::ObstacleSTRawData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {
      &scc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_ObstacleSTRawData_ObstacleSTData_default_instance_;
    new (ptr) ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {
      &scc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_ObstacleSTRawData_STPointPair_default_instance_;
    new (ptr) ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointRawFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointRawFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {
      &scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_FrenetFramePoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointRawFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointRawFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {
      &scc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryPointRawFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryPointRawFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {
      &scc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
      &scc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryRawFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryRawFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto}, {
      &scc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
      &scc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, cartesian_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, frenet_coord_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, relative_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, relative_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, relative_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, speed_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, j_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, follow_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, overtake_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, virtual_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, collision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, nudge_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, sidepass_front_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, sidepass_rear_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, keep_clear_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, s_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, s_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, l_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, is_virtual_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, polygon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, distribution_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, obstacle_st_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, obstacle_st_nudge_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, obstacle_st_sidepass_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, path_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, speed_feature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, point_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, st_raw_data_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::planning::autotuning::PathPointRawFeature)},
  { 9, 19, sizeof(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature)},
  { 24, 44, sizeof(::apollo::planning::autotuning::SpeedPointRawFeature)},
  { 59, 68, sizeof(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair)},
  { 72, 83, sizeof(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData)},
  { 89, 97, sizeof(::apollo::planning::autotuning::ObstacleSTRawData)},
  { 100, 107, sizeof(::apollo::planning::autotuning::TrajectoryPointRawFeature)},
  { 109, 116, sizeof(::apollo::planning::autotuning::TrajectoryRawFeature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_PathPointRawFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_SpeedPointRawFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_ObstacleSTRawData_STPointPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_ObstacleSTRawData_ObstacleSTData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_ObstacleSTRawData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/planning/proto/auto_tuning_raw"
  "_feature.proto\022\032apollo.planning.autotuni"
  "ng\032$modules/common/proto/pnc_point.proto"
  "\"\177\n\023PathPointRawFeature\0221\n\017cartesian_coo"
  "rd\030\001 \001(\0132\030.apollo.common.PathPoint\0225\n\014fr"
  "enet_coord\030\002 \001(\0132\037.apollo.common.FrenetF"
  "ramePoint\"\211\010\n\024SpeedPointRawFeature\022\t\n\001s\030"
  "\001 \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\t"
  "\n\001j\030\005 \001(\001\022\023\n\013speed_limit\030\006 \001(\001\022V\n\006follow"
  "\030\n \003(\0132F.apollo.planning.autotuning.Spee"
  "dPointRawFeature.ObjectDecisionFeature\022X"
  "\n\010overtake\030\013 \003(\0132F.apollo.planning.autot"
  "uning.SpeedPointRawFeature.ObjectDecisio"
  "nFeature\022`\n\020virtual_decision\030\r \003(\0132F.apo"
  "llo.planning.autotuning.SpeedPointRawFea"
  "ture.ObjectDecisionFeature\022T\n\004stop\030\016 \003(\013"
  "2F.apollo.planning.autotuning.SpeedPoint"
  "RawFeature.ObjectDecisionFeature\022Y\n\tcoll"
  "ision\030\017 \003(\0132F.apollo.planning.autotuning"
  ".SpeedPointRawFeature.ObjectDecisionFeat"
  "ure\022U\n\005nudge\030\014 \003(\0132F.apollo.planning.aut"
  "otuning.SpeedPointRawFeature.ObjectDecis"
  "ionFeature\022^\n\016sidepass_front\030\020 \003(\0132F.apo"
  "llo.planning.autotuning.SpeedPointRawFea"
  "ture.ObjectDecisionFeature\022]\n\rsidepass_r"
  "ear\030\021 \003(\0132F.apollo.planning.autotuning.S"
  "peedPointRawFeature.ObjectDecisionFeatur"
  "e\022Z\n\nkeep_clear\030\022 \003(\0132F.apollo.planning."
  "autotuning.SpeedPointRawFeature.ObjectDe"
  "cisionFeature\032n\n\025ObjectDecisionFeature\022\n"
  "\n\002id\030\001 \001(\005\022\022\n\nrelative_s\030\002 \001(\001\022\022\n\nrelati"
  "ve_l\030\003 \001(\001\022\022\n\nrelative_v\030\004 \001(\001\022\r\n\005speed\030"
  "\005 \001(\001\"\337\004\n\021ObstacleSTRawData\022V\n\020obstacle_"
  "st_data\030\001 \003(\0132<.apollo.planning.autotuni"
  "ng.ObstacleSTRawData.ObstacleSTData\022W\n\021o"
  "bstacle_st_nudge\030\002 \003(\0132<.apollo.planning"
  ".autotuning.ObstacleSTRawData.ObstacleST"
  "Data\022Z\n\024obstacle_st_sidepass\030\003 \003(\0132<.apo"
  "llo.planning.autotuning.ObstacleSTRawDat"
  "a.ObstacleSTData\032I\n\013STPointPair\022\017\n\007s_low"
  "er\030\001 \001(\001\022\017\n\007s_upper\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022\r\n\001"
  "l\030\004 \001(\001:\00210\032\361\001\n\016ObstacleSTData\022\n\n\002id\030\001 \001"
  "(\005\022\r\n\005speed\030\002 \001(\001\022\022\n\nis_virtual\030\003 \001(\010\022\023\n"
  "\013probability\030\004 \001(\001\022J\n\007polygon\030\010 \003(\01329.ap"
  "ollo.planning.autotuning.ObstacleSTRawDa"
  "ta.STPointPair\022O\n\014distribution\030\t \003(\01329.a"
  "pollo.planning.autotuning.ObstacleSTRawD"
  "ata.STPointPair\"\253\001\n\031TrajectoryPointRawFe"
  "ature\022E\n\014path_feature\030\001 \001(\0132/.apollo.pla"
  "nning.autotuning.PathPointRawFeature\022G\n\r"
  "speed_feature\030\002 \001(\01320.apollo.planning.au"
  "totuning.SpeedPointRawFeature\"\250\001\n\024Trajec"
  "toryRawFeature\022L\n\rpoint_feature\030\001 \003(\01325."
  "apollo.planning.autotuning.TrajectoryPoi"
  "ntRawFeature\022B\n\013st_raw_data\030\002 \001(\0132-.apol"
  "lo.planning.autotuning.ObstacleSTRawData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_sccs[8] = {
  &scc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
  &scc_info_TrajectoryRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto, "modules/planning/proto/auto_tuning_raw_feature.proto", 2240,
  &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto, 8, file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto), true);
namespace apollo {
namespace planning {
namespace autotuning {

// ===================================================================

void PathPointRawFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_PathPointRawFeature_default_instance_._instance.get_mutable()->cartesian_coord_ = const_cast< ::apollo::common::PathPoint*>(
      ::apollo::common::PathPoint::internal_default_instance());
  ::apollo::planning::autotuning::_PathPointRawFeature_default_instance_._instance.get_mutable()->frenet_coord_ = const_cast< ::apollo::common::FrenetFramePoint*>(
      ::apollo::common::FrenetFramePoint::internal_default_instance());
}
class PathPointRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointRawFeature>()._has_bits_);
  static const ::apollo::common::PathPoint& cartesian_coord(const PathPointRawFeature* msg);
  static void set_has_cartesian_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::FrenetFramePoint& frenet_coord(const PathPointRawFeature* msg);
  static void set_has_frenet_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PathPoint&
PathPointRawFeature::_Internal::cartesian_coord(const PathPointRawFeature* msg) {
  return *msg->cartesian_coord_;
}
const ::apollo::common::FrenetFramePoint&
PathPointRawFeature::_Internal::frenet_coord(const PathPointRawFeature* msg) {
  return *msg->frenet_coord_;
}
void PathPointRawFeature::clear_cartesian_coord() {
  if (cartesian_coord_ != nullptr) cartesian_coord_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PathPointRawFeature::clear_frenet_coord() {
  if (frenet_coord_ != nullptr) frenet_coord_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PathPointRawFeature::PathPointRawFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointRawFeature)
}
PathPointRawFeature::PathPointRawFeature(const PathPointRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cartesian_coord()) {
    cartesian_coord_ = new ::apollo::common::PathPoint(*from.cartesian_coord_);
  } else {
    cartesian_coord_ = nullptr;
  }
  if (from._internal_has_frenet_coord()) {
    frenet_coord_ = new ::apollo::common::FrenetFramePoint(*from.frenet_coord_);
  } else {
    frenet_coord_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointRawFeature)
}

void PathPointRawFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  ::memset(&cartesian_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frenet_coord_) -
      reinterpret_cast<char*>(&cartesian_coord_)) + sizeof(frenet_coord_));
}

PathPointRawFeature::~PathPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointRawFeature)
  SharedDtor();
}

void PathPointRawFeature::SharedDtor() {
  if (this != internal_default_instance()) delete cartesian_coord_;
  if (this != internal_default_instance()) delete frenet_coord_;
}

void PathPointRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPointRawFeature& PathPointRawFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void PathPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cartesian_coord_ != nullptr);
      cartesian_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frenet_coord_ != nullptr);
      frenet_coord_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PathPointRawFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.PathPoint cartesian_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frenet_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPointRawFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint cartesian_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cartesian_coord(this), target, stream);
  }

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frenet_coord(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointRawFeature)
  return target;
}

size_t PathPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointRawFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.PathPoint cartesian_coord = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cartesian_coord_);
    }

    // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frenet_coord_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointRawFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointRawFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPointRawFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointRawFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointRawFeature)
    MergeFrom(*source);
  }
}

void PathPointRawFeature::MergeFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cartesian_coord()->::apollo::common::PathPoint::MergeFrom(from._internal_cartesian_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_frenet_coord()->::apollo::common::FrenetFramePoint::MergeFrom(from._internal_frenet_coord());
    }
  }
}

void PathPointRawFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointRawFeature::CopyFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointRawFeature::IsInitialized() const {
  return true;
}

void PathPointRawFeature::InternalSwap(PathPointRawFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cartesian_coord_, other->cartesian_coord_);
  swap(frenet_coord_, other->frenet_coord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointRawFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedPointRawFeature_ObjectDecisionFeature::InitAsDefaultInstance() {
}
class SpeedPointRawFeature_ObjectDecisionFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointRawFeature_ObjectDecisionFeature>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_relative_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relative_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relative_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}
SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(const SpeedPointRawFeature_ObjectDecisionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relative_s_, &from.relative_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&relative_s_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedCtor() {
  ::memset(&relative_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&relative_s_)) + sizeof(id_));
}

SpeedPointRawFeature_ObjectDecisionFeature::~SpeedPointRawFeature_ObjectDecisionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  SharedDtor();
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedDtor() {
}

void SpeedPointRawFeature_ObjectDecisionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature_ObjectDecisionFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPointRawFeature_ObjectDecisionFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void SpeedPointRawFeature_ObjectDecisionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&relative_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&relative_s_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpeedPointRawFeature_ObjectDecisionFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double relative_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_relative_s(&has_bits);
          relative_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_relative_l(&has_bits);
          relative_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_relative_v(&has_bits);
          relative_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPointRawFeature_ObjectDecisionFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double relative_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_relative_s(), target);
  }

  // optional double relative_l = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_relative_l(), target);
  }

  // optional double relative_v = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_v(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return target;
}

size_t SpeedPointRawFeature_ObjectDecisionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double relative_s = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointRawFeature_ObjectDecisionFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPointRawFeature_ObjectDecisionFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      relative_s_ = from.relative_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      relative_l_ = from.relative_l_;
    }
    if (cached_has_bits & 0x00000004u) {
      relative_v_ = from.relative_v_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature_ObjectDecisionFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature_ObjectDecisionFeature::InternalSwap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relative_s_, other->relative_s_);
  swap(relative_l_, other->relative_l_);
  swap(relative_v_, other->relative_v_);
  swap(speed_, other->speed_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointRawFeature_ObjectDecisionFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedPointRawFeature::InitAsDefaultInstance() {
}
class SpeedPointRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointRawFeature>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_j(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SpeedPointRawFeature::SpeedPointRawFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}
SpeedPointRawFeature::SpeedPointRawFeature(const SpeedPointRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      follow_(from.follow_),
      overtake_(from.overtake_),
      nudge_(from.nudge_),
      virtual_decision_(from.virtual_decision_),
      stop_(from.stop_),
      collision_(from.collision_),
      sidepass_front_(from.sidepass_front_),
      sidepass_rear_(from.sidepass_rear_),
      keep_clear_(from.keep_clear_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&s_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}

void SpeedPointRawFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&s_)) + sizeof(speed_limit_));
}

SpeedPointRawFeature::~SpeedPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature)
  SharedDtor();
}

void SpeedPointRawFeature::SharedDtor() {
}

void SpeedPointRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPointRawFeature& SpeedPointRawFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void SpeedPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  follow_.Clear();
  overtake_.Clear();
  nudge_.Clear();
  virtual_decision_.Clear();
  stop_.Clear();
  collision_.Clear();
  sidepass_front_.Clear();
  sidepass_rear_.Clear();
  keep_clear_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&s_)) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpeedPointRawFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_t(&has_bits);
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double j = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_j(&has_bits);
          j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_follow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overtake(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nudge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sidepass_front(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sidepass_rear(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_keep_clear(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPointRawFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // optional double j = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_j(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_limit(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_follow_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_follow(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overtake_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_overtake(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nudge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_nudge(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtual_decision_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_virtual_decision(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_stop(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collision_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_collision(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sidepass_front_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_sidepass_front(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sidepass_rear_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_sidepass_rear(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keep_clear_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_keep_clear(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature)
  return target;
}

size_t SpeedPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  total_size += 1UL * this->_internal_follow_size();
  for (const auto& msg : this->follow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  total_size += 1UL * this->_internal_overtake_size();
  for (const auto& msg : this->overtake_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  total_size += 1UL * this->_internal_nudge_size();
  for (const auto& msg : this->nudge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  total_size += 1UL * this->_internal_virtual_decision_size();
  for (const auto& msg : this->virtual_decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  total_size += 1UL * this->_internal_stop_size();
  for (const auto& msg : this->stop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  total_size += 1UL * this->_internal_collision_size();
  for (const auto& msg : this->collision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  total_size += 2UL * this->_internal_sidepass_front_size();
  for (const auto& msg : this->sidepass_front_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  total_size += 2UL * this->_internal_sidepass_rear_size();
  for (const auto& msg : this->sidepass_rear_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  total_size += 2UL * this->_internal_keep_clear_size();
  for (const auto& msg : this->keep_clear_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double j = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointRawFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointRawFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPointRawFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointRawFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointRawFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature::MergeFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  follow_.MergeFrom(from.follow_);
  overtake_.MergeFrom(from.overtake_);
  nudge_.MergeFrom(from.nudge_);
  virtual_decision_.MergeFrom(from.virtual_decision_);
  stop_.MergeFrom(from.stop_);
  collision_.MergeFrom(from.collision_);
  sidepass_front_.MergeFrom(from.sidepass_front_);
  sidepass_rear_.MergeFrom(from.sidepass_rear_);
  keep_clear_.MergeFrom(from.keep_clear_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      j_ = from.j_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointRawFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature::CopyFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature::InternalSwap(SpeedPointRawFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  follow_.InternalSwap(&other->follow_);
  overtake_.InternalSwap(&other->overtake_);
  nudge_.InternalSwap(&other->nudge_);
  virtual_decision_.InternalSwap(&other->virtual_decision_);
  stop_.InternalSwap(&other->stop_);
  collision_.InternalSwap(&other->collision_);
  sidepass_front_.InternalSwap(&other->sidepass_front_);
  sidepass_rear_.InternalSwap(&other->sidepass_rear_);
  keep_clear_.InternalSwap(&other->keep_clear_);
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(j_, other->j_);
  swap(speed_limit_, other->speed_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointRawFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleSTRawData_STPointPair::InitAsDefaultInstance() {
}
class ObstacleSTRawData_STPointPair::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleSTRawData_STPointPair>()._has_bits_);
  static void set_has_s_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}
ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(const ObstacleSTRawData_STPointPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_lower_, &from.s_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_lower_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

void ObstacleSTRawData_STPointPair::SharedCtor() {
  ::memset(&s_lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&s_lower_)) + sizeof(t_));
  l_ = 10;
}

ObstacleSTRawData_STPointPair::~ObstacleSTRawData_STPointPair() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  SharedDtor();
}

void ObstacleSTRawData_STPointPair::SharedDtor() {
}

void ObstacleSTRawData_STPointPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleSTRawData_STPointPair& ObstacleSTRawData_STPointPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleSTRawData_STPointPair_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void ObstacleSTRawData_STPointPair::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_) -
        reinterpret_cast<char*>(&s_lower_)) + sizeof(t_));
    l_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleSTRawData_STPointPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s_lower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s_lower(&has_bits);
          s_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s_upper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_s_upper(&has_bits);
          s_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_t(&has_bits);
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double l = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleSTRawData_STPointPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s_lower = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s_lower(), target);
  }

  // optional double s_upper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_upper(), target);
  }

  // optional double t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_t(), target);
  }

  // optional double l = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return target;
}

size_t ObstacleSTRawData_STPointPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double s_lower = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double s_upper = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double t = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double l = 4 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData_STPointPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleSTRawData_STPointPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s_lower_ = from.s_lower_;
    }
    if (cached_has_bits & 0x00000002u) {
      s_upper_ = from.s_upper_;
    }
    if (cached_has_bits & 0x00000004u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000008u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_STPointPair::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_STPointPair::InternalSwap(ObstacleSTRawData_STPointPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_lower_, other->s_lower_);
  swap(s_upper_, other->s_upper_);
  swap(t_, other->t_);
  swap(l_, other->l_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSTRawData_STPointPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleSTRawData_ObstacleSTData::InitAsDefaultInstance() {
}
class ObstacleSTRawData_ObstacleSTData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleSTRawData_ObstacleSTData>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_virtual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}
ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(const ObstacleSTRawData_ObstacleSTData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_),
      distribution_(from.distribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

void ObstacleSTRawData_ObstacleSTData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(probability_));
}

ObstacleSTRawData_ObstacleSTData::~ObstacleSTRawData_ObstacleSTData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  SharedDtor();
}

void ObstacleSTRawData_ObstacleSTData::SharedDtor() {
}

void ObstacleSTRawData_ObstacleSTData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData_ObstacleSTData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleSTRawData_ObstacleSTData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void ObstacleSTRawData_ObstacleSTData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  distribution_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleSTRawData_ObstacleSTData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_virtual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_virtual(&has_bits);
          is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distribution(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleSTRawData_ObstacleSTData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // optional bool is_virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_virtual(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_probability(), target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_polygon(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distribution_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_distribution(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return target;
}

size_t ObstacleSTRawData_ObstacleSTData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  total_size += 1UL * this->_internal_distribution_size();
  for (const auto& msg : this->distribution_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double speed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional bool is_virtual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double probability = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData_ObstacleSTData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleSTRawData_ObstacleSTData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  distribution_.MergeFrom(from.distribution_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_virtual_ = from.is_virtual_;
    }
    if (cached_has_bits & 0x00000008u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_ObstacleSTData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_ObstacleSTData::InternalSwap(ObstacleSTRawData_ObstacleSTData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_.InternalSwap(&other->polygon_);
  distribution_.InternalSwap(&other->distribution_);
  swap(speed_, other->speed_);
  swap(id_, other->id_);
  swap(is_virtual_, other->is_virtual_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSTRawData_ObstacleSTData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleSTRawData::InitAsDefaultInstance() {
}
class ObstacleSTRawData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleSTRawData>()._has_bits_);
};

ObstacleSTRawData::ObstacleSTRawData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData)
}
ObstacleSTRawData::ObstacleSTRawData(const ObstacleSTRawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      obstacle_st_data_(from.obstacle_st_data_),
      obstacle_st_nudge_(from.obstacle_st_nudge_),
      obstacle_st_sidepass_(from.obstacle_st_sidepass_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData)
}

void ObstacleSTRawData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
}

ObstacleSTRawData::~ObstacleSTRawData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData)
  SharedDtor();
}

void ObstacleSTRawData::SharedDtor() {
}

void ObstacleSTRawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleSTRawData& ObstacleSTRawData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleSTRawData_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void ObstacleSTRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_st_data_.Clear();
  obstacle_st_nudge_.Clear();
  obstacle_st_sidepass_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleSTRawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_st_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_st_nudge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_st_sidepass(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleSTRawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_st_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_obstacle_st_data(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_st_nudge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_obstacle_st_nudge(i), target, stream);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_st_sidepass_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_obstacle_st_sidepass(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData)
  return target;
}

size_t ObstacleSTRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  total_size += 1UL * this->_internal_obstacle_st_data_size();
  for (const auto& msg : this->obstacle_st_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  total_size += 1UL * this->_internal_obstacle_st_nudge_size();
  for (const auto& msg : this->obstacle_st_nudge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  total_size += 1UL * this->_internal_obstacle_st_sidepass_size();
  for (const auto& msg : this->obstacle_st_sidepass_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSTRawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleSTRawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData::MergeFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_st_data_.MergeFrom(from.obstacle_st_data_);
  obstacle_st_nudge_.MergeFrom(from.obstacle_st_nudge_);
  obstacle_st_sidepass_.MergeFrom(from.obstacle_st_sidepass_);
}

void ObstacleSTRawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData::CopyFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData::InternalSwap(ObstacleSTRawData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_st_data_.InternalSwap(&other->obstacle_st_data_);
  obstacle_st_nudge_.InternalSwap(&other->obstacle_st_nudge_);
  obstacle_st_sidepass_.InternalSwap(&other->obstacle_st_sidepass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSTRawData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPointRawFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_._instance.get_mutable()->path_feature_ = const_cast< ::apollo::planning::autotuning::PathPointRawFeature*>(
      ::apollo::planning::autotuning::PathPointRawFeature::internal_default_instance());
  ::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_._instance.get_mutable()->speed_feature_ = const_cast< ::apollo::planning::autotuning::SpeedPointRawFeature*>(
      ::apollo::planning::autotuning::SpeedPointRawFeature::internal_default_instance());
}
class TrajectoryPointRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointRawFeature>()._has_bits_);
  static const ::apollo::planning::autotuning::PathPointRawFeature& path_feature(const TrajectoryPointRawFeature* msg);
  static void set_has_path_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::autotuning::SpeedPointRawFeature& speed_feature(const TrajectoryPointRawFeature* msg);
  static void set_has_speed_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::autotuning::PathPointRawFeature&
TrajectoryPointRawFeature::_Internal::path_feature(const TrajectoryPointRawFeature* msg) {
  return *msg->path_feature_;
}
const ::apollo::planning::autotuning::SpeedPointRawFeature&
TrajectoryPointRawFeature::_Internal::speed_feature(const TrajectoryPointRawFeature* msg) {
  return *msg->speed_feature_;
}
TrajectoryPointRawFeature::TrajectoryPointRawFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}
TrajectoryPointRawFeature::TrajectoryPointRawFeature(const TrajectoryPointRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path_feature()) {
    path_feature_ = new ::apollo::planning::autotuning::PathPointRawFeature(*from.path_feature_);
  } else {
    path_feature_ = nullptr;
  }
  if (from._internal_has_speed_feature()) {
    speed_feature_ = new ::apollo::planning::autotuning::SpeedPointRawFeature(*from.speed_feature_);
  } else {
    speed_feature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

void TrajectoryPointRawFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  ::memset(&path_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_feature_) -
      reinterpret_cast<char*>(&path_feature_)) + sizeof(speed_feature_));
}

TrajectoryPointRawFeature::~TrajectoryPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
  SharedDtor();
}

void TrajectoryPointRawFeature::SharedDtor() {
  if (this != internal_default_instance()) delete path_feature_;
  if (this != internal_default_instance()) delete speed_feature_;
}

void TrajectoryPointRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPointRawFeature& TrajectoryPointRawFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPointRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_feature_ != nullptr);
      path_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_feature_ != nullptr);
      speed_feature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajectoryPointRawFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPointRawFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_feature(this), target, stream);
  }

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::speed_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return target;
}

size_t TrajectoryPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_feature_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPointRawFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointRawFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPointRawFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryPointRawFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryPointRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointRawFeature::MergeFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_feature()->::apollo::planning::autotuning::PathPointRawFeature::MergeFrom(from._internal_path_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speed_feature()->::apollo::planning::autotuning::SpeedPointRawFeature::MergeFrom(from._internal_speed_feature());
    }
  }
}

void TrajectoryPointRawFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointRawFeature::CopyFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointRawFeature::InternalSwap(TrajectoryPointRawFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(path_feature_, other->path_feature_);
  swap(speed_feature_, other->speed_feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointRawFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryRawFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_._instance.get_mutable()->st_raw_data_ = const_cast< ::apollo::planning::autotuning::ObstacleSTRawData*>(
      ::apollo::planning::autotuning::ObstacleSTRawData::internal_default_instance());
}
class TrajectoryRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryRawFeature>()._has_bits_);
  static const ::apollo::planning::autotuning::ObstacleSTRawData& st_raw_data(const TrajectoryRawFeature* msg);
  static void set_has_st_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::autotuning::ObstacleSTRawData&
TrajectoryRawFeature::_Internal::st_raw_data(const TrajectoryRawFeature* msg) {
  return *msg->st_raw_data_;
}
TrajectoryRawFeature::TrajectoryRawFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}
TrajectoryRawFeature::TrajectoryRawFeature(const TrajectoryRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_feature_(from.point_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_st_raw_data()) {
    st_raw_data_ = new ::apollo::planning::autotuning::ObstacleSTRawData(*from.st_raw_data_);
  } else {
    st_raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}

void TrajectoryRawFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  st_raw_data_ = nullptr;
}

TrajectoryRawFeature::~TrajectoryRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryRawFeature)
  SharedDtor();
}

void TrajectoryRawFeature::SharedDtor() {
  if (this != internal_default_instance()) delete st_raw_data_;
}

void TrajectoryRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryRawFeature& TrajectoryRawFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryRawFeature_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(st_raw_data_ != nullptr);
    st_raw_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajectoryRawFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryRawFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryRawFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point_feature(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::st_raw_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryRawFeature)
  return target;
}

size_t TrajectoryRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryRawFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  total_size += 1UL * this->_internal_point_feature_size();
  for (const auto& msg : this->point_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_raw_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryRawFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryRawFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryRawFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryRawFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryRawFeature::MergeFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_feature_.MergeFrom(from.point_feature_);
  if (from._internal_has_st_raw_data()) {
    _internal_mutable_st_raw_data()->::apollo::planning::autotuning::ObstacleSTRawData::MergeFrom(from._internal_st_raw_data());
  }
}

void TrajectoryRawFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRawFeature::CopyFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryRawFeature::InternalSwap(TrajectoryRawFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_feature_.InternalSwap(&other->point_feature_);
  swap(st_raw_data_, other->st_raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryRawFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointRawFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointRawFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::ObstacleSTRawData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryPointRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryPointRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryPointRawFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryRawFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
