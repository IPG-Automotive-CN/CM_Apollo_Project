// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_provider_config.proto

#include "modules/planning/proto/open_space_trajectory_provider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
namespace apollo {
namespace planning {
class OpenSpaceTrajectoryProviderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSpaceTrajectoryProviderConfig> _instance;
} _OpenSpaceTrajectoryProviderConfig_default_instance_;
class OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSpaceTrajectoryOptimizerConfig> _instance;
} _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
class HybridAStarConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HybridAStarConfig> _instance;
} _HybridAStarConfig_default_instance_;
class DualVariableConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DualVariableConfig> _instance;
} _DualVariableConfig_default_instance_;
class DistanceApproachTrajectorySmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistanceApproachTrajectorySmootherConfig> _instance;
} _DistanceApproachTrajectorySmootherConfig_default_instance_;
class IpoptSolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpoptSolverConfig> _instance;
} _IpoptSolverConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::DistanceApproachTrajectorySmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto}, {
      &scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DualVariableConfig_default_instance_;
    new (ptr) ::apollo::planning::DualVariableConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DualVariableConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto}, {
      &scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_HybridAStarConfig_default_instance_;
    new (ptr) ::apollo::planning::HybridAStarConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::HybridAStarConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_IpoptSolverConfig_default_instance_;
    new (ptr) ::apollo::planning::IpoptSolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::IpoptSolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto}, {
      &scc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
      &scc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
      &scc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
      &scc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceTrajectoryProviderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceTrajectoryProviderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto}, {
      &scc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, open_space_trajectory_optimizer_config_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, hybrid_a_star_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, dual_variable_warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, distance_approach_trajectory_smoother_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, planner_open_space_config_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, next_node_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, step_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_back_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, node_radius_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, weight_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, qp_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableConfig, debug_osqp_),
  4,
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_first_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_second_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_speed_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_speed_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_acceleration_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_acceleration_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, min_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, use_fix_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_constraint_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_hand_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_derivative_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_initial_final_check_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  19,
  20,
  21,
  22,
  23,
  24,
  14,
  0,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, mumps_mem_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, mumps_pivtol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_acceptable_constr_viol_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_min_hessian_perturbation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_jacobian_regularization_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_print_timing_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_alpha_for_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_recalc_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::planning::OpenSpaceTrajectoryProviderConfig)},
  { 7, 18, sizeof(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig)},
  { 24, 40, sizeof(::apollo::planning::HybridAStarConfig)},
  { 51, 61, sizeof(::apollo::planning::DualVariableConfig)},
  { 66, 96, sizeof(::apollo::planning::DistanceApproachTrajectorySmootherConfig)},
  { 121, 138, sizeof(::apollo::planning::IpoptSolverConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_HybridAStarConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DualVariableConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_IpoptSolverConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nBmodules/planning/proto/open_space_traj"
  "ectory_provider_config.proto\022\017apollo.pla"
  "nning\0326modules/planning/proto/planner_op"
  "en_space_config.proto\"\210\001\n!OpenSpaceTraje"
  "ctoryProviderConfig\022c\n&open_space_trajec"
  "tory_optimizer_config\030\001 \001(\01323.apollo.pla"
  "nning.OpenSpaceTrajectoryOptimizerConfig"
  "\"\265\003\n\"OpenSpaceTrajectoryOptimizerConfig\022"
  "@\n\024hybrid_a_star_config\030\001 \001(\0132\".apollo.p"
  "lanning.HybridAStarConfig\022L\n\037dual_variab"
  "le_warm_start_config\030\002 \001(\0132#.apollo.plan"
  "ning.DualVariableConfig\022o\n,distance_appr"
  "oach_trajectory_smoother_config\030\003 \001(\01329."
  "apollo.planning.DistanceApproachTrajecto"
  "rySmootherConfig\022\024\n\007delta_t\030\004 \001(\002:\0030.5\022,"
  "\n\035is_near_destination_threshold\030\005 \001(\001:\0050"
  ".001\022J\n\031planner_open_space_config\030\006 \001(\0132"
  "\'.apollo.planning.PlannerOpenSpaceConfig"
  "\"\371\002\n\021HybridAStarConfig\022\037\n\022xy_grid_resolu"
  "tion\030\001 \001(\001:\0030.2\022!\n\023phi_grid_resolution\030\002"
  " \001(\001:\0040.05\022\031\n\rnext_node_num\030\003 \001(\004:\00210\022\026\n"
  "\tstep_size\030\004 \001(\001:\0030.5\022\037\n\024traj_forward_pe"
  "nalty\030\005 \001(\001:\0010\022\034\n\021traj_back_penalty\030\006 \001("
  "\001:\0010\022$\n\030traj_gear_switch_penalty\030\007 \001(\001:\002"
  "10\022\037\n\022traj_steer_penalty\030\010 \001(\001:\003100\022%\n\031t"
  "raj_steer_change_penalty\030\t \001(\001:\00210\022&\n\031gr"
  "id_a_star_xy_resolution\030\017 \001(\001:\0030.1\022\030\n\013no"
  "de_radius\030\020 \001(\001:\0030.5\"\324\001\n\022DualVariableCon"
  "fig\022\023\n\010weight_d\030\001 \001(\001:\0011\0228\n\014ipopt_config"
  "\030\002 \001(\0132\".apollo.planning.IpoptSolverConf"
  "ig\0224\n\tqp_format\030\003 \001(\0162!.apollo.planning."
  "DualVariableMode\022\036\n\023min_safety_distance\030"
  "\004 \001(\001:\0010\022\031\n\ndebug_osqp\030\005 \001(\010:\005false\"\242\006\n("
  "DistanceApproachTrajectorySmootherConfig"
  "\022\024\n\014weight_steer\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001"
  "\022\031\n\021weight_steer_rate\030\003 \001(\001\022\025\n\rweight_a_"
  "rate\030\004 \001(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n\010weight_y"
  "\030\006 \001(\001\022\022\n\nweight_phi\030\007 \001(\001\022\020\n\010weight_v\030\010"
  " \001(\001\022\036\n\026weight_steer_stitching\030\t \001(\001\022\032\n\022"
  "weight_a_stitching\030\n \001(\001\022\037\n\027weight_first"
  "_order_time\030\013 \001(\001\022 \n\030weight_second_order"
  "_time\030\014 \001(\001\022\036\n\023min_safety_distance\030\r \001(\001"
  ":\0010\022\034\n\021max_speed_forward\030\016 \001(\001:\0013\022\034\n\021max"
  "_speed_reverse\030\017 \001(\001:\0012\022#\n\030max_accelerat"
  "ion_forward\030\020 \001(\001:\0012\022#\n\030max_acceleration"
  "_reverse\030\021 \001(\001:\0012\022$\n\027min_time_sample_sca"
  "ling\030\022 \001(\001:\0030.1\022#\n\027max_time_sample_scali"
  "ng\030\023 \001(\001:\00210\022\033\n\014use_fix_time\030\024 \001(\010:\005fals"
  "e\0228\n\014ipopt_config\030\025 \001(\0132\".apollo.plannin"
  "g.IpoptSolverConfig\022\037\n\027enable_constraint"
  "_check\030\026 \001(\010\022\036\n\026enable_hand_derivative\030\027"
  " \001(\010\022\037\n\027enable_derivative_check\030\030 \001(\010\022)\n"
  "\032enable_initial_final_check\030\031 \001(\010:\005false"
  "\"\377\002\n\021IpoptSolverConfig\022\031\n\021ipopt_print_le"
  "vel\030\001 \001(\005\022\031\n\021mumps_mem_percent\030\002 \001(\005\022\024\n\014"
  "mumps_pivtol\030\003 \001(\001\022\026\n\016ipopt_max_iter\030\004 \001"
  "(\005\022\021\n\tipopt_tol\030\005 \001(\001\022(\n ipopt_acceptabl"
  "e_constr_viol_tol\030\006 \001(\001\022&\n\036ipopt_min_hes"
  "sian_perturbation\030\007 \001(\001\022+\n#ipopt_jacobia"
  "n_regularization_value\030\010 \001(\001\022%\n\035ipopt_pr"
  "int_timing_statistics\030\t \001(\t\022\031\n\021ipopt_alp"
  "ha_for_y\030\n \001(\t\022\026\n\016ipopt_recalc_y\030\013 \001(\t\022\032"
  "\n\ripopt_mu_init\030\014 \001(\001:\0030.1*w\n\020DualVariab"
  "leMode\022\027\n\023DUAL_VARIABLE_IPOPT\020\000\022\031\n\025DUAL_"
  "VARIABLE_IPOPTQP\020\001\022\026\n\022DUAL_VARIABLE_OSQP"
  "\020\002\022\027\n\023DUAL_VARIABLE_DEBUG\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_sccs[6] = {
  &scc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
  &scc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
  &scc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
  &scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
  &scc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
  &scc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto, "modules/planning/proto/open_space_trajectory_provider_config.proto", 2627,
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto, 6, file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualVariableMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto[0];
}
bool DualVariableMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OpenSpaceTrajectoryProviderConfig::InitAsDefaultInstance() {
  ::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_._instance.get_mutable()->open_space_trajectory_optimizer_config_ = const_cast< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig*>(
      ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::internal_default_instance());
}
class OpenSpaceTrajectoryProviderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceTrajectoryProviderConfig>()._has_bits_);
  static const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& open_space_trajectory_optimizer_config(const OpenSpaceTrajectoryProviderConfig* msg);
  static void set_has_open_space_trajectory_optimizer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig&
OpenSpaceTrajectoryProviderConfig::_Internal::open_space_trajectory_optimizer_config(const OpenSpaceTrajectoryProviderConfig* msg) {
  return *msg->open_space_trajectory_optimizer_config_;
}
OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}
OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_open_space_trajectory_optimizer_config()) {
    open_space_trajectory_optimizer_config_ = new ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig(*from.open_space_trajectory_optimizer_config_);
  } else {
    open_space_trajectory_optimizer_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}

void OpenSpaceTrajectoryProviderConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  open_space_trajectory_optimizer_config_ = nullptr;
}

OpenSpaceTrajectoryProviderConfig::~OpenSpaceTrajectoryProviderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryProviderConfig::SharedDtor() {
  if (this != internal_default_instance()) delete open_space_trajectory_optimizer_config_;
}

void OpenSpaceTrajectoryProviderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSpaceTrajectoryProviderConfig& OpenSpaceTrajectoryProviderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void OpenSpaceTrajectoryProviderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(open_space_trajectory_optimizer_config_ != nullptr);
    open_space_trajectory_optimizer_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OpenSpaceTrajectoryProviderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_trajectory_optimizer_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceTrajectoryProviderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::open_space_trajectory_optimizer_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  return target;
}

size_t OpenSpaceTrajectoryProviderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_space_trajectory_optimizer_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceTrajectoryProviderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryProviderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSpaceTrajectoryProviderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceTrajectoryProviderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceTrajectoryProviderConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryProviderConfig::MergeFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_open_space_trajectory_optimizer_config()) {
    _internal_mutable_open_space_trajectory_optimizer_config()->::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::MergeFrom(from._internal_open_space_trajectory_optimizer_config());
  }
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryProviderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryProviderConfig::InternalSwap(OpenSpaceTrajectoryProviderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(open_space_trajectory_optimizer_config_, other->open_space_trajectory_optimizer_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceTrajectoryProviderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenSpaceTrajectoryOptimizerConfig::InitAsDefaultInstance() {
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->hybrid_a_star_config_ = const_cast< ::apollo::planning::HybridAStarConfig*>(
      ::apollo::planning::HybridAStarConfig::internal_default_instance());
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->dual_variable_warm_start_config_ = const_cast< ::apollo::planning::DualVariableConfig*>(
      ::apollo::planning::DualVariableConfig::internal_default_instance());
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->distance_approach_trajectory_smoother_config_ = const_cast< ::apollo::planning::DistanceApproachTrajectorySmootherConfig*>(
      ::apollo::planning::DistanceApproachTrajectorySmootherConfig::internal_default_instance());
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->planner_open_space_config_ = const_cast< ::apollo::planning::PlannerOpenSpaceConfig*>(
      ::apollo::planning::PlannerOpenSpaceConfig::internal_default_instance());
}
class OpenSpaceTrajectoryOptimizerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceTrajectoryOptimizerConfig>()._has_bits_);
  static const ::apollo::planning::HybridAStarConfig& hybrid_a_star_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_hybrid_a_star_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::DualVariableConfig& dual_variable_warm_start_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_dual_variable_warm_start_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& distance_approach_trajectory_smoother_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_distance_approach_trajectory_smoother_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delta_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_near_destination_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::PlannerOpenSpaceConfig& planner_open_space_config(const OpenSpaceTrajectoryOptimizerConfig* msg);
  static void set_has_planner_open_space_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning::HybridAStarConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::hybrid_a_star_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->hybrid_a_star_config_;
}
const ::apollo::planning::DualVariableConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::dual_variable_warm_start_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->dual_variable_warm_start_config_;
}
const ::apollo::planning::DistanceApproachTrajectorySmootherConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::distance_approach_trajectory_smoother_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->distance_approach_trajectory_smoother_config_;
}
const ::apollo::planning::PlannerOpenSpaceConfig&
OpenSpaceTrajectoryOptimizerConfig::_Internal::planner_open_space_config(const OpenSpaceTrajectoryOptimizerConfig* msg) {
  return *msg->planner_open_space_config_;
}
void OpenSpaceTrajectoryOptimizerConfig::clear_planner_open_space_config() {
  if (planner_open_space_config_ != nullptr) planner_open_space_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}
OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_hybrid_a_star_config()) {
    hybrid_a_star_config_ = new ::apollo::planning::HybridAStarConfig(*from.hybrid_a_star_config_);
  } else {
    hybrid_a_star_config_ = nullptr;
  }
  if (from._internal_has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = nullptr;
  }
  if (from._internal_has_distance_approach_trajectory_smoother_config()) {
    distance_approach_trajectory_smoother_config_ = new ::apollo::planning::DistanceApproachTrajectorySmootherConfig(*from.distance_approach_trajectory_smoother_config_);
  } else {
    distance_approach_trajectory_smoother_config_ = nullptr;
  }
  if (from._internal_has_planner_open_space_config()) {
    planner_open_space_config_ = new ::apollo::planning::PlannerOpenSpaceConfig(*from.planner_open_space_config_);
  } else {
    planner_open_space_config_ = nullptr;
  }
  ::memcpy(&delta_t_, &from.delta_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_threshold_) -
    reinterpret_cast<char*>(&delta_t_)) + sizeof(is_near_destination_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}

void OpenSpaceTrajectoryOptimizerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  ::memset(&hybrid_a_star_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planner_open_space_config_) -
      reinterpret_cast<char*>(&hybrid_a_star_config_)) + sizeof(planner_open_space_config_));
  delta_t_ = 0.5f;
  is_near_destination_threshold_ = 0.001;
}

OpenSpaceTrajectoryOptimizerConfig::~OpenSpaceTrajectoryOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryOptimizerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete hybrid_a_star_config_;
  if (this != internal_default_instance()) delete dual_variable_warm_start_config_;
  if (this != internal_default_instance()) delete distance_approach_trajectory_smoother_config_;
  if (this != internal_default_instance()) delete planner_open_space_config_;
}

void OpenSpaceTrajectoryOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryOptimizerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSpaceTrajectoryOptimizerConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void OpenSpaceTrajectoryOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hybrid_a_star_config_ != nullptr);
      hybrid_a_star_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != nullptr);
      dual_variable_warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(distance_approach_trajectory_smoother_config_ != nullptr);
      distance_approach_trajectory_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(planner_open_space_config_ != nullptr);
      planner_open_space_config_->Clear();
    }
    delta_t_ = 0.5f;
    is_near_destination_threshold_ = 0.001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OpenSpaceTrajectoryOptimizerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hybrid_a_star_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dual_variable_warm_start_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_approach_trajectory_smoother_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float delta_t = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_delta_t(&has_bits);
          delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double is_near_destination_threshold = 5 [default = 0.001];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_is_near_destination_threshold(&has_bits);
          is_near_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_open_space_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceTrajectoryOptimizerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hybrid_a_star_config(this), target, stream);
  }

  // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dual_variable_warm_start_config(this), target, stream);
  }

  // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::distance_approach_trajectory_smoother_config(this), target, stream);
  }

  // optional float delta_t = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_delta_t(), target);
  }

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_is_near_destination_threshold(), target);
  }

  // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::planner_open_space_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  return target;
}

size_t OpenSpaceTrajectoryOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hybrid_a_star_config_);
    }

    // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dual_variable_warm_start_config_);
    }

    // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distance_approach_trajectory_smoother_config_);
    }

    // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planner_open_space_config_);
    }

    // optional float delta_t = 4 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 5 [default = 0.001];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryOptimizerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSpaceTrajectoryOptimizerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hybrid_a_star_config()->::apollo::planning::HybridAStarConfig::MergeFrom(from._internal_hybrid_a_star_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dual_variable_warm_start_config()->::apollo::planning::DualVariableConfig::MergeFrom(from._internal_dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_distance_approach_trajectory_smoother_config()->::apollo::planning::DistanceApproachTrajectorySmootherConfig::MergeFrom(from._internal_distance_approach_trajectory_smoother_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_planner_open_space_config()->::apollo::planning::PlannerOpenSpaceConfig::MergeFrom(from._internal_planner_open_space_config());
    }
    if (cached_has_bits & 0x00000010u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryOptimizerConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryOptimizerConfig::InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hybrid_a_star_config_, other->hybrid_a_star_config_);
  swap(dual_variable_warm_start_config_, other->dual_variable_warm_start_config_);
  swap(distance_approach_trajectory_smoother_config_, other->distance_approach_trajectory_smoother_config_);
  swap(planner_open_space_config_, other->planner_open_space_config_);
  swap(delta_t_, other->delta_t_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceTrajectoryOptimizerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HybridAStarConfig::InitAsDefaultInstance() {
}
class HybridAStarConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HybridAStarConfig>()._has_bits_);
  static void set_has_xy_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phi_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_next_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_traj_forward_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_traj_back_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_traj_gear_switch_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_traj_steer_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_traj_steer_change_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_grid_a_star_xy_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_node_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

HybridAStarConfig::HybridAStarConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.HybridAStarConfig)
}
HybridAStarConfig::HybridAStarConfig(const HybridAStarConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.HybridAStarConfig)
}

void HybridAStarConfig::SharedCtor() {
  ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traj_back_penalty_) -
      reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
  xy_grid_resolution_ = 0.2;
  phi_grid_resolution_ = 0.05;
  next_node_num_ = PROTOBUF_ULONGLONG(10);
  step_size_ = 0.5;
  traj_gear_switch_penalty_ = 10;
  traj_steer_penalty_ = 100;
  traj_steer_change_penalty_ = 10;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

HybridAStarConfig::~HybridAStarConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.HybridAStarConfig)
  SharedDtor();
}

void HybridAStarConfig::SharedDtor() {
}

void HybridAStarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridAStarConfig& HybridAStarConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HybridAStarConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HybridAStarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.HybridAStarConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traj_back_penalty_) -
        reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = PROTOBUF_ULONGLONG(10);
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
    traj_steer_penalty_ = 100;
  }
  if (cached_has_bits & 0x00000700u) {
    traj_steer_change_penalty_ = 10;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HybridAStarConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_xy_grid_resolution(&has_bits);
          xy_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_phi_grid_resolution(&has_bits);
          phi_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 next_node_num = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_next_node_num(&has_bits);
          next_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double step_size = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_step_size(&has_bits);
          step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_forward_penalty = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_traj_forward_penalty(&has_bits);
          traj_forward_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_back_penalty = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_traj_back_penalty(&has_bits);
          traj_back_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_traj_gear_switch_penalty(&has_bits);
          traj_gear_switch_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_steer_penalty = 8 [default = 100];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_traj_steer_penalty(&has_bits);
          traj_steer_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_traj_steer_change_penalty(&has_bits);
          traj_steer_change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_grid_a_star_xy_resolution(&has_bits);
          grid_a_star_xy_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double node_radius = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_node_radius(&has_bits);
          node_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HybridAStarConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.HybridAStarConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_node_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.HybridAStarConfig)
  return target;
}

size_t HybridAStarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.HybridAStarConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double traj_forward_penalty = 5 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_penalty = 8 [default = 100];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridAStarConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridAStarConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HybridAStarConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.HybridAStarConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.HybridAStarConfig)
    MergeFrom(*source);
  }
}

void HybridAStarConfig::MergeFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000002u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000400u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HybridAStarConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridAStarConfig::CopyFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridAStarConfig::IsInitialized() const {
  return true;
}

void HybridAStarConfig::InternalSwap(HybridAStarConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(traj_forward_penalty_, other->traj_forward_penalty_);
  swap(traj_back_penalty_, other->traj_back_penalty_);
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HybridAStarConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DualVariableConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DualVariableConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptSolverConfig*>(
      ::apollo::planning::IpoptSolverConfig::internal_default_instance());
}
class DualVariableConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DualVariableConfig>()._has_bits_);
  static void set_has_weight_d(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::IpoptSolverConfig& ipopt_config(const DualVariableConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qp_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_osqp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning::IpoptSolverConfig&
DualVariableConfig::_Internal::ipopt_config(const DualVariableConfig* msg) {
  return *msg->ipopt_config_;
}
DualVariableConfig::DualVariableConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DualVariableConfig)
}
DualVariableConfig::DualVariableConfig(const DualVariableConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = nullptr;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_d_) -
    reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(weight_d_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DualVariableConfig)
}

void DualVariableConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_osqp_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(debug_osqp_));
  weight_d_ = 1;
}

DualVariableConfig::~DualVariableConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DualVariableConfig)
  SharedDtor();
}

void DualVariableConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DualVariableConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DualVariableConfig& DualVariableConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DualVariableConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DualVariableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DualVariableConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != nullptr);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&min_safety_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_osqp_) -
        reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(debug_osqp_));
    weight_d_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DualVariableConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_d = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_d(&has_bits);
          weight_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DualVariableMode qp_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DualVariableMode_IsValid(val))) {
            _internal_set_qp_format(static_cast<::apollo::planning::DualVariableMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double min_safety_distance = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool debug_osqp = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_debug_osqp(&has_bits);
          debug_osqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DualVariableConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DualVariableConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_d(), target);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipopt_config(this), target, stream);
  }

  // optional .apollo.planning.DualVariableMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_debug_osqp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DualVariableConfig)
  return target;
}

size_t DualVariableConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DualVariableConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.DualVariableMode qp_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DualVariableConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DualVariableConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DualVariableConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DualVariableConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DualVariableConfig)
    MergeFrom(*source);
  }
}

void DualVariableConfig::MergeFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptSolverConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_d_ = from.weight_d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DualVariableConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualVariableConfig::CopyFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableConfig::IsInitialized() const {
  return true;
}

void DualVariableConfig::InternalSwap(DualVariableConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ipopt_config_, other->ipopt_config_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(qp_format_, other->qp_format_);
  swap(debug_osqp_, other->debug_osqp_);
  swap(weight_d_, other->weight_d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DualVariableConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistanceApproachTrajectorySmootherConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptSolverConfig*>(
      ::apollo::planning::IpoptSolverConfig::internal_default_instance());
}
class DistanceApproachTrajectorySmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DistanceApproachTrajectorySmootherConfig>()._has_bits_);
  static void set_has_weight_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_steer_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_a_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight_v(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_weight_steer_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight_a_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_weight_first_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weight_second_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_speed_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_max_speed_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_acceleration_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_acceleration_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_min_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_use_fix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::planning::IpoptSolverConfig& ipopt_config(const DistanceApproachTrajectorySmootherConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_constraint_check(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_hand_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enable_derivative_check(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_initial_final_check(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::apollo::planning::IpoptSolverConfig&
DistanceApproachTrajectorySmootherConfig::_Internal::ipopt_config(const DistanceApproachTrajectorySmootherConfig* msg) {
  return *msg->ipopt_config_;
}
DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}
DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = nullptr;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_)) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}

void DistanceApproachTrajectorySmootherConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_initial_final_check_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(enable_initial_final_check_));
  max_speed_forward_ = 3;
  max_speed_reverse_ = 2;
  max_acceleration_forward_ = 2;
  max_acceleration_reverse_ = 2;
  min_time_sample_scaling_ = 0.1;
  max_time_sample_scaling_ = 10;
}

DistanceApproachTrajectorySmootherConfig::~DistanceApproachTrajectorySmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  SharedDtor();
}

void DistanceApproachTrajectorySmootherConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DistanceApproachTrajectorySmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceApproachTrajectorySmootherConfig& DistanceApproachTrajectorySmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistanceApproachTrajectorySmootherConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DistanceApproachTrajectorySmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != nullptr);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&weight_steer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_phi_) -
        reinterpret_cast<char*>(&weight_steer_)) + sizeof(weight_phi_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&weight_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_constraint_check_) -
        reinterpret_cast<char*>(&weight_v_)) + sizeof(enable_constraint_check_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enable_hand_derivative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_initial_final_check_) -
        reinterpret_cast<char*>(&enable_hand_derivative_)) + sizeof(enable_initial_final_check_));
    max_speed_forward_ = 3;
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
  }
  max_time_sample_scaling_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DistanceApproachTrajectorySmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_steer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_steer(&has_bits);
          weight_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_a(&has_bits);
          weight_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_steer_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_steer_rate(&has_bits);
          weight_steer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_a_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_weight_a_rate(&has_bits);
          weight_a_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_weight_x(&has_bits);
          weight_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_weight_y(&has_bits);
          weight_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_phi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_weight_phi(&has_bits);
          weight_phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_weight_v(&has_bits);
          weight_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_steer_stitching = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_weight_steer_stitching(&has_bits);
          weight_steer_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_a_stitching = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_weight_a_stitching(&has_bits);
          weight_a_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_first_order_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_weight_first_order_time(&has_bits);
          weight_first_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_second_order_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_weight_second_order_time(&has_bits);
          weight_second_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_safety_distance = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed_forward = 14 [default = 3];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_max_speed_forward(&has_bits);
          max_speed_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed_reverse = 15 [default = 2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_max_speed_reverse(&has_bits);
          max_speed_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration_forward = 16 [default = 2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_max_acceleration_forward(&has_bits);
          max_acceleration_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_max_acceleration_reverse(&has_bits);
          max_acceleration_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_min_time_sample_scaling(&has_bits);
          min_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_max_time_sample_scaling(&has_bits);
          max_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_fix_time = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_use_fix_time(&has_bits);
          use_fix_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_constraint_check = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_enable_constraint_check(&has_bits);
          enable_constraint_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_hand_derivative = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enable_hand_derivative(&has_bits);
          enable_hand_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_derivative_check = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_enable_derivative_check(&has_bits);
          enable_derivative_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_initial_final_check = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_enable_initial_final_check(&has_bits);
          enable_initial_final_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceApproachTrajectorySmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_use_fix_time(), target);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::ipopt_config(this), target, stream);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_enable_initial_final_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  return target;
}

size_t DistanceApproachTrajectorySmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double weight_v = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_hand_derivative = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional double max_speed_forward = 14 [default = 3];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceApproachTrajectorySmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceApproachTrajectorySmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceApproachTrajectorySmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DistanceApproachTrajectorySmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DistanceApproachTrajectorySmootherConfig)
    MergeFrom(*source);
  }
}

void DistanceApproachTrajectorySmootherConfig::MergeFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptSolverConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x00800000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_max_time_sample_scaling(from._internal_max_time_sample_scaling());
  }
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachTrajectorySmootherConfig::IsInitialized() const {
  return true;
}

void DistanceApproachTrajectorySmootherConfig::InternalSwap(DistanceApproachTrajectorySmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ipopt_config_, other->ipopt_config_);
  swap(weight_steer_, other->weight_steer_);
  swap(weight_a_, other->weight_a_);
  swap(weight_steer_rate_, other->weight_steer_rate_);
  swap(weight_a_rate_, other->weight_a_rate_);
  swap(weight_x_, other->weight_x_);
  swap(weight_y_, other->weight_y_);
  swap(weight_phi_, other->weight_phi_);
  swap(weight_v_, other->weight_v_);
  swap(weight_steer_stitching_, other->weight_steer_stitching_);
  swap(weight_a_stitching_, other->weight_a_stitching_);
  swap(weight_first_order_time_, other->weight_first_order_time_);
  swap(weight_second_order_time_, other->weight_second_order_time_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(use_fix_time_, other->use_fix_time_);
  swap(enable_constraint_check_, other->enable_constraint_check_);
  swap(enable_hand_derivative_, other->enable_hand_derivative_);
  swap(enable_derivative_check_, other->enable_derivative_check_);
  swap(enable_initial_final_check_, other->enable_initial_final_check_);
  swap(max_speed_forward_, other->max_speed_forward_);
  swap(max_speed_reverse_, other->max_speed_reverse_);
  swap(max_acceleration_forward_, other->max_acceleration_forward_);
  swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceApproachTrajectorySmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpoptSolverConfig::InitAsDefaultInstance() {
}
class IpoptSolverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IpoptSolverConfig>()._has_bits_);
  static void set_has_ipopt_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mumps_mem_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mumps_pivtol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipopt_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ipopt_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipopt_acceptable_constr_viol_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipopt_min_hessian_perturbation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipopt_jacobian_regularization_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ipopt_print_timing_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipopt_alpha_for_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipopt_recalc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipopt_mu_init(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

IpoptSolverConfig::IpoptSolverConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.IpoptSolverConfig)
}
IpoptSolverConfig::IpoptSolverConfig(const IpoptSolverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_recalc_y()) {
    ipopt_recalc_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IpoptSolverConfig)
}

void IpoptSolverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipopt_max_iter_) -
      reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_max_iter_));
  ipopt_mu_init_ = 0.1;
}

IpoptSolverConfig::~IpoptSolverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IpoptSolverConfig)
  SharedDtor();
}

void IpoptSolverConfig::SharedDtor() {
  ipopt_print_timing_statistics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpoptSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpoptSolverConfig& IpoptSolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpoptSolverConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void IpoptSolverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IpoptSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ipopt_print_timing_statistics_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_alpha_for_y_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipopt_recalc_y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
        reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_max_iter_) -
        reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_)) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IpoptSolverConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ipopt_print_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ipopt_print_level(&has_bits);
          ipopt_print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mumps_mem_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mumps_mem_percent(&has_bits);
          mumps_mem_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mumps_pivtol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_mumps_pivtol(&has_bits);
          mumps_pivtol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 ipopt_max_iter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipopt_max_iter(&has_bits);
          ipopt_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_tol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ipopt_tol(&has_bits);
          ipopt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ipopt_acceptable_constr_viol_tol(&has_bits);
          ipopt_acceptable_constr_viol_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_min_hessian_perturbation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ipopt_min_hessian_perturbation(&has_bits);
          ipopt_min_hessian_perturbation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_jacobian_regularization_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_ipopt_jacobian_regularization_value(&has_bits);
          ipopt_jacobian_regularization_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string ipopt_print_timing_statistics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ipopt_print_timing_statistics();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipopt_alpha_for_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ipopt_alpha_for_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipopt_recalc_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ipopt_recalc_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_ipopt_mu_init(&has_bits);
          ipopt_mu_init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpoptSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IpoptSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_print_timing_statistics().data(), static_cast<int>(this->_internal_ipopt_print_timing_statistics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_alpha_for_y().data(), static_cast<int>(this->_internal_ipopt_alpha_for_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_recalc_y().data(), static_cast<int>(this->_internal_ipopt_recalc_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ipopt_mu_init(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IpoptSolverConfig)
  return target;
}

size_t IpoptSolverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IpoptSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ipopt_print_timing_statistics = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpoptSolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IpoptSolverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpoptSolverConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.IpoptSolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.IpoptSolverConfig)
    MergeFrom(*source);
  }
}

void IpoptSolverConfig::MergeFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ipopt_print_timing_statistics_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ipopt_alpha_for_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ipopt_recalc_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpoptSolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpoptSolverConfig::CopyFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptSolverConfig::IsInitialized() const {
  return true;
}

void IpoptSolverConfig::InternalSwap(IpoptSolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipopt_print_timing_statistics_.Swap(&other->ipopt_print_timing_statistics_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_alpha_for_y_.Swap(&other->ipopt_alpha_for_y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_recalc_y_.Swap(&other->ipopt_recalc_y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ipopt_print_level_, other->ipopt_print_level_);
  swap(mumps_mem_percent_, other->mumps_mem_percent_);
  swap(mumps_pivtol_, other->mumps_pivtol_);
  swap(ipopt_tol_, other->ipopt_tol_);
  swap(ipopt_acceptable_constr_viol_tol_, other->ipopt_acceptable_constr_viol_tol_);
  swap(ipopt_min_hessian_perturbation_, other->ipopt_min_hessian_perturbation_);
  swap(ipopt_jacobian_regularization_value_, other->ipopt_jacobian_regularization_value_);
  swap(ipopt_max_iter_, other->ipopt_max_iter_);
  swap(ipopt_mu_init_, other->ipopt_mu_init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpoptSolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceTrajectoryProviderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::HybridAStarConfig* Arena::CreateMaybeMessage< ::apollo::planning::HybridAStarConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::HybridAStarConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DualVariableConfig* Arena::CreateMaybeMessage< ::apollo::planning::DualVariableConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DualVariableConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DistanceApproachTrajectorySmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::DistanceApproachTrajectorySmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DistanceApproachTrajectorySmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::IpoptSolverConfig* Arena::CreateMaybeMessage< ::apollo::planning::IpoptSolverConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::IpoptSolverConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
