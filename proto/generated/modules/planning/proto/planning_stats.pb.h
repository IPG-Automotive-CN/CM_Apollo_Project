// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
namespace apollo {
namespace planning {
class PlanningStats;
class PlanningStatsDefaultTypeInternal;
extern PlanningStatsDefaultTypeInternal _PlanningStats_default_instance_;
class StatsGroup;
class StatsGroupDefaultTypeInternal;
extern StatsGroupDefaultTypeInternal _StatsGroup_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::PlanningStats* Arena::CreateMaybeMessage<::apollo::planning::PlanningStats>(Arena*);
template<> ::apollo::planning::StatsGroup* Arena::CreateMaybeMessage<::apollo::planning::StatsGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class StatsGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StatsGroup) */ {
 public:
  StatsGroup();
  virtual ~StatsGroup();

  StatsGroup(const StatsGroup& from);
  StatsGroup(StatsGroup&& from) noexcept
    : StatsGroup() {
    *this = ::std::move(from);
  }

  inline StatsGroup& operator=(const StatsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsGroup& operator=(StatsGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatsGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsGroup* internal_default_instance() {
    return reinterpret_cast<const StatsGroup*>(
               &_StatsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatsGroup& a, StatsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsGroup* New() const final {
    return CreateMaybeMessage<StatsGroup>(nullptr);
  }

  StatsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatsGroup& from);
  void MergeFrom(const StatsGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.StatsGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFieldNumber = 1,
    kSumFieldNumber = 3,
    kAvgFieldNumber = 4,
    kNumFieldNumber = 5,
    kMinFieldNumber = 2,
  };
  // optional double max = 1;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // optional double sum = 3;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // optional double avg = 4;
  bool has_avg() const;
  private:
  bool _internal_has_avg() const;
  public:
  void clear_avg();
  double avg() const;
  void set_avg(double value);
  private:
  double _internal_avg() const;
  void _internal_set_avg(double value);
  public:

  // optional int32 num = 5;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double min = 2 [default = 10000000000];
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.StatsGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double max_;
  double sum_;
  double avg_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  double min_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
};
// -------------------------------------------------------------------

class PlanningStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningStats) */ {
 public:
  PlanningStats();
  virtual ~PlanningStats();

  PlanningStats(const PlanningStats& from);
  PlanningStats(PlanningStats&& from) noexcept
    : PlanningStats() {
    *this = ::std::move(from);
  }

  inline PlanningStats& operator=(const PlanningStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStats& operator=(PlanningStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanningStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningStats* internal_default_instance() {
    return reinterpret_cast<const PlanningStats*>(
               &_PlanningStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlanningStats& a, PlanningStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanningStats* New() const final {
    return CreateMaybeMessage<PlanningStats>(nullptr);
  }

  PlanningStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanningStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanningStats& from);
  void MergeFrom(const PlanningStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalPathLengthFieldNumber = 1,
    kTotalPathTimeFieldNumber = 2,
    kVFieldNumber = 3,
    kAFieldNumber = 4,
    kKappaFieldNumber = 5,
    kDkappaFieldNumber = 6,
  };
  // optional .apollo.planning.StatsGroup total_path_length = 1;
  bool has_total_path_length() const;
  private:
  bool _internal_has_total_path_length() const;
  public:
  void clear_total_path_length();
  const ::apollo::planning::StatsGroup& total_path_length() const;
  ::apollo::planning::StatsGroup* release_total_path_length();
  ::apollo::planning::StatsGroup* mutable_total_path_length();
  void set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length);
  private:
  const ::apollo::planning::StatsGroup& _internal_total_path_length() const;
  ::apollo::planning::StatsGroup* _internal_mutable_total_path_length();
  public:

  // optional .apollo.planning.StatsGroup total_path_time = 2;
  bool has_total_path_time() const;
  private:
  bool _internal_has_total_path_time() const;
  public:
  void clear_total_path_time();
  const ::apollo::planning::StatsGroup& total_path_time() const;
  ::apollo::planning::StatsGroup* release_total_path_time();
  ::apollo::planning::StatsGroup* mutable_total_path_time();
  void set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time);
  private:
  const ::apollo::planning::StatsGroup& _internal_total_path_time() const;
  ::apollo::planning::StatsGroup* _internal_mutable_total_path_time();
  public:

  // optional .apollo.planning.StatsGroup v = 3;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  const ::apollo::planning::StatsGroup& v() const;
  ::apollo::planning::StatsGroup* release_v();
  ::apollo::planning::StatsGroup* mutable_v();
  void set_allocated_v(::apollo::planning::StatsGroup* v);
  private:
  const ::apollo::planning::StatsGroup& _internal_v() const;
  ::apollo::planning::StatsGroup* _internal_mutable_v();
  public:

  // optional .apollo.planning.StatsGroup a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::apollo::planning::StatsGroup& a() const;
  ::apollo::planning::StatsGroup* release_a();
  ::apollo::planning::StatsGroup* mutable_a();
  void set_allocated_a(::apollo::planning::StatsGroup* a);
  private:
  const ::apollo::planning::StatsGroup& _internal_a() const;
  ::apollo::planning::StatsGroup* _internal_mutable_a();
  public:

  // optional .apollo.planning.StatsGroup kappa = 5;
  bool has_kappa() const;
  private:
  bool _internal_has_kappa() const;
  public:
  void clear_kappa();
  const ::apollo::planning::StatsGroup& kappa() const;
  ::apollo::planning::StatsGroup* release_kappa();
  ::apollo::planning::StatsGroup* mutable_kappa();
  void set_allocated_kappa(::apollo::planning::StatsGroup* kappa);
  private:
  const ::apollo::planning::StatsGroup& _internal_kappa() const;
  ::apollo::planning::StatsGroup* _internal_mutable_kappa();
  public:

  // optional .apollo.planning.StatsGroup dkappa = 6;
  bool has_dkappa() const;
  private:
  bool _internal_has_dkappa() const;
  public:
  void clear_dkappa();
  const ::apollo::planning::StatsGroup& dkappa() const;
  ::apollo::planning::StatsGroup* release_dkappa();
  ::apollo::planning::StatsGroup* mutable_dkappa();
  void set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa);
  private:
  const ::apollo::planning::StatsGroup& _internal_dkappa() const;
  ::apollo::planning::StatsGroup* _internal_mutable_dkappa();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::StatsGroup* total_path_length_;
  ::apollo::planning::StatsGroup* total_path_time_;
  ::apollo::planning::StatsGroup* v_;
  ::apollo::planning::StatsGroup* a_;
  ::apollo::planning::StatsGroup* kappa_;
  ::apollo::planning::StatsGroup* dkappa_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatsGroup

// optional double max = 1;
inline bool StatsGroup::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatsGroup::has_max() const {
  return _internal_has_max();
}
inline void StatsGroup::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double StatsGroup::_internal_max() const {
  return max_;
}
inline double StatsGroup::max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.max)
  return _internal_max();
}
inline void StatsGroup::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000001u;
  max_ = value;
}
inline void StatsGroup::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.max)
}

// optional double min = 2 [default = 10000000000];
inline bool StatsGroup::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StatsGroup::has_min() const {
  return _internal_has_min();
}
inline void StatsGroup::clear_min() {
  min_ = 10000000000;
  _has_bits_[0] &= ~0x00000010u;
}
inline double StatsGroup::_internal_min() const {
  return min_;
}
inline double StatsGroup::min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.min)
  return _internal_min();
}
inline void StatsGroup::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000010u;
  min_ = value;
}
inline void StatsGroup::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.min)
}

// optional double sum = 3;
inline bool StatsGroup::_internal_has_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatsGroup::has_sum() const {
  return _internal_has_sum();
}
inline void StatsGroup::clear_sum() {
  sum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double StatsGroup::_internal_sum() const {
  return sum_;
}
inline double StatsGroup::sum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.sum)
  return _internal_sum();
}
inline void StatsGroup::_internal_set_sum(double value) {
  _has_bits_[0] |= 0x00000002u;
  sum_ = value;
}
inline void StatsGroup::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.sum)
}

// optional double avg = 4;
inline bool StatsGroup::_internal_has_avg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatsGroup::has_avg() const {
  return _internal_has_avg();
}
inline void StatsGroup::clear_avg() {
  avg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double StatsGroup::_internal_avg() const {
  return avg_;
}
inline double StatsGroup::avg() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.avg)
  return _internal_avg();
}
inline void StatsGroup::_internal_set_avg(double value) {
  _has_bits_[0] |= 0x00000004u;
  avg_ = value;
}
inline void StatsGroup::set_avg(double value) {
  _internal_set_avg(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.avg)
}

// optional int32 num = 5;
inline bool StatsGroup::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StatsGroup::has_num() const {
  return _internal_has_num();
}
inline void StatsGroup::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatsGroup::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatsGroup::num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.num)
  return _internal_num();
}
inline void StatsGroup::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_ = value;
}
inline void StatsGroup::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.num)
}

// -------------------------------------------------------------------

// PlanningStats

// optional .apollo.planning.StatsGroup total_path_length = 1;
inline bool PlanningStats::_internal_has_total_path_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || total_path_length_ != nullptr);
  return value;
}
inline bool PlanningStats::has_total_path_length() const {
  return _internal_has_total_path_length();
}
inline void PlanningStats::clear_total_path_length() {
  if (total_path_length_ != nullptr) total_path_length_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_total_path_length() const {
  const ::apollo::planning::StatsGroup* p = total_path_length_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::StatsGroup*>(
      &::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_length)
  return _internal_total_path_length();
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_total_path_length() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_length)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StatsGroup* temp = total_path_length_;
  total_path_length_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_total_path_length() {
  _has_bits_[0] |= 0x00000001u;
  if (total_path_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaNoVirtual());
    total_path_length_ = p;
  }
  return total_path_length_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_length() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_length)
  return _internal_mutable_total_path_length();
}
inline void PlanningStats::set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_path_length_;
  }
  if (total_path_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total_path_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_path_length, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_path_length_ = total_path_length;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_length)
}

// optional .apollo.planning.StatsGroup total_path_time = 2;
inline bool PlanningStats::_internal_has_total_path_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || total_path_time_ != nullptr);
  return value;
}
inline bool PlanningStats::has_total_path_time() const {
  return _internal_has_total_path_time();
}
inline void PlanningStats::clear_total_path_time() {
  if (total_path_time_ != nullptr) total_path_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_total_path_time() const {
  const ::apollo::planning::StatsGroup* p = total_path_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::StatsGroup*>(
      &::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_time)
  return _internal_total_path_time();
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_total_path_time() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_time)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::StatsGroup* temp = total_path_time_;
  total_path_time_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_total_path_time() {
  _has_bits_[0] |= 0x00000002u;
  if (total_path_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaNoVirtual());
    total_path_time_ = p;
  }
  return total_path_time_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_time() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_time)
  return _internal_mutable_total_path_time();
}
inline void PlanningStats::set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_path_time_;
  }
  if (total_path_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total_path_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_path_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  total_path_time_ = total_path_time;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_time)
}

// optional .apollo.planning.StatsGroup v = 3;
inline bool PlanningStats::_internal_has_v() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || v_ != nullptr);
  return value;
}
inline bool PlanningStats::has_v() const {
  return _internal_has_v();
}
inline void PlanningStats::clear_v() {
  if (v_ != nullptr) v_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_v() const {
  const ::apollo::planning::StatsGroup* p = v_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::StatsGroup*>(
      &::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.v)
  return _internal_v();
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_v() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.v)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::StatsGroup* temp = v_;
  v_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_v() {
  _has_bits_[0] |= 0x00000004u;
  if (v_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaNoVirtual());
    v_ = p;
  }
  return v_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_v() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.v)
  return _internal_mutable_v();
}
inline void PlanningStats::set_allocated_v(::apollo::planning::StatsGroup* v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete v_;
  }
  if (v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  v_ = v;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.v)
}

// optional .apollo.planning.StatsGroup a = 4;
inline bool PlanningStats::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || a_ != nullptr);
  return value;
}
inline bool PlanningStats::has_a() const {
  return _internal_has_a();
}
inline void PlanningStats::clear_a() {
  if (a_ != nullptr) a_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_a() const {
  const ::apollo::planning::StatsGroup* p = a_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::StatsGroup*>(
      &::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.a)
  return _internal_a();
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_a() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.a)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::StatsGroup* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_a() {
  _has_bits_[0] |= 0x00000008u;
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaNoVirtual());
    a_ = p;
  }
  return a_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_a() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.a)
  return _internal_mutable_a();
}
inline void PlanningStats::set_allocated_a(::apollo::planning::StatsGroup* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.a)
}

// optional .apollo.planning.StatsGroup kappa = 5;
inline bool PlanningStats::_internal_has_kappa() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || kappa_ != nullptr);
  return value;
}
inline bool PlanningStats::has_kappa() const {
  return _internal_has_kappa();
}
inline void PlanningStats::clear_kappa() {
  if (kappa_ != nullptr) kappa_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_kappa() const {
  const ::apollo::planning::StatsGroup* p = kappa_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::StatsGroup*>(
      &::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.kappa)
  return _internal_kappa();
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_kappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.kappa)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::StatsGroup* temp = kappa_;
  kappa_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_kappa() {
  _has_bits_[0] |= 0x00000010u;
  if (kappa_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaNoVirtual());
    kappa_ = p;
  }
  return kappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_kappa() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.kappa)
  return _internal_mutable_kappa();
}
inline void PlanningStats::set_allocated_kappa(::apollo::planning::StatsGroup* kappa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kappa_;
  }
  if (kappa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kappa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kappa, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  kappa_ = kappa;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.kappa)
}

// optional .apollo.planning.StatsGroup dkappa = 6;
inline bool PlanningStats::_internal_has_dkappa() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || dkappa_ != nullptr);
  return value;
}
inline bool PlanningStats::has_dkappa() const {
  return _internal_has_dkappa();
}
inline void PlanningStats::clear_dkappa() {
  if (dkappa_ != nullptr) dkappa_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_dkappa() const {
  const ::apollo::planning::StatsGroup* p = dkappa_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::StatsGroup*>(
      &::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.dkappa)
  return _internal_dkappa();
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_dkappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.dkappa)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::planning::StatsGroup* temp = dkappa_;
  dkappa_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_dkappa() {
  _has_bits_[0] |= 0x00000020u;
  if (dkappa_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaNoVirtual());
    dkappa_ = p;
  }
  return dkappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_dkappa() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.dkappa)
  return _internal_mutable_dkappa();
}
inline void PlanningStats::set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dkappa_;
  }
  if (dkappa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dkappa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dkappa, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dkappa_ = dkappa;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.dkappa)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto
