// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/traffic_rule_config.proto

#include "modules/planning/proto/traffic_rule_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
namespace apollo {
namespace planning {
class BacksideVehicleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BacksideVehicleConfig> _instance;
} _BacksideVehicleConfig_default_instance_;
class ChangeLaneConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeLaneConfig> _instance;
} _ChangeLaneConfig_default_instance_;
class CreepConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreepConfig> _instance;
} _CreepConfig_default_instance_;
class CrosswalkConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrosswalkConfig> _instance;
} _CrosswalkConfig_default_instance_;
class DestinationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestinationConfig> _instance;
} _DestinationConfig_default_instance_;
class KeepClearConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeepClearConfig> _instance;
} _KeepClearConfig_default_instance_;
class ReferenceLineEndConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceLineEndConfig> _instance;
} _ReferenceLineEndConfig_default_instance_;
class ReroutingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReroutingConfig> _instance;
} _ReroutingConfig_default_instance_;
class StopSignConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopSignConfig> _instance;
} _StopSignConfig_default_instance_;
class TrafficLightConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightConfig> _instance;
} _TrafficLightConfig_default_instance_;
class TrafficRuleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRuleConfig> _instance;
  const ::apollo::planning::BacksideVehicleConfig* backside_vehicle_;
  const ::apollo::planning::ChangeLaneConfig* change_lane_;
  const ::apollo::planning::CrosswalkConfig* crosswalk_;
  const ::apollo::planning::DestinationConfig* destination_;
  const ::apollo::planning::KeepClearConfig* keep_clear_;
  const ::apollo::planning::ReferenceLineEndConfig* reference_line_end_;
  const ::apollo::planning::ReroutingConfig* rerouting_;
  const ::apollo::planning::StopSignConfig* stop_sign_;
  const ::apollo::planning::TrafficLightConfig* traffic_light_;
} _TrafficRuleConfig_default_instance_;
class TrafficRuleConfigsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRuleConfigs> _instance;
} _TrafficRuleConfigs_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_BacksideVehicleConfig_default_instance_;
    new (ptr) ::apollo::planning::BacksideVehicleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::BacksideVehicleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ChangeLaneConfig_default_instance_;
    new (ptr) ::apollo::planning::ChangeLaneConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ChangeLaneConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_CreepConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CreepConfig_default_instance_;
    new (ptr) ::apollo::planning::CreepConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CreepConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreepConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreepConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CrosswalkConfig_default_instance_;
    new (ptr) ::apollo::planning::CrosswalkConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CrosswalkConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DestinationConfig_default_instance_;
    new (ptr) ::apollo::planning::DestinationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DestinationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_KeepClearConfig_default_instance_;
    new (ptr) ::apollo::planning::KeepClearConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::KeepClearConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReferenceLineEndConfig_default_instance_;
    new (ptr) ::apollo::planning::ReferenceLineEndConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReferenceLineEndConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReroutingConfig_default_instance_;
    new (ptr) ::apollo::planning::ReroutingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReroutingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StopSignConfig_default_instance_;
    new (ptr) ::apollo::planning::StopSignConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StopSignConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficLightConfig_default_instance_;
    new (ptr) ::apollo::planning::TrafficLightConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficLightConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficRuleConfig_default_instance_;
    new (ptr) ::apollo::planning::TrafficRuleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficRuleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {
      &scc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
      &scc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TrafficRuleConfigs_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficRuleConfigs_default_instance_;
    new (ptr) ::apollo::planning::TrafficRuleConfigs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficRuleConfigs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficRuleConfigs_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficRuleConfigs_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto}, {
      &scc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, backside_lane_width_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, min_overtake_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, min_overtake_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, enable_guard_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, guard_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneConfig, min_guard_speed_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, creep_distance_to_stop_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, min_boundary_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CreepConfig, min_boundary_s_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, max_stop_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, max_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, expand_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_strict_l_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_loose_l_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_timeout_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationConfig, stop_distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, enable_keep_clear_zone_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, enable_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, align_with_traffic_sign_tolerance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, min_reference_line_remain_length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, cooldown_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, prepare_rerouting_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, stop_distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, max_stop_deceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, rule_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, enabled_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, backside_vehicle_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, change_lane_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, crosswalk_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, destination_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, keep_clear_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, reference_line_end_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, rerouting_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, stop_sign_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, config_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, config_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::planning::BacksideVehicleConfig)},
  { 7, 17, sizeof(::apollo::planning::ChangeLaneConfig)},
  { 22, 34, sizeof(::apollo::planning::CreepConfig)},
  { 41, 55, sizeof(::apollo::planning::CrosswalkConfig)},
  { 64, 70, sizeof(::apollo::planning::DestinationConfig)},
  { 71, 80, sizeof(::apollo::planning::KeepClearConfig)},
  { 84, 91, sizeof(::apollo::planning::ReferenceLineEndConfig)},
  { 93, 100, sizeof(::apollo::planning::ReroutingConfig)},
  { 102, 109, sizeof(::apollo::planning::StopSignConfig)},
  { 111, 119, sizeof(::apollo::planning::TrafficLightConfig)},
  { 122, 139, sizeof(::apollo::planning::TrafficRuleConfig)},
  { 150, 156, sizeof(::apollo::planning::TrafficRuleConfigs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_BacksideVehicleConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ChangeLaneConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CreepConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CrosswalkConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DestinationConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_KeepClearConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ReferenceLineEndConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ReroutingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_StopSignConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrafficLightConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrafficRuleConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrafficRuleConfigs_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/planning/proto/traffic_rule_co"
  "nfig.proto\022\017apollo.planning\"7\n\025BacksideV"
  "ehicleConfig\022\036\n\023backside_lane_width\030\001 \001("
  "\001:\0014\"\262\001\n\020ChangeLaneConfig\022!\n\025min_overtak"
  "e_distance\030\001 \001(\001:\00210\022\034\n\021min_overtake_tim"
  "e\030\002 \001(\001:\0012\022$\n\025enable_guard_obstacle\030\003 \001("
  "\010:\005false\022\033\n\016guard_distance\030\004 \001(\001:\003100\022\032\n"
  "\017min_guard_speed\030\005 \001(\001:\0011\"\326\001\n\013CreepConfi"
  "g\022\017\n\007enabled\030\001 \001(\010\022&\n\033creep_distance_to_"
  "stop_line\030\002 \001(\001:\0011\022\032\n\rstop_distance\030\003 \001("
  "\001:\0030.5\022\026\n\013speed_limit\030\004 \001(\001:\0011\022$\n\027max_va"
  "lid_stop_distance\030\005 \001(\001:\0030.3\022\031\n\016min_boun"
  "dary_t\030\006 \001(\001:\0016\022\031\n\016min_boundary_s\030\007 \001(\001:"
  "\0013\"\253\002\n\017CrosswalkConfig\022\030\n\rstop_distance\030"
  "\001 \001(\001:\0011\022 \n\025max_stop_deceleration\030\002 \001(\001:"
  "\0014\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0011\022\033\n\016ma"
  "x_stop_speed\030\004 \001(\001:\0030.3\022\"\n\027max_valid_sto"
  "p_distance\030\005 \001(\001:\0013\022\034\n\021expand_s_distance"
  "\030\006 \001(\001:\0012\022!\n\026stop_strict_l_distance\030\007 \001("
  "\001:\0014\022 \n\025stop_loose_l_distance\030\010 \001(\001:\0015\022\030"
  "\n\014stop_timeout\030\t \001(\001:\00210\"/\n\021DestinationC"
  "onfig\022\032\n\rstop_distance\030\001 \001(\001:\0030.5\"\246\001\n\017Ke"
  "epClearConfig\022$\n\026enable_keep_clear_zone\030"
  "\001 \001(\010:\004true\022\035\n\017enable_junction\030\002 \001(\010:\004tr"
  "ue\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0012\022.\n!al"
  "ign_with_traffic_sign_tolerance\030\004 \001(\001:\0034"
  ".5\"b\n\026ReferenceLineEndConfig\022\032\n\rstop_dis"
  "tance\030\001 \001(\001:\0030.5\022,\n min_reference_line_r"
  "emain_length\030\002 \001(\001:\00250\"N\n\017ReroutingConfi"
  "g\022\030\n\rcooldown_time\030\001 \001(\001:\0013\022!\n\026prepare_r"
  "erouting_time\030\002 \001(\001:\0012\"A\n\016StopSignConfig"
  "\022\025\n\007enabled\030\001 \001(\010:\004true\022\030\n\rstop_distance"
  "\030\002 \001(\001:\0011\"g\n\022TrafficLightConfig\022\025\n\007enabl"
  "ed\030\001 \001(\010:\004true\022\030\n\rstop_distance\030\002 \001(\001:\0011"
  "\022 \n\025max_stop_deceleration\030\003 \001(\001:\0014\"\257\006\n\021T"
  "rafficRuleConfig\022:\n\007rule_id\030\001 \001(\0162).apol"
  "lo.planning.TrafficRuleConfig.RuleId\022\017\n\007"
  "enabled\030\002 \001(\010\022B\n\020backside_vehicle\030\003 \001(\0132"
  "&.apollo.planning.BacksideVehicleConfigH"
  "\000\0228\n\013change_lane\030\004 \001(\0132!.apollo.planning"
  ".ChangeLaneConfigH\000\0225\n\tcrosswalk\030\005 \001(\0132 "
  ".apollo.planning.CrosswalkConfigH\000\0229\n\013de"
  "stination\030\006 \001(\0132\".apollo.planning.Destin"
  "ationConfigH\000\0226\n\nkeep_clear\030\007 \001(\0132 .apol"
  "lo.planning.KeepClearConfigH\000\022E\n\022referen"
  "ce_line_end\030\010 \001(\0132\'.apollo.planning.Refe"
  "renceLineEndConfigH\000\0225\n\trerouting\030\t \001(\0132"
  " .apollo.planning.ReroutingConfigH\000\0224\n\ts"
  "top_sign\030\n \001(\0132\037.apollo.planning.StopSig"
  "nConfigH\000\022<\n\rtraffic_light\030\013 \001(\0132#.apoll"
  "o.planning.TrafficLightConfigH\000\"\250\001\n\006Rule"
  "Id\022\024\n\020BACKSIDE_VEHICLE\020\001\022\017\n\013CHANGE_LANE\020"
  "\002\022\r\n\tCROSSWALK\020\003\022\017\n\013DESTINATION\020\004\022\016\n\nKEE"
  "P_CLEAR\020\005\022\026\n\022REFERENCE_LINE_END\020\006\022\r\n\tRER"
  "OUTING\020\007\022\r\n\tSTOP_SIGN\020\010\022\021\n\rTRAFFIC_LIGHT"
  "\020\tB\010\n\006config\"H\n\022TrafficRuleConfigs\0222\n\006co"
  "nfig\030\001 \003(\0132\".apollo.planning.TrafficRule"
  "Config"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_sccs[12] = {
  &scc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_CreepConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
  &scc_info_TrafficRuleConfigs_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto, "modules/planning/proto/traffic_rule_config.proto", 2286,
  &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto, 12, file_level_enum_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficRuleConfig_RuleId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[0];
}
bool TrafficRuleConfig_RuleId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::BACKSIDE_VEHICLE;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::CHANGE_LANE;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::CROSSWALK;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::DESTINATION;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::KEEP_CLEAR;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::REFERENCE_LINE_END;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::REROUTING;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::STOP_SIGN;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::TRAFFIC_LIGHT;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MIN;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MAX;
constexpr int TrafficRuleConfig::RuleId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BacksideVehicleConfig::InitAsDefaultInstance() {
}
class BacksideVehicleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<BacksideVehicleConfig>()._has_bits_);
  static void set_has_backside_lane_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BacksideVehicleConfig::BacksideVehicleConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.BacksideVehicleConfig)
}
BacksideVehicleConfig::BacksideVehicleConfig(const BacksideVehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backside_lane_width_ = from.backside_lane_width_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.BacksideVehicleConfig)
}

void BacksideVehicleConfig::SharedCtor() {
  backside_lane_width_ = 4;
}

BacksideVehicleConfig::~BacksideVehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.BacksideVehicleConfig)
  SharedDtor();
}

void BacksideVehicleConfig::SharedDtor() {
}

void BacksideVehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BacksideVehicleConfig& BacksideVehicleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BacksideVehicleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BacksideVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.BacksideVehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backside_lane_width_ = 4;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BacksideVehicleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double backside_lane_width = 1 [default = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_backside_lane_width(&has_bits);
          backside_lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BacksideVehicleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.BacksideVehicleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double backside_lane_width = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_backside_lane_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.BacksideVehicleConfig)
  return target;
}

size_t BacksideVehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.BacksideVehicleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double backside_lane_width = 1 [default = 4];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BacksideVehicleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BacksideVehicleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BacksideVehicleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.BacksideVehicleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.BacksideVehicleConfig)
    MergeFrom(*source);
  }
}

void BacksideVehicleConfig::MergeFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_backside_lane_width()) {
    _internal_set_backside_lane_width(from._internal_backside_lane_width());
  }
}

void BacksideVehicleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacksideVehicleConfig::CopyFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacksideVehicleConfig::IsInitialized() const {
  return true;
}

void BacksideVehicleConfig::InternalSwap(BacksideVehicleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(backside_lane_width_, other->backside_lane_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BacksideVehicleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeLaneConfig::InitAsDefaultInstance() {
}
class ChangeLaneConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeLaneConfig>()._has_bits_);
  static void set_has_min_overtake_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_overtake_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_guard_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guard_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_guard_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChangeLaneConfig::ChangeLaneConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ChangeLaneConfig)
}
ChangeLaneConfig::ChangeLaneConfig(const ChangeLaneConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_guard_obstacle_, &from.enable_guard_obstacle_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_guard_speed_) -
    reinterpret_cast<char*>(&enable_guard_obstacle_)) + sizeof(min_guard_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChangeLaneConfig)
}

void ChangeLaneConfig::SharedCtor() {
  enable_guard_obstacle_ = false;
  min_overtake_distance_ = 10;
  min_overtake_time_ = 2;
  guard_distance_ = 100;
  min_guard_speed_ = 1;
}

ChangeLaneConfig::~ChangeLaneConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChangeLaneConfig)
  SharedDtor();
}

void ChangeLaneConfig::SharedDtor() {
}

void ChangeLaneConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeLaneConfig& ChangeLaneConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeLaneConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ChangeLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChangeLaneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    enable_guard_obstacle_ = false;
    min_overtake_distance_ = 10;
    min_overtake_time_ = 2;
    guard_distance_ = 100;
    min_guard_speed_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeLaneConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_overtake_distance = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_overtake_distance(&has_bits);
          min_overtake_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_overtake_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_overtake_time(&has_bits);
          min_overtake_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_guard_obstacle = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_guard_obstacle(&has_bits);
          enable_guard_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double guard_distance = 4 [default = 100];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_guard_distance(&has_bits);
          guard_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_guard_speed = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_min_guard_speed(&has_bits);
          min_guard_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeLaneConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChangeLaneConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_overtake_distance = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_overtake_distance(), target);
  }

  // optional double min_overtake_time = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_overtake_time(), target);
  }

  // optional bool enable_guard_obstacle = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_guard_obstacle(), target);
  }

  // optional double guard_distance = 4 [default = 100];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_guard_distance(), target);
  }

  // optional double min_guard_speed = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_guard_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChangeLaneConfig)
  return target;
}

size_t ChangeLaneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChangeLaneConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool enable_guard_obstacle = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double min_overtake_distance = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_overtake_time = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double guard_distance = 4 [default = 100];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min_guard_speed = 5 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeLaneConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ChangeLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLaneConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeLaneConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ChangeLaneConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ChangeLaneConfig)
    MergeFrom(*source);
  }
}

void ChangeLaneConfig::MergeFrom(const ChangeLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChangeLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_guard_obstacle_ = from.enable_guard_obstacle_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_overtake_distance_ = from.min_overtake_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_overtake_time_ = from.min_overtake_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      guard_distance_ = from.guard_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_guard_speed_ = from.min_guard_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeLaneConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ChangeLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneConfig::CopyFrom(const ChangeLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChangeLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneConfig::IsInitialized() const {
  return true;
}

void ChangeLaneConfig::InternalSwap(ChangeLaneConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_guard_obstacle_, other->enable_guard_obstacle_);
  swap(min_overtake_distance_, other->min_overtake_distance_);
  swap(min_overtake_time_, other->min_overtake_time_);
  swap(guard_distance_, other->guard_distance_);
  swap(min_guard_speed_, other->min_guard_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLaneConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreepConfig::InitAsDefaultInstance() {
}
class CreepConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CreepConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creep_distance_to_stop_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_boundary_t(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_boundary_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CreepConfig::CreepConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CreepConfig)
}
CreepConfig::CreepConfig(const CreepConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_boundary_s_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(min_boundary_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CreepConfig)
}

void CreepConfig::SharedCtor() {
  enabled_ = false;
  creep_distance_to_stop_line_ = 1;
  stop_distance_ = 0.5;
  speed_limit_ = 1;
  max_valid_stop_distance_ = 0.3;
  min_boundary_t_ = 6;
  min_boundary_s_ = 3;
}

CreepConfig::~CreepConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CreepConfig)
  SharedDtor();
}

void CreepConfig::SharedDtor() {
}

void CreepConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreepConfig& CreepConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreepConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CreepConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CreepConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    enabled_ = false;
    creep_distance_to_stop_line_ = 1;
    stop_distance_ = 0.5;
    speed_limit_ = 1;
    max_valid_stop_distance_ = 0.3;
    min_boundary_t_ = 6;
    min_boundary_s_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CreepConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double creep_distance_to_stop_line = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_creep_distance_to_stop_line(&has_bits);
          creep_distance_to_stop_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stop_distance = 3 [default = 0.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 5 [default = 0.3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_boundary_t = 6 [default = 6];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_min_boundary_t(&has_bits);
          min_boundary_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_boundary_s = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_min_boundary_s(&has_bits);
          min_boundary_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreepConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CreepConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional double creep_distance_to_stop_line = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_creep_distance_to_stop_line(), target);
  }

  // optional double stop_distance = 3 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_stop_distance(), target);
  }

  // optional double speed_limit = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_limit(), target);
  }

  // optional double max_valid_stop_distance = 5 [default = 0.3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double min_boundary_t = 6 [default = 6];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_min_boundary_t(), target);
  }

  // optional double min_boundary_s = 7 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_min_boundary_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CreepConfig)
  return target;
}

size_t CreepConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CreepConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double creep_distance_to_stop_line = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 3 [default = 0.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 5 [default = 0.3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_t = 6 [default = 6];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double min_boundary_s = 7 [default = 3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreepConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CreepConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CreepConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreepConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CreepConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CreepConfig)
    MergeFrom(*source);
  }
}

void CreepConfig::MergeFrom(const CreepConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CreepConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      creep_distance_to_stop_line_ = from.creep_distance_to_stop_line_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_boundary_t_ = from.min_boundary_t_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_boundary_s_ = from.min_boundary_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreepConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CreepConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreepConfig::CopyFrom(const CreepConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CreepConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreepConfig::IsInitialized() const {
  return true;
}

void CreepConfig::InternalSwap(CreepConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(creep_distance_to_stop_line_, other->creep_distance_to_stop_line_);
  swap(stop_distance_, other->stop_distance_);
  swap(speed_limit_, other->speed_limit_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_boundary_t_, other->min_boundary_t_);
  swap(min_boundary_s_, other->min_boundary_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreepConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrosswalkConfig::InitAsDefaultInstance() {
}
class CrosswalkConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CrosswalkConfig>()._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_expand_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stop_strict_l_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stop_loose_l_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stop_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CrosswalkConfig::CrosswalkConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CrosswalkConfig)
}
CrosswalkConfig::CrosswalkConfig(const CrosswalkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timeout_) -
    reinterpret_cast<char*>(&stop_distance_)) + sizeof(stop_timeout_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkConfig)
}

void CrosswalkConfig::SharedCtor() {
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
  min_pass_s_distance_ = 1;
  max_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 3;
  expand_s_distance_ = 2;
  stop_strict_l_distance_ = 4;
  stop_loose_l_distance_ = 5;
  stop_timeout_ = 10;
}

CrosswalkConfig::~CrosswalkConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkConfig)
  SharedDtor();
}

void CrosswalkConfig::SharedDtor() {
}

void CrosswalkConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrosswalkConfig& CrosswalkConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrosswalkConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CrosswalkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
    min_pass_s_distance_ = 1;
    max_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 3;
    expand_s_distance_ = 2;
    stop_strict_l_distance_ = 4;
    stop_loose_l_distance_ = 5;
  }
  stop_timeout_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CrosswalkConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_stop_deceleration = 2 [default = 4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_stop_deceleration(&has_bits);
          max_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_stop_speed = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_stop_speed(&has_bits);
          max_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double expand_s_distance = 6 [default = 2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_expand_s_distance(&has_bits);
          expand_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stop_strict_l_distance = 7 [default = 4];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_stop_strict_l_distance(&has_bits);
          stop_strict_l_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stop_loose_l_distance = 8 [default = 5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_stop_loose_l_distance(&has_bits);
          stop_loose_l_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stop_timeout = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_stop_timeout(&has_bits);
          stop_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrosswalkConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional double max_stop_speed = 4 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double expand_s_distance = 6 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_expand_s_distance(), target);
  }

  // optional double stop_strict_l_distance = 7 [default = 4];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_stop_strict_l_distance(), target);
  }

  // optional double stop_loose_l_distance = 8 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_stop_loose_l_distance(), target);
  }

  // optional double stop_timeout = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_stop_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkConfig)
  return target;
}

size_t CrosswalkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double stop_distance = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 2 [default = 4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_stop_speed = 4 [default = 0.3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 5 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double expand_s_distance = 6 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double stop_strict_l_distance = 7 [default = 4];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double stop_loose_l_distance = 8 [default = 5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double stop_timeout = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrosswalkConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CrosswalkConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CrosswalkConfig)
    MergeFrom(*source);
  }
}

void CrosswalkConfig::MergeFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_stop_speed_ = from.max_stop_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      expand_s_distance_ = from.expand_s_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_strict_l_distance_ = from.stop_strict_l_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      stop_loose_l_distance_ = from.stop_loose_l_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_stop_timeout(from._internal_stop_timeout());
  }
}

void CrosswalkConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkConfig::CopyFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkConfig::IsInitialized() const {
  return true;
}

void CrosswalkConfig::InternalSwap(CrosswalkConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_distance_, other->stop_distance_);
  swap(max_stop_deceleration_, other->max_stop_deceleration_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(max_stop_speed_, other->max_stop_speed_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(expand_s_distance_, other->expand_s_distance_);
  swap(stop_strict_l_distance_, other->stop_strict_l_distance_);
  swap(stop_loose_l_distance_, other->stop_loose_l_distance_);
  swap(stop_timeout_, other->stop_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestinationConfig::InitAsDefaultInstance() {
}
class DestinationConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DestinationConfig>()._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestinationConfig::DestinationConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DestinationConfig)
}
DestinationConfig::DestinationConfig(const DestinationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_distance_ = from.stop_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationConfig)
}

void DestinationConfig::SharedCtor() {
  stop_distance_ = 0.5;
}

DestinationConfig::~DestinationConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationConfig)
  SharedDtor();
}

void DestinationConfig::SharedDtor() {
}

void DestinationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestinationConfig& DestinationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestinationConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DestinationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_distance_ = 0.5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestinationConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestinationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationConfig)
  return target;
}

size_t DestinationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double stop_distance = 1 [default = 0.5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestinationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DestinationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestinationConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DestinationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DestinationConfig)
    MergeFrom(*source);
  }
}

void DestinationConfig::MergeFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stop_distance()) {
    _internal_set_stop_distance(from._internal_stop_distance());
  }
}

void DestinationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationConfig::CopyFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationConfig::IsInitialized() const {
  return true;
}

void DestinationConfig::InternalSwap(DestinationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_distance_, other->stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestinationConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeepClearConfig::InitAsDefaultInstance() {
}
class KeepClearConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<KeepClearConfig>()._has_bits_);
  static void set_has_enable_keep_clear_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_align_with_traffic_sign_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KeepClearConfig::KeepClearConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.KeepClearConfig)
}
KeepClearConfig::KeepClearConfig(const KeepClearConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_keep_clear_zone_, &from.enable_keep_clear_zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&align_with_traffic_sign_tolerance_) -
    reinterpret_cast<char*>(&enable_keep_clear_zone_)) + sizeof(align_with_traffic_sign_tolerance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.KeepClearConfig)
}

void KeepClearConfig::SharedCtor() {
  enable_keep_clear_zone_ = true;
  enable_junction_ = true;
  min_pass_s_distance_ = 2;
  align_with_traffic_sign_tolerance_ = 4.5;
}

KeepClearConfig::~KeepClearConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.KeepClearConfig)
  SharedDtor();
}

void KeepClearConfig::SharedDtor() {
}

void KeepClearConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeepClearConfig& KeepClearConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeepClearConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void KeepClearConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.KeepClearConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    enable_keep_clear_zone_ = true;
    enable_junction_ = true;
    min_pass_s_distance_ = 2;
    align_with_traffic_sign_tolerance_ = 4.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KeepClearConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_keep_clear_zone = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_keep_clear_zone(&has_bits);
          enable_keep_clear_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_junction = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_junction(&has_bits);
          enable_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_align_with_traffic_sign_tolerance(&has_bits);
          align_with_traffic_sign_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepClearConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.KeepClearConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_keep_clear_zone(), target);
  }

  // optional bool enable_junction = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_junction(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_align_with_traffic_sign_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.KeepClearConfig)
  return target;
}

size_t KeepClearConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.KeepClearConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool enable_keep_clear_zone = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_junction = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double min_pass_s_distance = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepClearConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepClearConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepClearConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.KeepClearConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.KeepClearConfig)
    MergeFrom(*source);
  }
}

void KeepClearConfig::MergeFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_keep_clear_zone_ = from.enable_keep_clear_zone_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_junction_ = from.enable_junction_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      align_with_traffic_sign_tolerance_ = from.align_with_traffic_sign_tolerance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeepClearConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepClearConfig::CopyFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClearConfig::IsInitialized() const {
  return true;
}

void KeepClearConfig::InternalSwap(KeepClearConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_keep_clear_zone_, other->enable_keep_clear_zone_);
  swap(enable_junction_, other->enable_junction_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(align_with_traffic_sign_tolerance_, other->align_with_traffic_sign_tolerance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepClearConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceLineEndConfig::InitAsDefaultInstance() {
}
class ReferenceLineEndConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineEndConfig>()._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_reference_line_remain_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReferenceLineEndConfig::ReferenceLineEndConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReferenceLineEndConfig)
}
ReferenceLineEndConfig::ReferenceLineEndConfig(const ReferenceLineEndConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_reference_line_remain_length_) -
    reinterpret_cast<char*>(&stop_distance_)) + sizeof(min_reference_line_remain_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineEndConfig)
}

void ReferenceLineEndConfig::SharedCtor() {
  stop_distance_ = 0.5;
  min_reference_line_remain_length_ = 50;
}

ReferenceLineEndConfig::~ReferenceLineEndConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineEndConfig)
  SharedDtor();
}

void ReferenceLineEndConfig::SharedDtor() {
}

void ReferenceLineEndConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceLineEndConfig& ReferenceLineEndConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceLineEndConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ReferenceLineEndConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineEndConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    stop_distance_ = 0.5;
    min_reference_line_remain_length_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReferenceLineEndConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_reference_line_remain_length = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min_reference_line_remain_length(&has_bits);
          min_reference_line_remain_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceLineEndConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineEndConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_reference_line_remain_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineEndConfig)
  return target;
}

size_t ReferenceLineEndConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineEndConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double min_reference_line_remain_length = 2 [default = 50];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineEndConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineEndConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceLineEndConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReferenceLineEndConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReferenceLineEndConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineEndConfig::MergeFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_reference_line_remain_length_ = from.min_reference_line_remain_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineEndConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineEndConfig::CopyFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineEndConfig::IsInitialized() const {
  return true;
}

void ReferenceLineEndConfig::InternalSwap(ReferenceLineEndConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_distance_, other->stop_distance_);
  swap(min_reference_line_remain_length_, other->min_reference_line_remain_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineEndConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReroutingConfig::InitAsDefaultInstance() {
}
class ReroutingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReroutingConfig>()._has_bits_);
  static void set_has_cooldown_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prepare_rerouting_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReroutingConfig::ReroutingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReroutingConfig)
}
ReroutingConfig::ReroutingConfig(const ReroutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cooldown_time_, &from.cooldown_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_rerouting_time_) -
    reinterpret_cast<char*>(&cooldown_time_)) + sizeof(prepare_rerouting_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingConfig)
}

void ReroutingConfig::SharedCtor() {
  cooldown_time_ = 3;
  prepare_rerouting_time_ = 2;
}

ReroutingConfig::~ReroutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingConfig)
  SharedDtor();
}

void ReroutingConfig::SharedDtor() {
}

void ReroutingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReroutingConfig& ReroutingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReroutingConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ReroutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    cooldown_time_ = 3;
    prepare_rerouting_time_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReroutingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double cooldown_time = 1 [default = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_cooldown_time(&has_bits);
          cooldown_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double prepare_rerouting_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_prepare_rerouting_time(&has_bits);
          prepare_rerouting_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReroutingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cooldown_time = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cooldown_time(), target);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_prepare_rerouting_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingConfig)
  return target;
}

size_t ReroutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double cooldown_time = 1 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double prepare_rerouting_time = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReroutingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReroutingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReroutingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReroutingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReroutingConfig)
    MergeFrom(*source);
  }
}

void ReroutingConfig::MergeFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cooldown_time_ = from.cooldown_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      prepare_rerouting_time_ = from.prepare_rerouting_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReroutingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingConfig::CopyFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingConfig::IsInitialized() const {
  return true;
}

void ReroutingConfig::InternalSwap(ReroutingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cooldown_time_, other->cooldown_time_);
  swap(prepare_rerouting_time_, other->prepare_rerouting_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReroutingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopSignConfig::InitAsDefaultInstance() {
}
class StopSignConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSignConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopSignConfig::StopSignConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignConfig)
}
StopSignConfig::StopSignConfig(const StopSignConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_distance_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignConfig)
}

void StopSignConfig::SharedCtor() {
  enabled_ = true;
  stop_distance_ = 1;
}

StopSignConfig::~StopSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignConfig)
  SharedDtor();
}

void StopSignConfig::SharedDtor() {
}

void StopSignConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopSignConfig& StopSignConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopSignConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StopSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    enabled_ = true;
    stop_distance_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StopSignConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSignConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignConfig)
  return target;
}

size_t StopSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSignConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSignConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignConfig)
    MergeFrom(*source);
  }
}

void StopSignConfig::MergeFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopSignConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignConfig::CopyFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignConfig::IsInitialized() const {
  return true;
}

void StopSignConfig::InternalSwap(StopSignConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(stop_distance_, other->stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSignConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightConfig::InitAsDefaultInstance() {
}
class TrafficLightConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrafficLightConfig::TrafficLightConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficLightConfig)
}
TrafficLightConfig::TrafficLightConfig(const TrafficLightConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_stop_deceleration_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(max_stop_deceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightConfig)
}

void TrafficLightConfig::SharedCtor() {
  enabled_ = true;
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
}

TrafficLightConfig::~TrafficLightConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightConfig)
  SharedDtor();
}

void TrafficLightConfig::SharedDtor() {
}

void TrafficLightConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightConfig& TrafficLightConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    enabled_ = true;
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLightConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_stop_deceleration = 3 [default = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_stop_deceleration(&has_bits);
          max_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_distance(), target);
  }

  // optional double max_stop_deceleration = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_stop_deceleration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightConfig)
  return target;
}

size_t TrafficLightConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool enabled = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 3 [default = 4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficLightConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficLightConfig)
    MergeFrom(*source);
  }
}

void TrafficLightConfig::MergeFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightConfig::CopyFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightConfig::IsInitialized() const {
  return true;
}

void TrafficLightConfig::InternalSwap(TrafficLightConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(stop_distance_, other->stop_distance_);
  swap(max_stop_deceleration_, other->max_stop_deceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRuleConfig::InitAsDefaultInstance() {
  ::apollo::planning::_TrafficRuleConfig_default_instance_.backside_vehicle_ = const_cast< ::apollo::planning::BacksideVehicleConfig*>(
      ::apollo::planning::BacksideVehicleConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.change_lane_ = const_cast< ::apollo::planning::ChangeLaneConfig*>(
      ::apollo::planning::ChangeLaneConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.crosswalk_ = const_cast< ::apollo::planning::CrosswalkConfig*>(
      ::apollo::planning::CrosswalkConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.destination_ = const_cast< ::apollo::planning::DestinationConfig*>(
      ::apollo::planning::DestinationConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.keep_clear_ = const_cast< ::apollo::planning::KeepClearConfig*>(
      ::apollo::planning::KeepClearConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.reference_line_end_ = const_cast< ::apollo::planning::ReferenceLineEndConfig*>(
      ::apollo::planning::ReferenceLineEndConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.rerouting_ = const_cast< ::apollo::planning::ReroutingConfig*>(
      ::apollo::planning::ReroutingConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.stop_sign_ = const_cast< ::apollo::planning::StopSignConfig*>(
      ::apollo::planning::StopSignConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.traffic_light_ = const_cast< ::apollo::planning::TrafficLightConfig*>(
      ::apollo::planning::TrafficLightConfig::internal_default_instance());
}
class TrafficRuleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficRuleConfig>()._has_bits_);
  static void set_has_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::BacksideVehicleConfig& backside_vehicle(const TrafficRuleConfig* msg);
  static const ::apollo::planning::ChangeLaneConfig& change_lane(const TrafficRuleConfig* msg);
  static const ::apollo::planning::CrosswalkConfig& crosswalk(const TrafficRuleConfig* msg);
  static const ::apollo::planning::DestinationConfig& destination(const TrafficRuleConfig* msg);
  static const ::apollo::planning::KeepClearConfig& keep_clear(const TrafficRuleConfig* msg);
  static const ::apollo::planning::ReferenceLineEndConfig& reference_line_end(const TrafficRuleConfig* msg);
  static const ::apollo::planning::ReroutingConfig& rerouting(const TrafficRuleConfig* msg);
  static const ::apollo::planning::StopSignConfig& stop_sign(const TrafficRuleConfig* msg);
  static const ::apollo::planning::TrafficLightConfig& traffic_light(const TrafficRuleConfig* msg);
};

const ::apollo::planning::BacksideVehicleConfig&
TrafficRuleConfig::_Internal::backside_vehicle(const TrafficRuleConfig* msg) {
  return *msg->config_.backside_vehicle_;
}
const ::apollo::planning::ChangeLaneConfig&
TrafficRuleConfig::_Internal::change_lane(const TrafficRuleConfig* msg) {
  return *msg->config_.change_lane_;
}
const ::apollo::planning::CrosswalkConfig&
TrafficRuleConfig::_Internal::crosswalk(const TrafficRuleConfig* msg) {
  return *msg->config_.crosswalk_;
}
const ::apollo::planning::DestinationConfig&
TrafficRuleConfig::_Internal::destination(const TrafficRuleConfig* msg) {
  return *msg->config_.destination_;
}
const ::apollo::planning::KeepClearConfig&
TrafficRuleConfig::_Internal::keep_clear(const TrafficRuleConfig* msg) {
  return *msg->config_.keep_clear_;
}
const ::apollo::planning::ReferenceLineEndConfig&
TrafficRuleConfig::_Internal::reference_line_end(const TrafficRuleConfig* msg) {
  return *msg->config_.reference_line_end_;
}
const ::apollo::planning::ReroutingConfig&
TrafficRuleConfig::_Internal::rerouting(const TrafficRuleConfig* msg) {
  return *msg->config_.rerouting_;
}
const ::apollo::planning::StopSignConfig&
TrafficRuleConfig::_Internal::stop_sign(const TrafficRuleConfig* msg) {
  return *msg->config_.stop_sign_;
}
const ::apollo::planning::TrafficLightConfig&
TrafficRuleConfig::_Internal::traffic_light(const TrafficRuleConfig* msg) {
  return *msg->config_.traffic_light_;
}
void TrafficRuleConfig::set_allocated_backside_vehicle(::apollo::planning::BacksideVehicleConfig* backside_vehicle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (backside_vehicle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      backside_vehicle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backside_vehicle, submessage_arena);
    }
    set_has_backside_vehicle();
    config_.backside_vehicle_ = backside_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.backside_vehicle)
}
void TrafficRuleConfig::set_allocated_change_lane(::apollo::planning::ChangeLaneConfig* change_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (change_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lane, submessage_arena);
    }
    set_has_change_lane();
    config_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.change_lane)
}
void TrafficRuleConfig::set_allocated_crosswalk(::apollo::planning::CrosswalkConfig* crosswalk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (crosswalk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crosswalk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosswalk, submessage_arena);
    }
    set_has_crosswalk();
    config_.crosswalk_ = crosswalk;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.crosswalk)
}
void TrafficRuleConfig::set_allocated_destination(::apollo::planning::DestinationConfig* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    set_has_destination();
    config_.destination_ = destination;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.destination)
}
void TrafficRuleConfig::set_allocated_keep_clear(::apollo::planning::KeepClearConfig* keep_clear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (keep_clear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keep_clear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keep_clear, submessage_arena);
    }
    set_has_keep_clear();
    config_.keep_clear_ = keep_clear;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.keep_clear)
}
void TrafficRuleConfig::set_allocated_reference_line_end(::apollo::planning::ReferenceLineEndConfig* reference_line_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (reference_line_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_line_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_line_end, submessage_arena);
    }
    set_has_reference_line_end();
    config_.reference_line_end_ = reference_line_end;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.reference_line_end)
}
void TrafficRuleConfig::set_allocated_rerouting(::apollo::planning::ReroutingConfig* rerouting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (rerouting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rerouting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rerouting, submessage_arena);
    }
    set_has_rerouting();
    config_.rerouting_ = rerouting;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.rerouting)
}
void TrafficRuleConfig::set_allocated_stop_sign(::apollo::planning::StopSignConfig* stop_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (stop_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_sign, submessage_arena);
    }
    set_has_stop_sign();
    config_.stop_sign_ = stop_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.stop_sign)
}
void TrafficRuleConfig::set_allocated_traffic_light(::apollo::planning::TrafficLightConfig* traffic_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (traffic_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    set_has_traffic_light();
    config_.traffic_light_ = traffic_light;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.traffic_light)
}
TrafficRuleConfig::TrafficRuleConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficRuleConfig)
}
TrafficRuleConfig::TrafficRuleConfig(const TrafficRuleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_id_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(rule_id_));
  clear_has_config();
  switch (from.config_case()) {
    case kBacksideVehicle: {
      _internal_mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from._internal_backside_vehicle());
      break;
    }
    case kChangeLane: {
      _internal_mutable_change_lane()->::apollo::planning::ChangeLaneConfig::MergeFrom(from._internal_change_lane());
      break;
    }
    case kCrosswalk: {
      _internal_mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from._internal_crosswalk());
      break;
    }
    case kDestination: {
      _internal_mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from._internal_destination());
      break;
    }
    case kKeepClear: {
      _internal_mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from._internal_keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      _internal_mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from._internal_reference_line_end());
      break;
    }
    case kRerouting: {
      _internal_mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from._internal_rerouting());
      break;
    }
    case kStopSign: {
      _internal_mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from._internal_stop_sign());
      break;
    }
    case kTrafficLight: {
      _internal_mutable_traffic_light()->::apollo::planning::TrafficLightConfig::MergeFrom(from._internal_traffic_light());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfig)
}

void TrafficRuleConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  enabled_ = false;
  rule_id_ = 1;
  clear_has_config();
}

TrafficRuleConfig::~TrafficRuleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfig)
  SharedDtor();
}

void TrafficRuleConfig::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
}

void TrafficRuleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRuleConfig& TrafficRuleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRuleConfig_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrafficRuleConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TrafficRuleConfig)
  switch (config_case()) {
    case kBacksideVehicle: {
      delete config_.backside_vehicle_;
      break;
    }
    case kChangeLane: {
      delete config_.change_lane_;
      break;
    }
    case kCrosswalk: {
      delete config_.crosswalk_;
      break;
    }
    case kDestination: {
      delete config_.destination_;
      break;
    }
    case kKeepClear: {
      delete config_.keep_clear_;
      break;
    }
    case kReferenceLineEnd: {
      delete config_.reference_line_end_;
      break;
    }
    case kRerouting: {
      delete config_.rerouting_;
      break;
    }
    case kStopSign: {
      delete config_.stop_sign_;
      break;
    }
    case kTrafficLight: {
      delete config_.traffic_light_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void TrafficRuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    enabled_ = false;
    rule_id_ = 1;
  }
  clear_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficRuleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TrafficRuleConfig_RuleId_IsValid(val))) {
            _internal_set_rule_id(static_cast<::apollo::planning::TrafficRuleConfig_RuleId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_backside_vehicle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ChangeLaneConfig change_lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.CrosswalkConfig crosswalk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DestinationConfig destination = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.KeepClearConfig keep_clear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_keep_clear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ReroutingConfig rerouting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rerouting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StopSignConfig stop_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.TrafficLightConfig traffic_light = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRuleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rule_id(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  switch (config_case()) {
    case kBacksideVehicle: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::backside_vehicle(this), target, stream);
      break;
    }
    case kChangeLane: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::change_lane(this), target, stream);
      break;
    }
    case kCrosswalk: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::crosswalk(this), target, stream);
      break;
    }
    case kDestination: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::destination(this), target, stream);
      break;
    }
    case kKeepClear: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::keep_clear(this), target, stream);
      break;
    }
    case kReferenceLineEnd: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::reference_line_end(this), target, stream);
      break;
    }
    case kRerouting: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::rerouting(this), target, stream);
      break;
    }
    case kStopSign: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::stop_sign(this), target, stream);
      break;
    }
    case kTrafficLight: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::traffic_light(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfig)
  return target;
}

size_t TrafficRuleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rule_id());
    }

  }
  switch (config_case()) {
    // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
    case kBacksideVehicle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.backside_vehicle_);
      break;
    }
    // optional .apollo.planning.ChangeLaneConfig change_lane = 4;
    case kChangeLane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.change_lane_);
      break;
    }
    // optional .apollo.planning.CrosswalkConfig crosswalk = 5;
    case kCrosswalk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.crosswalk_);
      break;
    }
    // optional .apollo.planning.DestinationConfig destination = 6;
    case kDestination: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.destination_);
      break;
    }
    // optional .apollo.planning.KeepClearConfig keep_clear = 7;
    case kKeepClear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.keep_clear_);
      break;
    }
    // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 8;
    case kReferenceLineEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.reference_line_end_);
      break;
    }
    // optional .apollo.planning.ReroutingConfig rerouting = 9;
    case kRerouting: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.rerouting_);
      break;
    }
    // optional .apollo.planning.StopSignConfig stop_sign = 10;
    case kStopSign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.stop_sign_);
      break;
    }
    // optional .apollo.planning.TrafficLightConfig traffic_light = 11;
    case kTrafficLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.traffic_light_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRuleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRuleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRuleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficRuleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficRuleConfig)
    MergeFrom(*source);
  }
}

void TrafficRuleConfig::MergeFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      rule_id_ = from.rule_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.config_case()) {
    case kBacksideVehicle: {
      _internal_mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from._internal_backside_vehicle());
      break;
    }
    case kChangeLane: {
      _internal_mutable_change_lane()->::apollo::planning::ChangeLaneConfig::MergeFrom(from._internal_change_lane());
      break;
    }
    case kCrosswalk: {
      _internal_mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from._internal_crosswalk());
      break;
    }
    case kDestination: {
      _internal_mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from._internal_destination());
      break;
    }
    case kKeepClear: {
      _internal_mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from._internal_keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      _internal_mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from._internal_reference_line_end());
      break;
    }
    case kRerouting: {
      _internal_mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from._internal_rerouting());
      break;
    }
    case kStopSign: {
      _internal_mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from._internal_stop_sign());
      break;
    }
    case kTrafficLight: {
      _internal_mutable_traffic_light()->::apollo::planning::TrafficLightConfig::MergeFrom(from._internal_traffic_light());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void TrafficRuleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfig::CopyFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfig::IsInitialized() const {
  return true;
}

void TrafficRuleConfig::InternalSwap(TrafficRuleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(rule_id_, other->rule_id_);
  swap(config_, other->config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRuleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRuleConfigs::InitAsDefaultInstance() {
}
class TrafficRuleConfigs::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficRuleConfigs>()._has_bits_);
};

TrafficRuleConfigs::TrafficRuleConfigs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficRuleConfigs)
}
TrafficRuleConfigs::TrafficRuleConfigs(const TrafficRuleConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfigs)
}

void TrafficRuleConfigs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficRuleConfigs_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
}

TrafficRuleConfigs::~TrafficRuleConfigs() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfigs)
  SharedDtor();
}

void TrafficRuleConfigs::SharedDtor() {
}

void TrafficRuleConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRuleConfigs& TrafficRuleConfigs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRuleConfigs_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrafficRuleConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficRuleConfigs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.TrafficRuleConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRuleConfigs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfigs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfigs)
  return target;
}

size_t TrafficRuleConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfigs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRuleConfigs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRuleConfigs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRuleConfigs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficRuleConfigs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficRuleConfigs)
    MergeFrom(*source);
  }
}

void TrafficRuleConfigs::MergeFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void TrafficRuleConfigs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfigs::CopyFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfigs::IsInitialized() const {
  return true;
}

void TrafficRuleConfigs::InternalSwap(TrafficRuleConfigs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRuleConfigs::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::BacksideVehicleConfig* Arena::CreateMaybeMessage< ::apollo::planning::BacksideVehicleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::BacksideVehicleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ChangeLaneConfig* Arena::CreateMaybeMessage< ::apollo::planning::ChangeLaneConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ChangeLaneConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CreepConfig* Arena::CreateMaybeMessage< ::apollo::planning::CreepConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CreepConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CrosswalkConfig* Arena::CreateMaybeMessage< ::apollo::planning::CrosswalkConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CrosswalkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DestinationConfig* Arena::CreateMaybeMessage< ::apollo::planning::DestinationConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DestinationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::KeepClearConfig* Arena::CreateMaybeMessage< ::apollo::planning::KeepClearConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::KeepClearConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReferenceLineEndConfig* Arena::CreateMaybeMessage< ::apollo::planning::ReferenceLineEndConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReferenceLineEndConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReroutingConfig* Arena::CreateMaybeMessage< ::apollo::planning::ReroutingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReroutingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopSignConfig* Arena::CreateMaybeMessage< ::apollo::planning::StopSignConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StopSignConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightConfig* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficLightConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficRuleConfig* Arena::CreateMaybeMessage< ::apollo::planning::TrafficRuleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficRuleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficRuleConfigs* Arena::CreateMaybeMessage< ::apollo::planning::TrafficRuleConfigs >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficRuleConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
