// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/fem_pos_deviation_smoother_config.proto

#include "modules/planning/proto/fem_pos_deviation_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class FemPosDeviationSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FemPosDeviationSmootherConfig> _instance;
} _FemPosDeviationSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::FemPosDeviationSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::FemPosDeviationSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_fem_pose_deviation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_ref_deviation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, weight_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, time_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, verbose_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, scaled_termination_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, warm_start_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::planning::FemPosDeviationSmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>modules/planning/proto/fem_pos_deviati"
  "on_smoother_config.proto\022\017apollo.plannin"
  "g\"\221\002\n\035FemPosDeviationSmootherConfig\022.\n\031w"
  "eight_fem_pose_deviation\030\002 \001(\001:\01310000000"
  "000\022\037\n\024weight_ref_deviation\030\003 \001(\001:\0011\022\035\n\022"
  "weight_path_length\030\004 \001(\001:\0011\022\025\n\010max_iter\030"
  "\005 \001(\005:\003500\022\025\n\ntime_limit\030\006 \001(\001:\0010\022\026\n\007ver"
  "bose\030\007 \001(\010:\005false\022 \n\022scaled_termination\030"
  "\010 \001(\010:\004true\022\030\n\nwarm_start\030\t \001(\010:\004true"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_sccs[1] = {
  &scc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, "modules/planning/proto/fem_pos_deviation_smoother_config.proto", 357,
  &descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void FemPosDeviationSmootherConfig::InitAsDefaultInstance() {
}
class FemPosDeviationSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FemPosDeviationSmootherConfig>()._has_bits_);
  static void set_has_weight_fem_pose_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_ref_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scaled_termination(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_warm_start(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.FemPosDeviationSmootherConfig)
}
FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_limit_, &from.time_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&warm_start_) -
    reinterpret_cast<char*>(&time_limit_)) + sizeof(warm_start_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.FemPosDeviationSmootherConfig)
}

void FemPosDeviationSmootherConfig::SharedCtor() {
  ::memset(&time_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verbose_) -
      reinterpret_cast<char*>(&time_limit_)) + sizeof(verbose_));
  weight_fem_pose_deviation_ = 10000000000;
  weight_ref_deviation_ = 1;
  weight_path_length_ = 1;
  max_iter_ = 500;
  scaled_termination_ = true;
  warm_start_ = true;
}

FemPosDeviationSmootherConfig::~FemPosDeviationSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.FemPosDeviationSmootherConfig)
  SharedDtor();
}

void FemPosDeviationSmootherConfig::SharedDtor() {
}

void FemPosDeviationSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FemPosDeviationSmootherConfig& FemPosDeviationSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FemPosDeviationSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.FemPosDeviationSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verbose_) -
        reinterpret_cast<char*>(&time_limit_)) + sizeof(verbose_));
    weight_fem_pose_deviation_ = 10000000000;
    weight_ref_deviation_ = 1;
    weight_path_length_ = 1;
    max_iter_ = 500;
    scaled_termination_ = true;
    warm_start_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FemPosDeviationSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_fem_pose_deviation = 2 [default = 10000000000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_fem_pose_deviation(&has_bits);
          weight_fem_pose_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_ref_deviation = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_ref_deviation(&has_bits);
          weight_ref_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_path_length = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_weight_path_length(&has_bits);
          weight_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 max_iter = 5 [default = 500];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_iter(&has_bits);
          max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double time_limit = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_time_limit(&has_bits);
          time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool verbose = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_verbose(&has_bits);
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool scaled_termination = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_scaled_termination(&has_bits);
          scaled_termination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warm_start = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_warm_start(&has_bits);
          warm_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FemPosDeviationSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.FemPosDeviationSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_fem_pose_deviation = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_fem_pose_deviation(), target);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_ref_deviation(), target);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_path_length(), target);
  }

  // optional int32 max_iter = 5 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_iter(), target);
  }

  // optional double time_limit = 6 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_time_limit(), target);
  }

  // optional bool verbose = 7 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_verbose(), target);
  }

  // optional bool scaled_termination = 8 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_scaled_termination(), target);
  }

  // optional bool warm_start = 9 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_warm_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.FemPosDeviationSmootherConfig)
  return target;
}

size_t FemPosDeviationSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.FemPosDeviationSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double time_limit = 6 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool verbose = 7 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double weight_fem_pose_deviation = 2 [default = 10000000000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_ref_deviation = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_path_length = 4 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 max_iter = 5 [default = 500];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_iter());
    }

    // optional bool scaled_termination = 8 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool warm_start = 9 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FemPosDeviationSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FemPosDeviationSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FemPosDeviationSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.FemPosDeviationSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.FemPosDeviationSmootherConfig)
    MergeFrom(*source);
  }
}

void FemPosDeviationSmootherConfig::MergeFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_limit_ = from.time_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      verbose_ = from.verbose_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_fem_pose_deviation_ = from.weight_fem_pose_deviation_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_ref_deviation_ = from.weight_ref_deviation_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_path_length_ = from.weight_path_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_iter_ = from.max_iter_;
    }
    if (cached_has_bits & 0x00000040u) {
      scaled_termination_ = from.scaled_termination_;
    }
    if (cached_has_bits & 0x00000080u) {
      warm_start_ = from.warm_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FemPosDeviationSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FemPosDeviationSmootherConfig::CopyFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FemPosDeviationSmootherConfig::IsInitialized() const {
  return true;
}

void FemPosDeviationSmootherConfig::InternalSwap(FemPosDeviationSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_limit_, other->time_limit_);
  swap(verbose_, other->verbose_);
  swap(weight_fem_pose_deviation_, other->weight_fem_pose_deviation_);
  swap(weight_ref_deviation_, other->weight_ref_deviation_);
  swap(weight_path_length_, other->weight_path_length_);
  swap(max_iter_, other->max_iter_);
  swap(scaled_termination_, other->scaled_termination_);
  swap(warm_start_, other->warm_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FemPosDeviationSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::FemPosDeviationSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::FemPosDeviationSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::FemPosDeviationSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
