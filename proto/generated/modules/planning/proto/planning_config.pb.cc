// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#include "modules/planning/proto/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreepDeciderConfig_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flane_5fchange_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneChangeDeciderConfig_modules_2fplanning_2fproto_2flane_5fchange_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ffallback_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSpaceFallBackDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ffallback_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5fpre_5fstop_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSpacePreStopDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5fpre_5fstop_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpath_5fassessment_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathAssessmentDeciderConfig_modules_2fplanning_2fproto_2fpath_5fassessment_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpath_5flane_5fborrow_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathLaneBorrowDeciderConfig_modules_2fplanning_2fproto_2fpath_5flane_5fborrow_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PiecewiseJerkPathConfig_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedConfig_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fproceed_5fwith_5fcaution_5fspeed_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProceedWithCautionSpeedConfig_modules_2fplanning_2fproto_2fproceed_5fwith_5fcaution_5fspeed_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
namespace apollo {
namespace planning {
class PathDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathDeciderConfig> _instance;
} _PathDeciderConfig_default_instance_;
class TaskConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskConfig> _instance;
  const ::apollo::planning::DpStSpeedConfig* dp_st_speed_config_;
  const ::apollo::planning::PathDeciderConfig* path_decider_config_;
  const ::apollo::planning::ProceedWithCautionSpeedConfig* proceed_with_caution_speed_config_;
  const ::apollo::planning::CreepDeciderConfig* creep_decider_config_;
  const ::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config_;
  const ::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config_;
  const ::apollo::planning::PiecewiseJerkPathConfig* piecewise_jerk_path_config_;
  const ::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config_;
  const ::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config_;
  const ::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config_;
  const ::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config_;
  const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config_;
  const ::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config_;
  const ::apollo::planning::PiecewiseJerkSpeedConfig* piecewise_jerk_speed_config_;
  const ::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config_;
  const ::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config_;
  const ::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config_;
} _TaskConfig_default_instance_;
class ScenarioLaneFollowConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioLaneFollowConfig> _instance;
} _ScenarioLaneFollowConfig_default_instance_;
class ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioBareIntersectionUnprotectedConfig> _instance;
} _ScenarioBareIntersectionUnprotectedConfig_default_instance_;
class ScenarioStopSignUnprotectedConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioStopSignUnprotectedConfig> _instance;
} _ScenarioStopSignUnprotectedConfig_default_instance_;
class ScenarioTrafficLightProtectedConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioTrafficLightProtectedConfig> _instance;
} _ScenarioTrafficLightProtectedConfig_default_instance_;
class ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioTrafficLightUnprotectedLeftTurnConfig> _instance;
} _ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
class ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioTrafficLightUnprotectedRightTurnConfig> _instance;
} _ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
class ScenarioPullOverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioPullOverConfig> _instance;
} _ScenarioPullOverConfig_default_instance_;
class ScenarioValetParkingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioValetParkingConfig> _instance;
} _ScenarioValetParkingConfig_default_instance_;
class ScenarioNarrowStreetUTurnConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioNarrowStreetUTurnConfig> _instance;
} _ScenarioNarrowStreetUTurnConfig_default_instance_;
class ScenarioConfig_StageConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioConfig_StageConfig> _instance;
} _ScenarioConfig_StageConfig_default_instance_;
class ScenarioConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioConfig> _instance;
  const ::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config_;
  const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config_;
  const ::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config_;
  const ::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config_;
  const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config_;
  const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config_;
  const ::apollo::planning::ScenarioPullOverConfig* pull_over_config_;
  const ::apollo::planning::ScenarioValetParkingConfig* valet_parking_config_;
  const ::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config_;
} _ScenarioConfig_default_instance_;
class PlannerPublicRoadConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlannerPublicRoadConfig> _instance;
} _PlannerPublicRoadConfig_default_instance_;
class PlannerNaviConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlannerNaviConfig> _instance;
} _PlannerNaviConfig_default_instance_;
class RtkPlanningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtkPlanningConfig> _instance;
} _RtkPlanningConfig_default_instance_;
class StandardPlanningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StandardPlanningConfig> _instance;
} _StandardPlanningConfig_default_instance_;
class NavigationPlanningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationPlanningConfig> _instance;
} _NavigationPlanningConfig_default_instance_;
class PlanningConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningConfig> _instance;
  const ::apollo::planning::RtkPlanningConfig* rtk_planning_config_;
  const ::apollo::planning::StandardPlanningConfig* standard_planning_config_;
  const ::apollo::planning::NavigationPlanningConfig* navigation_planning_config_;
} _PlanningConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NavigationPlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::NavigationPlanningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NavigationPlanningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlannerNaviConfig_default_instance_;
    new (ptr) ::apollo::planning::PlannerNaviConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlannerNaviConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base,
      &scc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto.base,
      &scc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlannerPublicRoadConfig_default_instance_;
    new (ptr) ::apollo::planning::PlannerPublicRoadConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlannerPublicRoadConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::PlanningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RtkPlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::RtkPlanningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RtkPlanningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioBareIntersectionUnprotectedConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_ScenarioConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_ScenarioConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioConfig_StageConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioConfig_StageConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioConfig_StageConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioLaneFollowConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioLaneFollowConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioLaneFollowConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioNarrowStreetUTurnConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioNarrowStreetUTurnConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioNarrowStreetUTurnConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioPullOverConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioPullOverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioPullOverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioStopSignUnprotectedConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioStopSignUnprotectedConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioStopSignUnprotectedConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioTrafficLightProtectedConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioTrafficLightProtectedConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioTrafficLightProtectedConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioValetParkingConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioValetParkingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioValetParkingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StandardPlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::StandardPlanningConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StandardPlanningConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TaskConfig_default_instance_;
    new (ptr) ::apollo::planning::TaskConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TaskConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto}, {
      &scc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto.base,
      &scc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
      &scc_info_ProceedWithCautionSpeedConfig_modules_2fplanning_2fproto_2fproceed_5fwith_5fcaution_5fspeed_5fconfig_2eproto.base,
      &scc_info_CreepDeciderConfig_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto.base,
      &scc_info_OpenSpacePreStopDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5fpre_5fstop_5fdecider_5fconfig_2eproto.base,
      &scc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto.base,
      &scc_info_PiecewiseJerkPathConfig_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto.base,
      &scc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto.base,
      &scc_info_OpenSpaceFallBackDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ffallback_5fdecider_5fconfig_2eproto.base,
      &scc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto.base,
      &scc_info_OpenSpaceTrajectoryProviderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.base,
      &scc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto.base,
      &scc_info_PathAssessmentDeciderConfig_modules_2fplanning_2fproto_2fpath_5fassessment_5fdecider_5fconfig_2eproto.base,
      &scc_info_PiecewiseJerkSpeedConfig_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto.base,
      &scc_info_PathLaneBorrowDeciderConfig_modules_2fplanning_2fproto_2fpath_5flane_5fborrow_5fdecider_5fconfig_2eproto.base,
      &scc_info_LaneChangeDeciderConfig_modules_2fplanning_2fproto_2flane_5fchange_5fdecider_5fconfig_2eproto.base,
      &scc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, task_type_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, dp_st_speed_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, proceed_with_caution_speed_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, creep_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_pre_stop_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, speed_bounds_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, piecewise_jerk_path_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_bounds_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_fallback_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_roi_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_trajectory_provider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_trajectory_partition_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_assessment_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, piecewise_jerk_speed_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_lane_borrow_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, lane_change_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, rule_based_stop_decider_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, task_config_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioLaneFollowConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioLaneFollowConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, start_bare_intersection_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, enable_explicit_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, approach_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, stop_timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, creep_timeout_sec_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, start_stop_sign_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, watch_vehicle_max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, stop_duration_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, stop_timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, creep_timeout_sec_),
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, start_traffic_light_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, min_pass_s_distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, start_traffic_light_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, creep_timeout_sec_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, start_traffic_light_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, enable_right_turn_on_red_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, red_light_right_turn_stop_duration_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, creep_timeout_sec_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, start_pull_over_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, pull_over_min_distance_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_distance_stop_search_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_s_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_l_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_theta_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_distance_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, pass_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, s_distance_to_stop_for_open_space_parking_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, parking_spot_range_to_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, max_adc_stop_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioNarrowStreetUTurnConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioNarrowStreetUTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, stage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, task_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, task_config_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, scenario_type_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, lane_follow_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, bare_intersection_unprotected_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, stop_sign_unprotected_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, traffic_light_protected_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, traffic_light_unprotected_right_turn_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, traffic_light_unprotected_left_turn_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, pull_over_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, valet_parking_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, narrow_street_u_turn_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, stage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, stage_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, scenario_config_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerPublicRoadConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerPublicRoadConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerPublicRoadConfig, scenario_type_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, task_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, navi_path_decider_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, navi_speed_decider_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, navi_obstacle_decider_config_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, planner_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, planner_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, planner_public_road_config_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, planner_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, planner_navi_config_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::apollo::planning::PlanningConfigDefaultTypeInternal, rtk_planning_config_),
  offsetof(::apollo::planning::PlanningConfigDefaultTypeInternal, standard_planning_config_),
  offsetof(::apollo::planning::PlanningConfigDefaultTypeInternal, navigation_planning_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, default_task_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, planning_config_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::apollo::planning::PathDeciderConfig)},
  { 5, 29, sizeof(::apollo::planning::TaskConfig)},
  { 47, 52, sizeof(::apollo::planning::ScenarioLaneFollowConfig)},
  { 52, 64, sizeof(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig)},
  { 71, 84, sizeof(::apollo::planning::ScenarioStopSignUnprotectedConfig)},
  { 92, 101, sizeof(::apollo::planning::ScenarioTrafficLightProtectedConfig)},
  { 105, 115, sizeof(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig)},
  { 120, 132, sizeof(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig)},
  { 139, 155, sizeof(::apollo::planning::ScenarioPullOverConfig)},
  { 166, 174, sizeof(::apollo::planning::ScenarioValetParkingConfig)},
  { 177, 182, sizeof(::apollo::planning::ScenarioNarrowStreetUTurnConfig)},
  { 182, 191, sizeof(::apollo::planning::ScenarioConfig_StageConfig)},
  { 195, 213, sizeof(::apollo::planning::ScenarioConfig)},
  { 225, 231, sizeof(::apollo::planning::PlannerPublicRoadConfig)},
  { 232, 241, sizeof(::apollo::planning::PlannerNaviConfig)},
  { 245, 251, sizeof(::apollo::planning::RtkPlanningConfig)},
  { 252, 259, sizeof(::apollo::planning::StandardPlanningConfig)},
  { 261, 268, sizeof(::apollo::planning::NavigationPlanningConfig)},
  { 270, 280, sizeof(::apollo::planning::PlanningConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TaskConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioLaneFollowConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioBareIntersectionUnprotectedConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioStopSignUnprotectedConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioTrafficLightProtectedConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioPullOverConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioValetParkingConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioNarrowStreetUTurnConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioConfig_StageConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlannerPublicRoadConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlannerNaviConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RtkPlanningConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_StandardPlanningConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NavigationPlanningConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/planning/proto/planning_config"
  ".proto\022\017apollo.planning\032+modules/plannin"
  "g/proto/decider_config.proto\032/modules/pl"
  "anning/proto/dp_st_speed_config.proto\0327m"
  "odules/planning/proto/lane_change_decide"
  "r_config.proto\032\?modules/planning/proto/o"
  "pen_space_fallback_decider_config.proto\032"
  "\?modules/planning/proto/open_space_pre_s"
  "top_decider_config.proto\032:modules/planni"
  "ng/proto/open_space_roi_decider_config.p"
  "roto\032Bmodules/planning/proto/open_space_"
  "trajectory_provider_config.proto\032Cmodule"
  "s/planning/proto/open_space_trajectory_p"
  "artition_config.proto\032;modules/planning/"
  "proto/path_assessment_decider_config.pro"
  "to\0327modules/planning/proto/path_bounds_d"
  "ecider_config.proto\032<modules/planning/pr"
  "oto/path_lane_borrow_decider_config.prot"
  "o\0327modules/planning/proto/piecewise_jerk"
  "_path_config.proto\0328modules/planning/pro"
  "to/piecewise_jerk_speed_config.proto\032>mo"
  "dules/planning/proto/proceed_with_cautio"
  "n_speed_config.proto\032;modules/planning/p"
  "roto/rule_based_stop_decider_config.prot"
  "o\0328modules/planning/proto/speed_bounds_d"
  "ecider_config.proto\0325modules/planning/pr"
  "oto/navi_path_decider_config.proto\0326modu"
  "les/planning/proto/navi_speed_decider_co"
  "nfig.proto\0329modules/planning/proto/navi_"
  "obstacle_decider_config.proto\"\023\n\021PathDec"
  "iderConfig\"\207\021\n\nTaskConfig\0227\n\ttask_type\030\001"
  " \001(\0162$.apollo.planning.TaskConfig.TaskTy"
  "pe\022>\n\022dp_st_speed_config\030\003 \001(\0132 .apollo."
  "planning.DpStSpeedConfigH\000\022A\n\023path_decid"
  "er_config\030\007 \001(\0132\".apollo.planning.PathDe"
  "ciderConfigH\000\022[\n!proceed_with_caution_sp"
  "eed_config\030\010 \001(\0132..apollo.planning.Proce"
  "edWithCautionSpeedConfigH\000\022C\n\024creep_deci"
  "der_config\030\n \001(\0132#.apollo.planning.Creep"
  "DeciderConfigH\000\022\\\n\"open_space_pre_stop_d"
  "ecider_config\030\013 \001(\0132..apollo.planning.Op"
  "enSpacePreStopDeciderConfigH\000\022P\n\033speed_b"
  "ounds_decider_config\030\017 \001(\0132).apollo.plan"
  "ning.SpeedBoundsDeciderConfigH\000\022N\n\032piece"
  "wise_jerk_path_config\030\020 \001(\0132(.apollo.pla"
  "nning.PiecewiseJerkPathConfigH\000\022N\n\032path_"
  "bounds_decider_config\030\021 \001(\0132(.apollo.pla"
  "nning.PathBoundsDeciderConfigH\000\022]\n\"open_"
  "space_fallback_decider_config\030\022 \001(\0132/.ap"
  "ollo.planning.OpenSpaceFallBackDeciderCo"
  "nfigH\000\022S\n\035open_space_roi_decider_config\030"
  "\023 \001(\0132*.apollo.planning.OpenSpaceRoiDeci"
  "derConfigH\000\022c\n%open_space_trajectory_pro"
  "vider_config\030\024 \001(\01322.apollo.planning.Ope"
  "nSpaceTrajectoryProviderConfigH\000\022e\n&open"
  "_space_trajectory_partition_config\030\025 \001(\013"
  "23.apollo.planning.OpenSpaceTrajectoryPa"
  "rtitionConfigH\000\022V\n\036path_assessment_decid"
  "er_config\030\026 \001(\0132,.apollo.planning.PathAs"
  "sessmentDeciderConfigH\000\022P\n\033piecewise_jer"
  "k_speed_config\030\027 \001(\0132).apollo.planning.P"
  "iecewiseJerkSpeedConfigH\000\022W\n\037path_lane_b"
  "orrow_decider_config\030\030 \001(\0132,.apollo.plan"
  "ning.PathLaneBorrowDeciderConfigH\000\022N\n\032la"
  "ne_change_decider_config\030\031 \001(\0132(.apollo."
  "planning.LaneChangeDeciderConfigH\000\022U\n\036ru"
  "le_based_stop_decider_config\030\032 \001(\0132+.apo"
  "llo.planning.RuleBasedStopDeciderConfigH"
  "\000\"\221\005\n\010TaskType\022\031\n\025DP_ST_SPEED_OPTIMIZER\020"
  "\001\022\020\n\014PATH_DECIDER\020\004\022\021\n\rSPEED_DECIDER\020\005\022\025"
  "\n\021NAVI_PATH_DECIDER\020\007\022\026\n\022NAVI_SPEED_DECI"
  "DER\020\010\022\031\n\025NAVI_OBSTACLE_DECIDER\020\t\022\021\n\rCREE"
  "P_DECIDER\020\013\022\037\n\033OPEN_SPACE_PRE_STOP_DECID"
  "ER\020\014\022\036\n\032PROCEED_WITH_CAUTION_SPEED\020\017\022\017\n\013"
  "DECIDER_RSS\020\020\022\037\n\033SPEED_BOUNDS_PRIORI_DEC"
  "IDER\020\021\022\036\n\032SPEED_BOUNDS_FINAL_DECIDER\020\022\022!"
  "\n\035PIECEWISE_JERK_PATH_OPTIMIZER\020\023\022\027\n\023PAT"
  "H_BOUNDS_DECIDER\020\024\022\032\n\026OPEN_SPACE_ROI_DEC"
  "IDER\020\025\022\"\n\036OPEN_SPACE_TRAJECTORY_PROVIDER"
  "\020\026\022#\n\037OPEN_SPACE_TRAJECTORY_PARTITION\020\027\022"
  "\037\n\033OPEN_SPACE_FALLBACK_DECIDER\020\030\022\033\n\027PATH"
  "_ASSESSMENT_DECIDER\020\031\022\034\n\030PATH_LANE_BORRO"
  "W_DECIDER\020\032\022\"\n\036PIECEWISE_JERK_SPEED_OPTI"
  "MIZER\020\033\022\027\n\023LANE_CHANGE_DECIDER\020\034\022\033\n\027RULE"
  "_BASED_STOP_DECIDER\020\035B\r\n\013task_config\"\032\n\030"
  "ScenarioLaneFollowConfig\"\245\002\n)ScenarioBar"
  "eIntersectionUnprotectedConfig\0225\n)start_"
  "bare_intersection_scenario_distance\030\001 \001("
  "\001:\00225\022#\n\024enable_explicit_stop\030\002 \001(\010:\005fal"
  "se\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0013\022$\n\024ap"
  "proach_speed_limit\030\004 \001(\001:\0066.7056\022\032\n\rstop"
  "_distance\030\005 \001(\001:\0030.5\022\033\n\020stop_timeout_sec"
  "\030\006 \001(\002:\0018\022\035\n\021creep_timeout_sec\030\007 \001(\002:\00210"
  "\"\304\002\n!ScenarioStopSignUnprotectedConfig\022,"
  "\n!start_stop_sign_scenario_distance\030\001 \001("
  "\001:\0015\0220\n%watch_vehicle_max_valid_stop_dis"
  "tance\030\002 \001(\001:\0015\022$\n\027max_valid_stop_distanc"
  "e\030\003 \001(\001:\0033.5\022\037\n\022max_adc_stop_speed\030\004 \001(\001"
  ":\0030.3\022\034\n\021stop_duration_sec\030\005 \001(\002:\0011\022\036\n\023m"
  "in_pass_s_distance\030\006 \001(\001:\0013\022\033\n\020stop_time"
  "out_sec\030\007 \001(\002:\0018\022\035\n\021creep_timeout_sec\030\010 "
  "\001(\002:\00210\"\274\001\n#ScenarioTrafficLightProtecte"
  "dConfig\0220\n%start_traffic_light_scenario_"
  "distance\030\001 \001(\001:\0015\022\"\n\027max_valid_stop_dist"
  "ance\030\002 \001(\001:\0012\022\037\n\022max_adc_stop_speed\030\003 \001("
  "\001:\0030.3\022\036\n\023min_pass_s_distance\030\004 \001(\001:\0013\"\347"
  "\001\n-ScenarioTrafficLightUnprotectedLeftTu"
  "rnConfig\0220\n%start_traffic_light_scenario"
  "_distance\030\001 \001(\001:\0015\022$\n\027max_valid_stop_dis"
  "tance\030\002 \001(\001:\0033.5\022\037\n\022max_adc_stop_speed\030\003"
  " \001(\001:\0030.3\022\036\n\023min_pass_s_distance\030\004 \001(\001:\001"
  "3\022\035\n\021creep_timeout_sec\030\005 \001(\002:\00210\"\304\002\n.Sce"
  "narioTrafficLightUnprotectedRightTurnCon"
  "fig\0220\n%start_traffic_light_scenario_dist"
  "ance\030\001 \001(\001:\0015\022\'\n\030enable_right_turn_on_re"
  "d\030\002 \001(\010:\005false\022$\n\027max_valid_stop_distanc"
  "e\030\003 \001(\001:\0033.5\022\037\n\022max_adc_stop_speed\030\004 \001(\001"
  ":\0030.3\022\036\n\023min_pass_s_distance\030\005 \001(\001:\0013\0221\n"
  "&red_light_right_turn_stop_duration_sec\030"
  "\006 \001(\002:\0013\022\035\n\021creep_timeout_sec\030\007 \001(\002:\00210\""
  "\342\003\n\026ScenarioPullOverConfig\022-\n!start_pull"
  "_over_scenario_distance\030\001 \001(\001:\00250\022)\n\035pul"
  "l_over_min_distance_buffer\030\002 \001(\001:\00210\022$\n\030"
  "max_distance_stop_search\030\003 \001(\001:\00225\022\037\n\022ma"
  "x_adc_stop_speed\030\004 \001(\001:\0030.1\022%\n\030max_s_err"
  "or_to_end_point\030\005 \001(\001:\0030.2\022%\n\030max_l_erro"
  "r_to_end_point\030\006 \001(\001:\0030.5\022)\n\034max_theta_e"
  "rror_to_end_point\030\007 \001(\001:\0030.2\022,\n\037max_dist"
  "ance_error_to_end_point\030\010 \001(\001:\0030.2\022&\n\032pa"
  "ss_destination_threshold\030\t \001(\001:\00210\022\"\n\027ma"
  "x_valid_stop_distance\030\n \001(\001:\0011\0224\n)s_dist"
  "ance_to_stop_for_open_space_parking\030\013 \001("
  "\001:\0017\"\212\001\n\032ScenarioValetParkingConfig\022\'\n\033p"
  "arking_spot_range_to_start\030\001 \001(\001:\00220\022\"\n\027"
  "max_valid_stop_distance\030\002 \001(\001:\0011\022\037\n\022max_"
  "adc_stop_speed\030\003 \001(\001:\0030.1\"!\n\037ScenarioNar"
  "rowStreetUTurnConfig\"\307\023\n\016ScenarioConfig\022"
  "C\n\rscenario_type\030\001 \001(\0162,.apollo.planning"
  ".ScenarioConfig.ScenarioType\022G\n\022lane_fol"
  "low_config\030\002 \001(\0132).apollo.planning.Scena"
  "rioLaneFollowConfigH\000\022j\n$bare_intersecti"
  "on_unprotected_config\030\004 \001(\0132:.apollo.pla"
  "nning.ScenarioBareIntersectionUnprotecte"
  "dConfigH\000\022Z\n\034stop_sign_unprotected_confi"
  "g\030\005 \001(\01322.apollo.planning.ScenarioStopSi"
  "gnUnprotectedConfigH\000\022^\n\036traffic_light_p"
  "rotected_config\030\006 \001(\01324.apollo.planning."
  "ScenarioTrafficLightProtectedConfigH\000\022v\n"
  "+traffic_light_unprotected_right_turn_co"
  "nfig\030\007 \001(\0132\?.apollo.planning.ScenarioTra"
  "fficLightUnprotectedRightTurnConfigH\000\022t\n"
  "*traffic_light_unprotected_left_turn_con"
  "fig\030\010 \001(\0132>.apollo.planning.ScenarioTraf"
  "ficLightUnprotectedLeftTurnConfigH\000\022C\n\020p"
  "ull_over_config\030\t \001(\0132\'.apollo.planning."
  "ScenarioPullOverConfigH\000\022K\n\024valet_parkin"
  "g_config\030\n \001(\0132+.apollo.planning.Scenari"
  "oValetParkingConfigH\000\022W\n\033narrow_street_u"
  "_turn_config\030\013 \001(\01320.apollo.planning.Sce"
  "narioNarrowStreetUTurnConfigH\000\022=\n\nstage_"
  "type\030\014 \003(\0162).apollo.planning.ScenarioCon"
  "fig.StageType\022A\n\014stage_config\030\r \003(\0132+.ap"
  "ollo.planning.ScenarioConfig.StageConfig"
  "\032\316\001\n\013StageConfig\022=\n\nstage_type\030\001 \001(\0162).a"
  "pollo.planning.ScenarioConfig.StageType\022"
  "\025\n\007enabled\030\002 \001(\010:\004true\0227\n\ttask_type\030\003 \003("
  "\0162$.apollo.planning.TaskConfig.TaskType\022"
  "0\n\013task_config\030\004 \003(\0132\033.apollo.planning.T"
  "askConfig\"\317\002\n\014ScenarioType\022\017\n\013LANE_FOLLO"
  "W\020\000\022\017\n\013CHANGE_LANE\020\001\022!\n\035BARE_INTERSECTIO"
  "N_UNPROTECTED\020\003\022\027\n\023STOP_SIGN_PROTECTED\020\004"
  "\022\031\n\025STOP_SIGN_UNPROTECTED\020\005\022\033\n\027TRAFFIC_L"
  "IGHT_PROTECTED\020\006\022\'\n#TRAFFIC_LIGHT_UNPROT"
  "ECTED_LEFT_TURN\020\007\022(\n$TRAFFIC_LIGHT_UNPRO"
  "TECTED_RIGHT_TURN\020\010\022\032\n\026YIELD_SIGN_UNPROT"
  "ECTED\020\t\022\r\n\tPULL_OVER\020\n\022\021\n\rVALET_PARKING\020"
  "\013\022\030\n\024NARROW_STREET_U_TURN\020\014\"\355\006\n\tStageTyp"
  "e\022\014\n\010NO_STAGE\020\000\022\035\n\031LANE_FOLLOW_DEFAULT_S"
  "TAGE\020\001\022+\n&BARE_INTERSECTION_UNPROTECTED_"
  "APPROACH\020\310\001\022(\n#BARE_INTERSECTION_UNPROTE"
  "CTED_CREEP\020\311\001\0226\n1BARE_INTERSECTION_UNPRO"
  "TECTED_INTERSECTION_CRUISE\020\312\001\022#\n\036STOP_SI"
  "GN_UNPROTECTED_PRE_STOP\020\254\002\022\037\n\032STOP_SIGN_"
  "UNPROTECTED_STOP\020\255\002\022 \n\033STOP_SIGN_UNPROTE"
  "CTED_CREEP\020\256\002\022.\n)STOP_SIGN_UNPROTECTED_I"
  "NTERSECTION_CRUISE\020\257\002\022%\n TRAFFIC_LIGHT_P"
  "ROTECTED_APPROACH\020\220\003\0220\n+TRAFFIC_LIGHT_PR"
  "OTECTED_INTERSECTION_CRUISE\020\221\003\022.\n)TRAFFI"
  "C_LIGHT_UNPROTECTED_LEFT_TURN_CREEP\020\232\003\022<"
  "\n7TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_IN"
  "TERSECTION_CRUISE\020\233\003\022.\n)TRAFFIC_LIGHT_UN"
  "PROTECTED_RIGHT_TURN_STOP\020\244\003\022/\n*TRAFFIC_"
  "LIGHT_UNPROTECTED_RIGHT_TURN_CREEP\020\245\003\022=\n"
  "8TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_IN"
  "TERSECTION_CRUISE\020\246\003\022\027\n\022PULL_OVER_APPROA"
  "CH\020\364\003\022%\n PULL_OVER_RETRY_APPROACH_PARKIN"
  "G\020\365\003\022\034\n\027PULL_OVER_RETRY_PARKING\020\366\003\022+\n&VA"
  "LET_PARKING_APPROACHING_PARKING_SPOT\020\376\003\022"
  "\032\n\025VALET_PARKING_PARKING\020\377\003B\021\n\017scenario_"
  "config\"^\n\027PlannerPublicRoadConfig\022C\n\rsce"
  "nario_type\030\001 \003(\0162,.apollo.planning.Scena"
  "rioConfig.ScenarioType\"\257\002\n\021PlannerNaviCo"
  "nfig\0222\n\004task\030\001 \003(\0162$.apollo.planning.Tas"
  "kConfig.TaskType\022H\n\030navi_path_decider_co"
  "nfig\030\002 \001(\0132&.apollo.planning.NaviPathDec"
  "iderConfig\022J\n\031navi_speed_decider_config\030"
  "\003 \001(\0132\'.apollo.planning.NaviSpeedDecider"
  "Config\022P\n\034navi_obstacle_decider_config\030\004"
  " \001(\0132*.apollo.planning.NaviObstacleDecid"
  "erConfig\"G\n\021RtkPlanningConfig\0222\n\014planner"
  "_type\030\001 \001(\0162\034.apollo.planning.PlannerTyp"
  "e\"\232\001\n\026StandardPlanningConfig\0222\n\014planner_"
  "type\030\001 \003(\0162\034.apollo.planning.PlannerType"
  "\022L\n\032planner_public_road_config\030\002 \001(\0132(.a"
  "pollo.planning.PlannerPublicRoadConfig\"\217"
  "\001\n\030NavigationPlanningConfig\0222\n\014planner_t"
  "ype\030\001 \003(\0162\034.apollo.planning.PlannerType\022"
  "\?\n\023planner_navi_config\030\004 \001(\0132\".apollo.pl"
  "anning.PlannerNaviConfig\"\276\002\n\016PlanningCon"
  "fig\022A\n\023rtk_planning_config\030\001 \001(\0132\".apoll"
  "o.planning.RtkPlanningConfigH\000\022K\n\030standa"
  "rd_planning_config\030\002 \001(\0132\'.apollo.planni"
  "ng.StandardPlanningConfigH\000\022O\n\032navigatio"
  "n_planning_config\030\003 \001(\0132).apollo.plannin"
  "g.NavigationPlanningConfigH\000\0228\n\023default_"
  "task_config\030\005 \003(\0132\033.apollo.planning.Task"
  "ConfigB\021\n\017planning_config*>\n\013PlannerType"
  "\022\007\n\003RTK\020\000\022\017\n\013PUBLIC_ROAD\020\001\022\010\n\004NAVI\020\002\022\013\n\007"
  "LATTICE\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_deps[19] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2flane_5fchange_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ffallback_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5fpre_5fstop_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fpath_5fassessment_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fpath_5flane_5fborrow_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fproceed_5fwith_5fcaution_5fspeed_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_sccs[19] = {
  &scc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_PlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
  &scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto, "modules/planning/proto/planning_config.proto", 9129,
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_deps, 19, 19,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto, 19, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskConfig_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[0];
}
bool TaskConfig_TaskType_IsValid(int value) {
  switch (value) {
    case 1:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TaskConfig_TaskType TaskConfig::DP_ST_SPEED_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::PATH_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::SPEED_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::NAVI_PATH_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::NAVI_SPEED_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::NAVI_OBSTACLE_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::CREEP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_PRE_STOP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PROCEED_WITH_CAUTION_SPEED;
constexpr TaskConfig_TaskType TaskConfig::DECIDER_RSS;
constexpr TaskConfig_TaskType TaskConfig::SPEED_BOUNDS_PRIORI_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::SPEED_BOUNDS_FINAL_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_PATH_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::PATH_BOUNDS_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_ROI_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_TRAJECTORY_PROVIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_TRAJECTORY_PARTITION;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_FALLBACK_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_ASSESSMENT_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_LANE_BORROW_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_SPEED_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::LANE_CHANGE_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::RULE_BASED_STOP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::TaskType_MIN;
constexpr TaskConfig_TaskType TaskConfig::TaskType_MAX;
constexpr int TaskConfig::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[1];
}
bool ScenarioConfig_ScenarioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScenarioConfig_ScenarioType ScenarioConfig::LANE_FOLLOW;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::CHANGE_LANE;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::STOP_SIGN_PROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::STOP_SIGN_UNPROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::YIELD_SIGN_UNPROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::PULL_OVER;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::VALET_PARKING;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::NARROW_STREET_U_TURN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MIN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MAX;
constexpr int ScenarioConfig::ScenarioType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioConfig_StageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[2];
}
bool ScenarioConfig_StageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 200:
    case 201:
    case 202:
    case 300:
    case 301:
    case 302:
    case 303:
    case 400:
    case 401:
    case 410:
    case 411:
    case 420:
    case 421:
    case 422:
    case 500:
    case 501:
    case 502:
    case 510:
    case 511:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScenarioConfig_StageType ScenarioConfig::NO_STAGE;
constexpr ScenarioConfig_StageType ScenarioConfig::LANE_FOLLOW_DEFAULT_STAGE;
constexpr ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_PRE_STOP;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_STOP;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::PULL_OVER_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::PULL_OVER_RETRY_APPROACH_PARKING;
constexpr ScenarioConfig_StageType ScenarioConfig::PULL_OVER_RETRY_PARKING;
constexpr ScenarioConfig_StageType ScenarioConfig::VALET_PARKING_APPROACHING_PARKING_SPOT;
constexpr ScenarioConfig_StageType ScenarioConfig::VALET_PARKING_PARKING;
constexpr ScenarioConfig_StageType ScenarioConfig::StageType_MIN;
constexpr ScenarioConfig_StageType ScenarioConfig::StageType_MAX;
constexpr int ScenarioConfig::StageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlannerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[3];
}
bool PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PathDeciderConfig::InitAsDefaultInstance() {
}
class PathDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathDeciderConfig>()._has_bits_);
};

PathDeciderConfig::PathDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathDeciderConfig)
}
PathDeciderConfig::PathDeciderConfig(const PathDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathDeciderConfig)
}

void PathDeciderConfig::SharedCtor() {
}

PathDeciderConfig::~PathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathDeciderConfig)
  SharedDtor();
}

void PathDeciderConfig::SharedDtor() {
}

void PathDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathDeciderConfig& PathDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathDeciderConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PathDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathDeciderConfig)
  return target;
}

size_t PathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathDeciderConfig)
    MergeFrom(*source);
  }
}

void PathDeciderConfig::MergeFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PathDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathDeciderConfig::CopyFrom(const PathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathDeciderConfig::IsInitialized() const {
  return true;
}

void PathDeciderConfig::InternalSwap(PathDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskConfig::InitAsDefaultInstance() {
  ::apollo::planning::_TaskConfig_default_instance_.dp_st_speed_config_ = const_cast< ::apollo::planning::DpStSpeedConfig*>(
      ::apollo::planning::DpStSpeedConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_decider_config_ = const_cast< ::apollo::planning::PathDeciderConfig*>(
      ::apollo::planning::PathDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.proceed_with_caution_speed_config_ = const_cast< ::apollo::planning::ProceedWithCautionSpeedConfig*>(
      ::apollo::planning::ProceedWithCautionSpeedConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.creep_decider_config_ = const_cast< ::apollo::planning::CreepDeciderConfig*>(
      ::apollo::planning::CreepDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_pre_stop_decider_config_ = const_cast< ::apollo::planning::OpenSpacePreStopDeciderConfig*>(
      ::apollo::planning::OpenSpacePreStopDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.speed_bounds_decider_config_ = const_cast< ::apollo::planning::SpeedBoundsDeciderConfig*>(
      ::apollo::planning::SpeedBoundsDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.piecewise_jerk_path_config_ = const_cast< ::apollo::planning::PiecewiseJerkPathConfig*>(
      ::apollo::planning::PiecewiseJerkPathConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_bounds_decider_config_ = const_cast< ::apollo::planning::PathBoundsDeciderConfig*>(
      ::apollo::planning::PathBoundsDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_fallback_decider_config_ = const_cast< ::apollo::planning::OpenSpaceFallBackDeciderConfig*>(
      ::apollo::planning::OpenSpaceFallBackDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_roi_decider_config_ = const_cast< ::apollo::planning::OpenSpaceRoiDeciderConfig*>(
      ::apollo::planning::OpenSpaceRoiDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_trajectory_provider_config_ = const_cast< ::apollo::planning::OpenSpaceTrajectoryProviderConfig*>(
      ::apollo::planning::OpenSpaceTrajectoryProviderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_trajectory_partition_config_ = const_cast< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig*>(
      ::apollo::planning::OpenSpaceTrajectoryPartitionConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_assessment_decider_config_ = const_cast< ::apollo::planning::PathAssessmentDeciderConfig*>(
      ::apollo::planning::PathAssessmentDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.piecewise_jerk_speed_config_ = const_cast< ::apollo::planning::PiecewiseJerkSpeedConfig*>(
      ::apollo::planning::PiecewiseJerkSpeedConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_lane_borrow_decider_config_ = const_cast< ::apollo::planning::PathLaneBorrowDeciderConfig*>(
      ::apollo::planning::PathLaneBorrowDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.lane_change_decider_config_ = const_cast< ::apollo::planning::LaneChangeDeciderConfig*>(
      ::apollo::planning::LaneChangeDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.rule_based_stop_decider_config_ = const_cast< ::apollo::planning::RuleBasedStopDeciderConfig*>(
      ::apollo::planning::RuleBasedStopDeciderConfig::internal_default_instance());
}
class TaskConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskConfig>()._has_bits_);
  static void set_has_task_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::DpStSpeedConfig& dp_st_speed_config(const TaskConfig* msg);
  static const ::apollo::planning::PathDeciderConfig& path_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::ProceedWithCautionSpeedConfig& proceed_with_caution_speed_config(const TaskConfig* msg);
  static const ::apollo::planning::CreepDeciderConfig& creep_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpacePreStopDeciderConfig& open_space_pre_stop_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::SpeedBoundsDeciderConfig& speed_bounds_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PiecewiseJerkPathConfig& piecewise_jerk_path_config(const TaskConfig* msg);
  static const ::apollo::planning::PathBoundsDeciderConfig& path_bounds_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceFallBackDeciderConfig& open_space_fallback_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceRoiDeciderConfig& open_space_roi_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceTrajectoryProviderConfig& open_space_trajectory_provider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig& open_space_trajectory_partition_config(const TaskConfig* msg);
  static const ::apollo::planning::PathAssessmentDeciderConfig& path_assessment_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PiecewiseJerkSpeedConfig& piecewise_jerk_speed_config(const TaskConfig* msg);
  static const ::apollo::planning::PathLaneBorrowDeciderConfig& path_lane_borrow_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::LaneChangeDeciderConfig& lane_change_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::RuleBasedStopDeciderConfig& rule_based_stop_decider_config(const TaskConfig* msg);
};

const ::apollo::planning::DpStSpeedConfig&
TaskConfig::_Internal::dp_st_speed_config(const TaskConfig* msg) {
  return *msg->task_config_.dp_st_speed_config_;
}
const ::apollo::planning::PathDeciderConfig&
TaskConfig::_Internal::path_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.path_decider_config_;
}
const ::apollo::planning::ProceedWithCautionSpeedConfig&
TaskConfig::_Internal::proceed_with_caution_speed_config(const TaskConfig* msg) {
  return *msg->task_config_.proceed_with_caution_speed_config_;
}
const ::apollo::planning::CreepDeciderConfig&
TaskConfig::_Internal::creep_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.creep_decider_config_;
}
const ::apollo::planning::OpenSpacePreStopDeciderConfig&
TaskConfig::_Internal::open_space_pre_stop_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.open_space_pre_stop_decider_config_;
}
const ::apollo::planning::SpeedBoundsDeciderConfig&
TaskConfig::_Internal::speed_bounds_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.speed_bounds_decider_config_;
}
const ::apollo::planning::PiecewiseJerkPathConfig&
TaskConfig::_Internal::piecewise_jerk_path_config(const TaskConfig* msg) {
  return *msg->task_config_.piecewise_jerk_path_config_;
}
const ::apollo::planning::PathBoundsDeciderConfig&
TaskConfig::_Internal::path_bounds_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.path_bounds_decider_config_;
}
const ::apollo::planning::OpenSpaceFallBackDeciderConfig&
TaskConfig::_Internal::open_space_fallback_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.open_space_fallback_decider_config_;
}
const ::apollo::planning::OpenSpaceRoiDeciderConfig&
TaskConfig::_Internal::open_space_roi_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.open_space_roi_decider_config_;
}
const ::apollo::planning::OpenSpaceTrajectoryProviderConfig&
TaskConfig::_Internal::open_space_trajectory_provider_config(const TaskConfig* msg) {
  return *msg->task_config_.open_space_trajectory_provider_config_;
}
const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig&
TaskConfig::_Internal::open_space_trajectory_partition_config(const TaskConfig* msg) {
  return *msg->task_config_.open_space_trajectory_partition_config_;
}
const ::apollo::planning::PathAssessmentDeciderConfig&
TaskConfig::_Internal::path_assessment_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.path_assessment_decider_config_;
}
const ::apollo::planning::PiecewiseJerkSpeedConfig&
TaskConfig::_Internal::piecewise_jerk_speed_config(const TaskConfig* msg) {
  return *msg->task_config_.piecewise_jerk_speed_config_;
}
const ::apollo::planning::PathLaneBorrowDeciderConfig&
TaskConfig::_Internal::path_lane_borrow_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.path_lane_borrow_decider_config_;
}
const ::apollo::planning::LaneChangeDeciderConfig&
TaskConfig::_Internal::lane_change_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.lane_change_decider_config_;
}
const ::apollo::planning::RuleBasedStopDeciderConfig&
TaskConfig::_Internal::rule_based_stop_decider_config(const TaskConfig* msg) {
  return *msg->task_config_.rule_based_stop_decider_config_;
}
void TaskConfig::set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (dp_st_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dp_st_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dp_st_speed_config, submessage_arena);
    }
    set_has_dp_st_speed_config();
    task_config_.dp_st_speed_config_ = dp_st_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.dp_st_speed_config)
}
void TaskConfig::clear_dp_st_speed_config() {
  if (_internal_has_dp_st_speed_config()) {
    delete task_config_.dp_st_speed_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_decider_config, submessage_arena);
    }
    set_has_path_decider_config();
    task_config_.path_decider_config_ = path_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_decider_config)
}
void TaskConfig::set_allocated_proceed_with_caution_speed_config(::apollo::planning::ProceedWithCautionSpeedConfig* proceed_with_caution_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (proceed_with_caution_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proceed_with_caution_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proceed_with_caution_speed_config, submessage_arena);
    }
    set_has_proceed_with_caution_speed_config();
    task_config_.proceed_with_caution_speed_config_ = proceed_with_caution_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.proceed_with_caution_speed_config)
}
void TaskConfig::clear_proceed_with_caution_speed_config() {
  if (_internal_has_proceed_with_caution_speed_config()) {
    delete task_config_.proceed_with_caution_speed_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_creep_decider_config(::apollo::planning::CreepDeciderConfig* creep_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (creep_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      creep_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creep_decider_config, submessage_arena);
    }
    set_has_creep_decider_config();
    task_config_.creep_decider_config_ = creep_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.creep_decider_config)
}
void TaskConfig::clear_creep_decider_config() {
  if (_internal_has_creep_decider_config()) {
    delete task_config_.creep_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_pre_stop_decider_config(::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_pre_stop_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_space_pre_stop_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_pre_stop_decider_config, submessage_arena);
    }
    set_has_open_space_pre_stop_decider_config();
    task_config_.open_space_pre_stop_decider_config_ = open_space_pre_stop_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
}
void TaskConfig::clear_open_space_pre_stop_decider_config() {
  if (_internal_has_open_space_pre_stop_decider_config()) {
    delete task_config_.open_space_pre_stop_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_speed_bounds_decider_config(::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (speed_bounds_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_bounds_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_bounds_decider_config, submessage_arena);
    }
    set_has_speed_bounds_decider_config();
    task_config_.speed_bounds_decider_config_ = speed_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.speed_bounds_decider_config)
}
void TaskConfig::clear_speed_bounds_decider_config() {
  if (_internal_has_speed_bounds_decider_config()) {
    delete task_config_.speed_bounds_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_path_config(::apollo::planning::PiecewiseJerkPathConfig* piecewise_jerk_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (piecewise_jerk_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      piecewise_jerk_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_path_config, submessage_arena);
    }
    set_has_piecewise_jerk_path_config();
    task_config_.piecewise_jerk_path_config_ = piecewise_jerk_path_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_path_config)
}
void TaskConfig::clear_piecewise_jerk_path_config() {
  if (_internal_has_piecewise_jerk_path_config()) {
    delete task_config_.piecewise_jerk_path_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_bounds_decider_config(::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_bounds_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_bounds_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_bounds_decider_config, submessage_arena);
    }
    set_has_path_bounds_decider_config();
    task_config_.path_bounds_decider_config_ = path_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_bounds_decider_config)
}
void TaskConfig::clear_path_bounds_decider_config() {
  if (_internal_has_path_bounds_decider_config()) {
    delete task_config_.path_bounds_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_fallback_decider_config(::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_fallback_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_space_fallback_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_fallback_decider_config, submessage_arena);
    }
    set_has_open_space_fallback_decider_config();
    task_config_.open_space_fallback_decider_config_ = open_space_fallback_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_fallback_decider_config)
}
void TaskConfig::clear_open_space_fallback_decider_config() {
  if (_internal_has_open_space_fallback_decider_config()) {
    delete task_config_.open_space_fallback_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_roi_decider_config(::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_roi_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_space_roi_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_roi_decider_config, submessage_arena);
    }
    set_has_open_space_roi_decider_config();
    task_config_.open_space_roi_decider_config_ = open_space_roi_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_roi_decider_config)
}
void TaskConfig::clear_open_space_roi_decider_config() {
  if (_internal_has_open_space_roi_decider_config()) {
    delete task_config_.open_space_roi_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_trajectory_provider_config(::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_trajectory_provider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_space_trajectory_provider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_provider_config, submessage_arena);
    }
    set_has_open_space_trajectory_provider_config();
    task_config_.open_space_trajectory_provider_config_ = open_space_trajectory_provider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
}
void TaskConfig::clear_open_space_trajectory_provider_config() {
  if (_internal_has_open_space_trajectory_provider_config()) {
    delete task_config_.open_space_trajectory_provider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_trajectory_partition_config(::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_trajectory_partition_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_space_trajectory_partition_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_partition_config, submessage_arena);
    }
    set_has_open_space_trajectory_partition_config();
    task_config_.open_space_trajectory_partition_config_ = open_space_trajectory_partition_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
}
void TaskConfig::clear_open_space_trajectory_partition_config() {
  if (_internal_has_open_space_trajectory_partition_config()) {
    delete task_config_.open_space_trajectory_partition_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_assessment_decider_config(::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_assessment_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_assessment_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_assessment_decider_config, submessage_arena);
    }
    set_has_path_assessment_decider_config();
    task_config_.path_assessment_decider_config_ = path_assessment_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_assessment_decider_config)
}
void TaskConfig::clear_path_assessment_decider_config() {
  if (_internal_has_path_assessment_decider_config()) {
    delete task_config_.path_assessment_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_speed_config(::apollo::planning::PiecewiseJerkSpeedConfig* piecewise_jerk_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (piecewise_jerk_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      piecewise_jerk_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_speed_config, submessage_arena);
    }
    set_has_piecewise_jerk_speed_config();
    task_config_.piecewise_jerk_speed_config_ = piecewise_jerk_speed_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_speed_config)
}
void TaskConfig::clear_piecewise_jerk_speed_config() {
  if (_internal_has_piecewise_jerk_speed_config()) {
    delete task_config_.piecewise_jerk_speed_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_lane_borrow_decider_config(::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_lane_borrow_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_lane_borrow_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_lane_borrow_decider_config, submessage_arena);
    }
    set_has_path_lane_borrow_decider_config();
    task_config_.path_lane_borrow_decider_config_ = path_lane_borrow_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
}
void TaskConfig::clear_path_lane_borrow_decider_config() {
  if (_internal_has_path_lane_borrow_decider_config()) {
    delete task_config_.path_lane_borrow_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_lane_change_decider_config(::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (lane_change_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change_decider_config, submessage_arena);
    }
    set_has_lane_change_decider_config();
    task_config_.lane_change_decider_config_ = lane_change_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.lane_change_decider_config)
}
void TaskConfig::clear_lane_change_decider_config() {
  if (_internal_has_lane_change_decider_config()) {
    delete task_config_.lane_change_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_rule_based_stop_decider_config(::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (rule_based_stop_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rule_based_stop_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule_based_stop_decider_config, submessage_arena);
    }
    set_has_rule_based_stop_decider_config();
    task_config_.rule_based_stop_decider_config_ = rule_based_stop_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.rule_based_stop_decider_config)
}
void TaskConfig::clear_rule_based_stop_decider_config() {
  if (_internal_has_rule_based_stop_decider_config()) {
    delete task_config_.rule_based_stop_decider_config_;
    clear_has_task_config();
  }
}
TaskConfig::TaskConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TaskConfig)
}
TaskConfig::TaskConfig(const TaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_type_ = from.task_type_;
  clear_has_task_config();
  switch (from.task_config_case()) {
    case kDpStSpeedConfig: {
      _internal_mutable_dp_st_speed_config()->::apollo::planning::DpStSpeedConfig::MergeFrom(from._internal_dp_st_speed_config());
      break;
    }
    case kPathDeciderConfig: {
      _internal_mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from._internal_path_decider_config());
      break;
    }
    case kProceedWithCautionSpeedConfig: {
      _internal_mutable_proceed_with_caution_speed_config()->::apollo::planning::ProceedWithCautionSpeedConfig::MergeFrom(from._internal_proceed_with_caution_speed_config());
      break;
    }
    case kCreepDeciderConfig: {
      _internal_mutable_creep_decider_config()->::apollo::planning::CreepDeciderConfig::MergeFrom(from._internal_creep_decider_config());
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      _internal_mutable_open_space_pre_stop_decider_config()->::apollo::planning::OpenSpacePreStopDeciderConfig::MergeFrom(from._internal_open_space_pre_stop_decider_config());
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      _internal_mutable_speed_bounds_decider_config()->::apollo::planning::SpeedBoundsDeciderConfig::MergeFrom(from._internal_speed_bounds_decider_config());
      break;
    }
    case kPiecewiseJerkPathConfig: {
      _internal_mutable_piecewise_jerk_path_config()->::apollo::planning::PiecewiseJerkPathConfig::MergeFrom(from._internal_piecewise_jerk_path_config());
      break;
    }
    case kPathBoundsDeciderConfig: {
      _internal_mutable_path_bounds_decider_config()->::apollo::planning::PathBoundsDeciderConfig::MergeFrom(from._internal_path_bounds_decider_config());
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      _internal_mutable_open_space_fallback_decider_config()->::apollo::planning::OpenSpaceFallBackDeciderConfig::MergeFrom(from._internal_open_space_fallback_decider_config());
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      _internal_mutable_open_space_roi_decider_config()->::apollo::planning::OpenSpaceRoiDeciderConfig::MergeFrom(from._internal_open_space_roi_decider_config());
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      _internal_mutable_open_space_trajectory_provider_config()->::apollo::planning::OpenSpaceTrajectoryProviderConfig::MergeFrom(from._internal_open_space_trajectory_provider_config());
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      _internal_mutable_open_space_trajectory_partition_config()->::apollo::planning::OpenSpaceTrajectoryPartitionConfig::MergeFrom(from._internal_open_space_trajectory_partition_config());
      break;
    }
    case kPathAssessmentDeciderConfig: {
      _internal_mutable_path_assessment_decider_config()->::apollo::planning::PathAssessmentDeciderConfig::MergeFrom(from._internal_path_assessment_decider_config());
      break;
    }
    case kPiecewiseJerkSpeedConfig: {
      _internal_mutable_piecewise_jerk_speed_config()->::apollo::planning::PiecewiseJerkSpeedConfig::MergeFrom(from._internal_piecewise_jerk_speed_config());
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      _internal_mutable_path_lane_borrow_decider_config()->::apollo::planning::PathLaneBorrowDeciderConfig::MergeFrom(from._internal_path_lane_borrow_decider_config());
      break;
    }
    case kLaneChangeDeciderConfig: {
      _internal_mutable_lane_change_decider_config()->::apollo::planning::LaneChangeDeciderConfig::MergeFrom(from._internal_lane_change_decider_config());
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      _internal_mutable_rule_based_stop_decider_config()->::apollo::planning::RuleBasedStopDeciderConfig::MergeFrom(from._internal_rule_based_stop_decider_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskConfig)
}

void TaskConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  task_type_ = 1;
  clear_has_task_config();
}

TaskConfig::~TaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskConfig)
  SharedDtor();
}

void TaskConfig::SharedDtor() {
  if (has_task_config()) {
    clear_task_config();
  }
}

void TaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskConfig& TaskConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TaskConfig::clear_task_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TaskConfig)
  switch (task_config_case()) {
    case kDpStSpeedConfig: {
      delete task_config_.dp_st_speed_config_;
      break;
    }
    case kPathDeciderConfig: {
      delete task_config_.path_decider_config_;
      break;
    }
    case kProceedWithCautionSpeedConfig: {
      delete task_config_.proceed_with_caution_speed_config_;
      break;
    }
    case kCreepDeciderConfig: {
      delete task_config_.creep_decider_config_;
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      delete task_config_.open_space_pre_stop_decider_config_;
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      delete task_config_.speed_bounds_decider_config_;
      break;
    }
    case kPiecewiseJerkPathConfig: {
      delete task_config_.piecewise_jerk_path_config_;
      break;
    }
    case kPathBoundsDeciderConfig: {
      delete task_config_.path_bounds_decider_config_;
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      delete task_config_.open_space_fallback_decider_config_;
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      delete task_config_.open_space_roi_decider_config_;
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      delete task_config_.open_space_trajectory_provider_config_;
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      delete task_config_.open_space_trajectory_partition_config_;
      break;
    }
    case kPathAssessmentDeciderConfig: {
      delete task_config_.path_assessment_decider_config_;
      break;
    }
    case kPiecewiseJerkSpeedConfig: {
      delete task_config_.piecewise_jerk_speed_config_;
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      delete task_config_.path_lane_borrow_decider_config_;
      break;
    }
    case kLaneChangeDeciderConfig: {
      delete task_config_.lane_change_decider_config_;
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      delete task_config_.rule_based_stop_decider_config_;
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_CONFIG_NOT_SET;
}


void TaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_type_ = 1;
  clear_task_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskConfig_TaskType_IsValid(val))) {
            _internal_set_task_type(static_cast<::apollo::planning::TaskConfig_TaskType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dp_st_speed_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ProceedWithCautionSpeedConfig proceed_with_caution_speed_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_proceed_with_caution_speed_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.CreepDeciderConfig creep_decider_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_creep_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_pre_stop_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_bounds_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PiecewiseJerkPathConfig piecewise_jerk_path_config = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_piecewise_jerk_path_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_bounds_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_fallback_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_roi_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_trajectory_provider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_trajectory_partition_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_assessment_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PiecewiseJerkSpeedConfig piecewise_jerk_speed_config = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_piecewise_jerk_speed_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_lane_borrow_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule_based_stop_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_task_type(), target);
  }

  switch (task_config_case()) {
    case kDpStSpeedConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::dp_st_speed_config(this), target, stream);
      break;
    }
    case kPathDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::path_decider_config(this), target, stream);
      break;
    }
    case kProceedWithCautionSpeedConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::proceed_with_caution_speed_config(this), target, stream);
      break;
    }
    case kCreepDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::creep_decider_config(this), target, stream);
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::open_space_pre_stop_decider_config(this), target, stream);
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::speed_bounds_decider_config(this), target, stream);
      break;
    }
    case kPiecewiseJerkPathConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::piecewise_jerk_path_config(this), target, stream);
      break;
    }
    case kPathBoundsDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::path_bounds_decider_config(this), target, stream);
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::open_space_fallback_decider_config(this), target, stream);
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::open_space_roi_decider_config(this), target, stream);
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::open_space_trajectory_provider_config(this), target, stream);
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::open_space_trajectory_partition_config(this), target, stream);
      break;
    }
    case kPathAssessmentDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::path_assessment_decider_config(this), target, stream);
      break;
    }
    case kPiecewiseJerkSpeedConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          23, _Internal::piecewise_jerk_speed_config(this), target, stream);
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          24, _Internal::path_lane_borrow_decider_config(this), target, stream);
      break;
    }
    case kLaneChangeDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          25, _Internal::lane_change_decider_config(this), target, stream);
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          26, _Internal::rule_based_stop_decider_config(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskConfig)
  return target;
}

size_t TaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_task_type());
  }

  switch (task_config_case()) {
    // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
    case kDpStSpeedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.dp_st_speed_config_);
      break;
    }
    // optional .apollo.planning.PathDeciderConfig path_decider_config = 7;
    case kPathDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.path_decider_config_);
      break;
    }
    // optional .apollo.planning.ProceedWithCautionSpeedConfig proceed_with_caution_speed_config = 8;
    case kProceedWithCautionSpeedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.proceed_with_caution_speed_config_);
      break;
    }
    // optional .apollo.planning.CreepDeciderConfig creep_decider_config = 10;
    case kCreepDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.creep_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 11;
    case kOpenSpacePreStopDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_pre_stop_decider_config_);
      break;
    }
    // optional .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 15;
    case kSpeedBoundsDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.speed_bounds_decider_config_);
      break;
    }
    // optional .apollo.planning.PiecewiseJerkPathConfig piecewise_jerk_path_config = 16;
    case kPiecewiseJerkPathConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.piecewise_jerk_path_config_);
      break;
    }
    // optional .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 17;
    case kPathBoundsDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.path_bounds_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 18;
    case kOpenSpaceFallbackDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_fallback_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 19;
    case kOpenSpaceRoiDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_roi_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 20;
    case kOpenSpaceTrajectoryProviderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_trajectory_provider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 21;
    case kOpenSpaceTrajectoryPartitionConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_trajectory_partition_config_);
      break;
    }
    // optional .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 22;
    case kPathAssessmentDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.path_assessment_decider_config_);
      break;
    }
    // optional .apollo.planning.PiecewiseJerkSpeedConfig piecewise_jerk_speed_config = 23;
    case kPiecewiseJerkSpeedConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.piecewise_jerk_speed_config_);
      break;
    }
    // optional .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 24;
    case kPathLaneBorrowDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.path_lane_borrow_decider_config_);
      break;
    }
    // optional .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 25;
    case kLaneChangeDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.lane_change_decider_config_);
      break;
    }
    // optional .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 26;
    case kRuleBasedStopDeciderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_config_.rule_based_stop_decider_config_);
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TaskConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TaskConfig)
    MergeFrom(*source);
  }
}

void TaskConfig::MergeFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_type()) {
    _internal_set_task_type(from._internal_task_type());
  }
  switch (from.task_config_case()) {
    case kDpStSpeedConfig: {
      _internal_mutable_dp_st_speed_config()->::apollo::planning::DpStSpeedConfig::MergeFrom(from._internal_dp_st_speed_config());
      break;
    }
    case kPathDeciderConfig: {
      _internal_mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from._internal_path_decider_config());
      break;
    }
    case kProceedWithCautionSpeedConfig: {
      _internal_mutable_proceed_with_caution_speed_config()->::apollo::planning::ProceedWithCautionSpeedConfig::MergeFrom(from._internal_proceed_with_caution_speed_config());
      break;
    }
    case kCreepDeciderConfig: {
      _internal_mutable_creep_decider_config()->::apollo::planning::CreepDeciderConfig::MergeFrom(from._internal_creep_decider_config());
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      _internal_mutable_open_space_pre_stop_decider_config()->::apollo::planning::OpenSpacePreStopDeciderConfig::MergeFrom(from._internal_open_space_pre_stop_decider_config());
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      _internal_mutable_speed_bounds_decider_config()->::apollo::planning::SpeedBoundsDeciderConfig::MergeFrom(from._internal_speed_bounds_decider_config());
      break;
    }
    case kPiecewiseJerkPathConfig: {
      _internal_mutable_piecewise_jerk_path_config()->::apollo::planning::PiecewiseJerkPathConfig::MergeFrom(from._internal_piecewise_jerk_path_config());
      break;
    }
    case kPathBoundsDeciderConfig: {
      _internal_mutable_path_bounds_decider_config()->::apollo::planning::PathBoundsDeciderConfig::MergeFrom(from._internal_path_bounds_decider_config());
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      _internal_mutable_open_space_fallback_decider_config()->::apollo::planning::OpenSpaceFallBackDeciderConfig::MergeFrom(from._internal_open_space_fallback_decider_config());
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      _internal_mutable_open_space_roi_decider_config()->::apollo::planning::OpenSpaceRoiDeciderConfig::MergeFrom(from._internal_open_space_roi_decider_config());
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      _internal_mutable_open_space_trajectory_provider_config()->::apollo::planning::OpenSpaceTrajectoryProviderConfig::MergeFrom(from._internal_open_space_trajectory_provider_config());
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      _internal_mutable_open_space_trajectory_partition_config()->::apollo::planning::OpenSpaceTrajectoryPartitionConfig::MergeFrom(from._internal_open_space_trajectory_partition_config());
      break;
    }
    case kPathAssessmentDeciderConfig: {
      _internal_mutable_path_assessment_decider_config()->::apollo::planning::PathAssessmentDeciderConfig::MergeFrom(from._internal_path_assessment_decider_config());
      break;
    }
    case kPiecewiseJerkSpeedConfig: {
      _internal_mutable_piecewise_jerk_speed_config()->::apollo::planning::PiecewiseJerkSpeedConfig::MergeFrom(from._internal_piecewise_jerk_speed_config());
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      _internal_mutable_path_lane_borrow_decider_config()->::apollo::planning::PathLaneBorrowDeciderConfig::MergeFrom(from._internal_path_lane_borrow_decider_config());
      break;
    }
    case kLaneChangeDeciderConfig: {
      _internal_mutable_lane_change_decider_config()->::apollo::planning::LaneChangeDeciderConfig::MergeFrom(from._internal_lane_change_decider_config());
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      _internal_mutable_rule_based_stop_decider_config()->::apollo::planning::RuleBasedStopDeciderConfig::MergeFrom(from._internal_rule_based_stop_decider_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
}

void TaskConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskConfig::CopyFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConfig::IsInitialized() const {
  return true;
}

void TaskConfig::InternalSwap(TaskConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(task_type_, other->task_type_);
  swap(task_config_, other->task_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioLaneFollowConfig::InitAsDefaultInstance() {
}
class ScenarioLaneFollowConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioLaneFollowConfig>()._has_bits_);
};

ScenarioLaneFollowConfig::ScenarioLaneFollowConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioLaneFollowConfig)
}
ScenarioLaneFollowConfig::ScenarioLaneFollowConfig(const ScenarioLaneFollowConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioLaneFollowConfig)
}

void ScenarioLaneFollowConfig::SharedCtor() {
}

ScenarioLaneFollowConfig::~ScenarioLaneFollowConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioLaneFollowConfig)
  SharedDtor();
}

void ScenarioLaneFollowConfig::SharedDtor() {
}

void ScenarioLaneFollowConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioLaneFollowConfig& ScenarioLaneFollowConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioLaneFollowConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioLaneFollowConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioLaneFollowConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioLaneFollowConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioLaneFollowConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioLaneFollowConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioLaneFollowConfig)
  return target;
}

size_t ScenarioLaneFollowConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioLaneFollowConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioLaneFollowConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioLaneFollowConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioLaneFollowConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioLaneFollowConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioLaneFollowConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioLaneFollowConfig)
    MergeFrom(*source);
  }
}

void ScenarioLaneFollowConfig::MergeFrom(const ScenarioLaneFollowConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioLaneFollowConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScenarioLaneFollowConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioLaneFollowConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioLaneFollowConfig::CopyFrom(const ScenarioLaneFollowConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioLaneFollowConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioLaneFollowConfig::IsInitialized() const {
  return true;
}

void ScenarioLaneFollowConfig::InternalSwap(ScenarioLaneFollowConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioLaneFollowConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioBareIntersectionUnprotectedConfig::InitAsDefaultInstance() {
}
class ScenarioBareIntersectionUnprotectedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioBareIntersectionUnprotectedConfig>()._has_bits_);
  static void set_has_start_bare_intersection_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_explicit_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_approach_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}
ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig(const ScenarioBareIntersectionUnprotectedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_explicit_stop_, &from.enable_explicit_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&creep_timeout_sec_) -
    reinterpret_cast<char*>(&enable_explicit_stop_)) + sizeof(creep_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}

void ScenarioBareIntersectionUnprotectedConfig::SharedCtor() {
  enable_explicit_stop_ = false;
  start_bare_intersection_scenario_distance_ = 25;
  min_pass_s_distance_ = 3;
  approach_speed_limit_ = 6.7056;
  stop_distance_ = 0.5;
  stop_timeout_sec_ = 8;
  creep_timeout_sec_ = 10;
}

ScenarioBareIntersectionUnprotectedConfig::~ScenarioBareIntersectionUnprotectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  SharedDtor();
}

void ScenarioBareIntersectionUnprotectedConfig::SharedDtor() {
}

void ScenarioBareIntersectionUnprotectedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioBareIntersectionUnprotectedConfig& ScenarioBareIntersectionUnprotectedConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioBareIntersectionUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioBareIntersectionUnprotectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    enable_explicit_stop_ = false;
    start_bare_intersection_scenario_distance_ = 25;
    min_pass_s_distance_ = 3;
    approach_speed_limit_ = 6.7056;
    stop_distance_ = 0.5;
    stop_timeout_sec_ = 8;
    creep_timeout_sec_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioBareIntersectionUnprotectedConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_bare_intersection_scenario_distance(&has_bits);
          start_bare_intersection_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_explicit_stop = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_explicit_stop(&has_bits);
          enable_explicit_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double approach_speed_limit = 4 [default = 6.7056];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_approach_speed_limit(&has_bits);
          approach_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stop_distance = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_stop_distance(&has_bits);
          stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float stop_timeout_sec = 6 [default = 8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_stop_timeout_sec(&has_bits);
          stop_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioBareIntersectionUnprotectedConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_bare_intersection_scenario_distance(), target);
  }

  // optional bool enable_explicit_stop = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_explicit_stop(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional double approach_speed_limit = 4 [default = 6.7056];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_approach_speed_limit(), target);
  }

  // optional double stop_distance = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_stop_distance(), target);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_stop_timeout_sec(), target);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  return target;
}

size_t ScenarioBareIntersectionUnprotectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool enable_explicit_stop = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double approach_speed_limit = 4 [default = 6.7056];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float stop_timeout_sec = 6 [default = 8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float creep_timeout_sec = 7 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioBareIntersectionUnprotectedConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioBareIntersectionUnprotectedConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioBareIntersectionUnprotectedConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
    MergeFrom(*source);
  }
}

void ScenarioBareIntersectionUnprotectedConfig::MergeFrom(const ScenarioBareIntersectionUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_explicit_stop_ = from.enable_explicit_stop_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_bare_intersection_scenario_distance_ = from.start_bare_intersection_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      approach_speed_limit_ = from.approach_speed_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_timeout_sec_ = from.stop_timeout_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioBareIntersectionUnprotectedConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioBareIntersectionUnprotectedConfig::CopyFrom(const ScenarioBareIntersectionUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioBareIntersectionUnprotectedConfig::IsInitialized() const {
  return true;
}

void ScenarioBareIntersectionUnprotectedConfig::InternalSwap(ScenarioBareIntersectionUnprotectedConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_explicit_stop_, other->enable_explicit_stop_);
  swap(start_bare_intersection_scenario_distance_, other->start_bare_intersection_scenario_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(approach_speed_limit_, other->approach_speed_limit_);
  swap(stop_distance_, other->stop_distance_);
  swap(stop_timeout_sec_, other->stop_timeout_sec_);
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioBareIntersectionUnprotectedConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioStopSignUnprotectedConfig::InitAsDefaultInstance() {
}
class ScenarioStopSignUnprotectedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioStopSignUnprotectedConfig>()._has_bits_);
  static void set_has_start_stop_sign_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_watch_vehicle_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stop_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
}
ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig(const ScenarioStopSignUnprotectedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&creep_timeout_sec_, &from.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timeout_sec_) -
    reinterpret_cast<char*>(&creep_timeout_sec_)) + sizeof(stop_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
}

void ScenarioStopSignUnprotectedConfig::SharedCtor() {
  creep_timeout_sec_ = 10;
  start_stop_sign_scenario_distance_ = 5;
  watch_vehicle_max_valid_stop_distance_ = 5;
  max_valid_stop_distance_ = 3.5;
  max_adc_stop_speed_ = 0.3;
  min_pass_s_distance_ = 3;
  stop_duration_sec_ = 1;
  stop_timeout_sec_ = 8;
}

ScenarioStopSignUnprotectedConfig::~ScenarioStopSignUnprotectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
  SharedDtor();
}

void ScenarioStopSignUnprotectedConfig::SharedDtor() {
}

void ScenarioStopSignUnprotectedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioStopSignUnprotectedConfig& ScenarioStopSignUnprotectedConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioStopSignUnprotectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioStopSignUnprotectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    creep_timeout_sec_ = 10;
    start_stop_sign_scenario_distance_ = 5;
    watch_vehicle_max_valid_stop_distance_ = 5;
    max_valid_stop_distance_ = 3.5;
    max_adc_stop_speed_ = 0.3;
    min_pass_s_distance_ = 3;
    stop_duration_sec_ = 1;
    stop_timeout_sec_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioStopSignUnprotectedConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_stop_sign_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_stop_sign_scenario_distance(&has_bits);
          start_stop_sign_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_watch_vehicle_max_valid_stop_distance(&has_bits);
          watch_vehicle_max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_adc_stop_speed = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float stop_duration_sec = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_stop_duration_sec(&has_bits);
          stop_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 6 [default = 3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float stop_timeout_sec = 7 [default = 8];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_stop_timeout_sec(&has_bits);
          stop_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioStopSignUnprotectedConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_stop_sign_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_stop_sign_scenario_distance(), target);
  }

  // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_watch_vehicle_max_valid_stop_distance(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double max_adc_stop_speed = 4 [default = 0.3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_adc_stop_speed(), target);
  }

  // optional float stop_duration_sec = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_stop_duration_sec(), target);
  }

  // optional double min_pass_s_distance = 6 [default = 3];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_min_pass_s_distance(), target);
  }

  // optional float stop_timeout_sec = 7 [default = 8];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_stop_timeout_sec(), target);
  }

  // optional float creep_timeout_sec = 8 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioStopSignUnprotectedConfig)
  return target;
}

size_t ScenarioStopSignUnprotectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float creep_timeout_sec = 8 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional double start_stop_sign_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_stop_speed = 4 [default = 0.3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 6 [default = 3];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float stop_duration_sec = 5 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float stop_timeout_sec = 7 [default = 8];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioStopSignUnprotectedConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioStopSignUnprotectedConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioStopSignUnprotectedConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioStopSignUnprotectedConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioStopSignUnprotectedConfig)
    MergeFrom(*source);
  }
}

void ScenarioStopSignUnprotectedConfig::MergeFrom(const ScenarioStopSignUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_stop_sign_scenario_distance_ = from.start_stop_sign_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      watch_vehicle_max_valid_stop_distance_ = from.watch_vehicle_max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_duration_sec_ = from.stop_duration_sec_;
    }
    if (cached_has_bits & 0x00000080u) {
      stop_timeout_sec_ = from.stop_timeout_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioStopSignUnprotectedConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioStopSignUnprotectedConfig::CopyFrom(const ScenarioStopSignUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioStopSignUnprotectedConfig::IsInitialized() const {
  return true;
}

void ScenarioStopSignUnprotectedConfig::InternalSwap(ScenarioStopSignUnprotectedConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(start_stop_sign_scenario_distance_, other->start_stop_sign_scenario_distance_);
  swap(watch_vehicle_max_valid_stop_distance_, other->watch_vehicle_max_valid_stop_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(stop_duration_sec_, other->stop_duration_sec_);
  swap(stop_timeout_sec_, other->stop_timeout_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioStopSignUnprotectedConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioTrafficLightProtectedConfig::InitAsDefaultInstance() {
}
class ScenarioTrafficLightProtectedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioTrafficLightProtectedConfig>()._has_bits_);
  static void set_has_start_traffic_light_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
}
ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig(const ScenarioTrafficLightProtectedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_traffic_light_scenario_distance_, &from.start_traffic_light_scenario_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_pass_s_distance_) -
    reinterpret_cast<char*>(&start_traffic_light_scenario_distance_)) + sizeof(min_pass_s_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
}

void ScenarioTrafficLightProtectedConfig::SharedCtor() {
  start_traffic_light_scenario_distance_ = 5;
  max_valid_stop_distance_ = 2;
  max_adc_stop_speed_ = 0.3;
  min_pass_s_distance_ = 3;
}

ScenarioTrafficLightProtectedConfig::~ScenarioTrafficLightProtectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
  SharedDtor();
}

void ScenarioTrafficLightProtectedConfig::SharedDtor() {
}

void ScenarioTrafficLightProtectedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioTrafficLightProtectedConfig& ScenarioTrafficLightProtectedConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioTrafficLightProtectedConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioTrafficLightProtectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    start_traffic_light_scenario_distance_ = 5;
    max_valid_stop_distance_ = 2;
    max_adc_stop_speed_ = 0.3;
    min_pass_s_distance_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioTrafficLightProtectedConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_traffic_light_scenario_distance(&has_bits);
          start_traffic_light_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_adc_stop_speed = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 4 [default = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioTrafficLightProtectedConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_traffic_light_scenario_distance(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double max_adc_stop_speed = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_adc_stop_speed(), target);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_pass_s_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightProtectedConfig)
  return target;
}

size_t ScenarioTrafficLightProtectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_stop_speed = 3 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 4 [default = 3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTrafficLightProtectedConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTrafficLightProtectedConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioTrafficLightProtectedConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioTrafficLightProtectedConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioTrafficLightProtectedConfig)
    MergeFrom(*source);
  }
}

void ScenarioTrafficLightProtectedConfig::MergeFrom(const ScenarioTrafficLightProtectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_traffic_light_scenario_distance_ = from.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioTrafficLightProtectedConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTrafficLightProtectedConfig::CopyFrom(const ScenarioTrafficLightProtectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightProtectedConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightProtectedConfig::InternalSwap(ScenarioTrafficLightProtectedConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_traffic_light_scenario_distance_, other->start_traffic_light_scenario_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTrafficLightProtectedConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioTrafficLightUnprotectedLeftTurnConfig::InitAsDefaultInstance() {
}
class ScenarioTrafficLightUnprotectedLeftTurnConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioTrafficLightUnprotectedLeftTurnConfig>()._has_bits_);
  static void set_has_start_traffic_light_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}
ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&creep_timeout_sec_, &from.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_pass_s_distance_) -
    reinterpret_cast<char*>(&creep_timeout_sec_)) + sizeof(min_pass_s_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SharedCtor() {
  creep_timeout_sec_ = 10;
  start_traffic_light_scenario_distance_ = 5;
  max_valid_stop_distance_ = 3.5;
  max_adc_stop_speed_ = 0.3;
  min_pass_s_distance_ = 3;
}

ScenarioTrafficLightUnprotectedLeftTurnConfig::~ScenarioTrafficLightUnprotectedLeftTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  SharedDtor();
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SharedDtor() {
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioTrafficLightUnprotectedLeftTurnConfig& ScenarioTrafficLightUnprotectedLeftTurnConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioTrafficLightUnprotectedLeftTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    creep_timeout_sec_ = 10;
    start_traffic_light_scenario_distance_ = 5;
    max_valid_stop_distance_ = 3.5;
    max_adc_stop_speed_ = 0.3;
    min_pass_s_distance_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioTrafficLightUnprotectedLeftTurnConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_traffic_light_scenario_distance(&has_bits);
          start_traffic_light_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 3.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_adc_stop_speed = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 4 [default = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioTrafficLightUnprotectedLeftTurnConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_traffic_light_scenario_distance(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 3.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double max_adc_stop_speed = 3 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_adc_stop_speed(), target);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_pass_s_distance(), target);
  }

  // optional float creep_timeout_sec = 5 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  return target;
}

size_t ScenarioTrafficLightUnprotectedLeftTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float creep_timeout_sec = 5 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 3.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_stop_speed = 3 [default = 0.3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 4 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTrafficLightUnprotectedLeftTurnConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioTrafficLightUnprotectedLeftTurnConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
    MergeFrom(*source);
  }
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_traffic_light_scenario_distance_ = from.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::CopyFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightUnprotectedLeftTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::InternalSwap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(start_traffic_light_scenario_distance_, other->start_traffic_light_scenario_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTrafficLightUnprotectedLeftTurnConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioTrafficLightUnprotectedRightTurnConfig::InitAsDefaultInstance() {
}
class ScenarioTrafficLightUnprotectedRightTurnConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioTrafficLightUnprotectedRightTurnConfig>()._has_bits_);
  static void set_has_start_traffic_light_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_right_turn_on_red(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_red_light_right_turn_stop_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}
ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig(const ScenarioTrafficLightUnprotectedRightTurnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_right_turn_on_red_, &from.enable_right_turn_on_red_,
    static_cast<size_t>(reinterpret_cast<char*>(&creep_timeout_sec_) -
    reinterpret_cast<char*>(&enable_right_turn_on_red_)) + sizeof(creep_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SharedCtor() {
  enable_right_turn_on_red_ = false;
  start_traffic_light_scenario_distance_ = 5;
  max_valid_stop_distance_ = 3.5;
  max_adc_stop_speed_ = 0.3;
  min_pass_s_distance_ = 3;
  red_light_right_turn_stop_duration_sec_ = 3;
  creep_timeout_sec_ = 10;
}

ScenarioTrafficLightUnprotectedRightTurnConfig::~ScenarioTrafficLightUnprotectedRightTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  SharedDtor();
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SharedDtor() {
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioTrafficLightUnprotectedRightTurnConfig& ScenarioTrafficLightUnprotectedRightTurnConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioTrafficLightUnprotectedRightTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    enable_right_turn_on_red_ = false;
    start_traffic_light_scenario_distance_ = 5;
    max_valid_stop_distance_ = 3.5;
    max_adc_stop_speed_ = 0.3;
    min_pass_s_distance_ = 3;
    red_light_right_turn_stop_duration_sec_ = 3;
    creep_timeout_sec_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioTrafficLightUnprotectedRightTurnConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_traffic_light_scenario_distance(&has_bits);
          start_traffic_light_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_right_turn_on_red = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_right_turn_on_red(&has_bits);
          enable_right_turn_on_red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_adc_stop_speed = 4 [default = 0.3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float red_light_right_turn_stop_duration_sec = 6 [default = 3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_red_light_right_turn_stop_duration_sec(&has_bits);
          red_light_right_turn_stop_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioTrafficLightUnprotectedRightTurnConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_traffic_light_scenario_distance(), target);
  }

  // optional bool enable_right_turn_on_red = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_right_turn_on_red(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double max_adc_stop_speed = 4 [default = 0.3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_adc_stop_speed(), target);
  }

  // optional double min_pass_s_distance = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_pass_s_distance(), target);
  }

  // optional float red_light_right_turn_stop_duration_sec = 6 [default = 3];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_red_light_right_turn_stop_duration_sec(), target);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  return target;
}

size_t ScenarioTrafficLightUnprotectedRightTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool enable_right_turn_on_red = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_stop_speed = 4 [default = 0.3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 5 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float red_light_right_turn_stop_duration_sec = 6 [default = 3];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float creep_timeout_sec = 7 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTrafficLightUnprotectedRightTurnConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioTrafficLightUnprotectedRightTurnConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
    MergeFrom(*source);
  }
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      enable_right_turn_on_red_ = from.enable_right_turn_on_red_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_traffic_light_scenario_distance_ = from.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      red_light_right_turn_stop_duration_sec_ = from.red_light_right_turn_stop_duration_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::CopyFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightUnprotectedRightTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::InternalSwap(ScenarioTrafficLightUnprotectedRightTurnConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_right_turn_on_red_, other->enable_right_turn_on_red_);
  swap(start_traffic_light_scenario_distance_, other->start_traffic_light_scenario_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(red_light_right_turn_stop_duration_sec_, other->red_light_right_turn_stop_duration_sec_);
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTrafficLightUnprotectedRightTurnConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioPullOverConfig::InitAsDefaultInstance() {
}
class ScenarioPullOverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioPullOverConfig>()._has_bits_);
  static void set_has_start_pull_over_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pull_over_min_distance_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_distance_stop_search(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_s_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_l_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_theta_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_distance_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pass_destination_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_s_distance_to_stop_for_open_space_parking(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ScenarioPullOverConfig::ScenarioPullOverConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioPullOverConfig)
}
ScenarioPullOverConfig::ScenarioPullOverConfig(const ScenarioPullOverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_pull_over_scenario_distance_, &from.start_pull_over_scenario_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_distance_to_stop_for_open_space_parking_) -
    reinterpret_cast<char*>(&start_pull_over_scenario_distance_)) + sizeof(s_distance_to_stop_for_open_space_parking_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioPullOverConfig)
}

void ScenarioPullOverConfig::SharedCtor() {
  start_pull_over_scenario_distance_ = 50;
  pull_over_min_distance_buffer_ = 10;
  max_distance_stop_search_ = 25;
  max_adc_stop_speed_ = 0.1;
  max_s_error_to_end_point_ = 0.2;
  max_l_error_to_end_point_ = 0.5;
  max_theta_error_to_end_point_ = 0.2;
  max_distance_error_to_end_point_ = 0.2;
  pass_destination_threshold_ = 10;
  max_valid_stop_distance_ = 1;
  s_distance_to_stop_for_open_space_parking_ = 7;
}

ScenarioPullOverConfig::~ScenarioPullOverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioPullOverConfig)
  SharedDtor();
}

void ScenarioPullOverConfig::SharedDtor() {
}

void ScenarioPullOverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioPullOverConfig& ScenarioPullOverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioPullOverConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioPullOverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioPullOverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    start_pull_over_scenario_distance_ = 50;
    pull_over_min_distance_buffer_ = 10;
    max_distance_stop_search_ = 25;
    max_adc_stop_speed_ = 0.1;
    max_s_error_to_end_point_ = 0.2;
    max_l_error_to_end_point_ = 0.5;
    max_theta_error_to_end_point_ = 0.2;
    max_distance_error_to_end_point_ = 0.2;
  }
  if (cached_has_bits & 0x00000700u) {
    pass_destination_threshold_ = 10;
    max_valid_stop_distance_ = 1;
    s_distance_to_stop_for_open_space_parking_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioPullOverConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_pull_over_scenario_distance = 1 [default = 50];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_pull_over_scenario_distance(&has_bits);
          start_pull_over_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pull_over_min_distance_buffer = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pull_over_min_distance_buffer(&has_bits);
          pull_over_min_distance_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_distance_stop_search = 3 [default = 25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_distance_stop_search(&has_bits);
          max_distance_stop_search_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_adc_stop_speed = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_s_error_to_end_point = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_s_error_to_end_point(&has_bits);
          max_s_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_l_error_to_end_point = 6 [default = 0.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_max_l_error_to_end_point(&has_bits);
          max_l_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_theta_error_to_end_point = 7 [default = 0.2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_max_theta_error_to_end_point(&has_bits);
          max_theta_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_distance_error_to_end_point = 8 [default = 0.2];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_max_distance_error_to_end_point(&has_bits);
          max_distance_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pass_destination_threshold = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_pass_destination_threshold(&has_bits);
          pass_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s_distance_to_stop_for_open_space_parking = 11 [default = 7];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_s_distance_to_stop_for_open_space_parking(&has_bits);
          s_distance_to_stop_for_open_space_parking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioPullOverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioPullOverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_pull_over_scenario_distance = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_pull_over_scenario_distance(), target);
  }

  // optional double pull_over_min_distance_buffer = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pull_over_min_distance_buffer(), target);
  }

  // optional double max_distance_stop_search = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_distance_stop_search(), target);
  }

  // optional double max_adc_stop_speed = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_adc_stop_speed(), target);
  }

  // optional double max_s_error_to_end_point = 5 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_s_error_to_end_point(), target);
  }

  // optional double max_l_error_to_end_point = 6 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_l_error_to_end_point(), target);
  }

  // optional double max_theta_error_to_end_point = 7 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_theta_error_to_end_point(), target);
  }

  // optional double max_distance_error_to_end_point = 8 [default = 0.2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_max_distance_error_to_end_point(), target);
  }

  // optional double pass_destination_threshold = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_pass_destination_threshold(), target);
  }

  // optional double max_valid_stop_distance = 10 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double s_distance_to_stop_for_open_space_parking = 11 [default = 7];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_s_distance_to_stop_for_open_space_parking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioPullOverConfig)
  return target;
}

size_t ScenarioPullOverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioPullOverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double start_pull_over_scenario_distance = 1 [default = 50];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_min_distance_buffer = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_distance_stop_search = 3 [default = 25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_stop_speed = 4 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_s_error_to_end_point = 5 [default = 0.2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double max_l_error_to_end_point = 6 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_theta_error_to_end_point = 7 [default = 0.2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double max_distance_error_to_end_point = 8 [default = 0.2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double pass_destination_threshold = 9 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 10 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double s_distance_to_stop_for_open_space_parking = 11 [default = 7];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioPullOverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioPullOverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioPullOverConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioPullOverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioPullOverConfig)
    MergeFrom(*source);
  }
}

void ScenarioPullOverConfig::MergeFrom(const ScenarioPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      start_pull_over_scenario_distance_ = from.start_pull_over_scenario_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      pull_over_min_distance_buffer_ = from.pull_over_min_distance_buffer_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_distance_stop_search_ = from.max_distance_stop_search_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_s_error_to_end_point_ = from.max_s_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_l_error_to_end_point_ = from.max_l_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_theta_error_to_end_point_ = from.max_theta_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_distance_error_to_end_point_ = from.max_distance_error_to_end_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      pass_destination_threshold_ = from.pass_destination_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000400u) {
      s_distance_to_stop_for_open_space_parking_ = from.s_distance_to_stop_for_open_space_parking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioPullOverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioPullOverConfig::CopyFrom(const ScenarioPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioPullOverConfig::IsInitialized() const {
  return true;
}

void ScenarioPullOverConfig::InternalSwap(ScenarioPullOverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_pull_over_scenario_distance_, other->start_pull_over_scenario_distance_);
  swap(pull_over_min_distance_buffer_, other->pull_over_min_distance_buffer_);
  swap(max_distance_stop_search_, other->max_distance_stop_search_);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(max_s_error_to_end_point_, other->max_s_error_to_end_point_);
  swap(max_l_error_to_end_point_, other->max_l_error_to_end_point_);
  swap(max_theta_error_to_end_point_, other->max_theta_error_to_end_point_);
  swap(max_distance_error_to_end_point_, other->max_distance_error_to_end_point_);
  swap(pass_destination_threshold_, other->pass_destination_threshold_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(s_distance_to_stop_for_open_space_parking_, other->s_distance_to_stop_for_open_space_parking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioPullOverConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioValetParkingConfig::InitAsDefaultInstance() {
}
class ScenarioValetParkingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioValetParkingConfig>()._has_bits_);
  static void set_has_parking_spot_range_to_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ScenarioValetParkingConfig::ScenarioValetParkingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioValetParkingConfig)
}
ScenarioValetParkingConfig::ScenarioValetParkingConfig(const ScenarioValetParkingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_spot_range_to_start_, &from.parking_spot_range_to_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_adc_stop_speed_) -
    reinterpret_cast<char*>(&parking_spot_range_to_start_)) + sizeof(max_adc_stop_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioValetParkingConfig)
}

void ScenarioValetParkingConfig::SharedCtor() {
  parking_spot_range_to_start_ = 20;
  max_valid_stop_distance_ = 1;
  max_adc_stop_speed_ = 0.1;
}

ScenarioValetParkingConfig::~ScenarioValetParkingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioValetParkingConfig)
  SharedDtor();
}

void ScenarioValetParkingConfig::SharedDtor() {
}

void ScenarioValetParkingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioValetParkingConfig& ScenarioValetParkingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioValetParkingConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioValetParkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioValetParkingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    parking_spot_range_to_start_ = 20;
    max_valid_stop_distance_ = 1;
    max_adc_stop_speed_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioValetParkingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double parking_spot_range_to_start = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_parking_spot_range_to_start(&has_bits);
          parking_spot_range_to_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_adc_stop_speed = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioValetParkingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioValetParkingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double parking_spot_range_to_start = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_parking_spot_range_to_start(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double max_adc_stop_speed = 3 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_adc_stop_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioValetParkingConfig)
  return target;
}

size_t ScenarioValetParkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioValetParkingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double parking_spot_range_to_start = 1 [default = 20];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_stop_speed = 3 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioValetParkingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioValetParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioValetParkingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioValetParkingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioValetParkingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioValetParkingConfig)
    MergeFrom(*source);
  }
}

void ScenarioValetParkingConfig::MergeFrom(const ScenarioValetParkingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioValetParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      parking_spot_range_to_start_ = from.parking_spot_range_to_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioValetParkingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioValetParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioValetParkingConfig::CopyFrom(const ScenarioValetParkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioValetParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioValetParkingConfig::IsInitialized() const {
  return true;
}

void ScenarioValetParkingConfig::InternalSwap(ScenarioValetParkingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parking_spot_range_to_start_, other->parking_spot_range_to_start_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioValetParkingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioNarrowStreetUTurnConfig::InitAsDefaultInstance() {
}
class ScenarioNarrowStreetUTurnConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioNarrowStreetUTurnConfig>()._has_bits_);
};

ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}
ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig(const ScenarioNarrowStreetUTurnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}

void ScenarioNarrowStreetUTurnConfig::SharedCtor() {
}

ScenarioNarrowStreetUTurnConfig::~ScenarioNarrowStreetUTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  SharedDtor();
}

void ScenarioNarrowStreetUTurnConfig::SharedDtor() {
}

void ScenarioNarrowStreetUTurnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioNarrowStreetUTurnConfig& ScenarioNarrowStreetUTurnConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioNarrowStreetUTurnConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioNarrowStreetUTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioNarrowStreetUTurnConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioNarrowStreetUTurnConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  return target;
}

size_t ScenarioNarrowStreetUTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioNarrowStreetUTurnConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioNarrowStreetUTurnConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioNarrowStreetUTurnConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioNarrowStreetUTurnConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioNarrowStreetUTurnConfig)
    MergeFrom(*source);
  }
}

void ScenarioNarrowStreetUTurnConfig::MergeFrom(const ScenarioNarrowStreetUTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScenarioNarrowStreetUTurnConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioNarrowStreetUTurnConfig::CopyFrom(const ScenarioNarrowStreetUTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioNarrowStreetUTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioNarrowStreetUTurnConfig::InternalSwap(ScenarioNarrowStreetUTurnConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioNarrowStreetUTurnConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioConfig_StageConfig::InitAsDefaultInstance() {
}
class ScenarioConfig_StageConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioConfig_StageConfig>()._has_bits_);
  static void set_has_stage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioConfig_StageConfig::ScenarioConfig_StageConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioConfig.StageConfig)
}
ScenarioConfig_StageConfig::ScenarioConfig_StageConfig(const ScenarioConfig_StageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      task_type_(from.task_type_),
      task_config_(from.task_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_type_, &from.stage_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&stage_type_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig.StageConfig)
}

void ScenarioConfig_StageConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  stage_type_ = 0;
  enabled_ = true;
}

ScenarioConfig_StageConfig::~ScenarioConfig_StageConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig.StageConfig)
  SharedDtor();
}

void ScenarioConfig_StageConfig::SharedDtor() {
}

void ScenarioConfig_StageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioConfig_StageConfig& ScenarioConfig_StageConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioConfig_StageConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioConfig_StageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig.StageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_type_.Clear();
  task_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    stage_type_ = 0;
    enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioConfig_StageConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_StageType_IsValid(val))) {
            _internal_set_stage_type(static_cast<::apollo::planning::ScenarioConfig_StageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskConfig_TaskType_IsValid(val))) {
              _internal_add_task_type(static_cast<::apollo::planning::TaskConfig_TaskType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_task_type(), ptr, ctx, ::apollo::planning::TaskConfig_TaskType_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskConfig task_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioConfig_StageConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig.StageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage_type(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  for (int i = 0, n = this->_internal_task_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_task_type(i), target);
  }

  // repeated .apollo.planning.TaskConfig task_config = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_task_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig.StageConfig)
  return target;
}

size_t ScenarioConfig_StageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig.StageConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_task_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_task_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .apollo.planning.TaskConfig task_config = 4;
  total_size += 1UL * this->_internal_task_config_size();
  for (const auto& msg : this->task_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage_type());
    }

    // optional bool enabled = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioConfig_StageConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioConfig.StageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioConfig_StageConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioConfig_StageConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioConfig.StageConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioConfig.StageConfig)
    MergeFrom(*source);
  }
}

void ScenarioConfig_StageConfig::MergeFrom(const ScenarioConfig_StageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig.StageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_type_.MergeFrom(from.task_type_);
  task_config_.MergeFrom(from.task_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stage_type_ = from.stage_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioConfig_StageConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioConfig.StageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioConfig_StageConfig::CopyFrom(const ScenarioConfig_StageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig.StageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig_StageConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig_StageConfig::InternalSwap(ScenarioConfig_StageConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_type_.InternalSwap(&other->task_type_);
  task_config_.InternalSwap(&other->task_config_);
  swap(stage_type_, other->stage_type_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioConfig_StageConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioConfig::InitAsDefaultInstance() {
  ::apollo::planning::_ScenarioConfig_default_instance_.lane_follow_config_ = const_cast< ::apollo::planning::ScenarioLaneFollowConfig*>(
      ::apollo::planning::ScenarioLaneFollowConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.bare_intersection_unprotected_config_ = const_cast< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig*>(
      ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.stop_sign_unprotected_config_ = const_cast< ::apollo::planning::ScenarioStopSignUnprotectedConfig*>(
      ::apollo::planning::ScenarioStopSignUnprotectedConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.traffic_light_protected_config_ = const_cast< ::apollo::planning::ScenarioTrafficLightProtectedConfig*>(
      ::apollo::planning::ScenarioTrafficLightProtectedConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.traffic_light_unprotected_right_turn_config_ = const_cast< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig*>(
      ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.traffic_light_unprotected_left_turn_config_ = const_cast< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig*>(
      ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.pull_over_config_ = const_cast< ::apollo::planning::ScenarioPullOverConfig*>(
      ::apollo::planning::ScenarioPullOverConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.valet_parking_config_ = const_cast< ::apollo::planning::ScenarioValetParkingConfig*>(
      ::apollo::planning::ScenarioValetParkingConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.narrow_street_u_turn_config_ = const_cast< ::apollo::planning::ScenarioNarrowStreetUTurnConfig*>(
      ::apollo::planning::ScenarioNarrowStreetUTurnConfig::internal_default_instance());
}
class ScenarioConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioConfig>()._has_bits_);
  static void set_has_scenario_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ScenarioLaneFollowConfig& lane_follow_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig& bare_intersection_unprotected_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioStopSignUnprotectedConfig& stop_sign_unprotected_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioTrafficLightProtectedConfig& traffic_light_protected_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig& traffic_light_unprotected_right_turn_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig& traffic_light_unprotected_left_turn_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioPullOverConfig& pull_over_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioValetParkingConfig& valet_parking_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioNarrowStreetUTurnConfig& narrow_street_u_turn_config(const ScenarioConfig* msg);
};

const ::apollo::planning::ScenarioLaneFollowConfig&
ScenarioConfig::_Internal::lane_follow_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.lane_follow_config_;
}
const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig&
ScenarioConfig::_Internal::bare_intersection_unprotected_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.bare_intersection_unprotected_config_;
}
const ::apollo::planning::ScenarioStopSignUnprotectedConfig&
ScenarioConfig::_Internal::stop_sign_unprotected_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.stop_sign_unprotected_config_;
}
const ::apollo::planning::ScenarioTrafficLightProtectedConfig&
ScenarioConfig::_Internal::traffic_light_protected_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.traffic_light_protected_config_;
}
const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig&
ScenarioConfig::_Internal::traffic_light_unprotected_right_turn_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.traffic_light_unprotected_right_turn_config_;
}
const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig&
ScenarioConfig::_Internal::traffic_light_unprotected_left_turn_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.traffic_light_unprotected_left_turn_config_;
}
const ::apollo::planning::ScenarioPullOverConfig&
ScenarioConfig::_Internal::pull_over_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.pull_over_config_;
}
const ::apollo::planning::ScenarioValetParkingConfig&
ScenarioConfig::_Internal::valet_parking_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.valet_parking_config_;
}
const ::apollo::planning::ScenarioNarrowStreetUTurnConfig&
ScenarioConfig::_Internal::narrow_street_u_turn_config(const ScenarioConfig* msg) {
  return *msg->scenario_config_.narrow_street_u_turn_config_;
}
void ScenarioConfig::set_allocated_lane_follow_config(::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (lane_follow_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_follow_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_follow_config, submessage_arena);
    }
    set_has_lane_follow_config();
    scenario_config_.lane_follow_config_ = lane_follow_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.lane_follow_config)
}
void ScenarioConfig::set_allocated_bare_intersection_unprotected_config(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (bare_intersection_unprotected_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bare_intersection_unprotected_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bare_intersection_unprotected_config, submessage_arena);
    }
    set_has_bare_intersection_unprotected_config();
    scenario_config_.bare_intersection_unprotected_config_ = bare_intersection_unprotected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
}
void ScenarioConfig::set_allocated_stop_sign_unprotected_config(::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (stop_sign_unprotected_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_sign_unprotected_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_sign_unprotected_config, submessage_arena);
    }
    set_has_stop_sign_unprotected_config();
    scenario_config_.stop_sign_unprotected_config_ = stop_sign_unprotected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
}
void ScenarioConfig::set_allocated_traffic_light_protected_config(::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (traffic_light_protected_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_light_protected_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_protected_config, submessage_arena);
    }
    set_has_traffic_light_protected_config();
    scenario_config_.traffic_light_protected_config_ = traffic_light_protected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_protected_config)
}
void ScenarioConfig::set_allocated_traffic_light_unprotected_right_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (traffic_light_unprotected_right_turn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_light_unprotected_right_turn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_unprotected_right_turn_config, submessage_arena);
    }
    set_has_traffic_light_unprotected_right_turn_config();
    scenario_config_.traffic_light_unprotected_right_turn_config_ = traffic_light_unprotected_right_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
}
void ScenarioConfig::set_allocated_traffic_light_unprotected_left_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (traffic_light_unprotected_left_turn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_light_unprotected_left_turn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_unprotected_left_turn_config, submessage_arena);
    }
    set_has_traffic_light_unprotected_left_turn_config();
    scenario_config_.traffic_light_unprotected_left_turn_config_ = traffic_light_unprotected_left_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
}
void ScenarioConfig::set_allocated_pull_over_config(::apollo::planning::ScenarioPullOverConfig* pull_over_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (pull_over_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pull_over_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pull_over_config, submessage_arena);
    }
    set_has_pull_over_config();
    scenario_config_.pull_over_config_ = pull_over_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.pull_over_config)
}
void ScenarioConfig::set_allocated_valet_parking_config(::apollo::planning::ScenarioValetParkingConfig* valet_parking_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (valet_parking_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valet_parking_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valet_parking_config, submessage_arena);
    }
    set_has_valet_parking_config();
    scenario_config_.valet_parking_config_ = valet_parking_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.valet_parking_config)
}
void ScenarioConfig::set_allocated_narrow_street_u_turn_config(::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (narrow_street_u_turn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      narrow_street_u_turn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, narrow_street_u_turn_config, submessage_arena);
    }
    set_has_narrow_street_u_turn_config();
    scenario_config_.narrow_street_u_turn_config_ = narrow_street_u_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
}
ScenarioConfig::ScenarioConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioConfig)
}
ScenarioConfig::ScenarioConfig(const ScenarioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stage_type_(from.stage_type_),
      stage_config_(from.stage_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_type_ = from.scenario_type_;
  clear_has_scenario_config();
  switch (from.scenario_config_case()) {
    case kLaneFollowConfig: {
      _internal_mutable_lane_follow_config()->::apollo::planning::ScenarioLaneFollowConfig::MergeFrom(from._internal_lane_follow_config());
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      _internal_mutable_bare_intersection_unprotected_config()->::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::MergeFrom(from._internal_bare_intersection_unprotected_config());
      break;
    }
    case kStopSignUnprotectedConfig: {
      _internal_mutable_stop_sign_unprotected_config()->::apollo::planning::ScenarioStopSignUnprotectedConfig::MergeFrom(from._internal_stop_sign_unprotected_config());
      break;
    }
    case kTrafficLightProtectedConfig: {
      _internal_mutable_traffic_light_protected_config()->::apollo::planning::ScenarioTrafficLightProtectedConfig::MergeFrom(from._internal_traffic_light_protected_config());
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      _internal_mutable_traffic_light_unprotected_right_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_right_turn_config());
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      _internal_mutable_traffic_light_unprotected_left_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_left_turn_config());
      break;
    }
    case kPullOverConfig: {
      _internal_mutable_pull_over_config()->::apollo::planning::ScenarioPullOverConfig::MergeFrom(from._internal_pull_over_config());
      break;
    }
    case kValetParkingConfig: {
      _internal_mutable_valet_parking_config()->::apollo::planning::ScenarioValetParkingConfig::MergeFrom(from._internal_valet_parking_config());
      break;
    }
    case kNarrowStreetUTurnConfig: {
      _internal_mutable_narrow_street_u_turn_config()->::apollo::planning::ScenarioNarrowStreetUTurnConfig::MergeFrom(from._internal_narrow_street_u_turn_config());
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig)
}

void ScenarioConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  scenario_type_ = 0;
  clear_has_scenario_config();
}

ScenarioConfig::~ScenarioConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig)
  SharedDtor();
}

void ScenarioConfig::SharedDtor() {
  if (has_scenario_config()) {
    clear_scenario_config();
  }
}

void ScenarioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioConfig& ScenarioConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScenarioConfig::clear_scenario_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ScenarioConfig)
  switch (scenario_config_case()) {
    case kLaneFollowConfig: {
      delete scenario_config_.lane_follow_config_;
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      delete scenario_config_.bare_intersection_unprotected_config_;
      break;
    }
    case kStopSignUnprotectedConfig: {
      delete scenario_config_.stop_sign_unprotected_config_;
      break;
    }
    case kTrafficLightProtectedConfig: {
      delete scenario_config_.traffic_light_protected_config_;
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      delete scenario_config_.traffic_light_unprotected_right_turn_config_;
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      delete scenario_config_.traffic_light_unprotected_left_turn_config_;
      break;
    }
    case kPullOverConfig: {
      delete scenario_config_.pull_over_config_;
      break;
    }
    case kValetParkingConfig: {
      delete scenario_config_.valet_parking_config_;
      break;
    }
    case kNarrowStreetUTurnConfig: {
      delete scenario_config_.narrow_street_u_turn_config_;
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCENARIO_CONFIG_NOT_SET;
}


void ScenarioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_type_.Clear();
  stage_config_.Clear();
  scenario_type_ = 0;
  clear_scenario_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(val))) {
            _internal_set_scenario_type(static_cast<::apollo::planning::ScenarioConfig_ScenarioType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_follow_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bare_intersection_unprotected_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign_unprotected_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_protected_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_unprotected_right_turn_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_unprotected_left_turn_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pull_over_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_valet_parking_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_narrow_street_u_turn_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_StageType_IsValid(val))) {
              _internal_add_stage_type(static_cast<::apollo::planning::ScenarioConfig_StageType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_stage_type(), ptr, ctx, ::apollo::planning::ScenarioConfig_StageType_IsValid, &_internal_metadata_, 12);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stage_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scenario_type(), target);
  }

  switch (scenario_config_case()) {
    case kLaneFollowConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::lane_follow_config(this), target, stream);
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::bare_intersection_unprotected_config(this), target, stream);
      break;
    }
    case kStopSignUnprotectedConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::stop_sign_unprotected_config(this), target, stream);
      break;
    }
    case kTrafficLightProtectedConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::traffic_light_protected_config(this), target, stream);
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::traffic_light_unprotected_right_turn_config(this), target, stream);
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::traffic_light_unprotected_left_turn_config(this), target, stream);
      break;
    }
    case kPullOverConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::pull_over_config(this), target, stream);
      break;
    }
    case kValetParkingConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::valet_parking_config(this), target, stream);
      break;
    }
    case kNarrowStreetUTurnConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::narrow_street_u_turn_config(this), target, stream);
      break;
    }
    default: ;
  }
  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 12;
  for (int i = 0, n = this->_internal_stage_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        12, this->_internal_stage_type(i), target);
  }

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stage_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_stage_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig)
  return target;
}

size_t ScenarioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 12;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_stage_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_stage_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 13;
  total_size += 1UL * this->_internal_stage_config_size();
  for (const auto& msg : this->stage_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scenario_type());
  }

  switch (scenario_config_case()) {
    // optional .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
    case kLaneFollowConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.lane_follow_config_);
      break;
    }
    // optional .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 4;
    case kBareIntersectionUnprotectedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.bare_intersection_unprotected_config_);
      break;
    }
    // optional .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 5;
    case kStopSignUnprotectedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.stop_sign_unprotected_config_);
      break;
    }
    // optional .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 6;
    case kTrafficLightProtectedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.traffic_light_protected_config_);
      break;
    }
    // optional .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 7;
    case kTrafficLightUnprotectedRightTurnConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.traffic_light_unprotected_right_turn_config_);
      break;
    }
    // optional .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 8;
    case kTrafficLightUnprotectedLeftTurnConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.traffic_light_unprotected_left_turn_config_);
      break;
    }
    // optional .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
    case kPullOverConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.pull_over_config_);
      break;
    }
    // optional .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 10;
    case kValetParkingConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.valet_parking_config_);
      break;
    }
    // optional .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 11;
    case kNarrowStreetUTurnConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_config_.narrow_street_u_turn_config_);
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioConfig)
    MergeFrom(*source);
  }
}

void ScenarioConfig::MergeFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_type_.MergeFrom(from.stage_type_);
  stage_config_.MergeFrom(from.stage_config_);
  if (from._internal_has_scenario_type()) {
    _internal_set_scenario_type(from._internal_scenario_type());
  }
  switch (from.scenario_config_case()) {
    case kLaneFollowConfig: {
      _internal_mutable_lane_follow_config()->::apollo::planning::ScenarioLaneFollowConfig::MergeFrom(from._internal_lane_follow_config());
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      _internal_mutable_bare_intersection_unprotected_config()->::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::MergeFrom(from._internal_bare_intersection_unprotected_config());
      break;
    }
    case kStopSignUnprotectedConfig: {
      _internal_mutable_stop_sign_unprotected_config()->::apollo::planning::ScenarioStopSignUnprotectedConfig::MergeFrom(from._internal_stop_sign_unprotected_config());
      break;
    }
    case kTrafficLightProtectedConfig: {
      _internal_mutable_traffic_light_protected_config()->::apollo::planning::ScenarioTrafficLightProtectedConfig::MergeFrom(from._internal_traffic_light_protected_config());
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      _internal_mutable_traffic_light_unprotected_right_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_right_turn_config());
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      _internal_mutable_traffic_light_unprotected_left_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_left_turn_config());
      break;
    }
    case kPullOverConfig: {
      _internal_mutable_pull_over_config()->::apollo::planning::ScenarioPullOverConfig::MergeFrom(from._internal_pull_over_config());
      break;
    }
    case kValetParkingConfig: {
      _internal_mutable_valet_parking_config()->::apollo::planning::ScenarioValetParkingConfig::MergeFrom(from._internal_valet_parking_config());
      break;
    }
    case kNarrowStreetUTurnConfig: {
      _internal_mutable_narrow_street_u_turn_config()->::apollo::planning::ScenarioNarrowStreetUTurnConfig::MergeFrom(from._internal_narrow_street_u_turn_config());
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
}

void ScenarioConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioConfig::CopyFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig::InternalSwap(ScenarioConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_type_.InternalSwap(&other->stage_type_);
  stage_config_.InternalSwap(&other->stage_config_);
  swap(scenario_type_, other->scenario_type_);
  swap(scenario_config_, other->scenario_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlannerPublicRoadConfig::InitAsDefaultInstance() {
}
class PlannerPublicRoadConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannerPublicRoadConfig>()._has_bits_);
};

PlannerPublicRoadConfig::PlannerPublicRoadConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerPublicRoadConfig)
}
PlannerPublicRoadConfig::PlannerPublicRoadConfig(const PlannerPublicRoadConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scenario_type_(from.scenario_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerPublicRoadConfig)
}

void PlannerPublicRoadConfig::SharedCtor() {
}

PlannerPublicRoadConfig::~PlannerPublicRoadConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerPublicRoadConfig)
  SharedDtor();
}

void PlannerPublicRoadConfig::SharedDtor() {
}

void PlannerPublicRoadConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannerPublicRoadConfig& PlannerPublicRoadConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlannerPublicRoadConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlannerPublicRoadConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerPublicRoadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenario_type_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlannerPublicRoadConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(val))) {
              _internal_add_scenario_type(static_cast<::apollo::planning::ScenarioConfig_ScenarioType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_scenario_type(), ptr, ctx, ::apollo::planning::ScenarioConfig_ScenarioType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannerPublicRoadConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerPublicRoadConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  for (int i = 0, n = this->_internal_scenario_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_scenario_type(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerPublicRoadConfig)
  return target;
}

size_t PlannerPublicRoadConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerPublicRoadConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_scenario_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_scenario_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerPublicRoadConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerPublicRoadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerPublicRoadConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannerPublicRoadConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerPublicRoadConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerPublicRoadConfig)
    MergeFrom(*source);
  }
}

void PlannerPublicRoadConfig::MergeFrom(const PlannerPublicRoadConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerPublicRoadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenario_type_.MergeFrom(from.scenario_type_);
}

void PlannerPublicRoadConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerPublicRoadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerPublicRoadConfig::CopyFrom(const PlannerPublicRoadConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerPublicRoadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerPublicRoadConfig::IsInitialized() const {
  return true;
}

void PlannerPublicRoadConfig::InternalSwap(PlannerPublicRoadConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scenario_type_.InternalSwap(&other->scenario_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannerPublicRoadConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlannerNaviConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PlannerNaviConfig_default_instance_._instance.get_mutable()->navi_path_decider_config_ = const_cast< ::apollo::planning::NaviPathDeciderConfig*>(
      ::apollo::planning::NaviPathDeciderConfig::internal_default_instance());
  ::apollo::planning::_PlannerNaviConfig_default_instance_._instance.get_mutable()->navi_speed_decider_config_ = const_cast< ::apollo::planning::NaviSpeedDeciderConfig*>(
      ::apollo::planning::NaviSpeedDeciderConfig::internal_default_instance());
  ::apollo::planning::_PlannerNaviConfig_default_instance_._instance.get_mutable()->navi_obstacle_decider_config_ = const_cast< ::apollo::planning::NaviObstacleDeciderConfig*>(
      ::apollo::planning::NaviObstacleDeciderConfig::internal_default_instance());
}
class PlannerNaviConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannerNaviConfig>()._has_bits_);
  static const ::apollo::planning::NaviPathDeciderConfig& navi_path_decider_config(const PlannerNaviConfig* msg);
  static void set_has_navi_path_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::NaviSpeedDeciderConfig& navi_speed_decider_config(const PlannerNaviConfig* msg);
  static void set_has_navi_speed_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::NaviObstacleDeciderConfig& navi_obstacle_decider_config(const PlannerNaviConfig* msg);
  static void set_has_navi_obstacle_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::NaviPathDeciderConfig&
PlannerNaviConfig::_Internal::navi_path_decider_config(const PlannerNaviConfig* msg) {
  return *msg->navi_path_decider_config_;
}
const ::apollo::planning::NaviSpeedDeciderConfig&
PlannerNaviConfig::_Internal::navi_speed_decider_config(const PlannerNaviConfig* msg) {
  return *msg->navi_speed_decider_config_;
}
const ::apollo::planning::NaviObstacleDeciderConfig&
PlannerNaviConfig::_Internal::navi_obstacle_decider_config(const PlannerNaviConfig* msg) {
  return *msg->navi_obstacle_decider_config_;
}
void PlannerNaviConfig::clear_navi_path_decider_config() {
  if (navi_path_decider_config_ != nullptr) navi_path_decider_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PlannerNaviConfig::clear_navi_speed_decider_config() {
  if (navi_speed_decider_config_ != nullptr) navi_speed_decider_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PlannerNaviConfig::clear_navi_obstacle_decider_config() {
  if (navi_obstacle_decider_config_ != nullptr) navi_obstacle_decider_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PlannerNaviConfig::PlannerNaviConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerNaviConfig)
}
PlannerNaviConfig::PlannerNaviConfig(const PlannerNaviConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      task_(from.task_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_navi_path_decider_config()) {
    navi_path_decider_config_ = new ::apollo::planning::NaviPathDeciderConfig(*from.navi_path_decider_config_);
  } else {
    navi_path_decider_config_ = nullptr;
  }
  if (from._internal_has_navi_speed_decider_config()) {
    navi_speed_decider_config_ = new ::apollo::planning::NaviSpeedDeciderConfig(*from.navi_speed_decider_config_);
  } else {
    navi_speed_decider_config_ = nullptr;
  }
  if (from._internal_has_navi_obstacle_decider_config()) {
    navi_obstacle_decider_config_ = new ::apollo::planning::NaviObstacleDeciderConfig(*from.navi_obstacle_decider_config_);
  } else {
    navi_obstacle_decider_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerNaviConfig)
}

void PlannerNaviConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  ::memset(&navi_path_decider_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navi_obstacle_decider_config_) -
      reinterpret_cast<char*>(&navi_path_decider_config_)) + sizeof(navi_obstacle_decider_config_));
}

PlannerNaviConfig::~PlannerNaviConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerNaviConfig)
  SharedDtor();
}

void PlannerNaviConfig::SharedDtor() {
  if (this != internal_default_instance()) delete navi_path_decider_config_;
  if (this != internal_default_instance()) delete navi_speed_decider_config_;
  if (this != internal_default_instance()) delete navi_obstacle_decider_config_;
}

void PlannerNaviConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannerNaviConfig& PlannerNaviConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlannerNaviConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlannerNaviConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerNaviConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(navi_path_decider_config_ != nullptr);
      navi_path_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(navi_speed_decider_config_ != nullptr);
      navi_speed_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(navi_obstacle_decider_config_ != nullptr);
      navi_obstacle_decider_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlannerNaviConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.TaskConfig.TaskType task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskConfig_TaskType_IsValid(val))) {
              _internal_add_task(static_cast<::apollo::planning::TaskConfig_TaskType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_task(), ptr, ctx, ::apollo::planning::TaskConfig_TaskType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_path_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_speed_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_obstacle_decider_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannerNaviConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerNaviConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  for (int i = 0, n = this->_internal_task_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_task(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::navi_path_decider_config(this), target, stream);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::navi_speed_decider_config(this), target, stream);
  }

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::navi_obstacle_decider_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerNaviConfig)
  return target;
}

size_t PlannerNaviConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerNaviConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_task_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_task(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navi_path_decider_config_);
    }

    // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navi_speed_decider_config_);
    }

    // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navi_obstacle_decider_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerNaviConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerNaviConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerNaviConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannerNaviConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerNaviConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerNaviConfig)
    MergeFrom(*source);
  }
}

void PlannerNaviConfig::MergeFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerNaviConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_navi_path_decider_config()->::apollo::planning::NaviPathDeciderConfig::MergeFrom(from._internal_navi_path_decider_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_navi_speed_decider_config()->::apollo::planning::NaviSpeedDeciderConfig::MergeFrom(from._internal_navi_speed_decider_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_navi_obstacle_decider_config()->::apollo::planning::NaviObstacleDeciderConfig::MergeFrom(from._internal_navi_obstacle_decider_config());
    }
  }
}

void PlannerNaviConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerNaviConfig::CopyFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerNaviConfig::IsInitialized() const {
  return true;
}

void PlannerNaviConfig::InternalSwap(PlannerNaviConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_.InternalSwap(&other->task_);
  swap(navi_path_decider_config_, other->navi_path_decider_config_);
  swap(navi_speed_decider_config_, other->navi_speed_decider_config_);
  swap(navi_obstacle_decider_config_, other->navi_obstacle_decider_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannerNaviConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtkPlanningConfig::InitAsDefaultInstance() {
}
class RtkPlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RtkPlanningConfig>()._has_bits_);
  static void set_has_planner_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RtkPlanningConfig::RtkPlanningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RtkPlanningConfig)
}
RtkPlanningConfig::RtkPlanningConfig(const RtkPlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planner_type_ = from.planner_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RtkPlanningConfig)
}

void RtkPlanningConfig::SharedCtor() {
  planner_type_ = 0;
}

RtkPlanningConfig::~RtkPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RtkPlanningConfig)
  SharedDtor();
}

void RtkPlanningConfig::SharedDtor() {
}

void RtkPlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtkPlanningConfig& RtkPlanningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtkPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RtkPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RtkPlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planner_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RtkPlanningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.PlannerType planner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlannerType_IsValid(val))) {
            _internal_set_planner_type(static_cast<::apollo::planning::PlannerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtkPlanningConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RtkPlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_planner_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RtkPlanningConfig)
  return target;
}

size_t RtkPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RtkPlanningConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.PlannerType planner_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_planner_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtkPlanningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RtkPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RtkPlanningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtkPlanningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RtkPlanningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RtkPlanningConfig)
    MergeFrom(*source);
  }
}

void RtkPlanningConfig::MergeFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RtkPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_planner_type()) {
    _internal_set_planner_type(from._internal_planner_type());
  }
}

void RtkPlanningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtkPlanningConfig::CopyFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtkPlanningConfig::IsInitialized() const {
  return true;
}

void RtkPlanningConfig::InternalSwap(RtkPlanningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(planner_type_, other->planner_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtkPlanningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StandardPlanningConfig::InitAsDefaultInstance() {
  ::apollo::planning::_StandardPlanningConfig_default_instance_._instance.get_mutable()->planner_public_road_config_ = const_cast< ::apollo::planning::PlannerPublicRoadConfig*>(
      ::apollo::planning::PlannerPublicRoadConfig::internal_default_instance());
}
class StandardPlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StandardPlanningConfig>()._has_bits_);
  static const ::apollo::planning::PlannerPublicRoadConfig& planner_public_road_config(const StandardPlanningConfig* msg);
  static void set_has_planner_public_road_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::PlannerPublicRoadConfig&
StandardPlanningConfig::_Internal::planner_public_road_config(const StandardPlanningConfig* msg) {
  return *msg->planner_public_road_config_;
}
StandardPlanningConfig::StandardPlanningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StandardPlanningConfig)
}
StandardPlanningConfig::StandardPlanningConfig(const StandardPlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      planner_type_(from.planner_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_planner_public_road_config()) {
    planner_public_road_config_ = new ::apollo::planning::PlannerPublicRoadConfig(*from.planner_public_road_config_);
  } else {
    planner_public_road_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StandardPlanningConfig)
}

void StandardPlanningConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  planner_public_road_config_ = nullptr;
}

StandardPlanningConfig::~StandardPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StandardPlanningConfig)
  SharedDtor();
}

void StandardPlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete planner_public_road_config_;
}

void StandardPlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StandardPlanningConfig& StandardPlanningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StandardPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StandardPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StandardPlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planner_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(planner_public_road_config_ != nullptr);
    planner_public_road_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StandardPlanningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlannerType_IsValid(val))) {
              _internal_add_planner_type(static_cast<::apollo::planning::PlannerType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_planner_type(), ptr, ctx, ::apollo::planning::PlannerType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_public_road_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StandardPlanningConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StandardPlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0, n = this->_internal_planner_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_planner_type(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::planner_public_road_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StandardPlanningConfig)
  return target;
}

size_t StandardPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StandardPlanningConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_planner_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_planner_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planner_public_road_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StandardPlanningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StandardPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StandardPlanningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StandardPlanningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StandardPlanningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StandardPlanningConfig)
    MergeFrom(*source);
  }
}

void StandardPlanningConfig::MergeFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StandardPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planner_type_.MergeFrom(from.planner_type_);
  if (from._internal_has_planner_public_road_config()) {
    _internal_mutable_planner_public_road_config()->::apollo::planning::PlannerPublicRoadConfig::MergeFrom(from._internal_planner_public_road_config());
  }
}

void StandardPlanningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardPlanningConfig::CopyFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardPlanningConfig::IsInitialized() const {
  return true;
}

void StandardPlanningConfig::InternalSwap(StandardPlanningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  planner_type_.InternalSwap(&other->planner_type_);
  swap(planner_public_road_config_, other->planner_public_road_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StandardPlanningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationPlanningConfig::InitAsDefaultInstance() {
  ::apollo::planning::_NavigationPlanningConfig_default_instance_._instance.get_mutable()->planner_navi_config_ = const_cast< ::apollo::planning::PlannerNaviConfig*>(
      ::apollo::planning::PlannerNaviConfig::internal_default_instance());
}
class NavigationPlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationPlanningConfig>()._has_bits_);
  static const ::apollo::planning::PlannerNaviConfig& planner_navi_config(const NavigationPlanningConfig* msg);
  static void set_has_planner_navi_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::PlannerNaviConfig&
NavigationPlanningConfig::_Internal::planner_navi_config(const NavigationPlanningConfig* msg) {
  return *msg->planner_navi_config_;
}
NavigationPlanningConfig::NavigationPlanningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NavigationPlanningConfig)
}
NavigationPlanningConfig::NavigationPlanningConfig(const NavigationPlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      planner_type_(from.planner_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_planner_navi_config()) {
    planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig(*from.planner_navi_config_);
  } else {
    planner_navi_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NavigationPlanningConfig)
}

void NavigationPlanningConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  planner_navi_config_ = nullptr;
}

NavigationPlanningConfig::~NavigationPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NavigationPlanningConfig)
  SharedDtor();
}

void NavigationPlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete planner_navi_config_;
}

void NavigationPlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationPlanningConfig& NavigationPlanningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationPlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void NavigationPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NavigationPlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planner_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(planner_navi_config_ != nullptr);
    planner_navi_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NavigationPlanningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlannerType_IsValid(val))) {
              _internal_add_planner_type(static_cast<::apollo::planning::PlannerType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_planner_type(), ptr, ctx, ::apollo::planning::PlannerType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_navi_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationPlanningConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NavigationPlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0, n = this->_internal_planner_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_planner_type(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::planner_navi_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NavigationPlanningConfig)
  return target;
}

size_t NavigationPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NavigationPlanningConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_planner_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_planner_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planner_navi_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationPlanningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NavigationPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationPlanningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationPlanningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NavigationPlanningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NavigationPlanningConfig)
    MergeFrom(*source);
  }
}

void NavigationPlanningConfig::MergeFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NavigationPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planner_type_.MergeFrom(from.planner_type_);
  if (from._internal_has_planner_navi_config()) {
    _internal_mutable_planner_navi_config()->::apollo::planning::PlannerNaviConfig::MergeFrom(from._internal_planner_navi_config());
  }
}

void NavigationPlanningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPlanningConfig::CopyFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPlanningConfig::IsInitialized() const {
  return true;
}

void NavigationPlanningConfig::InternalSwap(NavigationPlanningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  planner_type_.InternalSwap(&other->planner_type_);
  swap(planner_navi_config_, other->planner_navi_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationPlanningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningConfig_default_instance_.rtk_planning_config_ = const_cast< ::apollo::planning::RtkPlanningConfig*>(
      ::apollo::planning::RtkPlanningConfig::internal_default_instance());
  ::apollo::planning::_PlanningConfig_default_instance_.standard_planning_config_ = const_cast< ::apollo::planning::StandardPlanningConfig*>(
      ::apollo::planning::StandardPlanningConfig::internal_default_instance());
  ::apollo::planning::_PlanningConfig_default_instance_.navigation_planning_config_ = const_cast< ::apollo::planning::NavigationPlanningConfig*>(
      ::apollo::planning::NavigationPlanningConfig::internal_default_instance());
}
class PlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningConfig>()._has_bits_);
  static const ::apollo::planning::RtkPlanningConfig& rtk_planning_config(const PlanningConfig* msg);
  static const ::apollo::planning::StandardPlanningConfig& standard_planning_config(const PlanningConfig* msg);
  static const ::apollo::planning::NavigationPlanningConfig& navigation_planning_config(const PlanningConfig* msg);
};

const ::apollo::planning::RtkPlanningConfig&
PlanningConfig::_Internal::rtk_planning_config(const PlanningConfig* msg) {
  return *msg->planning_config_.rtk_planning_config_;
}
const ::apollo::planning::StandardPlanningConfig&
PlanningConfig::_Internal::standard_planning_config(const PlanningConfig* msg) {
  return *msg->planning_config_.standard_planning_config_;
}
const ::apollo::planning::NavigationPlanningConfig&
PlanningConfig::_Internal::navigation_planning_config(const PlanningConfig* msg) {
  return *msg->planning_config_.navigation_planning_config_;
}
void PlanningConfig::set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_planning_config();
  if (rtk_planning_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rtk_planning_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtk_planning_config, submessage_arena);
    }
    set_has_rtk_planning_config();
    planning_config_.rtk_planning_config_ = rtk_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.rtk_planning_config)
}
void PlanningConfig::set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_planning_config();
  if (standard_planning_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      standard_planning_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standard_planning_config, submessage_arena);
    }
    set_has_standard_planning_config();
    planning_config_.standard_planning_config_ = standard_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.standard_planning_config)
}
void PlanningConfig::set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_planning_config();
  if (navigation_planning_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      navigation_planning_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_planning_config, submessage_arena);
    }
    set_has_navigation_planning_config();
    planning_config_.navigation_planning_config_ = navigation_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.navigation_planning_config)
}
PlanningConfig::PlanningConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      default_task_config_(from.default_task_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_planning_config();
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      _internal_mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from._internal_rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      _internal_mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from._internal_standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      _internal_mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from._internal_navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  clear_has_planning_config();
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
  if (has_planning_config()) {
    clear_planning_config();
  }
}

void PlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningConfig& PlanningConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningConfig_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlanningConfig::clear_planning_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.PlanningConfig)
  switch (planning_config_case()) {
    case kRtkPlanningConfig: {
      delete planning_config_.rtk_planning_config_;
      break;
    }
    case kStandardPlanningConfig: {
      delete planning_config_.standard_planning_config_;
      break;
    }
    case kNavigationPlanningConfig: {
      delete planning_config_.navigation_planning_config_;
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}


void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  default_task_config_.Clear();
  clear_planning_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlanningConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtk_planning_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_standard_planning_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_planning_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskConfig default_task_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_task_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (planning_config_case()) {
    case kRtkPlanningConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::rtk_planning_config(this), target, stream);
      break;
    }
    case kStandardPlanningConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::standard_planning_config(this), target, stream);
      break;
    }
    case kNavigationPlanningConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::navigation_planning_config(this), target, stream);
      break;
    }
    default: ;
  }
  // repeated .apollo.planning.TaskConfig default_task_config = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_default_task_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_default_task_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig default_task_config = 5;
  total_size += 1UL * this->_internal_default_task_config_size();
  for (const auto& msg : this->default_task_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (planning_config_case()) {
    // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 1;
    case kRtkPlanningConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planning_config_.rtk_planning_config_);
      break;
    }
    // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 2;
    case kStandardPlanningConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planning_config_.standard_planning_config_);
      break;
    }
    // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 3;
    case kNavigationPlanningConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planning_config_.navigation_planning_config_);
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  default_task_config_.MergeFrom(from.default_task_config_);
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      _internal_mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from._internal_rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      _internal_mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from._internal_standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      _internal_mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from._internal_navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
}

void PlanningConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  default_task_config_.InternalSwap(&other->default_task_config_);
  swap(planning_config_, other->planning_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PathDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TaskConfig* Arena::CreateMaybeMessage< ::apollo::planning::TaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioLaneFollowConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioLaneFollowConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioLaneFollowConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioStopSignUnprotectedConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioTrafficLightProtectedConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioPullOverConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioPullOverConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioPullOverConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioValetParkingConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioValetParkingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioValetParkingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioNarrowStreetUTurnConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioConfig_StageConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioConfig_StageConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioConfig_StageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlannerPublicRoadConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlannerPublicRoadConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlannerPublicRoadConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlannerNaviConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlannerNaviConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlannerNaviConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RtkPlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::RtkPlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RtkPlanningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StandardPlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::StandardPlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StandardPlanningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::NavigationPlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::NavigationPlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NavigationPlanningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
