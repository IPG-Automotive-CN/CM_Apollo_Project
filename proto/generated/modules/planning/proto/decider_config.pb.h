// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class CreepDeciderConfig;
class CreepDeciderConfigDefaultTypeInternal;
extern CreepDeciderConfigDefaultTypeInternal _CreepDeciderConfig_default_instance_;
class SidePassSafetyConfig;
class SidePassSafetyConfigDefaultTypeInternal;
extern SidePassSafetyConfigDefaultTypeInternal _SidePassSafetyConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::CreepDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::CreepDeciderConfig>(Arena*);
template<> ::apollo::planning::SidePassSafetyConfig* Arena::CreateMaybeMessage<::apollo::planning::SidePassSafetyConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class CreepDeciderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.CreepDeciderConfig) */ {
 public:
  CreepDeciderConfig();
  virtual ~CreepDeciderConfig();

  CreepDeciderConfig(const CreepDeciderConfig& from);
  CreepDeciderConfig(CreepDeciderConfig&& from) noexcept
    : CreepDeciderConfig() {
    *this = ::std::move(from);
  }

  inline CreepDeciderConfig& operator=(const CreepDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreepDeciderConfig& operator=(CreepDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreepDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreepDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const CreepDeciderConfig*>(
               &_CreepDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreepDeciderConfig& a, CreepDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CreepDeciderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreepDeciderConfig* New() const final {
    return CreateMaybeMessage<CreepDeciderConfig>(nullptr);
  }

  CreepDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreepDeciderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreepDeciderConfig& from);
  void MergeFrom(const CreepDeciderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreepDeciderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.CreepDeciderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopDistanceFieldNumber = 1,
    kSpeedLimitFieldNumber = 2,
    kMaxValidStopDistanceFieldNumber = 3,
    kMinBoundaryTFieldNumber = 4,
    kIgnoreMaxStMinTFieldNumber = 5,
    kIgnoreMinStMinSFieldNumber = 6,
  };
  // optional double stop_distance = 1 [default = 0.5];
  bool has_stop_distance() const;
  private:
  bool _internal_has_stop_distance() const;
  public:
  void clear_stop_distance();
  double stop_distance() const;
  void set_stop_distance(double value);
  private:
  double _internal_stop_distance() const;
  void _internal_set_stop_distance(double value);
  public:

  // optional double speed_limit = 2 [default = 1];
  bool has_speed_limit() const;
  private:
  bool _internal_has_speed_limit() const;
  public:
  void clear_speed_limit();
  double speed_limit() const;
  void set_speed_limit(double value);
  private:
  double _internal_speed_limit() const;
  void _internal_set_speed_limit(double value);
  public:

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_boundary_t = 4 [default = 6];
  bool has_min_boundary_t() const;
  private:
  bool _internal_has_min_boundary_t() const;
  public:
  void clear_min_boundary_t();
  double min_boundary_t() const;
  void set_min_boundary_t(double value);
  private:
  double _internal_min_boundary_t() const;
  void _internal_set_min_boundary_t(double value);
  public:

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  bool has_ignore_max_st_min_t() const;
  private:
  bool _internal_has_ignore_max_st_min_t() const;
  public:
  void clear_ignore_max_st_min_t();
  double ignore_max_st_min_t() const;
  void set_ignore_max_st_min_t(double value);
  private:
  double _internal_ignore_max_st_min_t() const;
  void _internal_set_ignore_max_st_min_t(double value);
  public:

  // optional double ignore_min_st_min_s = 6 [default = 15];
  bool has_ignore_min_st_min_s() const;
  private:
  bool _internal_has_ignore_min_st_min_s() const;
  public:
  void clear_ignore_min_st_min_s();
  double ignore_min_st_min_s() const;
  void set_ignore_min_st_min_s(double value);
  private:
  double _internal_ignore_min_st_min_s() const;
  void _internal_set_ignore_min_st_min_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.CreepDeciderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double stop_distance_;
  double speed_limit_;
  double max_valid_stop_distance_;
  double min_boundary_t_;
  double ignore_max_st_min_t_;
  double ignore_min_st_min_s_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SidePassSafetyConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SidePassSafetyConfig) */ {
 public:
  SidePassSafetyConfig();
  virtual ~SidePassSafetyConfig();

  SidePassSafetyConfig(const SidePassSafetyConfig& from);
  SidePassSafetyConfig(SidePassSafetyConfig&& from) noexcept
    : SidePassSafetyConfig() {
    *this = ::std::move(from);
  }

  inline SidePassSafetyConfig& operator=(const SidePassSafetyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SidePassSafetyConfig& operator=(SidePassSafetyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SidePassSafetyConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SidePassSafetyConfig* internal_default_instance() {
    return reinterpret_cast<const SidePassSafetyConfig*>(
               &_SidePassSafetyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SidePassSafetyConfig& a, SidePassSafetyConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SidePassSafetyConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SidePassSafetyConfig* New() const final {
    return CreateMaybeMessage<SidePassSafetyConfig>(nullptr);
  }

  SidePassSafetyConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SidePassSafetyConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SidePassSafetyConfig& from);
  void MergeFrom(const SidePassSafetyConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SidePassSafetyConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SidePassSafetyConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinObstacleLateralDistanceFieldNumber = 1,
    kMaxOverlapSRangeFieldNumber = 2,
    kSafeDurationReachRefLineFieldNumber = 3,
  };
  // optional double min_obstacle_lateral_distance = 1 [default = 1];
  bool has_min_obstacle_lateral_distance() const;
  private:
  bool _internal_has_min_obstacle_lateral_distance() const;
  public:
  void clear_min_obstacle_lateral_distance();
  double min_obstacle_lateral_distance() const;
  void set_min_obstacle_lateral_distance(double value);
  private:
  double _internal_min_obstacle_lateral_distance() const;
  void _internal_set_min_obstacle_lateral_distance(double value);
  public:

  // optional double max_overlap_s_range = 2 [default = 5];
  bool has_max_overlap_s_range() const;
  private:
  bool _internal_has_max_overlap_s_range() const;
  public:
  void clear_max_overlap_s_range();
  double max_overlap_s_range() const;
  void set_max_overlap_s_range(double value);
  private:
  double _internal_max_overlap_s_range() const;
  void _internal_set_max_overlap_s_range(double value);
  public:

  // optional double safe_duration_reach_ref_line = 3 [default = 5];
  bool has_safe_duration_reach_ref_line() const;
  private:
  bool _internal_has_safe_duration_reach_ref_line() const;
  public:
  void clear_safe_duration_reach_ref_line();
  double safe_duration_reach_ref_line() const;
  void set_safe_duration_reach_ref_line(double value);
  private:
  double _internal_safe_duration_reach_ref_line() const;
  void _internal_set_safe_duration_reach_ref_line(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.SidePassSafetyConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double min_obstacle_lateral_distance_;
  double max_overlap_s_range_;
  double safe_duration_reach_ref_line_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreepDeciderConfig

// optional double stop_distance = 1 [default = 0.5];
inline bool CreepDeciderConfig::_internal_has_stop_distance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_stop_distance() const {
  return _internal_has_stop_distance();
}
inline void CreepDeciderConfig::clear_stop_distance() {
  stop_distance_ = 0.5;
  _has_bits_[0] &= ~0x00000001u;
}
inline double CreepDeciderConfig::_internal_stop_distance() const {
  return stop_distance_;
}
inline double CreepDeciderConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.stop_distance)
  return _internal_stop_distance();
}
inline void CreepDeciderConfig::_internal_set_stop_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  stop_distance_ = value;
}
inline void CreepDeciderConfig::set_stop_distance(double value) {
  _internal_set_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.stop_distance)
}

// optional double speed_limit = 2 [default = 1];
inline bool CreepDeciderConfig::_internal_has_speed_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_speed_limit() const {
  return _internal_has_speed_limit();
}
inline void CreepDeciderConfig::clear_speed_limit() {
  speed_limit_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CreepDeciderConfig::_internal_speed_limit() const {
  return speed_limit_;
}
inline double CreepDeciderConfig::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.speed_limit)
  return _internal_speed_limit();
}
inline void CreepDeciderConfig::_internal_set_speed_limit(double value) {
  _has_bits_[0] |= 0x00000002u;
  speed_limit_ = value;
}
inline void CreepDeciderConfig::set_speed_limit(double value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.speed_limit)
}

// optional double max_valid_stop_distance = 3 [default = 0.3];
inline bool CreepDeciderConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void CreepDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.3;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CreepDeciderConfig::_internal_max_valid_stop_distance() const {
  return max_valid_stop_distance_;
}
inline double CreepDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void CreepDeciderConfig::_internal_set_max_valid_stop_distance(double value) {
  _has_bits_[0] |= 0x00000004u;
  max_valid_stop_distance_ = value;
}
inline void CreepDeciderConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.max_valid_stop_distance)
}

// optional double min_boundary_t = 4 [default = 6];
inline bool CreepDeciderConfig::_internal_has_min_boundary_t() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_min_boundary_t() const {
  return _internal_has_min_boundary_t();
}
inline void CreepDeciderConfig::clear_min_boundary_t() {
  min_boundary_t_ = 6;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CreepDeciderConfig::_internal_min_boundary_t() const {
  return min_boundary_t_;
}
inline double CreepDeciderConfig::min_boundary_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.min_boundary_t)
  return _internal_min_boundary_t();
}
inline void CreepDeciderConfig::_internal_set_min_boundary_t(double value) {
  _has_bits_[0] |= 0x00000008u;
  min_boundary_t_ = value;
}
inline void CreepDeciderConfig::set_min_boundary_t(double value) {
  _internal_set_min_boundary_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.min_boundary_t)
}

// optional double ignore_max_st_min_t = 5 [default = 0.1];
inline bool CreepDeciderConfig::_internal_has_ignore_max_st_min_t() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_ignore_max_st_min_t() const {
  return _internal_has_ignore_max_st_min_t();
}
inline void CreepDeciderConfig::clear_ignore_max_st_min_t() {
  ignore_max_st_min_t_ = 0.1;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CreepDeciderConfig::_internal_ignore_max_st_min_t() const {
  return ignore_max_st_min_t_;
}
inline double CreepDeciderConfig::ignore_max_st_min_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.ignore_max_st_min_t)
  return _internal_ignore_max_st_min_t();
}
inline void CreepDeciderConfig::_internal_set_ignore_max_st_min_t(double value) {
  _has_bits_[0] |= 0x00000010u;
  ignore_max_st_min_t_ = value;
}
inline void CreepDeciderConfig::set_ignore_max_st_min_t(double value) {
  _internal_set_ignore_max_st_min_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.ignore_max_st_min_t)
}

// optional double ignore_min_st_min_s = 6 [default = 15];
inline bool CreepDeciderConfig::_internal_has_ignore_min_st_min_s() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_ignore_min_st_min_s() const {
  return _internal_has_ignore_min_st_min_s();
}
inline void CreepDeciderConfig::clear_ignore_min_st_min_s() {
  ignore_min_st_min_s_ = 15;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CreepDeciderConfig::_internal_ignore_min_st_min_s() const {
  return ignore_min_st_min_s_;
}
inline double CreepDeciderConfig::ignore_min_st_min_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.ignore_min_st_min_s)
  return _internal_ignore_min_st_min_s();
}
inline void CreepDeciderConfig::_internal_set_ignore_min_st_min_s(double value) {
  _has_bits_[0] |= 0x00000020u;
  ignore_min_st_min_s_ = value;
}
inline void CreepDeciderConfig::set_ignore_min_st_min_s(double value) {
  _internal_set_ignore_min_st_min_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.ignore_min_st_min_s)
}

// -------------------------------------------------------------------

// SidePassSafetyConfig

// optional double min_obstacle_lateral_distance = 1 [default = 1];
inline bool SidePassSafetyConfig::_internal_has_min_obstacle_lateral_distance() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SidePassSafetyConfig::has_min_obstacle_lateral_distance() const {
  return _internal_has_min_obstacle_lateral_distance();
}
inline void SidePassSafetyConfig::clear_min_obstacle_lateral_distance() {
  min_obstacle_lateral_distance_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SidePassSafetyConfig::_internal_min_obstacle_lateral_distance() const {
  return min_obstacle_lateral_distance_;
}
inline double SidePassSafetyConfig::min_obstacle_lateral_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassSafetyConfig.min_obstacle_lateral_distance)
  return _internal_min_obstacle_lateral_distance();
}
inline void SidePassSafetyConfig::_internal_set_min_obstacle_lateral_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  min_obstacle_lateral_distance_ = value;
}
inline void SidePassSafetyConfig::set_min_obstacle_lateral_distance(double value) {
  _internal_set_min_obstacle_lateral_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassSafetyConfig.min_obstacle_lateral_distance)
}

// optional double max_overlap_s_range = 2 [default = 5];
inline bool SidePassSafetyConfig::_internal_has_max_overlap_s_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SidePassSafetyConfig::has_max_overlap_s_range() const {
  return _internal_has_max_overlap_s_range();
}
inline void SidePassSafetyConfig::clear_max_overlap_s_range() {
  max_overlap_s_range_ = 5;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SidePassSafetyConfig::_internal_max_overlap_s_range() const {
  return max_overlap_s_range_;
}
inline double SidePassSafetyConfig::max_overlap_s_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassSafetyConfig.max_overlap_s_range)
  return _internal_max_overlap_s_range();
}
inline void SidePassSafetyConfig::_internal_set_max_overlap_s_range(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_overlap_s_range_ = value;
}
inline void SidePassSafetyConfig::set_max_overlap_s_range(double value) {
  _internal_set_max_overlap_s_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassSafetyConfig.max_overlap_s_range)
}

// optional double safe_duration_reach_ref_line = 3 [default = 5];
inline bool SidePassSafetyConfig::_internal_has_safe_duration_reach_ref_line() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SidePassSafetyConfig::has_safe_duration_reach_ref_line() const {
  return _internal_has_safe_duration_reach_ref_line();
}
inline void SidePassSafetyConfig::clear_safe_duration_reach_ref_line() {
  safe_duration_reach_ref_line_ = 5;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SidePassSafetyConfig::_internal_safe_duration_reach_ref_line() const {
  return safe_duration_reach_ref_line_;
}
inline double SidePassSafetyConfig::safe_duration_reach_ref_line() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SidePassSafetyConfig.safe_duration_reach_ref_line)
  return _internal_safe_duration_reach_ref_line();
}
inline void SidePassSafetyConfig::_internal_set_safe_duration_reach_ref_line(double value) {
  _has_bits_[0] |= 0x00000004u;
  safe_duration_reach_ref_line_ = value;
}
inline void SidePassSafetyConfig::set_safe_duration_reach_ref_line(double value) {
  _internal_set_safe_duration_reach_ref_line(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SidePassSafetyConfig.safe_duration_reach_ref_line)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdecider_5fconfig_2eproto
