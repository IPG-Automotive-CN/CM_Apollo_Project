// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_speed_decider_config.proto

#include "modules/planning/proto/navi_speed_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class NaviSpeedDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NaviSpeedDeciderConfig> _instance;
} _NaviSpeedDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NaviSpeedDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::NaviSpeedDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NaviSpeedDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, preferred_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, max_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, max_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, obstacle_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, safe_distance_base_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, safe_distance_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, following_accel_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, soft_centric_accel_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_centric_accel_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, hard_accel_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_safe_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_planning_start_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, enable_accel_auto_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, kappa_preview_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, kappa_threshold_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  2,
  3,
  4,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::apollo::planning::NaviSpeedDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NaviSpeedDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/planning/proto/navi_speed_deci"
  "der_config.proto\022\017apollo.planning\"\322\004\n\026Na"
  "viSpeedDeciderConfig\022\032\n\017preferred_accel\030"
  "\001 \001(\001:\0012\022\032\n\017preferred_decel\030\002 \001(\001:\0012\022\031\n\016"
  "preferred_jerk\030\003 \001(\001:\0012\022\024\n\tmax_accel\030\004 \001"
  "(\001:\0014\022\024\n\tmax_decel\030\005 \001(\001:\0015\022\034\n\017obstacle_"
  "buffer\030\006 \001(\001:\0030.5\022\035\n\022safe_distance_base\030"
  "\007 \001(\001:\0012\022\036\n\023safe_distance_ratio\030\010 \001(\001:\0011"
  "\022\"\n\025following_accel_ratio\030\t \001(\001:\0030.5\022%\n\030"
  "soft_centric_accel_limit\030\n \001(\001:\0031.2\022%\n\030h"
  "ard_centric_accel_limit\030\013 \001(\001:\0031.5\022\035\n\020ha"
  "rd_speed_limit\030\014 \001(\001:\003100\022\034\n\020hard_accel_"
  "limit\030\r \001(\001:\00210\022\036\n\020enable_safe_path\030\016 \001("
  "\010:\004true\022)\n\033enable_planning_start_point\030\017"
  " \001(\010:\004true\022,\n\036enable_accel_auto_compensa"
  "tion\030\020 \001(\010:\004true\022\030\n\rkappa_preview\030\021 \001(\001:"
  "\0010\022\032\n\017kappa_threshold\030\022 \001(\001:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_sccs[1] = {
  &scc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto, "modules/planning/proto/navi_speed_decider_config.proto", 670,
  &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void NaviSpeedDeciderConfig::InitAsDefaultInstance() {
}
class NaviSpeedDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviSpeedDeciderConfig>()._has_bits_);
  static void set_has_preferred_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preferred_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preferred_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_safe_distance_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_safe_distance_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_following_accel_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_soft_centric_accel_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_hard_centric_accel_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hard_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_hard_accel_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_safe_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_planning_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable_accel_auto_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kappa_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NaviSpeedDeciderConfig::NaviSpeedDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviSpeedDeciderConfig)
}
NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kappa_preview_, &from.kappa_preview_,
    static_cast<size_t>(reinterpret_cast<char*>(&hard_accel_limit_) -
    reinterpret_cast<char*>(&kappa_preview_)) + sizeof(hard_accel_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviSpeedDeciderConfig)
}

void NaviSpeedDeciderConfig::SharedCtor() {
  ::memset(&kappa_preview_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_threshold_) -
      reinterpret_cast<char*>(&kappa_preview_)) + sizeof(kappa_threshold_));
  enable_safe_path_ = true;
  enable_planning_start_point_ = true;
  enable_accel_auto_compensation_ = true;
  preferred_accel_ = 2;
  preferred_decel_ = 2;
  preferred_jerk_ = 2;
  max_accel_ = 4;
  max_decel_ = 5;
  obstacle_buffer_ = 0.5;
  safe_distance_base_ = 2;
  safe_distance_ratio_ = 1;
  following_accel_ratio_ = 0.5;
  soft_centric_accel_limit_ = 1.2;
  hard_centric_accel_limit_ = 1.5;
  hard_speed_limit_ = 100;
  hard_accel_limit_ = 10;
}

NaviSpeedDeciderConfig::~NaviSpeedDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviSpeedDeciderConfig)
  SharedDtor();
}

void NaviSpeedDeciderConfig::SharedDtor() {
}

void NaviSpeedDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NaviSpeedDeciderConfig& NaviSpeedDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NaviSpeedDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void NaviSpeedDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviSpeedDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&kappa_preview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kappa_threshold_) -
        reinterpret_cast<char*>(&kappa_preview_)) + sizeof(kappa_threshold_));
    enable_safe_path_ = true;
    enable_planning_start_point_ = true;
    enable_accel_auto_compensation_ = true;
    preferred_accel_ = 2;
    preferred_decel_ = 2;
    preferred_jerk_ = 2;
  }
  if (cached_has_bits & 0x0000ff00u) {
    max_accel_ = 4;
    max_decel_ = 5;
    obstacle_buffer_ = 0.5;
    safe_distance_base_ = 2;
    safe_distance_ratio_ = 1;
    following_accel_ratio_ = 0.5;
    soft_centric_accel_limit_ = 1.2;
    hard_centric_accel_limit_ = 1.5;
  }
  if (cached_has_bits & 0x00030000u) {
    hard_speed_limit_ = 100;
    hard_accel_limit_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NaviSpeedDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double preferred_accel = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_preferred_accel(&has_bits);
          preferred_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_decel = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_preferred_decel(&has_bits);
          preferred_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preferred_jerk = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_preferred_jerk(&has_bits);
          preferred_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_accel = 4 [default = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_accel(&has_bits);
          max_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_decel = 5 [default = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max_decel(&has_bits);
          max_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double obstacle_buffer = 6 [default = 0.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_obstacle_buffer(&has_bits);
          obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double safe_distance_base = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_safe_distance_base(&has_bits);
          safe_distance_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double safe_distance_ratio = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_safe_distance_ratio(&has_bits);
          safe_distance_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double following_accel_ratio = 9 [default = 0.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_following_accel_ratio(&has_bits);
          following_accel_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double soft_centric_accel_limit = 10 [default = 1.2];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_soft_centric_accel_limit(&has_bits);
          soft_centric_accel_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hard_centric_accel_limit = 11 [default = 1.5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_hard_centric_accel_limit(&has_bits);
          hard_centric_accel_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hard_speed_limit = 12 [default = 100];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_hard_speed_limit(&has_bits);
          hard_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hard_accel_limit = 13 [default = 10];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_hard_accel_limit(&has_bits);
          hard_accel_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_safe_path = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_enable_safe_path(&has_bits);
          enable_safe_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_planning_start_point = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_enable_planning_start_point(&has_bits);
          enable_planning_start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_accel_auto_compensation = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_enable_accel_auto_compensation(&has_bits);
          enable_accel_auto_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double kappa_preview = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_kappa_preview(&has_bits);
          kappa_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa_threshold = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_kappa_threshold(&has_bits);
          kappa_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaviSpeedDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviSpeedDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_preferred_accel(), target);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_preferred_decel(), target);
  }

  // optional double preferred_jerk = 3 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_preferred_jerk(), target);
  }

  // optional double max_accel = 4 [default = 4];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_accel(), target);
  }

  // optional double max_decel = 5 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_decel(), target);
  }

  // optional double obstacle_buffer = 6 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_obstacle_buffer(), target);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_safe_distance_base(), target);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_safe_distance_ratio(), target);
  }

  // optional double following_accel_ratio = 9 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_following_accel_ratio(), target);
  }

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_soft_centric_accel_limit(), target);
  }

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_hard_centric_accel_limit(), target);
  }

  // optional double hard_speed_limit = 12 [default = 100];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_hard_speed_limit(), target);
  }

  // optional double hard_accel_limit = 13 [default = 10];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_hard_accel_limit(), target);
  }

  // optional bool enable_safe_path = 14 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_safe_path(), target);
  }

  // optional bool enable_planning_start_point = 15 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_enable_planning_start_point(), target);
  }

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_accel_auto_compensation(), target);
  }

  // optional double kappa_preview = 17 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_kappa_preview(), target);
  }

  // optional double kappa_threshold = 18 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_kappa_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviSpeedDeciderConfig)
  return target;
}

size_t NaviSpeedDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviSpeedDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double kappa_preview = 17 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double kappa_threshold = 18 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional bool enable_safe_path = 14 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_planning_start_point = 15 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable_accel_auto_compensation = 16 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional double preferred_accel = 1 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 2 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double preferred_jerk = 3 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double max_accel = 4 [default = 4];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double max_decel = 5 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_buffer = 6 [default = 0.5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_base = 7 [default = 2];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_ratio = 8 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double following_accel_ratio = 9 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double soft_centric_accel_limit = 10 [default = 1.2];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double hard_centric_accel_limit = 11 [default = 1.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double hard_speed_limit = 12 [default = 100];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double hard_accel_limit = 13 [default = 10];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaviSpeedDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviSpeedDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NaviSpeedDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviSpeedDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviSpeedDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviSpeedDeciderConfig::MergeFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      kappa_preview_ = from.kappa_preview_;
    }
    if (cached_has_bits & 0x00000002u) {
      kappa_threshold_ = from.kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_safe_path_ = from.enable_safe_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_planning_start_point_ = from.enable_planning_start_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_accel_auto_compensation_ = from.enable_accel_auto_compensation_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_accel_ = from.preferred_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      preferred_decel_ = from.preferred_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      preferred_jerk_ = from.preferred_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      max_accel_ = from.max_accel_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_decel_ = from.max_decel_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_buffer_ = from.obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      safe_distance_base_ = from.safe_distance_base_;
    }
    if (cached_has_bits & 0x00001000u) {
      safe_distance_ratio_ = from.safe_distance_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      following_accel_ratio_ = from.following_accel_ratio_;
    }
    if (cached_has_bits & 0x00004000u) {
      soft_centric_accel_limit_ = from.soft_centric_accel_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      hard_centric_accel_limit_ = from.hard_centric_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      hard_speed_limit_ = from.hard_speed_limit_;
    }
    if (cached_has_bits & 0x00020000u) {
      hard_accel_limit_ = from.hard_accel_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviSpeedDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviSpeedDeciderConfig::CopyFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviSpeedDeciderConfig::IsInitialized() const {
  return true;
}

void NaviSpeedDeciderConfig::InternalSwap(NaviSpeedDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kappa_preview_, other->kappa_preview_);
  swap(kappa_threshold_, other->kappa_threshold_);
  swap(enable_safe_path_, other->enable_safe_path_);
  swap(enable_planning_start_point_, other->enable_planning_start_point_);
  swap(enable_accel_auto_compensation_, other->enable_accel_auto_compensation_);
  swap(preferred_accel_, other->preferred_accel_);
  swap(preferred_decel_, other->preferred_decel_);
  swap(preferred_jerk_, other->preferred_jerk_);
  swap(max_accel_, other->max_accel_);
  swap(max_decel_, other->max_decel_);
  swap(obstacle_buffer_, other->obstacle_buffer_);
  swap(safe_distance_base_, other->safe_distance_base_);
  swap(safe_distance_ratio_, other->safe_distance_ratio_);
  swap(following_accel_ratio_, other->following_accel_ratio_);
  swap(soft_centric_accel_limit_, other->soft_centric_accel_limit_);
  swap(hard_centric_accel_limit_, other->hard_centric_accel_limit_);
  swap(hard_speed_limit_, other->hard_speed_limit_);
  swap(hard_accel_limit_, other->hard_accel_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviSpeedDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviSpeedDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NaviSpeedDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
