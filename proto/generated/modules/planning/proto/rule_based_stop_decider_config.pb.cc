// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/rule_based_stop_decider_config.proto

#include "modules/planning/proto/rule_based_stop_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class RuleBasedStopDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuleBasedStopDeciderConfig> _instance;
} _RuleBasedStopDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RuleBasedStopDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::RuleBasedStopDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RuleBasedStopDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, max_adc_stop_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_beam_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_beam_radius_intensity_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, search_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, is_block_angle_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, approach_distance_for_lane_change_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RuleBasedStopDeciderConfig, urgent_distance_for_lane_change_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::planning::RuleBasedStopDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RuleBasedStopDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/planning/proto/rule_based_stop"
  "_decider_config.proto\022\017apollo.planning\"\316"
  "\002\n\032RuleBasedStopDeciderConfig\022\037\n\022max_adc"
  "_stop_speed\030\001 \001(\001:\0030.3\022$\n\027max_valid_stop"
  "_distance\030\002 \001(\001:\0030.5\022\035\n\022search_beam_leng"
  "th\030\003 \001(\001:\0015\022*\n\034search_beam_radius_intens"
  "ity\030\004 \001(\001:\0040.08\022\032\n\014search_range\030\005 \001(\001:\0043"
  ".14\022&\n\030is_block_angle_threshold\030\006 \001(\001:\0041"
  ".57\022-\n!approach_distance_for_lane_change"
  "\030\n \001(\001:\00280\022+\n\037urgent_distance_for_lane_c"
  "hange\030\013 \001(\001:\00250"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_sccs[1] = {
  &scc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto, "modules/planning/proto/rule_based_stop_decider_config.proto", 415,
  &descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void RuleBasedStopDeciderConfig::InitAsDefaultInstance() {
}
class RuleBasedStopDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RuleBasedStopDeciderConfig>()._has_bits_);
  static void set_has_max_adc_stop_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_search_beam_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_beam_radius_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_search_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_block_angle_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_approach_distance_for_lane_change(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_urgent_distance_for_lane_change(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RuleBasedStopDeciderConfig)
}
RuleBasedStopDeciderConfig::RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_adc_stop_speed_, &from.max_adc_stop_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&urgent_distance_for_lane_change_) -
    reinterpret_cast<char*>(&max_adc_stop_speed_)) + sizeof(urgent_distance_for_lane_change_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RuleBasedStopDeciderConfig)
}

void RuleBasedStopDeciderConfig::SharedCtor() {
  max_adc_stop_speed_ = 0.3;
  max_valid_stop_distance_ = 0.5;
  search_beam_length_ = 5;
  search_beam_radius_intensity_ = 0.08;
  search_range_ = 3.14;
  is_block_angle_threshold_ = 1.57;
  approach_distance_for_lane_change_ = 80;
  urgent_distance_for_lane_change_ = 50;
}

RuleBasedStopDeciderConfig::~RuleBasedStopDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RuleBasedStopDeciderConfig)
  SharedDtor();
}

void RuleBasedStopDeciderConfig::SharedDtor() {
}

void RuleBasedStopDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuleBasedStopDeciderConfig& RuleBasedStopDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuleBasedStopDeciderConfig_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RuleBasedStopDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    max_adc_stop_speed_ = 0.3;
    max_valid_stop_distance_ = 0.5;
    search_beam_length_ = 5;
    search_beam_radius_intensity_ = 0.08;
    search_range_ = 3.14;
    is_block_angle_threshold_ = 1.57;
    approach_distance_for_lane_change_ = 80;
    urgent_distance_for_lane_change_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RuleBasedStopDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double max_adc_stop_speed = 1 [default = 0.3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_adc_stop_speed(&has_bits);
          max_adc_stop_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double search_beam_length = 3 [default = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_search_beam_length(&has_bits);
          search_beam_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double search_beam_radius_intensity = 4 [default = 0.08];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_search_beam_radius_intensity(&has_bits);
          search_beam_radius_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double search_range = 5 [default = 3.14];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_search_range(&has_bits);
          search_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double is_block_angle_threshold = 6 [default = 1.57];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_is_block_angle_threshold(&has_bits);
          is_block_angle_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double approach_distance_for_lane_change = 10 [default = 80];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_approach_distance_for_lane_change(&has_bits);
          approach_distance_for_lane_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double urgent_distance_for_lane_change = 11 [default = 50];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_urgent_distance_for_lane_change(&has_bits);
          urgent_distance_for_lane_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuleBasedStopDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RuleBasedStopDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_adc_stop_speed(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double search_beam_length = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_search_beam_length(), target);
  }

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_search_beam_radius_intensity(), target);
  }

  // optional double search_range = 5 [default = 3.14];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_search_range(), target);
  }

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_is_block_angle_threshold(), target);
  }

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_approach_distance_for_lane_change(), target);
  }

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_urgent_distance_for_lane_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RuleBasedStopDeciderConfig)
  return target;
}

size_t RuleBasedStopDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RuleBasedStopDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_adc_stop_speed = 1 [default = 0.3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double search_beam_length = 3 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double search_beam_radius_intensity = 4 [default = 0.08];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double search_range = 5 [default = 3.14];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double is_block_angle_threshold = 6 [default = 1.57];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double approach_distance_for_lane_change = 10 [default = 80];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double urgent_distance_for_lane_change = 11 [default = 50];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuleBasedStopDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleBasedStopDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuleBasedStopDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RuleBasedStopDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RuleBasedStopDeciderConfig)
    MergeFrom(*source);
  }
}

void RuleBasedStopDeciderConfig::MergeFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_adc_stop_speed_ = from.max_adc_stop_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_beam_length_ = from.search_beam_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      search_beam_radius_intensity_ = from.search_beam_radius_intensity_;
    }
    if (cached_has_bits & 0x00000010u) {
      search_range_ = from.search_range_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_block_angle_threshold_ = from.is_block_angle_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      approach_distance_for_lane_change_ = from.approach_distance_for_lane_change_;
    }
    if (cached_has_bits & 0x00000080u) {
      urgent_distance_for_lane_change_ = from.urgent_distance_for_lane_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuleBasedStopDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleBasedStopDeciderConfig::CopyFrom(const RuleBasedStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RuleBasedStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleBasedStopDeciderConfig::IsInitialized() const {
  return true;
}

void RuleBasedStopDeciderConfig::InternalSwap(RuleBasedStopDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_adc_stop_speed_, other->max_adc_stop_speed_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(search_beam_length_, other->search_beam_length_);
  swap(search_beam_radius_intensity_, other->search_beam_radius_intensity_);
  swap(search_range_, other->search_range_);
  swap(is_block_angle_threshold_, other->is_block_angle_threshold_);
  swap(approach_distance_for_lane_change_, other->approach_distance_for_lane_change_);
  swap(urgent_distance_for_lane_change_, other->urgent_distance_for_lane_change_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuleBasedStopDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::RuleBasedStopDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::RuleBasedStopDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RuleBasedStopDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
