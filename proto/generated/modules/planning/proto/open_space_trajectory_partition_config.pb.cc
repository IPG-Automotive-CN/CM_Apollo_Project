// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_partition_config.proto

#include "modules/planning/proto/open_space_trajectory_partition_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSpaceTrajectoryPartitionConfig> _instance;
} _OpenSpaceTrajectoryPartitionConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceTrajectoryPartitionConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceTrajectoryPartitionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceTrajectoryPartitionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_max_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_unit_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_period_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, interpolated_pieces_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, initial_gear_check_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_search_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_track_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, distance_search_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_offset_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, lateral_offset_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, longitudinal_offset_to_midpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, vehicle_box_iou_threshold_to_midpoint_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::apollo::planning::OpenSpaceTrajectoryPartitionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceTrajectoryPartitionConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCmodules/planning/proto/open_space_traj"
  "ectory_partition_config.proto\022\017apollo.pl"
  "anning\"\323\003\n\"OpenSpaceTrajectoryPartitionC"
  "onfig\022\030\n\020gear_shift_max_t\030\001 \001(\001\022\031\n\021gear_"
  "shift_unit_t\030\002 \001(\001\022\"\n\032gear_shift_period_"
  "duration\030\003 \001(\001\022\037\n\027interpolated_pieces_nu"
  "m\030\004 \001(\004\022\"\n\032initial_gear_check_horizon\030\005 "
  "\001(\004\022\034\n\024heading_search_range\030\006 \001(\001\022\033\n\023hea"
  "ding_track_range\030\007 \001(\001\022$\n\025distance_searc"
  "h_range\030\010 \001(\001:\0051e-06\022\"\n\032heading_offset_t"
  "o_midpoint\030\t \001(\001\022\'\n\032lateral_offset_to_mi"
  "dpoint\030\n \001(\001:\0030.1\022,\n\037longitudinal_offset"
  "_to_midpoint\030\013 \001(\001:\0030.1\0223\n%vehicle_box_i"
  "ou_threshold_to_midpoint\030\014 \001(\001:\0040.95"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_sccs[1] = {
  &scc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto, "modules/planning/proto/open_space_trajectory_partition_config.proto", 556,
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void OpenSpaceTrajectoryPartitionConfig::InitAsDefaultInstance() {
}
class OpenSpaceTrajectoryPartitionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceTrajectoryPartitionConfig>()._has_bits_);
  static void set_has_gear_shift_max_t(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gear_shift_unit_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_shift_period_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interpolated_pieces_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_gear_check_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_search_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_heading_track_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_distance_search_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heading_offset_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lateral_offset_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_longitudinal_offset_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vehicle_box_iou_threshold_to_midpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}
OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_shift_max_t_, &from.gear_shift_max_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_box_iou_threshold_to_midpoint_) -
    reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(vehicle_box_iou_threshold_to_midpoint_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}

void OpenSpaceTrajectoryPartitionConfig::SharedCtor() {
  ::memset(&gear_shift_max_t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
      reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(heading_offset_to_midpoint_));
  distance_search_range_ = 1e-06;
  lateral_offset_to_midpoint_ = 0.1;
  longitudinal_offset_to_midpoint_ = 0.1;
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
}

OpenSpaceTrajectoryPartitionConfig::~OpenSpaceTrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryPartitionConfig::SharedDtor() {
}

void OpenSpaceTrajectoryPartitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSpaceTrajectoryPartitionConfig& OpenSpaceTrajectoryPartitionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSpaceTrajectoryPartitionConfig_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fpartition_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void OpenSpaceTrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gear_shift_max_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
        reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(heading_offset_to_midpoint_));
  }
  if (cached_has_bits & 0x00000f00u) {
    distance_search_range_ = 1e-06;
    lateral_offset_to_midpoint_ = 0.1;
    longitudinal_offset_to_midpoint_ = 0.1;
    vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OpenSpaceTrajectoryPartitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double gear_shift_max_t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_gear_shift_max_t(&has_bits);
          gear_shift_max_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gear_shift_unit_t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_gear_shift_unit_t(&has_bits);
          gear_shift_unit_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gear_shift_period_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gear_shift_period_duration(&has_bits);
          gear_shift_period_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 interpolated_pieces_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_interpolated_pieces_num(&has_bits);
          interpolated_pieces_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 initial_gear_check_horizon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initial_gear_check_horizon(&has_bits);
          initial_gear_check_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double heading_search_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_heading_search_range(&has_bits);
          heading_search_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_track_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_heading_track_range(&has_bits);
          heading_track_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double distance_search_range = 8 [default = 1e-06];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_distance_search_range(&has_bits);
          distance_search_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_offset_to_midpoint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_heading_offset_to_midpoint(&has_bits);
          heading_offset_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_lateral_offset_to_midpoint(&has_bits);
          lateral_offset_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_longitudinal_offset_to_midpoint(&has_bits);
          longitudinal_offset_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_vehicle_box_iou_threshold_to_midpoint(&has_bits);
          vehicle_box_iou_threshold_to_midpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceTrajectoryPartitionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gear_shift_max_t = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gear_shift_unit_t(), target);
  }

  // optional double gear_shift_period_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_gear_shift_period_duration(), target);
  }

  // optional uint64 interpolated_pieces_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_initial_gear_check_horizon(), target);
  }

  // optional double heading_search_range = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_heading_search_range(), target);
  }

  // optional double heading_track_range = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_heading_track_range(), target);
  }

  // optional double distance_search_range = 8 [default = 1e-06];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_distance_search_range(), target);
  }

  // optional double heading_offset_to_midpoint = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_heading_offset_to_midpoint(), target);
  }

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lateral_offset_to_midpoint(), target);
  }

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_longitudinal_offset_to_midpoint(), target);
  }

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_vehicle_box_iou_threshold_to_midpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  return target;
}

size_t OpenSpaceTrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double gear_shift_max_t = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 interpolated_pieces_num = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_initial_gear_check_horizon());
    }

    // optional double heading_search_range = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double heading_track_range = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double heading_offset_to_midpoint = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double distance_search_range = 8 [default = 1e-06];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryPartitionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSpaceTrajectoryPartitionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_search_range_ = from.heading_search_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_track_range_ = from.heading_track_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_offset_to_midpoint_ = from.heading_offset_to_midpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      distance_search_range_ = from.distance_search_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_offset_to_midpoint_ = from.lateral_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitudinal_offset_to_midpoint_ = from.longitudinal_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_box_iou_threshold_to_midpoint_ = from.vehicle_box_iou_threshold_to_midpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryPartitionConfig::InternalSwap(OpenSpaceTrajectoryPartitionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_shift_max_t_, other->gear_shift_max_t_);
  swap(gear_shift_unit_t_, other->gear_shift_unit_t_);
  swap(gear_shift_period_duration_, other->gear_shift_period_duration_);
  swap(interpolated_pieces_num_, other->interpolated_pieces_num_);
  swap(initial_gear_check_horizon_, other->initial_gear_check_horizon_);
  swap(heading_search_range_, other->heading_search_range_);
  swap(heading_track_range_, other->heading_track_range_);
  swap(heading_offset_to_midpoint_, other->heading_offset_to_midpoint_);
  swap(distance_search_range_, other->distance_search_range_);
  swap(lateral_offset_to_midpoint_, other->lateral_offset_to_midpoint_);
  swap(longitudinal_offset_to_midpoint_, other->longitudinal_offset_to_midpoint_);
  swap(vehicle_box_iou_threshold_to_midpoint_, other->vehicle_box_iou_threshold_to_midpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceTrajectoryPartitionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
