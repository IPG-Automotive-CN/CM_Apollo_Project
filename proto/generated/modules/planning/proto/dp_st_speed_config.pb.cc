// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_st_speed_config.proto

#include "modules/planning/proto/dp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class DpStSpeedConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpStSpeedConfig> _instance;
} _DpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DpStSpeedConfig_default_instance_;
    new (ptr) ::apollo::planning::DpStSpeedConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DpStSpeedConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, matrix_dimension_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, matrix_dimension_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, speed_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, accel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, obstacle_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, reference_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, go_down_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, go_up_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, default_obstacle_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, default_speed_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, exceed_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, low_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, exceed_soft_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, low_soft_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, reference_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, keep_clear_low_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, accel_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, decel_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, positive_jerk_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, negative_jerk_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, safe_time_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, safe_distance_),
  4,
  5,
  0,
  6,
  7,
  8,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  2,
  3,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(::apollo::planning::DpStSpeedConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DpStSpeedConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/planning/proto/dp_st_speed_con"
  "fig.proto\022\017apollo.planning\"\234\006\n\017DpStSpeed"
  "Config\022\037\n\022matrix_dimension_s\030\001 \001(\005:\003100\022"
  "\036\n\022matrix_dimension_t\030\002 \001(\005:\00210\022\027\n\014speed"
  "_weight\030\n \001(\001:\0010\022\030\n\014accel_weight\030\013 \001(\001:\002"
  "10\022\027\n\013jerk_weight\030\014 \001(\001:\00210\022\032\n\017obstacle_"
  "weight\030\r \001(\001:\0011\022\033\n\020reference_weight\030\016 \001("
  "\001:\0010\022\031\n\016go_down_buffer\030\017 \001(\001:\0015\022\027\n\014go_up"
  "_buffer\030\020 \001(\001:\0015\022*\n\025default_obstacle_cos"
  "t\030\024 \001(\001:\01310000000000\022\035\n\022default_speed_co"
  "st\030\037 \001(\001:\0011\022 \n\024exceed_speed_penalty\030  \001("
  "\001:\00210\022\036\n\021low_speed_penalty\030! \001(\001:\0032.5\022$\n"
  "\031exceed_soft_speed_penalty\030\" \001(\001:\0010\022!\n\026l"
  "ow_soft_speed_penalty\030# \001(\001:\0010\022\"\n\027refere"
  "nce_speed_penalty\030$ \001(\001:\0011\022(\n\034keep_clear"
  "_low_speed_penalty\030% \001(\001:\00210\022\030\n\raccel_pe"
  "nalty\030( \001(\001:\0012\022\030\n\rdecel_penalty\030) \001(\001:\0012"
  "\022\036\n\023positive_jerk_coeff\0302 \001(\001:\0011\022 \n\023nega"
  "tive_jerk_coeff\0303 \001(\001:\003300\022\035\n\020max_accele"
  "ration\030< \001(\001:\0034.5\022\036\n\020max_deceleration\030= "
  "\001(\001:\004-4.5\022\033\n\020safe_time_buffer\030F \001(\001:\0013\022\031"
  "\n\rsafe_distance\030G \001(\001:\00220"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_sccs[1] = {
  &scc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto, "modules/planning/proto/dp_st_speed_config.proto", 865,
  &descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void DpStSpeedConfig::InitAsDefaultInstance() {
}
class DpStSpeedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DpStSpeedConfig>()._has_bits_);
  static void set_has_matrix_dimension_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_matrix_dimension_t(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_jerk_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_obstacle_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reference_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_go_down_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_go_up_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_default_obstacle_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_default_speed_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_exceed_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_low_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_exceed_soft_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_low_soft_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reference_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_keep_clear_low_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_accel_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_decel_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_positive_jerk_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_negative_jerk_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_safe_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_safe_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

DpStSpeedConfig::DpStSpeedConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DpStSpeedConfig)
}
DpStSpeedConfig::DpStSpeedConfig(const DpStSpeedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_weight_, &from.speed_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_distance_) -
    reinterpret_cast<char*>(&speed_weight_)) + sizeof(safe_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpStSpeedConfig)
}

void DpStSpeedConfig::SharedCtor() {
  ::memset(&speed_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_soft_speed_penalty_) -
      reinterpret_cast<char*>(&speed_weight_)) + sizeof(low_soft_speed_penalty_));
  matrix_dimension_s_ = 100;
  matrix_dimension_t_ = 10;
  accel_weight_ = 10;
  jerk_weight_ = 10;
  obstacle_weight_ = 1;
  go_down_buffer_ = 5;
  go_up_buffer_ = 5;
  default_obstacle_cost_ = 10000000000;
  default_speed_cost_ = 1;
  exceed_speed_penalty_ = 10;
  low_speed_penalty_ = 2.5;
  reference_speed_penalty_ = 1;
  keep_clear_low_speed_penalty_ = 10;
  accel_penalty_ = 2;
  decel_penalty_ = 2;
  positive_jerk_coeff_ = 1;
  negative_jerk_coeff_ = 300;
  max_acceleration_ = 4.5;
  max_deceleration_ = -4.5;
  safe_time_buffer_ = 3;
  safe_distance_ = 20;
}

DpStSpeedConfig::~DpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpStSpeedConfig)
  SharedDtor();
}

void DpStSpeedConfig::SharedDtor() {
}

void DpStSpeedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpStSpeedConfig& DpStSpeedConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpStSpeedConfig_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpStSpeedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_soft_speed_penalty_) -
        reinterpret_cast<char*>(&speed_weight_)) + sizeof(low_soft_speed_penalty_));
    matrix_dimension_s_ = 100;
    matrix_dimension_t_ = 10;
    accel_weight_ = 10;
    jerk_weight_ = 10;
  }
  if (cached_has_bits & 0x0000ff00u) {
    obstacle_weight_ = 1;
    go_down_buffer_ = 5;
    go_up_buffer_ = 5;
    default_obstacle_cost_ = 10000000000;
    default_speed_cost_ = 1;
    exceed_speed_penalty_ = 10;
    low_speed_penalty_ = 2.5;
    reference_speed_penalty_ = 1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    keep_clear_low_speed_penalty_ = 10;
    accel_penalty_ = 2;
    decel_penalty_ = 2;
    positive_jerk_coeff_ = 1;
    negative_jerk_coeff_ = 300;
    max_acceleration_ = 4.5;
    max_deceleration_ = -4.5;
    safe_time_buffer_ = 3;
  }
  safe_distance_ = 20;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DpStSpeedConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 matrix_dimension_s = 1 [default = 100];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_matrix_dimension_s(&has_bits);
          matrix_dimension_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 matrix_dimension_t = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matrix_dimension_t(&has_bits);
          matrix_dimension_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_weight = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_speed_weight(&has_bits);
          speed_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accel_weight = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_accel_weight(&has_bits);
          accel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_weight = 12 [default = 10];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_jerk_weight(&has_bits);
          jerk_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double obstacle_weight = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_obstacle_weight(&has_bits);
          obstacle_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reference_weight = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_reference_weight(&has_bits);
          reference_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double go_down_buffer = 15 [default = 5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_go_down_buffer(&has_bits);
          go_down_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double go_up_buffer = 16 [default = 5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_go_up_buffer(&has_bits);
          go_up_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double default_obstacle_cost = 20 [default = 10000000000];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_default_obstacle_cost(&has_bits);
          default_obstacle_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double default_speed_cost = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_default_speed_cost(&has_bits);
          default_speed_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double exceed_speed_penalty = 32 [default = 10];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_exceed_speed_penalty(&has_bits);
          exceed_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_speed_penalty = 33 [default = 2.5];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_low_speed_penalty(&has_bits);
          low_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double exceed_soft_speed_penalty = 34 [default = 0];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_exceed_soft_speed_penalty(&has_bits);
          exceed_soft_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_soft_speed_penalty = 35 [default = 0];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_low_soft_speed_penalty(&has_bits);
          low_soft_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reference_speed_penalty = 36 [default = 1];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_reference_speed_penalty(&has_bits);
          reference_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double keep_clear_low_speed_penalty = 37 [default = 10];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_keep_clear_low_speed_penalty(&has_bits);
          keep_clear_low_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accel_penalty = 40 [default = 2];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_accel_penalty(&has_bits);
          accel_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double decel_penalty = 41 [default = 2];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_decel_penalty(&has_bits);
          decel_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double positive_jerk_coeff = 50 [default = 1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_positive_jerk_coeff(&has_bits);
          positive_jerk_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double negative_jerk_coeff = 51 [default = 300];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_negative_jerk_coeff(&has_bits);
          negative_jerk_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration = 60 [default = 4.5];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_max_acceleration(&has_bits);
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_deceleration = 61 [default = -4.5];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_max_deceleration(&has_bits);
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double safe_time_buffer = 70 [default = 3];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_safe_time_buffer(&has_bits);
          safe_time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double safe_distance = 71 [default = 20];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_safe_distance(&has_bits);
          safe_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DpStSpeedConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpStSpeedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 matrix_dimension_s = 1 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_matrix_dimension_s(), target);
  }

  // optional int32 matrix_dimension_t = 2 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matrix_dimension_t(), target);
  }

  // optional double speed_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_speed_weight(), target);
  }

  // optional double accel_weight = 11 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_accel_weight(), target);
  }

  // optional double jerk_weight = 12 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_jerk_weight(), target);
  }

  // optional double obstacle_weight = 13 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_obstacle_weight(), target);
  }

  // optional double reference_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_reference_weight(), target);
  }

  // optional double go_down_buffer = 15 [default = 5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_go_down_buffer(), target);
  }

  // optional double go_up_buffer = 16 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 31 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 32 [default = 10];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 33 [default = 2.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_low_speed_penalty(), target);
  }

  // optional double exceed_soft_speed_penalty = 34 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_exceed_soft_speed_penalty(), target);
  }

  // optional double low_soft_speed_penalty = 35 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_low_soft_speed_penalty(), target);
  }

  // optional double reference_speed_penalty = 36 [default = 1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_reference_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 37 [default = 10];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 40 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_accel_penalty(), target);
  }

  // optional double decel_penalty = 41 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 50 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(50, this->_internal_positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 51 [default = 300];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(51, this->_internal_negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 60 [default = 4.5];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(60, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 61 [default = -4.5];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(61, this->_internal_max_deceleration(), target);
  }

  // optional double safe_time_buffer = 70 [default = 3];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(70, this->_internal_safe_time_buffer(), target);
  }

  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(71, this->_internal_safe_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpStSpeedConfig)
  return target;
}

size_t DpStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpStSpeedConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double speed_weight = 10 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double reference_weight = 14 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double exceed_soft_speed_penalty = 34 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double low_soft_speed_penalty = 35 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional int32 matrix_dimension_s = 1 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_matrix_dimension_s());
    }

    // optional int32 matrix_dimension_t = 2 [default = 10];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_matrix_dimension_t());
    }

    // optional double accel_weight = 11 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 12 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double obstacle_weight = 13 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 15 [default = 5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 16 [default = 5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double default_obstacle_cost = 20 [default = 10000000000];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double default_speed_cost = 31 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double exceed_speed_penalty = 32 [default = 10];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double low_speed_penalty = 33 [default = 2.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double reference_speed_penalty = 36 [default = 1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double keep_clear_low_speed_penalty = 37 [default = 10];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double accel_penalty = 40 [default = 2];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 41 [default = 2];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 50 [default = 1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 51 [default = 300];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 60 [default = 4.5];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 61 [default = -4.5];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double safe_time_buffer = 70 [default = 3];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional double safe_distance = 71 [default = 20];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpStSpeedConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DpStSpeedConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpStSpeedConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DpStSpeedConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DpStSpeedConfig)
    MergeFrom(*source);
  }
}

void DpStSpeedConfig::MergeFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      reference_weight_ = from.reference_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      exceed_soft_speed_penalty_ = from.exceed_soft_speed_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      low_soft_speed_penalty_ = from.low_soft_speed_penalty_;
    }
    if (cached_has_bits & 0x00000010u) {
      matrix_dimension_s_ = from.matrix_dimension_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      matrix_dimension_t_ = from.matrix_dimension_t_;
    }
    if (cached_has_bits & 0x00000040u) {
      accel_weight_ = from.accel_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      jerk_weight_ = from.jerk_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      go_down_buffer_ = from.go_down_buffer_;
    }
    if (cached_has_bits & 0x00000400u) {
      go_up_buffer_ = from.go_up_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_obstacle_cost_ = from.default_obstacle_cost_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_speed_cost_ = from.default_speed_cost_;
    }
    if (cached_has_bits & 0x00002000u) {
      exceed_speed_penalty_ = from.exceed_speed_penalty_;
    }
    if (cached_has_bits & 0x00004000u) {
      low_speed_penalty_ = from.low_speed_penalty_;
    }
    if (cached_has_bits & 0x00008000u) {
      reference_speed_penalty_ = from.reference_speed_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      keep_clear_low_speed_penalty_ = from.keep_clear_low_speed_penalty_;
    }
    if (cached_has_bits & 0x00020000u) {
      accel_penalty_ = from.accel_penalty_;
    }
    if (cached_has_bits & 0x00040000u) {
      decel_penalty_ = from.decel_penalty_;
    }
    if (cached_has_bits & 0x00080000u) {
      positive_jerk_coeff_ = from.positive_jerk_coeff_;
    }
    if (cached_has_bits & 0x00100000u) {
      negative_jerk_coeff_ = from.negative_jerk_coeff_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    if (cached_has_bits & 0x00800000u) {
      safe_time_buffer_ = from.safe_time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_safe_distance(from._internal_safe_distance());
  }
}

void DpStSpeedConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpStSpeedConfig::CopyFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedConfig::IsInitialized() const {
  return true;
}

void DpStSpeedConfig::InternalSwap(DpStSpeedConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_weight_, other->speed_weight_);
  swap(reference_weight_, other->reference_weight_);
  swap(exceed_soft_speed_penalty_, other->exceed_soft_speed_penalty_);
  swap(low_soft_speed_penalty_, other->low_soft_speed_penalty_);
  swap(matrix_dimension_s_, other->matrix_dimension_s_);
  swap(matrix_dimension_t_, other->matrix_dimension_t_);
  swap(accel_weight_, other->accel_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(go_down_buffer_, other->go_down_buffer_);
  swap(go_up_buffer_, other->go_up_buffer_);
  swap(default_obstacle_cost_, other->default_obstacle_cost_);
  swap(default_speed_cost_, other->default_speed_cost_);
  swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  swap(low_speed_penalty_, other->low_speed_penalty_);
  swap(reference_speed_penalty_, other->reference_speed_penalty_);
  swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  swap(accel_penalty_, other->accel_penalty_);
  swap(decel_penalty_, other->decel_penalty_);
  swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(safe_time_buffer_, other->safe_time_buffer_);
  swap(safe_distance_, other->safe_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpStSpeedConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::DpStSpeedConfig* Arena::CreateMaybeMessage< ::apollo::planning::DpStSpeedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DpStSpeedConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
