// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/speed_bounds_decider_config.proto

#include "modules/planning/proto/speed_bounds_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class SpeedBoundsDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedBoundsDeciderConfig> _instance;
} _SpeedBoundsDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SpeedBoundsDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::SpeedBoundsDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SpeedBoundsDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, total_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, boundary_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, high_speed_centric_acceleration_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, low_speed_centric_acceleration_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, high_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, low_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, minimal_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, point_extension_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, lowest_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, num_points_to_avg_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, collision_safety_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, static_obs_nudge_speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, dynamic_obs_nudge_speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpeedBoundsDeciderConfig, centri_jerk_speed_coeff_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  3,
  13,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::apollo::planning::SpeedBoundsDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SpeedBoundsDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8modules/planning/proto/speed_bounds_de"
  "cider_config.proto\022\017apollo.planning\"\202\004\n\030"
  "SpeedBoundsDeciderConfig\022\025\n\ntotal_time\030\001"
  " \001(\001:\0017\022\034\n\017boundary_buffer\030\002 \001(\001:\0030.1\0222\n"
  "%high_speed_centric_acceleration_limit\030\003"
  " \001(\001:\0031.2\0221\n$low_speed_centric_accelerat"
  "ion_limit\030\004 \001(\001:\0031.4\022 \n\024high_speed_thres"
  "hold\030\005 \001(\001:\00220\022\036\n\023low_speed_threshold\030\006 "
  "\001(\001:\0017\022\034\n\rminimal_kappa\030\007 \001(\001:\0051e-05\022\032\n\017"
  "point_extension\030\010 \001(\001:\0011\022\031\n\014lowest_speed"
  "\030\t \001(\001:\0032.5\022\"\n\027num_points_to_avg_kappa\030\n"
  " \001(\r:\0014\022!\n\026collision_safety_range\030\013 \001(\001:"
  "\0011\022$\n\034static_obs_nudge_speed_ratio\030\014 \001(\001"
  "\022%\n\035dynamic_obs_nudge_speed_ratio\030\r \001(\001\022"
  "\037\n\027centri_jerk_speed_coeff\030\016 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_sccs[1] = {
  &scc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto, "modules/planning/proto/speed_bounds_decider_config.proto", 592,
  &descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void SpeedBoundsDeciderConfig::InitAsDefaultInstance() {
}
class SpeedBoundsDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedBoundsDeciderConfig>()._has_bits_);
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_boundary_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_high_speed_centric_acceleration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_low_speed_centric_acceleration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_high_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_low_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_minimal_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_point_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lowest_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_num_points_to_avg_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_collision_safety_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_static_obs_nudge_speed_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dynamic_obs_nudge_speed_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_centri_jerk_speed_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpeedBoundsDeciderConfig)
}
SpeedBoundsDeciderConfig::SpeedBoundsDeciderConfig(const SpeedBoundsDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&static_obs_nudge_speed_ratio_, &from.static_obs_nudge_speed_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_safety_range_) -
    reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(collision_safety_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpeedBoundsDeciderConfig)
}

void SpeedBoundsDeciderConfig::SharedCtor() {
  ::memset(&static_obs_nudge_speed_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&centri_jerk_speed_coeff_) -
      reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(centri_jerk_speed_coeff_));
  num_points_to_avg_kappa_ = 4u;
  total_time_ = 7;
  boundary_buffer_ = 0.1;
  high_speed_centric_acceleration_limit_ = 1.2;
  low_speed_centric_acceleration_limit_ = 1.4;
  high_speed_threshold_ = 20;
  low_speed_threshold_ = 7;
  minimal_kappa_ = 1e-05;
  point_extension_ = 1;
  lowest_speed_ = 2.5;
  collision_safety_range_ = 1;
}

SpeedBoundsDeciderConfig::~SpeedBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpeedBoundsDeciderConfig)
  SharedDtor();
}

void SpeedBoundsDeciderConfig::SharedDtor() {
}

void SpeedBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedBoundsDeciderConfig& SpeedBoundsDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedBoundsDeciderConfig_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SpeedBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&static_obs_nudge_speed_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&centri_jerk_speed_coeff_) -
        reinterpret_cast<char*>(&static_obs_nudge_speed_ratio_)) + sizeof(centri_jerk_speed_coeff_));
    num_points_to_avg_kappa_ = 4u;
    total_time_ = 7;
    boundary_buffer_ = 0.1;
    high_speed_centric_acceleration_limit_ = 1.2;
    low_speed_centric_acceleration_limit_ = 1.4;
  }
  if (cached_has_bits & 0x00003f00u) {
    high_speed_threshold_ = 20;
    low_speed_threshold_ = 7;
    minimal_kappa_ = 1e-05;
    point_extension_ = 1;
    lowest_speed_ = 2.5;
    collision_safety_range_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpeedBoundsDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double total_time = 1 [default = 7];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_total_time(&has_bits);
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double boundary_buffer = 2 [default = 0.1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_boundary_buffer(&has_bits);
          boundary_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double high_speed_centric_acceleration_limit = 3 [default = 1.2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_high_speed_centric_acceleration_limit(&has_bits);
          high_speed_centric_acceleration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_speed_centric_acceleration_limit = 4 [default = 1.4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_low_speed_centric_acceleration_limit(&has_bits);
          low_speed_centric_acceleration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double high_speed_threshold = 5 [default = 20];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_high_speed_threshold(&has_bits);
          high_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double low_speed_threshold = 6 [default = 7];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_low_speed_threshold(&has_bits);
          low_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double minimal_kappa = 7 [default = 1e-05];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_minimal_kappa(&has_bits);
          minimal_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double point_extension = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_point_extension(&has_bits);
          point_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lowest_speed = 9 [default = 2.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_lowest_speed(&has_bits);
          lowest_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_points_to_avg_kappa = 10 [default = 4];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_points_to_avg_kappa(&has_bits);
          num_points_to_avg_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double collision_safety_range = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_collision_safety_range(&has_bits);
          collision_safety_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double static_obs_nudge_speed_ratio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_static_obs_nudge_speed_ratio(&has_bits);
          static_obs_nudge_speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dynamic_obs_nudge_speed_ratio = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_dynamic_obs_nudge_speed_ratio(&has_bits);
          dynamic_obs_nudge_speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double centri_jerk_speed_coeff = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_centri_jerk_speed_coeff(&has_bits);
          centri_jerk_speed_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedBoundsDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpeedBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time = 1 [default = 7];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time(), target);
  }

  // optional double boundary_buffer = 2 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_boundary_buffer(), target);
  }

  // optional double high_speed_centric_acceleration_limit = 3 [default = 1.2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_high_speed_centric_acceleration_limit(), target);
  }

  // optional double low_speed_centric_acceleration_limit = 4 [default = 1.4];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_low_speed_centric_acceleration_limit(), target);
  }

  // optional double high_speed_threshold = 5 [default = 20];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_high_speed_threshold(), target);
  }

  // optional double low_speed_threshold = 6 [default = 7];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_low_speed_threshold(), target);
  }

  // optional double minimal_kappa = 7 [default = 1e-05];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_minimal_kappa(), target);
  }

  // optional double point_extension = 8 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_point_extension(), target);
  }

  // optional double lowest_speed = 9 [default = 2.5];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_lowest_speed(), target);
  }

  // optional uint32 num_points_to_avg_kappa = 10 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_points_to_avg_kappa(), target);
  }

  // optional double collision_safety_range = 11 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_collision_safety_range(), target);
  }

  // optional double static_obs_nudge_speed_ratio = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_static_obs_nudge_speed_ratio(), target);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 13;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_dynamic_obs_nudge_speed_ratio(), target);
  }

  // optional double centri_jerk_speed_coeff = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_centri_jerk_speed_coeff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpeedBoundsDeciderConfig)
  return target;
}

size_t SpeedBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpeedBoundsDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double static_obs_nudge_speed_ratio = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dynamic_obs_nudge_speed_ratio = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double centri_jerk_speed_coeff = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_points_to_avg_kappa = 10 [default = 4];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_points_to_avg_kappa());
    }

    // optional double total_time = 1 [default = 7];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double boundary_buffer = 2 [default = 0.1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double high_speed_centric_acceleration_limit = 3 [default = 1.2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double low_speed_centric_acceleration_limit = 4 [default = 1.4];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double high_speed_threshold = 5 [default = 20];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double low_speed_threshold = 6 [default = 7];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double minimal_kappa = 7 [default = 1e-05];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double point_extension = 8 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double lowest_speed = 9 [default = 2.5];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double collision_safety_range = 11 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBoundsDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBoundsDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedBoundsDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpeedBoundsDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpeedBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void SpeedBoundsDeciderConfig::MergeFrom(const SpeedBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      static_obs_nudge_speed_ratio_ = from.static_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      dynamic_obs_nudge_speed_ratio_ = from.dynamic_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      centri_jerk_speed_coeff_ = from.centri_jerk_speed_coeff_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_points_to_avg_kappa_ = from.num_points_to_avg_kappa_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      boundary_buffer_ = from.boundary_buffer_;
    }
    if (cached_has_bits & 0x00000040u) {
      high_speed_centric_acceleration_limit_ = from.high_speed_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_speed_centric_acceleration_limit_ = from.low_speed_centric_acceleration_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      high_speed_threshold_ = from.high_speed_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      low_speed_threshold_ = from.low_speed_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      minimal_kappa_ = from.minimal_kappa_;
    }
    if (cached_has_bits & 0x00000800u) {
      point_extension_ = from.point_extension_;
    }
    if (cached_has_bits & 0x00001000u) {
      lowest_speed_ = from.lowest_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      collision_safety_range_ = from.collision_safety_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedBoundsDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBoundsDeciderConfig::CopyFrom(const SpeedBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpeedBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void SpeedBoundsDeciderConfig::InternalSwap(SpeedBoundsDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(static_obs_nudge_speed_ratio_, other->static_obs_nudge_speed_ratio_);
  swap(dynamic_obs_nudge_speed_ratio_, other->dynamic_obs_nudge_speed_ratio_);
  swap(centri_jerk_speed_coeff_, other->centri_jerk_speed_coeff_);
  swap(num_points_to_avg_kappa_, other->num_points_to_avg_kappa_);
  swap(total_time_, other->total_time_);
  swap(boundary_buffer_, other->boundary_buffer_);
  swap(high_speed_centric_acceleration_limit_, other->high_speed_centric_acceleration_limit_);
  swap(low_speed_centric_acceleration_limit_, other->low_speed_centric_acceleration_limit_);
  swap(high_speed_threshold_, other->high_speed_threshold_);
  swap(low_speed_threshold_, other->low_speed_threshold_);
  swap(minimal_kappa_, other->minimal_kappa_);
  swap(point_extension_, other->point_extension_);
  swap(lowest_speed_, other->lowest_speed_);
  swap(collision_safety_range_, other->collision_safety_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBoundsDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::SpeedBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::SpeedBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SpeedBoundsDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
