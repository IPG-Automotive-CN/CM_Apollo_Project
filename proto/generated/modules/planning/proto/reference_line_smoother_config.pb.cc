// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/reference_line_smoother_config.proto

#include "modules/planning/proto/reference_line_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
namespace apollo {
namespace planning {
class QpSplineSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QpSplineSmootherConfig> _instance;
} _QpSplineSmootherConfig_default_instance_;
class SpiralSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpiralSmootherConfig> _instance;
} _SpiralSmootherConfig_default_instance_;
class DiscretePointsSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscretePointsSmootherConfig> _instance;
  const ::apollo::planning::CosThetaSmootherConfig* cos_theta_smoothing_;
  const ::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing_;
} _DiscretePointsSmootherConfig_default_instance_;
class ReferenceLineSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceLineSmootherConfig> _instance;
  const ::apollo::planning::QpSplineSmootherConfig* qp_spline_;
  const ::apollo::planning::SpiralSmootherConfig* spiral_;
  const ::apollo::planning::DiscretePointsSmootherConfig* discrete_points_;
} _ReferenceLineSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DiscretePointsSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::DiscretePointsSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DiscretePointsSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto}, {
      &scc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto.base,
      &scc_info_FemPosDeviationSmootherConfig_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_QpSplineSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::QpSplineSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::QpSplineSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ReferenceLineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReferenceLineSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::ReferenceLineSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReferenceLineSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReferenceLineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReferenceLineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto}, {
      &scc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,
      &scc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,
      &scc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SpiralSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::SpiralSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SpiralSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, spline_order_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, max_spline_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, regularization_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, second_derivative_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, third_derivative_weight_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, piecewise_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, opt_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, opt_acceptable_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, opt_acceptable_iteration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, weight_curve_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, weight_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, weight_dkappa_),
  0,
  1,
  3,
  2,
  5,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DiscretePointsSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DiscretePointsSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DiscretePointsSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DiscretePointsSmootherConfig, smoothing_method_),
  offsetof(::apollo::planning::DiscretePointsSmootherConfigDefaultTypeInternal, cos_theta_smoothing_),
  offsetof(::apollo::planning::DiscretePointsSmootherConfigDefaultTypeInternal, fem_pos_deviation_smoothing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DiscretePointsSmootherConfig, SmootherConfig_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, max_constraint_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, longitudinal_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, lateral_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, num_of_total_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, curb_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, driving_side_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, wide_lane_threshold_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, wide_lane_shift_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, lateral_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, resolution_),
  offsetof(::apollo::planning::ReferenceLineSmootherConfigDefaultTypeInternal, qp_spline_),
  offsetof(::apollo::planning::ReferenceLineSmootherConfigDefaultTypeInternal, spiral_),
  offsetof(::apollo::planning::ReferenceLineSmootherConfigDefaultTypeInternal, discrete_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, SmootherConfig_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::planning::QpSplineSmootherConfig)},
  { 15, 29, sizeof(::apollo::planning::SpiralSmootherConfig)},
  { 38, 47, sizeof(::apollo::planning::DiscretePointsSmootherConfig)},
  { 50, 69, sizeof(::apollo::planning::ReferenceLineSmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_QpSplineSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SpiralSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DiscretePointsSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ReferenceLineSmootherConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/planning/proto/reference_line_"
  "smoother_config.proto\022\017apollo.planning\0326"
  "modules/planning/proto/cos_theta_smoothe"
  "r_config.proto\032>modules/planning/proto/f"
  "em_pos_deviation_smoother_config.proto\"\277"
  "\001\n\026QpSplineSmootherConfig\022\027\n\014spline_orde"
  "r\030\001 \001(\r:\0015\022\035\n\021max_spline_length\030\002 \001(\001:\0022"
  "5\022\"\n\025regularization_weight\030\003 \001(\001:\0030.1\022#\n"
  "\030second_derivative_weight\030\004 \001(\001:\0010\022$\n\027th"
  "ird_derivative_weight\030\005 \001(\001:\003100\"\243\002\n\024Spi"
  "ralSmootherConfig\022\032\n\rmax_deviation\030\001 \001(\001"
  ":\0030.1\022\034\n\020piecewise_length\030\002 \001(\001:\00210\022\033\n\rm"
  "ax_iteration\030\003 \001(\r:\0041000\022\026\n\007opt_tol\030\004 \001("
  "\001:\0051e-08\022!\n\022opt_acceptable_tol\030\005 \001(\001:\0051e"
  "-06\022$\n\030opt_acceptable_iteration\030\006 \001(\r:\0021"
  "5\022\036\n\023weight_curve_length\030\007 \001(\001:\0011\022\027\n\014wei"
  "ght_kappa\030\010 \001(\001:\0011\022\032\n\rweight_dkappa\030\t \001("
  "\001:\003100\"\243\003\n\034DiscretePointsSmootherConfig\022"
  "t\n\020smoothing_method\030\003 \001(\0162=.apollo.plann"
  "ing.DiscretePointsSmootherConfig.Smoothi"
  "ngMethod:\033FEM_POS_DEVIATION_SMOOTHING\022F\n"
  "\023cos_theta_smoothing\030\004 \001(\0132\'.apollo.plan"
  "ning.CosThetaSmootherConfigH\000\022U\n\033fem_pos"
  "_deviation_smoothing\030\005 \001(\0132..apollo.plan"
  "ning.FemPosDeviationSmootherConfigH\000\"\\\n\017"
  "SmoothingMethod\022\017\n\013NOT_DEFINED\020\000\022\027\n\023COS_"
  "THETA_SMOOTHING\020\001\022\037\n\033FEM_POS_DEVIATION_S"
  "MOOTHING\020\002B\020\n\016SmootherConfig\"\232\005\n\033Referen"
  "ceLineSmootherConfig\022\"\n\027max_constraint_i"
  "nterval\030\001 \001(\001:\0015\022&\n\033longitudinal_boundar"
  "y_bound\030\002 \001(\001:\0011\022#\n\026lateral_boundary_bou"
  "nd\030\003 \001(\001:\0030.1\022 \n\023num_of_total_points\030\004 \001"
  "(\r:\003500\022\027\n\ncurb_shift\030\005 \001(\001:\0030.2\022U\n\014driv"
  "ing_side\030\006 \001(\01628.apollo.planning.Referen"
  "ceLineSmootherConfig.DrivingSide:\005RIGHT\022"
  "%\n\032wide_lane_threshold_factor\030\007 \001(\001:\0012\022#"
  "\n\025wide_lane_shift_ratio\030\010 \001(\001:\0040.25\022\033\n\016l"
  "ateral_buffer\030\t \001(\001:\0030.2\022\030\n\nresolution\030\n"
  " \001(\001:\0040.02\022<\n\tqp_spline\030\024 \001(\0132\'.apollo.p"
  "lanning.QpSplineSmootherConfigH\000\0227\n\006spir"
  "al\030\025 \001(\0132%.apollo.planning.SpiralSmoothe"
  "rConfigH\000\022H\n\017discrete_points\030\026 \001(\0132-.apo"
  "llo.planning.DiscretePointsSmootherConfi"
  "gH\000\"\"\n\013DrivingSide\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002B"
  "\020\n\016SmootherConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_sccs[4] = {
  &scc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,
  &scc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,
  &scc_info_ReferenceLineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,
  &scc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto, "modules/planning/proto/reference_line_smoother_config.proto", 1777,
  &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto, 4, file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiscretePointsSmootherConfig_SmoothingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[0];
}
bool DiscretePointsSmootherConfig_SmoothingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::NOT_DEFINED;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::COS_THETA_SMOOTHING;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::FEM_POS_DEVIATION_SMOOTHING;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::SmoothingMethod_MIN;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::SmoothingMethod_MAX;
constexpr int DiscretePointsSmootherConfig::SmoothingMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceLineSmootherConfig_DrivingSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[1];
}
bool ReferenceLineSmootherConfig_DrivingSide_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::LEFT;
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::RIGHT;
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::DrivingSide_MIN;
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::DrivingSide_MAX;
constexpr int ReferenceLineSmootherConfig::DrivingSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void QpSplineSmootherConfig::InitAsDefaultInstance() {
}
class QpSplineSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QpSplineSmootherConfig>()._has_bits_);
  static void set_has_spline_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_spline_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_regularization_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_second_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_third_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

QpSplineSmootherConfig::QpSplineSmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QpSplineSmootherConfig)
}
QpSplineSmootherConfig::QpSplineSmootherConfig(const QpSplineSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&second_derivative_weight_, &from.second_derivative_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&third_derivative_weight_) -
    reinterpret_cast<char*>(&second_derivative_weight_)) + sizeof(third_derivative_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplineSmootherConfig)
}

void QpSplineSmootherConfig::SharedCtor() {
  second_derivative_weight_ = 0;
  spline_order_ = 5u;
  max_spline_length_ = 25;
  regularization_weight_ = 0.1;
  third_derivative_weight_ = 100;
}

QpSplineSmootherConfig::~QpSplineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplineSmootherConfig)
  SharedDtor();
}

void QpSplineSmootherConfig::SharedDtor() {
}

void QpSplineSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QpSplineSmootherConfig& QpSplineSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QpSplineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void QpSplineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplineSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    second_derivative_weight_ = 0;
    spline_order_ = 5u;
    max_spline_length_ = 25;
    regularization_weight_ = 0.1;
    third_derivative_weight_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QpSplineSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 spline_order = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spline_order(&has_bits);
          spline_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_spline_length = 2 [default = 25];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_spline_length(&has_bits);
          max_spline_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double regularization_weight = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_regularization_weight(&has_bits);
          regularization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double second_derivative_weight = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_second_derivative_weight(&has_bits);
          second_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double third_derivative_weight = 5 [default = 100];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_third_derivative_weight(&has_bits);
          third_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QpSplineSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplineSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_spline_length(), target);
  }

  // optional double regularization_weight = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_regularization_weight(), target);
  }

  // optional double second_derivative_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_third_derivative_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplineSmootherConfig)
  return target;
}

size_t QpSplineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplineSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double second_derivative_weight = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 spline_order = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spline_order());
    }

    // optional double max_spline_length = 2 [default = 25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 3 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double third_derivative_weight = 5 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QpSplineSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpSplineSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QpSplineSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QpSplineSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QpSplineSmootherConfig)
    MergeFrom(*source);
  }
}

void QpSplineSmootherConfig::MergeFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      second_derivative_weight_ = from.second_derivative_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      spline_order_ = from.spline_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_spline_length_ = from.max_spline_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      regularization_weight_ = from.regularization_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      third_derivative_weight_ = from.third_derivative_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QpSplineSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineSmootherConfig::CopyFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineSmootherConfig::IsInitialized() const {
  return true;
}

void QpSplineSmootherConfig::InternalSwap(QpSplineSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(second_derivative_weight_, other->second_derivative_weight_);
  swap(spline_order_, other->spline_order_);
  swap(max_spline_length_, other->max_spline_length_);
  swap(regularization_weight_, other->regularization_weight_);
  swap(third_derivative_weight_, other->third_derivative_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QpSplineSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpiralSmootherConfig::InitAsDefaultInstance() {
}
class SpiralSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SpiralSmootherConfig>()._has_bits_);
  static void set_has_max_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_piecewise_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_opt_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opt_acceptable_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_opt_acceptable_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_curve_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SpiralSmootherConfig::SpiralSmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SpiralSmootherConfig)
}
SpiralSmootherConfig::SpiralSmootherConfig(const SpiralSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_deviation_, &from.max_deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_dkappa_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(weight_dkappa_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpiralSmootherConfig)
}

void SpiralSmootherConfig::SharedCtor() {
  max_deviation_ = 0.1;
  piecewise_length_ = 10;
  opt_tol_ = 1e-08;
  max_iteration_ = 1000u;
  opt_acceptable_iteration_ = 15u;
  opt_acceptable_tol_ = 1e-06;
  weight_curve_length_ = 1;
  weight_kappa_ = 1;
  weight_dkappa_ = 100;
}

SpiralSmootherConfig::~SpiralSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpiralSmootherConfig)
  SharedDtor();
}

void SpiralSmootherConfig::SharedDtor() {
}

void SpiralSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpiralSmootherConfig& SpiralSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpiralSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SpiralSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpiralSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    max_deviation_ = 0.1;
    piecewise_length_ = 10;
    opt_tol_ = 1e-08;
    max_iteration_ = 1000u;
    opt_acceptable_iteration_ = 15u;
    opt_acceptable_tol_ = 1e-06;
    weight_curve_length_ = 1;
    weight_kappa_ = 1;
  }
  weight_dkappa_ = 100;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpiralSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double max_deviation = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_deviation(&has_bits);
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double piecewise_length = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_piecewise_length(&has_bits);
          piecewise_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_iteration = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_iteration(&has_bits);
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double opt_tol = 4 [default = 1e-08];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_opt_tol(&has_bits);
          opt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double opt_acceptable_tol = 5 [default = 1e-06];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_opt_acceptable_tol(&has_bits);
          opt_acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 opt_acceptable_iteration = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_opt_acceptable_iteration(&has_bits);
          opt_acceptable_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double weight_curve_length = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_weight_curve_length(&has_bits);
          weight_curve_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_kappa = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_weight_kappa(&has_bits);
          weight_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_dkappa = 9 [default = 100];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_weight_dkappa(&has_bits);
          weight_dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpiralSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpiralSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_deviation = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_deviation(), target);
  }

  // optional double piecewise_length = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_piecewise_length(), target);
  }

  // optional uint32 max_iteration = 3 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_iteration(), target);
  }

  // optional double opt_tol = 4 [default = 1e-08];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_opt_tol(), target);
  }

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_opt_acceptable_tol(), target);
  }

  // optional uint32 opt_acceptable_iteration = 6 [default = 15];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_opt_acceptable_iteration(), target);
  }

  // optional double weight_curve_length = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_weight_curve_length(), target);
  }

  // optional double weight_kappa = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_weight_kappa(), target);
  }

  // optional double weight_dkappa = 9 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_weight_dkappa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpiralSmootherConfig)
  return target;
}

size_t SpiralSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpiralSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_deviation = 1 [default = 0.1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double piecewise_length = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double opt_tol = 4 [default = 1e-08];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 max_iteration = 3 [default = 1000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_iteration());
    }

    // optional uint32 opt_acceptable_iteration = 6 [default = 15];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opt_acceptable_iteration());
    }

    // optional double opt_acceptable_tol = 5 [default = 1e-06];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_curve_length = 7 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_kappa = 8 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double weight_dkappa = 9 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpiralSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SpiralSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpiralSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpiralSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SpiralSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SpiralSmootherConfig)
    MergeFrom(*source);
  }
}

void SpiralSmootherConfig::MergeFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpiralSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_deviation_ = from.max_deviation_;
    }
    if (cached_has_bits & 0x00000002u) {
      piecewise_length_ = from.piecewise_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      opt_tol_ = from.opt_tol_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_iteration_ = from.max_iteration_;
    }
    if (cached_has_bits & 0x00000010u) {
      opt_acceptable_iteration_ = from.opt_acceptable_iteration_;
    }
    if (cached_has_bits & 0x00000020u) {
      opt_acceptable_tol_ = from.opt_acceptable_tol_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_curve_length_ = from.weight_curve_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_kappa_ = from.weight_kappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_weight_dkappa(from._internal_weight_dkappa());
  }
}

void SpiralSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiralSmootherConfig::CopyFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiralSmootherConfig::IsInitialized() const {
  return true;
}

void SpiralSmootherConfig::InternalSwap(SpiralSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_deviation_, other->max_deviation_);
  swap(piecewise_length_, other->piecewise_length_);
  swap(opt_tol_, other->opt_tol_);
  swap(max_iteration_, other->max_iteration_);
  swap(opt_acceptable_iteration_, other->opt_acceptable_iteration_);
  swap(opt_acceptable_tol_, other->opt_acceptable_tol_);
  swap(weight_curve_length_, other->weight_curve_length_);
  swap(weight_kappa_, other->weight_kappa_);
  swap(weight_dkappa_, other->weight_dkappa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpiralSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscretePointsSmootherConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DiscretePointsSmootherConfig_default_instance_.cos_theta_smoothing_ = const_cast< ::apollo::planning::CosThetaSmootherConfig*>(
      ::apollo::planning::CosThetaSmootherConfig::internal_default_instance());
  ::apollo::planning::_DiscretePointsSmootherConfig_default_instance_.fem_pos_deviation_smoothing_ = const_cast< ::apollo::planning::FemPosDeviationSmootherConfig*>(
      ::apollo::planning::FemPosDeviationSmootherConfig::internal_default_instance());
}
class DiscretePointsSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscretePointsSmootherConfig>()._has_bits_);
  static void set_has_smoothing_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::CosThetaSmootherConfig& cos_theta_smoothing(const DiscretePointsSmootherConfig* msg);
  static const ::apollo::planning::FemPosDeviationSmootherConfig& fem_pos_deviation_smoothing(const DiscretePointsSmootherConfig* msg);
};

const ::apollo::planning::CosThetaSmootherConfig&
DiscretePointsSmootherConfig::_Internal::cos_theta_smoothing(const DiscretePointsSmootherConfig* msg) {
  return *msg->SmootherConfig_.cos_theta_smoothing_;
}
const ::apollo::planning::FemPosDeviationSmootherConfig&
DiscretePointsSmootherConfig::_Internal::fem_pos_deviation_smoothing(const DiscretePointsSmootherConfig* msg) {
  return *msg->SmootherConfig_.fem_pos_deviation_smoothing_;
}
void DiscretePointsSmootherConfig::set_allocated_cos_theta_smoothing(::apollo::planning::CosThetaSmootherConfig* cos_theta_smoothing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (cos_theta_smoothing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cos_theta_smoothing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cos_theta_smoothing, submessage_arena);
    }
    set_has_cos_theta_smoothing();
    SmootherConfig_.cos_theta_smoothing_ = cos_theta_smoothing;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
}
void DiscretePointsSmootherConfig::clear_cos_theta_smoothing() {
  if (_internal_has_cos_theta_smoothing()) {
    delete SmootherConfig_.cos_theta_smoothing_;
    clear_has_SmootherConfig();
  }
}
void DiscretePointsSmootherConfig::set_allocated_fem_pos_deviation_smoothing(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (fem_pos_deviation_smoothing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fem_pos_deviation_smoothing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fem_pos_deviation_smoothing, submessage_arena);
    }
    set_has_fem_pos_deviation_smoothing();
    SmootherConfig_.fem_pos_deviation_smoothing_ = fem_pos_deviation_smoothing;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
}
void DiscretePointsSmootherConfig::clear_fem_pos_deviation_smoothing() {
  if (_internal_has_fem_pos_deviation_smoothing()) {
    delete SmootherConfig_.fem_pos_deviation_smoothing_;
    clear_has_SmootherConfig();
  }
}
DiscretePointsSmootherConfig::DiscretePointsSmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DiscretePointsSmootherConfig)
}
DiscretePointsSmootherConfig::DiscretePointsSmootherConfig(const DiscretePointsSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smoothing_method_ = from.smoothing_method_;
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      _internal_mutable_cos_theta_smoothing()->::apollo::planning::CosThetaSmootherConfig::MergeFrom(from._internal_cos_theta_smoothing());
      break;
    }
    case kFemPosDeviationSmoothing: {
      _internal_mutable_fem_pos_deviation_smoothing()->::apollo::planning::FemPosDeviationSmootherConfig::MergeFrom(from._internal_fem_pos_deviation_smoothing());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DiscretePointsSmootherConfig)
}

void DiscretePointsSmootherConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base);
  smoothing_method_ = 2;
  clear_has_SmootherConfig();
}

DiscretePointsSmootherConfig::~DiscretePointsSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DiscretePointsSmootherConfig)
  SharedDtor();
}

void DiscretePointsSmootherConfig::SharedDtor() {
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void DiscretePointsSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscretePointsSmootherConfig& DiscretePointsSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscretePointsSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DiscretePointsSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.DiscretePointsSmootherConfig)
  switch (SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      delete SmootherConfig_.cos_theta_smoothing_;
      break;
    }
    case kFemPosDeviationSmoothing: {
      delete SmootherConfig_.fem_pos_deviation_smoothing_;
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void DiscretePointsSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DiscretePointsSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smoothing_method_ = 2;
  clear_SmootherConfig();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DiscretePointsSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod_IsValid(val))) {
            _internal_set_smoothing_method(static_cast<::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cos_theta_smoothing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fem_pos_deviation_smoothing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscretePointsSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DiscretePointsSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_smoothing_method(), target);
  }

  switch (SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::cos_theta_smoothing(this), target, stream);
      break;
    }
    case kFemPosDeviationSmoothing: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::fem_pos_deviation_smoothing(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DiscretePointsSmootherConfig)
  return target;
}

size_t DiscretePointsSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DiscretePointsSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_smoothing_method());
  }

  switch (SmootherConfig_case()) {
    // optional .apollo.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
    case kCosThetaSmoothing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.cos_theta_smoothing_);
      break;
    }
    // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
    case kFemPosDeviationSmoothing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.fem_pos_deviation_smoothing_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscretePointsSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DiscretePointsSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscretePointsSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscretePointsSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DiscretePointsSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DiscretePointsSmootherConfig)
    MergeFrom(*source);
  }
}

void DiscretePointsSmootherConfig::MergeFrom(const DiscretePointsSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DiscretePointsSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_smoothing_method()) {
    _internal_set_smoothing_method(from._internal_smoothing_method());
  }
  switch (from.SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      _internal_mutable_cos_theta_smoothing()->::apollo::planning::CosThetaSmootherConfig::MergeFrom(from._internal_cos_theta_smoothing());
      break;
    }
    case kFemPosDeviationSmoothing: {
      _internal_mutable_fem_pos_deviation_smoothing()->::apollo::planning::FemPosDeviationSmootherConfig::MergeFrom(from._internal_fem_pos_deviation_smoothing());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
}

void DiscretePointsSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DiscretePointsSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscretePointsSmootherConfig::CopyFrom(const DiscretePointsSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DiscretePointsSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscretePointsSmootherConfig::IsInitialized() const {
  return true;
}

void DiscretePointsSmootherConfig::InternalSwap(DiscretePointsSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(smoothing_method_, other->smoothing_method_);
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscretePointsSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceLineSmootherConfig::InitAsDefaultInstance() {
  ::apollo::planning::_ReferenceLineSmootherConfig_default_instance_.qp_spline_ = const_cast< ::apollo::planning::QpSplineSmootherConfig*>(
      ::apollo::planning::QpSplineSmootherConfig::internal_default_instance());
  ::apollo::planning::_ReferenceLineSmootherConfig_default_instance_.spiral_ = const_cast< ::apollo::planning::SpiralSmootherConfig*>(
      ::apollo::planning::SpiralSmootherConfig::internal_default_instance());
  ::apollo::planning::_ReferenceLineSmootherConfig_default_instance_.discrete_points_ = const_cast< ::apollo::planning::DiscretePointsSmootherConfig*>(
      ::apollo::planning::DiscretePointsSmootherConfig::internal_default_instance());
}
class ReferenceLineSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineSmootherConfig>()._has_bits_);
  static void set_has_max_constraint_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitudinal_boundary_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lateral_boundary_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_of_total_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_curb_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driving_side(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wide_lane_threshold_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wide_lane_shift_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lateral_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::planning::QpSplineSmootherConfig& qp_spline(const ReferenceLineSmootherConfig* msg);
  static const ::apollo::planning::SpiralSmootherConfig& spiral(const ReferenceLineSmootherConfig* msg);
  static const ::apollo::planning::DiscretePointsSmootherConfig& discrete_points(const ReferenceLineSmootherConfig* msg);
};

const ::apollo::planning::QpSplineSmootherConfig&
ReferenceLineSmootherConfig::_Internal::qp_spline(const ReferenceLineSmootherConfig* msg) {
  return *msg->SmootherConfig_.qp_spline_;
}
const ::apollo::planning::SpiralSmootherConfig&
ReferenceLineSmootherConfig::_Internal::spiral(const ReferenceLineSmootherConfig* msg) {
  return *msg->SmootherConfig_.spiral_;
}
const ::apollo::planning::DiscretePointsSmootherConfig&
ReferenceLineSmootherConfig::_Internal::discrete_points(const ReferenceLineSmootherConfig* msg) {
  return *msg->SmootherConfig_.discrete_points_;
}
void ReferenceLineSmootherConfig::set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (qp_spline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qp_spline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_spline, submessage_arena);
    }
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
}
void ReferenceLineSmootherConfig::set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (spiral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spiral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spiral, submessage_arena);
    }
    set_has_spiral();
    SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.spiral)
}
void ReferenceLineSmootherConfig::set_allocated_discrete_points(::apollo::planning::DiscretePointsSmootherConfig* discrete_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (discrete_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discrete_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete_points, submessage_arena);
    }
    set_has_discrete_points();
    SmootherConfig_.discrete_points_ = discrete_points;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.discrete_points)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReferenceLineSmootherConfig)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_constraint_interval_, &from.max_constraint_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(resolution_));
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::apollo::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::apollo::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case kDiscretePoints: {
      _internal_mutable_discrete_points()->::apollo::planning::DiscretePointsSmootherConfig::MergeFrom(from._internal_discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineSmootherConfig)
}

void ReferenceLineSmootherConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceLineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base);
  max_constraint_interval_ = 5;
  longitudinal_boundary_bound_ = 1;
  lateral_boundary_bound_ = 0.1;
  curb_shift_ = 0.2;
  num_of_total_points_ = 500u;
  driving_side_ = 2;
  wide_lane_threshold_factor_ = 2;
  wide_lane_shift_ratio_ = 0.25;
  lateral_buffer_ = 0.2;
  resolution_ = 0.02;
  clear_has_SmootherConfig();
}

ReferenceLineSmootherConfig::~ReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineSmootherConfig)
  SharedDtor();
}

void ReferenceLineSmootherConfig::SharedDtor() {
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void ReferenceLineSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceLineSmootherConfig& ReferenceLineSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceLineSmootherConfig_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ReferenceLineSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ReferenceLineSmootherConfig)
  switch (SmootherConfig_case()) {
    case kQpSpline: {
      delete SmootherConfig_.qp_spline_;
      break;
    }
    case kSpiral: {
      delete SmootherConfig_.spiral_;
      break;
    }
    case kDiscretePoints: {
      delete SmootherConfig_.discrete_points_;
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void ReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    max_constraint_interval_ = 5;
    longitudinal_boundary_bound_ = 1;
    lateral_boundary_bound_ = 0.1;
    curb_shift_ = 0.2;
    num_of_total_points_ = 500u;
    driving_side_ = 2;
    wide_lane_threshold_factor_ = 2;
    wide_lane_shift_ratio_ = 0.25;
  }
  if (cached_has_bits & 0x00000300u) {
    lateral_buffer_ = 0.2;
    resolution_ = 0.02;
  }
  clear_SmootherConfig();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReferenceLineSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double max_constraint_interval = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_constraint_interval(&has_bits);
          max_constraint_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitudinal_boundary_bound = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitudinal_boundary_bound(&has_bits);
          longitudinal_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_boundary_bound = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lateral_boundary_bound(&has_bits);
          lateral_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_of_total_points = 4 [default = 500];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_of_total_points(&has_bits);
          num_of_total_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double curb_shift = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_curb_shift(&has_bits);
          curb_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide_IsValid(val))) {
            _internal_set_driving_side(static_cast<::apollo::planning::ReferenceLineSmootherConfig_DrivingSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wide_lane_threshold_factor = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_wide_lane_threshold_factor(&has_bits);
          wide_lane_threshold_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wide_lane_shift_ratio = 8 [default = 0.25];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_wide_lane_shift_ratio(&has_bits);
          wide_lane_shift_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_buffer = 9 [default = 0.2];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_lateral_buffer(&has_bits);
          lateral_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double resolution = 10 [default = 0.02];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_resolution(&has_bits);
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_spline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_spiral(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DiscretePointsSmootherConfig discrete_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceLineSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_constraint_interval = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_constraint_interval(), target);
  }

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitudinal_boundary_bound(), target);
  }

  // optional double lateral_boundary_bound = 3 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lateral_boundary_bound(), target);
  }

  // optional uint32 num_of_total_points = 4 [default = 500];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_of_total_points(), target);
  }

  // optional double curb_shift = 5 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_curb_shift(), target);
  }

  // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_driving_side(), target);
  }

  // optional double wide_lane_threshold_factor = 7 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_wide_lane_threshold_factor(), target);
  }

  // optional double wide_lane_shift_ratio = 8 [default = 0.25];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_wide_lane_shift_ratio(), target);
  }

  // optional double lateral_buffer = 9 [default = 0.2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_lateral_buffer(), target);
  }

  // optional double resolution = 10 [default = 0.02];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_resolution(), target);
  }

  switch (SmootherConfig_case()) {
    case kQpSpline: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::qp_spline(this), target, stream);
      break;
    }
    case kSpiral: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::spiral(this), target, stream);
      break;
    }
    case kDiscretePoints: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::discrete_points(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineSmootherConfig)
  return target;
}

size_t ReferenceLineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_constraint_interval = 1 [default = 5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_boundary_bound = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lateral_boundary_bound = 3 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double curb_shift = 5 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_of_total_points = 4 [default = 500];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_of_total_points());
    }

    // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_side());
    }

    // optional double wide_lane_threshold_factor = 7 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double wide_lane_shift_ratio = 8 [default = 0.25];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double lateral_buffer = 9 [default = 0.2];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double resolution = 10 [default = 0.02];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  switch (SmootherConfig_case()) {
    // optional .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
    case kQpSpline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.qp_spline_);
      break;
    }
    // optional .apollo.planning.SpiralSmootherConfig spiral = 21;
    case kSpiral: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.spiral_);
      break;
    }
    // optional .apollo.planning.DiscretePointsSmootherConfig discrete_points = 22;
    case kDiscretePoints: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.discrete_points_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceLineSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReferenceLineSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReferenceLineSmootherConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineSmootherConfig::MergeFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_constraint_interval_ = from.max_constraint_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitudinal_boundary_bound_ = from.longitudinal_boundary_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      lateral_boundary_bound_ = from.lateral_boundary_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      curb_shift_ = from.curb_shift_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_of_total_points_ = from.num_of_total_points_;
    }
    if (cached_has_bits & 0x00000020u) {
      driving_side_ = from.driving_side_;
    }
    if (cached_has_bits & 0x00000040u) {
      wide_lane_threshold_factor_ = from.wide_lane_threshold_factor_;
    }
    if (cached_has_bits & 0x00000080u) {
      wide_lane_shift_ratio_ = from.wide_lane_shift_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      lateral_buffer_ = from.lateral_buffer_;
    }
    if (cached_has_bits & 0x00000200u) {
      resolution_ = from.resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::apollo::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::apollo::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case kDiscretePoints: {
      _internal_mutable_discrete_points()->::apollo::planning::DiscretePointsSmootherConfig::MergeFrom(from._internal_discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
}

void ReferenceLineSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineSmootherConfig::CopyFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineSmootherConfig::IsInitialized() const {
  return true;
}

void ReferenceLineSmootherConfig::InternalSwap(ReferenceLineSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_constraint_interval_, other->max_constraint_interval_);
  swap(longitudinal_boundary_bound_, other->longitudinal_boundary_bound_);
  swap(lateral_boundary_bound_, other->lateral_boundary_bound_);
  swap(curb_shift_, other->curb_shift_);
  swap(num_of_total_points_, other->num_of_total_points_);
  swap(driving_side_, other->driving_side_);
  swap(wide_lane_threshold_factor_, other->wide_lane_threshold_factor_);
  swap(wide_lane_shift_ratio_, other->wide_lane_shift_ratio_);
  swap(lateral_buffer_, other->lateral_buffer_);
  swap(resolution_, other->resolution_);
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::QpSplineSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::QpSplineSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::QpSplineSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SpiralSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::SpiralSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SpiralSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DiscretePointsSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::DiscretePointsSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DiscretePointsSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReferenceLineSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::ReferenceLineSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReferenceLineSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
