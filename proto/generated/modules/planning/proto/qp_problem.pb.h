// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_problem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto;
namespace apollo {
namespace planning {
class QPMatrix;
class QPMatrixDefaultTypeInternal;
extern QPMatrixDefaultTypeInternal _QPMatrix_default_instance_;
class QuadraticProgrammingProblem;
class QuadraticProgrammingProblemDefaultTypeInternal;
extern QuadraticProgrammingProblemDefaultTypeInternal _QuadraticProgrammingProblem_default_instance_;
class QuadraticProgrammingProblemSet;
class QuadraticProgrammingProblemSetDefaultTypeInternal;
extern QuadraticProgrammingProblemSetDefaultTypeInternal _QuadraticProgrammingProblemSet_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::QPMatrix* Arena::CreateMaybeMessage<::apollo::planning::QPMatrix>(Arena*);
template<> ::apollo::planning::QuadraticProgrammingProblem* Arena::CreateMaybeMessage<::apollo::planning::QuadraticProgrammingProblem>(Arena*);
template<> ::apollo::planning::QuadraticProgrammingProblemSet* Arena::CreateMaybeMessage<::apollo::planning::QuadraticProgrammingProblemSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class QuadraticProgrammingProblem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QuadraticProgrammingProblem) */ {
 public:
  QuadraticProgrammingProblem();
  virtual ~QuadraticProgrammingProblem();

  QuadraticProgrammingProblem(const QuadraticProgrammingProblem& from);
  QuadraticProgrammingProblem(QuadraticProgrammingProblem&& from) noexcept
    : QuadraticProgrammingProblem() {
    *this = ::std::move(from);
  }

  inline QuadraticProgrammingProblem& operator=(const QuadraticProgrammingProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuadraticProgrammingProblem& operator=(QuadraticProgrammingProblem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuadraticProgrammingProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuadraticProgrammingProblem* internal_default_instance() {
    return reinterpret_cast<const QuadraticProgrammingProblem*>(
               &_QuadraticProgrammingProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuadraticProgrammingProblem& a, QuadraticProgrammingProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(QuadraticProgrammingProblem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuadraticProgrammingProblem* New() const final {
    return CreateMaybeMessage<QuadraticProgrammingProblem>(nullptr);
  }

  QuadraticProgrammingProblem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuadraticProgrammingProblem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuadraticProgrammingProblem& from);
  void MergeFrom(const QuadraticProgrammingProblem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuadraticProgrammingProblem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QuadraticProgrammingProblem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiasFieldNumber = 3,
    kEqualityValueFieldNumber = 5,
    kInequalityValueFieldNumber = 7,
    kInputMarkerFieldNumber = 8,
    kOptimalParamFieldNumber = 9,
    kQuadraticMatrixFieldNumber = 2,
    kEqualityMatrixFieldNumber = 4,
    kInequalityMatrixFieldNumber = 6,
    kParamSizeFieldNumber = 1,
  };
  // repeated double bias = 3;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  private:
  double _internal_bias(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bias() const;
  void _internal_add_bias(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bias();
  public:
  double bias(int index) const;
  void set_bias(int index, double value);
  void add_bias(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bias();

  // repeated double equality_value = 5;
  int equality_value_size() const;
  private:
  int _internal_equality_value_size() const;
  public:
  void clear_equality_value();
  private:
  double _internal_equality_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_equality_value() const;
  void _internal_add_equality_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_equality_value();
  public:
  double equality_value(int index) const;
  void set_equality_value(int index, double value);
  void add_equality_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      equality_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_equality_value();

  // repeated double inequality_value = 7;
  int inequality_value_size() const;
  private:
  int _internal_inequality_value_size() const;
  public:
  void clear_inequality_value();
  private:
  double _internal_inequality_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_inequality_value() const;
  void _internal_add_inequality_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_inequality_value();
  public:
  double inequality_value(int index) const;
  void set_inequality_value(int index, double value);
  void add_inequality_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      inequality_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_inequality_value();

  // repeated double input_marker = 8;
  int input_marker_size() const;
  private:
  int _internal_input_marker_size() const;
  public:
  void clear_input_marker();
  private:
  double _internal_input_marker(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_input_marker() const;
  void _internal_add_input_marker(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_input_marker();
  public:
  double input_marker(int index) const;
  void set_input_marker(int index, double value);
  void add_input_marker(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      input_marker() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_input_marker();

  // repeated double optimal_param = 9;
  int optimal_param_size() const;
  private:
  int _internal_optimal_param_size() const;
  public:
  void clear_optimal_param();
  private:
  double _internal_optimal_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_optimal_param() const;
  void _internal_add_optimal_param(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_optimal_param();
  public:
  double optimal_param(int index) const;
  void set_optimal_param(int index, double value);
  void add_optimal_param(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      optimal_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_optimal_param();

  // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
  bool has_quadratic_matrix() const;
  private:
  bool _internal_has_quadratic_matrix() const;
  public:
  void clear_quadratic_matrix();
  const ::apollo::planning::QPMatrix& quadratic_matrix() const;
  ::apollo::planning::QPMatrix* release_quadratic_matrix();
  ::apollo::planning::QPMatrix* mutable_quadratic_matrix();
  void set_allocated_quadratic_matrix(::apollo::planning::QPMatrix* quadratic_matrix);
  private:
  const ::apollo::planning::QPMatrix& _internal_quadratic_matrix() const;
  ::apollo::planning::QPMatrix* _internal_mutable_quadratic_matrix();
  public:

  // optional .apollo.planning.QPMatrix equality_matrix = 4;
  bool has_equality_matrix() const;
  private:
  bool _internal_has_equality_matrix() const;
  public:
  void clear_equality_matrix();
  const ::apollo::planning::QPMatrix& equality_matrix() const;
  ::apollo::planning::QPMatrix* release_equality_matrix();
  ::apollo::planning::QPMatrix* mutable_equality_matrix();
  void set_allocated_equality_matrix(::apollo::planning::QPMatrix* equality_matrix);
  private:
  const ::apollo::planning::QPMatrix& _internal_equality_matrix() const;
  ::apollo::planning::QPMatrix* _internal_mutable_equality_matrix();
  public:

  // optional .apollo.planning.QPMatrix inequality_matrix = 6;
  bool has_inequality_matrix() const;
  private:
  bool _internal_has_inequality_matrix() const;
  public:
  void clear_inequality_matrix();
  const ::apollo::planning::QPMatrix& inequality_matrix() const;
  ::apollo::planning::QPMatrix* release_inequality_matrix();
  ::apollo::planning::QPMatrix* mutable_inequality_matrix();
  void set_allocated_inequality_matrix(::apollo::planning::QPMatrix* inequality_matrix);
  private:
  const ::apollo::planning::QPMatrix& _internal_inequality_matrix() const;
  ::apollo::planning::QPMatrix* _internal_mutable_inequality_matrix();
  public:

  // optional int32 param_size = 1;
  bool has_param_size() const;
  private:
  bool _internal_has_param_size() const;
  public:
  void clear_param_size();
  ::PROTOBUF_NAMESPACE_ID::int32 param_size() const;
  void set_param_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param_size() const;
  void _internal_set_param_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QuadraticProgrammingProblem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > equality_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > inequality_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > input_marker_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > optimal_param_;
  ::apollo::planning::QPMatrix* quadratic_matrix_;
  ::apollo::planning::QPMatrix* equality_matrix_;
  ::apollo::planning::QPMatrix* inequality_matrix_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_size_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class QPMatrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QPMatrix) */ {
 public:
  QPMatrix();
  virtual ~QPMatrix();

  QPMatrix(const QPMatrix& from);
  QPMatrix(QPMatrix&& from) noexcept
    : QPMatrix() {
    *this = ::std::move(from);
  }

  inline QPMatrix& operator=(const QPMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline QPMatrix& operator=(QPMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QPMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QPMatrix* internal_default_instance() {
    return reinterpret_cast<const QPMatrix*>(
               &_QPMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QPMatrix& a, QPMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(QPMatrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QPMatrix* New() const final {
    return CreateMaybeMessage<QPMatrix>(nullptr);
  }

  QPMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QPMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QPMatrix& from);
  void MergeFrom(const QPMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QPMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QPMatrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 3,
    kRowSizeFieldNumber = 1,
    kColSizeFieldNumber = 2,
  };
  // repeated double element = 3;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  private:
  double _internal_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_element() const;
  void _internal_add_element(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_element();
  public:
  double element(int index) const;
  void set_element(int index, double value);
  void add_element(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_element();

  // optional int32 row_size = 1;
  bool has_row_size() const;
  private:
  bool _internal_has_row_size() const;
  public:
  void clear_row_size();
  ::PROTOBUF_NAMESPACE_ID::int32 row_size() const;
  void set_row_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_size() const;
  void _internal_set_row_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 col_size = 2;
  bool has_col_size() const;
  private:
  bool _internal_has_col_size() const;
  public:
  void clear_col_size();
  ::PROTOBUF_NAMESPACE_ID::int32 col_size() const;
  void set_col_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col_size() const;
  void _internal_set_col_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QPMatrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > element_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_size_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class QuadraticProgrammingProblemSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QuadraticProgrammingProblemSet) */ {
 public:
  QuadraticProgrammingProblemSet();
  virtual ~QuadraticProgrammingProblemSet();

  QuadraticProgrammingProblemSet(const QuadraticProgrammingProblemSet& from);
  QuadraticProgrammingProblemSet(QuadraticProgrammingProblemSet&& from) noexcept
    : QuadraticProgrammingProblemSet() {
    *this = ::std::move(from);
  }

  inline QuadraticProgrammingProblemSet& operator=(const QuadraticProgrammingProblemSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuadraticProgrammingProblemSet& operator=(QuadraticProgrammingProblemSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuadraticProgrammingProblemSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuadraticProgrammingProblemSet* internal_default_instance() {
    return reinterpret_cast<const QuadraticProgrammingProblemSet*>(
               &_QuadraticProgrammingProblemSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuadraticProgrammingProblemSet& a, QuadraticProgrammingProblemSet& b) {
    a.Swap(&b);
  }
  inline void Swap(QuadraticProgrammingProblemSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuadraticProgrammingProblemSet* New() const final {
    return CreateMaybeMessage<QuadraticProgrammingProblemSet>(nullptr);
  }

  QuadraticProgrammingProblemSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuadraticProgrammingProblemSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuadraticProgrammingProblemSet& from);
  void MergeFrom(const QuadraticProgrammingProblemSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuadraticProgrammingProblemSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QuadraticProgrammingProblemSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProblemFieldNumber = 1,
  };
  // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
  int problem_size() const;
  private:
  int _internal_problem_size() const;
  public:
  void clear_problem();
  ::apollo::planning::QuadraticProgrammingProblem* mutable_problem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >*
      mutable_problem();
  private:
  const ::apollo::planning::QuadraticProgrammingProblem& _internal_problem(int index) const;
  ::apollo::planning::QuadraticProgrammingProblem* _internal_add_problem();
  public:
  const ::apollo::planning::QuadraticProgrammingProblem& problem(int index) const;
  ::apollo::planning::QuadraticProgrammingProblem* add_problem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >&
      problem() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.QuadraticProgrammingProblemSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem > problem_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuadraticProgrammingProblem

// optional int32 param_size = 1;
inline bool QuadraticProgrammingProblem::_internal_has_param_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QuadraticProgrammingProblem::has_param_size() const {
  return _internal_has_param_size();
}
inline void QuadraticProgrammingProblem::clear_param_size() {
  param_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuadraticProgrammingProblem::_internal_param_size() const {
  return param_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuadraticProgrammingProblem::param_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.param_size)
  return _internal_param_size();
}
inline void QuadraticProgrammingProblem::_internal_set_param_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  param_size_ = value;
}
inline void QuadraticProgrammingProblem::set_param_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param_size(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.param_size)
}

// optional .apollo.planning.QPMatrix quadratic_matrix = 2;
inline bool QuadraticProgrammingProblem::_internal_has_quadratic_matrix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || quadratic_matrix_ != nullptr);
  return value;
}
inline bool QuadraticProgrammingProblem::has_quadratic_matrix() const {
  return _internal_has_quadratic_matrix();
}
inline void QuadraticProgrammingProblem::clear_quadratic_matrix() {
  if (quadratic_matrix_ != nullptr) quadratic_matrix_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::_internal_quadratic_matrix() const {
  const ::apollo::planning::QPMatrix* p = quadratic_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::QPMatrix*>(
      &::apollo::planning::_QPMatrix_default_instance_);
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::quadratic_matrix() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
  return _internal_quadratic_matrix();
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::release_quadratic_matrix() {
  // @@protoc_insertion_point(field_release:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::QPMatrix* temp = quadratic_matrix_;
  quadratic_matrix_ = nullptr;
  return temp;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::_internal_mutable_quadratic_matrix() {
  _has_bits_[0] |= 0x00000001u;
  if (quadratic_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QPMatrix>(GetArenaNoVirtual());
    quadratic_matrix_ = p;
  }
  return quadratic_matrix_;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::mutable_quadratic_matrix() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
  return _internal_mutable_quadratic_matrix();
}
inline void QuadraticProgrammingProblem::set_allocated_quadratic_matrix(::apollo::planning::QPMatrix* quadratic_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quadratic_matrix_;
  }
  if (quadratic_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quadratic_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quadratic_matrix, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  quadratic_matrix_ = quadratic_matrix;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
}

// repeated double bias = 3;
inline int QuadraticProgrammingProblem::_internal_bias_size() const {
  return bias_.size();
}
inline int QuadraticProgrammingProblem::bias_size() const {
  return _internal_bias_size();
}
inline void QuadraticProgrammingProblem::clear_bias() {
  bias_.Clear();
}
inline double QuadraticProgrammingProblem::_internal_bias(int index) const {
  return bias_.Get(index);
}
inline double QuadraticProgrammingProblem::bias(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.bias)
  return _internal_bias(index);
}
inline void QuadraticProgrammingProblem::set_bias(int index, double value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.bias)
}
inline void QuadraticProgrammingProblem::_internal_add_bias(double value) {
  bias_.Add(value);
}
inline void QuadraticProgrammingProblem::add_bias(double value) {
  _internal_add_bias(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.bias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::_internal_bias() const {
  return bias_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::bias() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.bias)
  return _internal_bias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::_internal_mutable_bias() {
  return &bias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.bias)
  return _internal_mutable_bias();
}

// optional .apollo.planning.QPMatrix equality_matrix = 4;
inline bool QuadraticProgrammingProblem::_internal_has_equality_matrix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || equality_matrix_ != nullptr);
  return value;
}
inline bool QuadraticProgrammingProblem::has_equality_matrix() const {
  return _internal_has_equality_matrix();
}
inline void QuadraticProgrammingProblem::clear_equality_matrix() {
  if (equality_matrix_ != nullptr) equality_matrix_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::_internal_equality_matrix() const {
  const ::apollo::planning::QPMatrix* p = equality_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::QPMatrix*>(
      &::apollo::planning::_QPMatrix_default_instance_);
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::equality_matrix() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
  return _internal_equality_matrix();
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::release_equality_matrix() {
  // @@protoc_insertion_point(field_release:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::QPMatrix* temp = equality_matrix_;
  equality_matrix_ = nullptr;
  return temp;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::_internal_mutable_equality_matrix() {
  _has_bits_[0] |= 0x00000002u;
  if (equality_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QPMatrix>(GetArenaNoVirtual());
    equality_matrix_ = p;
  }
  return equality_matrix_;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::mutable_equality_matrix() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
  return _internal_mutable_equality_matrix();
}
inline void QuadraticProgrammingProblem::set_allocated_equality_matrix(::apollo::planning::QPMatrix* equality_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete equality_matrix_;
  }
  if (equality_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      equality_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equality_matrix, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  equality_matrix_ = equality_matrix;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
}

// repeated double equality_value = 5;
inline int QuadraticProgrammingProblem::_internal_equality_value_size() const {
  return equality_value_.size();
}
inline int QuadraticProgrammingProblem::equality_value_size() const {
  return _internal_equality_value_size();
}
inline void QuadraticProgrammingProblem::clear_equality_value() {
  equality_value_.Clear();
}
inline double QuadraticProgrammingProblem::_internal_equality_value(int index) const {
  return equality_value_.Get(index);
}
inline double QuadraticProgrammingProblem::equality_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.equality_value)
  return _internal_equality_value(index);
}
inline void QuadraticProgrammingProblem::set_equality_value(int index, double value) {
  equality_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.equality_value)
}
inline void QuadraticProgrammingProblem::_internal_add_equality_value(double value) {
  equality_value_.Add(value);
}
inline void QuadraticProgrammingProblem::add_equality_value(double value) {
  _internal_add_equality_value(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.equality_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::_internal_equality_value() const {
  return equality_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::equality_value() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.equality_value)
  return _internal_equality_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::_internal_mutable_equality_value() {
  return &equality_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_equality_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.equality_value)
  return _internal_mutable_equality_value();
}

// optional .apollo.planning.QPMatrix inequality_matrix = 6;
inline bool QuadraticProgrammingProblem::_internal_has_inequality_matrix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inequality_matrix_ != nullptr);
  return value;
}
inline bool QuadraticProgrammingProblem::has_inequality_matrix() const {
  return _internal_has_inequality_matrix();
}
inline void QuadraticProgrammingProblem::clear_inequality_matrix() {
  if (inequality_matrix_ != nullptr) inequality_matrix_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::_internal_inequality_matrix() const {
  const ::apollo::planning::QPMatrix* p = inequality_matrix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::QPMatrix*>(
      &::apollo::planning::_QPMatrix_default_instance_);
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::inequality_matrix() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
  return _internal_inequality_matrix();
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::release_inequality_matrix() {
  // @@protoc_insertion_point(field_release:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::QPMatrix* temp = inequality_matrix_;
  inequality_matrix_ = nullptr;
  return temp;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::_internal_mutable_inequality_matrix() {
  _has_bits_[0] |= 0x00000004u;
  if (inequality_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QPMatrix>(GetArenaNoVirtual());
    inequality_matrix_ = p;
  }
  return inequality_matrix_;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::mutable_inequality_matrix() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
  return _internal_mutable_inequality_matrix();
}
inline void QuadraticProgrammingProblem::set_allocated_inequality_matrix(::apollo::planning::QPMatrix* inequality_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inequality_matrix_;
  }
  if (inequality_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inequality_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inequality_matrix, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inequality_matrix_ = inequality_matrix;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
}

// repeated double inequality_value = 7;
inline int QuadraticProgrammingProblem::_internal_inequality_value_size() const {
  return inequality_value_.size();
}
inline int QuadraticProgrammingProblem::inequality_value_size() const {
  return _internal_inequality_value_size();
}
inline void QuadraticProgrammingProblem::clear_inequality_value() {
  inequality_value_.Clear();
}
inline double QuadraticProgrammingProblem::_internal_inequality_value(int index) const {
  return inequality_value_.Get(index);
}
inline double QuadraticProgrammingProblem::inequality_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.inequality_value)
  return _internal_inequality_value(index);
}
inline void QuadraticProgrammingProblem::set_inequality_value(int index, double value) {
  inequality_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.inequality_value)
}
inline void QuadraticProgrammingProblem::_internal_add_inequality_value(double value) {
  inequality_value_.Add(value);
}
inline void QuadraticProgrammingProblem::add_inequality_value(double value) {
  _internal_add_inequality_value(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.inequality_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::_internal_inequality_value() const {
  return inequality_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::inequality_value() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.inequality_value)
  return _internal_inequality_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::_internal_mutable_inequality_value() {
  return &inequality_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_inequality_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.inequality_value)
  return _internal_mutable_inequality_value();
}

// repeated double input_marker = 8;
inline int QuadraticProgrammingProblem::_internal_input_marker_size() const {
  return input_marker_.size();
}
inline int QuadraticProgrammingProblem::input_marker_size() const {
  return _internal_input_marker_size();
}
inline void QuadraticProgrammingProblem::clear_input_marker() {
  input_marker_.Clear();
}
inline double QuadraticProgrammingProblem::_internal_input_marker(int index) const {
  return input_marker_.Get(index);
}
inline double QuadraticProgrammingProblem::input_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.input_marker)
  return _internal_input_marker(index);
}
inline void QuadraticProgrammingProblem::set_input_marker(int index, double value) {
  input_marker_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.input_marker)
}
inline void QuadraticProgrammingProblem::_internal_add_input_marker(double value) {
  input_marker_.Add(value);
}
inline void QuadraticProgrammingProblem::add_input_marker(double value) {
  _internal_add_input_marker(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.input_marker)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::_internal_input_marker() const {
  return input_marker_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::input_marker() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.input_marker)
  return _internal_input_marker();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::_internal_mutable_input_marker() {
  return &input_marker_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_input_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.input_marker)
  return _internal_mutable_input_marker();
}

// repeated double optimal_param = 9;
inline int QuadraticProgrammingProblem::_internal_optimal_param_size() const {
  return optimal_param_.size();
}
inline int QuadraticProgrammingProblem::optimal_param_size() const {
  return _internal_optimal_param_size();
}
inline void QuadraticProgrammingProblem::clear_optimal_param() {
  optimal_param_.Clear();
}
inline double QuadraticProgrammingProblem::_internal_optimal_param(int index) const {
  return optimal_param_.Get(index);
}
inline double QuadraticProgrammingProblem::optimal_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.optimal_param)
  return _internal_optimal_param(index);
}
inline void QuadraticProgrammingProblem::set_optimal_param(int index, double value) {
  optimal_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.optimal_param)
}
inline void QuadraticProgrammingProblem::_internal_add_optimal_param(double value) {
  optimal_param_.Add(value);
}
inline void QuadraticProgrammingProblem::add_optimal_param(double value) {
  _internal_add_optimal_param(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.optimal_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::_internal_optimal_param() const {
  return optimal_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QuadraticProgrammingProblem::optimal_param() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.optimal_param)
  return _internal_optimal_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::_internal_mutable_optimal_param() {
  return &optimal_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_optimal_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.optimal_param)
  return _internal_mutable_optimal_param();
}

// -------------------------------------------------------------------

// QPMatrix

// optional int32 row_size = 1;
inline bool QPMatrix::_internal_has_row_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QPMatrix::has_row_size() const {
  return _internal_has_row_size();
}
inline void QPMatrix::clear_row_size() {
  row_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QPMatrix::_internal_row_size() const {
  return row_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QPMatrix::row_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QPMatrix.row_size)
  return _internal_row_size();
}
inline void QPMatrix::_internal_set_row_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  row_size_ = value;
}
inline void QPMatrix::set_row_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_size(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QPMatrix.row_size)
}

// optional int32 col_size = 2;
inline bool QPMatrix::_internal_has_col_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QPMatrix::has_col_size() const {
  return _internal_has_col_size();
}
inline void QPMatrix::clear_col_size() {
  col_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QPMatrix::_internal_col_size() const {
  return col_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QPMatrix::col_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QPMatrix.col_size)
  return _internal_col_size();
}
inline void QPMatrix::_internal_set_col_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  col_size_ = value;
}
inline void QPMatrix::set_col_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col_size(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QPMatrix.col_size)
}

// repeated double element = 3;
inline int QPMatrix::_internal_element_size() const {
  return element_.size();
}
inline int QPMatrix::element_size() const {
  return _internal_element_size();
}
inline void QPMatrix::clear_element() {
  element_.Clear();
}
inline double QPMatrix::_internal_element(int index) const {
  return element_.Get(index);
}
inline double QPMatrix::element(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QPMatrix.element)
  return _internal_element(index);
}
inline void QPMatrix::set_element(int index, double value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QPMatrix.element)
}
inline void QPMatrix::_internal_add_element(double value) {
  element_.Add(value);
}
inline void QPMatrix::add_element(double value) {
  _internal_add_element(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QPMatrix.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QPMatrix::_internal_element() const {
  return element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QPMatrix::element() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QPMatrix.element)
  return _internal_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QPMatrix::_internal_mutable_element() {
  return &element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QPMatrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QPMatrix.element)
  return _internal_mutable_element();
}

// -------------------------------------------------------------------

// QuadraticProgrammingProblemSet

// repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
inline int QuadraticProgrammingProblemSet::_internal_problem_size() const {
  return problem_.size();
}
inline int QuadraticProgrammingProblemSet::problem_size() const {
  return _internal_problem_size();
}
inline void QuadraticProgrammingProblemSet::clear_problem() {
  problem_.Clear();
}
inline ::apollo::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::mutable_problem(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >*
QuadraticProgrammingProblemSet::mutable_problem() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return &problem_;
}
inline const ::apollo::planning::QuadraticProgrammingProblem& QuadraticProgrammingProblemSet::_internal_problem(int index) const {
  return problem_.Get(index);
}
inline const ::apollo::planning::QuadraticProgrammingProblem& QuadraticProgrammingProblemSet::problem(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return _internal_problem(index);
}
inline ::apollo::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::_internal_add_problem() {
  return problem_.Add();
}
inline ::apollo::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::add_problem() {
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return _internal_add_problem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >&
QuadraticProgrammingProblemSet::problem() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return problem_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto
