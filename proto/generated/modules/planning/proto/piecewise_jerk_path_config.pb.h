// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/piecewise_jerk_path_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto;
namespace apollo {
namespace planning {
class PiecewiseJerkPathConfig;
class PiecewiseJerkPathConfigDefaultTypeInternal;
extern PiecewiseJerkPathConfigDefaultTypeInternal _PiecewiseJerkPathConfig_default_instance_;
class PiecewiseJerkPathWeights;
class PiecewiseJerkPathWeightsDefaultTypeInternal;
extern PiecewiseJerkPathWeightsDefaultTypeInternal _PiecewiseJerkPathWeights_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::PiecewiseJerkPathConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkPathWeights* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class PiecewiseJerkPathConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkPathConfig) */ {
 public:
  PiecewiseJerkPathConfig();
  virtual ~PiecewiseJerkPathConfig();

  PiecewiseJerkPathConfig(const PiecewiseJerkPathConfig& from);
  PiecewiseJerkPathConfig(PiecewiseJerkPathConfig&& from) noexcept
    : PiecewiseJerkPathConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkPathConfig& operator=(const PiecewiseJerkPathConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkPathConfig& operator=(PiecewiseJerkPathConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiecewiseJerkPathConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseJerkPathConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathConfig*>(
               &_PiecewiseJerkPathConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PiecewiseJerkPathConfig& a, PiecewiseJerkPathConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkPathConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseJerkPathConfig* New() const final {
    return CreateMaybeMessage<PiecewiseJerkPathConfig>(nullptr);
  }

  PiecewiseJerkPathConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseJerkPathConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiecewiseJerkPathConfig& from);
  void MergeFrom(const PiecewiseJerkPathConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkPathConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PiecewiseJerkPathConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultPathConfigFieldNumber = 1,
    kLaneChangePathConfigFieldNumber = 2,
  };
  // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
  bool has_default_path_config() const;
  private:
  bool _internal_has_default_path_config() const;
  public:
  void clear_default_path_config();
  const ::apollo::planning::PiecewiseJerkPathWeights& default_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* release_default_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* mutable_default_path_config();
  void set_allocated_default_path_config(::apollo::planning::PiecewiseJerkPathWeights* default_path_config);
  private:
  const ::apollo::planning::PiecewiseJerkPathWeights& _internal_default_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* _internal_mutable_default_path_config();
  public:

  // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  bool has_lane_change_path_config() const;
  private:
  bool _internal_has_lane_change_path_config() const;
  public:
  void clear_lane_change_path_config();
  const ::apollo::planning::PiecewiseJerkPathWeights& lane_change_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* release_lane_change_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* mutable_lane_change_path_config();
  void set_allocated_lane_change_path_config(::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config);
  private:
  const ::apollo::planning::PiecewiseJerkPathWeights& _internal_lane_change_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* _internal_mutable_lane_change_path_config();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkPathConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::PiecewiseJerkPathWeights* default_path_config_;
  ::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseJerkPathWeights :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkPathWeights) */ {
 public:
  PiecewiseJerkPathWeights();
  virtual ~PiecewiseJerkPathWeights();

  PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from);
  PiecewiseJerkPathWeights(PiecewiseJerkPathWeights&& from) noexcept
    : PiecewiseJerkPathWeights() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkPathWeights& operator=(const PiecewiseJerkPathWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkPathWeights& operator=(PiecewiseJerkPathWeights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiecewiseJerkPathWeights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseJerkPathWeights* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathWeights*>(
               &_PiecewiseJerkPathWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PiecewiseJerkPathWeights& a, PiecewiseJerkPathWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkPathWeights* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseJerkPathWeights* New() const final {
    return CreateMaybeMessage<PiecewiseJerkPathWeights>(nullptr);
  }

  PiecewiseJerkPathWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseJerkPathWeights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiecewiseJerkPathWeights& from);
  void MergeFrom(const PiecewiseJerkPathWeights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkPathWeights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PiecewiseJerkPathWeights";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLWeightFieldNumber = 1,
    kDlWeightFieldNumber = 2,
    kDdlWeightFieldNumber = 3,
    kDddlWeightFieldNumber = 4,
  };
  // optional double l_weight = 1 [default = 1];
  bool has_l_weight() const;
  private:
  bool _internal_has_l_weight() const;
  public:
  void clear_l_weight();
  double l_weight() const;
  void set_l_weight(double value);
  private:
  double _internal_l_weight() const;
  void _internal_set_l_weight(double value);
  public:

  // optional double dl_weight = 2 [default = 100];
  bool has_dl_weight() const;
  private:
  bool _internal_has_dl_weight() const;
  public:
  void clear_dl_weight();
  double dl_weight() const;
  void set_dl_weight(double value);
  private:
  double _internal_dl_weight() const;
  void _internal_set_dl_weight(double value);
  public:

  // optional double ddl_weight = 3 [default = 1000];
  bool has_ddl_weight() const;
  private:
  bool _internal_has_ddl_weight() const;
  public:
  void clear_ddl_weight();
  double ddl_weight() const;
  void set_ddl_weight(double value);
  private:
  double _internal_ddl_weight() const;
  void _internal_set_ddl_weight(double value);
  public:

  // optional double dddl_weight = 4 [default = 10000];
  bool has_dddl_weight() const;
  private:
  bool _internal_has_dddl_weight() const;
  public:
  void clear_dddl_weight();
  double dddl_weight() const;
  void set_dddl_weight(double value);
  private:
  double _internal_dddl_weight() const;
  void _internal_set_dddl_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkPathWeights)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double l_weight_;
  double dl_weight_;
  double ddl_weight_;
  double dddl_weight_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PiecewiseJerkPathConfig

// optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
inline bool PiecewiseJerkPathConfig::_internal_has_default_path_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || default_path_config_ != nullptr);
  return value;
}
inline bool PiecewiseJerkPathConfig::has_default_path_config() const {
  return _internal_has_default_path_config();
}
inline void PiecewiseJerkPathConfig::clear_default_path_config() {
  if (default_path_config_ != nullptr) default_path_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::_internal_default_path_config() const {
  const ::apollo::planning::PiecewiseJerkPathWeights* p = default_path_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::PiecewiseJerkPathWeights*>(
      &::apollo::planning::_PiecewiseJerkPathWeights_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::default_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathConfig.default_path_config)
  return _internal_default_path_config();
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::release_default_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PiecewiseJerkPathConfig.default_path_config)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PiecewiseJerkPathWeights* temp = default_path_config_;
  default_path_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::_internal_mutable_default_path_config() {
  _has_bits_[0] |= 0x00000001u;
  if (default_path_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(GetArenaNoVirtual());
    default_path_config_ = p;
  }
  return default_path_config_;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::mutable_default_path_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PiecewiseJerkPathConfig.default_path_config)
  return _internal_mutable_default_path_config();
}
inline void PiecewiseJerkPathConfig::set_allocated_default_path_config(::apollo::planning::PiecewiseJerkPathWeights* default_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_path_config_;
  }
  if (default_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_path_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_path_config_ = default_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PiecewiseJerkPathConfig.default_path_config)
}

// optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
inline bool PiecewiseJerkPathConfig::_internal_has_lane_change_path_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lane_change_path_config_ != nullptr);
  return value;
}
inline bool PiecewiseJerkPathConfig::has_lane_change_path_config() const {
  return _internal_has_lane_change_path_config();
}
inline void PiecewiseJerkPathConfig::clear_lane_change_path_config() {
  if (lane_change_path_config_ != nullptr) lane_change_path_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::_internal_lane_change_path_config() const {
  const ::apollo::planning::PiecewiseJerkPathWeights* p = lane_change_path_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::PiecewiseJerkPathWeights*>(
      &::apollo::planning::_PiecewiseJerkPathWeights_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathConfig::lane_change_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  return _internal_lane_change_path_config();
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::release_lane_change_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::PiecewiseJerkPathWeights* temp = lane_change_path_config_;
  lane_change_path_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::_internal_mutable_lane_change_path_config() {
  _has_bits_[0] |= 0x00000002u;
  if (lane_change_path_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(GetArenaNoVirtual());
    lane_change_path_config_ = p;
  }
  return lane_change_path_config_;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathConfig::mutable_lane_change_path_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PiecewiseJerkPathConfig.lane_change_path_config)
  return _internal_mutable_lane_change_path_config();
}
inline void PiecewiseJerkPathConfig::set_allocated_lane_change_path_config(::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_change_path_config_;
  }
  if (lane_change_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change_path_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lane_change_path_config_ = lane_change_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PiecewiseJerkPathConfig.lane_change_path_config)
}

// -------------------------------------------------------------------

// PiecewiseJerkPathWeights

// optional double l_weight = 1 [default = 1];
inline bool PiecewiseJerkPathWeights::_internal_has_l_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_l_weight() const {
  return _internal_has_l_weight();
}
inline void PiecewiseJerkPathWeights::clear_l_weight() {
  l_weight_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PiecewiseJerkPathWeights::_internal_l_weight() const {
  return l_weight_;
}
inline double PiecewiseJerkPathWeights::l_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.l_weight)
  return _internal_l_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_l_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  l_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_l_weight(double value) {
  _internal_set_l_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.l_weight)
}

// optional double dl_weight = 2 [default = 100];
inline bool PiecewiseJerkPathWeights::_internal_has_dl_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_dl_weight() const {
  return _internal_has_dl_weight();
}
inline void PiecewiseJerkPathWeights::clear_dl_weight() {
  dl_weight_ = 100;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PiecewiseJerkPathWeights::_internal_dl_weight() const {
  return dl_weight_;
}
inline double PiecewiseJerkPathWeights::dl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.dl_weight)
  return _internal_dl_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_dl_weight(double value) {
  _has_bits_[0] |= 0x00000002u;
  dl_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_dl_weight(double value) {
  _internal_set_dl_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.dl_weight)
}

// optional double ddl_weight = 3 [default = 1000];
inline bool PiecewiseJerkPathWeights::_internal_has_ddl_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_ddl_weight() const {
  return _internal_has_ddl_weight();
}
inline void PiecewiseJerkPathWeights::clear_ddl_weight() {
  ddl_weight_ = 1000;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PiecewiseJerkPathWeights::_internal_ddl_weight() const {
  return ddl_weight_;
}
inline double PiecewiseJerkPathWeights::ddl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.ddl_weight)
  return _internal_ddl_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_ddl_weight(double value) {
  _has_bits_[0] |= 0x00000004u;
  ddl_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_ddl_weight(double value) {
  _internal_set_ddl_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.ddl_weight)
}

// optional double dddl_weight = 4 [default = 10000];
inline bool PiecewiseJerkPathWeights::_internal_has_dddl_weight() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_dddl_weight() const {
  return _internal_has_dddl_weight();
}
inline void PiecewiseJerkPathWeights::clear_dddl_weight() {
  dddl_weight_ = 10000;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PiecewiseJerkPathWeights::_internal_dddl_weight() const {
  return dddl_weight_;
}
inline double PiecewiseJerkPathWeights::dddl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.dddl_weight)
  return _internal_dddl_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_dddl_weight(double value) {
  _has_bits_[0] |= 0x00000008u;
  dddl_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_dddl_weight(double value) {
  _internal_set_dddl_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.dddl_weight)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fpath_5fconfig_2eproto
