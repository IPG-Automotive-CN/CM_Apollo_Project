// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_status.proto

#include "modules/planning/proto/planning_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightOfWayStatus_JunctionEntry_DoNotUse_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto;
namespace apollo {
namespace planning {
class BareIntersectionStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BareIntersectionStatus> _instance;
} _BareIntersectionStatus_default_instance_;
class ChangeLaneStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeLaneStatus> _instance;
} _ChangeLaneStatus_default_instance_;
class StopTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopTime> _instance;
} _StopTime_default_instance_;
class CrosswalkStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrosswalkStatus> _instance;
} _CrosswalkStatus_default_instance_;
class DestinationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DestinationStatus> _instance;
} _DestinationStatus_default_instance_;
class PedestrianStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PedestrianStatus> _instance;
} _PedestrianStatus_default_instance_;
class PullOverStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullOverStatus> _instance;
} _PullOverStatus_default_instance_;
class ReroutingStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReroutingStatus> _instance;
} _ReroutingStatus_default_instance_;
class RightOfWayStatus_JunctionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightOfWayStatus_JunctionEntry_DoNotUse> _instance;
} _RightOfWayStatus_JunctionEntry_DoNotUse_default_instance_;
class RightOfWayStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightOfWayStatus> _instance;
} _RightOfWayStatus_default_instance_;
class ScenarioStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioStatus> _instance;
} _ScenarioStatus_default_instance_;
class SidePassStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SidePassStatus> _instance;
} _SidePassStatus_default_instance_;
class StopSignStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopSignStatus> _instance;
} _StopSignStatus_default_instance_;
class TrafficLightStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLightStatus> _instance;
} _TrafficLightStatus_default_instance_;
class SidePassStopStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SidePassStopStatus> _instance;
} _SidePassStopStatus_default_instance_;
class PlanningStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStatus> _instance;
} _PlanningStatus_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_BareIntersectionStatus_default_instance_;
    new (ptr) ::apollo::planning::BareIntersectionStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::BareIntersectionStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ChangeLaneStatus_default_instance_;
    new (ptr) ::apollo::planning::ChangeLaneStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ChangeLaneStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CrosswalkStatus_default_instance_;
    new (ptr) ::apollo::planning::CrosswalkStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CrosswalkStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DestinationStatus_default_instance_;
    new (ptr) ::apollo::planning::DestinationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DestinationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PedestrianStatus_default_instance_;
    new (ptr) ::apollo::planning::PedestrianStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PedestrianStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PlanningStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningStatus_default_instance_;
    new (ptr) ::apollo::planning::PlanningStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_PlanningStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_PlanningStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_EngageAdvice_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto.base,
      &scc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
      &scc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PullOverStatus_default_instance_;
    new (ptr) ::apollo::planning::PullOverStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PullOverStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReroutingStatus_default_instance_;
    new (ptr) ::apollo::planning::ReroutingStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReroutingStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RightOfWayStatus_default_instance_;
    new (ptr) ::apollo::planning::RightOfWayStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RightOfWayStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_RightOfWayStatus_JunctionEntry_DoNotUse_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,}};

static void InitDefaultsscc_info_RightOfWayStatus_JunctionEntry_DoNotUse_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RightOfWayStatus_JunctionEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse();
  }
  ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightOfWayStatus_JunctionEntry_DoNotUse_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightOfWayStatus_JunctionEntry_DoNotUse_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioStatus_default_instance_;
    new (ptr) ::apollo::planning::ScenarioStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SidePassStatus_default_instance_;
    new (ptr) ::apollo::planning::SidePassStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SidePassStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SidePassStopStatus_default_instance_;
    new (ptr) ::apollo::planning::SidePassStopStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SidePassStopStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {
      &scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StopSignStatus_default_instance_;
    new (ptr) ::apollo::planning::StopSignStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StopSignStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StopTime_default_instance_;
    new (ptr) ::apollo::planning::StopTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StopTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static void InitDefaultsscc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficLightStatus_default_instance_;
    new (ptr) ::apollo::planning::TrafficLightStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficLightStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, current_pnc_junction_overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BareIntersectionStatus, done_pnc_junction_overlap_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, status_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, path_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, timestamp_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTime, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTime, obstacle_stop_timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, crosswalk_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, stop_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, finished_crosswalk_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationStatus, has_passed_destination_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PedestrianStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PedestrianStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PedestrianStatus, stop_time_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, is_feasible_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, length_front_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, length_back_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, width_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, width_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, idx_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, is_in_pull_over_scenario_),
  5,
  0,
  1,
  2,
  3,
  4,
  8,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, last_rerouting_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, need_rerouting_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, routing_request_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus, junction_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStatus, scenario_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStatus, stage_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, front_blocking_obstacle_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, current_stop_sign_overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, done_stop_sign_overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, wait_for_obstacle_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, current_traffic_light_overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightStatus, done_traffic_light_overlap_id_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStopStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStopStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStopStatus, change_lane_stop_path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStopStatus, check_clear_flag_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, bare_intersection_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, change_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, destination_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, pedestrian_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, pull_over_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, rerouting_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, right_of_way_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, scenario_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, side_pass_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, side_pass_stop_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::planning::BareIntersectionStatus)},
  { 9, 17, sizeof(::apollo::planning::ChangeLaneStatus)},
  { 20, 27, sizeof(::apollo::planning::StopTime)},
  { 29, 37, sizeof(::apollo::planning::CrosswalkStatus)},
  { 40, 46, sizeof(::apollo::planning::DestinationStatus)},
  { 47, 53, sizeof(::apollo::planning::PedestrianStatus)},
  { 54, 68, sizeof(::apollo::planning::PullOverStatus)},
  { 77, 85, sizeof(::apollo::planning::ReroutingStatus)},
  { 88, 95, sizeof(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse)},
  { 97, 103, sizeof(::apollo::planning::RightOfWayStatus)},
  { 104, 111, sizeof(::apollo::planning::ScenarioStatus)},
  { 113, 119, sizeof(::apollo::planning::SidePassStatus)},
  { 120, 128, sizeof(::apollo::planning::StopSignStatus)},
  { 131, 138, sizeof(::apollo::planning::TrafficLightStatus)},
  { 140, 147, sizeof(::apollo::planning::SidePassStopStatus)},
  { 149, 168, sizeof(::apollo::planning::PlanningStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_BareIntersectionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ChangeLaneStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_StopTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CrosswalkStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DestinationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PedestrianStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PullOverStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ReroutingStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RightOfWayStatus_JunctionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_RightOfWayStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ScenarioStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SidePassStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_StopSignStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrafficLightStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SidePassStopStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningStatus_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/planning/proto/planning_status"
  ".proto\022\017apollo.planning\032&modules/common/"
  "proto/drive_state.proto\032#modules/common/"
  "proto/geometry.proto\032$modules/common/pro"
  "to/pnc_point.proto\032,modules/planning/pro"
  "to/planning_config.proto\032#modules/routin"
  "g/proto/routing.proto\"g\n\026BareIntersectio"
  "nStatus\022\'\n\037current_pnc_junction_overlap_"
  "id\030\001 \001(\t\022$\n\034done_pnc_junction_overlap_id"
  "\030\002 \001(\t\"\277\001\n\020ChangeLaneStatus\0228\n\006status\030\001 "
  "\001(\0162(.apollo.planning.ChangeLaneStatus.S"
  "tatus\022\017\n\007path_id\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001("
  "\001\"M\n\006Status\022\022\n\016IN_CHANGE_LANE\020\001\022\026\n\022CHANG"
  "E_LANE_FAILED\020\002\022\027\n\023CHANGE_LANE_SUCCESS\020\003"
  "\"@\n\010StopTime\022\023\n\013obstacle_id\030\001 \001(\t\022\037\n\027obs"
  "tacle_stop_timestamp\030\002 \001(\001\"q\n\017CrosswalkS"
  "tatus\022\024\n\014crosswalk_id\030\001 \001(\t\022,\n\tstop_time"
  "\030\002 \003(\0132\031.apollo.planning.StopTime\022\032\n\022fin"
  "ished_crosswalk\030\003 \003(\t\":\n\021DestinationStat"
  "us\022%\n\026has_passed_destination\030\001 \001(\010:\005fals"
  "e\"@\n\020PedestrianStatus\022,\n\tstop_time\030\001 \003(\013"
  "2\031.apollo.planning.StopTime\"\360\001\n\016PullOver"
  "Status\022\032\n\013is_feasible\030\001 \001(\010:\005false\022)\n\010po"
  "sition\030\002 \001(\0132\027.apollo.common.PointENU\022\r\n"
  "\005theta\030\003 \001(\001\022\024\n\014length_front\030\004 \001(\001\022\023\n\013le"
  "ngth_back\030\005 \001(\001\022\022\n\nwidth_left\030\006 \001(\001\022\023\n\013w"
  "idth_right\030\007 \001(\001\022\013\n\003idx\030\010 \001(\005\022\'\n\030is_in_p"
  "ull_over_scenario\030\t \001(\010:\005false\"\206\001\n\017Rerou"
  "tingStatus\022\033\n\023last_rerouting_time\030\001 \001(\001\022"
  "\035\n\016need_rerouting\030\002 \001(\010:\005false\0227\n\017routin"
  "g_request\030\003 \001(\0132\036.apollo.routing.Routing"
  "Request\"\206\001\n\020RightOfWayStatus\022A\n\010junction"
  "\030\001 \003(\0132/.apollo.planning.RightOfWayStatu"
  "s.JunctionEntry\032/\n\rJunctionEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\"\224\001\n\016ScenarioSta"
  "tus\022C\n\rscenario_type\030\001 \001(\0162,.apollo.plan"
  "ning.ScenarioConfig.ScenarioType\022=\n\nstag"
  "e_type\030\002 \001(\0162).apollo.planning.ScenarioC"
  "onfig.StageType\"4\n\016SidePassStatus\022\"\n\032fro"
  "nt_blocking_obstacle_id\030\001 \001(\t\"w\n\016StopSig"
  "nStatus\022$\n\034current_stop_sign_overlap_id\030"
  "\001 \001(\t\022!\n\031done_stop_sign_overlap_id\030\002 \001(\t"
  "\022\034\n\024wait_for_obstacle_id\030\003 \003(\t\"e\n\022Traffi"
  "cLightStatus\022(\n current_traffic_light_ov"
  "erlap_id\030\001 \003(\t\022%\n\035done_traffic_light_ove"
  "rlap_id\030\002 \003(\t\"m\n\022SidePassStopStatus\022=\n\033c"
  "hange_lane_stop_path_point\030\001 \001(\0132\030.apoll"
  "o.common.PathPoint\022\030\n\020check_clear_flag\030\002"
  " \001(\010\"\233\006\n\016PlanningStatus\022B\n\021bare_intersec"
  "tion\030\001 \001(\0132\'.apollo.planning.BareInterse"
  "ctionStatus\0226\n\013change_lane\030\002 \001(\0132!.apoll"
  "o.planning.ChangeLaneStatus\0223\n\tcrosswalk"
  "\030\003 \001(\0132 .apollo.planning.CrosswalkStatus"
  "\0227\n\013destination\030\004 \001(\0132\".apollo.planning."
  "DestinationStatus\0222\n\rengage_advice\030\005 \001(\013"
  "2\033.apollo.common.EngageAdvice\0225\n\npedestr"
  "ian\030\006 \001(\0132!.apollo.planning.PedestrianSt"
  "atus\0222\n\tpull_over\030\007 \001(\0132\037.apollo.plannin"
  "g.PullOverStatus\0223\n\trerouting\030\010 \001(\0132 .ap"
  "ollo.planning.ReroutingStatus\0227\n\014right_o"
  "f_way\030\t \001(\0132!.apollo.planning.RightOfWay"
  "Status\0221\n\010scenario\030\n \001(\0132\037.apollo.planni"
  "ng.ScenarioStatus\0222\n\tside_pass\030\013 \001(\0132\037.a"
  "pollo.planning.SidePassStatus\0222\n\tstop_si"
  "gn\030\014 \001(\0132\037.apollo.planning.StopSignStatu"
  "s\022:\n\rtraffic_light\030\r \001(\0132#.apollo.planni"
  "ng.TrafficLightStatus\022;\n\016side_pass_stop\030"
  "\016 \001(\0132#.apollo.planning.SidePassStopStat"
  "us"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_sccs[16] = {
  &scc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_PlanningStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_RightOfWayStatus_JunctionEntry_DoNotUse_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
  &scc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto, "modules/planning/proto/planning_status.proto", 2722,
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_deps, 16, 5,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto, 16, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLaneStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[0];
}
bool ChangeLaneStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChangeLaneStatus_Status ChangeLaneStatus::IN_CHANGE_LANE;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_FAILED;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_SUCCESS;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::Status_MIN;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::Status_MAX;
constexpr int ChangeLaneStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BareIntersectionStatus::InitAsDefaultInstance() {
}
class BareIntersectionStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<BareIntersectionStatus>()._has_bits_);
  static void set_has_current_pnc_junction_overlap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_done_pnc_junction_overlap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BareIntersectionStatus::BareIntersectionStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.BareIntersectionStatus)
}
BareIntersectionStatus::BareIntersectionStatus(const BareIntersectionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_pnc_junction_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_pnc_junction_overlap_id()) {
    current_pnc_junction_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_pnc_junction_overlap_id_);
  }
  done_pnc_junction_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_done_pnc_junction_overlap_id()) {
    done_pnc_junction_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.done_pnc_junction_overlap_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.BareIntersectionStatus)
}

void BareIntersectionStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  current_pnc_junction_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  done_pnc_junction_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BareIntersectionStatus::~BareIntersectionStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.BareIntersectionStatus)
  SharedDtor();
}

void BareIntersectionStatus::SharedDtor() {
  current_pnc_junction_overlap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  done_pnc_junction_overlap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BareIntersectionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BareIntersectionStatus& BareIntersectionStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BareIntersectionStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void BareIntersectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.BareIntersectionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_pnc_junction_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      done_pnc_junction_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BareIntersectionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string current_pnc_junction_overlap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_pnc_junction_overlap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.BareIntersectionStatus.current_pnc_junction_overlap_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string done_pnc_junction_overlap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_done_pnc_junction_overlap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.BareIntersectionStatus.done_pnc_junction_overlap_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BareIntersectionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.BareIntersectionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_pnc_junction_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_pnc_junction_overlap_id().data(), static_cast<int>(this->_internal_current_pnc_junction_overlap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.BareIntersectionStatus.current_pnc_junction_overlap_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_pnc_junction_overlap_id(), target);
  }

  // optional string done_pnc_junction_overlap_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_done_pnc_junction_overlap_id().data(), static_cast<int>(this->_internal_done_pnc_junction_overlap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.BareIntersectionStatus.done_pnc_junction_overlap_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_done_pnc_junction_overlap_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.BareIntersectionStatus)
  return target;
}

size_t BareIntersectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.BareIntersectionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string current_pnc_junction_overlap_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_pnc_junction_overlap_id());
    }

    // optional string done_pnc_junction_overlap_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_done_pnc_junction_overlap_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BareIntersectionStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.BareIntersectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BareIntersectionStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BareIntersectionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.BareIntersectionStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.BareIntersectionStatus)
    MergeFrom(*source);
  }
}

void BareIntersectionStatus::MergeFrom(const BareIntersectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.BareIntersectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      current_pnc_junction_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_pnc_junction_overlap_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      done_pnc_junction_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.done_pnc_junction_overlap_id_);
    }
  }
}

void BareIntersectionStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.BareIntersectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BareIntersectionStatus::CopyFrom(const BareIntersectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.BareIntersectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BareIntersectionStatus::IsInitialized() const {
  return true;
}

void BareIntersectionStatus::InternalSwap(BareIntersectionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_pnc_junction_overlap_id_.Swap(&other->current_pnc_junction_overlap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  done_pnc_junction_overlap_id_.Swap(&other->done_pnc_junction_overlap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BareIntersectionStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeLaneStatus::InitAsDefaultInstance() {
}
class ChangeLaneStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeLaneStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChangeLaneStatus::ChangeLaneStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ChangeLaneStatus)
}
ChangeLaneStatus::ChangeLaneStatus(const ChangeLaneStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path_id()) {
    path_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChangeLaneStatus)
}

void ChangeLaneStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  path_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  status_ = 1;
}

ChangeLaneStatus::~ChangeLaneStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChangeLaneStatus)
  SharedDtor();
}

void ChangeLaneStatus::SharedDtor() {
  path_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeLaneStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeLaneStatus& ChangeLaneStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeLaneStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ChangeLaneStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChangeLaneStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    timestamp_ = 0;
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeLaneStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ChangeLaneStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::ChangeLaneStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string path_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.ChangeLaneStatus.path_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeLaneStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChangeLaneStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string path_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_id().data(), static_cast<int>(this->_internal_path_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ChangeLaneStatus.path_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_id(), target);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChangeLaneStatus)
  return target;
}

size_t ChangeLaneStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChangeLaneStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_id());
    }

    // optional double timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeLaneStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ChangeLaneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLaneStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeLaneStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ChangeLaneStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ChangeLaneStatus)
    MergeFrom(*source);
  }
}

void ChangeLaneStatus::MergeFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChangeLaneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeLaneStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLaneStatus::CopyFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneStatus::IsInitialized() const {
  return true;
}

void ChangeLaneStatus::InternalSwap(ChangeLaneStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_id_.Swap(&other->path_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLaneStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopTime::InitAsDefaultInstance() {
}
class StopTime::_Internal {
 public:
  using HasBits = decltype(std::declval<StopTime>()._has_bits_);
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_stop_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopTime::StopTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopTime)
}
StopTime::StopTime(const StopTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_obstacle_id()) {
    obstacle_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
  }
  obstacle_stop_timestamp_ = from.obstacle_stop_timestamp_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopTime)
}

void StopTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obstacle_stop_timestamp_ = 0;
}

StopTime::~StopTime() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopTime)
  SharedDtor();
}

void StopTime::SharedDtor() {
  obstacle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopTime& StopTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopTime_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void StopTime::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    obstacle_id_.ClearNonDefaultToEmptyNoArena();
  }
  obstacle_stop_timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StopTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_obstacle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.StopTime.obstacle_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double obstacle_stop_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_obstacle_stop_timestamp(&has_bits);
          obstacle_stop_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string obstacle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obstacle_id().data(), static_cast<int>(this->_internal_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopTime.obstacle_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obstacle_id(), target);
  }

  // optional double obstacle_stop_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_obstacle_stop_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopTime)
  return target;
}

size_t StopTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string obstacle_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obstacle_id());
    }

    // optional double obstacle_stop_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopTime)
  GOOGLE_DCHECK_NE(&from, this);
  const StopTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopTime)
    MergeFrom(*source);
  }
}

void StopTime::MergeFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      obstacle_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.obstacle_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_stop_timestamp_ = from.obstacle_stop_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTime::CopyFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTime::IsInitialized() const {
  return true;
}

void StopTime::InternalSwap(StopTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_id_.Swap(&other->obstacle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obstacle_stop_timestamp_, other->obstacle_stop_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrosswalkStatus::InitAsDefaultInstance() {
}
class CrosswalkStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CrosswalkStatus>()._has_bits_);
  static void set_has_crosswalk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CrosswalkStatus::CrosswalkStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CrosswalkStatus)
}
CrosswalkStatus::CrosswalkStatus(const CrosswalkStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stop_time_(from.stop_time_),
      finished_crosswalk_(from.finished_crosswalk_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crosswalk_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_crosswalk_id()) {
    crosswalk_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crosswalk_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkStatus)
}

void CrosswalkStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  crosswalk_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CrosswalkStatus::~CrosswalkStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkStatus)
  SharedDtor();
}

void CrosswalkStatus::SharedDtor() {
  crosswalk_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrosswalkStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrosswalkStatus& CrosswalkStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrosswalkStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void CrosswalkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_time_.Clear();
  finished_crosswalk_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    crosswalk_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CrosswalkStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string crosswalk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_crosswalk_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.CrosswalkStatus.crosswalk_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.StopTime stop_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string finished_crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_finished_crosswalk();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.CrosswalkStatus.finished_crosswalk");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrosswalkStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string crosswalk_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_crosswalk_id().data(), static_cast<int>(this->_internal_crosswalk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.crosswalk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_crosswalk_id(), target);
  }

  // repeated .apollo.planning.StopTime stop_time = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stop_time(i), target, stream);
  }

  // repeated string finished_crosswalk = 3;
  for (int i = 0, n = this->_internal_finished_crosswalk_size(); i < n; i++) {
    const auto& s = this->_internal_finished_crosswalk(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.finished_crosswalk");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkStatus)
  return target;
}

size_t CrosswalkStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.StopTime stop_time = 2;
  total_size += 1UL * this->_internal_stop_time_size();
  for (const auto& msg : this->stop_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string finished_crosswalk = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(finished_crosswalk_.size());
  for (int i = 0, n = finished_crosswalk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      finished_crosswalk_.Get(i));
  }

  // optional string crosswalk_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crosswalk_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CrosswalkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrosswalkStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CrosswalkStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CrosswalkStatus)
    MergeFrom(*source);
  }
}

void CrosswalkStatus::MergeFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_time_.MergeFrom(from.stop_time_);
  finished_crosswalk_.MergeFrom(from.finished_crosswalk_);
  if (from._internal_has_crosswalk_id()) {
    _has_bits_[0] |= 0x00000001u;
    crosswalk_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.crosswalk_id_);
  }
}

void CrosswalkStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkStatus::CopyFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkStatus::IsInitialized() const {
  return true;
}

void CrosswalkStatus::InternalSwap(CrosswalkStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stop_time_.InternalSwap(&other->stop_time_);
  finished_crosswalk_.InternalSwap(&other->finished_crosswalk_);
  crosswalk_id_.Swap(&other->crosswalk_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DestinationStatus::InitAsDefaultInstance() {
}
class DestinationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<DestinationStatus>()._has_bits_);
  static void set_has_has_passed_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestinationStatus::DestinationStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DestinationStatus)
}
DestinationStatus::DestinationStatus(const DestinationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_passed_destination_ = from.has_passed_destination_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationStatus)
}

void DestinationStatus::SharedCtor() {
  has_passed_destination_ = false;
}

DestinationStatus::~DestinationStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationStatus)
  SharedDtor();
}

void DestinationStatus::SharedDtor() {
}

void DestinationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DestinationStatus& DestinationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DestinationStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void DestinationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_passed_destination_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DestinationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_passed_destination = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_passed_destination(&has_bits);
          has_passed_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DestinationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_passed_destination = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_passed_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationStatus)
  return target;
}

size_t DestinationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_passed_destination = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestinationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DestinationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DestinationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DestinationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DestinationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DestinationStatus)
    MergeFrom(*source);
  }
}

void DestinationStatus::MergeFrom(const DestinationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_has_passed_destination()) {
    _internal_set_has_passed_destination(from._internal_has_passed_destination());
  }
}

void DestinationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DestinationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationStatus::CopyFrom(const DestinationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationStatus::IsInitialized() const {
  return true;
}

void DestinationStatus::InternalSwap(DestinationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_passed_destination_, other->has_passed_destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestinationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PedestrianStatus::InitAsDefaultInstance() {
}
class PedestrianStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PedestrianStatus>()._has_bits_);
};

PedestrianStatus::PedestrianStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PedestrianStatus)
}
PedestrianStatus::PedestrianStatus(const PedestrianStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stop_time_(from.stop_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PedestrianStatus)
}

void PedestrianStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
}

PedestrianStatus::~PedestrianStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PedestrianStatus)
  SharedDtor();
}

void PedestrianStatus::SharedDtor() {
}

void PedestrianStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PedestrianStatus& PedestrianStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PedestrianStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void PedestrianStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PedestrianStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_time_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PedestrianStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.StopTime stop_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_time(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PedestrianStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PedestrianStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.StopTime stop_time = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_time_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stop_time(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PedestrianStatus)
  return target;
}

size_t PedestrianStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PedestrianStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.StopTime stop_time = 1;
  total_size += 1UL * this->_internal_stop_time_size();
  for (const auto& msg : this->stop_time_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PedestrianStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PedestrianStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PedestrianStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PedestrianStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PedestrianStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PedestrianStatus)
    MergeFrom(*source);
  }
}

void PedestrianStatus::MergeFrom(const PedestrianStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PedestrianStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stop_time_.MergeFrom(from.stop_time_);
}

void PedestrianStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PedestrianStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PedestrianStatus::CopyFrom(const PedestrianStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PedestrianStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianStatus::IsInitialized() const {
  return true;
}

void PedestrianStatus::InternalSwap(PedestrianStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stop_time_.InternalSwap(&other->stop_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PedestrianStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullOverStatus::InitAsDefaultInstance() {
  ::apollo::planning::_PullOverStatus_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class PullOverStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PullOverStatus>()._has_bits_);
  static void set_has_is_feasible(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::PointENU& position(const PullOverStatus* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length_front(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length_back(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width_right(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_in_pull_over_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::common::PointENU&
PullOverStatus::_Internal::position(const PullOverStatus* msg) {
  return *msg->position_;
}
void PullOverStatus::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PullOverStatus::PullOverStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PullOverStatus)
}
PullOverStatus::PullOverStatus(const PullOverStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::PointENU(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_right_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(width_right_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PullOverStatus)
}

void PullOverStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_right_) -
      reinterpret_cast<char*>(&position_)) + sizeof(width_right_));
}

PullOverStatus::~PullOverStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PullOverStatus)
  SharedDtor();
}

void PullOverStatus::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void PullOverStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullOverStatus& PullOverStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullOverStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void PullOverStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PullOverStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(idx_));
  }
  width_right_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PullOverStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_feasible = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_feasible(&has_bits);
          is_feasible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length_front = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_length_front(&has_bits);
          length_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length_back = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_length_back(&has_bits);
          length_back_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_width_left(&has_bits);
          width_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_width_right(&has_bits);
          width_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 idx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_pull_over_scenario = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_in_pull_over_scenario(&has_bits);
          is_in_pull_over_scenario_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullOverStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PullOverStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_feasible = 1 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_feasible(), target);
  }

  // optional .apollo.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_theta(), target);
  }

  // optional double length_front = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_length_front(), target);
  }

  // optional double length_back = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_length_back(), target);
  }

  // optional double width_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_width_left(), target);
  }

  // optional double width_right = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_width_right(), target);
  }

  // optional int32 idx = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_idx(), target);
  }

  // optional bool is_in_pull_over_scenario = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_in_pull_over_scenario(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PullOverStatus)
  return target;
}

size_t PullOverStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PullOverStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.PointENU position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional double theta = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double length_front = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double length_back = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double width_left = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool is_feasible = 1 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_in_pull_over_scenario = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 idx = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_idx());
    }

  }
  // optional double width_right = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullOverStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PullOverStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PullOverStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullOverStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PullOverStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PullOverStatus)
    MergeFrom(*source);
  }
}

void PullOverStatus::MergeFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PullOverStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::PointENU::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_front_ = from.length_front_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_back_ = from.length_back_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_left_ = from.width_left_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_feasible_ = from.is_feasible_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_in_pull_over_scenario_ = from.is_in_pull_over_scenario_;
    }
    if (cached_has_bits & 0x00000080u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_width_right(from._internal_width_right());
  }
}

void PullOverStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullOverStatus::CopyFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullOverStatus::IsInitialized() const {
  return true;
}

void PullOverStatus::InternalSwap(PullOverStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(theta_, other->theta_);
  swap(length_front_, other->length_front_);
  swap(length_back_, other->length_back_);
  swap(width_left_, other->width_left_);
  swap(is_feasible_, other->is_feasible_);
  swap(is_in_pull_over_scenario_, other->is_in_pull_over_scenario_);
  swap(idx_, other->idx_);
  swap(width_right_, other->width_right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullOverStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReroutingStatus::InitAsDefaultInstance() {
  ::apollo::planning::_ReroutingStatus_default_instance_._instance.get_mutable()->routing_request_ = const_cast< ::apollo::routing::RoutingRequest*>(
      ::apollo::routing::RoutingRequest::internal_default_instance());
}
class ReroutingStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ReroutingStatus>()._has_bits_);
  static void set_has_last_rerouting_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_need_rerouting(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::routing::RoutingRequest& routing_request(const ReroutingStatus* msg);
  static void set_has_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::RoutingRequest&
ReroutingStatus::_Internal::routing_request(const ReroutingStatus* msg) {
  return *msg->routing_request_;
}
void ReroutingStatus::clear_routing_request() {
  if (routing_request_ != nullptr) routing_request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReroutingStatus::ReroutingStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReroutingStatus)
}
ReroutingStatus::ReroutingStatus(const ReroutingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_routing_request()) {
    routing_request_ = new ::apollo::routing::RoutingRequest(*from.routing_request_);
  } else {
    routing_request_ = nullptr;
  }
  ::memcpy(&last_rerouting_time_, &from.last_rerouting_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_rerouting_) -
    reinterpret_cast<char*>(&last_rerouting_time_)) + sizeof(need_rerouting_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingStatus)
}

void ReroutingStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  ::memset(&routing_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_rerouting_) -
      reinterpret_cast<char*>(&routing_request_)) + sizeof(need_rerouting_));
}

ReroutingStatus::~ReroutingStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingStatus)
  SharedDtor();
}

void ReroutingStatus::SharedDtor() {
  if (this != internal_default_instance()) delete routing_request_;
}

void ReroutingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReroutingStatus& ReroutingStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReroutingStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ReroutingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(routing_request_ != nullptr);
    routing_request_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&last_rerouting_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&need_rerouting_) -
        reinterpret_cast<char*>(&last_rerouting_time_)) + sizeof(need_rerouting_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReroutingStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double last_rerouting_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_last_rerouting_time(&has_bits);
          last_rerouting_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool need_rerouting = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_need_rerouting(&has_bits);
          need_rerouting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest routing_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReroutingStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double last_rerouting_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_last_rerouting_time(), target);
  }

  // optional bool need_rerouting = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_need_rerouting(), target);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::routing_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingStatus)
  return target;
}

size_t ReroutingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.routing.RoutingRequest routing_request = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_request_);
    }

    // optional double last_rerouting_time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool need_rerouting = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReroutingStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReroutingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ReroutingStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReroutingStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReroutingStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReroutingStatus)
    MergeFrom(*source);
  }
}

void ReroutingStatus::MergeFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request());
    }
    if (cached_has_bits & 0x00000002u) {
      last_rerouting_time_ = from.last_rerouting_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_rerouting_ = from.need_rerouting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReroutingStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingStatus::CopyFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingStatus::IsInitialized() const {
  return true;
}

void ReroutingStatus::InternalSwap(ReroutingStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(routing_request_, other->routing_request_);
  swap(last_rerouting_time_, other->last_rerouting_time_);
  swap(need_rerouting_, other->need_rerouting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReroutingStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RightOfWayStatus_JunctionEntry_DoNotUse::RightOfWayStatus_JunctionEntry_DoNotUse() {}
RightOfWayStatus_JunctionEntry_DoNotUse::RightOfWayStatus_JunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RightOfWayStatus_JunctionEntry_DoNotUse::MergeFrom(const RightOfWayStatus_JunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RightOfWayStatus_JunctionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RightOfWayStatus_JunctionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RightOfWayStatus::InitAsDefaultInstance() {
}
class RightOfWayStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RightOfWayStatus>()._has_bits_);
};

RightOfWayStatus::RightOfWayStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RightOfWayStatus)
}
RightOfWayStatus::RightOfWayStatus(const RightOfWayStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  junction_.MergeFrom(from.junction_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RightOfWayStatus)
}

void RightOfWayStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
}

RightOfWayStatus::~RightOfWayStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.RightOfWayStatus)
  SharedDtor();
}

void RightOfWayStatus::SharedDtor() {
}

void RightOfWayStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightOfWayStatus& RightOfWayStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightOfWayStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void RightOfWayStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RightOfWayStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  junction_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RightOfWayStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, bool> junction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&junction_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightOfWayStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RightOfWayStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> junction = 1;
  if (!this->_internal_junction().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.planning.RightOfWayStatus.JunctionEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_junction().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_junction().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
          it = this->_internal_junction().begin();
          it != this->_internal_junction().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RightOfWayStatus_JunctionEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
          it = this->_internal_junction().begin();
          it != this->_internal_junction().end(); ++it) {
        target = RightOfWayStatus_JunctionEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RightOfWayStatus)
  return target;
}

size_t RightOfWayStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RightOfWayStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> junction = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_junction_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_junction().begin();
      it != this->_internal_junction().end(); ++it) {
    total_size += RightOfWayStatus_JunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightOfWayStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RightOfWayStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RightOfWayStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightOfWayStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RightOfWayStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RightOfWayStatus)
    MergeFrom(*source);
  }
}

void RightOfWayStatus::MergeFrom(const RightOfWayStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RightOfWayStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  junction_.MergeFrom(from.junction_);
}

void RightOfWayStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RightOfWayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightOfWayStatus::CopyFrom(const RightOfWayStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RightOfWayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightOfWayStatus::IsInitialized() const {
  return true;
}

void RightOfWayStatus::InternalSwap(RightOfWayStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  junction_.Swap(&other->junction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RightOfWayStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioStatus::InitAsDefaultInstance() {
}
class ScenarioStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioStatus>()._has_bits_);
  static void set_has_scenario_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioStatus::ScenarioStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioStatus)
}
ScenarioStatus::ScenarioStatus(const ScenarioStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scenario_type_, &from.scenario_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_type_) -
    reinterpret_cast<char*>(&scenario_type_)) + sizeof(stage_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioStatus)
}

void ScenarioStatus::SharedCtor() {
  ::memset(&scenario_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_type_) -
      reinterpret_cast<char*>(&scenario_type_)) + sizeof(stage_type_));
}

ScenarioStatus::~ScenarioStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioStatus)
  SharedDtor();
}

void ScenarioStatus::SharedDtor() {
}

void ScenarioStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioStatus& ScenarioStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void ScenarioStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&scenario_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stage_type_) -
        reinterpret_cast<char*>(&scenario_type_)) + sizeof(stage_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(val))) {
            _internal_set_scenario_type(static_cast<::apollo::planning::ScenarioConfig_ScenarioType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioConfig.StageType stage_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_StageType_IsValid(val))) {
            _internal_set_stage_type(static_cast<::apollo::planning::ScenarioConfig_StageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scenario_type(), target);
  }

  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioStatus)
  return target;
}

size_t ScenarioStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scenario_type());
    }

    // optional .apollo.planning.ScenarioConfig.StageType stage_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioStatus)
    MergeFrom(*source);
  }
}

void ScenarioStatus::MergeFrom(const ScenarioStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scenario_type_ = from.scenario_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      stage_type_ = from.stage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioStatus::CopyFrom(const ScenarioStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioStatus::IsInitialized() const {
  return true;
}

void ScenarioStatus::InternalSwap(ScenarioStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scenario_type_, other->scenario_type_);
  swap(stage_type_, other->stage_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SidePassStatus::InitAsDefaultInstance() {
}
class SidePassStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SidePassStatus>()._has_bits_);
  static void set_has_front_blocking_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SidePassStatus::SidePassStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SidePassStatus)
}
SidePassStatus::SidePassStatus(const SidePassStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  front_blocking_obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_front_blocking_obstacle_id()) {
    front_blocking_obstacle_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.front_blocking_obstacle_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SidePassStatus)
}

void SidePassStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  front_blocking_obstacle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SidePassStatus::~SidePassStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.SidePassStatus)
  SharedDtor();
}

void SidePassStatus::SharedDtor() {
  front_blocking_obstacle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SidePassStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SidePassStatus& SidePassStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SidePassStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void SidePassStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SidePassStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    front_blocking_obstacle_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SidePassStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string front_blocking_obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_front_blocking_obstacle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.SidePassStatus.front_blocking_obstacle_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SidePassStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SidePassStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string front_blocking_obstacle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_front_blocking_obstacle_id().data(), static_cast<int>(this->_internal_front_blocking_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.SidePassStatus.front_blocking_obstacle_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_front_blocking_obstacle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SidePassStatus)
  return target;
}

size_t SidePassStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SidePassStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string front_blocking_obstacle_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_front_blocking_obstacle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SidePassStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SidePassStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SidePassStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SidePassStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SidePassStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SidePassStatus)
    MergeFrom(*source);
  }
}

void SidePassStatus::MergeFrom(const SidePassStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SidePassStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_front_blocking_obstacle_id()) {
    _has_bits_[0] |= 0x00000001u;
    front_blocking_obstacle_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.front_blocking_obstacle_id_);
  }
}

void SidePassStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SidePassStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidePassStatus::CopyFrom(const SidePassStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SidePassStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidePassStatus::IsInitialized() const {
  return true;
}

void SidePassStatus::InternalSwap(SidePassStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  front_blocking_obstacle_id_.Swap(&other->front_blocking_obstacle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SidePassStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopSignStatus::InitAsDefaultInstance() {
}
class StopSignStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSignStatus>()._has_bits_);
  static void set_has_current_stop_sign_overlap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_done_stop_sign_overlap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopSignStatus::StopSignStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignStatus)
}
StopSignStatus::StopSignStatus(const StopSignStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      wait_for_obstacle_id_(from.wait_for_obstacle_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_stop_sign_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_stop_sign_overlap_id()) {
    current_stop_sign_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_stop_sign_overlap_id_);
  }
  done_stop_sign_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_done_stop_sign_overlap_id()) {
    done_stop_sign_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.done_stop_sign_overlap_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignStatus)
}

void StopSignStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  current_stop_sign_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  done_stop_sign_overlap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopSignStatus::~StopSignStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignStatus)
  SharedDtor();
}

void StopSignStatus::SharedDtor() {
  current_stop_sign_overlap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  done_stop_sign_overlap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopSignStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopSignStatus& StopSignStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopSignStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void StopSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wait_for_obstacle_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_stop_sign_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      done_stop_sign_overlap_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StopSignStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string current_stop_sign_overlap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_stop_sign_overlap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.StopSignStatus.current_stop_sign_overlap_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string done_stop_sign_overlap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_done_stop_sign_overlap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.StopSignStatus.done_stop_sign_overlap_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string wait_for_obstacle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wait_for_obstacle_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.StopSignStatus.wait_for_obstacle_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSignStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string current_stop_sign_overlap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_stop_sign_overlap_id().data(), static_cast<int>(this->_internal_current_stop_sign_overlap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.current_stop_sign_overlap_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_stop_sign_overlap_id(), target);
  }

  // optional string done_stop_sign_overlap_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_done_stop_sign_overlap_id().data(), static_cast<int>(this->_internal_done_stop_sign_overlap_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.done_stop_sign_overlap_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_done_stop_sign_overlap_id(), target);
  }

  // repeated string wait_for_obstacle_id = 3;
  for (int i = 0, n = this->_internal_wait_for_obstacle_id_size(); i < n; i++) {
    const auto& s = this->_internal_wait_for_obstacle_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.wait_for_obstacle_id");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignStatus)
  return target;
}

size_t StopSignStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string wait_for_obstacle_id = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(wait_for_obstacle_id_.size());
  for (int i = 0, n = wait_for_obstacle_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      wait_for_obstacle_id_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string current_stop_sign_overlap_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_stop_sign_overlap_id());
    }

    // optional string done_stop_sign_overlap_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_done_stop_sign_overlap_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSignStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSignStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignStatus)
    MergeFrom(*source);
  }
}

void StopSignStatus::MergeFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wait_for_obstacle_id_.MergeFrom(from.wait_for_obstacle_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      current_stop_sign_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_stop_sign_overlap_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      done_stop_sign_overlap_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.done_stop_sign_overlap_id_);
    }
  }
}

void StopSignStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignStatus::CopyFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignStatus::IsInitialized() const {
  return true;
}

void StopSignStatus::InternalSwap(StopSignStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wait_for_obstacle_id_.InternalSwap(&other->wait_for_obstacle_id_);
  current_stop_sign_overlap_id_.Swap(&other->current_stop_sign_overlap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  done_stop_sign_overlap_id_.Swap(&other->done_stop_sign_overlap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSignStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLightStatus::InitAsDefaultInstance() {
}
class TrafficLightStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightStatus>()._has_bits_);
};

TrafficLightStatus::TrafficLightStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficLightStatus)
}
TrafficLightStatus::TrafficLightStatus(const TrafficLightStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      current_traffic_light_overlap_id_(from.current_traffic_light_overlap_id_),
      done_traffic_light_overlap_id_(from.done_traffic_light_overlap_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightStatus)
}

void TrafficLightStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
}

TrafficLightStatus::~TrafficLightStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightStatus)
  SharedDtor();
}

void TrafficLightStatus::SharedDtor() {
}

void TrafficLightStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLightStatus& TrafficLightStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLightStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void TrafficLightStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_traffic_light_overlap_id_.Clear();
  done_traffic_light_overlap_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrafficLightStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string current_traffic_light_overlap_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_current_traffic_light_overlap_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.TrafficLightStatus.current_traffic_light_overlap_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string done_traffic_light_overlap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_done_traffic_light_overlap_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.TrafficLightStatus.done_traffic_light_overlap_id");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLightStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string current_traffic_light_overlap_id = 1;
  for (int i = 0, n = this->_internal_current_traffic_light_overlap_id_size(); i < n; i++) {
    const auto& s = this->_internal_current_traffic_light_overlap_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightStatus.current_traffic_light_overlap_id");
    target = stream->WriteString(1, s, target);
  }

  // repeated string done_traffic_light_overlap_id = 2;
  for (int i = 0, n = this->_internal_done_traffic_light_overlap_id_size(); i < n; i++) {
    const auto& s = this->_internal_done_traffic_light_overlap_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightStatus.done_traffic_light_overlap_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightStatus)
  return target;
}

size_t TrafficLightStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string current_traffic_light_overlap_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(current_traffic_light_overlap_id_.size());
  for (int i = 0, n = current_traffic_light_overlap_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      current_traffic_light_overlap_id_.Get(i));
  }

  // repeated string done_traffic_light_overlap_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(done_traffic_light_overlap_id_.size());
  for (int i = 0, n = done_traffic_light_overlap_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      done_traffic_light_overlap_id_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficLightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLightStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficLightStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficLightStatus)
    MergeFrom(*source);
  }
}

void TrafficLightStatus::MergeFrom(const TrafficLightStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_traffic_light_overlap_id_.MergeFrom(from.current_traffic_light_overlap_id_);
  done_traffic_light_overlap_id_.MergeFrom(from.done_traffic_light_overlap_id_);
}

void TrafficLightStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightStatus::CopyFrom(const TrafficLightStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightStatus::IsInitialized() const {
  return true;
}

void TrafficLightStatus::InternalSwap(TrafficLightStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_traffic_light_overlap_id_.InternalSwap(&other->current_traffic_light_overlap_id_);
  done_traffic_light_overlap_id_.InternalSwap(&other->done_traffic_light_overlap_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SidePassStopStatus::InitAsDefaultInstance() {
  ::apollo::planning::_SidePassStopStatus_default_instance_._instance.get_mutable()->change_lane_stop_path_point_ = const_cast< ::apollo::common::PathPoint*>(
      ::apollo::common::PathPoint::internal_default_instance());
}
class SidePassStopStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SidePassStopStatus>()._has_bits_);
  static const ::apollo::common::PathPoint& change_lane_stop_path_point(const SidePassStopStatus* msg);
  static void set_has_change_lane_stop_path_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_check_clear_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PathPoint&
SidePassStopStatus::_Internal::change_lane_stop_path_point(const SidePassStopStatus* msg) {
  return *msg->change_lane_stop_path_point_;
}
void SidePassStopStatus::clear_change_lane_stop_path_point() {
  if (change_lane_stop_path_point_ != nullptr) change_lane_stop_path_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SidePassStopStatus::SidePassStopStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SidePassStopStatus)
}
SidePassStopStatus::SidePassStopStatus(const SidePassStopStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_change_lane_stop_path_point()) {
    change_lane_stop_path_point_ = new ::apollo::common::PathPoint(*from.change_lane_stop_path_point_);
  } else {
    change_lane_stop_path_point_ = nullptr;
  }
  check_clear_flag_ = from.check_clear_flag_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SidePassStopStatus)
}

void SidePassStopStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  ::memset(&change_lane_stop_path_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_clear_flag_) -
      reinterpret_cast<char*>(&change_lane_stop_path_point_)) + sizeof(check_clear_flag_));
}

SidePassStopStatus::~SidePassStopStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.SidePassStopStatus)
  SharedDtor();
}

void SidePassStopStatus::SharedDtor() {
  if (this != internal_default_instance()) delete change_lane_stop_path_point_;
}

void SidePassStopStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SidePassStopStatus& SidePassStopStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SidePassStopStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void SidePassStopStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SidePassStopStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(change_lane_stop_path_point_ != nullptr);
    change_lane_stop_path_point_->Clear();
  }
  check_clear_flag_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SidePassStopStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.PathPoint change_lane_stop_path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane_stop_path_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool check_clear_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_check_clear_flag(&has_bits);
          check_clear_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SidePassStopStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SidePassStopStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint change_lane_stop_path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::change_lane_stop_path_point(this), target, stream);
  }

  // optional bool check_clear_flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_check_clear_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SidePassStopStatus)
  return target;
}

size_t SidePassStopStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SidePassStopStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.PathPoint change_lane_stop_path_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_lane_stop_path_point_);
    }

    // optional bool check_clear_flag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SidePassStopStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SidePassStopStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SidePassStopStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SidePassStopStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SidePassStopStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SidePassStopStatus)
    MergeFrom(*source);
  }
}

void SidePassStopStatus::MergeFrom(const SidePassStopStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SidePassStopStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_change_lane_stop_path_point()->::apollo::common::PathPoint::MergeFrom(from._internal_change_lane_stop_path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      check_clear_flag_ = from.check_clear_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SidePassStopStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SidePassStopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SidePassStopStatus::CopyFrom(const SidePassStopStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SidePassStopStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidePassStopStatus::IsInitialized() const {
  return true;
}

void SidePassStopStatus::InternalSwap(SidePassStopStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(change_lane_stop_path_point_, other->change_lane_stop_path_point_);
  swap(check_clear_flag_, other->check_clear_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SidePassStopStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStatus::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->bare_intersection_ = const_cast< ::apollo::planning::BareIntersectionStatus*>(
      ::apollo::planning::BareIntersectionStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->change_lane_ = const_cast< ::apollo::planning::ChangeLaneStatus*>(
      ::apollo::planning::ChangeLaneStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->crosswalk_ = const_cast< ::apollo::planning::CrosswalkStatus*>(
      ::apollo::planning::CrosswalkStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->destination_ = const_cast< ::apollo::planning::DestinationStatus*>(
      ::apollo::planning::DestinationStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(
      ::apollo::common::EngageAdvice::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->pedestrian_ = const_cast< ::apollo::planning::PedestrianStatus*>(
      ::apollo::planning::PedestrianStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->pull_over_ = const_cast< ::apollo::planning::PullOverStatus*>(
      ::apollo::planning::PullOverStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->rerouting_ = const_cast< ::apollo::planning::ReroutingStatus*>(
      ::apollo::planning::ReroutingStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->right_of_way_ = const_cast< ::apollo::planning::RightOfWayStatus*>(
      ::apollo::planning::RightOfWayStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::apollo::planning::ScenarioStatus*>(
      ::apollo::planning::ScenarioStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->side_pass_ = const_cast< ::apollo::planning::SidePassStatus*>(
      ::apollo::planning::SidePassStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->stop_sign_ = const_cast< ::apollo::planning::StopSignStatus*>(
      ::apollo::planning::StopSignStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->traffic_light_ = const_cast< ::apollo::planning::TrafficLightStatus*>(
      ::apollo::planning::TrafficLightStatus::internal_default_instance());
  ::apollo::planning::_PlanningStatus_default_instance_._instance.get_mutable()->side_pass_stop_ = const_cast< ::apollo::planning::SidePassStopStatus*>(
      ::apollo::planning::SidePassStopStatus::internal_default_instance());
}
class PlanningStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStatus>()._has_bits_);
  static const ::apollo::planning::BareIntersectionStatus& bare_intersection(const PlanningStatus* msg);
  static void set_has_bare_intersection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ChangeLaneStatus& change_lane(const PlanningStatus* msg);
  static void set_has_change_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::CrosswalkStatus& crosswalk(const PlanningStatus* msg);
  static void set_has_crosswalk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::DestinationStatus& destination(const PlanningStatus* msg);
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const PlanningStatus* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::PedestrianStatus& pedestrian(const PlanningStatus* msg);
  static void set_has_pedestrian(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::PullOverStatus& pull_over(const PlanningStatus* msg);
  static void set_has_pull_over(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning::ReroutingStatus& rerouting(const PlanningStatus* msg);
  static void set_has_rerouting(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::planning::RightOfWayStatus& right_of_way(const PlanningStatus* msg);
  static void set_has_right_of_way(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::planning::ScenarioStatus& scenario(const PlanningStatus* msg);
  static void set_has_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::planning::SidePassStatus& side_pass(const PlanningStatus* msg);
  static void set_has_side_pass(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::planning::StopSignStatus& stop_sign(const PlanningStatus* msg);
  static void set_has_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::planning::TrafficLightStatus& traffic_light(const PlanningStatus* msg);
  static void set_has_traffic_light(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::planning::SidePassStopStatus& side_pass_stop(const PlanningStatus* msg);
  static void set_has_side_pass_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::planning::BareIntersectionStatus&
PlanningStatus::_Internal::bare_intersection(const PlanningStatus* msg) {
  return *msg->bare_intersection_;
}
const ::apollo::planning::ChangeLaneStatus&
PlanningStatus::_Internal::change_lane(const PlanningStatus* msg) {
  return *msg->change_lane_;
}
const ::apollo::planning::CrosswalkStatus&
PlanningStatus::_Internal::crosswalk(const PlanningStatus* msg) {
  return *msg->crosswalk_;
}
const ::apollo::planning::DestinationStatus&
PlanningStatus::_Internal::destination(const PlanningStatus* msg) {
  return *msg->destination_;
}
const ::apollo::common::EngageAdvice&
PlanningStatus::_Internal::engage_advice(const PlanningStatus* msg) {
  return *msg->engage_advice_;
}
const ::apollo::planning::PedestrianStatus&
PlanningStatus::_Internal::pedestrian(const PlanningStatus* msg) {
  return *msg->pedestrian_;
}
const ::apollo::planning::PullOverStatus&
PlanningStatus::_Internal::pull_over(const PlanningStatus* msg) {
  return *msg->pull_over_;
}
const ::apollo::planning::ReroutingStatus&
PlanningStatus::_Internal::rerouting(const PlanningStatus* msg) {
  return *msg->rerouting_;
}
const ::apollo::planning::RightOfWayStatus&
PlanningStatus::_Internal::right_of_way(const PlanningStatus* msg) {
  return *msg->right_of_way_;
}
const ::apollo::planning::ScenarioStatus&
PlanningStatus::_Internal::scenario(const PlanningStatus* msg) {
  return *msg->scenario_;
}
const ::apollo::planning::SidePassStatus&
PlanningStatus::_Internal::side_pass(const PlanningStatus* msg) {
  return *msg->side_pass_;
}
const ::apollo::planning::StopSignStatus&
PlanningStatus::_Internal::stop_sign(const PlanningStatus* msg) {
  return *msg->stop_sign_;
}
const ::apollo::planning::TrafficLightStatus&
PlanningStatus::_Internal::traffic_light(const PlanningStatus* msg) {
  return *msg->traffic_light_;
}
const ::apollo::planning::SidePassStopStatus&
PlanningStatus::_Internal::side_pass_stop(const PlanningStatus* msg) {
  return *msg->side_pass_stop_;
}
void PlanningStatus::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
PlanningStatus::PlanningStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningStatus)
}
PlanningStatus::PlanningStatus(const PlanningStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bare_intersection()) {
    bare_intersection_ = new ::apollo::planning::BareIntersectionStatus(*from.bare_intersection_);
  } else {
    bare_intersection_ = nullptr;
  }
  if (from._internal_has_change_lane()) {
    change_lane_ = new ::apollo::planning::ChangeLaneStatus(*from.change_lane_);
  } else {
    change_lane_ = nullptr;
  }
  if (from._internal_has_crosswalk()) {
    crosswalk_ = new ::apollo::planning::CrosswalkStatus(*from.crosswalk_);
  } else {
    crosswalk_ = nullptr;
  }
  if (from._internal_has_destination()) {
    destination_ = new ::apollo::planning::DestinationStatus(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::apollo::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  if (from._internal_has_pedestrian()) {
    pedestrian_ = new ::apollo::planning::PedestrianStatus(*from.pedestrian_);
  } else {
    pedestrian_ = nullptr;
  }
  if (from._internal_has_pull_over()) {
    pull_over_ = new ::apollo::planning::PullOverStatus(*from.pull_over_);
  } else {
    pull_over_ = nullptr;
  }
  if (from._internal_has_rerouting()) {
    rerouting_ = new ::apollo::planning::ReroutingStatus(*from.rerouting_);
  } else {
    rerouting_ = nullptr;
  }
  if (from._internal_has_right_of_way()) {
    right_of_way_ = new ::apollo::planning::RightOfWayStatus(*from.right_of_way_);
  } else {
    right_of_way_ = nullptr;
  }
  if (from._internal_has_scenario()) {
    scenario_ = new ::apollo::planning::ScenarioStatus(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_side_pass()) {
    side_pass_ = new ::apollo::planning::SidePassStatus(*from.side_pass_);
  } else {
    side_pass_ = nullptr;
  }
  if (from._internal_has_stop_sign()) {
    stop_sign_ = new ::apollo::planning::StopSignStatus(*from.stop_sign_);
  } else {
    stop_sign_ = nullptr;
  }
  if (from._internal_has_traffic_light()) {
    traffic_light_ = new ::apollo::planning::TrafficLightStatus(*from.traffic_light_);
  } else {
    traffic_light_ = nullptr;
  }
  if (from._internal_has_side_pass_stop()) {
    side_pass_stop_ = new ::apollo::planning::SidePassStopStatus(*from.side_pass_stop_);
  } else {
    side_pass_stop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningStatus)
}

void PlanningStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  ::memset(&bare_intersection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_pass_stop_) -
      reinterpret_cast<char*>(&bare_intersection_)) + sizeof(side_pass_stop_));
}

PlanningStatus::~PlanningStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningStatus)
  SharedDtor();
}

void PlanningStatus::SharedDtor() {
  if (this != internal_default_instance()) delete bare_intersection_;
  if (this != internal_default_instance()) delete change_lane_;
  if (this != internal_default_instance()) delete crosswalk_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete pedestrian_;
  if (this != internal_default_instance()) delete pull_over_;
  if (this != internal_default_instance()) delete rerouting_;
  if (this != internal_default_instance()) delete right_of_way_;
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete side_pass_;
  if (this != internal_default_instance()) delete stop_sign_;
  if (this != internal_default_instance()) delete traffic_light_;
  if (this != internal_default_instance()) delete side_pass_stop_;
}

void PlanningStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStatus& PlanningStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStatus_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void PlanningStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bare_intersection_ != nullptr);
      bare_intersection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_lane_ != nullptr);
      change_lane_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(crosswalk_ != nullptr);
      crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(destination_ != nullptr);
      destination_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pedestrian_ != nullptr);
      pedestrian_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(pull_over_ != nullptr);
      pull_over_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rerouting_ != nullptr);
      rerouting_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(right_of_way_ != nullptr);
      right_of_way_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scenario_ != nullptr);
      scenario_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(side_pass_ != nullptr);
      side_pass_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(stop_sign_ != nullptr);
      stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(traffic_light_ != nullptr);
      traffic_light_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(side_pass_stop_ != nullptr);
      side_pass_stop_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlanningStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bare_intersection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.CrosswalkStatus crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DestinationStatus destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PedestrianStatus pedestrian = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedestrian(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PullOverStatus pull_over = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pull_over(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ReroutingStatus rerouting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rerouting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.RightOfWayStatus right_of_way = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_of_way(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioStatus scenario = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.SidePassStatus side_pass = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_pass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StopSignStatus stop_sign = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.TrafficLightStatus traffic_light = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.SidePassStopStatus side_pass_stop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_pass_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bare_intersection(this), target, stream);
  }

  // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::change_lane(this), target, stream);
  }

  // optional .apollo.planning.CrosswalkStatus crosswalk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::crosswalk(this), target, stream);
  }

  // optional .apollo.planning.DestinationStatus destination = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::destination(this), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::engage_advice(this), target, stream);
  }

  // optional .apollo.planning.PedestrianStatus pedestrian = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pedestrian(this), target, stream);
  }

  // optional .apollo.planning.PullOverStatus pull_over = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pull_over(this), target, stream);
  }

  // optional .apollo.planning.ReroutingStatus rerouting = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rerouting(this), target, stream);
  }

  // optional .apollo.planning.RightOfWayStatus right_of_way = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::right_of_way(this), target, stream);
  }

  // optional .apollo.planning.ScenarioStatus scenario = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::scenario(this), target, stream);
  }

  // optional .apollo.planning.SidePassStatus side_pass = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::side_pass(this), target, stream);
  }

  // optional .apollo.planning.StopSignStatus stop_sign = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stop_sign(this), target, stream);
  }

  // optional .apollo.planning.TrafficLightStatus traffic_light = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::traffic_light(this), target, stream);
  }

  // optional .apollo.planning.SidePassStopStatus side_pass_stop = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::side_pass_stop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningStatus)
  return target;
}

size_t PlanningStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.BareIntersectionStatus bare_intersection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bare_intersection_);
    }

    // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_lane_);
    }

    // optional .apollo.planning.CrosswalkStatus crosswalk = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crosswalk_);
    }

    // optional .apollo.planning.DestinationStatus destination = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *destination_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional .apollo.planning.PedestrianStatus pedestrian = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pedestrian_);
    }

    // optional .apollo.planning.PullOverStatus pull_over = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pull_over_);
    }

    // optional .apollo.planning.ReroutingStatus rerouting = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rerouting_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.planning.RightOfWayStatus right_of_way = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_of_way_);
    }

    // optional .apollo.planning.ScenarioStatus scenario = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_);
    }

    // optional .apollo.planning.SidePassStatus side_pass = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *side_pass_);
    }

    // optional .apollo.planning.StopSignStatus stop_sign = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_sign_);
    }

    // optional .apollo.planning.TrafficLightStatus traffic_light = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_light_);
    }

    // optional .apollo.planning.SidePassStopStatus side_pass_stop = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *side_pass_stop_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningStatus)
    MergeFrom(*source);
  }
}

void PlanningStatus::MergeFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bare_intersection()->::apollo::planning::BareIntersectionStatus::MergeFrom(from._internal_bare_intersection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_change_lane()->::apollo::planning::ChangeLaneStatus::MergeFrom(from._internal_change_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_crosswalk()->::apollo::planning::CrosswalkStatus::MergeFrom(from._internal_crosswalk());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_destination()->::apollo::planning::DestinationStatus::MergeFrom(from._internal_destination());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_pedestrian()->::apollo::planning::PedestrianStatus::MergeFrom(from._internal_pedestrian());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_pull_over()->::apollo::planning::PullOverStatus::MergeFrom(from._internal_pull_over());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_rerouting()->::apollo::planning::ReroutingStatus::MergeFrom(from._internal_rerouting());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_right_of_way()->::apollo::planning::RightOfWayStatus::MergeFrom(from._internal_right_of_way());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_scenario()->::apollo::planning::ScenarioStatus::MergeFrom(from._internal_scenario());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_side_pass()->::apollo::planning::SidePassStatus::MergeFrom(from._internal_side_pass());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_stop_sign()->::apollo::planning::StopSignStatus::MergeFrom(from._internal_stop_sign());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_traffic_light()->::apollo::planning::TrafficLightStatus::MergeFrom(from._internal_traffic_light());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_side_pass_stop()->::apollo::planning::SidePassStopStatus::MergeFrom(from._internal_side_pass_stop());
    }
  }
}

void PlanningStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStatus::CopyFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStatus::IsInitialized() const {
  return true;
}

void PlanningStatus::InternalSwap(PlanningStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bare_intersection_, other->bare_intersection_);
  swap(change_lane_, other->change_lane_);
  swap(crosswalk_, other->crosswalk_);
  swap(destination_, other->destination_);
  swap(engage_advice_, other->engage_advice_);
  swap(pedestrian_, other->pedestrian_);
  swap(pull_over_, other->pull_over_);
  swap(rerouting_, other->rerouting_);
  swap(right_of_way_, other->right_of_way_);
  swap(scenario_, other->scenario_);
  swap(side_pass_, other->side_pass_);
  swap(stop_sign_, other->stop_sign_);
  swap(traffic_light_, other->traffic_light_);
  swap(side_pass_stop_, other->side_pass_stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::BareIntersectionStatus* Arena::CreateMaybeMessage< ::apollo::planning::BareIntersectionStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::BareIntersectionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ChangeLaneStatus* Arena::CreateMaybeMessage< ::apollo::planning::ChangeLaneStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ChangeLaneStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopTime* Arena::CreateMaybeMessage< ::apollo::planning::StopTime >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StopTime >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CrosswalkStatus* Arena::CreateMaybeMessage< ::apollo::planning::CrosswalkStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CrosswalkStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DestinationStatus* Arena::CreateMaybeMessage< ::apollo::planning::DestinationStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DestinationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PedestrianStatus* Arena::CreateMaybeMessage< ::apollo::planning::PedestrianStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PedestrianStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PullOverStatus* Arena::CreateMaybeMessage< ::apollo::planning::PullOverStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PullOverStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReroutingStatus* Arena::CreateMaybeMessage< ::apollo::planning::ReroutingStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReroutingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RightOfWayStatus* Arena::CreateMaybeMessage< ::apollo::planning::RightOfWayStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RightOfWayStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioStatus* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SidePassStatus* Arena::CreateMaybeMessage< ::apollo::planning::SidePassStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SidePassStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopSignStatus* Arena::CreateMaybeMessage< ::apollo::planning::StopSignStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StopSignStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightStatus* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficLightStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SidePassStopStatus* Arena::CreateMaybeMessage< ::apollo::planning::SidePassStopStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SidePassStopStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningStatus* Arena::CreateMaybeMessage< ::apollo::planning::PlanningStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
