// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/decision.proto

#include "modules/planning/proto/decision.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto;
namespace apollo {
namespace planning {
class TargetLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetLane> _instance;
} _TargetLane_default_instance_;
class ObjectIgnoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectIgnore> _instance;
} _ObjectIgnore_default_instance_;
class ObjectStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectStop> _instance;
} _ObjectStop_default_instance_;
class ObjectNudgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectNudge> _instance;
} _ObjectNudge_default_instance_;
class ObjectYieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectYield> _instance;
} _ObjectYield_default_instance_;
class ObjectFollowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectFollow> _instance;
} _ObjectFollow_default_instance_;
class ObjectOvertakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectOvertake> _instance;
} _ObjectOvertake_default_instance_;
class ObjectSidePassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectSidePass> _instance;
} _ObjectSidePass_default_instance_;
class ObjectAvoidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectAvoid> _instance;
} _ObjectAvoid_default_instance_;
class ObjectDecisionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDecisionType> _instance;
  const ::apollo::planning::ObjectIgnore* ignore_;
  const ::apollo::planning::ObjectStop* stop_;
  const ::apollo::planning::ObjectFollow* follow_;
  const ::apollo::planning::ObjectYield* yield_;
  const ::apollo::planning::ObjectOvertake* overtake_;
  const ::apollo::planning::ObjectNudge* nudge_;
  const ::apollo::planning::ObjectAvoid* avoid_;
} _ObjectDecisionType_default_instance_;
class ObjectDecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDecision> _instance;
} _ObjectDecision_default_instance_;
class ObjectDecisionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDecisions> _instance;
} _ObjectDecisions_default_instance_;
class MainStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainStop> _instance;
} _MainStop_default_instance_;
class EmergencyStopHardBrakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmergencyStopHardBrake> _instance;
} _EmergencyStopHardBrake_default_instance_;
class EmergencyStopCruiseToStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmergencyStopCruiseToStop> _instance;
} _EmergencyStopCruiseToStop_default_instance_;
class MainEmergencyStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainEmergencyStop> _instance;
  const ::apollo::planning::EmergencyStopHardBrake* hard_brake_;
  const ::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop_;
} _MainEmergencyStop_default_instance_;
class MainCruiseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainCruise> _instance;
} _MainCruise_default_instance_;
class MainChangeLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainChangeLane> _instance;
} _MainChangeLane_default_instance_;
class MainMissionCompleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainMissionComplete> _instance;
} _MainMissionComplete_default_instance_;
class MainNotReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainNotReady> _instance;
} _MainNotReady_default_instance_;
class MainParkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainParking> _instance;
} _MainParking_default_instance_;
class MainDecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MainDecision> _instance;
  const ::apollo::planning::MainCruise* cruise_;
  const ::apollo::planning::MainStop* stop_;
  const ::apollo::planning::MainEmergencyStop* estop_;
  const ::apollo::planning::MainChangeLane* change_lane_;
  const ::apollo::planning::MainMissionComplete* mission_complete_;
  const ::apollo::planning::MainNotReady* not_ready_;
  const ::apollo::planning::MainParking* parking_;
} _MainDecision_default_instance_;
class DecisionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionResult> _instance;
} _DecisionResult_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_DecisionResult_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DecisionResult_default_instance_;
    new (ptr) ::apollo::planning::DecisionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DecisionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DecisionResult_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DecisionResult_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_VehicleSignal_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto.base,}};

static void InitDefaultsscc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_EmergencyStopCruiseToStop_default_instance_;
    new (ptr) ::apollo::planning::EmergencyStopCruiseToStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::EmergencyStopCruiseToStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_EmergencyStopHardBrake_default_instance_;
    new (ptr) ::apollo::planning::EmergencyStopHardBrake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::EmergencyStopHardBrake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainChangeLane_default_instance_;
    new (ptr) ::apollo::planning::MainChangeLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainChangeLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainCruise_default_instance_;
    new (ptr) ::apollo::planning::MainCruise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainCruise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainDecision_default_instance_;
    new (ptr) ::apollo::planning::MainDecision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainDecision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainEmergencyStop_default_instance_;
    new (ptr) ::apollo::planning::MainEmergencyStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainEmergencyStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainMissionComplete_default_instance_;
    new (ptr) ::apollo::planning::MainMissionComplete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainMissionComplete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainNotReady_default_instance_;
    new (ptr) ::apollo::planning::MainNotReady();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainNotReady::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainParking_default_instance_;
    new (ptr) ::apollo::planning::MainParking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainParking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MainStop_default_instance_;
    new (ptr) ::apollo::planning::MainStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MainStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectAvoid_default_instance_;
    new (ptr) ::apollo::planning::ObjectAvoid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectAvoid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectDecision_default_instance_;
    new (ptr) ::apollo::planning::ObjectDecision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectDecision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectDecisionType_default_instance_;
    new (ptr) ::apollo::planning::ObjectDecisionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectDecisionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto.base,
      &scc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectDecisions_default_instance_;
    new (ptr) ::apollo::planning::ObjectDecisions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectDecisions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectFollow_default_instance_;
    new (ptr) ::apollo::planning::ObjectFollow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectFollow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectIgnore_default_instance_;
    new (ptr) ::apollo::planning::ObjectIgnore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectIgnore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectNudge_default_instance_;
    new (ptr) ::apollo::planning::ObjectNudge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectNudge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectOvertake_default_instance_;
    new (ptr) ::apollo::planning::ObjectOvertake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectOvertake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjectSidePass_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectSidePass_default_instance_;
    new (ptr) ::apollo::planning::ObjectSidePass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectSidePass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectSidePass_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectSidePass_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static void InitDefaultsscc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectStop_default_instance_;
    new (ptr) ::apollo::planning::ObjectStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObjectYield_default_instance_;
    new (ptr) ::apollo::planning::ObjectYield();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObjectYield::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TargetLane_default_instance_;
    new (ptr) ::apollo::planning::TargetLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TargetLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, speed_limit_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectIgnore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectIgnore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, reason_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, stop_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, wait_for_obstacle_),
  3,
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, distance_l_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, fence_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, fence_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, time_buffer_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, fence_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, fence_heading_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, fence_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, fence_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, time_buffer_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectSidePass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectSidePass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectSidePass, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectAvoid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectAvoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, ignore_),
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, stop_),
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, follow_),
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, yield_),
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, overtake_),
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, nudge_),
  offsetof(::apollo::planning::ObjectDecisionTypeDefaultTypeInternal, avoid_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, object_tag_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, perception_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, object_decision_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisions, decision_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, reason_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, reason_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, stop_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, change_lane_type_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EmergencyStopHardBrake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EmergencyStopHardBrake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EmergencyStopCruiseToStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EmergencyStopCruiseToStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, reason_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, reason_),
  offsetof(::apollo::planning::MainEmergencyStopDefaultTypeInternal, hard_brake_),
  offsetof(::apollo::planning::MainEmergencyStopDefaultTypeInternal, cruise_to_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, task_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainCruise, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainCruise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainCruise, change_lane_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, default_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, default_lane_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, target_lane_stop_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, stop_heading_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainNotReady, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainNotReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainNotReady, reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainParking, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainParking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainParking, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, cruise_),
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, stop_),
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, estop_),
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, change_lane_),
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, mission_complete_),
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, not_ready_),
  offsetof(::apollo::planning::MainDecisionDefaultTypeInternal, parking_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, target_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, task_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, main_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, object_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, vehicle_signal_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::planning::TargetLane)},
  { 13, 18, sizeof(::apollo::planning::ObjectIgnore)},
  { 18, 28, sizeof(::apollo::planning::ObjectStop)},
  { 33, 40, sizeof(::apollo::planning::ObjectNudge)},
  { 42, 51, sizeof(::apollo::planning::ObjectYield)},
  { 55, 63, sizeof(::apollo::planning::ObjectFollow)},
  { 66, 75, sizeof(::apollo::planning::ObjectOvertake)},
  { 79, 85, sizeof(::apollo::planning::ObjectSidePass)},
  { 86, 91, sizeof(::apollo::planning::ObjectAvoid)},
  { 91, 104, sizeof(::apollo::planning::ObjectDecisionType)},
  { 111, 119, sizeof(::apollo::planning::ObjectDecision)},
  { 122, 128, sizeof(::apollo::planning::ObjectDecisions)},
  { 129, 139, sizeof(::apollo::planning::MainStop)},
  { 144, 149, sizeof(::apollo::planning::EmergencyStopHardBrake)},
  { 149, 154, sizeof(::apollo::planning::EmergencyStopCruiseToStop)},
  { 154, 164, sizeof(::apollo::planning::MainEmergencyStop)},
  { 168, 174, sizeof(::apollo::planning::MainCruise)},
  { 175, 184, sizeof(::apollo::planning::MainChangeLane)},
  { 188, 195, sizeof(::apollo::planning::MainMissionComplete)},
  { 197, 203, sizeof(::apollo::planning::MainNotReady)},
  { 204, 210, sizeof(::apollo::planning::MainParking)},
  { 211, 225, sizeof(::apollo::planning::MainDecision)},
  { 233, 241, sizeof(::apollo::planning::DecisionResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TargetLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectIgnore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectNudge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectYield_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectFollow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectOvertake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectSidePass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectAvoid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectDecisionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectDecision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ObjectDecisions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_EmergencyStopHardBrake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_EmergencyStopCruiseToStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainEmergencyStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainCruise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainChangeLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainMissionComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainNotReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainParking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MainDecision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DecisionResult_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fdecision_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/planning/proto/decision.proto\022"
  "\017apollo.planning\032#modules/common/proto/g"
  "eometry.proto\032)modules/common/proto/vehi"
  "cle_signal.proto\032#modules/routing/proto/"
  "routing.proto\"M\n\nTargetLane\022\n\n\002id\030\001 \001(\t\022"
  "\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\022\023\n\013speed"
  "_limit\030\004 \001(\001\"\016\n\014ObjectIgnore\"\264\001\n\nObjectS"
  "top\0224\n\013reason_code\030\001 \001(\0162\037.apollo.planni"
  "ng.StopReasonCode\022\022\n\ndistance_s\030\002 \001(\001\022+\n"
  "\nstop_point\030\003 \001(\0132\027.apollo.common.PointE"
  "NU\022\024\n\014stop_heading\030\004 \001(\001\022\031\n\021wait_for_obs"
  "tacle\030\005 \003(\t\"\211\001\n\013ObjectNudge\022/\n\004type\030\001 \001("
  "\0162!.apollo.planning.ObjectNudge.Type\022\022\n\n"
  "distance_l\030\002 \001(\001\"5\n\004Type\022\016\n\nLEFT_NUDGE\020\001"
  "\022\017\n\013RIGHT_NUDGE\020\002\022\014\n\010NO_NUDGE\020\003\"{\n\013Objec"
  "tYield\022\022\n\ndistance_s\030\001 \001(\001\022,\n\013fence_poin"
  "t\030\002 \001(\0132\027.apollo.common.PointENU\022\025\n\rfenc"
  "e_heading\030\003 \001(\001\022\023\n\013time_buffer\030\004 \001(\001\"g\n\014"
  "ObjectFollow\022\022\n\ndistance_s\030\001 \001(\001\022,\n\013fenc"
  "e_point\030\002 \001(\0132\027.apollo.common.PointENU\022\025"
  "\n\rfence_heading\030\003 \001(\001\"~\n\016ObjectOvertake\022"
  "\022\n\ndistance_s\030\001 \001(\001\022,\n\013fence_point\030\002 \001(\013"
  "2\027.apollo.common.PointENU\022\025\n\rfence_headi"
  "ng\030\003 \001(\001\022\023\n\013time_buffer\030\004 \001(\001\"a\n\016ObjectS"
  "idePass\0222\n\004type\030\001 \001(\0162$.apollo.planning."
  "ObjectSidePass.Type\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n"
  "\005RIGHT\020\002\"\r\n\013ObjectAvoid\"\363\002\n\022ObjectDecisi"
  "onType\022/\n\006ignore\030\001 \001(\0132\035.apollo.planning"
  ".ObjectIgnoreH\000\022+\n\004stop\030\002 \001(\0132\033.apollo.p"
  "lanning.ObjectStopH\000\022/\n\006follow\030\003 \001(\0132\035.a"
  "pollo.planning.ObjectFollowH\000\022-\n\005yield\030\004"
  " \001(\0132\034.apollo.planning.ObjectYieldH\000\0223\n\010"
  "overtake\030\005 \001(\0132\037.apollo.planning.ObjectO"
  "vertakeH\000\022-\n\005nudge\030\006 \001(\0132\034.apollo.planni"
  "ng.ObjectNudgeH\000\022-\n\005avoid\030\007 \001(\0132\034.apollo"
  ".planning.ObjectAvoidH\000B\014\n\nobject_tag\"q\n"
  "\016ObjectDecision\022\n\n\002id\030\001 \001(\t\022\025\n\rperceptio"
  "n_id\030\002 \001(\005\022<\n\017object_decision\030\003 \003(\0132#.ap"
  "ollo.planning.ObjectDecisionType\"D\n\017Obje"
  "ctDecisions\0221\n\010decision\030\001 \003(\0132\037.apollo.p"
  "lanning.ObjectDecision\"\315\001\n\010MainStop\0224\n\013r"
  "eason_code\030\001 \001(\0162\037.apollo.planning.StopR"
  "easonCode\022\016\n\006reason\030\002 \001(\t\022+\n\nstop_point\030"
  "\003 \001(\0132\027.apollo.common.PointENU\022\024\n\014stop_h"
  "eading\030\004 \001(\001\0228\n\020change_lane_type\030\005 \001(\0162\036"
  ".apollo.routing.ChangeLaneType\"\030\n\026Emerge"
  "ncyStopHardBrake\"\033\n\031EmergencyStopCruiseT"
  "oStop\"\237\003\n\021MainEmergencyStop\022B\n\013reason_co"
  "de\030\001 \001(\0162-.apollo.planning.MainEmergency"
  "Stop.ReasonCode\022\016\n\006reason\030\002 \001(\t\022=\n\nhard_"
  "brake\030\003 \001(\0132\'.apollo.planning.EmergencyS"
  "topHardBrakeH\000\022D\n\016cruise_to_stop\030\004 \001(\0132*"
  ".apollo.planning.EmergencyStopCruiseToSt"
  "opH\000\"\250\001\n\nReasonCode\022\035\n\031ESTOP_REASON_INTE"
  "RNAL_ERR\020\001\022\032\n\026ESTOP_REASON_COLLISION\020\002\022\035"
  "\n\031ESTOP_REASON_ST_FIND_PATH\020\003\022!\n\035ESTOP_R"
  "EASON_ST_MAKE_DECISION\020\004\022\035\n\031ESTOP_REASON"
  "_SENSOR_ERROR\020\005B\006\n\004task\"F\n\nMainCruise\0228\n"
  "\020change_lane_type\030\001 \001(\0162\036.apollo.routing"
  ".ChangeLaneType\"\377\001\n\016MainChangeLane\0222\n\004ty"
  "pe\030\001 \001(\0162$.apollo.planning.MainChangeLan"
  "e.Type\0221\n\014default_lane\030\002 \003(\0132\033.apollo.pl"
  "anning.TargetLane\0224\n\021default_lane_stop\030\003"
  " \001(\0132\031.apollo.planning.MainStop\0223\n\020targe"
  "t_lane_stop\030\004 \001(\0132\031.apollo.planning.Main"
  "Stop\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"X\n\023Mai"
  "nMissionComplete\022+\n\nstop_point\030\001 \001(\0132\027.a"
  "pollo.common.PointENU\022\024\n\014stop_heading\030\002 "
  "\001(\001\"\036\n\014MainNotReady\022\016\n\006reason\030\001 \001(\t\"j\n\013M"
  "ainParking\022:\n\006status\030\001 \001(\0162*.apollo.plan"
  "ning.MainParking.ParkingStatus\"\037\n\rParkin"
  "gStatus\022\016\n\nIN_PARKING\020\001\"\276\003\n\014MainDecision"
  "\022-\n\006cruise\030\001 \001(\0132\033.apollo.planning.MainC"
  "ruiseH\000\022)\n\004stop\030\002 \001(\0132\031.apollo.planning."
  "MainStopH\000\0223\n\005estop\030\003 \001(\0132\".apollo.plann"
  "ing.MainEmergencyStopH\000\022:\n\013change_lane\030\004"
  " \001(\0132\037.apollo.planning.MainChangeLaneB\002\030"
  "\001H\000\022@\n\020mission_complete\030\006 \001(\0132$.apollo.p"
  "lanning.MainMissionCompleteH\000\0222\n\tnot_rea"
  "dy\030\007 \001(\0132\035.apollo.planning.MainNotReadyH"
  "\000\022/\n\007parking\030\010 \001(\0132\034.apollo.planning.Mai"
  "nParkingH\000\0224\n\013target_lane\030\005 \003(\0132\033.apollo"
  ".planning.TargetLaneB\002\030\001B\006\n\004task\"\267\001\n\016Dec"
  "isionResult\0224\n\rmain_decision\030\001 \001(\0132\035.apo"
  "llo.planning.MainDecision\0229\n\017object_deci"
  "sion\030\002 \001(\0132 .apollo.planning.ObjectDecis"
  "ions\0224\n\016vehicle_signal\030\003 \001(\0132\034.apollo.co"
  "mmon.VehicleSignal*\202\004\n\016StopReasonCode\022\034\n"
  "\030STOP_REASON_HEAD_VEHICLE\020\001\022\033\n\027STOP_REAS"
  "ON_DESTINATION\020\002\022\032\n\026STOP_REASON_PEDESTRI"
  "AN\020\003\022\030\n\024STOP_REASON_OBSTACLE\020\004\022\032\n\026STOP_R"
  "EASON_PREPARKING\020\005\022\026\n\022STOP_REASON_SIGNAL"
  "\020d\022\031\n\025STOP_REASON_STOP_SIGN\020e\022\032\n\026STOP_RE"
  "ASON_YIELD_SIGN\020f\022\032\n\026STOP_REASON_CLEAR_Z"
  "ONE\020g\022\031\n\025STOP_REASON_CROSSWALK\020h\022\027\n\023STOP"
  "_REASON_CREEPER\020i\022\035\n\031STOP_REASON_REFEREN"
  "CE_END\020j\022\035\n\031STOP_REASON_YELLOW_SIGNAL\020k\022"
  "\031\n\025STOP_REASON_PULL_OVER\020l\022\037\n\033STOP_REASO"
  "N_SIDEPASS_SAFETY\020m\022$\n\037STOP_REASON_PRE_O"
  "PEN_SPACE_STOP\020\310\001\022$\n\037STOP_REASON_LANE_CH"
  "ANGE_URGENCY\020\311\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_sccs[23] = {
  &scc_info_DecisionResult_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectSidePass_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto.base,
  &scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fdecision_2eproto, "modules/planning/proto/decision.proto", 4015,
  &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_deps, 23, 3,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto, 23, file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fdecision_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectNudge_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[0];
}
bool ObjectNudge_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectNudge_Type ObjectNudge::LEFT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::RIGHT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::NO_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::Type_MIN;
constexpr ObjectNudge_Type ObjectNudge::Type_MAX;
constexpr int ObjectNudge::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectSidePass_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[1];
}
bool ObjectSidePass_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectSidePass_Type ObjectSidePass::LEFT;
constexpr ObjectSidePass_Type ObjectSidePass::RIGHT;
constexpr ObjectSidePass_Type ObjectSidePass::Type_MIN;
constexpr ObjectSidePass_Type ObjectSidePass::Type_MAX;
constexpr int ObjectSidePass::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[2];
}
bool MainEmergencyStop_ReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_INTERNAL_ERR;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_COLLISION;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_FIND_PATH;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_MAKE_DECISION;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_SENSOR_ERROR;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MIN;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MAX;
constexpr int MainEmergencyStop::ReasonCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainChangeLane_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[3];
}
bool MainChangeLane_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MainChangeLane_Type MainChangeLane::LEFT;
constexpr MainChangeLane_Type MainChangeLane::RIGHT;
constexpr MainChangeLane_Type MainChangeLane::Type_MIN;
constexpr MainChangeLane_Type MainChangeLane::Type_MAX;
constexpr int MainChangeLane::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainParking_ParkingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[4];
}
bool MainParking_ParkingStatus_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MainParking_ParkingStatus MainParking::IN_PARKING;
constexpr MainParking_ParkingStatus MainParking::ParkingStatus_MIN;
constexpr MainParking_ParkingStatus MainParking::ParkingStatus_MAX;
constexpr int MainParking::ParkingStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[5];
}
bool StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 200:
    case 201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TargetLane::InitAsDefaultInstance() {
}
class TargetLane::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetLane>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TargetLane::TargetLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TargetLane)
}
TargetLane::TargetLane(const TargetLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TargetLane)
}

void TargetLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(speed_limit_));
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:apollo.planning.TargetLane)
  SharedDtor();
}

void TargetLane::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TargetLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetLane& TargetLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetLane_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TargetLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TargetLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.TargetLane.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TargetLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TargetLane.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  // optional double speed_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TargetLane)
  return target;
}

size_t TargetLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TargetLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TargetLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TargetLane)
    MergeFrom(*source);
  }
}

void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {
  return true;
}

void TargetLane::InternalSwap(TargetLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(speed_limit_, other->speed_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectIgnore::InitAsDefaultInstance() {
}
class ObjectIgnore::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectIgnore>()._has_bits_);
};

ObjectIgnore::ObjectIgnore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectIgnore)
}
ObjectIgnore::ObjectIgnore(const ObjectIgnore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectIgnore)
}

void ObjectIgnore::SharedCtor() {
}

ObjectIgnore::~ObjectIgnore() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectIgnore)
  SharedDtor();
}

void ObjectIgnore::SharedDtor() {
}

void ObjectIgnore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectIgnore& ObjectIgnore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectIgnore_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectIgnore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectIgnore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectIgnore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectIgnore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectIgnore)
  return target;
}

size_t ObjectIgnore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectIgnore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectIgnore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectIgnore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectIgnore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectIgnore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectIgnore)
    MergeFrom(*source);
  }
}

void ObjectIgnore::MergeFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectIgnore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIgnore::CopyFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIgnore::IsInitialized() const {
  return true;
}

void ObjectIgnore::InternalSwap(ObjectIgnore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectIgnore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectStop::InitAsDefaultInstance() {
  ::apollo::planning::_ObjectStop_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class ObjectStop::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectStop>()._has_bits_);
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& stop_point(const ObjectStop* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::PointENU&
ObjectStop::_Internal::stop_point(const ObjectStop* msg) {
  return *msg->stop_point_;
}
void ObjectStop::clear_stop_point() {
  if (stop_point_ != nullptr) stop_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjectStop::ObjectStop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectStop)
}
ObjectStop::ObjectStop(const ObjectStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      wait_for_obstacle_(from.wait_for_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    stop_point_ = new ::apollo::common::PointENU(*from.stop_point_);
  } else {
    stop_point_ = nullptr;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_code_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(reason_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectStop)
}

void ObjectStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_heading_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(stop_heading_));
  reason_code_ = 1;
}

ObjectStop::~ObjectStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectStop)
  SharedDtor();
}

void ObjectStop::SharedDtor() {
  if (this != internal_default_instance()) delete stop_point_;
}

void ObjectStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectStop& ObjectStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wait_for_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != nullptr);
    stop_point_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_heading_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(stop_heading_));
    reason_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.StopReasonCode reason_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopReasonCode_IsValid(val))) {
            _internal_set_reason_code(static_cast<::apollo::planning::StopReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double distance_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance_s(&has_bits);
          distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU stop_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_stop_heading(&has_bits);
          stop_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string wait_for_obstacle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wait_for_obstacle();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.ObjectStop.wait_for_obstacle");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason_code(), target);
  }

  // optional double distance_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stop_point(this), target, stream);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_heading(), target);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0, n = this->_internal_wait_for_obstacle_size(); i < n; i++) {
    const auto& s = this->_internal_wait_for_obstacle(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectStop.wait_for_obstacle");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectStop)
  return target;
}

size_t ObjectStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string wait_for_obstacle = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(wait_for_obstacle_.size());
  for (int i = 0, n = wait_for_obstacle_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      wait_for_obstacle_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.PointENU stop_point = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_point_);
    }

    // optional double distance_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double stop_heading = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.StopReasonCode reason_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectStop)
    MergeFrom(*source);
  }
}

void ObjectStop::MergeFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wait_for_obstacle_.MergeFrom(from.wait_for_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_heading_ = from.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStop::CopyFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStop::IsInitialized() const {
  return true;
}

void ObjectStop::InternalSwap(ObjectStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wait_for_obstacle_.InternalSwap(&other->wait_for_obstacle_);
  swap(stop_point_, other->stop_point_);
  swap(distance_s_, other->distance_s_);
  swap(stop_heading_, other->stop_heading_);
  swap(reason_code_, other->reason_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectNudge::InitAsDefaultInstance() {
}
class ObjectNudge::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectNudge>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectNudge::ObjectNudge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectNudge)
}
ObjectNudge::ObjectNudge(const ObjectNudge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_l_, &from.distance_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&distance_l_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectNudge)
}

void ObjectNudge::SharedCtor() {
  distance_l_ = 0;
  type_ = 1;
}

ObjectNudge::~ObjectNudge() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectNudge)
  SharedDtor();
}

void ObjectNudge::SharedDtor() {
}

void ObjectNudge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectNudge& ObjectNudge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectNudge_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectNudge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectNudge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    distance_l_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectNudge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ObjectNudge.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ObjectNudge_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::ObjectNudge_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double distance_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_distance_l(&has_bits);
          distance_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectNudge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectNudge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ObjectNudge.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double distance_l = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectNudge)
  return target;
}

size_t ObjectNudge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectNudge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double distance_l = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.ObjectNudge.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectNudge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectNudge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectNudge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectNudge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectNudge)
    MergeFrom(*source);
  }
}

void ObjectNudge::MergeFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      distance_l_ = from.distance_l_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectNudge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectNudge::CopyFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNudge::IsInitialized() const {
  return true;
}

void ObjectNudge::InternalSwap(ObjectNudge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(distance_l_, other->distance_l_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectNudge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectYield::InitAsDefaultInstance() {
  ::apollo::planning::_ObjectYield_default_instance_._instance.get_mutable()->fence_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class ObjectYield::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectYield>()._has_bits_);
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& fence_point(const ObjectYield* msg);
  static void set_has_fence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fence_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
ObjectYield::_Internal::fence_point(const ObjectYield* msg) {
  return *msg->fence_point_;
}
void ObjectYield::clear_fence_point() {
  if (fence_point_ != nullptr) fence_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjectYield::ObjectYield()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectYield)
}
ObjectYield::ObjectYield(const ObjectYield& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fence_point()) {
    fence_point_ = new ::apollo::common::PointENU(*from.fence_point_);
  } else {
    fence_point_ = nullptr;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectYield)
}

void ObjectYield::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&fence_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_buffer_) -
      reinterpret_cast<char*>(&fence_point_)) + sizeof(time_buffer_));
}

ObjectYield::~ObjectYield() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectYield)
  SharedDtor();
}

void ObjectYield::SharedDtor() {
  if (this != internal_default_instance()) delete fence_point_;
}

void ObjectYield::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectYield& ObjectYield::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectYield_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectYield::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectYield)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fence_point_ != nullptr);
    fence_point_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_buffer_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectYield::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double distance_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance_s(&has_bits);
          distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU fence_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double fence_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_fence_heading(&has_bits);
          fence_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_time_buffer(&has_bits);
          time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectYield::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectYield)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fence_point(this), target, stream);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectYield)
  return target;
}

size_t ObjectYield::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectYield)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.PointENU fence_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fence_point_);
    }

    // optional double distance_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectYield::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectYield* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectYield>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectYield)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectYield)
    MergeFrom(*source);
  }
}

void ObjectYield::MergeFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from._internal_fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_buffer_ = from.time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectYield::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectYield::CopyFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectYield::IsInitialized() const {
  return true;
}

void ObjectYield::InternalSwap(ObjectYield* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fence_point_, other->fence_point_);
  swap(distance_s_, other->distance_s_);
  swap(fence_heading_, other->fence_heading_);
  swap(time_buffer_, other->time_buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectYield::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectFollow::InitAsDefaultInstance() {
  ::apollo::planning::_ObjectFollow_default_instance_._instance.get_mutable()->fence_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class ObjectFollow::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectFollow>()._has_bits_);
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& fence_point(const ObjectFollow* msg);
  static void set_has_fence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fence_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::PointENU&
ObjectFollow::_Internal::fence_point(const ObjectFollow* msg) {
  return *msg->fence_point_;
}
void ObjectFollow::clear_fence_point() {
  if (fence_point_ != nullptr) fence_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjectFollow::ObjectFollow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectFollow)
}
ObjectFollow::ObjectFollow(const ObjectFollow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fence_point()) {
    fence_point_ = new ::apollo::common::PointENU(*from.fence_point_);
  } else {
    fence_point_ = nullptr;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&fence_heading_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(fence_heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectFollow)
}

void ObjectFollow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&fence_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fence_heading_) -
      reinterpret_cast<char*>(&fence_point_)) + sizeof(fence_heading_));
}

ObjectFollow::~ObjectFollow() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectFollow)
  SharedDtor();
}

void ObjectFollow::SharedDtor() {
  if (this != internal_default_instance()) delete fence_point_;
}

void ObjectFollow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectFollow& ObjectFollow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectFollow_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectFollow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fence_point_ != nullptr);
    fence_point_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fence_heading_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(fence_heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectFollow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double distance_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance_s(&has_bits);
          distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU fence_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double fence_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_fence_heading(&has_bits);
          fence_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectFollow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectFollow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fence_point(this), target, stream);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fence_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectFollow)
  return target;
}

size_t ObjectFollow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectFollow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.PointENU fence_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fence_point_);
    }

    // optional double distance_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectFollow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectFollow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectFollow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectFollow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectFollow)
    MergeFrom(*source);
  }
}

void ObjectFollow::MergeFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from._internal_fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectFollow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFollow::CopyFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFollow::IsInitialized() const {
  return true;
}

void ObjectFollow::InternalSwap(ObjectFollow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fence_point_, other->fence_point_);
  swap(distance_s_, other->distance_s_);
  swap(fence_heading_, other->fence_heading_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectFollow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectOvertake::InitAsDefaultInstance() {
  ::apollo::planning::_ObjectOvertake_default_instance_._instance.get_mutable()->fence_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class ObjectOvertake::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectOvertake>()._has_bits_);
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& fence_point(const ObjectOvertake* msg);
  static void set_has_fence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fence_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
ObjectOvertake::_Internal::fence_point(const ObjectOvertake* msg) {
  return *msg->fence_point_;
}
void ObjectOvertake::clear_fence_point() {
  if (fence_point_ != nullptr) fence_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjectOvertake::ObjectOvertake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectOvertake)
}
ObjectOvertake::ObjectOvertake(const ObjectOvertake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fence_point()) {
    fence_point_ = new ::apollo::common::PointENU(*from.fence_point_);
  } else {
    fence_point_ = nullptr;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectOvertake)
}

void ObjectOvertake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&fence_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_buffer_) -
      reinterpret_cast<char*>(&fence_point_)) + sizeof(time_buffer_));
}

ObjectOvertake::~ObjectOvertake() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectOvertake)
  SharedDtor();
}

void ObjectOvertake::SharedDtor() {
  if (this != internal_default_instance()) delete fence_point_;
}

void ObjectOvertake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectOvertake& ObjectOvertake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectOvertake_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectOvertake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectOvertake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fence_point_ != nullptr);
    fence_point_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_buffer_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectOvertake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double distance_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance_s(&has_bits);
          distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU fence_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double fence_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_fence_heading(&has_bits);
          fence_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double time_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_time_buffer(&has_bits);
          time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectOvertake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectOvertake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fence_point(this), target, stream);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectOvertake)
  return target;
}

size_t ObjectOvertake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectOvertake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.PointENU fence_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fence_point_);
    }

    // optional double distance_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectOvertake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOvertake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectOvertake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectOvertake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectOvertake)
    MergeFrom(*source);
  }
}

void ObjectOvertake::MergeFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from._internal_fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_buffer_ = from.time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectOvertake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOvertake::CopyFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOvertake::IsInitialized() const {
  return true;
}

void ObjectOvertake::InternalSwap(ObjectOvertake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fence_point_, other->fence_point_);
  swap(distance_s_, other->distance_s_);
  swap(fence_heading_, other->fence_heading_);
  swap(time_buffer_, other->time_buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectOvertake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectSidePass::InitAsDefaultInstance() {
}
class ObjectSidePass::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSidePass>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectSidePass::ObjectSidePass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectSidePass)
}
ObjectSidePass::ObjectSidePass(const ObjectSidePass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectSidePass)
}

void ObjectSidePass::SharedCtor() {
  type_ = 1;
}

ObjectSidePass::~ObjectSidePass() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectSidePass)
  SharedDtor();
}

void ObjectSidePass::SharedDtor() {
}

void ObjectSidePass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectSidePass& ObjectSidePass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectSidePass_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectSidePass::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectSidePass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectSidePass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ObjectSidePass.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ObjectSidePass_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::ObjectSidePass_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectSidePass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectSidePass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectSidePass)
  return target;
}

size_t ObjectSidePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectSidePass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSidePass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSidePass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectSidePass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectSidePass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectSidePass)
    MergeFrom(*source);
  }
}

void ObjectSidePass::MergeFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void ObjectSidePass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSidePass::CopyFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSidePass::IsInitialized() const {
  return true;
}

void ObjectSidePass::InternalSwap(ObjectSidePass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSidePass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectAvoid::InitAsDefaultInstance() {
}
class ObjectAvoid::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectAvoid>()._has_bits_);
};

ObjectAvoid::ObjectAvoid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectAvoid)
}
ObjectAvoid::ObjectAvoid(const ObjectAvoid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectAvoid)
}

void ObjectAvoid::SharedCtor() {
}

ObjectAvoid::~ObjectAvoid() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectAvoid)
  SharedDtor();
}

void ObjectAvoid::SharedDtor() {
}

void ObjectAvoid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectAvoid& ObjectAvoid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectAvoid_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectAvoid::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectAvoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectAvoid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectAvoid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectAvoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectAvoid)
  return target;
}

size_t ObjectAvoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectAvoid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectAvoid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectAvoid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectAvoid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectAvoid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectAvoid)
    MergeFrom(*source);
  }
}

void ObjectAvoid::MergeFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectAvoid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAvoid::CopyFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAvoid::IsInitialized() const {
  return true;
}

void ObjectAvoid::InternalSwap(ObjectAvoid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAvoid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDecisionType::InitAsDefaultInstance() {
  ::apollo::planning::_ObjectDecisionType_default_instance_.ignore_ = const_cast< ::apollo::planning::ObjectIgnore*>(
      ::apollo::planning::ObjectIgnore::internal_default_instance());
  ::apollo::planning::_ObjectDecisionType_default_instance_.stop_ = const_cast< ::apollo::planning::ObjectStop*>(
      ::apollo::planning::ObjectStop::internal_default_instance());
  ::apollo::planning::_ObjectDecisionType_default_instance_.follow_ = const_cast< ::apollo::planning::ObjectFollow*>(
      ::apollo::planning::ObjectFollow::internal_default_instance());
  ::apollo::planning::_ObjectDecisionType_default_instance_.yield_ = const_cast< ::apollo::planning::ObjectYield*>(
      ::apollo::planning::ObjectYield::internal_default_instance());
  ::apollo::planning::_ObjectDecisionType_default_instance_.overtake_ = const_cast< ::apollo::planning::ObjectOvertake*>(
      ::apollo::planning::ObjectOvertake::internal_default_instance());
  ::apollo::planning::_ObjectDecisionType_default_instance_.nudge_ = const_cast< ::apollo::planning::ObjectNudge*>(
      ::apollo::planning::ObjectNudge::internal_default_instance());
  ::apollo::planning::_ObjectDecisionType_default_instance_.avoid_ = const_cast< ::apollo::planning::ObjectAvoid*>(
      ::apollo::planning::ObjectAvoid::internal_default_instance());
}
class ObjectDecisionType::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDecisionType>()._has_bits_);
  static const ::apollo::planning::ObjectIgnore& ignore(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectStop& stop(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectFollow& follow(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectYield& yield(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectOvertake& overtake(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectNudge& nudge(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectAvoid& avoid(const ObjectDecisionType* msg);
};

const ::apollo::planning::ObjectIgnore&
ObjectDecisionType::_Internal::ignore(const ObjectDecisionType* msg) {
  return *msg->object_tag_.ignore_;
}
const ::apollo::planning::ObjectStop&
ObjectDecisionType::_Internal::stop(const ObjectDecisionType* msg) {
  return *msg->object_tag_.stop_;
}
const ::apollo::planning::ObjectFollow&
ObjectDecisionType::_Internal::follow(const ObjectDecisionType* msg) {
  return *msg->object_tag_.follow_;
}
const ::apollo::planning::ObjectYield&
ObjectDecisionType::_Internal::yield(const ObjectDecisionType* msg) {
  return *msg->object_tag_.yield_;
}
const ::apollo::planning::ObjectOvertake&
ObjectDecisionType::_Internal::overtake(const ObjectDecisionType* msg) {
  return *msg->object_tag_.overtake_;
}
const ::apollo::planning::ObjectNudge&
ObjectDecisionType::_Internal::nudge(const ObjectDecisionType* msg) {
  return *msg->object_tag_.nudge_;
}
const ::apollo::planning::ObjectAvoid&
ObjectDecisionType::_Internal::avoid(const ObjectDecisionType* msg) {
  return *msg->object_tag_.avoid_;
}
void ObjectDecisionType::set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (ignore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ignore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ignore, submessage_arena);
    }
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.ignore)
}
void ObjectDecisionType::set_allocated_stop(::apollo::planning::ObjectStop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.stop)
}
void ObjectDecisionType::set_allocated_follow(::apollo::planning::ObjectFollow* follow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (follow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      follow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow, submessage_arena);
    }
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.follow)
}
void ObjectDecisionType::set_allocated_yield(::apollo::planning::ObjectYield* yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield, submessage_arena);
    }
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.yield)
}
void ObjectDecisionType::set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (overtake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overtake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overtake, submessage_arena);
    }
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.overtake)
}
void ObjectDecisionType::set_allocated_nudge(::apollo::planning::ObjectNudge* nudge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (nudge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nudge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nudge, submessage_arena);
    }
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.nudge)
}
void ObjectDecisionType::set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (avoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avoid, submessage_arena);
    }
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.avoid)
}
ObjectDecisionType::ObjectDecisionType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectDecisionType)
}
ObjectDecisionType::ObjectDecisionType(const ObjectDecisionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_object_tag();
  switch (from.object_tag_case()) {
    case kIgnore: {
      _internal_mutable_ignore()->::apollo::planning::ObjectIgnore::MergeFrom(from._internal_ignore());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::ObjectStop::MergeFrom(from._internal_stop());
      break;
    }
    case kFollow: {
      _internal_mutable_follow()->::apollo::planning::ObjectFollow::MergeFrom(from._internal_follow());
      break;
    }
    case kYield: {
      _internal_mutable_yield()->::apollo::planning::ObjectYield::MergeFrom(from._internal_yield());
      break;
    }
    case kOvertake: {
      _internal_mutable_overtake()->::apollo::planning::ObjectOvertake::MergeFrom(from._internal_overtake());
      break;
    }
    case kNudge: {
      _internal_mutable_nudge()->::apollo::planning::ObjectNudge::MergeFrom(from._internal_nudge());
      break;
    }
    case kAvoid: {
      _internal_mutable_avoid()->::apollo::planning::ObjectAvoid::MergeFrom(from._internal_avoid());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecisionType)
}

void ObjectDecisionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  clear_has_object_tag();
}

ObjectDecisionType::~ObjectDecisionType() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecisionType)
  SharedDtor();
}

void ObjectDecisionType::SharedDtor() {
  if (has_object_tag()) {
    clear_object_tag();
  }
}

void ObjectDecisionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDecisionType& ObjectDecisionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectDecisionType::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ObjectDecisionType)
  switch (object_tag_case()) {
    case kIgnore: {
      delete object_tag_.ignore_;
      break;
    }
    case kStop: {
      delete object_tag_.stop_;
      break;
    }
    case kFollow: {
      delete object_tag_.follow_;
      break;
    }
    case kYield: {
      delete object_tag_.yield_;
      break;
    }
    case kOvertake: {
      delete object_tag_.overtake_;
      break;
    }
    case kNudge: {
      delete object_tag_.nudge_;
      break;
    }
    case kAvoid: {
      delete object_tag_.avoid_;
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void ObjectDecisionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecisionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_object_tag();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectDecisionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ObjectIgnore ignore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ignore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectStop stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectFollow follow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_follow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectYield yield = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectOvertake overtake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overtake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectNudge nudge = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nudge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectAvoid avoid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_avoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDecisionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecisionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (object_tag_case()) {
    case kIgnore: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::ignore(this), target, stream);
      break;
    }
    case kStop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::stop(this), target, stream);
      break;
    }
    case kFollow: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::follow(this), target, stream);
      break;
    }
    case kYield: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::yield(this), target, stream);
      break;
    }
    case kOvertake: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::overtake(this), target, stream);
      break;
    }
    case kNudge: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::nudge(this), target, stream);
      break;
    }
    case kAvoid: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::avoid(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecisionType)
  return target;
}

size_t ObjectDecisionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecisionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (object_tag_case()) {
    // optional .apollo.planning.ObjectIgnore ignore = 1;
    case kIgnore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.ignore_);
      break;
    }
    // optional .apollo.planning.ObjectStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.stop_);
      break;
    }
    // optional .apollo.planning.ObjectFollow follow = 3;
    case kFollow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.follow_);
      break;
    }
    // optional .apollo.planning.ObjectYield yield = 4;
    case kYield: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.yield_);
      break;
    }
    // optional .apollo.planning.ObjectOvertake overtake = 5;
    case kOvertake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.overtake_);
      break;
    }
    // optional .apollo.planning.ObjectNudge nudge = 6;
    case kNudge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.nudge_);
      break;
    }
    // optional .apollo.planning.ObjectAvoid avoid = 7;
    case kAvoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_tag_.avoid_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDecisionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecisionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDecisionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectDecisionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectDecisionType)
    MergeFrom(*source);
  }
}

void ObjectDecisionType::MergeFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.object_tag_case()) {
    case kIgnore: {
      _internal_mutable_ignore()->::apollo::planning::ObjectIgnore::MergeFrom(from._internal_ignore());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::ObjectStop::MergeFrom(from._internal_stop());
      break;
    }
    case kFollow: {
      _internal_mutable_follow()->::apollo::planning::ObjectFollow::MergeFrom(from._internal_follow());
      break;
    }
    case kYield: {
      _internal_mutable_yield()->::apollo::planning::ObjectYield::MergeFrom(from._internal_yield());
      break;
    }
    case kOvertake: {
      _internal_mutable_overtake()->::apollo::planning::ObjectOvertake::MergeFrom(from._internal_overtake());
      break;
    }
    case kNudge: {
      _internal_mutable_nudge()->::apollo::planning::ObjectNudge::MergeFrom(from._internal_nudge());
      break;
    }
    case kAvoid: {
      _internal_mutable_avoid()->::apollo::planning::ObjectAvoid::MergeFrom(from._internal_avoid());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
}

void ObjectDecisionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisionType::CopyFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisionType::IsInitialized() const {
  return true;
}

void ObjectDecisionType::InternalSwap(ObjectDecisionType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(object_tag_, other->object_tag_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDecisionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDecision::InitAsDefaultInstance() {
}
class ObjectDecision::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDecision>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_perception_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectDecision::ObjectDecision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectDecision)
}
ObjectDecision::ObjectDecision(const ObjectDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      object_decision_(from.object_decision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  perception_id_ = from.perception_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecision)
}

void ObjectDecision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  perception_id_ = 0;
}

ObjectDecision::~ObjectDecision() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecision)
  SharedDtor();
}

void ObjectDecision::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectDecision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDecision& ObjectDecision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_decision_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  perception_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectDecision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.ObjectDecision.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 perception_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_perception_id(&has_bits);
          perception_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDecision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectDecision.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional int32 perception_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_perception_id(), target);
  }

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_decision_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_object_decision(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecision)
  return target;
}

size_t ObjectDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  total_size += 1UL * this->_internal_object_decision_size();
  for (const auto& msg : this->object_decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional int32 perception_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_perception_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDecision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDecision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectDecision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectDecision)
    MergeFrom(*source);
  }
}

void ObjectDecision::MergeFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_decision_.MergeFrom(from.object_decision_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      perception_id_ = from.perception_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDecision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecision::CopyFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecision::IsInitialized() const {
  return true;
}

void ObjectDecision::InternalSwap(ObjectDecision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_decision_.InternalSwap(&other->object_decision_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(perception_id_, other->perception_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDecision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDecisions::InitAsDefaultInstance() {
}
class ObjectDecisions::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDecisions>()._has_bits_);
};

ObjectDecisions::ObjectDecisions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObjectDecisions)
}
ObjectDecisions::ObjectDecisions(const ObjectDecisions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      decision_(from.decision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecisions)
}

void ObjectDecisions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto.base);
}

ObjectDecisions::~ObjectDecisions() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecisions)
  SharedDtor();
}

void ObjectDecisions::SharedDtor() {
}

void ObjectDecisions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDecisions& ObjectDecisions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDecisions_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void ObjectDecisions::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecisions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decision_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjectDecisions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.ObjectDecision decision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDecisions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecisions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_decision_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_decision(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecisions)
  return target;
}

size_t ObjectDecisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecisions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ObjectDecision decision = 1;
  total_size += 1UL * this->_internal_decision_size();
  for (const auto& msg : this->decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDecisions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecisions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDecisions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObjectDecisions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObjectDecisions)
    MergeFrom(*source);
  }
}

void ObjectDecisions::MergeFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decision_.MergeFrom(from.decision_);
}

void ObjectDecisions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisions::CopyFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisions::IsInitialized() const {
  return true;
}

void ObjectDecisions::InternalSwap(ObjectDecisions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decision_.InternalSwap(&other->decision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDecisions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainStop::InitAsDefaultInstance() {
  ::apollo::planning::_MainStop_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class MainStop::_Internal {
 public:
  using HasBits = decltype(std::declval<MainStop>()._has_bits_);
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::PointENU& stop_point(const MainStop* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
MainStop::_Internal::stop_point(const MainStop* msg) {
  return *msg->stop_point_;
}
void MainStop::clear_stop_point() {
  if (stop_point_ != nullptr) stop_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MainStop::MainStop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainStop)
}
MainStop::MainStop(const MainStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from._internal_has_stop_point()) {
    stop_point_ = new ::apollo::common::PointENU(*from.stop_point_);
  } else {
    stop_point_ = nullptr;
  }
  ::memcpy(&stop_heading_, &from.stop_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_code_) -
    reinterpret_cast<char*>(&stop_heading_)) + sizeof(reason_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainStop)
}

void MainStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_lane_type_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(change_lane_type_));
  reason_code_ = 1;
}

MainStop::~MainStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainStop)
  SharedDtor();
}

void MainStop::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stop_point_;
}

void MainStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainStop& MainStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stop_point_ != nullptr);
      stop_point_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&stop_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_lane_type_) -
        reinterpret_cast<char*>(&stop_heading_)) + sizeof(change_lane_type_));
    reason_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.StopReasonCode reason_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopReasonCode_IsValid(val))) {
            _internal_set_reason_code(static_cast<::apollo::planning::StopReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.MainStop.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU stop_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_stop_heading(&has_bits);
          stop_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainStop.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stop_point(this), target, stream);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_heading(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainStop)
  return target;
}

size_t MainStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .apollo.common.PointENU stop_point = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_point_);
    }

    // optional double stop_heading = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

    // optional .apollo.planning.StopReasonCode reason_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  const MainStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainStop)
    MergeFrom(*source);
  }
}

void MainStop::MergeFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000004u) {
      stop_heading_ = from.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_lane_type_ = from.change_lane_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainStop::CopyFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainStop::IsInitialized() const {
  return true;
}

void MainStop::InternalSwap(MainStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stop_point_, other->stop_point_);
  swap(stop_heading_, other->stop_heading_);
  swap(change_lane_type_, other->change_lane_type_);
  swap(reason_code_, other->reason_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmergencyStopHardBrake::InitAsDefaultInstance() {
}
class EmergencyStopHardBrake::_Internal {
 public:
  using HasBits = decltype(std::declval<EmergencyStopHardBrake>()._has_bits_);
};

EmergencyStopHardBrake::EmergencyStopHardBrake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EmergencyStopHardBrake)
}
EmergencyStopHardBrake::EmergencyStopHardBrake(const EmergencyStopHardBrake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::SharedCtor() {
}

EmergencyStopHardBrake::~EmergencyStopHardBrake() {
  // @@protoc_insertion_point(destructor:apollo.planning.EmergencyStopHardBrake)
  SharedDtor();
}

void EmergencyStopHardBrake::SharedDtor() {
}

void EmergencyStopHardBrake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmergencyStopHardBrake& EmergencyStopHardBrake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmergencyStopHardBrake_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void EmergencyStopHardBrake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EmergencyStopHardBrake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EmergencyStopHardBrake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmergencyStopHardBrake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EmergencyStopHardBrake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EmergencyStopHardBrake)
  return target;
}

size_t EmergencyStopHardBrake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EmergencyStopHardBrake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmergencyStopHardBrake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EmergencyStopHardBrake)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStopHardBrake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmergencyStopHardBrake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EmergencyStopHardBrake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EmergencyStopHardBrake)
    MergeFrom(*source);
  }
}

void EmergencyStopHardBrake::MergeFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EmergencyStopHardBrake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStopHardBrake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopHardBrake::CopyFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopHardBrake::IsInitialized() const {
  return true;
}

void EmergencyStopHardBrake::InternalSwap(EmergencyStopHardBrake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmergencyStopHardBrake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmergencyStopCruiseToStop::InitAsDefaultInstance() {
}
class EmergencyStopCruiseToStop::_Internal {
 public:
  using HasBits = decltype(std::declval<EmergencyStopCruiseToStop>()._has_bits_);
};

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EmergencyStopCruiseToStop)
}
EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::SharedCtor() {
}

EmergencyStopCruiseToStop::~EmergencyStopCruiseToStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EmergencyStopCruiseToStop)
  SharedDtor();
}

void EmergencyStopCruiseToStop::SharedDtor() {
}

void EmergencyStopCruiseToStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmergencyStopCruiseToStop& EmergencyStopCruiseToStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmergencyStopCruiseToStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void EmergencyStopCruiseToStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EmergencyStopCruiseToStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EmergencyStopCruiseToStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmergencyStopCruiseToStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EmergencyStopCruiseToStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EmergencyStopCruiseToStop)
  return target;
}

size_t EmergencyStopCruiseToStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EmergencyStopCruiseToStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmergencyStopCruiseToStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EmergencyStopCruiseToStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStopCruiseToStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmergencyStopCruiseToStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EmergencyStopCruiseToStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EmergencyStopCruiseToStop)
    MergeFrom(*source);
  }
}

void EmergencyStopCruiseToStop::MergeFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EmergencyStopCruiseToStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStopCruiseToStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopCruiseToStop::CopyFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopCruiseToStop::IsInitialized() const {
  return true;
}

void EmergencyStopCruiseToStop::InternalSwap(EmergencyStopCruiseToStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmergencyStopCruiseToStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainEmergencyStop::InitAsDefaultInstance() {
  ::apollo::planning::_MainEmergencyStop_default_instance_.hard_brake_ = const_cast< ::apollo::planning::EmergencyStopHardBrake*>(
      ::apollo::planning::EmergencyStopHardBrake::internal_default_instance());
  ::apollo::planning::_MainEmergencyStop_default_instance_.cruise_to_stop_ = const_cast< ::apollo::planning::EmergencyStopCruiseToStop*>(
      ::apollo::planning::EmergencyStopCruiseToStop::internal_default_instance());
}
class MainEmergencyStop::_Internal {
 public:
  using HasBits = decltype(std::declval<MainEmergencyStop>()._has_bits_);
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::EmergencyStopHardBrake& hard_brake(const MainEmergencyStop* msg);
  static const ::apollo::planning::EmergencyStopCruiseToStop& cruise_to_stop(const MainEmergencyStop* msg);
};

const ::apollo::planning::EmergencyStopHardBrake&
MainEmergencyStop::_Internal::hard_brake(const MainEmergencyStop* msg) {
  return *msg->task_.hard_brake_;
}
const ::apollo::planning::EmergencyStopCruiseToStop&
MainEmergencyStop::_Internal::cruise_to_stop(const MainEmergencyStop* msg) {
  return *msg->task_.cruise_to_stop_;
}
void MainEmergencyStop::set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (hard_brake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hard_brake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hard_brake, submessage_arena);
    }
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.hard_brake)
}
void MainEmergencyStop::set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (cruise_to_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cruise_to_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise_to_stop, submessage_arena);
    }
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.cruise_to_stop)
}
MainEmergencyStop::MainEmergencyStop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainEmergencyStop)
}
MainEmergencyStop::MainEmergencyStop(const MainEmergencyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  reason_code_ = from.reason_code_;
  clear_has_task();
  switch (from.task_case()) {
    case kHardBrake: {
      _internal_mutable_hard_brake()->::apollo::planning::EmergencyStopHardBrake::MergeFrom(from._internal_hard_brake());
      break;
    }
    case kCruiseToStop: {
      _internal_mutable_cruise_to_stop()->::apollo::planning::EmergencyStopCruiseToStop::MergeFrom(from._internal_cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainEmergencyStop)
}

void MainEmergencyStop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 1;
  clear_has_task();
}

MainEmergencyStop::~MainEmergencyStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainEmergencyStop)
  SharedDtor();
}

void MainEmergencyStop::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_task()) {
    clear_task();
  }
}

void MainEmergencyStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainEmergencyStop& MainEmergencyStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainEmergencyStop_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainEmergencyStop::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.MainEmergencyStop)
  switch (task_case()) {
    case kHardBrake: {
      delete task_.hard_brake_;
      break;
    }
    case kCruiseToStop: {
      delete task_.cruise_to_stop_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainEmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    reason_code_ = 1;
  }
  clear_task();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainEmergencyStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::MainEmergencyStop_ReasonCode_IsValid(val))) {
            _internal_set_reason_code(static_cast<::apollo::planning::MainEmergencyStop_ReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.MainEmergencyStop.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hard_brake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise_to_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainEmergencyStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainEmergencyStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainEmergencyStop.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  switch (task_case()) {
    case kHardBrake: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::hard_brake(this), target, stream);
      break;
    }
    case kCruiseToStop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::cruise_to_stop(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainEmergencyStop)
  return target;
}

size_t MainEmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainEmergencyStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  switch (task_case()) {
    // optional .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
    case kHardBrake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.hard_brake_);
      break;
    }
    // optional .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
    case kCruiseToStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.cruise_to_stop_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainEmergencyStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const MainEmergencyStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainEmergencyStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainEmergencyStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainEmergencyStop)
    MergeFrom(*source);
  }
}

void MainEmergencyStop::MergeFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.task_case()) {
    case kHardBrake: {
      _internal_mutable_hard_brake()->::apollo::planning::EmergencyStopHardBrake::MergeFrom(from._internal_hard_brake());
      break;
    }
    case kCruiseToStop: {
      _internal_mutable_cruise_to_stop()->::apollo::planning::EmergencyStopCruiseToStop::MergeFrom(from._internal_cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainEmergencyStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainEmergencyStop::CopyFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainEmergencyStop::IsInitialized() const {
  return true;
}

void MainEmergencyStop::InternalSwap(MainEmergencyStop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_code_, other->reason_code_);
  swap(task_, other->task_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainEmergencyStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainCruise::InitAsDefaultInstance() {
}
class MainCruise::_Internal {
 public:
  using HasBits = decltype(std::declval<MainCruise>()._has_bits_);
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MainCruise::MainCruise()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainCruise)
}
MainCruise::MainCruise(const MainCruise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_lane_type_ = from.change_lane_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainCruise)
}

void MainCruise::SharedCtor() {
  change_lane_type_ = 0;
}

MainCruise::~MainCruise() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainCruise)
  SharedDtor();
}

void MainCruise::SharedDtor() {
}

void MainCruise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainCruise& MainCruise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainCruise_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainCruise::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainCruise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_lane_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainCruise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainCruise::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainCruise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainCruise)
  return target;
}

size_t MainCruise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainCruise)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_lane_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainCruise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  const MainCruise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainCruise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainCruise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainCruise)
    MergeFrom(*source);
  }
}

void MainCruise::MergeFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_change_lane_type()) {
    _internal_set_change_lane_type(from._internal_change_lane_type());
  }
}

void MainCruise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainCruise::CopyFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainCruise::IsInitialized() const {
  return true;
}

void MainCruise::InternalSwap(MainCruise* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(change_lane_type_, other->change_lane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainCruise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainChangeLane::InitAsDefaultInstance() {
  ::apollo::planning::_MainChangeLane_default_instance_._instance.get_mutable()->default_lane_stop_ = const_cast< ::apollo::planning::MainStop*>(
      ::apollo::planning::MainStop::internal_default_instance());
  ::apollo::planning::_MainChangeLane_default_instance_._instance.get_mutable()->target_lane_stop_ = const_cast< ::apollo::planning::MainStop*>(
      ::apollo::planning::MainStop::internal_default_instance());
}
class MainChangeLane::_Internal {
 public:
  using HasBits = decltype(std::declval<MainChangeLane>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::MainStop& default_lane_stop(const MainChangeLane* msg);
  static void set_has_default_lane_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::MainStop& target_lane_stop(const MainChangeLane* msg);
  static void set_has_target_lane_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::MainStop&
MainChangeLane::_Internal::default_lane_stop(const MainChangeLane* msg) {
  return *msg->default_lane_stop_;
}
const ::apollo::planning::MainStop&
MainChangeLane::_Internal::target_lane_stop(const MainChangeLane* msg) {
  return *msg->target_lane_stop_;
}
MainChangeLane::MainChangeLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainChangeLane)
}
MainChangeLane::MainChangeLane(const MainChangeLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      default_lane_(from.default_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_default_lane_stop()) {
    default_lane_stop_ = new ::apollo::planning::MainStop(*from.default_lane_stop_);
  } else {
    default_lane_stop_ = nullptr;
  }
  if (from._internal_has_target_lane_stop()) {
    target_lane_stop_ = new ::apollo::planning::MainStop(*from.target_lane_stop_);
  } else {
    target_lane_stop_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainChangeLane)
}

void MainChangeLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&default_lane_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_lane_stop_) -
      reinterpret_cast<char*>(&default_lane_stop_)) + sizeof(target_lane_stop_));
  type_ = 1;
}

MainChangeLane::~MainChangeLane() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainChangeLane)
  SharedDtor();
}

void MainChangeLane::SharedDtor() {
  if (this != internal_default_instance()) delete default_lane_stop_;
  if (this != internal_default_instance()) delete target_lane_stop_;
}

void MainChangeLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainChangeLane& MainChangeLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainChangeLane_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainChangeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainChangeLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  default_lane_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_lane_stop_ != nullptr);
      default_lane_stop_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_lane_stop_ != nullptr);
      target_lane_stop_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainChangeLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.MainChangeLane.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::MainChangeLane_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::MainChangeLane_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.TargetLane default_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainStop default_lane_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_lane_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainStop target_lane_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_lane_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainChangeLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainChangeLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.MainChangeLane.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .apollo.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_default_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_default_lane(i), target, stream);
  }

  // optional .apollo.planning.MainStop default_lane_stop = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::default_lane_stop(this), target, stream);
  }

  // optional .apollo.planning.MainStop target_lane_stop = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_lane_stop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainChangeLane)
  return target;
}

size_t MainChangeLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainChangeLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TargetLane default_lane = 2;
  total_size += 1UL * this->_internal_default_lane_size();
  for (const auto& msg : this->default_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.MainStop default_lane_stop = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_lane_stop_);
    }

    // optional .apollo.planning.MainStop target_lane_stop = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_lane_stop_);
    }

    // optional .apollo.planning.MainChangeLane.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainChangeLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  const MainChangeLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainChangeLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainChangeLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainChangeLane)
    MergeFrom(*source);
  }
}

void MainChangeLane::MergeFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  default_lane_.MergeFrom(from.default_lane_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_default_lane_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_default_lane_stop());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_lane_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_target_lane_stop());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainChangeLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainChangeLane::CopyFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainChangeLane::IsInitialized() const {
  return true;
}

void MainChangeLane::InternalSwap(MainChangeLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  default_lane_.InternalSwap(&other->default_lane_);
  swap(default_lane_stop_, other->default_lane_stop_);
  swap(target_lane_stop_, other->target_lane_stop_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainChangeLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainMissionComplete::InitAsDefaultInstance() {
  ::apollo::planning::_MainMissionComplete_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class MainMissionComplete::_Internal {
 public:
  using HasBits = decltype(std::declval<MainMissionComplete>()._has_bits_);
  static const ::apollo::common::PointENU& stop_point(const MainMissionComplete* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PointENU&
MainMissionComplete::_Internal::stop_point(const MainMissionComplete* msg) {
  return *msg->stop_point_;
}
void MainMissionComplete::clear_stop_point() {
  if (stop_point_ != nullptr) stop_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MainMissionComplete::MainMissionComplete()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainMissionComplete)
}
MainMissionComplete::MainMissionComplete(const MainMissionComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    stop_point_ = new ::apollo::common::PointENU(*from.stop_point_);
  } else {
    stop_point_ = nullptr;
  }
  stop_heading_ = from.stop_heading_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainMissionComplete)
}

void MainMissionComplete::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_heading_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(stop_heading_));
}

MainMissionComplete::~MainMissionComplete() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainMissionComplete)
  SharedDtor();
}

void MainMissionComplete::SharedDtor() {
  if (this != internal_default_instance()) delete stop_point_;
}

void MainMissionComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainMissionComplete& MainMissionComplete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainMissionComplete_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainMissionComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainMissionComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != nullptr);
    stop_point_->Clear();
  }
  stop_heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainMissionComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.PointENU stop_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double stop_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_stop_heading(&has_bits);
          stop_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainMissionComplete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainMissionComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PointENU stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stop_point(this), target, stream);
  }

  // optional double stop_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainMissionComplete)
  return target;
}

size_t MainMissionComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainMissionComplete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.PointENU stop_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_point_);
    }

    // optional double stop_heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainMissionComplete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const MainMissionComplete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainMissionComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainMissionComplete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainMissionComplete)
    MergeFrom(*source);
  }
}

void MainMissionComplete::MergeFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_heading_ = from.stop_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainMissionComplete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMissionComplete::CopyFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMissionComplete::IsInitialized() const {
  return true;
}

void MainMissionComplete::InternalSwap(MainMissionComplete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_point_, other->stop_point_);
  swap(stop_heading_, other->stop_heading_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainMissionComplete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainNotReady::InitAsDefaultInstance() {
}
class MainNotReady::_Internal {
 public:
  using HasBits = decltype(std::declval<MainNotReady>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MainNotReady::MainNotReady()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainNotReady)
}
MainNotReady::MainNotReady(const MainNotReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainNotReady)
}

void MainNotReady::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MainNotReady::~MainNotReady() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainNotReady)
  SharedDtor();
}

void MainNotReady::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MainNotReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainNotReady& MainNotReady::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainNotReady_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainNotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainNotReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainNotReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.MainNotReady.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainNotReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainNotReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainNotReady.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainNotReady)
  return target;
}

size_t MainNotReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainNotReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainNotReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  const MainNotReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainNotReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainNotReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainNotReady)
    MergeFrom(*source);
  }
}

void MainNotReady::MergeFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _has_bits_[0] |= 0x00000001u;
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void MainNotReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainNotReady::CopyFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainNotReady::IsInitialized() const {
  return true;
}

void MainNotReady::InternalSwap(MainNotReady* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MainNotReady::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainParking::InitAsDefaultInstance() {
}
class MainParking::_Internal {
 public:
  using HasBits = decltype(std::declval<MainParking>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MainParking::MainParking()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainParking)
}
MainParking::MainParking(const MainParking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainParking)
}

void MainParking::SharedCtor() {
  status_ = 1;
}

MainParking::~MainParking() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainParking)
  SharedDtor();
}

void MainParking::SharedDtor() {
}

void MainParking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainParking& MainParking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainParking_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainParking::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainParking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainParking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.MainParking.ParkingStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::MainParking_ParkingStatus_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::MainParking_ParkingStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainParking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainParking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.MainParking.ParkingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainParking)
  return target;
}

size_t MainParking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainParking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.MainParking.ParkingStatus status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainParking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  const MainParking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainParking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainParking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainParking)
    MergeFrom(*source);
  }
}

void MainParking::MergeFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
}

void MainParking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainParking::CopyFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainParking::IsInitialized() const {
  return true;
}

void MainParking::InternalSwap(MainParking* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainParking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MainDecision::InitAsDefaultInstance() {
  ::apollo::planning::_MainDecision_default_instance_.cruise_ = const_cast< ::apollo::planning::MainCruise*>(
      ::apollo::planning::MainCruise::internal_default_instance());
  ::apollo::planning::_MainDecision_default_instance_.stop_ = const_cast< ::apollo::planning::MainStop*>(
      ::apollo::planning::MainStop::internal_default_instance());
  ::apollo::planning::_MainDecision_default_instance_.estop_ = const_cast< ::apollo::planning::MainEmergencyStop*>(
      ::apollo::planning::MainEmergencyStop::internal_default_instance());
  ::apollo::planning::_MainDecision_default_instance_.change_lane_ = const_cast< ::apollo::planning::MainChangeLane*>(
      ::apollo::planning::MainChangeLane::internal_default_instance());
  ::apollo::planning::_MainDecision_default_instance_.mission_complete_ = const_cast< ::apollo::planning::MainMissionComplete*>(
      ::apollo::planning::MainMissionComplete::internal_default_instance());
  ::apollo::planning::_MainDecision_default_instance_.not_ready_ = const_cast< ::apollo::planning::MainNotReady*>(
      ::apollo::planning::MainNotReady::internal_default_instance());
  ::apollo::planning::_MainDecision_default_instance_.parking_ = const_cast< ::apollo::planning::MainParking*>(
      ::apollo::planning::MainParking::internal_default_instance());
}
class MainDecision::_Internal {
 public:
  using HasBits = decltype(std::declval<MainDecision>()._has_bits_);
  static const ::apollo::planning::MainCruise& cruise(const MainDecision* msg);
  static const ::apollo::planning::MainStop& stop(const MainDecision* msg);
  static const ::apollo::planning::MainEmergencyStop& estop(const MainDecision* msg);
  static const ::apollo::planning::MainChangeLane& change_lane(const MainDecision* msg);
  static const ::apollo::planning::MainMissionComplete& mission_complete(const MainDecision* msg);
  static const ::apollo::planning::MainNotReady& not_ready(const MainDecision* msg);
  static const ::apollo::planning::MainParking& parking(const MainDecision* msg);
};

const ::apollo::planning::MainCruise&
MainDecision::_Internal::cruise(const MainDecision* msg) {
  return *msg->task_.cruise_;
}
const ::apollo::planning::MainStop&
MainDecision::_Internal::stop(const MainDecision* msg) {
  return *msg->task_.stop_;
}
const ::apollo::planning::MainEmergencyStop&
MainDecision::_Internal::estop(const MainDecision* msg) {
  return *msg->task_.estop_;
}
const ::apollo::planning::MainChangeLane&
MainDecision::_Internal::change_lane(const MainDecision* msg) {
  return *msg->task_.change_lane_;
}
const ::apollo::planning::MainMissionComplete&
MainDecision::_Internal::mission_complete(const MainDecision* msg) {
  return *msg->task_.mission_complete_;
}
const ::apollo::planning::MainNotReady&
MainDecision::_Internal::not_ready(const MainDecision* msg) {
  return *msg->task_.not_ready_;
}
const ::apollo::planning::MainParking&
MainDecision::_Internal::parking(const MainDecision* msg) {
  return *msg->task_.parking_;
}
void MainDecision::set_allocated_cruise(::apollo::planning::MainCruise* cruise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (cruise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cruise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise, submessage_arena);
    }
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.cruise)
}
void MainDecision::set_allocated_stop(::apollo::planning::MainStop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.stop)
}
void MainDecision::set_allocated_estop(::apollo::planning::MainEmergencyStop* estop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (estop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      estop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.estop)
}
void MainDecision::set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (change_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lane, submessage_arena);
    }
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.change_lane)
}
void MainDecision::set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (mission_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_complete, submessage_arena);
    }
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.mission_complete)
}
void MainDecision::set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (not_ready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      not_ready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_ready, submessage_arena);
    }
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.not_ready)
}
void MainDecision::set_allocated_parking(::apollo::planning::MainParking* parking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (parking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking, submessage_arena);
    }
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.parking)
}
MainDecision::MainDecision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MainDecision)
}
MainDecision::MainDecision(const MainDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      target_lane_(from.target_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_task();
  switch (from.task_case()) {
    case kCruise: {
      _internal_mutable_cruise()->::apollo::planning::MainCruise::MergeFrom(from._internal_cruise());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_stop());
      break;
    }
    case kEstop: {
      _internal_mutable_estop()->::apollo::planning::MainEmergencyStop::MergeFrom(from._internal_estop());
      break;
    }
    case kChangeLane: {
      _internal_mutable_change_lane()->::apollo::planning::MainChangeLane::MergeFrom(from._internal_change_lane());
      break;
    }
    case kMissionComplete: {
      _internal_mutable_mission_complete()->::apollo::planning::MainMissionComplete::MergeFrom(from._internal_mission_complete());
      break;
    }
    case kNotReady: {
      _internal_mutable_not_ready()->::apollo::planning::MainNotReady::MergeFrom(from._internal_not_ready());
      break;
    }
    case kParking: {
      _internal_mutable_parking()->::apollo::planning::MainParking::MergeFrom(from._internal_parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainDecision)
}

void MainDecision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  clear_has_task();
}

MainDecision::~MainDecision() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainDecision)
  SharedDtor();
}

void MainDecision::SharedDtor() {
  if (has_task()) {
    clear_task();
  }
}

void MainDecision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MainDecision& MainDecision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MainDecision_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void MainDecision::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.MainDecision)
  switch (task_case()) {
    case kCruise: {
      delete task_.cruise_;
      break;
    }
    case kStop: {
      delete task_.stop_;
      break;
    }
    case kEstop: {
      delete task_.estop_;
      break;
    }
    case kChangeLane: {
      delete task_.change_lane_;
      break;
    }
    case kMissionComplete: {
      delete task_.mission_complete_;
      break;
    }
    case kNotReady: {
      delete task_.not_ready_;
      break;
    }
    case kParking: {
      delete task_.parking_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_lane_.Clear();
  clear_task();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MainDecision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.MainCruise cruise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainStop stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainEmergencyStop estop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_estop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainMissionComplete mission_complete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainNotReady not_ready = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_ready(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MainParking parking = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MainDecision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainDecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (task_case()) {
    case kCruise: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::cruise(this), target, stream);
      break;
    }
    case kStop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::stop(this), target, stream);
      break;
    }
    case kEstop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::estop(this), target, stream);
      break;
    }
    case kChangeLane: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::change_lane(this), target, stream);
      break;
    }
    default: ;
  }
  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_target_lane(i), target, stream);
  }

  switch (task_case()) {
    case kMissionComplete: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::mission_complete(this), target, stream);
      break;
    }
    case kNotReady: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::not_ready(this), target, stream);
      break;
    }
    case kParking: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::parking(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainDecision)
  return target;
}

size_t MainDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainDecision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  total_size += 1UL * this->_internal_target_lane_size();
  for (const auto& msg : this->target_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (task_case()) {
    // optional .apollo.planning.MainCruise cruise = 1;
    case kCruise: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.cruise_);
      break;
    }
    // optional .apollo.planning.MainStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.stop_);
      break;
    }
    // optional .apollo.planning.MainEmergencyStop estop = 3;
    case kEstop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.estop_);
      break;
    }
    // optional .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
    case kChangeLane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.change_lane_);
      break;
    }
    // optional .apollo.planning.MainMissionComplete mission_complete = 6;
    case kMissionComplete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.mission_complete_);
      break;
    }
    // optional .apollo.planning.MainNotReady not_ready = 7;
    case kNotReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.not_ready_);
      break;
    }
    // optional .apollo.planning.MainParking parking = 8;
    case kParking: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_.parking_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MainDecision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const MainDecision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MainDecision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MainDecision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MainDecision)
    MergeFrom(*source);
  }
}

void MainDecision::MergeFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_lane_.MergeFrom(from.target_lane_);
  switch (from.task_case()) {
    case kCruise: {
      _internal_mutable_cruise()->::apollo::planning::MainCruise::MergeFrom(from._internal_cruise());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_stop());
      break;
    }
    case kEstop: {
      _internal_mutable_estop()->::apollo::planning::MainEmergencyStop::MergeFrom(from._internal_estop());
      break;
    }
    case kChangeLane: {
      _internal_mutable_change_lane()->::apollo::planning::MainChangeLane::MergeFrom(from._internal_change_lane());
      break;
    }
    case kMissionComplete: {
      _internal_mutable_mission_complete()->::apollo::planning::MainMissionComplete::MergeFrom(from._internal_mission_complete());
      break;
    }
    case kNotReady: {
      _internal_mutable_not_ready()->::apollo::planning::MainNotReady::MergeFrom(from._internal_not_ready());
      break;
    }
    case kParking: {
      _internal_mutable_parking()->::apollo::planning::MainParking::MergeFrom(from._internal_parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainDecision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainDecision::CopyFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainDecision::IsInitialized() const {
  return true;
}

void MainDecision::InternalSwap(MainDecision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_lane_.InternalSwap(&other->target_lane_);
  swap(task_, other->task_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainDecision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionResult::InitAsDefaultInstance() {
  ::apollo::planning::_DecisionResult_default_instance_._instance.get_mutable()->main_decision_ = const_cast< ::apollo::planning::MainDecision*>(
      ::apollo::planning::MainDecision::internal_default_instance());
  ::apollo::planning::_DecisionResult_default_instance_._instance.get_mutable()->object_decision_ = const_cast< ::apollo::planning::ObjectDecisions*>(
      ::apollo::planning::ObjectDecisions::internal_default_instance());
  ::apollo::planning::_DecisionResult_default_instance_._instance.get_mutable()->vehicle_signal_ = const_cast< ::apollo::common::VehicleSignal*>(
      ::apollo::common::VehicleSignal::internal_default_instance());
}
class DecisionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionResult>()._has_bits_);
  static const ::apollo::planning::MainDecision& main_decision(const DecisionResult* msg);
  static void set_has_main_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ObjectDecisions& object_decision(const DecisionResult* msg);
  static void set_has_object_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::VehicleSignal& vehicle_signal(const DecisionResult* msg);
  static void set_has_vehicle_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::MainDecision&
DecisionResult::_Internal::main_decision(const DecisionResult* msg) {
  return *msg->main_decision_;
}
const ::apollo::planning::ObjectDecisions&
DecisionResult::_Internal::object_decision(const DecisionResult* msg) {
  return *msg->object_decision_;
}
const ::apollo::common::VehicleSignal&
DecisionResult::_Internal::vehicle_signal(const DecisionResult* msg) {
  return *msg->vehicle_signal_;
}
void DecisionResult::clear_vehicle_signal() {
  if (vehicle_signal_ != nullptr) vehicle_signal_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DecisionResult::DecisionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DecisionResult)
}
DecisionResult::DecisionResult(const DecisionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_main_decision()) {
    main_decision_ = new ::apollo::planning::MainDecision(*from.main_decision_);
  } else {
    main_decision_ = nullptr;
  }
  if (from._internal_has_object_decision()) {
    object_decision_ = new ::apollo::planning::ObjectDecisions(*from.object_decision_);
  } else {
    object_decision_ = nullptr;
  }
  if (from._internal_has_vehicle_signal()) {
    vehicle_signal_ = new ::apollo::common::VehicleSignal(*from.vehicle_signal_);
  } else {
    vehicle_signal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DecisionResult)
}

void DecisionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionResult_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  ::memset(&main_decision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_signal_) -
      reinterpret_cast<char*>(&main_decision_)) + sizeof(vehicle_signal_));
}

DecisionResult::~DecisionResult() {
  // @@protoc_insertion_point(destructor:apollo.planning.DecisionResult)
  SharedDtor();
}

void DecisionResult::SharedDtor() {
  if (this != internal_default_instance()) delete main_decision_;
  if (this != internal_default_instance()) delete object_decision_;
  if (this != internal_default_instance()) delete vehicle_signal_;
}

void DecisionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionResult& DecisionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionResult_modules_2fplanning_2fproto_2fdecision_2eproto.base);
  return *internal_default_instance();
}


void DecisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DecisionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(main_decision_ != nullptr);
      main_decision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_decision_ != nullptr);
      object_decision_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vehicle_signal_ != nullptr);
      vehicle_signal_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DecisionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.MainDecision main_decision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_decision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectDecisions object_decision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_decision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal vehicle_signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DecisionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.MainDecision main_decision = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::main_decision(this), target, stream);
  }

  // optional .apollo.planning.ObjectDecisions object_decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object_decision(this), target, stream);
  }

  // optional .apollo.common.VehicleSignal vehicle_signal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vehicle_signal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DecisionResult)
  return target;
}

size_t DecisionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DecisionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.MainDecision main_decision = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *main_decision_);
    }

    // optional .apollo.planning.ObjectDecisions object_decision = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_decision_);
    }

    // optional .apollo.common.VehicleSignal vehicle_signal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_signal_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DecisionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DecisionResult)
    MergeFrom(*source);
  }
}

void DecisionResult::MergeFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_main_decision()->::apollo::planning::MainDecision::MergeFrom(from._internal_main_decision());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object_decision()->::apollo::planning::ObjectDecisions::MergeFrom(from._internal_object_decision());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vehicle_signal()->::apollo::common::VehicleSignal::MergeFrom(from._internal_vehicle_signal());
    }
  }
}

void DecisionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionResult::CopyFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionResult::IsInitialized() const {
  return true;
}

void DecisionResult::InternalSwap(DecisionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(main_decision_, other->main_decision_);
  swap(object_decision_, other->object_decision_);
  swap(vehicle_signal_, other->vehicle_signal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::TargetLane* Arena::CreateMaybeMessage< ::apollo::planning::TargetLane >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TargetLane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectIgnore* Arena::CreateMaybeMessage< ::apollo::planning::ObjectIgnore >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectIgnore >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectStop* Arena::CreateMaybeMessage< ::apollo::planning::ObjectStop >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectNudge* Arena::CreateMaybeMessage< ::apollo::planning::ObjectNudge >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectNudge >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectYield* Arena::CreateMaybeMessage< ::apollo::planning::ObjectYield >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectYield >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectFollow* Arena::CreateMaybeMessage< ::apollo::planning::ObjectFollow >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectFollow >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectOvertake* Arena::CreateMaybeMessage< ::apollo::planning::ObjectOvertake >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectOvertake >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectSidePass* Arena::CreateMaybeMessage< ::apollo::planning::ObjectSidePass >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectSidePass >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectAvoid* Arena::CreateMaybeMessage< ::apollo::planning::ObjectAvoid >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectAvoid >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDecisionType* Arena::CreateMaybeMessage< ::apollo::planning::ObjectDecisionType >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectDecisionType >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDecision* Arena::CreateMaybeMessage< ::apollo::planning::ObjectDecision >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDecisions* Arena::CreateMaybeMessage< ::apollo::planning::ObjectDecisions >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObjectDecisions >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainStop* Arena::CreateMaybeMessage< ::apollo::planning::MainStop >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::EmergencyStopHardBrake* Arena::CreateMaybeMessage< ::apollo::planning::EmergencyStopHardBrake >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::EmergencyStopHardBrake >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::EmergencyStopCruiseToStop* Arena::CreateMaybeMessage< ::apollo::planning::EmergencyStopCruiseToStop >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::EmergencyStopCruiseToStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainEmergencyStop* Arena::CreateMaybeMessage< ::apollo::planning::MainEmergencyStop >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainEmergencyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainCruise* Arena::CreateMaybeMessage< ::apollo::planning::MainCruise >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainCruise >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainChangeLane* Arena::CreateMaybeMessage< ::apollo::planning::MainChangeLane >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainChangeLane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainMissionComplete* Arena::CreateMaybeMessage< ::apollo::planning::MainMissionComplete >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainMissionComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainNotReady* Arena::CreateMaybeMessage< ::apollo::planning::MainNotReady >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainNotReady >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainParking* Arena::CreateMaybeMessage< ::apollo::planning::MainParking >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainParking >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainDecision* Arena::CreateMaybeMessage< ::apollo::planning::MainDecision >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MainDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DecisionResult* Arena::CreateMaybeMessage< ::apollo::planning::DecisionResult >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DecisionResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
