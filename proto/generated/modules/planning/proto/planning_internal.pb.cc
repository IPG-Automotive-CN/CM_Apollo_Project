// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#include "modules/planning/proto/planning_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SLPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fchart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Chart_modules_2fdreamview_2fproto_2fchart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2flocalization_2fproto_2flocalization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_LocalizationEstimate_modules_2flocalization_2fproto_2flocalization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLBoundary_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto;
namespace apollo {
namespace planning_internal {
class DebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug> _instance;
} _Debug_default_instance_;
class SpeedPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedPlan> _instance;
} _SpeedPlan_default_instance_;
class StGraphBoundaryDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StGraphBoundaryDebug> _instance;
} _StGraphBoundaryDebug_default_instance_;
class SLFrameDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SLFrameDebug> _instance;
} _SLFrameDebug_default_instance_;
class STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STGraphDebug_STGraphSpeedConstraint> _instance;
} _STGraphDebug_STGraphSpeedConstraint_default_instance_;
class STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STGraphDebug_STGraphKernelCuiseRef> _instance;
} _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
class STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STGraphDebug_STGraphKernelFollowRef> _instance;
} _STGraphDebug_STGraphKernelFollowRef_default_instance_;
class STGraphDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STGraphDebug> _instance;
} _STGraphDebug_default_instance_;
class SignalLightDebug_SignalDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalLightDebug_SignalDebug> _instance;
} _SignalLightDebug_SignalDebug_default_instance_;
class SignalLightDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalLightDebug> _instance;
} _SignalLightDebug_default_instance_;
class DecisionTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionTag> _instance;
} _DecisionTag_default_instance_;
class ObstacleDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleDebug> _instance;
} _ObstacleDebug_default_instance_;
class ReferenceLineDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceLineDebug> _instance;
} _ReferenceLineDebug_default_instance_;
class SampleLayerDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampleLayerDebug> _instance;
} _SampleLayerDebug_default_instance_;
class DpPolyGraphDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpPolyGraphDebug> _instance;
} _DpPolyGraphDebug_default_instance_;
class ScenarioDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioDebug> _instance;
} _ScenarioDebug_default_instance_;
class TrajectoriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectories> _instance;
} _Trajectories_default_instance_;
class OpenSpaceDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSpaceDebug> _instance;
} _OpenSpaceDebug_default_instance_;
class SmootherDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmootherDebug> _instance;
} _SmootherDebug_default_instance_;
class PlanningDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningData> _instance;
} _PlanningData_default_instance_;
class LatticeStPixelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatticeStPixel> _instance;
} _LatticeStPixel_default_instance_;
class LatticeStTrainingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatticeStTraining> _instance;
} _LatticeStTraining_default_instance_;
class CostComponentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostComponents> _instance;
} _CostComponents_default_instance_;
class AutoTuningTrainingDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoTuningTrainingData> _instance;
} _AutoTuningTrainingData_default_instance_;
class CloudReferenceLineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudReferenceLineRequest> _instance;
} _CloudReferenceLineRequest_default_instance_;
class CloudReferenceLineRoutingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudReferenceLineRoutingRequest> _instance;
} _CloudReferenceLineRoutingRequest_default_instance_;
class CloudReferenceLineResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudReferenceLineResponse> _instance;
} _CloudReferenceLineResponse_default_instance_;
}  // namespace planning_internal
}  // namespace apollo
static void InitDefaultsscc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_AutoTuningTrainingData_default_instance_;
    new (ptr) ::apollo::planning_internal::AutoTuningTrainingData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::AutoTuningTrainingData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_CloudReferenceLineRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_CloudReferenceLineRequest_default_instance_;
    new (ptr) ::apollo::planning_internal::CloudReferenceLineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::CloudReferenceLineRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CloudReferenceLineRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CloudReferenceLineRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_CloudReferenceLineResponse_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_CloudReferenceLineResponse_default_instance_;
    new (ptr) ::apollo::planning_internal::CloudReferenceLineResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::CloudReferenceLineResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CloudReferenceLineResponse_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CloudReferenceLineResponse_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_CloudReferenceLineRoutingRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_CloudReferenceLineRoutingRequest_default_instance_;
    new (ptr) ::apollo::planning_internal::CloudReferenceLineRoutingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::CloudReferenceLineRoutingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CloudReferenceLineRoutingRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CloudReferenceLineRoutingRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_CostComponents_default_instance_;
    new (ptr) ::apollo::planning_internal::CostComponents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::CostComponents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_Debug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_Debug_default_instance_;
    new (ptr) ::apollo::planning_internal::Debug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::Debug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Debug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_DecisionTag_default_instance_;
    new (ptr) ::apollo::planning_internal::DecisionTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::DecisionTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_ObjectDecisionType_modules_2fplanning_2fproto_2fdecision_2eproto.base,}};

static void InitDefaultsscc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_DpPolyGraphDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::DpPolyGraphDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::DpPolyGraphDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_SLPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_LatticeStPixel_default_instance_;
    new (ptr) ::apollo::planning_internal::LatticeStPixel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::LatticeStPixel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_LatticeStTraining_default_instance_;
    new (ptr) ::apollo::planning_internal::LatticeStTraining();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::LatticeStTraining::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_ObstacleDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::ObstacleDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::ObstacleDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SLBoundary_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto.base,
      &scc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_OpenSpaceDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::OpenSpaceDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::OpenSpaceDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_VehicleMotion_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_PlanningData_default_instance_;
    new (ptr) ::apollo::planning_internal::PlanningData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::PlanningData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 20, 0, InitDefaultsscc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_LocalizationEstimate_modules_2flocalization_2fproto_2flocalization_2eproto.base,
      &scc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
      &scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_MapMsg_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto.base,
      &scc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_Chart_modules_2fdreamview_2fproto_2fchart_2eproto.base,
      &scc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_ReferenceLineDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::ReferenceLineDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::ReferenceLineDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_SLFrameDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::SLFrameDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::SLFrameDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SLPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_STGraphDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::STGraphDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::STGraphDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
      &scc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_STGraphDebug_STGraphKernelCuiseRef_default_instance_;
    new (ptr) ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_STGraphDebug_STGraphKernelFollowRef_default_instance_;
    new (ptr) ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_STGraphDebug_STGraphSpeedConstraint_default_instance_;
    new (ptr) ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_SampleLayerDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::SampleLayerDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::SampleLayerDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SLPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_ScenarioDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::ScenarioDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::ScenarioDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_SignalLightDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::SignalLightDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::SignalLightDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,}};

static void InitDefaultsscc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_SignalLightDebug_SignalDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::SignalLightDebug_SignalDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::SignalLightDebug_SignalDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_SmootherDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::SmootherDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::SmootherDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {}};

static void InitDefaultsscc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_SpeedPlan_default_instance_;
    new (ptr) ::apollo::planning_internal::SpeedPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::SpeedPlan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_StGraphBoundaryDebug_default_instance_;
    new (ptr) ::apollo::planning_internal::StGraphBoundaryDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::StGraphBoundaryDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_SpeedPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning_internal::_Trajectories_default_instance_;
    new (ptr) ::apollo::planning_internal::Trajectories();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning_internal::Trajectories::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto}, {
      &scc_info_Trajectory_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Debug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Debug, planning_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, speed_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, type_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, sampled_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, static_obstacle_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, dynamic_obstacle_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, static_obstacle_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, dynamic_obstacle_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, map_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, map_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, sl_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, aggregated_boundary_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, aggregated_boundary_low_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, aggregated_boundary_high_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, upper_bound_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, cruise_line_s_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, follow_line_s_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, speed_profile_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, speed_constraint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, kernel_cruise_ref_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, kernel_follow_ref_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, light_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, color_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, light_stop_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, adc_stop_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, is_stop_wall_created_),
  0,
  2,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, adc_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, adc_front_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, signal_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, decider_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, decision_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, sl_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, decision_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, vertices_x_coords_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, vertices_y_coords_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, is_change_lane_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, is_drivable_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, is_protected_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, is_offroad_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, minimum_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, average_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, average_dkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, kappa_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, dkappa_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, kappa_max_abs_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, dkappa_max_abs_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, average_offset_),
  0,
  1,
  2,
  11,
  12,
  13,
  14,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SampleLayerDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SampleLayerDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SampleLayerDebug, sl_point_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, sample_layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, min_cost_point_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ScenarioDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ScenarioDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ScenarioDebug, scenario_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ScenarioDebug, stage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ScenarioDebug, msg_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Trajectories, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Trajectories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Trajectories, trajectory_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, trajectories_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, warm_start_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, smoothed_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, warm_start_dual_lambda_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, warm_start_dual_miu_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, optimized_dual_lambda_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, optimized_dual_miu_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, xy_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, roi_shift_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, partitioned_trajectories_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, chosen_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, is_fallback_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, fallback_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, trajectory_stitching_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::OpenSpaceDebug, future_collision_point_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  10,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SmootherDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SmootherDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SmootherDebug, is_smoothed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SmootherDebug, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SmootherDebug, reason_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, adc_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, chassis_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, routing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, init_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, speed_plan_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, st_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, sl_frame_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, prediction_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, signal_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, reference_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, dp_poly_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, lattice_st_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, relative_map_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, auto_tuning_training_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, front_clear_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, chart_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, scenario_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, open_space_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, smoother_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  6,
  7,
  8,
  9,
  13,
  ~0u,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, r_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, g_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, b_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, annotation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, num_s_grids_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, num_t_grids_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, s_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, t_resolution_),
  ~0u,
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CostComponents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CostComponents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CostComponents, cost_component_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, teacher_component_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, student_component_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRequest, lane_segment_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRoutingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRoutingRequest, routing_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineResponse, segment_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::planning_internal::Debug)},
  { 7, 14, sizeof(::apollo::planning_internal::SpeedPlan)},
  { 16, 24, sizeof(::apollo::planning_internal::StGraphBoundaryDebug)},
  { 27, 44, sizeof(::apollo::planning_internal::SLFrameDebug)},
  { 56, 64, sizeof(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint)},
  { 67, 74, sizeof(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef)},
  { 76, 83, sizeof(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef)},
  { 85, 97, sizeof(::apollo::planning_internal::STGraphDebug)},
  { 104, 114, sizeof(::apollo::planning_internal::SignalLightDebug_SignalDebug)},
  { 119, 127, sizeof(::apollo::planning_internal::SignalLightDebug)},
  { 130, 137, sizeof(::apollo::planning_internal::DecisionTag)},
  { 139, 149, sizeof(::apollo::planning_internal::ObstacleDebug)},
  { 154, 174, sizeof(::apollo::planning_internal::ReferenceLineDebug)},
  { 189, 195, sizeof(::apollo::planning_internal::SampleLayerDebug)},
  { 196, 203, sizeof(::apollo::planning_internal::DpPolyGraphDebug)},
  { 205, 213, sizeof(::apollo::planning_internal::ScenarioDebug)},
  { 216, 222, sizeof(::apollo::planning_internal::Trajectories)},
  { 223, 245, sizeof(::apollo::planning_internal::OpenSpaceDebug)},
  { 262, 270, sizeof(::apollo::planning_internal::SmootherDebug)},
  { 273, 299, sizeof(::apollo::planning_internal::PlanningData)},
  { 320, 330, sizeof(::apollo::planning_internal::LatticeStPixel)},
  { 335, 347, sizeof(::apollo::planning_internal::LatticeStTraining)},
  { 354, 360, sizeof(::apollo::planning_internal::CostComponents)},
  { 361, 368, sizeof(::apollo::planning_internal::AutoTuningTrainingData)},
  { 370, 376, sizeof(::apollo::planning_internal::CloudReferenceLineRequest)},
  { 377, 383, sizeof(::apollo::planning_internal::CloudReferenceLineRoutingRequest)},
  { 384, 390, sizeof(::apollo::planning_internal::CloudReferenceLineResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_Debug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_SpeedPlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_StGraphBoundaryDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_SLFrameDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_STGraphDebug_STGraphSpeedConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_STGraphDebug_STGraphKernelCuiseRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_STGraphDebug_STGraphKernelFollowRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_STGraphDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_SignalLightDebug_SignalDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_SignalLightDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_DecisionTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_ObstacleDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_ReferenceLineDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_SampleLayerDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_DpPolyGraphDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_ScenarioDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_Trajectories_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_OpenSpaceDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_SmootherDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_PlanningData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_LatticeStPixel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_LatticeStTraining_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_CostComponents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_AutoTuningTrainingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_CloudReferenceLineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_CloudReferenceLineRoutingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning_internal::_CloudReferenceLineResponse_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/planning/proto/planning_intern"
  "al.proto\022\030apollo.planning_internal\032!modu"
  "les/common/proto/header.proto\032\"modules/c"
  "anbus/proto/chassis.proto\032$modules/commo"
  "n/proto/pnc_point.proto\032-modules/localiz"
  "ation/proto/localization.proto\032#modules/"
  "dreamview/proto/chart.proto\032/modules/map"
  "/relative_map/proto/navigation.proto\032#mo"
  "dules/routing/proto/routing.proto\0326modul"
  "es/perception/proto/traffic_light_detect"
  "ion.proto\032(modules/planning/proto/sl_bou"
  "ndary.proto\032%modules/planning/proto/deci"
  "sion.proto\032,modules/planning/proto/plann"
  "ing_config.proto\"F\n\005Debug\022=\n\rplanning_da"
  "ta\030\002 \001(\0132&.apollo.planning_internal.Plan"
  "ningData\"I\n\tSpeedPlan\022\014\n\004name\030\001 \001(\t\022.\n\013s"
  "peed_point\030\002 \003(\0132\031.apollo.common.SpeedPo"
  "int\"\340\002\n\024StGraphBoundaryDebug\022\014\n\004name\030\001 \001"
  "(\t\022(\n\005point\030\002 \003(\0132\031.apollo.common.SpeedP"
  "oint\022K\n\004type\030\003 \001(\0162=.apollo.planning_int"
  "ernal.StGraphBoundaryDebug.StBoundaryTyp"
  "e\"\302\001\n\016StBoundaryType\022\034\n\030ST_BOUNDARY_TYPE"
  "_UNKNOWN\020\001\022\031\n\025ST_BOUNDARY_TYPE_STOP\020\002\022\033\n"
  "\027ST_BOUNDARY_TYPE_FOLLOW\020\003\022\032\n\026ST_BOUNDAR"
  "Y_TYPE_YIELD\020\004\022\035\n\031ST_BOUNDARY_TYPE_OVERT"
  "AKE\020\005\022\037\n\033ST_BOUNDARY_TYPE_KEEP_CLEAR\020\006\"\202"
  "\003\n\014SLFrameDebug\022\014\n\004name\030\001 \001(\t\022\021\n\tsampled"
  "_s\030\002 \003(\001\022#\n\033static_obstacle_lower_bound\030"
  "\003 \003(\001\022$\n\034dynamic_obstacle_lower_bound\030\004 "
  "\003(\001\022#\n\033static_obstacle_upper_bound\030\005 \003(\001"
  "\022$\n\034dynamic_obstacle_upper_bound\030\006 \003(\001\022\027"
  "\n\017map_lower_bound\030\007 \003(\001\022\027\n\017map_upper_bou"
  "nd\030\010 \003(\001\022\'\n\007sl_path\030\t \003(\0132\026.apollo.commo"
  "n.SLPoint\022\035\n\025aggregated_boundary_s\030\n \003(\001"
  "\022\037\n\027aggregated_boundary_low\030\013 \003(\001\022 \n\030agg"
  "regated_boundary_high\030\014 \003(\001\"\222\005\n\014STGraphD"
  "ebug\022\014\n\004name\030\001 \001(\t\022@\n\010boundary\030\002 \003(\0132..a"
  "pollo.planning_internal.StGraphBoundaryD"
  "ebug\022.\n\013speed_limit\030\003 \003(\0132\031.apollo.commo"
  "n.SpeedPoint\0220\n\rspeed_profile\030\004 \003(\0132\031.ap"
  "ollo.common.SpeedPoint\022W\n\020speed_constrai"
  "nt\030\005 \001(\0132=.apollo.planning_internal.STGr"
  "aphDebug.STGraphSpeedConstraint\022W\n\021kerne"
  "l_cruise_ref\030\006 \001(\0132<.apollo.planning_int"
  "ernal.STGraphDebug.STGraphKernelCuiseRef"
  "\022X\n\021kernel_follow_ref\030\007 \001(\0132=.apollo.pla"
  "nning_internal.STGraphDebug.STGraphKerne"
  "lFollowRef\032M\n\026STGraphSpeedConstraint\022\t\n\001"
  "t\030\001 \003(\001\022\023\n\013lower_bound\030\002 \003(\001\022\023\n\013upper_bo"
  "und\030\003 \003(\001\0329\n\025STGraphKernelCuiseRef\022\t\n\001t\030"
  "\001 \003(\001\022\025\n\rcruise_line_s\030\002 \003(\001\032:\n\026STGraphK"
  "ernelFollowRef\022\t\n\001t\030\001 \003(\001\022\025\n\rfollow_line"
  "_s\030\002 \003(\001\"\255\002\n\020SignalLightDebug\022\021\n\tadc_spe"
  "ed\030\001 \001(\001\022\023\n\013adc_front_s\030\002 \001(\001\022F\n\006signal\030"
  "\003 \003(\01326.apollo.planning_internal.SignalL"
  "ightDebug.SignalDebug\032\250\001\n\013SignalDebug\022\020\n"
  "\010light_id\030\001 \001(\t\0224\n\005color\030\002 \001(\0162%.apollo."
  "perception.TrafficLight.Color\022\024\n\014light_s"
  "top_s\030\003 \001(\001\022\035\n\025adc_stop_deceleration\030\004 \001"
  "(\001\022\034\n\024is_stop_wall_created\030\005 \001(\010\"Y\n\013Deci"
  "sionTag\022\023\n\013decider_tag\030\001 \001(\t\0225\n\010decision"
  "\030\002 \001(\0132#.apollo.planning.ObjectDecisionT"
  "ype\"\300\001\n\rObstacleDebug\022\n\n\002id\030\001 \001(\t\0220\n\013sl_"
  "boundary\030\002 \001(\0132\033.apollo.planning.SLBound"
  "ary\022;\n\014decision_tag\030\003 \003(\0132%.apollo.plann"
  "ing_internal.DecisionTag\022\031\n\021vertices_x_c"
  "oords\030\004 \003(\001\022\031\n\021vertices_y_coords\030\005 \003(\001\"\331"
  "\002\n\022ReferenceLineDebug\022\n\n\002id\030\001 \001(\t\022\016\n\006len"
  "gth\030\002 \001(\001\022\014\n\004cost\030\003 \001(\001\022\033\n\023is_change_lan"
  "e_path\030\004 \001(\010\022\023\n\013is_drivable\030\005 \001(\010\022\024\n\014is_"
  "protected\030\006 \001(\010\022\022\n\nis_offroad\030\007 \001(\010\022\030\n\020m"
  "inimum_boundary\030\010 \001(\001\022\031\n\raverage_kappa\030\t"
  " \001(\001B\002\030\001\022\032\n\016average_dkappa\030\n \001(\001B\002\030\001\022\021\n\t"
  "kappa_rms\030\013 \001(\001\022\022\n\ndkappa_rms\030\014 \001(\001\022\025\n\rk"
  "appa_max_abs\030\r \001(\001\022\026\n\016dkappa_max_abs\030\016 \001"
  "(\001\022\026\n\016average_offset\030\017 \001(\001\"<\n\020SampleLaye"
  "rDebug\022(\n\010sl_point\030\001 \003(\0132\026.apollo.common"
  ".SLPoint\"\204\001\n\020DpPolyGraphDebug\022@\n\014sample_"
  "layer\030\001 \003(\0132*.apollo.planning_internal.S"
  "ampleLayerDebug\022.\n\016min_cost_point\030\002 \003(\0132"
  "\026.apollo.common.SLPoint\"\240\001\n\rScenarioDebu"
  "g\022C\n\rscenario_type\030\001 \001(\0162,.apollo.planni"
  "ng.ScenarioConfig.ScenarioType\022=\n\nstage_"
  "type\030\002 \001(\0162).apollo.planning.ScenarioCon"
  "fig.StageType\022\013\n\003msg\030\003 \001(\t\"=\n\014Trajectori"
  "es\022-\n\ntrajectory\030\001 \003(\0132\031.apollo.common.T"
  "rajectory\"\361\006\n\016OpenSpaceDebug\022<\n\014trajecto"
  "ries\030\001 \001(\0132&.apollo.planning_internal.Tr"
  "ajectories\022;\n\025warm_start_trajectory\030\002 \001("
  "\0132\034.apollo.common.VehicleMotion\0229\n\023smoot"
  "hed_trajectory\030\003 \001(\0132\034.apollo.common.Veh"
  "icleMotion\022\036\n\026warm_start_dual_lambda\030\004 \003"
  "(\001\022\033\n\023warm_start_dual_miu\030\005 \003(\001\022\035\n\025optim"
  "ized_dual_lambda\030\006 \003(\001\022\032\n\022optimized_dual"
  "_miu\030\007 \003(\001\022\023\n\013xy_boundary\030\010 \003(\001\022:\n\tobsta"
  "cles\030\t \003(\0132\'.apollo.planning_internal.Ob"
  "stacleDebug\0227\n\017roi_shift_point\030\n \001(\0132\036.a"
  "pollo.common.TrajectoryPoint\0221\n\tend_poin"
  "t\030\013 \001(\0132\036.apollo.common.TrajectoryPoint\022"
  "H\n\030partitioned_trajectories\030\014 \001(\0132&.apol"
  "lo.planning_internal.Trajectories\022A\n\021cho"
  "sen_trajectory\030\r \001(\0132&.apollo.planning_i"
  "nternal.Trajectories\022\036\n\026is_fallback_traj"
  "ectory\030\016 \001(\010\022C\n\023fallback_trajectory\030\017 \001("
  "\0132&.apollo.planning_internal.Trajectorie"
  "s\022B\n\032trajectory_stitching_point\030\020 \001(\0132\036."
  "apollo.common.TrajectoryPoint\022>\n\026future_"
  "collision_point\030\021 \001(\0132\036.apollo.common.Tr"
  "ajectoryPoint\"\303\001\n\rSmootherDebug\022\023\n\013is_sm"
  "oothed\030\001 \001(\010\022Q\n\004type\030\002 \001(\01624.apollo.plan"
  "ning_internal.SmootherDebug.SmootherType"
  ":\rSMOOTHER_NONE\022\016\n\006reason\030\003 \001(\t\":\n\014Smoot"
  "herType\022\021\n\rSMOOTHER_NONE\020\001\022\027\n\023SMOOTHER_C"
  "LOSE_STOP\020\002\"\257\t\n\014PlanningData\022\?\n\014adc_posi"
  "tion\030\007 \001(\0132).apollo.localization.Localiz"
  "ationEstimate\022\'\n\007chassis\030\010 \001(\0132\026.apollo."
  "canbus.Chassis\0220\n\007routing\030\t \001(\0132\037.apollo"
  ".routing.RoutingResponse\0222\n\ninit_point\030\n"
  " \001(\0132\036.apollo.common.TrajectoryPoint\022!\n\004"
  "path\030\006 \003(\0132\023.apollo.common.Path\0227\n\nspeed"
  "_plan\030\r \003(\0132#.apollo.planning_internal.S"
  "peedPlan\0228\n\010st_graph\030\016 \003(\0132&.apollo.plan"
  "ning_internal.STGraphDebug\0228\n\010sl_frame\030\017"
  " \003(\0132&.apollo.planning_internal.SLFrameD"
  "ebug\0220\n\021prediction_header\030\020 \001(\0132\025.apollo"
  ".common.Header\022@\n\014signal_light\030\021 \001(\0132*.a"
  "pollo.planning_internal.SignalLightDebug"
  "\0229\n\010obstacle\030\022 \003(\0132\'.apollo.planning_int"
  "ernal.ObstacleDebug\022D\n\016reference_line\030\023 "
  "\003(\0132,.apollo.planning_internal.Reference"
  "LineDebug\022A\n\rdp_poly_graph\030\024 \001(\0132*.apoll"
  "o.planning_internal.DpPolyGraphDebug\022E\n\020"
  "lattice_st_image\030\025 \001(\0132+.apollo.planning"
  "_internal.LatticeStTraining\0221\n\014relative_"
  "map\030\026 \001(\0132\033.apollo.relative_map.MapMsg\022S"
  "\n\031auto_tuning_training_data\030\027 \001(\01320.apol"
  "lo.planning_internal.AutoTuningTrainingD"
  "ata\022\034\n\024front_clear_distance\030\030 \001(\001\022&\n\005cha"
  "rt\030\031 \003(\0132\027.apollo.dreamview.Chart\0229\n\010sce"
  "nario\030\032 \001(\0132\'.apollo.planning_internal.S"
  "cenarioDebug\022<\n\nopen_space\030\033 \001(\0132(.apoll"
  "o.planning_internal.OpenSpaceDebug\0229\n\010sm"
  "oother\030\034 \001(\0132\'.apollo.planning_internal."
  "SmootherDebug\"G\n\016LatticeStPixel\022\t\n\001s\030\001 \001"
  "(\005\022\t\n\001t\030\002 \001(\005\022\t\n\001r\030\003 \001(\r\022\t\n\001g\030\004 \001(\r\022\t\n\001b"
  "\030\005 \001(\r\"\311\001\n\021LatticeStTraining\0227\n\005pixel\030\001 "
  "\003(\0132(.apollo.planning_internal.LatticeSt"
  "Pixel\022\021\n\ttimestamp\030\002 \001(\001\022\022\n\nannotation\030\003"
  " \001(\t\022\023\n\013num_s_grids\030\004 \001(\r\022\023\n\013num_t_grids"
  "\030\005 \001(\r\022\024\n\014s_resolution\030\006 \001(\001\022\024\n\014t_resolu"
  "tion\030\007 \001(\001\"(\n\016CostComponents\022\026\n\016cost_com"
  "ponent\030\001 \003(\001\"\242\001\n\026AutoTuningTrainingData\022"
  "C\n\021teacher_component\030\001 \001(\0132(.apollo.plan"
  "ning_internal.CostComponents\022C\n\021student_"
  "component\030\002 \001(\0132(.apollo.planning_intern"
  "al.CostComponents\"N\n\031CloudReferenceLineR"
  "equest\0221\n\014lane_segment\030\001 \003(\0132\033.apollo.ro"
  "uting.LaneSegment\"T\n CloudReferenceLineR"
  "outingRequest\0220\n\007routing\030\001 \001(\0132\037.apollo."
  "routing.RoutingResponse\"B\n\032CloudReferenc"
  "eLineResponse\022$\n\007segment\030\001 \003(\0132\023.apollo."
  "common.Path"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_deps[11] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fdreamview_2fproto_2fchart_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto,
  &::descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_sccs[27] = {
  &scc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_CloudReferenceLineRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_CloudReferenceLineResponse_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_CloudReferenceLineRoutingRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_Debug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
  &scc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto, "modules/planning/proto/planning_internal.proto", 6451,
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_deps, 27, 11,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto, 27, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto), true);
namespace apollo {
namespace planning_internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[0];
}
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_UNKNOWN;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_STOP;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_FOLLOW;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_YIELD;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_OVERTAKE;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_KEEP_CLEAR;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MIN;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MAX;
constexpr int StGraphBoundaryDebug::StBoundaryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmootherDebug_SmootherType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[1];
}
bool SmootherDebug_SmootherType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SmootherDebug_SmootherType SmootherDebug::SMOOTHER_NONE;
constexpr SmootherDebug_SmootherType SmootherDebug::SMOOTHER_CLOSE_STOP;
constexpr SmootherDebug_SmootherType SmootherDebug::SmootherType_MIN;
constexpr SmootherDebug_SmootherType SmootherDebug::SmootherType_MAX;
constexpr int SmootherDebug::SmootherType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Debug::InitAsDefaultInstance() {
  ::apollo::planning_internal::_Debug_default_instance_._instance.get_mutable()->planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(
      ::apollo::planning_internal::PlanningData::internal_default_instance());
}
class Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug>()._has_bits_);
  static const ::apollo::planning_internal::PlanningData& planning_data(const Debug* msg);
  static void set_has_planning_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning_internal::PlanningData&
Debug::_Internal::planning_data(const Debug* msg) {
  return *msg->planning_data_;
}
Debug::Debug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_planning_data()) {
    planning_data_ = new ::apollo::planning_internal::PlanningData(*from.planning_data_);
  } else {
    planning_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Debug)
}

void Debug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  planning_data_ = nullptr;
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != internal_default_instance()) delete planning_data_;
}

void Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug& Debug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(planning_data_ != nullptr);
    planning_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning_internal.PlanningData planning_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::planning_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Debug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planning_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.Debug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_planning_data()) {
    _internal_mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from._internal_planning_data());
  }
}

void Debug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(planning_data_, other->planning_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedPlan::InitAsDefaultInstance() {
}
class SpeedPlan::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPlan>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SpeedPlan::clear_speed_point() {
  speed_point_.Clear();
}
SpeedPlan::SpeedPlan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SpeedPlan)
}
SpeedPlan::SpeedPlan(const SpeedPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      speed_point_(from.speed_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SpeedPlan)
}

void SpeedPlan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpeedPlan::~SpeedPlan() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SpeedPlan)
  SharedDtor();
}

void SpeedPlan::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpeedPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedPlan& SpeedPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedPlan_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SpeedPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SpeedPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SpeedPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.SpeedPlan.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint speed_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SpeedPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SpeedPlan.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_speed_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SpeedPlan)
  return target;
}

size_t SpeedPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SpeedPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  total_size += 1UL * this->_internal_speed_point_size();
  for (const auto& msg : this->speed_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SpeedPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SpeedPlan)
    MergeFrom(*source);
  }
}

void SpeedPlan::MergeFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_point_.MergeFrom(from.speed_point_);
  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SpeedPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPlan::CopyFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPlan::IsInitialized() const {
  return true;
}

void SpeedPlan::InternalSwap(SpeedPlan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  speed_point_.InternalSwap(&other->speed_point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StGraphBoundaryDebug::InitAsDefaultInstance() {
}
class StGraphBoundaryDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<StGraphBoundaryDebug>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void StGraphBoundaryDebug::clear_point() {
  point_.Clear();
}
StGraphBoundaryDebug::StGraphBoundaryDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.StGraphBoundaryDebug)
}
StGraphBoundaryDebug::StGraphBoundaryDebug(const StGraphBoundaryDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.StGraphBoundaryDebug)
}

void StGraphBoundaryDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

StGraphBoundaryDebug::~StGraphBoundaryDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.StGraphBoundaryDebug)
  SharedDtor();
}

void StGraphBoundaryDebug::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StGraphBoundaryDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StGraphBoundaryDebug& StGraphBoundaryDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StGraphBoundaryDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void StGraphBoundaryDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.StGraphBoundaryDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StGraphBoundaryDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.StGraphBoundaryDebug.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StGraphBoundaryDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.StGraphBoundaryDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.StGraphBoundaryDebug.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.SpeedPoint point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_point(i), target, stream);
  }

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.StGraphBoundaryDebug)
  return target;
}

size_t StGraphBoundaryDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.StGraphBoundaryDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.SpeedPoint point = 2;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StGraphBoundaryDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const StGraphBoundaryDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StGraphBoundaryDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.StGraphBoundaryDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.StGraphBoundaryDebug)
    MergeFrom(*source);
  }
}

void StGraphBoundaryDebug::MergeFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StGraphBoundaryDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StGraphBoundaryDebug::CopyFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StGraphBoundaryDebug::IsInitialized() const {
  return true;
}

void StGraphBoundaryDebug::InternalSwap(StGraphBoundaryDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StGraphBoundaryDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SLFrameDebug::InitAsDefaultInstance() {
}
class SLFrameDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SLFrameDebug>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SLFrameDebug::clear_sl_path() {
  sl_path_.Clear();
}
SLFrameDebug::SLFrameDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SLFrameDebug)
}
SLFrameDebug::SLFrameDebug(const SLFrameDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sampled_s_(from.sampled_s_),
      static_obstacle_lower_bound_(from.static_obstacle_lower_bound_),
      dynamic_obstacle_lower_bound_(from.dynamic_obstacle_lower_bound_),
      static_obstacle_upper_bound_(from.static_obstacle_upper_bound_),
      dynamic_obstacle_upper_bound_(from.dynamic_obstacle_upper_bound_),
      map_lower_bound_(from.map_lower_bound_),
      map_upper_bound_(from.map_upper_bound_),
      sl_path_(from.sl_path_),
      aggregated_boundary_s_(from.aggregated_boundary_s_),
      aggregated_boundary_low_(from.aggregated_boundary_low_),
      aggregated_boundary_high_(from.aggregated_boundary_high_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SLFrameDebug)
}

void SLFrameDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SLFrameDebug::~SLFrameDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SLFrameDebug)
  SharedDtor();
}

void SLFrameDebug::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SLFrameDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SLFrameDebug& SLFrameDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SLFrameDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SLFrameDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SLFrameDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sampled_s_.Clear();
  static_obstacle_lower_bound_.Clear();
  dynamic_obstacle_lower_bound_.Clear();
  static_obstacle_upper_bound_.Clear();
  dynamic_obstacle_upper_bound_.Clear();
  map_lower_bound_.Clear();
  map_upper_bound_.Clear();
  sl_path_.Clear();
  aggregated_boundary_s_.Clear();
  aggregated_boundary_low_.Clear();
  aggregated_boundary_high_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SLFrameDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.SLFrameDebug.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double sampled_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sampled_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sampled_s(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double static_obstacle_lower_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_static_obstacle_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_static_obstacle_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double dynamic_obstacle_lower_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dynamic_obstacle_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dynamic_obstacle_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double static_obstacle_upper_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_static_obstacle_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_static_obstacle_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double dynamic_obstacle_upper_bound = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dynamic_obstacle_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dynamic_obstacle_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double map_lower_bound = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_map_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_map_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double map_upper_bound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_map_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_map_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.SLPoint sl_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sl_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double aggregated_boundary_s = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aggregated_boundary_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_aggregated_boundary_s(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double aggregated_boundary_low = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aggregated_boundary_low(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_aggregated_boundary_low(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double aggregated_boundary_high = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aggregated_boundary_high(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_aggregated_boundary_high(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SLFrameDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SLFrameDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SLFrameDebug.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated double sampled_s = 2;
  for (int i = 0, n = this->_internal_sampled_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sampled_s(i), target);
  }

  // repeated double static_obstacle_lower_bound = 3;
  for (int i = 0, n = this->_internal_static_obstacle_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_static_obstacle_lower_bound(i), target);
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  for (int i = 0, n = this->_internal_dynamic_obstacle_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dynamic_obstacle_lower_bound(i), target);
  }

  // repeated double static_obstacle_upper_bound = 5;
  for (int i = 0, n = this->_internal_static_obstacle_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_static_obstacle_upper_bound(i), target);
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  for (int i = 0, n = this->_internal_dynamic_obstacle_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dynamic_obstacle_upper_bound(i), target);
  }

  // repeated double map_lower_bound = 7;
  for (int i = 0, n = this->_internal_map_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_map_lower_bound(i), target);
  }

  // repeated double map_upper_bound = 8;
  for (int i = 0, n = this->_internal_map_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_map_upper_bound(i), target);
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sl_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_sl_path(i), target, stream);
  }

  // repeated double aggregated_boundary_s = 10;
  for (int i = 0, n = this->_internal_aggregated_boundary_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_aggregated_boundary_s(i), target);
  }

  // repeated double aggregated_boundary_low = 11;
  for (int i = 0, n = this->_internal_aggregated_boundary_low_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_aggregated_boundary_low(i), target);
  }

  // repeated double aggregated_boundary_high = 12;
  for (int i = 0, n = this->_internal_aggregated_boundary_high_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_aggregated_boundary_high(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SLFrameDebug)
  return target;
}

size_t SLFrameDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SLFrameDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sampled_s = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sampled_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sampled_s_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_lower_bound = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_static_obstacle_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_static_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dynamic_obstacle_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dynamic_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_upper_bound = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_static_obstacle_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_static_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dynamic_obstacle_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dynamic_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double map_lower_bound = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_map_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_lower_bound_size());
    total_size += data_size;
  }

  // repeated double map_upper_bound = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_map_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_upper_bound_size());
    total_size += data_size;
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  total_size += 1UL * this->_internal_sl_path_size();
  for (const auto& msg : this->sl_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double aggregated_boundary_s = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aggregated_boundary_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aggregated_boundary_s_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_low = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aggregated_boundary_low_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aggregated_boundary_low_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_high = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aggregated_boundary_high_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aggregated_boundary_high_size());
    total_size += data_size;
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SLFrameDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SLFrameDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SLFrameDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SLFrameDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SLFrameDebug)
    MergeFrom(*source);
  }
}

void SLFrameDebug::MergeFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sampled_s_.MergeFrom(from.sampled_s_);
  static_obstacle_lower_bound_.MergeFrom(from.static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.MergeFrom(from.dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.MergeFrom(from.static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.MergeFrom(from.dynamic_obstacle_upper_bound_);
  map_lower_bound_.MergeFrom(from.map_lower_bound_);
  map_upper_bound_.MergeFrom(from.map_upper_bound_);
  sl_path_.MergeFrom(from.sl_path_);
  aggregated_boundary_s_.MergeFrom(from.aggregated_boundary_s_);
  aggregated_boundary_low_.MergeFrom(from.aggregated_boundary_low_);
  aggregated_boundary_high_.MergeFrom(from.aggregated_boundary_high_);
  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SLFrameDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLFrameDebug::CopyFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLFrameDebug::IsInitialized() const {
  return true;
}

void SLFrameDebug::InternalSwap(SLFrameDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sampled_s_.InternalSwap(&other->sampled_s_);
  static_obstacle_lower_bound_.InternalSwap(&other->static_obstacle_lower_bound_);
  dynamic_obstacle_lower_bound_.InternalSwap(&other->dynamic_obstacle_lower_bound_);
  static_obstacle_upper_bound_.InternalSwap(&other->static_obstacle_upper_bound_);
  dynamic_obstacle_upper_bound_.InternalSwap(&other->dynamic_obstacle_upper_bound_);
  map_lower_bound_.InternalSwap(&other->map_lower_bound_);
  map_upper_bound_.InternalSwap(&other->map_upper_bound_);
  sl_path_.InternalSwap(&other->sl_path_);
  aggregated_boundary_s_.InternalSwap(&other->aggregated_boundary_s_);
  aggregated_boundary_low_.InternalSwap(&other->aggregated_boundary_low_);
  aggregated_boundary_high_.InternalSwap(&other->aggregated_boundary_high_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SLFrameDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STGraphDebug_STGraphSpeedConstraint::InitAsDefaultInstance() {
}
class STGraphDebug_STGraphSpeedConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<STGraphDebug_STGraphSpeedConstraint>()._has_bits_);
};

STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}
STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      t_(from.t_),
      lower_bound_(from.lower_bound_),
      upper_bound_(from.upper_bound_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

void STGraphDebug_STGraphSpeedConstraint::SharedCtor() {
}

STGraphDebug_STGraphSpeedConstraint::~STGraphDebug_STGraphSpeedConstraint() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  SharedDtor();
}

void STGraphDebug_STGraphSpeedConstraint::SharedDtor() {
}

void STGraphDebug_STGraphSpeedConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STGraphDebug_STGraphSpeedConstraint& STGraphDebug_STGraphSpeedConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STGraphDebug_STGraphSpeedConstraint_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void STGraphDebug_STGraphSpeedConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_.Clear();
  lower_bound_.Clear();
  upper_bound_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* STGraphDebug_STGraphSpeedConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double lower_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double upper_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STGraphDebug_STGraphSpeedConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(i), target);
  }

  // repeated double lower_bound = 2;
  for (int i = 0, n = this->_internal_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_bound(i), target);
  }

  // repeated double upper_bound = 3;
  for (int i = 0, n = this->_internal_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_upper_bound(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return target;
}

size_t STGraphDebug_STGraphSpeedConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_t_size());
    total_size += data_size;
  }

  // repeated double lower_bound = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lower_bound_size());
    total_size += data_size;
  }

  // repeated double upper_bound = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_upper_bound_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphSpeedConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STGraphDebug_STGraphSpeedConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  lower_bound_.MergeFrom(from.lower_bound_);
  upper_bound_.MergeFrom(from.upper_bound_);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphSpeedConstraint::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphSpeedConstraint::InternalSwap(STGraphDebug_STGraphSpeedConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  t_.InternalSwap(&other->t_);
  lower_bound_.InternalSwap(&other->lower_bound_);
  upper_bound_.InternalSwap(&other->upper_bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug_STGraphSpeedConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STGraphDebug_STGraphKernelCuiseRef::InitAsDefaultInstance() {
}
class STGraphDebug_STGraphKernelCuiseRef::_Internal {
 public:
  using HasBits = decltype(std::declval<STGraphDebug_STGraphKernelCuiseRef>()._has_bits_);
};

STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}
STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      t_(from.t_),
      cruise_line_s_(from.cruise_line_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

void STGraphDebug_STGraphKernelCuiseRef::SharedCtor() {
}

STGraphDebug_STGraphKernelCuiseRef::~STGraphDebug_STGraphKernelCuiseRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelCuiseRef::SharedDtor() {
}

void STGraphDebug_STGraphKernelCuiseRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STGraphDebug_STGraphKernelCuiseRef& STGraphDebug_STGraphKernelCuiseRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STGraphDebug_STGraphKernelCuiseRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void STGraphDebug_STGraphKernelCuiseRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_.Clear();
  cruise_line_s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* STGraphDebug_STGraphKernelCuiseRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double cruise_line_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cruise_line_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cruise_line_s(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STGraphDebug_STGraphKernelCuiseRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(i), target);
  }

  // repeated double cruise_line_s = 2;
  for (int i = 0, n = this->_internal_cruise_line_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cruise_line_s(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return target;
}

size_t STGraphDebug_STGraphKernelCuiseRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_t_size());
    total_size += data_size;
  }

  // repeated double cruise_line_s = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cruise_line_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cruise_line_s_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphKernelCuiseRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STGraphDebug_STGraphKernelCuiseRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  cruise_line_s_.MergeFrom(from.cruise_line_s_);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelCuiseRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelCuiseRef::InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  t_.InternalSwap(&other->t_);
  cruise_line_s_.InternalSwap(&other->cruise_line_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug_STGraphKernelCuiseRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STGraphDebug_STGraphKernelFollowRef::InitAsDefaultInstance() {
}
class STGraphDebug_STGraphKernelFollowRef::_Internal {
 public:
  using HasBits = decltype(std::declval<STGraphDebug_STGraphKernelFollowRef>()._has_bits_);
};

STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}
STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      t_(from.t_),
      follow_line_s_(from.follow_line_s_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

void STGraphDebug_STGraphKernelFollowRef::SharedCtor() {
}

STGraphDebug_STGraphKernelFollowRef::~STGraphDebug_STGraphKernelFollowRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  SharedDtor();
}

void STGraphDebug_STGraphKernelFollowRef::SharedDtor() {
}

void STGraphDebug_STGraphKernelFollowRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STGraphDebug_STGraphKernelFollowRef& STGraphDebug_STGraphKernelFollowRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STGraphDebug_STGraphKernelFollowRef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void STGraphDebug_STGraphKernelFollowRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_.Clear();
  follow_line_s_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* STGraphDebug_STGraphKernelFollowRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double follow_line_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_follow_line_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_follow_line_s(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STGraphDebug_STGraphKernelFollowRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(i), target);
  }

  // repeated double follow_line_s = 2;
  for (int i = 0, n = this->_internal_follow_line_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_follow_line_s(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return target;
}

size_t STGraphDebug_STGraphKernelFollowRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_t_size());
    total_size += data_size;
  }

  // repeated double follow_line_s = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_follow_line_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_follow_line_s_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug_STGraphKernelFollowRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STGraphDebug_STGraphKernelFollowRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
    MergeFrom(*source);
  }
}

void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_.MergeFrom(from.t_);
  follow_line_s_.MergeFrom(from.follow_line_s_);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelFollowRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelFollowRef::InternalSwap(STGraphDebug_STGraphKernelFollowRef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  t_.InternalSwap(&other->t_);
  follow_line_s_.InternalSwap(&other->follow_line_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug_STGraphKernelFollowRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STGraphDebug::InitAsDefaultInstance() {
  ::apollo::planning_internal::_STGraphDebug_default_instance_._instance.get_mutable()->speed_constraint_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint*>(
      ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::internal_default_instance());
  ::apollo::planning_internal::_STGraphDebug_default_instance_._instance.get_mutable()->kernel_cruise_ref_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef*>(
      ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::internal_default_instance());
  ::apollo::planning_internal::_STGraphDebug_default_instance_._instance.get_mutable()->kernel_follow_ref_ = const_cast< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef*>(
      ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::internal_default_instance());
}
class STGraphDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<STGraphDebug>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& speed_constraint(const STGraphDebug* msg);
  static void set_has_speed_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& kernel_cruise_ref(const STGraphDebug* msg);
  static void set_has_kernel_cruise_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& kernel_follow_ref(const STGraphDebug* msg);
  static void set_has_kernel_follow_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint&
STGraphDebug::_Internal::speed_constraint(const STGraphDebug* msg) {
  return *msg->speed_constraint_;
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef&
STGraphDebug::_Internal::kernel_cruise_ref(const STGraphDebug* msg) {
  return *msg->kernel_cruise_ref_;
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef&
STGraphDebug::_Internal::kernel_follow_ref(const STGraphDebug* msg) {
  return *msg->kernel_follow_ref_;
}
void STGraphDebug::clear_speed_limit() {
  speed_limit_.Clear();
}
void STGraphDebug::clear_speed_profile() {
  speed_profile_.Clear();
}
STGraphDebug::STGraphDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.STGraphDebug)
}
STGraphDebug::STGraphDebug(const STGraphDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      boundary_(from.boundary_),
      speed_limit_(from.speed_limit_),
      speed_profile_(from.speed_profile_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_speed_constraint()) {
    speed_constraint_ = new ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint(*from.speed_constraint_);
  } else {
    speed_constraint_ = nullptr;
  }
  if (from._internal_has_kernel_cruise_ref()) {
    kernel_cruise_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef(*from.kernel_cruise_ref_);
  } else {
    kernel_cruise_ref_ = nullptr;
  }
  if (from._internal_has_kernel_follow_ref()) {
    kernel_follow_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef(*from.kernel_follow_ref_);
  } else {
    kernel_follow_ref_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug)
}

void STGraphDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_constraint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kernel_follow_ref_) -
      reinterpret_cast<char*>(&speed_constraint_)) + sizeof(kernel_follow_ref_));
}

STGraphDebug::~STGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug)
  SharedDtor();
}

void STGraphDebug::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete speed_constraint_;
  if (this != internal_default_instance()) delete kernel_cruise_ref_;
  if (this != internal_default_instance()) delete kernel_follow_ref_;
}

void STGraphDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STGraphDebug& STGraphDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void STGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_.Clear();
  speed_limit_.Clear();
  speed_profile_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_constraint_ != nullptr);
      speed_constraint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kernel_cruise_ref_ != nullptr);
      kernel_cruise_ref_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(kernel_follow_ref_ != nullptr);
      kernel_follow_ref_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* STGraphDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.STGraphDebug.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint speed_profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_cruise_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_follow_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STGraphDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.STGraphDebug.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boundary(i), target, stream);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_speed_limit(i), target, stream);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_profile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_speed_profile(i), target, stream);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::speed_constraint(this), target, stream);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::kernel_cruise_ref(this), target, stream);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::kernel_follow_ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug)
  return target;
}

size_t STGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  total_size += 1UL * this->_internal_boundary_size();
  for (const auto& msg : this->boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  total_size += 1UL * this->_internal_speed_limit_size();
  for (const auto& msg : this->speed_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  total_size += 1UL * this->_internal_speed_profile_size();
  for (const auto& msg : this->speed_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_constraint_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kernel_cruise_ref_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kernel_follow_ref_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STGraphDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraphDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STGraphDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.STGraphDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.STGraphDebug)
    MergeFrom(*source);
  }
}

void STGraphDebug::MergeFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_.MergeFrom(from.boundary_);
  speed_limit_.MergeFrom(from.speed_limit_);
  speed_profile_.MergeFrom(from.speed_profile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speed_constraint()->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::MergeFrom(from._internal_speed_constraint());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kernel_cruise_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::MergeFrom(from._internal_kernel_cruise_ref());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_kernel_follow_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::MergeFrom(from._internal_kernel_follow_ref());
    }
  }
}

void STGraphDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraphDebug::CopyFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug::IsInitialized() const {
  return true;
}

void STGraphDebug::InternalSwap(STGraphDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boundary_.InternalSwap(&other->boundary_);
  speed_limit_.InternalSwap(&other->speed_limit_);
  speed_profile_.InternalSwap(&other->speed_profile_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(speed_constraint_, other->speed_constraint_);
  swap(kernel_cruise_ref_, other->kernel_cruise_ref_);
  swap(kernel_follow_ref_, other->kernel_follow_ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalLightDebug_SignalDebug::InitAsDefaultInstance() {
}
class SignalLightDebug_SignalDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalLightDebug_SignalDebug>()._has_bits_);
  static void set_has_light_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_light_stop_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adc_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_stop_wall_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}
SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_light_id()) {
    light_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  ::memcpy(&light_stop_s_, &from.light_stop_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_stop_deceleration_) -
    reinterpret_cast<char*>(&light_stop_s_)) + sizeof(adc_stop_deceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

void SignalLightDebug_SignalDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  light_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&light_stop_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_stop_deceleration_) -
      reinterpret_cast<char*>(&light_stop_s_)) + sizeof(adc_stop_deceleration_));
}

SignalLightDebug_SignalDebug::~SignalLightDebug_SignalDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
  SharedDtor();
}

void SignalLightDebug_SignalDebug::SharedDtor() {
  light_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignalLightDebug_SignalDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalLightDebug_SignalDebug& SignalLightDebug_SignalDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalLightDebug_SignalDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SignalLightDebug_SignalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    light_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&light_stop_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_stop_deceleration_) -
        reinterpret_cast<char*>(&light_stop_s_)) + sizeof(adc_stop_deceleration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SignalLightDebug_SignalDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string light_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_light_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLight.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double light_stop_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_light_stop_s(&has_bits);
          light_stop_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double adc_stop_deceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_adc_stop_deceleration(&has_bits);
          adc_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_stop_wall_created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_stop_wall_created(&has_bits);
          is_stop_wall_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalLightDebug_SignalDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string light_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_light_id().data(), static_cast<int>(this->_internal_light_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_light_id(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // optional double light_stop_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_light_stop_s(), target);
  }

  // optional double adc_stop_deceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_adc_stop_deceleration(), target);
  }

  // optional bool is_stop_wall_created = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_stop_wall_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return target;
}

size_t SignalLightDebug_SignalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string light_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_light_id());
    }

    // optional double light_stop_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.TrafficLight.Color color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool is_stop_wall_created = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double adc_stop_deceleration = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalLightDebug_SignalDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLightDebug_SignalDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalLightDebug_SignalDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SignalLightDebug.SignalDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SignalLightDebug.SignalDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug_SignalDebug::MergeFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      light_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.light_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      light_stop_s_ = from.light_stop_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_stop_wall_created_ = from.is_stop_wall_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      adc_stop_deceleration_ = from.adc_stop_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalLightDebug_SignalDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug_SignalDebug::CopyFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug_SignalDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug_SignalDebug::InternalSwap(SignalLightDebug_SignalDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  light_id_.Swap(&other->light_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(light_stop_s_, other->light_stop_s_);
  swap(color_, other->color_);
  swap(is_stop_wall_created_, other->is_stop_wall_created_);
  swap(adc_stop_deceleration_, other->adc_stop_deceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalLightDebug_SignalDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalLightDebug::InitAsDefaultInstance() {
}
class SignalLightDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalLightDebug>()._has_bits_);
  static void set_has_adc_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adc_front_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SignalLightDebug::SignalLightDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SignalLightDebug)
}
SignalLightDebug::SignalLightDebug(const SignalLightDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_speed_, &from.adc_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_front_s_) -
    reinterpret_cast<char*>(&adc_speed_)) + sizeof(adc_front_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug)
}

void SignalLightDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  ::memset(&adc_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_front_s_) -
      reinterpret_cast<char*>(&adc_speed_)) + sizeof(adc_front_s_));
}

SignalLightDebug::~SignalLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug)
  SharedDtor();
}

void SignalLightDebug::SharedDtor() {
}

void SignalLightDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalLightDebug& SignalLightDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalLightDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SignalLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&adc_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_front_s_) -
        reinterpret_cast<char*>(&adc_speed_)) + sizeof(adc_front_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SignalLightDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double adc_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_adc_speed(&has_bits);
          adc_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double adc_front_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_adc_front_s(&has_bits);
          adc_front_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalLightDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_adc_speed(), target);
  }

  // optional double adc_front_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_adc_front_s(), target);
  }

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_signal(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug)
  return target;
}

size_t SignalLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  total_size += 1UL * this->_internal_signal_size();
  for (const auto& msg : this->signal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double adc_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double adc_front_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalLightDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLightDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalLightDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SignalLightDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SignalLightDebug)
    MergeFrom(*source);
  }
}

void SignalLightDebug::MergeFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      adc_speed_ = from.adc_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      adc_front_s_ = from.adc_front_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignalLightDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLightDebug::CopyFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug::InternalSwap(SignalLightDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signal_.InternalSwap(&other->signal_);
  swap(adc_speed_, other->adc_speed_);
  swap(adc_front_s_, other->adc_front_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalLightDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionTag::InitAsDefaultInstance() {
  ::apollo::planning_internal::_DecisionTag_default_instance_._instance.get_mutable()->decision_ = const_cast< ::apollo::planning::ObjectDecisionType*>(
      ::apollo::planning::ObjectDecisionType::internal_default_instance());
}
class DecisionTag::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionTag>()._has_bits_);
  static void set_has_decider_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ObjectDecisionType& decision(const DecisionTag* msg);
  static void set_has_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::ObjectDecisionType&
DecisionTag::_Internal::decision(const DecisionTag* msg) {
  return *msg->decision_;
}
void DecisionTag::clear_decision() {
  if (decision_ != nullptr) decision_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DecisionTag::DecisionTag()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.DecisionTag)
}
DecisionTag::DecisionTag(const DecisionTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  decider_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decider_tag()) {
    decider_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
  }
  if (from._internal_has_decision()) {
    decision_ = new ::apollo::planning::ObjectDecisionType(*from.decision_);
  } else {
    decision_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DecisionTag)
}

void DecisionTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  decider_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decision_ = nullptr;
}

DecisionTag::~DecisionTag() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DecisionTag)
  SharedDtor();
}

void DecisionTag::SharedDtor() {
  decider_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decision_;
}

void DecisionTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionTag& DecisionTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionTag_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void DecisionTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DecisionTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      decider_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(decision_ != nullptr);
      decision_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DecisionTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string decider_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_decider_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.DecisionTag.decider_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectDecisionType decision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DecisionTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decider_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decider_tag().data(), static_cast<int>(this->_internal_decider_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.DecisionTag.decider_tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_decider_tag(), target);
  }

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::decision(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DecisionTag)
  return target;
}

size_t DecisionTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DecisionTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string decider_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decider_tag());
    }

    // optional .apollo.planning.ObjectDecisionType decision = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decision_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.DecisionTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.DecisionTag)
    MergeFrom(*source);
  }
}

void DecisionTag::MergeFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      decider_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decider_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_decision()->::apollo::planning::ObjectDecisionType::MergeFrom(from._internal_decision());
    }
  }
}

void DecisionTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTag::CopyFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTag::IsInitialized() const {
  return true;
}

void DecisionTag::InternalSwap(DecisionTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decider_tag_.Swap(&other->decider_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(decision_, other->decision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleDebug::InitAsDefaultInstance() {
  ::apollo::planning_internal::_ObstacleDebug_default_instance_._instance.get_mutable()->sl_boundary_ = const_cast< ::apollo::planning::SLBoundary*>(
      ::apollo::planning::SLBoundary::internal_default_instance());
}
class ObstacleDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleDebug>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::SLBoundary& sl_boundary(const ObstacleDebug* msg);
  static void set_has_sl_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::SLBoundary&
ObstacleDebug::_Internal::sl_boundary(const ObstacleDebug* msg) {
  return *msg->sl_boundary_;
}
void ObstacleDebug::clear_sl_boundary() {
  if (sl_boundary_ != nullptr) sl_boundary_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ObstacleDebug::ObstacleDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ObstacleDebug)
}
ObstacleDebug::ObstacleDebug(const ObstacleDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      decision_tag_(from.decision_tag_),
      vertices_x_coords_(from.vertices_x_coords_),
      vertices_y_coords_(from.vertices_y_coords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_sl_boundary()) {
    sl_boundary_ = new ::apollo::planning::SLBoundary(*from.sl_boundary_);
  } else {
    sl_boundary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ObstacleDebug)
}

void ObstacleDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sl_boundary_ = nullptr;
}

ObstacleDebug::~ObstacleDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ObstacleDebug)
  SharedDtor();
}

void ObstacleDebug::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sl_boundary_;
}

void ObstacleDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleDebug& ObstacleDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void ObstacleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ObstacleDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decision_tag_.Clear();
  vertices_x_coords_.Clear();
  vertices_y_coords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sl_boundary_ != nullptr);
      sl_boundary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObstacleDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.ObstacleDebug.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.SLBoundary sl_boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sl_boundary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decision_tag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double vertices_x_coords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vertices_x_coords(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vertices_x_coords(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double vertices_y_coords = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vertices_y_coords(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_vertices_y_coords(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ObstacleDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ObstacleDebug.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sl_boundary(this), target, stream);
  }

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_decision_tag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_decision_tag(i), target, stream);
  }

  // repeated double vertices_x_coords = 4;
  for (int i = 0, n = this->_internal_vertices_x_coords_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_vertices_x_coords(i), target);
  }

  // repeated double vertices_y_coords = 5;
  for (int i = 0, n = this->_internal_vertices_y_coords_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_vertices_y_coords(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ObstacleDebug)
  return target;
}

size_t ObstacleDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ObstacleDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  total_size += 1UL * this->_internal_decision_tag_size();
  for (const auto& msg : this->decision_tag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double vertices_x_coords = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertices_x_coords_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vertices_x_coords_size());
    total_size += data_size;
  }

  // repeated double vertices_y_coords = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertices_y_coords_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vertices_y_coords_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.planning.SLBoundary sl_boundary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sl_boundary_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ObstacleDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ObstacleDebug)
    MergeFrom(*source);
  }
}

void ObstacleDebug::MergeFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decision_tag_.MergeFrom(from.decision_tag_);
  vertices_x_coords_.MergeFrom(from.vertices_x_coords_);
  vertices_y_coords_.MergeFrom(from.vertices_y_coords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sl_boundary()->::apollo::planning::SLBoundary::MergeFrom(from._internal_sl_boundary());
    }
  }
}

void ObstacleDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleDebug::CopyFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDebug::IsInitialized() const {
  return true;
}

void ObstacleDebug::InternalSwap(ObstacleDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decision_tag_.InternalSwap(&other->decision_tag_);
  vertices_x_coords_.InternalSwap(&other->vertices_x_coords_);
  vertices_y_coords_.InternalSwap(&other->vertices_y_coords_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sl_boundary_, other->sl_boundary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceLineDebug::InitAsDefaultInstance() {
}
class ReferenceLineDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineDebug>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_change_lane_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_drivable(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_protected(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_offroad(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_minimum_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_average_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_average_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kappa_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dkappa_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_kappa_max_abs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dkappa_max_abs(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_average_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ReferenceLineDebug::ReferenceLineDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ReferenceLineDebug)
}
ReferenceLineDebug::ReferenceLineDebug(const ReferenceLineDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_offroad_) -
    reinterpret_cast<char*>(&length_)) + sizeof(is_offroad_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ReferenceLineDebug)
}

void ReferenceLineDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_offroad_) -
      reinterpret_cast<char*>(&length_)) + sizeof(is_offroad_));
}

ReferenceLineDebug::~ReferenceLineDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ReferenceLineDebug)
  SharedDtor();
}

void ReferenceLineDebug::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReferenceLineDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceLineDebug& ReferenceLineDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceLineDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void ReferenceLineDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ReferenceLineDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dkappa_rms_) -
        reinterpret_cast<char*>(&length_)) + sizeof(dkappa_rms_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&kappa_max_abs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_offroad_) -
        reinterpret_cast<char*>(&kappa_max_abs_)) + sizeof(is_offroad_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReferenceLineDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.ReferenceLineDebug.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cost(&has_bits);
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_change_lane_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_change_lane_path(&has_bits);
          is_change_lane_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_drivable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_drivable(&has_bits);
          is_drivable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_protected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_protected(&has_bits);
          is_protected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_offroad = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_offroad(&has_bits);
          is_offroad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double minimum_boundary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_minimum_boundary(&has_bits);
          minimum_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double average_kappa = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_average_kappa(&has_bits);
          average_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double average_dkappa = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_average_dkappa(&has_bits);
          average_dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa_rms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_kappa_rms(&has_bits);
          kappa_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dkappa_rms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_dkappa_rms(&has_bits);
          dkappa_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa_max_abs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_kappa_max_abs(&has_bits);
          kappa_max_abs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dkappa_max_abs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_dkappa_max_abs(&has_bits);
          dkappa_max_abs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double average_offset = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_average_offset(&has_bits);
          average_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceLineDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ReferenceLineDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ReferenceLineDebug.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cost(), target);
  }

  // optional bool is_change_lane_path = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_change_lane_path(), target);
  }

  // optional bool is_drivable = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_drivable(), target);
  }

  // optional bool is_protected = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_protected(), target);
  }

  // optional bool is_offroad = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_offroad(), target);
  }

  // optional double minimum_boundary = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_minimum_boundary(), target);
  }

  // optional double average_kappa = 9 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_average_kappa(), target);
  }

  // optional double average_dkappa = 10 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_average_dkappa(), target);
  }

  // optional double kappa_rms = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_kappa_rms(), target);
  }

  // optional double dkappa_rms = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_dkappa_rms(), target);
  }

  // optional double kappa_max_abs = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_kappa_max_abs(), target);
  }

  // optional double dkappa_max_abs = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_dkappa_max_abs(), target);
  }

  // optional double average_offset = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_average_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ReferenceLineDebug)
  return target;
}

size_t ReferenceLineDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ReferenceLineDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double cost = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double minimum_boundary = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double average_kappa = 9 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double average_dkappa = 10 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double kappa_rms = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double dkappa_rms = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double kappa_max_abs = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double dkappa_max_abs = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double average_offset = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional bool is_change_lane_path = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_drivable = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_protected = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_offroad = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceLineDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ReferenceLineDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ReferenceLineDebug)
    MergeFrom(*source);
  }
}

void ReferenceLineDebug::MergeFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      minimum_boundary_ = from.minimum_boundary_;
    }
    if (cached_has_bits & 0x00000010u) {
      average_kappa_ = from.average_kappa_;
    }
    if (cached_has_bits & 0x00000020u) {
      average_dkappa_ = from.average_dkappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      kappa_rms_ = from.kappa_rms_;
    }
    if (cached_has_bits & 0x00000080u) {
      dkappa_rms_ = from.dkappa_rms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      kappa_max_abs_ = from.kappa_max_abs_;
    }
    if (cached_has_bits & 0x00000200u) {
      dkappa_max_abs_ = from.dkappa_max_abs_;
    }
    if (cached_has_bits & 0x00000400u) {
      average_offset_ = from.average_offset_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_change_lane_path_ = from.is_change_lane_path_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_drivable_ = from.is_drivable_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_protected_ = from.is_protected_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_offroad_ = from.is_offroad_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineDebug::CopyFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineDebug::IsInitialized() const {
  return true;
}

void ReferenceLineDebug::InternalSwap(ReferenceLineDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(length_, other->length_);
  swap(cost_, other->cost_);
  swap(minimum_boundary_, other->minimum_boundary_);
  swap(average_kappa_, other->average_kappa_);
  swap(average_dkappa_, other->average_dkappa_);
  swap(kappa_rms_, other->kappa_rms_);
  swap(dkappa_rms_, other->dkappa_rms_);
  swap(kappa_max_abs_, other->kappa_max_abs_);
  swap(dkappa_max_abs_, other->dkappa_max_abs_);
  swap(average_offset_, other->average_offset_);
  swap(is_change_lane_path_, other->is_change_lane_path_);
  swap(is_drivable_, other->is_drivable_);
  swap(is_protected_, other->is_protected_);
  swap(is_offroad_, other->is_offroad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SampleLayerDebug::InitAsDefaultInstance() {
}
class SampleLayerDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SampleLayerDebug>()._has_bits_);
};

void SampleLayerDebug::clear_sl_point() {
  sl_point_.Clear();
}
SampleLayerDebug::SampleLayerDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SampleLayerDebug)
}
SampleLayerDebug::SampleLayerDebug(const SampleLayerDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sl_point_(from.sl_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SampleLayerDebug)
}

void SampleLayerDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
}

SampleLayerDebug::~SampleLayerDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SampleLayerDebug)
  SharedDtor();
}

void SampleLayerDebug::SharedDtor() {
}

void SampleLayerDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SampleLayerDebug& SampleLayerDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SampleLayerDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SampleLayerDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SampleLayerDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sl_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SampleLayerDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.common.SLPoint sl_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sl_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SampleLayerDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SampleLayerDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.SLPoint sl_point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sl_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sl_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SampleLayerDebug)
  return target;
}

size_t SampleLayerDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SampleLayerDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.SLPoint sl_point = 1;
  total_size += 1UL * this->_internal_sl_point_size();
  for (const auto& msg : this->sl_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampleLayerDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleLayerDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SampleLayerDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SampleLayerDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SampleLayerDebug)
    MergeFrom(*source);
  }
}

void SampleLayerDebug::MergeFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sl_point_.MergeFrom(from.sl_point_);
}

void SampleLayerDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleLayerDebug::CopyFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleLayerDebug::IsInitialized() const {
  return true;
}

void SampleLayerDebug::InternalSwap(SampleLayerDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sl_point_.InternalSwap(&other->sl_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleLayerDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DpPolyGraphDebug::InitAsDefaultInstance() {
}
class DpPolyGraphDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<DpPolyGraphDebug>()._has_bits_);
};

void DpPolyGraphDebug::clear_min_cost_point() {
  min_cost_point_.Clear();
}
DpPolyGraphDebug::DpPolyGraphDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.DpPolyGraphDebug)
}
DpPolyGraphDebug::DpPolyGraphDebug(const DpPolyGraphDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sample_layer_(from.sample_layer_),
      min_cost_point_(from.min_cost_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DpPolyGraphDebug)
}

void DpPolyGraphDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
}

DpPolyGraphDebug::~DpPolyGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DpPolyGraphDebug)
  SharedDtor();
}

void DpPolyGraphDebug::SharedDtor() {
}

void DpPolyGraphDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpPolyGraphDebug& DpPolyGraphDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpPolyGraphDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void DpPolyGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DpPolyGraphDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_layer_.Clear();
  min_cost_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DpPolyGraphDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.SLPoint min_cost_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_min_cost_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DpPolyGraphDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DpPolyGraphDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sample_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sample_layer(i), target, stream);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_min_cost_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_min_cost_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DpPolyGraphDebug)
  return target;
}

size_t DpPolyGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DpPolyGraphDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  total_size += 1UL * this->_internal_sample_layer_size();
  for (const auto& msg : this->sample_layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  total_size += 1UL * this->_internal_min_cost_point_size();
  for (const auto& msg : this->min_cost_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpPolyGraphDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const DpPolyGraphDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpPolyGraphDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.DpPolyGraphDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.DpPolyGraphDebug)
    MergeFrom(*source);
  }
}

void DpPolyGraphDebug::MergeFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_layer_.MergeFrom(from.sample_layer_);
  min_cost_point_.MergeFrom(from.min_cost_point_);
}

void DpPolyGraphDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyGraphDebug::CopyFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyGraphDebug::IsInitialized() const {
  return true;
}

void DpPolyGraphDebug::InternalSwap(DpPolyGraphDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sample_layer_.InternalSwap(&other->sample_layer_);
  min_cost_point_.InternalSwap(&other->min_cost_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpPolyGraphDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioDebug::InitAsDefaultInstance() {
}
class ScenarioDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioDebug>()._has_bits_);
  static void set_has_scenario_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioDebug::ScenarioDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.ScenarioDebug)
}
ScenarioDebug::ScenarioDebug(const ScenarioDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&scenario_type_, &from.scenario_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_type_) -
    reinterpret_cast<char*>(&scenario_type_)) + sizeof(stage_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ScenarioDebug)
}

void ScenarioDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scenario_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_type_) -
      reinterpret_cast<char*>(&scenario_type_)) + sizeof(stage_type_));
}

ScenarioDebug::~ScenarioDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ScenarioDebug)
  SharedDtor();
}

void ScenarioDebug::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScenarioDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioDebug& ScenarioDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void ScenarioDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ScenarioDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&scenario_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stage_type_) -
        reinterpret_cast<char*>(&scenario_type_)) + sizeof(stage_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScenarioDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(val))) {
            _internal_set_scenario_type(static_cast<::apollo::planning::ScenarioConfig_ScenarioType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.ScenarioConfig.StageType stage_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_StageType_IsValid(val))) {
            _internal_set_stage_type(static_cast<::apollo::planning::ScenarioConfig_StageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.ScenarioDebug.msg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ScenarioDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scenario_type(), target);
  }

  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage_type(), target);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ScenarioDebug.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ScenarioDebug)
  return target;
}

size_t ScenarioDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ScenarioDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string msg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scenario_type());
    }

    // optional .apollo.planning.ScenarioConfig.StageType stage_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.ScenarioDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.ScenarioDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.ScenarioDebug)
    MergeFrom(*source);
  }
}

void ScenarioDebug::MergeFrom(const ScenarioDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ScenarioDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      scenario_type_ = from.scenario_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      stage_type_ = from.stage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.ScenarioDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioDebug::CopyFrom(const ScenarioDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ScenarioDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioDebug::IsInitialized() const {
  return true;
}

void ScenarioDebug::InternalSwap(ScenarioDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scenario_type_, other->scenario_type_);
  swap(stage_type_, other->stage_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectories::InitAsDefaultInstance() {
}
class Trajectories::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectories>()._has_bits_);
};

void Trajectories::clear_trajectory() {
  trajectory_.Clear();
}
Trajectories::Trajectories()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.Trajectories)
}
Trajectories::Trajectories(const Trajectories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Trajectories)
}

void Trajectories::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
}

Trajectories::~Trajectories() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Trajectories)
  SharedDtor();
}

void Trajectories::SharedDtor() {
}

void Trajectories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectories& Trajectories::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectories_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void Trajectories::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Trajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Trajectories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.common.Trajectory trajectory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectories::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Trajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Trajectory trajectory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trajectory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Trajectories)
  return target;
}

size_t Trajectories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Trajectories)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Trajectory trajectory = 1;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectories::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.Trajectories)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectories* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectories>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.Trajectories)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.Trajectories)
    MergeFrom(*source);
  }
}

void Trajectories::MergeFrom(const Trajectories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Trajectories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void Trajectories::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.Trajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectories::CopyFrom(const Trajectories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Trajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectories::IsInitialized() const {
  return true;
}

void Trajectories::InternalSwap(Trajectories* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trajectory_.InternalSwap(&other->trajectory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectories::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenSpaceDebug::InitAsDefaultInstance() {
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->trajectories_ = const_cast< ::apollo::planning_internal::Trajectories*>(
      ::apollo::planning_internal::Trajectories::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->warm_start_trajectory_ = const_cast< ::apollo::common::VehicleMotion*>(
      ::apollo::common::VehicleMotion::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->smoothed_trajectory_ = const_cast< ::apollo::common::VehicleMotion*>(
      ::apollo::common::VehicleMotion::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->roi_shift_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->end_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->partitioned_trajectories_ = const_cast< ::apollo::planning_internal::Trajectories*>(
      ::apollo::planning_internal::Trajectories::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->chosen_trajectory_ = const_cast< ::apollo::planning_internal::Trajectories*>(
      ::apollo::planning_internal::Trajectories::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->fallback_trajectory_ = const_cast< ::apollo::planning_internal::Trajectories*>(
      ::apollo::planning_internal::Trajectories::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->trajectory_stitching_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
  ::apollo::planning_internal::_OpenSpaceDebug_default_instance_._instance.get_mutable()->future_collision_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
}
class OpenSpaceDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceDebug>()._has_bits_);
  static const ::apollo::planning_internal::Trajectories& trajectories(const OpenSpaceDebug* msg);
  static void set_has_trajectories(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::VehicleMotion& warm_start_trajectory(const OpenSpaceDebug* msg);
  static void set_has_warm_start_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::VehicleMotion& smoothed_trajectory(const OpenSpaceDebug* msg);
  static void set_has_smoothed_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::TrajectoryPoint& roi_shift_point(const OpenSpaceDebug* msg);
  static void set_has_roi_shift_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::TrajectoryPoint& end_point(const OpenSpaceDebug* msg);
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning_internal::Trajectories& partitioned_trajectories(const OpenSpaceDebug* msg);
  static void set_has_partitioned_trajectories(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning_internal::Trajectories& chosen_trajectory(const OpenSpaceDebug* msg);
  static void set_has_chosen_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_fallback_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::planning_internal::Trajectories& fallback_trajectory(const OpenSpaceDebug* msg);
  static void set_has_fallback_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::common::TrajectoryPoint& trajectory_stitching_point(const OpenSpaceDebug* msg);
  static void set_has_trajectory_stitching_point(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::common::TrajectoryPoint& future_collision_point(const OpenSpaceDebug* msg);
  static void set_has_future_collision_point(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::apollo::planning_internal::Trajectories&
OpenSpaceDebug::_Internal::trajectories(const OpenSpaceDebug* msg) {
  return *msg->trajectories_;
}
const ::apollo::common::VehicleMotion&
OpenSpaceDebug::_Internal::warm_start_trajectory(const OpenSpaceDebug* msg) {
  return *msg->warm_start_trajectory_;
}
const ::apollo::common::VehicleMotion&
OpenSpaceDebug::_Internal::smoothed_trajectory(const OpenSpaceDebug* msg) {
  return *msg->smoothed_trajectory_;
}
const ::apollo::common::TrajectoryPoint&
OpenSpaceDebug::_Internal::roi_shift_point(const OpenSpaceDebug* msg) {
  return *msg->roi_shift_point_;
}
const ::apollo::common::TrajectoryPoint&
OpenSpaceDebug::_Internal::end_point(const OpenSpaceDebug* msg) {
  return *msg->end_point_;
}
const ::apollo::planning_internal::Trajectories&
OpenSpaceDebug::_Internal::partitioned_trajectories(const OpenSpaceDebug* msg) {
  return *msg->partitioned_trajectories_;
}
const ::apollo::planning_internal::Trajectories&
OpenSpaceDebug::_Internal::chosen_trajectory(const OpenSpaceDebug* msg) {
  return *msg->chosen_trajectory_;
}
const ::apollo::planning_internal::Trajectories&
OpenSpaceDebug::_Internal::fallback_trajectory(const OpenSpaceDebug* msg) {
  return *msg->fallback_trajectory_;
}
const ::apollo::common::TrajectoryPoint&
OpenSpaceDebug::_Internal::trajectory_stitching_point(const OpenSpaceDebug* msg) {
  return *msg->trajectory_stitching_point_;
}
const ::apollo::common::TrajectoryPoint&
OpenSpaceDebug::_Internal::future_collision_point(const OpenSpaceDebug* msg) {
  return *msg->future_collision_point_;
}
void OpenSpaceDebug::clear_warm_start_trajectory() {
  if (warm_start_trajectory_ != nullptr) warm_start_trajectory_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void OpenSpaceDebug::clear_smoothed_trajectory() {
  if (smoothed_trajectory_ != nullptr) smoothed_trajectory_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void OpenSpaceDebug::clear_roi_shift_point() {
  if (roi_shift_point_ != nullptr) roi_shift_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void OpenSpaceDebug::clear_end_point() {
  if (end_point_ != nullptr) end_point_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void OpenSpaceDebug::clear_trajectory_stitching_point() {
  if (trajectory_stitching_point_ != nullptr) trajectory_stitching_point_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void OpenSpaceDebug::clear_future_collision_point() {
  if (future_collision_point_ != nullptr) future_collision_point_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
OpenSpaceDebug::OpenSpaceDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.OpenSpaceDebug)
}
OpenSpaceDebug::OpenSpaceDebug(const OpenSpaceDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      warm_start_dual_lambda_(from.warm_start_dual_lambda_),
      warm_start_dual_miu_(from.warm_start_dual_miu_),
      optimized_dual_lambda_(from.optimized_dual_lambda_),
      optimized_dual_miu_(from.optimized_dual_miu_),
      xy_boundary_(from.xy_boundary_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trajectories()) {
    trajectories_ = new ::apollo::planning_internal::Trajectories(*from.trajectories_);
  } else {
    trajectories_ = nullptr;
  }
  if (from._internal_has_warm_start_trajectory()) {
    warm_start_trajectory_ = new ::apollo::common::VehicleMotion(*from.warm_start_trajectory_);
  } else {
    warm_start_trajectory_ = nullptr;
  }
  if (from._internal_has_smoothed_trajectory()) {
    smoothed_trajectory_ = new ::apollo::common::VehicleMotion(*from.smoothed_trajectory_);
  } else {
    smoothed_trajectory_ = nullptr;
  }
  if (from._internal_has_roi_shift_point()) {
    roi_shift_point_ = new ::apollo::common::TrajectoryPoint(*from.roi_shift_point_);
  } else {
    roi_shift_point_ = nullptr;
  }
  if (from._internal_has_end_point()) {
    end_point_ = new ::apollo::common::TrajectoryPoint(*from.end_point_);
  } else {
    end_point_ = nullptr;
  }
  if (from._internal_has_partitioned_trajectories()) {
    partitioned_trajectories_ = new ::apollo::planning_internal::Trajectories(*from.partitioned_trajectories_);
  } else {
    partitioned_trajectories_ = nullptr;
  }
  if (from._internal_has_chosen_trajectory()) {
    chosen_trajectory_ = new ::apollo::planning_internal::Trajectories(*from.chosen_trajectory_);
  } else {
    chosen_trajectory_ = nullptr;
  }
  if (from._internal_has_fallback_trajectory()) {
    fallback_trajectory_ = new ::apollo::planning_internal::Trajectories(*from.fallback_trajectory_);
  } else {
    fallback_trajectory_ = nullptr;
  }
  if (from._internal_has_trajectory_stitching_point()) {
    trajectory_stitching_point_ = new ::apollo::common::TrajectoryPoint(*from.trajectory_stitching_point_);
  } else {
    trajectory_stitching_point_ = nullptr;
  }
  if (from._internal_has_future_collision_point()) {
    future_collision_point_ = new ::apollo::common::TrajectoryPoint(*from.future_collision_point_);
  } else {
    future_collision_point_ = nullptr;
  }
  is_fallback_trajectory_ = from.is_fallback_trajectory_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.OpenSpaceDebug)
}

void OpenSpaceDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  ::memset(&trajectories_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_fallback_trajectory_) -
      reinterpret_cast<char*>(&trajectories_)) + sizeof(is_fallback_trajectory_));
}

OpenSpaceDebug::~OpenSpaceDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.OpenSpaceDebug)
  SharedDtor();
}

void OpenSpaceDebug::SharedDtor() {
  if (this != internal_default_instance()) delete trajectories_;
  if (this != internal_default_instance()) delete warm_start_trajectory_;
  if (this != internal_default_instance()) delete smoothed_trajectory_;
  if (this != internal_default_instance()) delete roi_shift_point_;
  if (this != internal_default_instance()) delete end_point_;
  if (this != internal_default_instance()) delete partitioned_trajectories_;
  if (this != internal_default_instance()) delete chosen_trajectory_;
  if (this != internal_default_instance()) delete fallback_trajectory_;
  if (this != internal_default_instance()) delete trajectory_stitching_point_;
  if (this != internal_default_instance()) delete future_collision_point_;
}

void OpenSpaceDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSpaceDebug& OpenSpaceDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSpaceDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void OpenSpaceDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.OpenSpaceDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  warm_start_dual_lambda_.Clear();
  warm_start_dual_miu_.Clear();
  optimized_dual_lambda_.Clear();
  optimized_dual_miu_.Clear();
  xy_boundary_.Clear();
  obstacles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trajectories_ != nullptr);
      trajectories_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(warm_start_trajectory_ != nullptr);
      warm_start_trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(smoothed_trajectory_ != nullptr);
      smoothed_trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(roi_shift_point_ != nullptr);
      roi_shift_point_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(end_point_ != nullptr);
      end_point_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(partitioned_trajectories_ != nullptr);
      partitioned_trajectories_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(chosen_trajectory_ != nullptr);
      chosen_trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(fallback_trajectory_ != nullptr);
      fallback_trajectory_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(trajectory_stitching_point_ != nullptr);
      trajectory_stitching_point_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(future_collision_point_ != nullptr);
      future_collision_point_->Clear();
    }
  }
  is_fallback_trajectory_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OpenSpaceDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning_internal.Trajectories trajectories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectories(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleMotion warm_start_trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_warm_start_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleMotion smoothed_trajectory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_smoothed_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double warm_start_dual_lambda = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_warm_start_dual_lambda(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_warm_start_dual_lambda(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double warm_start_dual_miu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_warm_start_dual_miu(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_warm_start_dual_miu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double optimized_dual_lambda = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_optimized_dual_lambda(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_optimized_dual_lambda(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double optimized_dual_miu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_optimized_dual_miu(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_optimized_dual_miu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double xy_boundary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_xy_boundary(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_xy_boundary(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.ObstacleDebug obstacles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint roi_shift_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_shift_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint end_point = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.Trajectories partitioned_trajectories = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_partitioned_trajectories(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.Trajectories chosen_trajectory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_chosen_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_fallback_trajectory = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_fallback_trajectory(&has_bits);
          is_fallback_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.Trajectories fallback_trajectory = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint trajectory_stitching_point = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_stitching_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint future_collision_point = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_future_collision_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.OpenSpaceDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.Trajectories trajectories = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trajectories(this), target, stream);
  }

  // optional .apollo.common.VehicleMotion warm_start_trajectory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::warm_start_trajectory(this), target, stream);
  }

  // optional .apollo.common.VehicleMotion smoothed_trajectory = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::smoothed_trajectory(this), target, stream);
  }

  // repeated double warm_start_dual_lambda = 4;
  for (int i = 0, n = this->_internal_warm_start_dual_lambda_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_warm_start_dual_lambda(i), target);
  }

  // repeated double warm_start_dual_miu = 5;
  for (int i = 0, n = this->_internal_warm_start_dual_miu_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_warm_start_dual_miu(i), target);
  }

  // repeated double optimized_dual_lambda = 6;
  for (int i = 0, n = this->_internal_optimized_dual_lambda_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_optimized_dual_lambda(i), target);
  }

  // repeated double optimized_dual_miu = 7;
  for (int i = 0, n = this->_internal_optimized_dual_miu_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_optimized_dual_miu(i), target);
  }

  // repeated double xy_boundary = 8;
  for (int i = 0, n = this->_internal_xy_boundary_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_xy_boundary(i), target);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacles = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_obstacles(i), target, stream);
  }

  // optional .apollo.common.TrajectoryPoint roi_shift_point = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::roi_shift_point(this), target, stream);
  }

  // optional .apollo.common.TrajectoryPoint end_point = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::end_point(this), target, stream);
  }

  // optional .apollo.planning_internal.Trajectories partitioned_trajectories = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::partitioned_trajectories(this), target, stream);
  }

  // optional .apollo.planning_internal.Trajectories chosen_trajectory = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::chosen_trajectory(this), target, stream);
  }

  // optional bool is_fallback_trajectory = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_fallback_trajectory(), target);
  }

  // optional .apollo.planning_internal.Trajectories fallback_trajectory = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::fallback_trajectory(this), target, stream);
  }

  // optional .apollo.common.TrajectoryPoint trajectory_stitching_point = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::trajectory_stitching_point(this), target, stream);
  }

  // optional .apollo.common.TrajectoryPoint future_collision_point = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::future_collision_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.OpenSpaceDebug)
  return target;
}

size_t OpenSpaceDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.OpenSpaceDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double warm_start_dual_lambda = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_warm_start_dual_lambda_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_warm_start_dual_lambda_size());
    total_size += data_size;
  }

  // repeated double warm_start_dual_miu = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_warm_start_dual_miu_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_warm_start_dual_miu_size());
    total_size += data_size;
  }

  // repeated double optimized_dual_lambda = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_optimized_dual_lambda_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_optimized_dual_lambda_size());
    total_size += data_size;
  }

  // repeated double optimized_dual_miu = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_optimized_dual_miu_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_optimized_dual_miu_size());
    total_size += data_size;
  }

  // repeated double xy_boundary = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_xy_boundary_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_xy_boundary_size());
    total_size += data_size;
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacles = 9;
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning_internal.Trajectories trajectories = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectories_);
    }

    // optional .apollo.common.VehicleMotion warm_start_trajectory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *warm_start_trajectory_);
    }

    // optional .apollo.common.VehicleMotion smoothed_trajectory = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smoothed_trajectory_);
    }

    // optional .apollo.common.TrajectoryPoint roi_shift_point = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roi_shift_point_);
    }

    // optional .apollo.common.TrajectoryPoint end_point = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_point_);
    }

    // optional .apollo.planning_internal.Trajectories partitioned_trajectories = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partitioned_trajectories_);
    }

    // optional .apollo.planning_internal.Trajectories chosen_trajectory = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chosen_trajectory_);
    }

    // optional .apollo.planning_internal.Trajectories fallback_trajectory = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fallback_trajectory_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .apollo.common.TrajectoryPoint trajectory_stitching_point = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_stitching_point_);
    }

    // optional .apollo.common.TrajectoryPoint future_collision_point = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *future_collision_point_);
    }

    // optional bool is_fallback_trajectory = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.OpenSpaceDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSpaceDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.OpenSpaceDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.OpenSpaceDebug)
    MergeFrom(*source);
  }
}

void OpenSpaceDebug::MergeFrom(const OpenSpaceDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.OpenSpaceDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  warm_start_dual_lambda_.MergeFrom(from.warm_start_dual_lambda_);
  warm_start_dual_miu_.MergeFrom(from.warm_start_dual_miu_);
  optimized_dual_lambda_.MergeFrom(from.optimized_dual_lambda_);
  optimized_dual_miu_.MergeFrom(from.optimized_dual_miu_);
  xy_boundary_.MergeFrom(from.xy_boundary_);
  obstacles_.MergeFrom(from.obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trajectories()->::apollo::planning_internal::Trajectories::MergeFrom(from._internal_trajectories());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_warm_start_trajectory()->::apollo::common::VehicleMotion::MergeFrom(from._internal_warm_start_trajectory());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_smoothed_trajectory()->::apollo::common::VehicleMotion::MergeFrom(from._internal_smoothed_trajectory());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_roi_shift_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_roi_shift_point());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_end_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_end_point());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_partitioned_trajectories()->::apollo::planning_internal::Trajectories::MergeFrom(from._internal_partitioned_trajectories());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_chosen_trajectory()->::apollo::planning_internal::Trajectories::MergeFrom(from._internal_chosen_trajectory());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_fallback_trajectory()->::apollo::planning_internal::Trajectories::MergeFrom(from._internal_fallback_trajectory());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_trajectory_stitching_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_trajectory_stitching_point());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_future_collision_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_future_collision_point());
    }
    if (cached_has_bits & 0x00000400u) {
      is_fallback_trajectory_ = from.is_fallback_trajectory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.OpenSpaceDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceDebug::CopyFrom(const OpenSpaceDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.OpenSpaceDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceDebug::IsInitialized() const {
  return true;
}

void OpenSpaceDebug::InternalSwap(OpenSpaceDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  warm_start_dual_lambda_.InternalSwap(&other->warm_start_dual_lambda_);
  warm_start_dual_miu_.InternalSwap(&other->warm_start_dual_miu_);
  optimized_dual_lambda_.InternalSwap(&other->optimized_dual_lambda_);
  optimized_dual_miu_.InternalSwap(&other->optimized_dual_miu_);
  xy_boundary_.InternalSwap(&other->xy_boundary_);
  obstacles_.InternalSwap(&other->obstacles_);
  swap(trajectories_, other->trajectories_);
  swap(warm_start_trajectory_, other->warm_start_trajectory_);
  swap(smoothed_trajectory_, other->smoothed_trajectory_);
  swap(roi_shift_point_, other->roi_shift_point_);
  swap(end_point_, other->end_point_);
  swap(partitioned_trajectories_, other->partitioned_trajectories_);
  swap(chosen_trajectory_, other->chosen_trajectory_);
  swap(fallback_trajectory_, other->fallback_trajectory_);
  swap(trajectory_stitching_point_, other->trajectory_stitching_point_);
  swap(future_collision_point_, other->future_collision_point_);
  swap(is_fallback_trajectory_, other->is_fallback_trajectory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmootherDebug::InitAsDefaultInstance() {
}
class SmootherDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SmootherDebug>()._has_bits_);
  static void set_has_is_smoothed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SmootherDebug::SmootherDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.SmootherDebug)
}
SmootherDebug::SmootherDebug(const SmootherDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reason()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&is_smoothed_, &from.is_smoothed_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&is_smoothed_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SmootherDebug)
}

void SmootherDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_smoothed_ = false;
  type_ = 1;
}

SmootherDebug::~SmootherDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SmootherDebug)
  SharedDtor();
}

void SmootherDebug::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SmootherDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmootherDebug& SmootherDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmootherDebug_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void SmootherDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SmootherDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    is_smoothed_ = false;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SmootherDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_smoothed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_smoothed(&has_bits);
          is_smoothed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning_internal::SmootherDebug_SmootherType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning_internal::SmootherDebug_SmootherType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.SmootherDebug.reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmootherDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SmootherDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_smoothed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_smoothed(), target);
  }

  // optional .apollo.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional string reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SmootherDebug.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SmootherDebug)
  return target;
}

size_t SmootherDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SmootherDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string reason = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional bool is_smoothed = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning_internal.SmootherDebug.SmootherType type = 2 [default = SMOOTHER_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmootherDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.SmootherDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SmootherDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmootherDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.SmootherDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.SmootherDebug)
    MergeFrom(*source);
  }
}

void SmootherDebug::MergeFrom(const SmootherDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SmootherDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_smoothed_ = from.is_smoothed_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SmootherDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.SmootherDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmootherDebug::CopyFrom(const SmootherDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SmootherDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmootherDebug::IsInitialized() const {
  return true;
}

void SmootherDebug::InternalSwap(SmootherDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_smoothed_, other->is_smoothed_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmootherDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningData::InitAsDefaultInstance() {
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->adc_position_ = const_cast< ::apollo::localization::LocalizationEstimate*>(
      ::apollo::localization::LocalizationEstimate::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->chassis_ = const_cast< ::apollo::canbus::Chassis*>(
      ::apollo::canbus::Chassis::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->routing_ = const_cast< ::apollo::routing::RoutingResponse*>(
      ::apollo::routing::RoutingResponse::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->init_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->prediction_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->signal_light_ = const_cast< ::apollo::planning_internal::SignalLightDebug*>(
      ::apollo::planning_internal::SignalLightDebug::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->dp_poly_graph_ = const_cast< ::apollo::planning_internal::DpPolyGraphDebug*>(
      ::apollo::planning_internal::DpPolyGraphDebug::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->lattice_st_image_ = const_cast< ::apollo::planning_internal::LatticeStTraining*>(
      ::apollo::planning_internal::LatticeStTraining::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->relative_map_ = const_cast< ::apollo::relative_map::MapMsg*>(
      ::apollo::relative_map::MapMsg::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->auto_tuning_training_data_ = const_cast< ::apollo::planning_internal::AutoTuningTrainingData*>(
      ::apollo::planning_internal::AutoTuningTrainingData::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::apollo::planning_internal::ScenarioDebug*>(
      ::apollo::planning_internal::ScenarioDebug::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->open_space_ = const_cast< ::apollo::planning_internal::OpenSpaceDebug*>(
      ::apollo::planning_internal::OpenSpaceDebug::internal_default_instance());
  ::apollo::planning_internal::_PlanningData_default_instance_._instance.get_mutable()->smoother_ = const_cast< ::apollo::planning_internal::SmootherDebug*>(
      ::apollo::planning_internal::SmootherDebug::internal_default_instance());
}
class PlanningData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningData>()._has_bits_);
  static const ::apollo::localization::LocalizationEstimate& adc_position(const PlanningData* msg);
  static void set_has_adc_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Chassis& chassis(const PlanningData* msg);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::RoutingResponse& routing(const PlanningData* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::TrajectoryPoint& init_point(const PlanningData* msg);
  static void set_has_init_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Header& prediction_header(const PlanningData* msg);
  static void set_has_prediction_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning_internal::SignalLightDebug& signal_light(const PlanningData* msg);
  static void set_has_signal_light(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning_internal::DpPolyGraphDebug& dp_poly_graph(const PlanningData* msg);
  static void set_has_dp_poly_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning_internal::LatticeStTraining& lattice_st_image(const PlanningData* msg);
  static void set_has_lattice_st_image(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::relative_map::MapMsg& relative_map(const PlanningData* msg);
  static void set_has_relative_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::planning_internal::AutoTuningTrainingData& auto_tuning_training_data(const PlanningData* msg);
  static void set_has_auto_tuning_training_data(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_front_clear_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::planning_internal::ScenarioDebug& scenario(const PlanningData* msg);
  static void set_has_scenario(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::planning_internal::OpenSpaceDebug& open_space(const PlanningData* msg);
  static void set_has_open_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::planning_internal::SmootherDebug& smoother(const PlanningData* msg);
  static void set_has_smoother(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::apollo::localization::LocalizationEstimate&
PlanningData::_Internal::adc_position(const PlanningData* msg) {
  return *msg->adc_position_;
}
const ::apollo::canbus::Chassis&
PlanningData::_Internal::chassis(const PlanningData* msg) {
  return *msg->chassis_;
}
const ::apollo::routing::RoutingResponse&
PlanningData::_Internal::routing(const PlanningData* msg) {
  return *msg->routing_;
}
const ::apollo::common::TrajectoryPoint&
PlanningData::_Internal::init_point(const PlanningData* msg) {
  return *msg->init_point_;
}
const ::apollo::common::Header&
PlanningData::_Internal::prediction_header(const PlanningData* msg) {
  return *msg->prediction_header_;
}
const ::apollo::planning_internal::SignalLightDebug&
PlanningData::_Internal::signal_light(const PlanningData* msg) {
  return *msg->signal_light_;
}
const ::apollo::planning_internal::DpPolyGraphDebug&
PlanningData::_Internal::dp_poly_graph(const PlanningData* msg) {
  return *msg->dp_poly_graph_;
}
const ::apollo::planning_internal::LatticeStTraining&
PlanningData::_Internal::lattice_st_image(const PlanningData* msg) {
  return *msg->lattice_st_image_;
}
const ::apollo::relative_map::MapMsg&
PlanningData::_Internal::relative_map(const PlanningData* msg) {
  return *msg->relative_map_;
}
const ::apollo::planning_internal::AutoTuningTrainingData&
PlanningData::_Internal::auto_tuning_training_data(const PlanningData* msg) {
  return *msg->auto_tuning_training_data_;
}
const ::apollo::planning_internal::ScenarioDebug&
PlanningData::_Internal::scenario(const PlanningData* msg) {
  return *msg->scenario_;
}
const ::apollo::planning_internal::OpenSpaceDebug&
PlanningData::_Internal::open_space(const PlanningData* msg) {
  return *msg->open_space_;
}
const ::apollo::planning_internal::SmootherDebug&
PlanningData::_Internal::smoother(const PlanningData* msg) {
  return *msg->smoother_;
}
void PlanningData::clear_adc_position() {
  if (adc_position_ != nullptr) adc_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PlanningData::clear_chassis() {
  if (chassis_ != nullptr) chassis_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PlanningData::clear_routing() {
  if (routing_ != nullptr) routing_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PlanningData::clear_init_point() {
  if (init_point_ != nullptr) init_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PlanningData::clear_path() {
  path_.Clear();
}
void PlanningData::clear_prediction_header() {
  if (prediction_header_ != nullptr) prediction_header_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void PlanningData::clear_relative_map() {
  if (relative_map_ != nullptr) relative_map_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void PlanningData::clear_chart() {
  chart_.Clear();
}
PlanningData::PlanningData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.PlanningData)
}
PlanningData::PlanningData(const PlanningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      path_(from.path_),
      speed_plan_(from.speed_plan_),
      st_graph_(from.st_graph_),
      sl_frame_(from.sl_frame_),
      obstacle_(from.obstacle_),
      reference_line_(from.reference_line_),
      chart_(from.chart_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_adc_position()) {
    adc_position_ = new ::apollo::localization::LocalizationEstimate(*from.adc_position_);
  } else {
    adc_position_ = nullptr;
  }
  if (from._internal_has_chassis()) {
    chassis_ = new ::apollo::canbus::Chassis(*from.chassis_);
  } else {
    chassis_ = nullptr;
  }
  if (from._internal_has_routing()) {
    routing_ = new ::apollo::routing::RoutingResponse(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  if (from._internal_has_init_point()) {
    init_point_ = new ::apollo::common::TrajectoryPoint(*from.init_point_);
  } else {
    init_point_ = nullptr;
  }
  if (from._internal_has_prediction_header()) {
    prediction_header_ = new ::apollo::common::Header(*from.prediction_header_);
  } else {
    prediction_header_ = nullptr;
  }
  if (from._internal_has_signal_light()) {
    signal_light_ = new ::apollo::planning_internal::SignalLightDebug(*from.signal_light_);
  } else {
    signal_light_ = nullptr;
  }
  if (from._internal_has_dp_poly_graph()) {
    dp_poly_graph_ = new ::apollo::planning_internal::DpPolyGraphDebug(*from.dp_poly_graph_);
  } else {
    dp_poly_graph_ = nullptr;
  }
  if (from._internal_has_lattice_st_image()) {
    lattice_st_image_ = new ::apollo::planning_internal::LatticeStTraining(*from.lattice_st_image_);
  } else {
    lattice_st_image_ = nullptr;
  }
  if (from._internal_has_relative_map()) {
    relative_map_ = new ::apollo::relative_map::MapMsg(*from.relative_map_);
  } else {
    relative_map_ = nullptr;
  }
  if (from._internal_has_auto_tuning_training_data()) {
    auto_tuning_training_data_ = new ::apollo::planning_internal::AutoTuningTrainingData(*from.auto_tuning_training_data_);
  } else {
    auto_tuning_training_data_ = nullptr;
  }
  if (from._internal_has_scenario()) {
    scenario_ = new ::apollo::planning_internal::ScenarioDebug(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_open_space()) {
    open_space_ = new ::apollo::planning_internal::OpenSpaceDebug(*from.open_space_);
  } else {
    open_space_ = nullptr;
  }
  if (from._internal_has_smoother()) {
    smoother_ = new ::apollo::planning_internal::SmootherDebug(*from.smoother_);
  } else {
    smoother_ = nullptr;
  }
  front_clear_distance_ = from.front_clear_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.PlanningData)
}

void PlanningData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  ::memset(&adc_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_clear_distance_) -
      reinterpret_cast<char*>(&adc_position_)) + sizeof(front_clear_distance_));
}

PlanningData::~PlanningData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.PlanningData)
  SharedDtor();
}

void PlanningData::SharedDtor() {
  if (this != internal_default_instance()) delete adc_position_;
  if (this != internal_default_instance()) delete chassis_;
  if (this != internal_default_instance()) delete routing_;
  if (this != internal_default_instance()) delete init_point_;
  if (this != internal_default_instance()) delete prediction_header_;
  if (this != internal_default_instance()) delete signal_light_;
  if (this != internal_default_instance()) delete dp_poly_graph_;
  if (this != internal_default_instance()) delete lattice_st_image_;
  if (this != internal_default_instance()) delete relative_map_;
  if (this != internal_default_instance()) delete auto_tuning_training_data_;
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete open_space_;
  if (this != internal_default_instance()) delete smoother_;
}

void PlanningData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningData& PlanningData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void PlanningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.PlanningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  speed_plan_.Clear();
  st_graph_.Clear();
  sl_frame_.Clear();
  obstacle_.Clear();
  reference_line_.Clear();
  chart_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(adc_position_ != nullptr);
      adc_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chassis_ != nullptr);
      chassis_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(routing_ != nullptr);
      routing_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(init_point_ != nullptr);
      init_point_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(prediction_header_ != nullptr);
      prediction_header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(signal_light_ != nullptr);
      signal_light_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dp_poly_graph_ != nullptr);
      dp_poly_graph_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(lattice_st_image_ != nullptr);
      lattice_st_image_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(relative_map_ != nullptr);
      relative_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(auto_tuning_training_data_ != nullptr);
      auto_tuning_training_data_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(scenario_ != nullptr);
      scenario_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(open_space_ != nullptr);
      open_space_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(smoother_ != nullptr);
      smoother_->Clear();
    }
  }
  front_clear_distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlanningData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.common.Path path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.localization.LocalizationEstimate adc_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis chassis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingResponse routing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint init_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_plan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_st_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sl_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header prediction_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reference_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dp_poly_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_lattice_st_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.relative_map.MapMsg relative_map = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_tuning_training_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double front_clear_distance = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_front_clear_distance(&has_bits);
          front_clear_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Chart chart = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chart(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.ScenarioDebug scenario = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.OpenSpaceDebug open_space = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.SmootherDebug smoother = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_smoother(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.PlanningData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Path path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_path(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::adc_position(this), target, stream);
  }

  // optional .apollo.canbus.Chassis chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::chassis(this), target, stream);
  }

  // optional .apollo.routing.RoutingResponse routing = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::routing(this), target, stream);
  }

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::init_point(this), target, stream);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speed_plan_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_speed_plan(i), target, stream);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_st_graph_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_st_graph(i), target, stream);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sl_frame_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_sl_frame(i), target, stream);
  }

  // optional .apollo.common.Header prediction_header = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::prediction_header(this), target, stream);
  }

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::signal_light(this), target, stream);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_obstacle(i), target, stream);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reference_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_reference_line(i), target, stream);
  }

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::dp_poly_graph(this), target, stream);
  }

  // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::lattice_st_image(this), target, stream);
  }

  // optional .apollo.relative_map.MapMsg relative_map = 22;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::relative_map(this), target, stream);
  }

  // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::auto_tuning_training_data(this), target, stream);
  }

  // optional double front_clear_distance = 24;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_front_clear_distance(), target);
  }

  // repeated .apollo.dreamview.Chart chart = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chart_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_chart(i), target, stream);
  }

  // optional .apollo.planning_internal.ScenarioDebug scenario = 26;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::scenario(this), target, stream);
  }

  // optional .apollo.planning_internal.OpenSpaceDebug open_space = 27;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::open_space(this), target, stream);
  }

  // optional .apollo.planning_internal.SmootherDebug smoother = 28;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::smoother(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.PlanningData)
  return target;
}

size_t PlanningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.PlanningData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Path path = 6;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  total_size += 1UL * this->_internal_speed_plan_size();
  for (const auto& msg : this->speed_plan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  total_size += 1UL * this->_internal_st_graph_size();
  for (const auto& msg : this->st_graph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  total_size += 1UL * this->_internal_sl_frame_size();
  for (const auto& msg : this->sl_frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  total_size += 2UL * this->_internal_obstacle_size();
  for (const auto& msg : this->obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  total_size += 2UL * this->_internal_reference_line_size();
  for (const auto& msg : this->reference_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Chart chart = 25;
  total_size += 2UL * this->_internal_chart_size();
  for (const auto& msg : this->chart_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.localization.LocalizationEstimate adc_position = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adc_position_);
    }

    // optional .apollo.canbus.Chassis chassis = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chassis_);
    }

    // optional .apollo.routing.RoutingResponse routing = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_);
    }

    // optional .apollo.common.TrajectoryPoint init_point = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *init_point_);
    }

    // optional .apollo.common.Header prediction_header = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_header_);
    }

    // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_light_);
    }

    // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dp_poly_graph_);
    }

    // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lattice_st_image_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.relative_map.MapMsg relative_map = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relative_map_);
    }

    // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_tuning_training_data_);
    }

    // optional .apollo.planning_internal.ScenarioDebug scenario = 26;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scenario_);
    }

    // optional .apollo.planning_internal.OpenSpaceDebug open_space = 27;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *open_space_);
    }

    // optional .apollo.planning_internal.SmootherDebug smoother = 28;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smoother_);
    }

    // optional double front_clear_distance = 24;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.PlanningData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.PlanningData)
    MergeFrom(*source);
  }
}

void PlanningData::MergeFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  speed_plan_.MergeFrom(from.speed_plan_);
  st_graph_.MergeFrom(from.st_graph_);
  sl_frame_.MergeFrom(from.sl_frame_);
  obstacle_.MergeFrom(from.obstacle_);
  reference_line_.MergeFrom(from.reference_line_);
  chart_.MergeFrom(from.chart_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_adc_position()->::apollo::localization::LocalizationEstimate::MergeFrom(from._internal_adc_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chassis()->::apollo::canbus::Chassis::MergeFrom(from._internal_chassis());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from._internal_routing());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_init_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_init_point());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_prediction_header()->::apollo::common::Header::MergeFrom(from._internal_prediction_header());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_signal_light()->::apollo::planning_internal::SignalLightDebug::MergeFrom(from._internal_signal_light());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dp_poly_graph()->::apollo::planning_internal::DpPolyGraphDebug::MergeFrom(from._internal_dp_poly_graph());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_lattice_st_image()->::apollo::planning_internal::LatticeStTraining::MergeFrom(from._internal_lattice_st_image());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_relative_map()->::apollo::relative_map::MapMsg::MergeFrom(from._internal_relative_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_auto_tuning_training_data()->::apollo::planning_internal::AutoTuningTrainingData::MergeFrom(from._internal_auto_tuning_training_data());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_scenario()->::apollo::planning_internal::ScenarioDebug::MergeFrom(from._internal_scenario());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_open_space()->::apollo::planning_internal::OpenSpaceDebug::MergeFrom(from._internal_open_space());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_smoother()->::apollo::planning_internal::SmootherDebug::MergeFrom(from._internal_smoother());
    }
    if (cached_has_bits & 0x00002000u) {
      front_clear_distance_ = from.front_clear_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningData::CopyFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningData::IsInitialized() const {
  return true;
}

void PlanningData::InternalSwap(PlanningData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.InternalSwap(&other->path_);
  speed_plan_.InternalSwap(&other->speed_plan_);
  st_graph_.InternalSwap(&other->st_graph_);
  sl_frame_.InternalSwap(&other->sl_frame_);
  obstacle_.InternalSwap(&other->obstacle_);
  reference_line_.InternalSwap(&other->reference_line_);
  chart_.InternalSwap(&other->chart_);
  swap(adc_position_, other->adc_position_);
  swap(chassis_, other->chassis_);
  swap(routing_, other->routing_);
  swap(init_point_, other->init_point_);
  swap(prediction_header_, other->prediction_header_);
  swap(signal_light_, other->signal_light_);
  swap(dp_poly_graph_, other->dp_poly_graph_);
  swap(lattice_st_image_, other->lattice_st_image_);
  swap(relative_map_, other->relative_map_);
  swap(auto_tuning_training_data_, other->auto_tuning_training_data_);
  swap(scenario_, other->scenario_);
  swap(open_space_, other->open_space_);
  swap(smoother_, other->smoother_);
  swap(front_clear_distance_, other->front_clear_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatticeStPixel::InitAsDefaultInstance() {
}
class LatticeStPixel::_Internal {
 public:
  using HasBits = decltype(std::declval<LatticeStPixel>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

LatticeStPixel::LatticeStPixel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.LatticeStPixel)
}
LatticeStPixel::LatticeStPixel(const LatticeStPixel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&s_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.LatticeStPixel)
}

void LatticeStPixel::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&s_)) + sizeof(b_));
}

LatticeStPixel::~LatticeStPixel() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.LatticeStPixel)
  SharedDtor();
}

void LatticeStPixel::SharedDtor() {
}

void LatticeStPixel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatticeStPixel& LatticeStPixel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatticeStPixel_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void LatticeStPixel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.LatticeStPixel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&s_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatticeStPixel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_t(&has_bits);
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatticeStPixel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.LatticeStPixel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_s(), target);
  }

  // optional int32 t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_t(), target);
  }

  // optional uint32 r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_r(), target);
  }

  // optional uint32 g = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_g(), target);
  }

  // optional uint32 b = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.LatticeStPixel)
  return target;
}

size_t LatticeStPixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.LatticeStPixel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_s());
    }

    // optional int32 t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_t());
    }

    // optional uint32 r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_r());
    }

    // optional uint32 g = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_g());
    }

    // optional uint32 b = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_b());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatticeStPixel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.LatticeStPixel)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeStPixel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatticeStPixel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.LatticeStPixel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.LatticeStPixel)
    MergeFrom(*source);
  }
}

void LatticeStPixel::MergeFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.LatticeStPixel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000008u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000010u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatticeStPixel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeStPixel::CopyFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStPixel::IsInitialized() const {
  return true;
}

void LatticeStPixel::InternalSwap(LatticeStPixel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeStPixel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatticeStTraining::InitAsDefaultInstance() {
}
class LatticeStTraining::_Internal {
 public:
  using HasBits = decltype(std::declval<LatticeStTraining>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_s_grids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_t_grids(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_t_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LatticeStTraining::LatticeStTraining()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.LatticeStTraining)
}
LatticeStTraining::LatticeStTraining(const LatticeStTraining& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pixel_(from.pixel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_annotation()) {
    annotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_resolution_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(t_resolution_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.LatticeStTraining)
}

void LatticeStTraining::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  annotation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_resolution_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(t_resolution_));
}

LatticeStTraining::~LatticeStTraining() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.LatticeStTraining)
  SharedDtor();
}

void LatticeStTraining::SharedDtor() {
  annotation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LatticeStTraining::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatticeStTraining& LatticeStTraining::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatticeStTraining_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void LatticeStTraining::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.LatticeStTraining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixel_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    annotation_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_resolution_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(t_resolution_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatticeStTraining::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pixel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string annotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_annotation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning_internal.LatticeStTraining.annotation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_s_grids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_s_grids(&has_bits);
          num_s_grids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_t_grids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_t_grids(&has_bits);
          num_t_grids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double s_resolution = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_s_resolution(&has_bits);
          s_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double t_resolution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_t_resolution(&has_bits);
          t_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatticeStTraining::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.LatticeStTraining)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pixel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pixel(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // optional string annotation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_annotation().data(), static_cast<int>(this->_internal_annotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.LatticeStTraining.annotation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation(), target);
  }

  // optional uint32 num_s_grids = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_s_grids(), target);
  }

  // optional uint32 num_t_grids = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_t_grids(), target);
  }

  // optional double s_resolution = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_s_resolution(), target);
  }

  // optional double t_resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_t_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.LatticeStTraining)
  return target;
}

size_t LatticeStTraining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.LatticeStTraining)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  total_size += 1UL * this->_internal_pixel_size();
  for (const auto& msg : this->pixel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string annotation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_annotation());
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_s_grids = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_s_grids());
    }

    // optional uint32 num_t_grids = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_t_grids());
    }

    // optional double s_resolution = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double t_resolution = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatticeStTraining::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.LatticeStTraining)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeStTraining* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatticeStTraining>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.LatticeStTraining)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.LatticeStTraining)
    MergeFrom(*source);
  }
}

void LatticeStTraining::MergeFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.LatticeStTraining)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pixel_.MergeFrom(from.pixel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      annotation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.annotation_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_s_grids_ = from.num_s_grids_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_t_grids_ = from.num_t_grids_;
    }
    if (cached_has_bits & 0x00000010u) {
      s_resolution_ = from.s_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      t_resolution_ = from.t_resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatticeStTraining::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeStTraining::CopyFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStTraining::IsInitialized() const {
  return true;
}

void LatticeStTraining::InternalSwap(LatticeStTraining* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pixel_.InternalSwap(&other->pixel_);
  annotation_.Swap(&other->annotation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(num_s_grids_, other->num_s_grids_);
  swap(num_t_grids_, other->num_t_grids_);
  swap(s_resolution_, other->s_resolution_);
  swap(t_resolution_, other->t_resolution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeStTraining::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CostComponents::InitAsDefaultInstance() {
}
class CostComponents::_Internal {
 public:
  using HasBits = decltype(std::declval<CostComponents>()._has_bits_);
};

CostComponents::CostComponents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CostComponents)
}
CostComponents::CostComponents(const CostComponents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cost_component_(from.cost_component_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CostComponents)
}

void CostComponents::SharedCtor() {
}

CostComponents::~CostComponents() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CostComponents)
  SharedDtor();
}

void CostComponents::SharedDtor() {
}

void CostComponents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostComponents& CostComponents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostComponents_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void CostComponents::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CostComponents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_component_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CostComponents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double cost_component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cost_component(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cost_component(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostComponents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CostComponents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double cost_component = 1;
  for (int i = 0, n = this->_internal_cost_component_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_cost_component(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CostComponents)
  return target;
}

size_t CostComponents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CostComponents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double cost_component = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cost_component_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cost_component_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostComponents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CostComponents)
  GOOGLE_DCHECK_NE(&from, this);
  const CostComponents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostComponents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CostComponents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CostComponents)
    MergeFrom(*source);
  }
}

void CostComponents::MergeFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CostComponents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_component_.MergeFrom(from.cost_component_);
}

void CostComponents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostComponents::CopyFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostComponents::IsInitialized() const {
  return true;
}

void CostComponents::InternalSwap(CostComponents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cost_component_.InternalSwap(&other->cost_component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostComponents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoTuningTrainingData::InitAsDefaultInstance() {
  ::apollo::planning_internal::_AutoTuningTrainingData_default_instance_._instance.get_mutable()->teacher_component_ = const_cast< ::apollo::planning_internal::CostComponents*>(
      ::apollo::planning_internal::CostComponents::internal_default_instance());
  ::apollo::planning_internal::_AutoTuningTrainingData_default_instance_._instance.get_mutable()->student_component_ = const_cast< ::apollo::planning_internal::CostComponents*>(
      ::apollo::planning_internal::CostComponents::internal_default_instance());
}
class AutoTuningTrainingData::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoTuningTrainingData>()._has_bits_);
  static const ::apollo::planning_internal::CostComponents& teacher_component(const AutoTuningTrainingData* msg);
  static void set_has_teacher_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning_internal::CostComponents& student_component(const AutoTuningTrainingData* msg);
  static void set_has_student_component(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning_internal::CostComponents&
AutoTuningTrainingData::_Internal::teacher_component(const AutoTuningTrainingData* msg) {
  return *msg->teacher_component_;
}
const ::apollo::planning_internal::CostComponents&
AutoTuningTrainingData::_Internal::student_component(const AutoTuningTrainingData* msg) {
  return *msg->student_component_;
}
AutoTuningTrainingData::AutoTuningTrainingData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.AutoTuningTrainingData)
}
AutoTuningTrainingData::AutoTuningTrainingData(const AutoTuningTrainingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_teacher_component()) {
    teacher_component_ = new ::apollo::planning_internal::CostComponents(*from.teacher_component_);
  } else {
    teacher_component_ = nullptr;
  }
  if (from._internal_has_student_component()) {
    student_component_ = new ::apollo::planning_internal::CostComponents(*from.student_component_);
  } else {
    student_component_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.AutoTuningTrainingData)
}

void AutoTuningTrainingData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  ::memset(&teacher_component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&student_component_) -
      reinterpret_cast<char*>(&teacher_component_)) + sizeof(student_component_));
}

AutoTuningTrainingData::~AutoTuningTrainingData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.AutoTuningTrainingData)
  SharedDtor();
}

void AutoTuningTrainingData::SharedDtor() {
  if (this != internal_default_instance()) delete teacher_component_;
  if (this != internal_default_instance()) delete student_component_;
}

void AutoTuningTrainingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoTuningTrainingData& AutoTuningTrainingData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoTuningTrainingData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void AutoTuningTrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.AutoTuningTrainingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(teacher_component_ != nullptr);
      teacher_component_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(student_component_ != nullptr);
      student_component_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AutoTuningTrainingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning_internal.CostComponents teacher_component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teacher_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.CostComponents student_component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_student_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoTuningTrainingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.AutoTuningTrainingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning_internal.CostComponents teacher_component = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::teacher_component(this), target, stream);
  }

  // optional .apollo.planning_internal.CostComponents student_component = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::student_component(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.AutoTuningTrainingData)
  return target;
}

size_t AutoTuningTrainingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.AutoTuningTrainingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning_internal.CostComponents teacher_component = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teacher_component_);
    }

    // optional .apollo.planning_internal.CostComponents student_component = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *student_component_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoTuningTrainingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.AutoTuningTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoTuningTrainingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoTuningTrainingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.AutoTuningTrainingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.AutoTuningTrainingData)
    MergeFrom(*source);
  }
}

void AutoTuningTrainingData::MergeFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.AutoTuningTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teacher_component()->::apollo::planning_internal::CostComponents::MergeFrom(from._internal_teacher_component());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_student_component()->::apollo::planning_internal::CostComponents::MergeFrom(from._internal_student_component());
    }
  }
}

void AutoTuningTrainingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoTuningTrainingData::CopyFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoTuningTrainingData::IsInitialized() const {
  return true;
}

void AutoTuningTrainingData::InternalSwap(AutoTuningTrainingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teacher_component_, other->teacher_component_);
  swap(student_component_, other->student_component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoTuningTrainingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloudReferenceLineRequest::InitAsDefaultInstance() {
}
class CloudReferenceLineRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudReferenceLineRequest>()._has_bits_);
};

void CloudReferenceLineRequest::clear_lane_segment() {
  lane_segment_.Clear();
}
CloudReferenceLineRequest::CloudReferenceLineRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CloudReferenceLineRequest)
}
CloudReferenceLineRequest::CloudReferenceLineRequest(const CloudReferenceLineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lane_segment_(from.lane_segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineRequest)
}

void CloudReferenceLineRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudReferenceLineRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
}

CloudReferenceLineRequest::~CloudReferenceLineRequest() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineRequest)
  SharedDtor();
}

void CloudReferenceLineRequest::SharedDtor() {
}

void CloudReferenceLineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudReferenceLineRequest& CloudReferenceLineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudReferenceLineRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void CloudReferenceLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_segment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CloudReferenceLineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.routing.LaneSegment lane_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudReferenceLineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lane_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lane_segment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineRequest)
  return target;
}

size_t CloudReferenceLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  total_size += 1UL * this->_internal_lane_segment_size();
  for (const auto& msg : this->lane_segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudReferenceLineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudReferenceLineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudReferenceLineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CloudReferenceLineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CloudReferenceLineRequest)
    MergeFrom(*source);
  }
}

void CloudReferenceLineRequest::MergeFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_segment_.MergeFrom(from.lane_segment_);
}

void CloudReferenceLineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineRequest::CopyFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRequest::IsInitialized() const {
  return true;
}

void CloudReferenceLineRequest::InternalSwap(CloudReferenceLineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_segment_.InternalSwap(&other->lane_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudReferenceLineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloudReferenceLineRoutingRequest::InitAsDefaultInstance() {
  ::apollo::planning_internal::_CloudReferenceLineRoutingRequest_default_instance_._instance.get_mutable()->routing_ = const_cast< ::apollo::routing::RoutingResponse*>(
      ::apollo::routing::RoutingResponse::internal_default_instance());
}
class CloudReferenceLineRoutingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudReferenceLineRoutingRequest>()._has_bits_);
  static const ::apollo::routing::RoutingResponse& routing(const CloudReferenceLineRoutingRequest* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::RoutingResponse&
CloudReferenceLineRoutingRequest::_Internal::routing(const CloudReferenceLineRoutingRequest* msg) {
  return *msg->routing_;
}
void CloudReferenceLineRoutingRequest::clear_routing() {
  if (routing_ != nullptr) routing_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}
CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest(const CloudReferenceLineRoutingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_routing()) {
    routing_ = new ::apollo::routing::RoutingResponse(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}

void CloudReferenceLineRoutingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudReferenceLineRoutingRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  routing_ = nullptr;
}

CloudReferenceLineRoutingRequest::~CloudReferenceLineRoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  SharedDtor();
}

void CloudReferenceLineRoutingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete routing_;
}

void CloudReferenceLineRoutingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudReferenceLineRoutingRequest& CloudReferenceLineRoutingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudReferenceLineRoutingRequest_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void CloudReferenceLineRoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(routing_ != nullptr);
    routing_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CloudReferenceLineRoutingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.routing.RoutingResponse routing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudReferenceLineRoutingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.RoutingResponse routing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  return target;
}

size_t CloudReferenceLineRoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.routing.RoutingResponse routing = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudReferenceLineRoutingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudReferenceLineRoutingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudReferenceLineRoutingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CloudReferenceLineRoutingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CloudReferenceLineRoutingRequest)
    MergeFrom(*source);
  }
}

void CloudReferenceLineRoutingRequest::MergeFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_routing()) {
    _internal_mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from._internal_routing());
  }
}

void CloudReferenceLineRoutingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineRoutingRequest::CopyFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRoutingRequest::IsInitialized() const {
  return true;
}

void CloudReferenceLineRoutingRequest::InternalSwap(CloudReferenceLineRoutingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(routing_, other->routing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudReferenceLineRoutingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloudReferenceLineResponse::InitAsDefaultInstance() {
}
class CloudReferenceLineResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudReferenceLineResponse>()._has_bits_);
};

void CloudReferenceLineResponse::clear_segment() {
  segment_.Clear();
}
CloudReferenceLineResponse::CloudReferenceLineResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning_internal.CloudReferenceLineResponse)
}
CloudReferenceLineResponse::CloudReferenceLineResponse(const CloudReferenceLineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineResponse)
}

void CloudReferenceLineResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudReferenceLineResponse_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
}

CloudReferenceLineResponse::~CloudReferenceLineResponse() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineResponse)
  SharedDtor();
}

void CloudReferenceLineResponse::SharedDtor() {
}

void CloudReferenceLineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudReferenceLineResponse& CloudReferenceLineResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudReferenceLineResponse_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base);
  return *internal_default_instance();
}


void CloudReferenceLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CloudReferenceLineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.common.Path segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudReferenceLineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Path segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineResponse)
  return target;
}

size_t CloudReferenceLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Path segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudReferenceLineResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudReferenceLineResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudReferenceLineResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning_internal.CloudReferenceLineResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning_internal.CloudReferenceLineResponse)
    MergeFrom(*source);
  }
}

void CloudReferenceLineResponse::MergeFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
}

void CloudReferenceLineResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudReferenceLineResponse::CopyFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineResponse::IsInitialized() const {
  return true;
}

void CloudReferenceLineResponse::InternalSwap(CloudReferenceLineResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_.InternalSwap(&other->segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudReferenceLineResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning_internal
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::Debug* Arena::CreateMaybeMessage< ::apollo::planning_internal::Debug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SpeedPlan* Arena::CreateMaybeMessage< ::apollo::planning_internal::SpeedPlan >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::SpeedPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::StGraphBoundaryDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::StGraphBoundaryDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::StGraphBoundaryDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SLFrameDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::SLFrameDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::SLFrameDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::STGraphDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SignalLightDebug_SignalDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::SignalLightDebug_SignalDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::SignalLightDebug_SignalDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SignalLightDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::SignalLightDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::SignalLightDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::DecisionTag* Arena::CreateMaybeMessage< ::apollo::planning_internal::DecisionTag >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::DecisionTag >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::ObstacleDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::ObstacleDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::ObstacleDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::ReferenceLineDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::ReferenceLineDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::ReferenceLineDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SampleLayerDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::SampleLayerDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::SampleLayerDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::DpPolyGraphDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::DpPolyGraphDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::DpPolyGraphDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::ScenarioDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::ScenarioDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::ScenarioDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::Trajectories* Arena::CreateMaybeMessage< ::apollo::planning_internal::Trajectories >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::Trajectories >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::OpenSpaceDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::OpenSpaceDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::OpenSpaceDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SmootherDebug* Arena::CreateMaybeMessage< ::apollo::planning_internal::SmootherDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::SmootherDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::PlanningData* Arena::CreateMaybeMessage< ::apollo::planning_internal::PlanningData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::PlanningData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::LatticeStPixel* Arena::CreateMaybeMessage< ::apollo::planning_internal::LatticeStPixel >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::LatticeStPixel >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::LatticeStTraining* Arena::CreateMaybeMessage< ::apollo::planning_internal::LatticeStTraining >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::LatticeStTraining >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CostComponents* Arena::CreateMaybeMessage< ::apollo::planning_internal::CostComponents >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::CostComponents >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::AutoTuningTrainingData* Arena::CreateMaybeMessage< ::apollo::planning_internal::AutoTuningTrainingData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::AutoTuningTrainingData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CloudReferenceLineRequest* Arena::CreateMaybeMessage< ::apollo::planning_internal::CloudReferenceLineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::CloudReferenceLineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CloudReferenceLineRoutingRequest* Arena::CreateMaybeMessage< ::apollo::planning_internal::CloudReferenceLineRoutingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::CloudReferenceLineRoutingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CloudReferenceLineResponse* Arena::CreateMaybeMessage< ::apollo::planning_internal::CloudReferenceLineResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning_internal::CloudReferenceLineResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
