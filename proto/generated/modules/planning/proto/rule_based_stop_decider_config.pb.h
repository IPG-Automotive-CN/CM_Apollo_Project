// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/rule_based_stop_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class RuleBasedStopDeciderConfig;
class RuleBasedStopDeciderConfigDefaultTypeInternal;
extern RuleBasedStopDeciderConfigDefaultTypeInternal _RuleBasedStopDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::RuleBasedStopDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::RuleBasedStopDeciderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class RuleBasedStopDeciderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RuleBasedStopDeciderConfig) */ {
 public:
  RuleBasedStopDeciderConfig();
  virtual ~RuleBasedStopDeciderConfig();

  RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from);
  RuleBasedStopDeciderConfig(RuleBasedStopDeciderConfig&& from) noexcept
    : RuleBasedStopDeciderConfig() {
    *this = ::std::move(from);
  }

  inline RuleBasedStopDeciderConfig& operator=(const RuleBasedStopDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleBasedStopDeciderConfig& operator=(RuleBasedStopDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RuleBasedStopDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleBasedStopDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const RuleBasedStopDeciderConfig*>(
               &_RuleBasedStopDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RuleBasedStopDeciderConfig& a, RuleBasedStopDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleBasedStopDeciderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuleBasedStopDeciderConfig* New() const final {
    return CreateMaybeMessage<RuleBasedStopDeciderConfig>(nullptr);
  }

  RuleBasedStopDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuleBasedStopDeciderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RuleBasedStopDeciderConfig& from);
  void MergeFrom(const RuleBasedStopDeciderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleBasedStopDeciderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.RuleBasedStopDeciderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAdcStopSpeedFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 2,
    kSearchBeamLengthFieldNumber = 3,
    kSearchBeamRadiusIntensityFieldNumber = 4,
    kSearchRangeFieldNumber = 5,
    kIsBlockAngleThresholdFieldNumber = 6,
    kApproachDistanceForLaneChangeFieldNumber = 10,
    kUrgentDistanceForLaneChangeFieldNumber = 11,
  };
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  bool has_max_adc_stop_speed() const;
  private:
  bool _internal_has_max_adc_stop_speed() const;
  public:
  void clear_max_adc_stop_speed();
  double max_adc_stop_speed() const;
  void set_max_adc_stop_speed(double value);
  private:
  double _internal_max_adc_stop_speed() const;
  void _internal_set_max_adc_stop_speed(double value);
  public:

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double search_beam_length = 3 [default = 5];
  bool has_search_beam_length() const;
  private:
  bool _internal_has_search_beam_length() const;
  public:
  void clear_search_beam_length();
  double search_beam_length() const;
  void set_search_beam_length(double value);
  private:
  double _internal_search_beam_length() const;
  void _internal_set_search_beam_length(double value);
  public:

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  bool has_search_beam_radius_intensity() const;
  private:
  bool _internal_has_search_beam_radius_intensity() const;
  public:
  void clear_search_beam_radius_intensity();
  double search_beam_radius_intensity() const;
  void set_search_beam_radius_intensity(double value);
  private:
  double _internal_search_beam_radius_intensity() const;
  void _internal_set_search_beam_radius_intensity(double value);
  public:

  // optional double search_range = 5 [default = 3.14];
  bool has_search_range() const;
  private:
  bool _internal_has_search_range() const;
  public:
  void clear_search_range();
  double search_range() const;
  void set_search_range(double value);
  private:
  double _internal_search_range() const;
  void _internal_set_search_range(double value);
  public:

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  bool has_is_block_angle_threshold() const;
  private:
  bool _internal_has_is_block_angle_threshold() const;
  public:
  void clear_is_block_angle_threshold();
  double is_block_angle_threshold() const;
  void set_is_block_angle_threshold(double value);
  private:
  double _internal_is_block_angle_threshold() const;
  void _internal_set_is_block_angle_threshold(double value);
  public:

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  bool has_approach_distance_for_lane_change() const;
  private:
  bool _internal_has_approach_distance_for_lane_change() const;
  public:
  void clear_approach_distance_for_lane_change();
  double approach_distance_for_lane_change() const;
  void set_approach_distance_for_lane_change(double value);
  private:
  double _internal_approach_distance_for_lane_change() const;
  void _internal_set_approach_distance_for_lane_change(double value);
  public:

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  bool has_urgent_distance_for_lane_change() const;
  private:
  bool _internal_has_urgent_distance_for_lane_change() const;
  public:
  void clear_urgent_distance_for_lane_change();
  double urgent_distance_for_lane_change() const;
  void set_urgent_distance_for_lane_change(double value);
  private:
  double _internal_urgent_distance_for_lane_change() const;
  void _internal_set_urgent_distance_for_lane_change(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.RuleBasedStopDeciderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double max_adc_stop_speed_;
  double max_valid_stop_distance_;
  double search_beam_length_;
  double search_beam_radius_intensity_;
  double search_range_;
  double is_block_angle_threshold_;
  double approach_distance_for_lane_change_;
  double urgent_distance_for_lane_change_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuleBasedStopDeciderConfig

// optional double max_adc_stop_speed = 1 [default = 0.3];
inline bool RuleBasedStopDeciderConfig::_internal_has_max_adc_stop_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_max_adc_stop_speed() const {
  return _internal_has_max_adc_stop_speed();
}
inline void RuleBasedStopDeciderConfig::clear_max_adc_stop_speed() {
  max_adc_stop_speed_ = 0.3;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RuleBasedStopDeciderConfig::_internal_max_adc_stop_speed() const {
  return max_adc_stop_speed_;
}
inline double RuleBasedStopDeciderConfig::max_adc_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
  return _internal_max_adc_stop_speed();
}
inline void RuleBasedStopDeciderConfig::_internal_set_max_adc_stop_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  max_adc_stop_speed_ = value;
}
inline void RuleBasedStopDeciderConfig::set_max_adc_stop_speed(double value) {
  _internal_set_max_adc_stop_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
}

// optional double max_valid_stop_distance = 2 [default = 0.5];
inline bool RuleBasedStopDeciderConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void RuleBasedStopDeciderConfig::clear_max_valid_stop_distance() {
  max_valid_stop_distance_ = 0.5;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RuleBasedStopDeciderConfig::_internal_max_valid_stop_distance() const {
  return max_valid_stop_distance_;
}
inline double RuleBasedStopDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void RuleBasedStopDeciderConfig::_internal_set_max_valid_stop_distance(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_valid_stop_distance_ = value;
}
inline void RuleBasedStopDeciderConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
}

// optional double search_beam_length = 3 [default = 5];
inline bool RuleBasedStopDeciderConfig::_internal_has_search_beam_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_search_beam_length() const {
  return _internal_has_search_beam_length();
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_length() {
  search_beam_length_ = 5;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RuleBasedStopDeciderConfig::_internal_search_beam_length() const {
  return search_beam_length_;
}
inline double RuleBasedStopDeciderConfig::search_beam_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_beam_length)
  return _internal_search_beam_length();
}
inline void RuleBasedStopDeciderConfig::_internal_set_search_beam_length(double value) {
  _has_bits_[0] |= 0x00000004u;
  search_beam_length_ = value;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_length(double value) {
  _internal_set_search_beam_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_beam_length)
}

// optional double search_beam_radius_intensity = 4 [default = 0.08];
inline bool RuleBasedStopDeciderConfig::_internal_has_search_beam_radius_intensity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_search_beam_radius_intensity() const {
  return _internal_has_search_beam_radius_intensity();
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_radius_intensity() {
  search_beam_radius_intensity_ = 0.08;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RuleBasedStopDeciderConfig::_internal_search_beam_radius_intensity() const {
  return search_beam_radius_intensity_;
}
inline double RuleBasedStopDeciderConfig::search_beam_radius_intensity() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
  return _internal_search_beam_radius_intensity();
}
inline void RuleBasedStopDeciderConfig::_internal_set_search_beam_radius_intensity(double value) {
  _has_bits_[0] |= 0x00000008u;
  search_beam_radius_intensity_ = value;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_radius_intensity(double value) {
  _internal_set_search_beam_radius_intensity(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
}

// optional double search_range = 5 [default = 3.14];
inline bool RuleBasedStopDeciderConfig::_internal_has_search_range() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_search_range() const {
  return _internal_has_search_range();
}
inline void RuleBasedStopDeciderConfig::clear_search_range() {
  search_range_ = 3.14;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RuleBasedStopDeciderConfig::_internal_search_range() const {
  return search_range_;
}
inline double RuleBasedStopDeciderConfig::search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_range)
  return _internal_search_range();
}
inline void RuleBasedStopDeciderConfig::_internal_set_search_range(double value) {
  _has_bits_[0] |= 0x00000010u;
  search_range_ = value;
}
inline void RuleBasedStopDeciderConfig::set_search_range(double value) {
  _internal_set_search_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_range)
}

// optional double is_block_angle_threshold = 6 [default = 1.57];
inline bool RuleBasedStopDeciderConfig::_internal_has_is_block_angle_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_is_block_angle_threshold() const {
  return _internal_has_is_block_angle_threshold();
}
inline void RuleBasedStopDeciderConfig::clear_is_block_angle_threshold() {
  is_block_angle_threshold_ = 1.57;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RuleBasedStopDeciderConfig::_internal_is_block_angle_threshold() const {
  return is_block_angle_threshold_;
}
inline double RuleBasedStopDeciderConfig::is_block_angle_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
  return _internal_is_block_angle_threshold();
}
inline void RuleBasedStopDeciderConfig::_internal_set_is_block_angle_threshold(double value) {
  _has_bits_[0] |= 0x00000020u;
  is_block_angle_threshold_ = value;
}
inline void RuleBasedStopDeciderConfig::set_is_block_angle_threshold(double value) {
  _internal_set_is_block_angle_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
}

// optional double approach_distance_for_lane_change = 10 [default = 80];
inline bool RuleBasedStopDeciderConfig::_internal_has_approach_distance_for_lane_change() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_approach_distance_for_lane_change() const {
  return _internal_has_approach_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::clear_approach_distance_for_lane_change() {
  approach_distance_for_lane_change_ = 80;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RuleBasedStopDeciderConfig::_internal_approach_distance_for_lane_change() const {
  return approach_distance_for_lane_change_;
}
inline double RuleBasedStopDeciderConfig::approach_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
  return _internal_approach_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::_internal_set_approach_distance_for_lane_change(double value) {
  _has_bits_[0] |= 0x00000040u;
  approach_distance_for_lane_change_ = value;
}
inline void RuleBasedStopDeciderConfig::set_approach_distance_for_lane_change(double value) {
  _internal_set_approach_distance_for_lane_change(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
}

// optional double urgent_distance_for_lane_change = 11 [default = 50];
inline bool RuleBasedStopDeciderConfig::_internal_has_urgent_distance_for_lane_change() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_urgent_distance_for_lane_change() const {
  return _internal_has_urgent_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::clear_urgent_distance_for_lane_change() {
  urgent_distance_for_lane_change_ = 50;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RuleBasedStopDeciderConfig::_internal_urgent_distance_for_lane_change() const {
  return urgent_distance_for_lane_change_;
}
inline double RuleBasedStopDeciderConfig::urgent_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
  return _internal_urgent_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::_internal_set_urgent_distance_for_lane_change(double value) {
  _has_bits_[0] |= 0x00000080u;
  urgent_distance_for_lane_change_ = value;
}
inline void RuleBasedStopDeciderConfig::set_urgent_distance_for_lane_change(double value) {
  _internal_set_urgent_distance_for_lane_change(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2frule_5fbased_5fstop_5fdecider_5fconfig_2eproto
