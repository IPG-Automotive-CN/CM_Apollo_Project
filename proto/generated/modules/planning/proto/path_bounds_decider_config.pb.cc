// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/path_bounds_decider_config.proto

#include "modules/planning/proto/path_bounds_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class PathBoundsDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathBoundsDeciderConfig> _instance;
} _PathBoundsDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PathBoundsDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::PathBoundsDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PathBoundsDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_lane_borrowing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, is_pull_over_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_destination_to_adc_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_destination_to_pathend_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathBoundsDeciderConfig, pull_over_road_edge_buffer_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::planning::PathBoundsDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PathBoundsDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7modules/planning/proto/path_bounds_dec"
  "ider_config.proto\022\017apollo.planning\"\332\001\n\027P"
  "athBoundsDeciderConfig\022\031\n\021is_lane_borrow"
  "ing\030\001 \001(\010\022\024\n\014is_pull_over\030\002 \001(\010\022/\n#pull_"
  "over_destination_to_adc_buffer\030\003 \001(\001:\00225"
  "\0223\n\'pull_over_destination_to_pathend_buf"
  "fer\030\004 \001(\001:\00210\022(\n\032pull_over_road_edge_buf"
  "fer\030\005 \001(\001:\0040.15"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_sccs[1] = {
  &scc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto, "modules/planning/proto/path_bounds_decider_config.proto", 295,
  &descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void PathBoundsDeciderConfig::InitAsDefaultInstance() {
}
class PathBoundsDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PathBoundsDeciderConfig>()._has_bits_);
  static void set_has_is_lane_borrowing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_pull_over(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pull_over_destination_to_adc_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pull_over_destination_to_pathend_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pull_over_road_edge_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PathBoundsDeciderConfig::PathBoundsDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PathBoundsDeciderConfig)
}
PathBoundsDeciderConfig::PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_lane_borrowing_, &from.is_lane_borrowing_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_over_road_edge_buffer_) -
    reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(pull_over_road_edge_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathBoundsDeciderConfig)
}

void PathBoundsDeciderConfig::SharedCtor() {
  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  pull_over_destination_to_adc_buffer_ = 25;
  pull_over_destination_to_pathend_buffer_ = 10;
  pull_over_road_edge_buffer_ = 0.15;
}

PathBoundsDeciderConfig::~PathBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathBoundsDeciderConfig)
  SharedDtor();
}

void PathBoundsDeciderConfig::SharedDtor() {
}

void PathBoundsDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathBoundsDeciderConfig& PathBoundsDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathBoundsDeciderConfig_modules_2fplanning_2fproto_2fpath_5fbounds_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PathBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    pull_over_destination_to_adc_buffer_ = 25;
    pull_over_destination_to_pathend_buffer_ = 10;
    pull_over_road_edge_buffer_ = 0.15;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PathBoundsDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_lane_borrowing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_lane_borrowing(&has_bits);
          is_lane_borrowing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pull_over = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_pull_over(&has_bits);
          is_pull_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_pull_over_destination_to_adc_buffer(&has_bits);
          pull_over_destination_to_adc_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_pull_over_destination_to_pathend_buffer(&has_bits);
          pull_over_destination_to_pathend_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_pull_over_road_edge_buffer(&has_bits);
          pull_over_road_edge_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathBoundsDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathBoundsDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_lane_borrowing(), target);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_pull_over(), target);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pull_over_destination_to_adc_buffer(), target);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pull_over_destination_to_pathend_buffer(), target);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pull_over_road_edge_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathBoundsDeciderConfig)
  return target;
}

size_t PathBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathBoundsDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool is_lane_borrowing = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_pull_over = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathBoundsDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathBoundsDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathBoundsDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PathBoundsDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PathBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void PathBoundsDeciderConfig::MergeFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      is_lane_borrowing_ = from.is_lane_borrowing_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pull_over_ = from.is_pull_over_;
    }
    if (cached_has_bits & 0x00000004u) {
      pull_over_destination_to_adc_buffer_ = from.pull_over_destination_to_adc_buffer_;
    }
    if (cached_has_bits & 0x00000008u) {
      pull_over_destination_to_pathend_buffer_ = from.pull_over_destination_to_pathend_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      pull_over_road_edge_buffer_ = from.pull_over_road_edge_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathBoundsDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathBoundsDeciderConfig::CopyFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void PathBoundsDeciderConfig::InternalSwap(PathBoundsDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_lane_borrowing_, other->is_lane_borrowing_);
  swap(is_pull_over_, other->is_pull_over_);
  swap(pull_over_destination_to_adc_buffer_, other->pull_over_destination_to_adc_buffer_);
  swap(pull_over_destination_to_pathend_buffer_, other->pull_over_destination_to_pathend_buffer_);
  swap(pull_over_road_edge_buffer_, other->pull_over_road_edge_buffer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathBoundsDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PathBoundsDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::PathBoundsDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PathBoundsDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
