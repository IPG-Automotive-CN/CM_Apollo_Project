// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/speed_bounds_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class SpeedBoundsDeciderConfig;
class SpeedBoundsDeciderConfigDefaultTypeInternal;
extern SpeedBoundsDeciderConfigDefaultTypeInternal _SpeedBoundsDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::SpeedBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::SpeedBoundsDeciderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class SpeedBoundsDeciderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpeedBoundsDeciderConfig) */ {
 public:
  SpeedBoundsDeciderConfig();
  virtual ~SpeedBoundsDeciderConfig();

  SpeedBoundsDeciderConfig(const SpeedBoundsDeciderConfig& from);
  SpeedBoundsDeciderConfig(SpeedBoundsDeciderConfig&& from) noexcept
    : SpeedBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline SpeedBoundsDeciderConfig& operator=(const SpeedBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedBoundsDeciderConfig& operator=(SpeedBoundsDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedBoundsDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedBoundsDeciderConfig*>(
               &_SpeedBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeedBoundsDeciderConfig& a, SpeedBoundsDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedBoundsDeciderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedBoundsDeciderConfig* New() const final {
    return CreateMaybeMessage<SpeedBoundsDeciderConfig>(nullptr);
  }

  SpeedBoundsDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedBoundsDeciderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedBoundsDeciderConfig& from);
  void MergeFrom(const SpeedBoundsDeciderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedBoundsDeciderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SpeedBoundsDeciderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticObsNudgeSpeedRatioFieldNumber = 12,
    kDynamicObsNudgeSpeedRatioFieldNumber = 13,
    kCentriJerkSpeedCoeffFieldNumber = 14,
    kNumPointsToAvgKappaFieldNumber = 10,
    kTotalTimeFieldNumber = 1,
    kBoundaryBufferFieldNumber = 2,
    kHighSpeedCentricAccelerationLimitFieldNumber = 3,
    kLowSpeedCentricAccelerationLimitFieldNumber = 4,
    kHighSpeedThresholdFieldNumber = 5,
    kLowSpeedThresholdFieldNumber = 6,
    kMinimalKappaFieldNumber = 7,
    kPointExtensionFieldNumber = 8,
    kLowestSpeedFieldNumber = 9,
    kCollisionSafetyRangeFieldNumber = 11,
  };
  // optional double static_obs_nudge_speed_ratio = 12;
  bool has_static_obs_nudge_speed_ratio() const;
  private:
  bool _internal_has_static_obs_nudge_speed_ratio() const;
  public:
  void clear_static_obs_nudge_speed_ratio();
  double static_obs_nudge_speed_ratio() const;
  void set_static_obs_nudge_speed_ratio(double value);
  private:
  double _internal_static_obs_nudge_speed_ratio() const;
  void _internal_set_static_obs_nudge_speed_ratio(double value);
  public:

  // optional double dynamic_obs_nudge_speed_ratio = 13;
  bool has_dynamic_obs_nudge_speed_ratio() const;
  private:
  bool _internal_has_dynamic_obs_nudge_speed_ratio() const;
  public:
  void clear_dynamic_obs_nudge_speed_ratio();
  double dynamic_obs_nudge_speed_ratio() const;
  void set_dynamic_obs_nudge_speed_ratio(double value);
  private:
  double _internal_dynamic_obs_nudge_speed_ratio() const;
  void _internal_set_dynamic_obs_nudge_speed_ratio(double value);
  public:

  // optional double centri_jerk_speed_coeff = 14;
  bool has_centri_jerk_speed_coeff() const;
  private:
  bool _internal_has_centri_jerk_speed_coeff() const;
  public:
  void clear_centri_jerk_speed_coeff();
  double centri_jerk_speed_coeff() const;
  void set_centri_jerk_speed_coeff(double value);
  private:
  double _internal_centri_jerk_speed_coeff() const;
  void _internal_set_centri_jerk_speed_coeff(double value);
  public:

  // optional uint32 num_points_to_avg_kappa = 10 [default = 4];
  bool has_num_points_to_avg_kappa() const;
  private:
  bool _internal_has_num_points_to_avg_kappa() const;
  public:
  void clear_num_points_to_avg_kappa();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_points_to_avg_kappa() const;
  void set_num_points_to_avg_kappa(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_points_to_avg_kappa() const;
  void _internal_set_num_points_to_avg_kappa(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double total_time = 1 [default = 7];
  bool has_total_time() const;
  private:
  bool _internal_has_total_time() const;
  public:
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // optional double boundary_buffer = 2 [default = 0.1];
  bool has_boundary_buffer() const;
  private:
  bool _internal_has_boundary_buffer() const;
  public:
  void clear_boundary_buffer();
  double boundary_buffer() const;
  void set_boundary_buffer(double value);
  private:
  double _internal_boundary_buffer() const;
  void _internal_set_boundary_buffer(double value);
  public:

  // optional double high_speed_centric_acceleration_limit = 3 [default = 1.2];
  bool has_high_speed_centric_acceleration_limit() const;
  private:
  bool _internal_has_high_speed_centric_acceleration_limit() const;
  public:
  void clear_high_speed_centric_acceleration_limit();
  double high_speed_centric_acceleration_limit() const;
  void set_high_speed_centric_acceleration_limit(double value);
  private:
  double _internal_high_speed_centric_acceleration_limit() const;
  void _internal_set_high_speed_centric_acceleration_limit(double value);
  public:

  // optional double low_speed_centric_acceleration_limit = 4 [default = 1.4];
  bool has_low_speed_centric_acceleration_limit() const;
  private:
  bool _internal_has_low_speed_centric_acceleration_limit() const;
  public:
  void clear_low_speed_centric_acceleration_limit();
  double low_speed_centric_acceleration_limit() const;
  void set_low_speed_centric_acceleration_limit(double value);
  private:
  double _internal_low_speed_centric_acceleration_limit() const;
  void _internal_set_low_speed_centric_acceleration_limit(double value);
  public:

  // optional double high_speed_threshold = 5 [default = 20];
  bool has_high_speed_threshold() const;
  private:
  bool _internal_has_high_speed_threshold() const;
  public:
  void clear_high_speed_threshold();
  double high_speed_threshold() const;
  void set_high_speed_threshold(double value);
  private:
  double _internal_high_speed_threshold() const;
  void _internal_set_high_speed_threshold(double value);
  public:

  // optional double low_speed_threshold = 6 [default = 7];
  bool has_low_speed_threshold() const;
  private:
  bool _internal_has_low_speed_threshold() const;
  public:
  void clear_low_speed_threshold();
  double low_speed_threshold() const;
  void set_low_speed_threshold(double value);
  private:
  double _internal_low_speed_threshold() const;
  void _internal_set_low_speed_threshold(double value);
  public:

  // optional double minimal_kappa = 7 [default = 1e-05];
  bool has_minimal_kappa() const;
  private:
  bool _internal_has_minimal_kappa() const;
  public:
  void clear_minimal_kappa();
  double minimal_kappa() const;
  void set_minimal_kappa(double value);
  private:
  double _internal_minimal_kappa() const;
  void _internal_set_minimal_kappa(double value);
  public:

  // optional double point_extension = 8 [default = 1];
  bool has_point_extension() const;
  private:
  bool _internal_has_point_extension() const;
  public:
  void clear_point_extension();
  double point_extension() const;
  void set_point_extension(double value);
  private:
  double _internal_point_extension() const;
  void _internal_set_point_extension(double value);
  public:

  // optional double lowest_speed = 9 [default = 2.5];
  bool has_lowest_speed() const;
  private:
  bool _internal_has_lowest_speed() const;
  public:
  void clear_lowest_speed();
  double lowest_speed() const;
  void set_lowest_speed(double value);
  private:
  double _internal_lowest_speed() const;
  void _internal_set_lowest_speed(double value);
  public:

  // optional double collision_safety_range = 11 [default = 1];
  bool has_collision_safety_range() const;
  private:
  bool _internal_has_collision_safety_range() const;
  public:
  void clear_collision_safety_range();
  double collision_safety_range() const;
  void set_collision_safety_range(double value);
  private:
  double _internal_collision_safety_range() const;
  void _internal_set_collision_safety_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.SpeedBoundsDeciderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double static_obs_nudge_speed_ratio_;
  double dynamic_obs_nudge_speed_ratio_;
  double centri_jerk_speed_coeff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_points_to_avg_kappa_;
  double total_time_;
  double boundary_buffer_;
  double high_speed_centric_acceleration_limit_;
  double low_speed_centric_acceleration_limit_;
  double high_speed_threshold_;
  double low_speed_threshold_;
  double minimal_kappa_;
  double point_extension_;
  double lowest_speed_;
  double collision_safety_range_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedBoundsDeciderConfig

// optional double total_time = 1 [default = 7];
inline bool SpeedBoundsDeciderConfig::_internal_has_total_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_total_time() const {
  return _internal_has_total_time();
}
inline void SpeedBoundsDeciderConfig::clear_total_time() {
  total_time_ = 7;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SpeedBoundsDeciderConfig::_internal_total_time() const {
  return total_time_;
}
inline double SpeedBoundsDeciderConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.total_time)
  return _internal_total_time();
}
inline void SpeedBoundsDeciderConfig::_internal_set_total_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  total_time_ = value;
}
inline void SpeedBoundsDeciderConfig::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.total_time)
}

// optional double boundary_buffer = 2 [default = 0.1];
inline bool SpeedBoundsDeciderConfig::_internal_has_boundary_buffer() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_boundary_buffer() const {
  return _internal_has_boundary_buffer();
}
inline void SpeedBoundsDeciderConfig::clear_boundary_buffer() {
  boundary_buffer_ = 0.1;
  _has_bits_[0] &= ~0x00000020u;
}
inline double SpeedBoundsDeciderConfig::_internal_boundary_buffer() const {
  return boundary_buffer_;
}
inline double SpeedBoundsDeciderConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.boundary_buffer)
  return _internal_boundary_buffer();
}
inline void SpeedBoundsDeciderConfig::_internal_set_boundary_buffer(double value) {
  _has_bits_[0] |= 0x00000020u;
  boundary_buffer_ = value;
}
inline void SpeedBoundsDeciderConfig::set_boundary_buffer(double value) {
  _internal_set_boundary_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.boundary_buffer)
}

// optional double high_speed_centric_acceleration_limit = 3 [default = 1.2];
inline bool SpeedBoundsDeciderConfig::_internal_has_high_speed_centric_acceleration_limit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_high_speed_centric_acceleration_limit() const {
  return _internal_has_high_speed_centric_acceleration_limit();
}
inline void SpeedBoundsDeciderConfig::clear_high_speed_centric_acceleration_limit() {
  high_speed_centric_acceleration_limit_ = 1.2;
  _has_bits_[0] &= ~0x00000040u;
}
inline double SpeedBoundsDeciderConfig::_internal_high_speed_centric_acceleration_limit() const {
  return high_speed_centric_acceleration_limit_;
}
inline double SpeedBoundsDeciderConfig::high_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.high_speed_centric_acceleration_limit)
  return _internal_high_speed_centric_acceleration_limit();
}
inline void SpeedBoundsDeciderConfig::_internal_set_high_speed_centric_acceleration_limit(double value) {
  _has_bits_[0] |= 0x00000040u;
  high_speed_centric_acceleration_limit_ = value;
}
inline void SpeedBoundsDeciderConfig::set_high_speed_centric_acceleration_limit(double value) {
  _internal_set_high_speed_centric_acceleration_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.high_speed_centric_acceleration_limit)
}

// optional double low_speed_centric_acceleration_limit = 4 [default = 1.4];
inline bool SpeedBoundsDeciderConfig::_internal_has_low_speed_centric_acceleration_limit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_low_speed_centric_acceleration_limit() const {
  return _internal_has_low_speed_centric_acceleration_limit();
}
inline void SpeedBoundsDeciderConfig::clear_low_speed_centric_acceleration_limit() {
  low_speed_centric_acceleration_limit_ = 1.4;
  _has_bits_[0] &= ~0x00000080u;
}
inline double SpeedBoundsDeciderConfig::_internal_low_speed_centric_acceleration_limit() const {
  return low_speed_centric_acceleration_limit_;
}
inline double SpeedBoundsDeciderConfig::low_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.low_speed_centric_acceleration_limit)
  return _internal_low_speed_centric_acceleration_limit();
}
inline void SpeedBoundsDeciderConfig::_internal_set_low_speed_centric_acceleration_limit(double value) {
  _has_bits_[0] |= 0x00000080u;
  low_speed_centric_acceleration_limit_ = value;
}
inline void SpeedBoundsDeciderConfig::set_low_speed_centric_acceleration_limit(double value) {
  _internal_set_low_speed_centric_acceleration_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.low_speed_centric_acceleration_limit)
}

// optional double high_speed_threshold = 5 [default = 20];
inline bool SpeedBoundsDeciderConfig::_internal_has_high_speed_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_high_speed_threshold() const {
  return _internal_has_high_speed_threshold();
}
inline void SpeedBoundsDeciderConfig::clear_high_speed_threshold() {
  high_speed_threshold_ = 20;
  _has_bits_[0] &= ~0x00000100u;
}
inline double SpeedBoundsDeciderConfig::_internal_high_speed_threshold() const {
  return high_speed_threshold_;
}
inline double SpeedBoundsDeciderConfig::high_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.high_speed_threshold)
  return _internal_high_speed_threshold();
}
inline void SpeedBoundsDeciderConfig::_internal_set_high_speed_threshold(double value) {
  _has_bits_[0] |= 0x00000100u;
  high_speed_threshold_ = value;
}
inline void SpeedBoundsDeciderConfig::set_high_speed_threshold(double value) {
  _internal_set_high_speed_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.high_speed_threshold)
}

// optional double low_speed_threshold = 6 [default = 7];
inline bool SpeedBoundsDeciderConfig::_internal_has_low_speed_threshold() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_low_speed_threshold() const {
  return _internal_has_low_speed_threshold();
}
inline void SpeedBoundsDeciderConfig::clear_low_speed_threshold() {
  low_speed_threshold_ = 7;
  _has_bits_[0] &= ~0x00000200u;
}
inline double SpeedBoundsDeciderConfig::_internal_low_speed_threshold() const {
  return low_speed_threshold_;
}
inline double SpeedBoundsDeciderConfig::low_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.low_speed_threshold)
  return _internal_low_speed_threshold();
}
inline void SpeedBoundsDeciderConfig::_internal_set_low_speed_threshold(double value) {
  _has_bits_[0] |= 0x00000200u;
  low_speed_threshold_ = value;
}
inline void SpeedBoundsDeciderConfig::set_low_speed_threshold(double value) {
  _internal_set_low_speed_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.low_speed_threshold)
}

// optional double minimal_kappa = 7 [default = 1e-05];
inline bool SpeedBoundsDeciderConfig::_internal_has_minimal_kappa() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_minimal_kappa() const {
  return _internal_has_minimal_kappa();
}
inline void SpeedBoundsDeciderConfig::clear_minimal_kappa() {
  minimal_kappa_ = 1e-05;
  _has_bits_[0] &= ~0x00000400u;
}
inline double SpeedBoundsDeciderConfig::_internal_minimal_kappa() const {
  return minimal_kappa_;
}
inline double SpeedBoundsDeciderConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.minimal_kappa)
  return _internal_minimal_kappa();
}
inline void SpeedBoundsDeciderConfig::_internal_set_minimal_kappa(double value) {
  _has_bits_[0] |= 0x00000400u;
  minimal_kappa_ = value;
}
inline void SpeedBoundsDeciderConfig::set_minimal_kappa(double value) {
  _internal_set_minimal_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.minimal_kappa)
}

// optional double point_extension = 8 [default = 1];
inline bool SpeedBoundsDeciderConfig::_internal_has_point_extension() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_point_extension() const {
  return _internal_has_point_extension();
}
inline void SpeedBoundsDeciderConfig::clear_point_extension() {
  point_extension_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline double SpeedBoundsDeciderConfig::_internal_point_extension() const {
  return point_extension_;
}
inline double SpeedBoundsDeciderConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.point_extension)
  return _internal_point_extension();
}
inline void SpeedBoundsDeciderConfig::_internal_set_point_extension(double value) {
  _has_bits_[0] |= 0x00000800u;
  point_extension_ = value;
}
inline void SpeedBoundsDeciderConfig::set_point_extension(double value) {
  _internal_set_point_extension(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.point_extension)
}

// optional double lowest_speed = 9 [default = 2.5];
inline bool SpeedBoundsDeciderConfig::_internal_has_lowest_speed() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_lowest_speed() const {
  return _internal_has_lowest_speed();
}
inline void SpeedBoundsDeciderConfig::clear_lowest_speed() {
  lowest_speed_ = 2.5;
  _has_bits_[0] &= ~0x00001000u;
}
inline double SpeedBoundsDeciderConfig::_internal_lowest_speed() const {
  return lowest_speed_;
}
inline double SpeedBoundsDeciderConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.lowest_speed)
  return _internal_lowest_speed();
}
inline void SpeedBoundsDeciderConfig::_internal_set_lowest_speed(double value) {
  _has_bits_[0] |= 0x00001000u;
  lowest_speed_ = value;
}
inline void SpeedBoundsDeciderConfig::set_lowest_speed(double value) {
  _internal_set_lowest_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.lowest_speed)
}

// optional uint32 num_points_to_avg_kappa = 10 [default = 4];
inline bool SpeedBoundsDeciderConfig::_internal_has_num_points_to_avg_kappa() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_num_points_to_avg_kappa() const {
  return _internal_has_num_points_to_avg_kappa();
}
inline void SpeedBoundsDeciderConfig::clear_num_points_to_avg_kappa() {
  num_points_to_avg_kappa_ = 4u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpeedBoundsDeciderConfig::_internal_num_points_to_avg_kappa() const {
  return num_points_to_avg_kappa_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpeedBoundsDeciderConfig::num_points_to_avg_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.num_points_to_avg_kappa)
  return _internal_num_points_to_avg_kappa();
}
inline void SpeedBoundsDeciderConfig::_internal_set_num_points_to_avg_kappa(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_points_to_avg_kappa_ = value;
}
inline void SpeedBoundsDeciderConfig::set_num_points_to_avg_kappa(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_points_to_avg_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.num_points_to_avg_kappa)
}

// optional double collision_safety_range = 11 [default = 1];
inline bool SpeedBoundsDeciderConfig::_internal_has_collision_safety_range() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_collision_safety_range() const {
  return _internal_has_collision_safety_range();
}
inline void SpeedBoundsDeciderConfig::clear_collision_safety_range() {
  collision_safety_range_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SpeedBoundsDeciderConfig::_internal_collision_safety_range() const {
  return collision_safety_range_;
}
inline double SpeedBoundsDeciderConfig::collision_safety_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.collision_safety_range)
  return _internal_collision_safety_range();
}
inline void SpeedBoundsDeciderConfig::_internal_set_collision_safety_range(double value) {
  _has_bits_[0] |= 0x00002000u;
  collision_safety_range_ = value;
}
inline void SpeedBoundsDeciderConfig::set_collision_safety_range(double value) {
  _internal_set_collision_safety_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.collision_safety_range)
}

// optional double static_obs_nudge_speed_ratio = 12;
inline bool SpeedBoundsDeciderConfig::_internal_has_static_obs_nudge_speed_ratio() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_static_obs_nudge_speed_ratio() const {
  return _internal_has_static_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::clear_static_obs_nudge_speed_ratio() {
  static_obs_nudge_speed_ratio_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SpeedBoundsDeciderConfig::_internal_static_obs_nudge_speed_ratio() const {
  return static_obs_nudge_speed_ratio_;
}
inline double SpeedBoundsDeciderConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.static_obs_nudge_speed_ratio)
  return _internal_static_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::_internal_set_static_obs_nudge_speed_ratio(double value) {
  _has_bits_[0] |= 0x00000001u;
  static_obs_nudge_speed_ratio_ = value;
}
inline void SpeedBoundsDeciderConfig::set_static_obs_nudge_speed_ratio(double value) {
  _internal_set_static_obs_nudge_speed_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 13;
inline bool SpeedBoundsDeciderConfig::_internal_has_dynamic_obs_nudge_speed_ratio() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return _internal_has_dynamic_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::clear_dynamic_obs_nudge_speed_ratio() {
  dynamic_obs_nudge_speed_ratio_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SpeedBoundsDeciderConfig::_internal_dynamic_obs_nudge_speed_ratio() const {
  return dynamic_obs_nudge_speed_ratio_;
}
inline double SpeedBoundsDeciderConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.dynamic_obs_nudge_speed_ratio)
  return _internal_dynamic_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::_internal_set_dynamic_obs_nudge_speed_ratio(double value) {
  _has_bits_[0] |= 0x00000002u;
  dynamic_obs_nudge_speed_ratio_ = value;
}
inline void SpeedBoundsDeciderConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  _internal_set_dynamic_obs_nudge_speed_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.dynamic_obs_nudge_speed_ratio)
}

// optional double centri_jerk_speed_coeff = 14;
inline bool SpeedBoundsDeciderConfig::_internal_has_centri_jerk_speed_coeff() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_centri_jerk_speed_coeff() const {
  return _internal_has_centri_jerk_speed_coeff();
}
inline void SpeedBoundsDeciderConfig::clear_centri_jerk_speed_coeff() {
  centri_jerk_speed_coeff_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SpeedBoundsDeciderConfig::_internal_centri_jerk_speed_coeff() const {
  return centri_jerk_speed_coeff_;
}
inline double SpeedBoundsDeciderConfig::centri_jerk_speed_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.centri_jerk_speed_coeff)
  return _internal_centri_jerk_speed_coeff();
}
inline void SpeedBoundsDeciderConfig::_internal_set_centri_jerk_speed_coeff(double value) {
  _has_bits_[0] |= 0x00000004u;
  centri_jerk_speed_coeff_ = value;
}
inline void SpeedBoundsDeciderConfig::set_centri_jerk_speed_coeff(double value) {
  _internal_set_centri_jerk_speed_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.centri_jerk_speed_coeff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fspeed_5fbounds_5fdecider_5fconfig_2eproto
