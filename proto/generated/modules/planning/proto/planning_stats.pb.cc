// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_stats.proto

#include "modules/planning/proto/planning_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
namespace apollo {
namespace planning {
class StatsGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsGroup> _instance;
} _StatsGroup_default_instance_;
class PlanningStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanningStats> _instance;
} _PlanningStats_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_PlanningStats_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningStats_default_instance_;
    new (ptr) ::apollo::planning::PlanningStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanningStats_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlanningStats_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto}, {
      &scc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StatsGroup_default_instance_;
    new (ptr) ::apollo::planning::StatsGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StatsGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, max_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, min_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, sum_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, avg_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StatsGroup, num_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, total_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, total_path_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStats, dkappa_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::planning::StatsGroup)},
  { 15, 26, sizeof(::apollo::planning::PlanningStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_StatsGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlanningStats_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+modules/planning/proto/planning_stats."
  "proto\022\017apollo.planning\"Z\n\nStatsGroup\022\013\n\003"
  "max\030\001 \001(\001\022\030\n\003min\030\002 \001(\001:\01310000000000\022\013\n\003s"
  "um\030\003 \001(\001\022\013\n\003avg\030\004 \001(\001\022\013\n\003num\030\005 \001(\005\"\246\002\n\rP"
  "lanningStats\0226\n\021total_path_length\030\001 \001(\0132"
  "\033.apollo.planning.StatsGroup\0224\n\017total_pa"
  "th_time\030\002 \001(\0132\033.apollo.planning.StatsGro"
  "up\022&\n\001v\030\003 \001(\0132\033.apollo.planning.StatsGro"
  "up\022&\n\001a\030\004 \001(\0132\033.apollo.planning.StatsGro"
  "up\022*\n\005kappa\030\005 \001(\0132\033.apollo.planning.Stat"
  "sGroup\022+\n\006dkappa\030\006 \001(\0132\033.apollo.planning"
  ".StatsGroup"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_sccs[2] = {
  &scc_info_PlanningStats_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.base,
  &scc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto, "modules/planning/proto/planning_stats.proto", 451,
  &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto, 2, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void StatsGroup::InitAsDefaultInstance() {
}
class StatsGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<StatsGroup>()._has_bits_);
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StatsGroup::StatsGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StatsGroup)
}
StatsGroup::StatsGroup(const StatsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_, &from.max_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&max_)) + sizeof(min_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StatsGroup)
}

void StatsGroup::SharedCtor() {
  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&max_)) + sizeof(num_));
  min_ = 10000000000;
}

StatsGroup::~StatsGroup() {
  // @@protoc_insertion_point(destructor:apollo.planning.StatsGroup)
  SharedDtor();
}

void StatsGroup::SharedDtor() {
}

void StatsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsGroup& StatsGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsGroup_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.base);
  return *internal_default_instance();
}


void StatsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StatsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&max_)) + sizeof(num_));
    min_ = 10000000000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StatsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min = 2 [default = 10000000000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_sum(&has_bits);
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double avg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_avg(&has_bits);
          avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatsGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StatsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max(), target);
  }

  // optional double min = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  // optional double sum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_sum(), target);
  }

  // optional double avg = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_avg(), target);
  }

  // optional int32 num = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StatsGroup)
  return target;
}

size_t StatsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StatsGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double max = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double sum = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double avg = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 num = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num());
    }

    // optional double min = 2 [default = 10000000000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StatsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatsGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StatsGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StatsGroup)
    MergeFrom(*source);
  }
}

void StatsGroup::MergeFrom(const StatsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StatsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000002u) {
      sum_ = from.sum_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_ = from.avg_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_ = from.min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatsGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StatsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsGroup::CopyFrom(const StatsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StatsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsGroup::IsInitialized() const {
  return true;
}

void StatsGroup::InternalSwap(StatsGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_, other->max_);
  swap(sum_, other->sum_);
  swap(avg_, other->avg_);
  swap(num_, other->num_);
  swap(min_, other->min_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanningStats::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningStats_default_instance_._instance.get_mutable()->total_path_length_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  ::apollo::planning::_PlanningStats_default_instance_._instance.get_mutable()->total_path_time_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  ::apollo::planning::_PlanningStats_default_instance_._instance.get_mutable()->v_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  ::apollo::planning::_PlanningStats_default_instance_._instance.get_mutable()->a_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  ::apollo::planning::_PlanningStats_default_instance_._instance.get_mutable()->kappa_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
  ::apollo::planning::_PlanningStats_default_instance_._instance.get_mutable()->dkappa_ = const_cast< ::apollo::planning::StatsGroup*>(
      ::apollo::planning::StatsGroup::internal_default_instance());
}
class PlanningStats::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStats>()._has_bits_);
  static const ::apollo::planning::StatsGroup& total_path_length(const PlanningStats* msg);
  static void set_has_total_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::StatsGroup& total_path_time(const PlanningStats* msg);
  static void set_has_total_path_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::StatsGroup& v(const PlanningStats* msg);
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::StatsGroup& a(const PlanningStats* msg);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::StatsGroup& kappa(const PlanningStats* msg);
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::StatsGroup& dkappa(const PlanningStats* msg);
  static void set_has_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::planning::StatsGroup&
PlanningStats::_Internal::total_path_length(const PlanningStats* msg) {
  return *msg->total_path_length_;
}
const ::apollo::planning::StatsGroup&
PlanningStats::_Internal::total_path_time(const PlanningStats* msg) {
  return *msg->total_path_time_;
}
const ::apollo::planning::StatsGroup&
PlanningStats::_Internal::v(const PlanningStats* msg) {
  return *msg->v_;
}
const ::apollo::planning::StatsGroup&
PlanningStats::_Internal::a(const PlanningStats* msg) {
  return *msg->a_;
}
const ::apollo::planning::StatsGroup&
PlanningStats::_Internal::kappa(const PlanningStats* msg) {
  return *msg->kappa_;
}
const ::apollo::planning::StatsGroup&
PlanningStats::_Internal::dkappa(const PlanningStats* msg) {
  return *msg->dkappa_;
}
PlanningStats::PlanningStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningStats)
}
PlanningStats::PlanningStats(const PlanningStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_total_path_length()) {
    total_path_length_ = new ::apollo::planning::StatsGroup(*from.total_path_length_);
  } else {
    total_path_length_ = nullptr;
  }
  if (from._internal_has_total_path_time()) {
    total_path_time_ = new ::apollo::planning::StatsGroup(*from.total_path_time_);
  } else {
    total_path_time_ = nullptr;
  }
  if (from._internal_has_v()) {
    v_ = new ::apollo::planning::StatsGroup(*from.v_);
  } else {
    v_ = nullptr;
  }
  if (from._internal_has_a()) {
    a_ = new ::apollo::planning::StatsGroup(*from.a_);
  } else {
    a_ = nullptr;
  }
  if (from._internal_has_kappa()) {
    kappa_ = new ::apollo::planning::StatsGroup(*from.kappa_);
  } else {
    kappa_ = nullptr;
  }
  if (from._internal_has_dkappa()) {
    dkappa_ = new ::apollo::planning::StatsGroup(*from.dkappa_);
  } else {
    dkappa_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningStats)
}

void PlanningStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanningStats_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.base);
  ::memset(&total_path_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dkappa_) -
      reinterpret_cast<char*>(&total_path_length_)) + sizeof(dkappa_));
}

PlanningStats::~PlanningStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningStats)
  SharedDtor();
}

void PlanningStats::SharedDtor() {
  if (this != internal_default_instance()) delete total_path_length_;
  if (this != internal_default_instance()) delete total_path_time_;
  if (this != internal_default_instance()) delete v_;
  if (this != internal_default_instance()) delete a_;
  if (this != internal_default_instance()) delete kappa_;
  if (this != internal_default_instance()) delete dkappa_;
}

void PlanningStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanningStats& PlanningStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanningStats_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto.base);
  return *internal_default_instance();
}


void PlanningStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(total_path_length_ != nullptr);
      total_path_length_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_path_time_ != nullptr);
      total_path_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(v_ != nullptr);
      v_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(a_ != nullptr);
      a_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(kappa_ != nullptr);
      kappa_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dkappa_ != nullptr);
      dkappa_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlanningStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.StatsGroup total_path_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_path_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StatsGroup total_path_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_path_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StatsGroup v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StatsGroup a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StatsGroup kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kappa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.StatsGroup dkappa = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dkappa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanningStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.StatsGroup total_path_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::total_path_length(this), target, stream);
  }

  // optional .apollo.planning.StatsGroup total_path_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_path_time(this), target, stream);
  }

  // optional .apollo.planning.StatsGroup v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::v(this), target, stream);
  }

  // optional .apollo.planning.StatsGroup a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::a(this), target, stream);
  }

  // optional .apollo.planning.StatsGroup kappa = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::kappa(this), target, stream);
  }

  // optional .apollo.planning.StatsGroup dkappa = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dkappa(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningStats)
  return target;
}

size_t PlanningStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.planning.StatsGroup total_path_length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_path_length_);
    }

    // optional .apollo.planning.StatsGroup total_path_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_path_time_);
    }

    // optional .apollo.planning.StatsGroup v = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_);
    }

    // optional .apollo.planning.StatsGroup a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a_);
    }

    // optional .apollo.planning.StatsGroup kappa = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kappa_);
    }

    // optional .apollo.planning.StatsGroup dkappa = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dkappa_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningStats)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanningStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningStats)
    MergeFrom(*source);
  }
}

void PlanningStats::MergeFrom(const PlanningStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_total_path_length()->::apollo::planning::StatsGroup::MergeFrom(from._internal_total_path_length());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_total_path_time()->::apollo::planning::StatsGroup::MergeFrom(from._internal_total_path_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_v()->::apollo::planning::StatsGroup::MergeFrom(from._internal_v());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_a()->::apollo::planning::StatsGroup::MergeFrom(from._internal_a());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_kappa()->::apollo::planning::StatsGroup::MergeFrom(from._internal_kappa());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dkappa()->::apollo::planning::StatsGroup::MergeFrom(from._internal_dkappa());
    }
  }
}

void PlanningStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStats::CopyFrom(const PlanningStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStats::IsInitialized() const {
  return true;
}

void PlanningStats::InternalSwap(PlanningStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_path_length_, other->total_path_length_);
  swap(total_path_time_, other->total_path_time_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(kappa_, other->kappa_);
  swap(dkappa_, other->dkappa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::StatsGroup* Arena::CreateMaybeMessage< ::apollo::planning::StatsGroup >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StatsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningStats* Arena::CreateMaybeMessage< ::apollo::planning::PlanningStats >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
