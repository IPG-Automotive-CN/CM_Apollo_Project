// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_problem.proto

#include "modules/planning/proto/qp_problem.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto;
namespace apollo {
namespace planning {
class QuadraticProgrammingProblemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuadraticProgrammingProblem> _instance;
} _QuadraticProgrammingProblem_default_instance_;
class QPMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QPMatrix> _instance;
} _QPMatrix_default_instance_;
class QuadraticProgrammingProblemSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuadraticProgrammingProblemSet> _instance;
} _QuadraticProgrammingProblemSet_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_QPMatrix_default_instance_;
    new (ptr) ::apollo::planning::QPMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::QPMatrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto}, {}};

static void InitDefaultsscc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_QuadraticProgrammingProblem_default_instance_;
    new (ptr) ::apollo::planning::QuadraticProgrammingProblem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::QuadraticProgrammingProblem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto}, {
      &scc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base,}};

static void InitDefaultsscc_info_QuadraticProgrammingProblemSet_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_QuadraticProgrammingProblemSet_default_instance_;
    new (ptr) ::apollo::planning::QuadraticProgrammingProblemSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::QuadraticProgrammingProblemSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuadraticProgrammingProblemSet_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuadraticProgrammingProblemSet_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto}, {
      &scc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, param_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, quadratic_matrix_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, equality_matrix_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, equality_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, inequality_matrix_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, inequality_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, input_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, optimal_param_),
  3,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, row_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, col_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, element_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblemSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblemSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblemSet, problem_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::apollo::planning::QuadraticProgrammingProblem)},
  { 23, 31, sizeof(::apollo::planning::QPMatrix)},
  { 34, 40, sizeof(::apollo::planning::QuadraticProgrammingProblemSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_QuadraticProgrammingProblem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_QPMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_QuadraticProgrammingProblemSet_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'modules/planning/proto/qp_problem.prot"
  "o\022\017apollo.planning\"\275\002\n\033QuadraticProgramm"
  "ingProblem\022\022\n\nparam_size\030\001 \001(\005\0223\n\020quadra"
  "tic_matrix\030\002 \001(\0132\031.apollo.planning.QPMat"
  "rix\022\014\n\004bias\030\003 \003(\001\0222\n\017equality_matrix\030\004 \001"
  "(\0132\031.apollo.planning.QPMatrix\022\026\n\016equalit"
  "y_value\030\005 \003(\001\0224\n\021inequality_matrix\030\006 \001(\013"
  "2\031.apollo.planning.QPMatrix\022\030\n\020inequalit"
  "y_value\030\007 \003(\001\022\024\n\014input_marker\030\010 \003(\001\022\025\n\ro"
  "ptimal_param\030\t \003(\001\"\?\n\010QPMatrix\022\020\n\010row_si"
  "ze\030\001 \001(\005\022\020\n\010col_size\030\002 \001(\005\022\017\n\007element\030\003 "
  "\003(\001\"_\n\036QuadraticProgrammingProblemSet\022=\n"
  "\007problem\030\001 \003(\0132,.apollo.planning.Quadrat"
  "icProgrammingProblem"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_sccs[3] = {
  &scc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base,
  &scc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base,
  &scc_info_QuadraticProgrammingProblemSet_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto, "modules/planning/proto/qp_problem.proto", 540,
  &descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto, 3, file_level_enum_descriptors_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void QuadraticProgrammingProblem::InitAsDefaultInstance() {
  ::apollo::planning::_QuadraticProgrammingProblem_default_instance_._instance.get_mutable()->quadratic_matrix_ = const_cast< ::apollo::planning::QPMatrix*>(
      ::apollo::planning::QPMatrix::internal_default_instance());
  ::apollo::planning::_QuadraticProgrammingProblem_default_instance_._instance.get_mutable()->equality_matrix_ = const_cast< ::apollo::planning::QPMatrix*>(
      ::apollo::planning::QPMatrix::internal_default_instance());
  ::apollo::planning::_QuadraticProgrammingProblem_default_instance_._instance.get_mutable()->inequality_matrix_ = const_cast< ::apollo::planning::QPMatrix*>(
      ::apollo::planning::QPMatrix::internal_default_instance());
}
class QuadraticProgrammingProblem::_Internal {
 public:
  using HasBits = decltype(std::declval<QuadraticProgrammingProblem>()._has_bits_);
  static void set_has_param_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::QPMatrix& quadratic_matrix(const QuadraticProgrammingProblem* msg);
  static void set_has_quadratic_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::QPMatrix& equality_matrix(const QuadraticProgrammingProblem* msg);
  static void set_has_equality_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::QPMatrix& inequality_matrix(const QuadraticProgrammingProblem* msg);
  static void set_has_inequality_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::QPMatrix&
QuadraticProgrammingProblem::_Internal::quadratic_matrix(const QuadraticProgrammingProblem* msg) {
  return *msg->quadratic_matrix_;
}
const ::apollo::planning::QPMatrix&
QuadraticProgrammingProblem::_Internal::equality_matrix(const QuadraticProgrammingProblem* msg) {
  return *msg->equality_matrix_;
}
const ::apollo::planning::QPMatrix&
QuadraticProgrammingProblem::_Internal::inequality_matrix(const QuadraticProgrammingProblem* msg) {
  return *msg->inequality_matrix_;
}
QuadraticProgrammingProblem::QuadraticProgrammingProblem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QuadraticProgrammingProblem)
}
QuadraticProgrammingProblem::QuadraticProgrammingProblem(const QuadraticProgrammingProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bias_(from.bias_),
      equality_value_(from.equality_value_),
      inequality_value_(from.inequality_value_),
      input_marker_(from.input_marker_),
      optimal_param_(from.optimal_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_quadratic_matrix()) {
    quadratic_matrix_ = new ::apollo::planning::QPMatrix(*from.quadratic_matrix_);
  } else {
    quadratic_matrix_ = nullptr;
  }
  if (from._internal_has_equality_matrix()) {
    equality_matrix_ = new ::apollo::planning::QPMatrix(*from.equality_matrix_);
  } else {
    equality_matrix_ = nullptr;
  }
  if (from._internal_has_inequality_matrix()) {
    inequality_matrix_ = new ::apollo::planning::QPMatrix(*from.inequality_matrix_);
  } else {
    inequality_matrix_ = nullptr;
  }
  param_size_ = from.param_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QuadraticProgrammingProblem)
}

void QuadraticProgrammingProblem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base);
  ::memset(&quadratic_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_size_) -
      reinterpret_cast<char*>(&quadratic_matrix_)) + sizeof(param_size_));
}

QuadraticProgrammingProblem::~QuadraticProgrammingProblem() {
  // @@protoc_insertion_point(destructor:apollo.planning.QuadraticProgrammingProblem)
  SharedDtor();
}

void QuadraticProgrammingProblem::SharedDtor() {
  if (this != internal_default_instance()) delete quadratic_matrix_;
  if (this != internal_default_instance()) delete equality_matrix_;
  if (this != internal_default_instance()) delete inequality_matrix_;
}

void QuadraticProgrammingProblem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuadraticProgrammingProblem& QuadraticProgrammingProblem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuadraticProgrammingProblem_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void QuadraticProgrammingProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QuadraticProgrammingProblem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bias_.Clear();
  equality_value_.Clear();
  inequality_value_.Clear();
  input_marker_.Clear();
  optimal_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quadratic_matrix_ != nullptr);
      quadratic_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(equality_matrix_ != nullptr);
      equality_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inequality_matrix_ != nullptr);
      inequality_matrix_->Clear();
    }
  }
  param_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QuadraticProgrammingProblem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 param_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_param_size(&has_bits);
          param_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quadratic_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bias(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.QPMatrix equality_matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_equality_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double equality_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_equality_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_equality_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.QPMatrix inequality_matrix = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inequality_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double inequality_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inequality_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_inequality_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double input_marker = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_marker(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_input_marker(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double optimal_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_optimal_param(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<73>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_optimal_param(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuadraticProgrammingProblem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QuadraticProgrammingProblem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 param_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_param_size(), target);
  }

  // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quadratic_matrix(this), target, stream);
  }

  // repeated double bias = 3;
  for (int i = 0, n = this->_internal_bias_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bias(i), target);
  }

  // optional .apollo.planning.QPMatrix equality_matrix = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::equality_matrix(this), target, stream);
  }

  // repeated double equality_value = 5;
  for (int i = 0, n = this->_internal_equality_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_equality_value(i), target);
  }

  // optional .apollo.planning.QPMatrix inequality_matrix = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::inequality_matrix(this), target, stream);
  }

  // repeated double inequality_value = 7;
  for (int i = 0, n = this->_internal_inequality_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_inequality_value(i), target);
  }

  // repeated double input_marker = 8;
  for (int i = 0, n = this->_internal_input_marker_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_input_marker(i), target);
  }

  // repeated double optimal_param = 9;
  for (int i = 0, n = this->_internal_optimal_param_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_optimal_param(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QuadraticProgrammingProblem)
  return target;
}

size_t QuadraticProgrammingProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QuadraticProgrammingProblem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bias = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bias_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bias_size());
    total_size += data_size;
  }

  // repeated double equality_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_equality_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equality_value_size());
    total_size += data_size;
  }

  // repeated double inequality_value = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inequality_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_inequality_value_size());
    total_size += data_size;
  }

  // repeated double input_marker = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_input_marker_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_marker_size());
    total_size += data_size;
  }

  // repeated double optimal_param = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_optimal_param_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_optimal_param_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quadratic_matrix_);
    }

    // optional .apollo.planning.QPMatrix equality_matrix = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equality_matrix_);
    }

    // optional .apollo.planning.QPMatrix inequality_matrix = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inequality_matrix_);
    }

    // optional int32 param_size = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_param_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuadraticProgrammingProblem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  const QuadraticProgrammingProblem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuadraticProgrammingProblem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QuadraticProgrammingProblem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QuadraticProgrammingProblem)
    MergeFrom(*source);
  }
}

void QuadraticProgrammingProblem::MergeFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bias_.MergeFrom(from.bias_);
  equality_value_.MergeFrom(from.equality_value_);
  inequality_value_.MergeFrom(from.inequality_value_);
  input_marker_.MergeFrom(from.input_marker_);
  optimal_param_.MergeFrom(from.optimal_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quadratic_matrix()->::apollo::planning::QPMatrix::MergeFrom(from._internal_quadratic_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_equality_matrix()->::apollo::planning::QPMatrix::MergeFrom(from._internal_equality_matrix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inequality_matrix()->::apollo::planning::QPMatrix::MergeFrom(from._internal_inequality_matrix());
    }
    if (cached_has_bits & 0x00000008u) {
      param_size_ = from.param_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuadraticProgrammingProblem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadraticProgrammingProblem::CopyFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblem::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblem::InternalSwap(QuadraticProgrammingProblem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bias_.InternalSwap(&other->bias_);
  equality_value_.InternalSwap(&other->equality_value_);
  inequality_value_.InternalSwap(&other->inequality_value_);
  input_marker_.InternalSwap(&other->input_marker_);
  optimal_param_.InternalSwap(&other->optimal_param_);
  swap(quadratic_matrix_, other->quadratic_matrix_);
  swap(equality_matrix_, other->equality_matrix_);
  swap(inequality_matrix_, other->inequality_matrix_);
  swap(param_size_, other->param_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadraticProgrammingProblem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QPMatrix::InitAsDefaultInstance() {
}
class QPMatrix::_Internal {
 public:
  using HasBits = decltype(std::declval<QPMatrix>()._has_bits_);
  static void set_has_row_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QPMatrix::QPMatrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QPMatrix)
}
QPMatrix::QPMatrix(const QPMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_size_, &from.row_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_size_) -
    reinterpret_cast<char*>(&row_size_)) + sizeof(col_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QPMatrix)
}

void QPMatrix::SharedCtor() {
  ::memset(&row_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_size_) -
      reinterpret_cast<char*>(&row_size_)) + sizeof(col_size_));
}

QPMatrix::~QPMatrix() {
  // @@protoc_insertion_point(destructor:apollo.planning.QPMatrix)
  SharedDtor();
}

void QPMatrix::SharedDtor() {
}

void QPMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QPMatrix& QPMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QPMatrix_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void QPMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QPMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&row_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_size_) -
        reinterpret_cast<char*>(&row_size_)) + sizeof(col_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QPMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 row_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_row_size(&has_bits);
          row_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 col_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_col_size(&has_bits);
          col_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QPMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QPMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row_size(), target);
  }

  // optional int32 col_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col_size(), target);
  }

  // repeated double element = 3;
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_element(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QPMatrix)
  return target;
}

size_t QPMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QPMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double element = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_element_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 row_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_row_size());
    }

    // optional int32 col_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_col_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QPMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const QPMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QPMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QPMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QPMatrix)
    MergeFrom(*source);
  }
}

void QPMatrix::MergeFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      row_size_ = from.row_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      col_size_ = from.col_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QPMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QPMatrix::CopyFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPMatrix::IsInitialized() const {
  return true;
}

void QPMatrix::InternalSwap(QPMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  element_.InternalSwap(&other->element_);
  swap(row_size_, other->row_size_);
  swap(col_size_, other->col_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QPMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuadraticProgrammingProblemSet::InitAsDefaultInstance() {
}
class QuadraticProgrammingProblemSet::_Internal {
 public:
  using HasBits = decltype(std::declval<QuadraticProgrammingProblemSet>()._has_bits_);
};

QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.QuadraticProgrammingProblemSet)
}
QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet(const QuadraticProgrammingProblemSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      problem_(from.problem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QuadraticProgrammingProblemSet)
}

void QuadraticProgrammingProblemSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuadraticProgrammingProblemSet_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base);
}

QuadraticProgrammingProblemSet::~QuadraticProgrammingProblemSet() {
  // @@protoc_insertion_point(destructor:apollo.planning.QuadraticProgrammingProblemSet)
  SharedDtor();
}

void QuadraticProgrammingProblemSet::SharedDtor() {
}

void QuadraticProgrammingProblemSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuadraticProgrammingProblemSet& QuadraticProgrammingProblemSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuadraticProgrammingProblemSet_modules_2fplanning_2fproto_2fqp_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void QuadraticProgrammingProblemSet::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QuadraticProgrammingProblemSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  problem_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QuadraticProgrammingProblemSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_problem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuadraticProgrammingProblemSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QuadraticProgrammingProblemSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_problem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_problem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QuadraticProgrammingProblemSet)
  return target;
}

size_t QuadraticProgrammingProblemSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QuadraticProgrammingProblemSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
  total_size += 1UL * this->_internal_problem_size();
  for (const auto& msg : this->problem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuadraticProgrammingProblemSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  const QuadraticProgrammingProblemSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuadraticProgrammingProblemSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.QuadraticProgrammingProblemSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.QuadraticProgrammingProblemSet)
    MergeFrom(*source);
  }
}

void QuadraticProgrammingProblemSet::MergeFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  problem_.MergeFrom(from.problem_);
}

void QuadraticProgrammingProblemSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadraticProgrammingProblemSet::CopyFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblemSet::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblemSet::InternalSwap(QuadraticProgrammingProblemSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  problem_.InternalSwap(&other->problem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadraticProgrammingProblemSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::QuadraticProgrammingProblem* Arena::CreateMaybeMessage< ::apollo::planning::QuadraticProgrammingProblem >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::QuadraticProgrammingProblem >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::QPMatrix* Arena::CreateMaybeMessage< ::apollo::planning::QPMatrix >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::QPMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::QuadraticProgrammingProblemSet* Arena::CreateMaybeMessage< ::apollo::planning::QuadraticProgrammingProblemSet >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::QuadraticProgrammingProblemSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
