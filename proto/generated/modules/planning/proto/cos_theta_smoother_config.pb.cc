// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/cos_theta_smoother_config.proto

#include "modules/planning/proto/cos_theta_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class CosThetaSmootherConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CosThetaSmootherConfig> _instance;
} _CosThetaSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CosThetaSmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::CosThetaSmootherConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CosThetaSmootherConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, weight_cos_included_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, weight_anchor_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, weight_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, max_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, acceptable_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, acceptable_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, ipopt_use_automatic_differentiation_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::apollo::planning::CosThetaSmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_CosThetaSmootherConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/planning/proto/cos_theta_smoot"
  "her_config.proto\022\017apollo.planning\"\307\002\n\026Co"
  "sThetaSmootherConfig\022(\n\031weight_cos_inclu"
  "ded_angle\030\001 \001(\001:\00510000\022\037\n\024weight_anchor_"
  "points\030\002 \001(\001:\0011\022\030\n\rweight_length\030\003 \001(\001:\001"
  "1\022\026\n\013print_level\030\004 \001(\005:\0010\022\"\n\025max_num_of_"
  "iterations\030\005 \001(\005:\003500\022(\n\034acceptable_num_"
  "of_iterations\030\006 \001(\005:\00215\022\022\n\003tol\030\007 \001(\001:\0051e"
  "-08\022\033\n\016acceptable_tol\030\010 \001(\001:\0030.1\0221\n#ipop"
  "t_use_automatic_differentiation\030\t \001(\010:\004t"
  "rue"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_sccs[1] = {
  &scc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, "modules/planning/proto/cos_theta_smoother_config.proto", 403,
  &descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void CosThetaSmootherConfig::InitAsDefaultInstance() {
}
class CosThetaSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CosThetaSmootherConfig>()._has_bits_);
  static void set_has_weight_cos_included_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_anchor_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acceptable_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_acceptable_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipopt_use_automatic_differentiation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CosThetaSmootherConfig::CosThetaSmootherConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CosThetaSmootherConfig)
}
CosThetaSmootherConfig::CosThetaSmootherConfig(const CosThetaSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&print_level_, &from.print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&print_level_)) + sizeof(acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CosThetaSmootherConfig)
}

void CosThetaSmootherConfig::SharedCtor() {
  print_level_ = 0;
  ipopt_use_automatic_differentiation_ = true;
  weight_cos_included_angle_ = 10000;
  weight_anchor_points_ = 1;
  weight_length_ = 1;
  max_num_of_iterations_ = 500;
  acceptable_num_of_iterations_ = 15;
  tol_ = 1e-08;
  acceptable_tol_ = 0.1;
}

CosThetaSmootherConfig::~CosThetaSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CosThetaSmootherConfig)
  SharedDtor();
}

void CosThetaSmootherConfig::SharedDtor() {
}

void CosThetaSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CosThetaSmootherConfig& CosThetaSmootherConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CosThetaSmootherConfig_modules_2fplanning_2fproto_2fcos_5ftheta_5fsmoother_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CosThetaSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CosThetaSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    print_level_ = 0;
    ipopt_use_automatic_differentiation_ = true;
    weight_cos_included_angle_ = 10000;
    weight_anchor_points_ = 1;
    weight_length_ = 1;
    max_num_of_iterations_ = 500;
    acceptable_num_of_iterations_ = 15;
    tol_ = 1e-08;
  }
  acceptable_tol_ = 0.1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CosThetaSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_cos_included_angle = 1 [default = 10000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_cos_included_angle(&has_bits);
          weight_cos_included_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_anchor_points = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_anchor_points(&has_bits);
          weight_anchor_points_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_length = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_length(&has_bits);
          weight_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 print_level = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_print_level(&has_bits);
          print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_of_iterations = 5 [default = 500];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_num_of_iterations(&has_bits);
          max_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acceptable_num_of_iterations = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_acceptable_num_of_iterations(&has_bits);
          acceptable_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double tol = 7 [default = 1e-08];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_tol(&has_bits);
          tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceptable_tol = 8 [default = 0.1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_acceptable_tol(&has_bits);
          acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool ipopt_use_automatic_differentiation = 9 [default = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ipopt_use_automatic_differentiation(&has_bits);
          ipopt_use_automatic_differentiation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CosThetaSmootherConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CosThetaSmootherConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_cos_included_angle = 1 [default = 10000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_cos_included_angle(), target);
  }

  // optional double weight_anchor_points = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_anchor_points(), target);
  }

  // optional double weight_length = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_length(), target);
  }

  // optional int32 print_level = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_print_level(), target);
  }

  // optional int32 max_num_of_iterations = 5 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_acceptable_num_of_iterations(), target);
  }

  // optional double tol = 7 [default = 1e-08];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_tol(), target);
  }

  // optional double acceptable_tol = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceptable_tol(), target);
  }

  // optional bool ipopt_use_automatic_differentiation = 9 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ipopt_use_automatic_differentiation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CosThetaSmootherConfig)
  return target;
}

size_t CosThetaSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CosThetaSmootherConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 print_level = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_print_level());
    }

    // optional bool ipopt_use_automatic_differentiation = 9 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double weight_cos_included_angle = 1 [default = 10000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_anchor_points = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_length = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 max_num_of_iterations = 5 [default = 500];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 6 [default = 15];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_acceptable_num_of_iterations());
    }

    // optional double tol = 7 [default = 1e-08];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double acceptable_tol = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosThetaSmootherConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CosThetaSmootherConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CosThetaSmootherConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CosThetaSmootherConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CosThetaSmootherConfig)
    MergeFrom(*source);
  }
}

void CosThetaSmootherConfig::MergeFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      print_level_ = from.print_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_use_automatic_differentiation_ = from.ipopt_use_automatic_differentiation_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_cos_included_angle_ = from.weight_cos_included_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_anchor_points_ = from.weight_anchor_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_length_ = from.weight_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_num_of_iterations_ = from.max_num_of_iterations_;
    }
    if (cached_has_bits & 0x00000040u) {
      acceptable_num_of_iterations_ = from.acceptable_num_of_iterations_;
    }
    if (cached_has_bits & 0x00000080u) {
      tol_ = from.tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_acceptable_tol(from._internal_acceptable_tol());
  }
}

void CosThetaSmootherConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosThetaSmootherConfig::CopyFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosThetaSmootherConfig::IsInitialized() const {
  return true;
}

void CosThetaSmootherConfig::InternalSwap(CosThetaSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(print_level_, other->print_level_);
  swap(ipopt_use_automatic_differentiation_, other->ipopt_use_automatic_differentiation_);
  swap(weight_cos_included_angle_, other->weight_cos_included_angle_);
  swap(weight_anchor_points_, other->weight_anchor_points_);
  swap(weight_length_, other->weight_length_);
  swap(max_num_of_iterations_, other->max_num_of_iterations_);
  swap(acceptable_num_of_iterations_, other->acceptable_num_of_iterations_);
  swap(tol_, other->tol_);
  swap(acceptable_tol_, other->acceptable_tol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosThetaSmootherConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::CosThetaSmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::CosThetaSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CosThetaSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
