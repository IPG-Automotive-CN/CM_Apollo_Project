// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_roi_decider_config.proto

#include "modules/planning/proto/open_space_roi_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class OpenSpaceRoiDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSpaceRoiDeciderConfig> _instance;
} _OpenSpaceRoiDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceRoiDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceRoiDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceRoiDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_longitudinal_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_start_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_inwards_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, enable_perception_obstacles_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_depth_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_linesegment_min_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_linesegment_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, perception_obstacle_filtering_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, perception_obstacle_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, bound_width_change_ratio_uppper_limit_),
  0,
  4,
  5,
  1,
  2,
  6,
  7,
  8,
  9,
  3,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::planning::OpenSpaceRoiDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_OpenSpaceRoiDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:modules/planning/proto/open_space_roi_"
  "decider_config.proto\022\017apollo.planning\"\266\004"
  "\n\031OpenSpaceRoiDeciderConfig\022D\n\010roi_type\030"
  "\001 \001(\01622.apollo.planning.OpenSpaceRoiDeci"
  "derConfig.RoiType\022\"\n\026roi_longitudinal_ra"
  "nge\030\002 \001(\001:\00210\022\036\n\023parking_start_range\030\003 \001"
  "(\001:\0017\022\036\n\017parking_inwards\030\004 \001(\010:\005false\022#\n"
  "\033enable_perception_obstacles\030\005 \001(\010\022!\n\024pa"
  "rking_depth_buffer\030\006 \001(\001:\0030.1\022&\n\031roi_lin"
  "esegment_min_angle\030\007 \001(\001:\0030.3\022!\n\026roi_lin"
  "esegment_length\030\010 \001(\001:\0011\0224\n&perception_o"
  "bstacle_filtering_distance\030\t \001(\001:\0041000\022\""
  "\n\032perception_obstacle_buffer\030\n \001(\001\0220\n%bo"
  "und_width_change_ratio_uppper_limit\030\013 \001("
  "\001:\0011\"P\n\007RoiType\022\017\n\013NOT_DEFINED\020\000\022\013\n\007PARK"
  "ING\020\001\022\r\n\tPULL_OVER\020\002\022\030\n\024NARROW_STREET_U_"
  "TURN\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_sccs[1] = {
  &scc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto, "modules/planning/proto/open_space_roi_decider_config.proto", 646,
  &descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenSpaceRoiDeciderConfig_RoiType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto[0];
}
bool OpenSpaceRoiDeciderConfig_RoiType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::NOT_DEFINED;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PARKING;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PULL_OVER;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::NARROW_STREET_U_TURN;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::RoiType_MIN;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::RoiType_MAX;
constexpr int OpenSpaceRoiDeciderConfig::RoiType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void OpenSpaceRoiDeciderConfig::InitAsDefaultInstance() {
}
class OpenSpaceRoiDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OpenSpaceRoiDeciderConfig>()._has_bits_);
  static void set_has_roi_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roi_longitudinal_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parking_start_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parking_inwards(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_perception_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_depth_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_roi_linesegment_min_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_roi_linesegment_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_perception_obstacle_filtering_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_perception_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bound_width_change_ratio_uppper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceRoiDeciderConfig)
}
OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig(const OpenSpaceRoiDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roi_type_, &from.roi_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bound_width_change_ratio_uppper_limit_) -
    reinterpret_cast<char*>(&roi_type_)) + sizeof(bound_width_change_ratio_uppper_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceRoiDeciderConfig)
}

void OpenSpaceRoiDeciderConfig::SharedCtor() {
  ::memset(&roi_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_obstacle_buffer_) -
      reinterpret_cast<char*>(&roi_type_)) + sizeof(perception_obstacle_buffer_));
  roi_longitudinal_range_ = 10;
  parking_start_range_ = 7;
  parking_depth_buffer_ = 0.1;
  roi_linesegment_min_angle_ = 0.3;
  roi_linesegment_length_ = 1;
  perception_obstacle_filtering_distance_ = 1000;
  bound_width_change_ratio_uppper_limit_ = 1;
}

OpenSpaceRoiDeciderConfig::~OpenSpaceRoiDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceRoiDeciderConfig)
  SharedDtor();
}

void OpenSpaceRoiDeciderConfig::SharedDtor() {
}

void OpenSpaceRoiDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSpaceRoiDeciderConfig& OpenSpaceRoiDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSpaceRoiDeciderConfig_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void OpenSpaceRoiDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&roi_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perception_obstacle_buffer_) -
        reinterpret_cast<char*>(&roi_type_)) + sizeof(perception_obstacle_buffer_));
    roi_longitudinal_range_ = 10;
    parking_start_range_ = 7;
    parking_depth_buffer_ = 0.1;
    roi_linesegment_min_angle_ = 0.3;
  }
  if (cached_has_bits & 0x00000700u) {
    roi_linesegment_length_ = 1;
    perception_obstacle_filtering_distance_ = 1000;
    bound_width_change_ratio_uppper_limit_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OpenSpaceRoiDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_IsValid(val))) {
            _internal_set_roi_type(static_cast<::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double roi_longitudinal_range = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_roi_longitudinal_range(&has_bits);
          roi_longitudinal_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double parking_start_range = 3 [default = 7];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_parking_start_range(&has_bits);
          parking_start_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool parking_inwards = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_parking_inwards(&has_bits);
          parking_inwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_perception_obstacles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable_perception_obstacles(&has_bits);
          enable_perception_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double parking_depth_buffer = 6 [default = 0.1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_parking_depth_buffer(&has_bits);
          parking_depth_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roi_linesegment_min_angle = 7 [default = 0.3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_roi_linesegment_min_angle(&has_bits);
          roi_linesegment_min_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roi_linesegment_length = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_roi_linesegment_length(&has_bits);
          roi_linesegment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double perception_obstacle_filtering_distance = 9 [default = 1000];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_perception_obstacle_filtering_distance(&has_bits);
          perception_obstacle_filtering_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double perception_obstacle_buffer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_perception_obstacle_buffer(&has_bits);
          perception_obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bound_width_change_ratio_uppper_limit = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_bound_width_change_ratio_uppper_limit(&has_bits);
          bound_width_change_ratio_uppper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSpaceRoiDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_roi_type(), target);
  }

  // optional double roi_longitudinal_range = 2 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_roi_longitudinal_range(), target);
  }

  // optional double parking_start_range = 3 [default = 7];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_parking_start_range(), target);
  }

  // optional bool parking_inwards = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_parking_inwards(), target);
  }

  // optional bool enable_perception_obstacles = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_perception_obstacles(), target);
  }

  // optional double parking_depth_buffer = 6 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_parking_depth_buffer(), target);
  }

  // optional double roi_linesegment_min_angle = 7 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_roi_linesegment_min_angle(), target);
  }

  // optional double roi_linesegment_length = 8 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_roi_linesegment_length(), target);
  }

  // optional double perception_obstacle_filtering_distance = 9 [default = 1000];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_perception_obstacle_filtering_distance(), target);
  }

  // optional double perception_obstacle_buffer = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_perception_obstacle_buffer(), target);
  }

  // optional double bound_width_change_ratio_uppper_limit = 11 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_bound_width_change_ratio_uppper_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceRoiDeciderConfig)
  return target;
}

size_t OpenSpaceRoiDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_roi_type());
    }

    // optional bool parking_inwards = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_perception_obstacles = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double perception_obstacle_buffer = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double roi_longitudinal_range = 2 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double parking_start_range = 3 [default = 7];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double parking_depth_buffer = 6 [default = 0.1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double roi_linesegment_min_angle = 7 [default = 0.3];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double roi_linesegment_length = 8 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle_filtering_distance = 9 [default = 1000];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double bound_width_change_ratio_uppper_limit = 11 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceRoiDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceRoiDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSpaceRoiDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceRoiDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceRoiDeciderConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceRoiDeciderConfig::MergeFrom(const OpenSpaceRoiDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      roi_type_ = from.roi_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      parking_inwards_ = from.parking_inwards_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_perception_obstacles_ = from.enable_perception_obstacles_;
    }
    if (cached_has_bits & 0x00000008u) {
      perception_obstacle_buffer_ = from.perception_obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      roi_longitudinal_range_ = from.roi_longitudinal_range_;
    }
    if (cached_has_bits & 0x00000020u) {
      parking_start_range_ = from.parking_start_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      parking_depth_buffer_ = from.parking_depth_buffer_;
    }
    if (cached_has_bits & 0x00000080u) {
      roi_linesegment_min_angle_ = from.roi_linesegment_min_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      roi_linesegment_length_ = from.roi_linesegment_length_;
    }
    if (cached_has_bits & 0x00000200u) {
      perception_obstacle_filtering_distance_ = from.perception_obstacle_filtering_distance_;
    }
    if (cached_has_bits & 0x00000400u) {
      bound_width_change_ratio_uppper_limit_ = from.bound_width_change_ratio_uppper_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceRoiDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceRoiDeciderConfig::CopyFrom(const OpenSpaceRoiDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceRoiDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceRoiDeciderConfig::InternalSwap(OpenSpaceRoiDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roi_type_, other->roi_type_);
  swap(parking_inwards_, other->parking_inwards_);
  swap(enable_perception_obstacles_, other->enable_perception_obstacles_);
  swap(perception_obstacle_buffer_, other->perception_obstacle_buffer_);
  swap(roi_longitudinal_range_, other->roi_longitudinal_range_);
  swap(parking_start_range_, other->parking_start_range_);
  swap(parking_depth_buffer_, other->parking_depth_buffer_);
  swap(roi_linesegment_min_angle_, other->roi_linesegment_min_angle_);
  swap(roi_linesegment_length_, other->roi_linesegment_length_);
  swap(perception_obstacle_filtering_distance_, other->perception_obstacle_filtering_distance_);
  swap(bound_width_change_ratio_uppper_limit_, other->bound_width_change_ratio_uppper_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSpaceRoiDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::OpenSpaceRoiDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceRoiDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceRoiDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
