// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_obstacle_decider_config.proto

#include "modules/planning/proto/navi_obstacle_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace planning {
class NaviObstacleDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NaviObstacleDeciderConfig> _instance;
} _NaviObstacleDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NaviObstacleDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::NaviObstacleDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NaviObstacleDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, min_nudge_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_nudge_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_allow_nudge_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, safe_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, nudge_allow_tolerance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, cycles_number_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, judge_dis_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, basis_dis_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, lateral_velocity_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, speed_decider_detect_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviObstacleDeciderConfig, max_keep_nudge_cycles_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  9,
  10,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::planning::NaviObstacleDeciderConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NaviObstacleDeciderConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9modules/planning/proto/navi_obstacle_d"
  "ecider_config.proto\022\017apollo.planning\"\210\003\n"
  "\031NaviObstacleDeciderConfig\022\037\n\022min_nudge_"
  "distance\030\001 \001(\001:\0030.2\022\037\n\022max_nudge_distanc"
  "e\030\002 \001(\001:\0031.2\022%\n\025max_allow_nudge_speed\030\003 "
  "\001(\001:\00616.667\022\032\n\rsafe_distance\030\004 \001(\001:\0030.2\022"
  "#\n\025nudge_allow_tolerance\030\005 \001(\001:\0040.05\022\030\n\r"
  "cycles_number\030\006 \001(\r:\0013\022\032\n\017judge_dis_coef"
  "f\030\007 \001(\001:\0012\022\033\n\017basis_dis_value\030\010 \001(\001:\00230\022"
  "#\n\026lateral_velocity_value\030\t \001(\001:\0030.5\022%\n\032"
  "speed_decider_detect_range\030\n \001(\001:\0011\022\"\n\025m"
  "ax_keep_nudge_cycles\030\013 \001(\r:\003100"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_sccs[1] = {
  &scc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto, "modules/planning/proto/navi_obstacle_decider_config.proto", 471,
  &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto, 1, file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void NaviObstacleDeciderConfig::InitAsDefaultInstance() {
}
class NaviObstacleDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviObstacleDeciderConfig>()._has_bits_);
  static void set_has_min_nudge_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_nudge_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_allow_nudge_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_safe_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nudge_allow_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cycles_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_judge_dis_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_basis_dis_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lateral_velocity_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed_decider_detect_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_keep_nudge_cycles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

NaviObstacleDeciderConfig::NaviObstacleDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviObstacleDeciderConfig)
}
NaviObstacleDeciderConfig::NaviObstacleDeciderConfig(const NaviObstacleDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_nudge_distance_, &from.min_nudge_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_decider_detect_range_) -
    reinterpret_cast<char*>(&min_nudge_distance_)) + sizeof(speed_decider_detect_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviObstacleDeciderConfig)
}

void NaviObstacleDeciderConfig::SharedCtor() {
  min_nudge_distance_ = 0.2;
  max_nudge_distance_ = 1.2;
  max_allow_nudge_speed_ = 16.667;
  safe_distance_ = 0.2;
  nudge_allow_tolerance_ = 0.05;
  judge_dis_coeff_ = 2;
  basis_dis_value_ = 30;
  cycles_number_ = 3u;
  max_keep_nudge_cycles_ = 100u;
  lateral_velocity_value_ = 0.5;
  speed_decider_detect_range_ = 1;
}

NaviObstacleDeciderConfig::~NaviObstacleDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviObstacleDeciderConfig)
  SharedDtor();
}

void NaviObstacleDeciderConfig::SharedDtor() {
}

void NaviObstacleDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NaviObstacleDeciderConfig& NaviObstacleDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NaviObstacleDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fobstacle_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void NaviObstacleDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviObstacleDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    min_nudge_distance_ = 0.2;
    max_nudge_distance_ = 1.2;
    max_allow_nudge_speed_ = 16.667;
    safe_distance_ = 0.2;
    nudge_allow_tolerance_ = 0.05;
    judge_dis_coeff_ = 2;
    basis_dis_value_ = 30;
    cycles_number_ = 3u;
  }
  if (cached_has_bits & 0x00000700u) {
    max_keep_nudge_cycles_ = 100u;
    lateral_velocity_value_ = 0.5;
    speed_decider_detect_range_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NaviObstacleDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_nudge_distance = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_nudge_distance(&has_bits);
          min_nudge_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_nudge_distance = 2 [default = 1.2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_nudge_distance(&has_bits);
          max_nudge_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_allow_nudge_speed = 3 [default = 16.667];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_allow_nudge_speed(&has_bits);
          max_allow_nudge_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double safe_distance = 4 [default = 0.2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_safe_distance(&has_bits);
          safe_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double nudge_allow_tolerance = 5 [default = 0.05];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_nudge_allow_tolerance(&has_bits);
          nudge_allow_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 cycles_number = 6 [default = 3];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cycles_number(&has_bits);
          cycles_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double judge_dis_coeff = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_judge_dis_coeff(&has_bits);
          judge_dis_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double basis_dis_value = 8 [default = 30];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_basis_dis_value(&has_bits);
          basis_dis_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_velocity_value = 9 [default = 0.5];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_lateral_velocity_value(&has_bits);
          lateral_velocity_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_decider_detect_range = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_speed_decider_detect_range(&has_bits);
          speed_decider_detect_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_keep_nudge_cycles(&has_bits);
          max_keep_nudge_cycles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaviObstacleDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviObstacleDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_nudge_distance = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_nudge_distance(), target);
  }

  // optional double max_nudge_distance = 2 [default = 1.2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_nudge_distance(), target);
  }

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_allow_nudge_speed(), target);
  }

  // optional double safe_distance = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_safe_distance(), target);
  }

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_nudge_allow_tolerance(), target);
  }

  // optional uint32 cycles_number = 6 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cycles_number(), target);
  }

  // optional double judge_dis_coeff = 7 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_judge_dis_coeff(), target);
  }

  // optional double basis_dis_value = 8 [default = 30];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_basis_dis_value(), target);
  }

  // optional double lateral_velocity_value = 9 [default = 0.5];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_lateral_velocity_value(), target);
  }

  // optional double speed_decider_detect_range = 10 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_speed_decider_detect_range(), target);
  }

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_keep_nudge_cycles(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviObstacleDeciderConfig)
  return target;
}

size_t NaviObstacleDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviObstacleDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double min_nudge_distance = 1 [default = 0.2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_nudge_distance = 2 [default = 1.2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_allow_nudge_speed = 3 [default = 16.667];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance = 4 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double nudge_allow_tolerance = 5 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double judge_dis_coeff = 7 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double basis_dis_value = 8 [default = 30];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 cycles_number = 6 [default = 3];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cycles_number());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_keep_nudge_cycles());
    }

    // optional double lateral_velocity_value = 9 [default = 0.5];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed_decider_detect_range = 10 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaviObstacleDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviObstacleDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviObstacleDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NaviObstacleDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviObstacleDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviObstacleDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviObstacleDeciderConfig::MergeFrom(const NaviObstacleDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviObstacleDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_nudge_distance_ = from.min_nudge_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_nudge_distance_ = from.max_nudge_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_allow_nudge_speed_ = from.max_allow_nudge_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      safe_distance_ = from.safe_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      nudge_allow_tolerance_ = from.nudge_allow_tolerance_;
    }
    if (cached_has_bits & 0x00000020u) {
      judge_dis_coeff_ = from.judge_dis_coeff_;
    }
    if (cached_has_bits & 0x00000040u) {
      basis_dis_value_ = from.basis_dis_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      cycles_number_ = from.cycles_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      max_keep_nudge_cycles_ = from.max_keep_nudge_cycles_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_velocity_value_ = from.lateral_velocity_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_decider_detect_range_ = from.speed_decider_detect_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviObstacleDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviObstacleDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviObstacleDeciderConfig::CopyFrom(const NaviObstacleDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviObstacleDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviObstacleDeciderConfig::IsInitialized() const {
  return true;
}

void NaviObstacleDeciderConfig::InternalSwap(NaviObstacleDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_nudge_distance_, other->min_nudge_distance_);
  swap(max_nudge_distance_, other->max_nudge_distance_);
  swap(max_allow_nudge_speed_, other->max_allow_nudge_speed_);
  swap(safe_distance_, other->safe_distance_);
  swap(nudge_allow_tolerance_, other->nudge_allow_tolerance_);
  swap(judge_dis_coeff_, other->judge_dis_coeff_);
  swap(basis_dis_value_, other->basis_dis_value_);
  swap(cycles_number_, other->cycles_number_);
  swap(max_keep_nudge_cycles_, other->max_keep_nudge_cycles_);
  swap(lateral_velocity_value_, other->lateral_velocity_value_);
  swap(speed_decider_detect_range_, other->speed_decider_detect_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviObstacleDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviObstacleDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviObstacleDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NaviObstacleDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
