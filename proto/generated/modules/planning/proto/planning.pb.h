// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/common/proto/drive_state.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/map/proto/map_id.pb.h"
#include "modules/planning/proto/decision.pb.h"
#include "modules/planning/proto/planning_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto;
namespace apollo {
namespace planning {
class ADCSignals;
class ADCSignalsDefaultTypeInternal;
extern ADCSignalsDefaultTypeInternal _ADCSignals_default_instance_;
class ADCTrajectory;
class ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
class ADCTrajectory_CriticalRegion;
class ADCTrajectory_CriticalRegionDefaultTypeInternal;
extern ADCTrajectory_CriticalRegionDefaultTypeInternal _ADCTrajectory_CriticalRegion_default_instance_;
class EStop;
class EStopDefaultTypeInternal;
extern EStopDefaultTypeInternal _EStop_default_instance_;
class LatencyStats;
class LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class RSSInfo;
class RSSInfoDefaultTypeInternal;
extern RSSInfoDefaultTypeInternal _RSSInfo_default_instance_;
class TaskStats;
class TaskStatsDefaultTypeInternal;
extern TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::ADCSignals* Arena::CreateMaybeMessage<::apollo::planning::ADCSignals>(Arena*);
template<> ::apollo::planning::ADCTrajectory* Arena::CreateMaybeMessage<::apollo::planning::ADCTrajectory>(Arena*);
template<> ::apollo::planning::ADCTrajectory_CriticalRegion* Arena::CreateMaybeMessage<::apollo::planning::ADCTrajectory_CriticalRegion>(Arena*);
template<> ::apollo::planning::EStop* Arena::CreateMaybeMessage<::apollo::planning::EStop>(Arena*);
template<> ::apollo::planning::LatencyStats* Arena::CreateMaybeMessage<::apollo::planning::LatencyStats>(Arena*);
template<> ::apollo::planning::RSSInfo* Arena::CreateMaybeMessage<::apollo::planning::RSSInfo>(Arena*);
template<> ::apollo::planning::TaskStats* Arena::CreateMaybeMessage<::apollo::planning::TaskStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum ADCSignals_SignalType : int {
  ADCSignals_SignalType_LEFT_TURN = 1,
  ADCSignals_SignalType_RIGHT_TURN = 2,
  ADCSignals_SignalType_LOW_BEAM_LIGHT = 3,
  ADCSignals_SignalType_HIGH_BEAM_LIGHT = 4,
  ADCSignals_SignalType_FOG_LIGHT = 5,
  ADCSignals_SignalType_EMERGENCY_LIGHT = 6
};
bool ADCSignals_SignalType_IsValid(int value);
constexpr ADCSignals_SignalType ADCSignals_SignalType_SignalType_MIN = ADCSignals_SignalType_LEFT_TURN;
constexpr ADCSignals_SignalType ADCSignals_SignalType_SignalType_MAX = ADCSignals_SignalType_EMERGENCY_LIGHT;
constexpr int ADCSignals_SignalType_SignalType_ARRAYSIZE = ADCSignals_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCSignals_SignalType_descriptor();
template<typename T>
inline const std::string& ADCSignals_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCSignals_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCSignals_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCSignals_SignalType_descriptor(), enum_t_value);
}
inline bool ADCSignals_SignalType_Parse(
    const std::string& name, ADCSignals_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCSignals_SignalType>(
    ADCSignals_SignalType_descriptor(), name, value);
}
enum ADCTrajectory_RightOfWayStatus : int {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1
};
bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_PROTECTED;
constexpr int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor();
template<typename T>
inline const std::string& ADCTrajectory_RightOfWayStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCTrajectory_RightOfWayStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCTrajectory_RightOfWayStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCTrajectory_RightOfWayStatus_descriptor(), enum_t_value);
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(
    const std::string& name, ADCTrajectory_RightOfWayStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
    ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
enum ADCTrajectory_TrajectoryType : int {
  ADCTrajectory_TrajectoryType_UNKNOWN = 0,
  ADCTrajectory_TrajectoryType_NORMAL = 1,
  ADCTrajectory_TrajectoryType_PATH_FALLBACK = 2,
  ADCTrajectory_TrajectoryType_SPEED_FALLBACK = 3
};
bool ADCTrajectory_TrajectoryType_IsValid(int value);
constexpr ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MIN = ADCTrajectory_TrajectoryType_UNKNOWN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MAX = ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
constexpr int ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE = ADCTrajectory_TrajectoryType_TrajectoryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor();
template<typename T>
inline const std::string& ADCTrajectory_TrajectoryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCTrajectory_TrajectoryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCTrajectory_TrajectoryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCTrajectory_TrajectoryType_descriptor(), enum_t_value);
}
inline bool ADCTrajectory_TrajectoryType_Parse(
    const std::string& name, ADCTrajectory_TrajectoryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCTrajectory_TrajectoryType>(
    ADCTrajectory_TrajectoryType_descriptor(), name, value);
}
// ===================================================================

class ADCSignals :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCSignals) */ {
 public:
  ADCSignals();
  virtual ~ADCSignals();

  ADCSignals(const ADCSignals& from);
  ADCSignals(ADCSignals&& from) noexcept
    : ADCSignals() {
    *this = ::std::move(from);
  }

  inline ADCSignals& operator=(const ADCSignals& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCSignals& operator=(ADCSignals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADCSignals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADCSignals* internal_default_instance() {
    return reinterpret_cast<const ADCSignals*>(
               &_ADCSignals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADCSignals& a, ADCSignals& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCSignals* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ADCSignals* New() const final {
    return CreateMaybeMessage<ADCSignals>(nullptr);
  }

  ADCSignals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADCSignals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADCSignals& from);
  void MergeFrom(const ADCSignals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCSignals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCSignals";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ADCSignals_SignalType SignalType;
  static constexpr SignalType LEFT_TURN =
    ADCSignals_SignalType_LEFT_TURN;
  static constexpr SignalType RIGHT_TURN =
    ADCSignals_SignalType_RIGHT_TURN;
  static constexpr SignalType LOW_BEAM_LIGHT =
    ADCSignals_SignalType_LOW_BEAM_LIGHT;
  static constexpr SignalType HIGH_BEAM_LIGHT =
    ADCSignals_SignalType_HIGH_BEAM_LIGHT;
  static constexpr SignalType FOG_LIGHT =
    ADCSignals_SignalType_FOG_LIGHT;
  static constexpr SignalType EMERGENCY_LIGHT =
    ADCSignals_SignalType_EMERGENCY_LIGHT;
  static inline bool SignalType_IsValid(int value) {
    return ADCSignals_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    ADCSignals_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    ADCSignals_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    ADCSignals_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return ADCSignals_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return ADCSignals_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(const std::string& name,
      SignalType* value) {
    return ADCSignals_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalFieldNumber = 1,
  };
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  int signal_size() const;
  private:
  int _internal_signal_size() const;
  public:
  void clear_signal();
  private:
  ::apollo::planning::ADCSignals_SignalType _internal_signal(int index) const;
  void _internal_add_signal(::apollo::planning::ADCSignals_SignalType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_signal();
  public:
  ::apollo::planning::ADCSignals_SignalType signal(int index) const;
  void set_signal(int index, ::apollo::planning::ADCSignals_SignalType value);
  void add_signal(::apollo::planning::ADCSignals_SignalType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& signal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_signal();

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCSignals)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> signal_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class EStop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EStop) */ {
 public:
  EStop();
  virtual ~EStop();

  EStop(const EStop& from);
  EStop(EStop&& from) noexcept
    : EStop() {
    *this = ::std::move(from);
  }

  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline EStop& operator=(EStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EStop* internal_default_instance() {
    return reinterpret_cast<const EStop*>(
               &_EStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EStop& a, EStop& b) {
    a.Swap(&b);
  }
  inline void Swap(EStop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EStop* New() const final {
    return CreateMaybeMessage<EStop>(nullptr);
  }

  EStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EStop& from);
  void MergeFrom(const EStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.EStop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kIsEstopFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional bool is_estop = 1;
  bool has_is_estop() const;
  private:
  bool _internal_has_is_estop() const;
  public:
  void clear_is_estop();
  bool is_estop() const;
  void set_is_estop(bool value);
  private:
  bool _internal_is_estop() const;
  void _internal_set_is_estop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.EStop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool is_estop_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class TaskStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TaskStats) */ {
 public:
  TaskStats();
  virtual ~TaskStats();

  TaskStats(const TaskStats& from);
  TaskStats(TaskStats&& from) noexcept
    : TaskStats() {
    *this = ::std::move(from);
  }

  inline TaskStats& operator=(const TaskStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStats& operator=(TaskStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskStats* internal_default_instance() {
    return reinterpret_cast<const TaskStats*>(
               &_TaskStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskStats& a, TaskStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskStats* New() const final {
    return CreateMaybeMessage<TaskStats>(nullptr);
  }

  TaskStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskStats& from);
  void MergeFrom(const TaskStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.TaskStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeMsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double time_ms = 2;
  bool has_time_ms() const;
  private:
  bool _internal_has_time_ms() const;
  public:
  void clear_time_ms();
  double time_ms() const;
  void set_time_ms(double value);
  private:
  double _internal_time_ms() const;
  void _internal_set_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.TaskStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double time_ms_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class LatencyStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);
  LatencyStats(LatencyStats&& from) noexcept
    : LatencyStats() {
    *this = ::std::move(from);
  }

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LatencyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
               &_LatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LatencyStats& a, LatencyStats& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const final {
    return CreateMaybeMessage<LatencyStats>(nullptr);
  }

  LatencyStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LatencyStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LatencyStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskStatsFieldNumber = 2,
    kTotalTimeMsFieldNumber = 1,
    kInitFrameTimeMsFieldNumber = 3,
  };
  // repeated .apollo.planning.TaskStats task_stats = 2;
  int task_stats_size() const;
  private:
  int _internal_task_stats_size() const;
  public:
  void clear_task_stats();
  ::apollo::planning::TaskStats* mutable_task_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >*
      mutable_task_stats();
  private:
  const ::apollo::planning::TaskStats& _internal_task_stats(int index) const;
  ::apollo::planning::TaskStats* _internal_add_task_stats();
  public:
  const ::apollo::planning::TaskStats& task_stats(int index) const;
  ::apollo::planning::TaskStats* add_task_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >&
      task_stats() const;

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  private:
  bool _internal_has_total_time_ms() const;
  public:
  void clear_total_time_ms();
  double total_time_ms() const;
  void set_total_time_ms(double value);
  private:
  double _internal_total_time_ms() const;
  void _internal_set_total_time_ms(double value);
  public:

  // optional double init_frame_time_ms = 3;
  bool has_init_frame_time_ms() const;
  private:
  bool _internal_has_init_frame_time_ms() const;
  public:
  void clear_init_frame_time_ms();
  double init_frame_time_ms() const;
  void set_init_frame_time_ms(double value);
  private:
  double _internal_init_frame_time_ms() const;
  void _internal_set_init_frame_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LatencyStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats > task_stats_;
  double total_time_ms_;
  double init_frame_time_ms_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class RSSInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RSSInfo) */ {
 public:
  RSSInfo();
  virtual ~RSSInfo();

  RSSInfo(const RSSInfo& from);
  RSSInfo(RSSInfo&& from) noexcept
    : RSSInfo() {
    *this = ::std::move(from);
  }

  inline RSSInfo& operator=(const RSSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSSInfo& operator=(RSSInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RSSInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RSSInfo* internal_default_instance() {
    return reinterpret_cast<const RSSInfo*>(
               &_RSSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RSSInfo& a, RSSInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RSSInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RSSInfo* New() const final {
    return CreateMaybeMessage<RSSInfo>(nullptr);
  }

  RSSInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RSSInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RSSInfo& from);
  void MergeFrom(const RSSInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSSInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.RSSInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurDistLonFieldNumber = 2,
    kRssSafeDistLonFieldNumber = 3,
    kAccLonRangeMinimumFieldNumber = 4,
    kAccLonRangeMaximumFieldNumber = 5,
    kAccLatLeftRangeMinimumFieldNumber = 6,
    kAccLatLeftRangeMaximumFieldNumber = 7,
    kAccLatRightRangeMinimumFieldNumber = 8,
    kAccLatRightRangeMaximumFieldNumber = 9,
    kIsRssSafeFieldNumber = 1,
  };
  // optional double cur_dist_lon = 2;
  bool has_cur_dist_lon() const;
  private:
  bool _internal_has_cur_dist_lon() const;
  public:
  void clear_cur_dist_lon();
  double cur_dist_lon() const;
  void set_cur_dist_lon(double value);
  private:
  double _internal_cur_dist_lon() const;
  void _internal_set_cur_dist_lon(double value);
  public:

  // optional double rss_safe_dist_lon = 3;
  bool has_rss_safe_dist_lon() const;
  private:
  bool _internal_has_rss_safe_dist_lon() const;
  public:
  void clear_rss_safe_dist_lon();
  double rss_safe_dist_lon() const;
  void set_rss_safe_dist_lon(double value);
  private:
  double _internal_rss_safe_dist_lon() const;
  void _internal_set_rss_safe_dist_lon(double value);
  public:

  // optional double acc_lon_range_minimum = 4;
  bool has_acc_lon_range_minimum() const;
  private:
  bool _internal_has_acc_lon_range_minimum() const;
  public:
  void clear_acc_lon_range_minimum();
  double acc_lon_range_minimum() const;
  void set_acc_lon_range_minimum(double value);
  private:
  double _internal_acc_lon_range_minimum() const;
  void _internal_set_acc_lon_range_minimum(double value);
  public:

  // optional double acc_lon_range_maximum = 5;
  bool has_acc_lon_range_maximum() const;
  private:
  bool _internal_has_acc_lon_range_maximum() const;
  public:
  void clear_acc_lon_range_maximum();
  double acc_lon_range_maximum() const;
  void set_acc_lon_range_maximum(double value);
  private:
  double _internal_acc_lon_range_maximum() const;
  void _internal_set_acc_lon_range_maximum(double value);
  public:

  // optional double acc_lat_left_range_minimum = 6;
  bool has_acc_lat_left_range_minimum() const;
  private:
  bool _internal_has_acc_lat_left_range_minimum() const;
  public:
  void clear_acc_lat_left_range_minimum();
  double acc_lat_left_range_minimum() const;
  void set_acc_lat_left_range_minimum(double value);
  private:
  double _internal_acc_lat_left_range_minimum() const;
  void _internal_set_acc_lat_left_range_minimum(double value);
  public:

  // optional double acc_lat_left_range_maximum = 7;
  bool has_acc_lat_left_range_maximum() const;
  private:
  bool _internal_has_acc_lat_left_range_maximum() const;
  public:
  void clear_acc_lat_left_range_maximum();
  double acc_lat_left_range_maximum() const;
  void set_acc_lat_left_range_maximum(double value);
  private:
  double _internal_acc_lat_left_range_maximum() const;
  void _internal_set_acc_lat_left_range_maximum(double value);
  public:

  // optional double acc_lat_right_range_minimum = 8;
  bool has_acc_lat_right_range_minimum() const;
  private:
  bool _internal_has_acc_lat_right_range_minimum() const;
  public:
  void clear_acc_lat_right_range_minimum();
  double acc_lat_right_range_minimum() const;
  void set_acc_lat_right_range_minimum(double value);
  private:
  double _internal_acc_lat_right_range_minimum() const;
  void _internal_set_acc_lat_right_range_minimum(double value);
  public:

  // optional double acc_lat_right_range_maximum = 9;
  bool has_acc_lat_right_range_maximum() const;
  private:
  bool _internal_has_acc_lat_right_range_maximum() const;
  public:
  void clear_acc_lat_right_range_maximum();
  double acc_lat_right_range_maximum() const;
  void set_acc_lat_right_range_maximum(double value);
  private:
  double _internal_acc_lat_right_range_maximum() const;
  void _internal_set_acc_lat_right_range_maximum(double value);
  public:

  // optional bool is_rss_safe = 1;
  bool has_is_rss_safe() const;
  private:
  bool _internal_has_is_rss_safe() const;
  public:
  void clear_is_rss_safe();
  bool is_rss_safe() const;
  void set_is_rss_safe(bool value);
  private:
  bool _internal_is_rss_safe() const;
  void _internal_set_is_rss_safe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.RSSInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double cur_dist_lon_;
  double rss_safe_dist_lon_;
  double acc_lon_range_minimum_;
  double acc_lon_range_maximum_;
  double acc_lat_left_range_minimum_;
  double acc_lat_left_range_maximum_;
  double acc_lat_right_range_minimum_;
  double acc_lat_right_range_maximum_;
  bool is_rss_safe_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory_CriticalRegion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory.CriticalRegion) */ {
 public:
  ADCTrajectory_CriticalRegion();
  virtual ~ADCTrajectory_CriticalRegion();

  ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from);
  ADCTrajectory_CriticalRegion(ADCTrajectory_CriticalRegion&& from) noexcept
    : ADCTrajectory_CriticalRegion() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory_CriticalRegion& operator=(const ADCTrajectory_CriticalRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory_CriticalRegion& operator=(ADCTrajectory_CriticalRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADCTrajectory_CriticalRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADCTrajectory_CriticalRegion* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory_CriticalRegion*>(
               &_ADCTrajectory_CriticalRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ADCTrajectory_CriticalRegion& a, ADCTrajectory_CriticalRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCTrajectory_CriticalRegion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ADCTrajectory_CriticalRegion* New() const final {
    return CreateMaybeMessage<ADCTrajectory_CriticalRegion>(nullptr);
  }

  ADCTrajectory_CriticalRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADCTrajectory_CriticalRegion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADCTrajectory_CriticalRegion& from);
  void MergeFrom(const ADCTrajectory_CriticalRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectory_CriticalRegion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCTrajectory.CriticalRegion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
  };
  // repeated .apollo.common.Polygon region = 1;
  int region_size() const;
  private:
  int _internal_region_size() const;
  public:
  void clear_region();
  ::apollo::common::Polygon* mutable_region(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >*
      mutable_region();
  private:
  const ::apollo::common::Polygon& _internal_region(int index) const;
  ::apollo::common::Polygon* _internal_add_region();
  public:
  const ::apollo::common::Polygon& region(int index) const;
  ::apollo::common::Polygon* add_region();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >&
      region() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory.CriticalRegion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon > region_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory) */ {
 public:
  ADCTrajectory();
  virtual ~ADCTrajectory();

  ADCTrajectory(const ADCTrajectory& from);
  ADCTrajectory(ADCTrajectory&& from) noexcept
    : ADCTrajectory() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory& operator=(ADCTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ADCTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADCTrajectory* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory*>(
               &_ADCTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ADCTrajectory& a, ADCTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCTrajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ADCTrajectory* New() const final {
    return CreateMaybeMessage<ADCTrajectory>(nullptr);
  }

  ADCTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADCTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADCTrajectory& from);
  void MergeFrom(const ADCTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCTrajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ADCTrajectory_CriticalRegion CriticalRegion;

  typedef ADCTrajectory_RightOfWayStatus RightOfWayStatus;
  static constexpr RightOfWayStatus UNPROTECTED =
    ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static constexpr RightOfWayStatus PROTECTED =
    ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static constexpr RightOfWayStatus RightOfWayStatus_MIN =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static constexpr RightOfWayStatus RightOfWayStatus_MAX =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static constexpr int RightOfWayStatus_ARRAYSIZE =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& RightOfWayStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RightOfWayStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RightOfWayStatus_Name.");
    return ADCTrajectory_RightOfWayStatus_Name(enum_t_value);
  }
  static inline bool RightOfWayStatus_Parse(const std::string& name,
      RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }

  typedef ADCTrajectory_TrajectoryType TrajectoryType;
  static constexpr TrajectoryType UNKNOWN =
    ADCTrajectory_TrajectoryType_UNKNOWN;
  static constexpr TrajectoryType NORMAL =
    ADCTrajectory_TrajectoryType_NORMAL;
  static constexpr TrajectoryType PATH_FALLBACK =
    ADCTrajectory_TrajectoryType_PATH_FALLBACK;
  static constexpr TrajectoryType SPEED_FALLBACK =
    ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
  static inline bool TrajectoryType_IsValid(int value) {
    return ADCTrajectory_TrajectoryType_IsValid(value);
  }
  static constexpr TrajectoryType TrajectoryType_MIN =
    ADCTrajectory_TrajectoryType_TrajectoryType_MIN;
  static constexpr TrajectoryType TrajectoryType_MAX =
    ADCTrajectory_TrajectoryType_TrajectoryType_MAX;
  static constexpr int TrajectoryType_ARRAYSIZE =
    ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrajectoryType_descriptor() {
    return ADCTrajectory_TrajectoryType_descriptor();
  }
  template<typename T>
  static inline const std::string& TrajectoryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrajectoryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrajectoryType_Name.");
    return ADCTrajectory_TrajectoryType_Name(enum_t_value);
  }
  static inline bool TrajectoryType_Parse(const std::string& name,
      TrajectoryType* value) {
    return ADCTrajectory_TrajectoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 12,
    kPathPointFieldNumber = 13,
    kLaneIdFieldNumber = 18,
    kReplanReasonFieldNumber = 22,
    kHeaderFieldNumber = 1,
    kEstopFieldNumber = 6,
    kDebugFieldNumber = 8,
    kDecisionFieldNumber = 14,
    kLatencyStatsFieldNumber = 15,
    kRoutingHeaderFieldNumber = 16,
    kEngageAdviceFieldNumber = 19,
    kCriticalRegionFieldNumber = 20,
    kRssInfoFieldNumber = 100,
    kTotalPathLengthFieldNumber = 2,
    kTotalPathTimeFieldNumber = 3,
    kIsReplanFieldNumber = 9,
    kGearFieldNumber = 10,
    kRightOfWayStatusFieldNumber = 17,
    kTrajectoryTypeFieldNumber = 21,
  };
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  private:
  const ::apollo::common::TrajectoryPoint& _internal_trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* _internal_add_trajectory_point();
  public:
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // repeated .apollo.common.PathPoint path_point = 13;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;
  public:
  void clear_path_point();
  ::apollo::common::PathPoint* mutable_path_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >*
      mutable_path_point();
  private:
  const ::apollo::common::PathPoint& _internal_path_point(int index) const;
  ::apollo::common::PathPoint* _internal_add_path_point();
  public:
  const ::apollo::common::PathPoint& path_point(int index) const;
  ::apollo::common::PathPoint* add_path_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >&
      path_point() const;

  // repeated .apollo.hdmap.Id lane_id = 18;
  int lane_id_size() const;
  private:
  int _internal_lane_id_size() const;
  public:
  void clear_lane_id();
  ::apollo::hdmap::Id* mutable_lane_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_lane_id();
  private:
  const ::apollo::hdmap::Id& _internal_lane_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_lane_id();
  public:
  const ::apollo::hdmap::Id& lane_id(int index) const;
  ::apollo::hdmap::Id* add_lane_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      lane_id() const;

  // optional string replan_reason = 22;
  bool has_replan_reason() const;
  private:
  bool _internal_has_replan_reason() const;
  public:
  void clear_replan_reason();
  const std::string& replan_reason() const;
  void set_replan_reason(const std::string& value);
  void set_replan_reason(std::string&& value);
  void set_replan_reason(const char* value);
  void set_replan_reason(const char* value, size_t size);
  std::string* mutable_replan_reason();
  std::string* release_replan_reason();
  void set_allocated_replan_reason(std::string* replan_reason);
  private:
  const std::string& _internal_replan_reason() const;
  void _internal_set_replan_reason(const std::string& value);
  std::string* _internal_mutable_replan_reason();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.planning.EStop estop = 6;
  bool has_estop() const;
  private:
  bool _internal_has_estop() const;
  public:
  void clear_estop();
  const ::apollo::planning::EStop& estop() const;
  ::apollo::planning::EStop* release_estop();
  ::apollo::planning::EStop* mutable_estop();
  void set_allocated_estop(::apollo::planning::EStop* estop);
  private:
  const ::apollo::planning::EStop& _internal_estop() const;
  ::apollo::planning::EStop* _internal_mutable_estop();
  public:

  // optional .apollo.planning_internal.Debug debug = 8;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::apollo::planning_internal::Debug& debug() const;
  ::apollo::planning_internal::Debug* release_debug();
  ::apollo::planning_internal::Debug* mutable_debug();
  void set_allocated_debug(::apollo::planning_internal::Debug* debug);
  private:
  const ::apollo::planning_internal::Debug& _internal_debug() const;
  ::apollo::planning_internal::Debug* _internal_mutable_debug();
  public:

  // optional .apollo.planning.DecisionResult decision = 14;
  bool has_decision() const;
  private:
  bool _internal_has_decision() const;
  public:
  void clear_decision();
  const ::apollo::planning::DecisionResult& decision() const;
  ::apollo::planning::DecisionResult* release_decision();
  ::apollo::planning::DecisionResult* mutable_decision();
  void set_allocated_decision(::apollo::planning::DecisionResult* decision);
  private:
  const ::apollo::planning::DecisionResult& _internal_decision() const;
  ::apollo::planning::DecisionResult* _internal_mutable_decision();
  public:

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  bool has_latency_stats() const;
  private:
  bool _internal_has_latency_stats() const;
  public:
  void clear_latency_stats();
  const ::apollo::planning::LatencyStats& latency_stats() const;
  ::apollo::planning::LatencyStats* release_latency_stats();
  ::apollo::planning::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats);
  private:
  const ::apollo::planning::LatencyStats& _internal_latency_stats() const;
  ::apollo::planning::LatencyStats* _internal_mutable_latency_stats();
  public:

  // optional .apollo.common.Header routing_header = 16;
  bool has_routing_header() const;
  private:
  bool _internal_has_routing_header() const;
  public:
  void clear_routing_header();
  const ::apollo::common::Header& routing_header() const;
  ::apollo::common::Header* release_routing_header();
  ::apollo::common::Header* mutable_routing_header();
  void set_allocated_routing_header(::apollo::common::Header* routing_header);
  private:
  const ::apollo::common::Header& _internal_routing_header() const;
  ::apollo::common::Header* _internal_mutable_routing_header();
  public:

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  bool has_engage_advice() const;
  private:
  bool _internal_has_engage_advice() const;
  public:
  void clear_engage_advice();
  const ::apollo::common::EngageAdvice& engage_advice() const;
  ::apollo::common::EngageAdvice* release_engage_advice();
  ::apollo::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice);
  private:
  const ::apollo::common::EngageAdvice& _internal_engage_advice() const;
  ::apollo::common::EngageAdvice* _internal_mutable_engage_advice();
  public:

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  bool has_critical_region() const;
  private:
  bool _internal_has_critical_region() const;
  public:
  void clear_critical_region();
  const ::apollo::planning::ADCTrajectory_CriticalRegion& critical_region() const;
  ::apollo::planning::ADCTrajectory_CriticalRegion* release_critical_region();
  ::apollo::planning::ADCTrajectory_CriticalRegion* mutable_critical_region();
  void set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region);
  private:
  const ::apollo::planning::ADCTrajectory_CriticalRegion& _internal_critical_region() const;
  ::apollo::planning::ADCTrajectory_CriticalRegion* _internal_mutable_critical_region();
  public:

  // optional .apollo.planning.RSSInfo rss_info = 100;
  bool has_rss_info() const;
  private:
  bool _internal_has_rss_info() const;
  public:
  void clear_rss_info();
  const ::apollo::planning::RSSInfo& rss_info() const;
  ::apollo::planning::RSSInfo* release_rss_info();
  ::apollo::planning::RSSInfo* mutable_rss_info();
  void set_allocated_rss_info(::apollo::planning::RSSInfo* rss_info);
  private:
  const ::apollo::planning::RSSInfo& _internal_rss_info() const;
  ::apollo::planning::RSSInfo* _internal_mutable_rss_info();
  public:

  // optional double total_path_length = 2;
  bool has_total_path_length() const;
  private:
  bool _internal_has_total_path_length() const;
  public:
  void clear_total_path_length();
  double total_path_length() const;
  void set_total_path_length(double value);
  private:
  double _internal_total_path_length() const;
  void _internal_set_total_path_length(double value);
  public:

  // optional double total_path_time = 3;
  bool has_total_path_time() const;
  private:
  bool _internal_has_total_path_time() const;
  public:
  void clear_total_path_time();
  double total_path_time() const;
  void set_total_path_time(double value);
  private:
  double _internal_total_path_time() const;
  void _internal_set_total_path_time(double value);
  public:

  // optional bool is_replan = 9 [default = false];
  bool has_is_replan() const;
  private:
  bool _internal_has_is_replan() const;
  public:
  void clear_is_replan();
  bool is_replan() const;
  void set_is_replan(bool value);
  private:
  bool _internal_is_replan() const;
  void _internal_set_is_replan(bool value);
  public:

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  bool has_gear() const;
  private:
  bool _internal_has_gear() const;
  public:
  void clear_gear();
  ::apollo::canbus::Chassis_GearPosition gear() const;
  void set_gear(::apollo::canbus::Chassis_GearPosition value);
  private:
  ::apollo::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::apollo::canbus::Chassis_GearPosition value);
  public:

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  bool has_right_of_way_status() const;
  private:
  bool _internal_has_right_of_way_status() const;
  public:
  void clear_right_of_way_status();
  ::apollo::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value);
  private:
  ::apollo::planning::ADCTrajectory_RightOfWayStatus _internal_right_of_way_status() const;
  void _internal_set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value);
  public:

  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  bool has_trajectory_type() const;
  private:
  bool _internal_has_trajectory_type() const;
  public:
  void clear_trajectory_type();
  ::apollo::planning::ADCTrajectory_TrajectoryType trajectory_type() const;
  void set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value);
  private:
  ::apollo::planning::ADCTrajectory_TrajectoryType _internal_trajectory_type() const;
  void _internal_set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint > path_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > lane_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replan_reason_;
  ::apollo::common::Header* header_;
  ::apollo::planning::EStop* estop_;
  ::apollo::planning_internal::Debug* debug_;
  ::apollo::planning::DecisionResult* decision_;
  ::apollo::planning::LatencyStats* latency_stats_;
  ::apollo::common::Header* routing_header_;
  ::apollo::common::EngageAdvice* engage_advice_;
  ::apollo::planning::ADCTrajectory_CriticalRegion* critical_region_;
  ::apollo::planning::RSSInfo* rss_info_;
  double total_path_length_;
  double total_path_time_;
  bool is_replan_;
  int gear_;
  int right_of_way_status_;
  int trajectory_type_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
inline int ADCSignals::_internal_signal_size() const {
  return signal_.size();
}
inline int ADCSignals::signal_size() const {
  return _internal_signal_size();
}
inline void ADCSignals::clear_signal() {
  signal_.Clear();
}
inline ::apollo::planning::ADCSignals_SignalType ADCSignals::_internal_signal(int index) const {
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(signal_.Get(index));
}
inline ::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return _internal_signal(index);
}
inline void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
inline void ADCSignals::_internal_add_signal(::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Add(value);
}
inline void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
  _internal_add_signal(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ADCSignals::_internal_mutable_signal() {
  return &signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return _internal_mutable_signal();
}

// -------------------------------------------------------------------

// EStop

// optional bool is_estop = 1;
inline bool EStop::_internal_has_is_estop() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EStop::has_is_estop() const {
  return _internal_has_is_estop();
}
inline void EStop::clear_is_estop() {
  is_estop_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EStop::_internal_is_estop() const {
  return is_estop_;
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return _internal_is_estop();
}
inline void EStop::_internal_set_is_estop(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_estop_ = value;
}
inline void EStop::set_is_estop(bool value) {
  _internal_set_is_estop(value);
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

// optional string reason = 2;
inline bool EStop::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EStop::has_reason() const {
  return _internal_has_reason();
}
inline void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.reason)
  return _internal_reason();
}
inline void EStop::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.reason)
}
inline std::string* EStop::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.EStop.reason)
  return _internal_mutable_reason();
}
inline const std::string& EStop::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void EStop::_internal_set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EStop::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.EStop.reason)
}
inline void EStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.EStop.reason)
}
inline void EStop::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.EStop.reason)
}
inline std::string* EStop::_internal_mutable_reason() {
  _has_bits_[0] |= 0x00000001u;
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.EStop.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EStop::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EStop.reason)
}

// -------------------------------------------------------------------

// TaskStats

// optional string name = 1;
inline bool TaskStats::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskStats::has_name() const {
  return _internal_has_name();
}
inline void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.name)
  return _internal_name();
}
inline void TaskStats::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.name)
}
inline std::string* TaskStats::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskStats.name)
  return _internal_mutable_name();
}
inline const std::string& TaskStats::_internal_name() const {
  return name_.GetNoArena();
}
inline void TaskStats::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TaskStats::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.TaskStats.name)
}
inline void TaskStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.TaskStats.name)
}
inline void TaskStats::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.TaskStats.name)
}
inline std::string* TaskStats::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskStats.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStats::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskStats.name)
}

// optional double time_ms = 2;
inline bool TaskStats::_internal_has_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskStats::has_time_ms() const {
  return _internal_has_time_ms();
}
inline void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TaskStats::_internal_time_ms() const {
  return time_ms_;
}
inline double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.time_ms)
  return _internal_time_ms();
}
inline void TaskStats::_internal_set_time_ms(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ms_ = value;
}
inline void TaskStats::set_time_ms(double value) {
  _internal_set_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.time_ms)
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::_internal_has_total_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyStats::has_total_time_ms() const {
  return _internal_has_total_time_ms();
}
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LatencyStats::_internal_total_time_ms() const {
  return total_time_ms_;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.total_time_ms)
  return _internal_total_time_ms();
}
inline void LatencyStats::_internal_set_total_time_ms(double value) {
  _has_bits_[0] |= 0x00000001u;
  total_time_ms_ = value;
}
inline void LatencyStats::set_total_time_ms(double value) {
  _internal_set_total_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.total_time_ms)
}

// repeated .apollo.planning.TaskStats task_stats = 2;
inline int LatencyStats::_internal_task_stats_size() const {
  return task_stats_.size();
}
inline int LatencyStats::task_stats_size() const {
  return _internal_task_stats_size();
}
inline void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
inline ::apollo::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.LatencyStats.task_stats)
  return &task_stats_;
}
inline const ::apollo::planning::TaskStats& LatencyStats::_internal_task_stats(int index) const {
  return task_stats_.Get(index);
}
inline const ::apollo::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.task_stats)
  return _internal_task_stats(index);
}
inline ::apollo::planning::TaskStats* LatencyStats::_internal_add_task_stats() {
  return task_stats_.Add();
}
inline ::apollo::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:apollo.planning.LatencyStats.task_stats)
  return _internal_add_task_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:apollo.planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
inline bool LatencyStats::_internal_has_init_frame_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatencyStats::has_init_frame_time_ms() const {
  return _internal_has_init_frame_time_ms();
}
inline void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LatencyStats::_internal_init_frame_time_ms() const {
  return init_frame_time_ms_;
}
inline double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.init_frame_time_ms)
  return _internal_init_frame_time_ms();
}
inline void LatencyStats::_internal_set_init_frame_time_ms(double value) {
  _has_bits_[0] |= 0x00000002u;
  init_frame_time_ms_ = value;
}
inline void LatencyStats::set_init_frame_time_ms(double value) {
  _internal_set_init_frame_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.init_frame_time_ms)
}

// -------------------------------------------------------------------

// RSSInfo

// optional bool is_rss_safe = 1;
inline bool RSSInfo::_internal_has_is_rss_safe() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RSSInfo::has_is_rss_safe() const {
  return _internal_has_is_rss_safe();
}
inline void RSSInfo::clear_is_rss_safe() {
  is_rss_safe_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RSSInfo::_internal_is_rss_safe() const {
  return is_rss_safe_;
}
inline bool RSSInfo::is_rss_safe() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.is_rss_safe)
  return _internal_is_rss_safe();
}
inline void RSSInfo::_internal_set_is_rss_safe(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_rss_safe_ = value;
}
inline void RSSInfo::set_is_rss_safe(bool value) {
  _internal_set_is_rss_safe(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.is_rss_safe)
}

// optional double cur_dist_lon = 2;
inline bool RSSInfo::_internal_has_cur_dist_lon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RSSInfo::has_cur_dist_lon() const {
  return _internal_has_cur_dist_lon();
}
inline void RSSInfo::clear_cur_dist_lon() {
  cur_dist_lon_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RSSInfo::_internal_cur_dist_lon() const {
  return cur_dist_lon_;
}
inline double RSSInfo::cur_dist_lon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.cur_dist_lon)
  return _internal_cur_dist_lon();
}
inline void RSSInfo::_internal_set_cur_dist_lon(double value) {
  _has_bits_[0] |= 0x00000001u;
  cur_dist_lon_ = value;
}
inline void RSSInfo::set_cur_dist_lon(double value) {
  _internal_set_cur_dist_lon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.cur_dist_lon)
}

// optional double rss_safe_dist_lon = 3;
inline bool RSSInfo::_internal_has_rss_safe_dist_lon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RSSInfo::has_rss_safe_dist_lon() const {
  return _internal_has_rss_safe_dist_lon();
}
inline void RSSInfo::clear_rss_safe_dist_lon() {
  rss_safe_dist_lon_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RSSInfo::_internal_rss_safe_dist_lon() const {
  return rss_safe_dist_lon_;
}
inline double RSSInfo::rss_safe_dist_lon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.rss_safe_dist_lon)
  return _internal_rss_safe_dist_lon();
}
inline void RSSInfo::_internal_set_rss_safe_dist_lon(double value) {
  _has_bits_[0] |= 0x00000002u;
  rss_safe_dist_lon_ = value;
}
inline void RSSInfo::set_rss_safe_dist_lon(double value) {
  _internal_set_rss_safe_dist_lon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.rss_safe_dist_lon)
}

// optional double acc_lon_range_minimum = 4;
inline bool RSSInfo::_internal_has_acc_lon_range_minimum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RSSInfo::has_acc_lon_range_minimum() const {
  return _internal_has_acc_lon_range_minimum();
}
inline void RSSInfo::clear_acc_lon_range_minimum() {
  acc_lon_range_minimum_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RSSInfo::_internal_acc_lon_range_minimum() const {
  return acc_lon_range_minimum_;
}
inline double RSSInfo::acc_lon_range_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.acc_lon_range_minimum)
  return _internal_acc_lon_range_minimum();
}
inline void RSSInfo::_internal_set_acc_lon_range_minimum(double value) {
  _has_bits_[0] |= 0x00000004u;
  acc_lon_range_minimum_ = value;
}
inline void RSSInfo::set_acc_lon_range_minimum(double value) {
  _internal_set_acc_lon_range_minimum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.acc_lon_range_minimum)
}

// optional double acc_lon_range_maximum = 5;
inline bool RSSInfo::_internal_has_acc_lon_range_maximum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RSSInfo::has_acc_lon_range_maximum() const {
  return _internal_has_acc_lon_range_maximum();
}
inline void RSSInfo::clear_acc_lon_range_maximum() {
  acc_lon_range_maximum_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RSSInfo::_internal_acc_lon_range_maximum() const {
  return acc_lon_range_maximum_;
}
inline double RSSInfo::acc_lon_range_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.acc_lon_range_maximum)
  return _internal_acc_lon_range_maximum();
}
inline void RSSInfo::_internal_set_acc_lon_range_maximum(double value) {
  _has_bits_[0] |= 0x00000008u;
  acc_lon_range_maximum_ = value;
}
inline void RSSInfo::set_acc_lon_range_maximum(double value) {
  _internal_set_acc_lon_range_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.acc_lon_range_maximum)
}

// optional double acc_lat_left_range_minimum = 6;
inline bool RSSInfo::_internal_has_acc_lat_left_range_minimum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RSSInfo::has_acc_lat_left_range_minimum() const {
  return _internal_has_acc_lat_left_range_minimum();
}
inline void RSSInfo::clear_acc_lat_left_range_minimum() {
  acc_lat_left_range_minimum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RSSInfo::_internal_acc_lat_left_range_minimum() const {
  return acc_lat_left_range_minimum_;
}
inline double RSSInfo::acc_lat_left_range_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.acc_lat_left_range_minimum)
  return _internal_acc_lat_left_range_minimum();
}
inline void RSSInfo::_internal_set_acc_lat_left_range_minimum(double value) {
  _has_bits_[0] |= 0x00000010u;
  acc_lat_left_range_minimum_ = value;
}
inline void RSSInfo::set_acc_lat_left_range_minimum(double value) {
  _internal_set_acc_lat_left_range_minimum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.acc_lat_left_range_minimum)
}

// optional double acc_lat_left_range_maximum = 7;
inline bool RSSInfo::_internal_has_acc_lat_left_range_maximum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RSSInfo::has_acc_lat_left_range_maximum() const {
  return _internal_has_acc_lat_left_range_maximum();
}
inline void RSSInfo::clear_acc_lat_left_range_maximum() {
  acc_lat_left_range_maximum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RSSInfo::_internal_acc_lat_left_range_maximum() const {
  return acc_lat_left_range_maximum_;
}
inline double RSSInfo::acc_lat_left_range_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.acc_lat_left_range_maximum)
  return _internal_acc_lat_left_range_maximum();
}
inline void RSSInfo::_internal_set_acc_lat_left_range_maximum(double value) {
  _has_bits_[0] |= 0x00000020u;
  acc_lat_left_range_maximum_ = value;
}
inline void RSSInfo::set_acc_lat_left_range_maximum(double value) {
  _internal_set_acc_lat_left_range_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.acc_lat_left_range_maximum)
}

// optional double acc_lat_right_range_minimum = 8;
inline bool RSSInfo::_internal_has_acc_lat_right_range_minimum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RSSInfo::has_acc_lat_right_range_minimum() const {
  return _internal_has_acc_lat_right_range_minimum();
}
inline void RSSInfo::clear_acc_lat_right_range_minimum() {
  acc_lat_right_range_minimum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RSSInfo::_internal_acc_lat_right_range_minimum() const {
  return acc_lat_right_range_minimum_;
}
inline double RSSInfo::acc_lat_right_range_minimum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.acc_lat_right_range_minimum)
  return _internal_acc_lat_right_range_minimum();
}
inline void RSSInfo::_internal_set_acc_lat_right_range_minimum(double value) {
  _has_bits_[0] |= 0x00000040u;
  acc_lat_right_range_minimum_ = value;
}
inline void RSSInfo::set_acc_lat_right_range_minimum(double value) {
  _internal_set_acc_lat_right_range_minimum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.acc_lat_right_range_minimum)
}

// optional double acc_lat_right_range_maximum = 9;
inline bool RSSInfo::_internal_has_acc_lat_right_range_maximum() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RSSInfo::has_acc_lat_right_range_maximum() const {
  return _internal_has_acc_lat_right_range_maximum();
}
inline void RSSInfo::clear_acc_lat_right_range_maximum() {
  acc_lat_right_range_maximum_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RSSInfo::_internal_acc_lat_right_range_maximum() const {
  return acc_lat_right_range_maximum_;
}
inline double RSSInfo::acc_lat_right_range_maximum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RSSInfo.acc_lat_right_range_maximum)
  return _internal_acc_lat_right_range_maximum();
}
inline void RSSInfo::_internal_set_acc_lat_right_range_maximum(double value) {
  _has_bits_[0] |= 0x00000080u;
  acc_lat_right_range_maximum_ = value;
}
inline void RSSInfo::set_acc_lat_right_range_maximum(double value) {
  _internal_set_acc_lat_right_range_maximum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RSSInfo.acc_lat_right_range_maximum)
}

// -------------------------------------------------------------------

// ADCTrajectory_CriticalRegion

// repeated .apollo.common.Polygon region = 1;
inline int ADCTrajectory_CriticalRegion::_internal_region_size() const {
  return region_.size();
}
inline int ADCTrajectory_CriticalRegion::region_size() const {
  return _internal_region_size();
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >*
ADCTrajectory_CriticalRegion::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return &region_;
}
inline const ::apollo::common::Polygon& ADCTrajectory_CriticalRegion::_internal_region(int index) const {
  return region_.Get(index);
}
inline const ::apollo::common::Polygon& ADCTrajectory_CriticalRegion::region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return _internal_region(index);
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::_internal_add_region() {
  return region_.Add();
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::add_region() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return _internal_add_region();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >&
ADCTrajectory_CriticalRegion::region() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return region_;
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .apollo.common.Header header = 1;
inline bool ADCTrajectory::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& ADCTrajectory::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return _internal_header();
}
inline ::apollo::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ADCTrajectory::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return _internal_mutable_header();
}
inline void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline bool ADCTrajectory::_internal_has_total_path_length() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ADCTrajectory::has_total_path_length() const {
  return _internal_has_total_path_length();
}
inline void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double ADCTrajectory::_internal_total_path_length() const {
  return total_path_length_;
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return _internal_total_path_length();
}
inline void ADCTrajectory::_internal_set_total_path_length(double value) {
  _has_bits_[0] |= 0x00000400u;
  total_path_length_ = value;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  _internal_set_total_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
inline bool ADCTrajectory::_internal_has_total_path_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ADCTrajectory::has_total_path_time() const {
  return _internal_has_total_path_time();
}
inline void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double ADCTrajectory::_internal_total_path_time() const {
  return total_path_time_;
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return _internal_total_path_time();
}
inline void ADCTrajectory::_internal_set_total_path_time(double value) {
  _has_bits_[0] |= 0x00000800u;
  total_path_time_ = value;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  _internal_set_total_path_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::_internal_trajectory_point_size() const {
  return trajectory_point_.size();
}
inline int ADCTrajectory::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& ADCTrajectory::_internal_trajectory_point(int index) const {
  return trajectory_point_.Get(index);
}
inline const ::apollo::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::_internal_add_trajectory_point() {
  return trajectory_point_.Add();
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.trajectory_point)
  return _internal_add_trajectory_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
inline bool ADCTrajectory::_internal_has_estop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || estop_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_estop() const {
  return _internal_has_estop();
}
inline void ADCTrajectory::clear_estop() {
  if (estop_ != nullptr) estop_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning::EStop& ADCTrajectory::_internal_estop() const {
  const ::apollo::planning::EStop* p = estop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::EStop*>(
      &::apollo::planning::_EStop_default_instance_);
}
inline const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return _internal_estop();
}
inline ::apollo::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::EStop* temp = estop_;
  estop_ = nullptr;
  return temp;
}
inline ::apollo::planning::EStop* ADCTrajectory::_internal_mutable_estop() {
  _has_bits_[0] |= 0x00000004u;
  if (estop_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::EStop>(GetArenaNoVirtual());
    estop_ = p;
  }
  return estop_;
}
inline ::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return _internal_mutable_estop();
}
inline void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete estop_;
  }
  if (estop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      estop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  estop_ = estop;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.common.PathPoint path_point = 13;
inline int ADCTrajectory::_internal_path_point_size() const {
  return path_point_.size();
}
inline int ADCTrajectory::path_point_size() const {
  return _internal_path_point_size();
}
inline ::apollo::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.path_point)
  return &path_point_;
}
inline const ::apollo::common::PathPoint& ADCTrajectory::_internal_path_point(int index) const {
  return path_point_.Get(index);
}
inline const ::apollo::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.path_point)
  return _internal_path_point(index);
}
inline ::apollo::common::PathPoint* ADCTrajectory::_internal_add_path_point() {
  return path_point_.Add();
}
inline ::apollo::common::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.path_point)
  return _internal_add_path_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional bool is_replan = 9 [default = false];
inline bool ADCTrajectory::_internal_has_is_replan() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ADCTrajectory::has_is_replan() const {
  return _internal_has_is_replan();
}
inline void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ADCTrajectory::_internal_is_replan() const {
  return is_replan_;
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return _internal_is_replan();
}
inline void ADCTrajectory::_internal_set_is_replan(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_replan_ = value;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  _internal_set_is_replan(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional string replan_reason = 22;
inline bool ADCTrajectory::_internal_has_replan_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ADCTrajectory::has_replan_reason() const {
  return _internal_has_replan_reason();
}
inline void ADCTrajectory::clear_replan_reason() {
  replan_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ADCTrajectory::replan_reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.replan_reason)
  return _internal_replan_reason();
}
inline void ADCTrajectory::set_replan_reason(const std::string& value) {
  _internal_set_replan_reason(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.replan_reason)
}
inline std::string* ADCTrajectory::mutable_replan_reason() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.replan_reason)
  return _internal_mutable_replan_reason();
}
inline const std::string& ADCTrajectory::_internal_replan_reason() const {
  return replan_reason_.GetNoArena();
}
inline void ADCTrajectory::_internal_set_replan_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ADCTrajectory::set_replan_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.ADCTrajectory.replan_reason)
}
inline void ADCTrajectory::set_replan_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.ADCTrajectory.replan_reason)
}
inline void ADCTrajectory::set_replan_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  replan_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ADCTrajectory.replan_reason)
}
inline std::string* ADCTrajectory::_internal_mutable_replan_reason() {
  _has_bits_[0] |= 0x00000001u;
  return replan_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ADCTrajectory::release_replan_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.replan_reason)
  if (!_internal_has_replan_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return replan_reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ADCTrajectory::set_allocated_replan_reason(std::string* replan_reason) {
  if (replan_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  replan_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replan_reason);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.replan_reason)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
inline bool ADCTrajectory::_internal_has_gear() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ADCTrajectory::has_gear() const {
  return _internal_has_gear();
}
inline void ADCTrajectory::clear_gear() {
  gear_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::Chassis_GearPosition ADCTrajectory::_internal_gear() const {
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_);
}
inline ::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return _internal_gear();
}
inline void ADCTrajectory::_internal_set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  gear_ = value;
}
inline void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning.DecisionResult decision = 14;
inline bool ADCTrajectory::_internal_has_decision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || decision_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_decision() const {
  return _internal_has_decision();
}
inline const ::apollo::planning::DecisionResult& ADCTrajectory::_internal_decision() const {
  const ::apollo::planning::DecisionResult* p = decision_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::DecisionResult*>(
      &::apollo::planning::_DecisionResult_default_instance_);
}
inline const ::apollo::planning::DecisionResult& ADCTrajectory::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.decision)
  return _internal_decision();
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.decision)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::DecisionResult* temp = decision_;
  decision_ = nullptr;
  return temp;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::_internal_mutable_decision() {
  _has_bits_[0] |= 0x00000010u;
  if (decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DecisionResult>(GetArenaNoVirtual());
    decision_ = p;
  }
  return decision_;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.decision)
  return _internal_mutable_decision();
}
inline void ADCTrajectory::set_allocated_decision(::apollo::planning::DecisionResult* decision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(decision_);
  }
  if (decision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  decision_ = decision;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.decision)
}

// optional .apollo.planning.LatencyStats latency_stats = 15;
inline bool ADCTrajectory::_internal_has_latency_stats() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || latency_stats_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_latency_stats() const {
  return _internal_has_latency_stats();
}
inline void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != nullptr) latency_stats_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::planning::LatencyStats& ADCTrajectory::_internal_latency_stats() const {
  const ::apollo::planning::LatencyStats* p = latency_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::LatencyStats*>(
      &::apollo::planning::_LatencyStats_default_instance_);
}
inline const ::apollo::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.latency_stats)
  return _internal_latency_stats();
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.latency_stats)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = nullptr;
  return temp;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::_internal_mutable_latency_stats() {
  _has_bits_[0] |= 0x00000020u;
  if (latency_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LatencyStats>(GetArenaNoVirtual());
    latency_stats_ = p;
  }
  return latency_stats_;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.latency_stats)
  return _internal_mutable_latency_stats();
}
inline void ADCTrajectory::set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete latency_stats_;
  }
  if (latency_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      latency_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  latency_stats_ = latency_stats;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.latency_stats)
}

// optional .apollo.common.Header routing_header = 16;
inline bool ADCTrajectory::_internal_has_routing_header() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || routing_header_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_routing_header() const {
  return _internal_has_routing_header();
}
inline const ::apollo::common::Header& ADCTrajectory::_internal_routing_header() const {
  const ::apollo::common::Header* p = routing_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.routing_header)
  return _internal_routing_header();
}
inline ::apollo::common::Header* ADCTrajectory::release_routing_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.routing_header)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Header* temp = routing_header_;
  routing_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ADCTrajectory::_internal_mutable_routing_header() {
  _has_bits_[0] |= 0x00000040u;
  if (routing_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    routing_header_ = p;
  }
  return routing_header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_routing_header() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.routing_header)
  return _internal_mutable_routing_header();
}
inline void ADCTrajectory::set_allocated_routing_header(::apollo::common::Header* routing_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_header_);
  }
  if (routing_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  routing_header_ = routing_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.routing_header)
}

// optional .apollo.planning_internal.Debug debug = 8;
inline bool ADCTrajectory::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || debug_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_debug() const {
  return _internal_has_debug();
}
inline const ::apollo::planning_internal::Debug& ADCTrajectory::_internal_debug() const {
  const ::apollo::planning_internal::Debug* p = debug_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning_internal::Debug*>(
      &::apollo::planning_internal::_Debug_default_instance_);
}
inline const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return _internal_debug();
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::planning_internal::Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::_internal_mutable_debug() {
  _has_bits_[0] |= 0x00000008u;
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::Debug>(GetArenaNoVirtual());
    debug_ = p;
  }
  return debug_;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return _internal_mutable_debug();
}
inline void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_);
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline bool ADCTrajectory::_internal_has_right_of_way_status() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ADCTrajectory::has_right_of_way_status() const {
  return _internal_has_right_of_way_status();
}
inline void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::_internal_right_of_way_status() const {
  return static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
inline ::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.right_of_way_status)
  return _internal_right_of_way_status();
}
inline void ADCTrajectory::_internal_set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  right_of_way_status_ = value;
}
inline void ADCTrajectory::set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  _internal_set_right_of_way_status(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.right_of_way_status)
}

// repeated .apollo.hdmap.Id lane_id = 18;
inline int ADCTrajectory::_internal_lane_id_size() const {
  return lane_id_.size();
}
inline int ADCTrajectory::lane_id_size() const {
  return _internal_lane_id_size();
}
inline ::apollo::hdmap::Id* ADCTrajectory::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
ADCTrajectory::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.lane_id)
  return &lane_id_;
}
inline const ::apollo::hdmap::Id& ADCTrajectory::_internal_lane_id(int index) const {
  return lane_id_.Get(index);
}
inline const ::apollo::hdmap::Id& ADCTrajectory::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.lane_id)
  return _internal_lane_id(index);
}
inline ::apollo::hdmap::Id* ADCTrajectory::_internal_add_lane_id() {
  return lane_id_.Add();
}
inline ::apollo::hdmap::Id* ADCTrajectory::add_lane_id() {
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.lane_id)
  return _internal_add_lane_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
ADCTrajectory::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.lane_id)
  return lane_id_;
}

// optional .apollo.common.EngageAdvice engage_advice = 19;
inline bool ADCTrajectory::_internal_has_engage_advice() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || engage_advice_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_engage_advice() const {
  return _internal_has_engage_advice();
}
inline const ::apollo::common::EngageAdvice& ADCTrajectory::_internal_engage_advice() const {
  const ::apollo::common::EngageAdvice* p = engage_advice_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::EngageAdvice*>(
      &::apollo::common::_EngageAdvice_default_instance_);
}
inline const ::apollo::common::EngageAdvice& ADCTrajectory::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.engage_advice)
  return _internal_engage_advice();
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.engage_advice)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = nullptr;
  return temp;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::_internal_mutable_engage_advice() {
  _has_bits_[0] |= 0x00000080u;
  if (engage_advice_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::EngageAdvice>(GetArenaNoVirtual());
    engage_advice_ = p;
  }
  return engage_advice_;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::mutable_engage_advice() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.engage_advice)
  return _internal_mutable_engage_advice();
}
inline void ADCTrajectory::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice_);
  }
  if (engage_advice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      engage_advice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engage_advice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  engage_advice_ = engage_advice;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.engage_advice)
}

// optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
inline bool ADCTrajectory::_internal_has_critical_region() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || critical_region_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_critical_region() const {
  return _internal_has_critical_region();
}
inline void ADCTrajectory::clear_critical_region() {
  if (critical_region_ != nullptr) critical_region_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::_internal_critical_region() const {
  const ::apollo::planning::ADCTrajectory_CriticalRegion* p = critical_region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::ADCTrajectory_CriticalRegion*>(
      &::apollo::planning::_ADCTrajectory_CriticalRegion_default_instance_);
}
inline const ::apollo::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::critical_region() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.critical_region)
  return _internal_critical_region();
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::release_critical_region() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.critical_region)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::planning::ADCTrajectory_CriticalRegion* temp = critical_region_;
  critical_region_ = nullptr;
  return temp;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::_internal_mutable_critical_region() {
  _has_bits_[0] |= 0x00000100u;
  if (critical_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::ADCTrajectory_CriticalRegion>(GetArenaNoVirtual());
    critical_region_ = p;
  }
  return critical_region_;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::mutable_critical_region() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.critical_region)
  return _internal_mutable_critical_region();
}
inline void ADCTrajectory::set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete critical_region_;
  }
  if (critical_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      critical_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, critical_region, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  critical_region_ = critical_region;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.critical_region)
}

// optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
inline bool ADCTrajectory::_internal_has_trajectory_type() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ADCTrajectory::has_trajectory_type() const {
  return _internal_has_trajectory_type();
}
inline void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::apollo::planning::ADCTrajectory_TrajectoryType ADCTrajectory::_internal_trajectory_type() const {
  return static_cast< ::apollo::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
inline ::apollo::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_type)
  return _internal_trajectory_type();
}
inline void ADCTrajectory::_internal_set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value) {
  assert(::apollo::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  trajectory_type_ = value;
}
inline void ADCTrajectory::set_trajectory_type(::apollo::planning::ADCTrajectory_TrajectoryType value) {
  _internal_set_trajectory_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.trajectory_type)
}

// optional .apollo.planning.RSSInfo rss_info = 100;
inline bool ADCTrajectory::_internal_has_rss_info() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || rss_info_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_rss_info() const {
  return _internal_has_rss_info();
}
inline void ADCTrajectory::clear_rss_info() {
  if (rss_info_ != nullptr) rss_info_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::planning::RSSInfo& ADCTrajectory::_internal_rss_info() const {
  const ::apollo::planning::RSSInfo* p = rss_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::RSSInfo*>(
      &::apollo::planning::_RSSInfo_default_instance_);
}
inline const ::apollo::planning::RSSInfo& ADCTrajectory::rss_info() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.rss_info)
  return _internal_rss_info();
}
inline ::apollo::planning::RSSInfo* ADCTrajectory::release_rss_info() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.rss_info)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::planning::RSSInfo* temp = rss_info_;
  rss_info_ = nullptr;
  return temp;
}
inline ::apollo::planning::RSSInfo* ADCTrajectory::_internal_mutable_rss_info() {
  _has_bits_[0] |= 0x00000200u;
  if (rss_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::RSSInfo>(GetArenaNoVirtual());
    rss_info_ = p;
  }
  return rss_info_;
}
inline ::apollo::planning::RSSInfo* ADCTrajectory::mutable_rss_info() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.rss_info)
  return _internal_mutable_rss_info();
}
inline void ADCTrajectory::set_allocated_rss_info(::apollo::planning::RSSInfo* rss_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rss_info_;
  }
  if (rss_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rss_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rss_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  rss_info_ = rss_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.rss_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::ADCSignals_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCSignals_SignalType>() {
  return ::apollo::planning::ADCSignals_SignalType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ADCTrajectory_RightOfWayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::apollo::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ADCTrajectory_TrajectoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCTrajectory_TrajectoryType>() {
  return ::apollo::planning::ADCTrajectory_TrajectoryType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_2eproto
