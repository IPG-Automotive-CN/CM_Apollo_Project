// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_roi_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class OpenSpaceRoiDeciderConfig;
class OpenSpaceRoiDeciderConfigDefaultTypeInternal;
extern OpenSpaceRoiDeciderConfigDefaultTypeInternal _OpenSpaceRoiDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::OpenSpaceRoiDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceRoiDeciderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum OpenSpaceRoiDeciderConfig_RoiType : int {
  OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED = 0,
  OpenSpaceRoiDeciderConfig_RoiType_PARKING = 1,
  OpenSpaceRoiDeciderConfig_RoiType_PULL_OVER = 2,
  OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN = 3
};
bool OpenSpaceRoiDeciderConfig_RoiType_IsValid(int value);
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig_RoiType_RoiType_MIN = OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED;
constexpr OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX = OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN;
constexpr int OpenSpaceRoiDeciderConfig_RoiType_RoiType_ARRAYSIZE = OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpenSpaceRoiDeciderConfig_RoiType_descriptor();
template<typename T>
inline const std::string& OpenSpaceRoiDeciderConfig_RoiType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpenSpaceRoiDeciderConfig_RoiType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpenSpaceRoiDeciderConfig_RoiType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpenSpaceRoiDeciderConfig_RoiType_descriptor(), enum_t_value);
}
inline bool OpenSpaceRoiDeciderConfig_RoiType_Parse(
    const std::string& name, OpenSpaceRoiDeciderConfig_RoiType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpenSpaceRoiDeciderConfig_RoiType>(
    OpenSpaceRoiDeciderConfig_RoiType_descriptor(), name, value);
}
// ===================================================================

class OpenSpaceRoiDeciderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceRoiDeciderConfig) */ {
 public:
  OpenSpaceRoiDeciderConfig();
  virtual ~OpenSpaceRoiDeciderConfig();

  OpenSpaceRoiDeciderConfig(const OpenSpaceRoiDeciderConfig& from);
  OpenSpaceRoiDeciderConfig(OpenSpaceRoiDeciderConfig&& from) noexcept
    : OpenSpaceRoiDeciderConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceRoiDeciderConfig& operator=(const OpenSpaceRoiDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSpaceRoiDeciderConfig& operator=(OpenSpaceRoiDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenSpaceRoiDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceRoiDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceRoiDeciderConfig*>(
               &_OpenSpaceRoiDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenSpaceRoiDeciderConfig& a, OpenSpaceRoiDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSpaceRoiDeciderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceRoiDeciderConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceRoiDeciderConfig>(nullptr);
  }

  OpenSpaceRoiDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceRoiDeciderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenSpaceRoiDeciderConfig& from);
  void MergeFrom(const OpenSpaceRoiDeciderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceRoiDeciderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.OpenSpaceRoiDeciderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpenSpaceRoiDeciderConfig_RoiType RoiType;
  static constexpr RoiType NOT_DEFINED =
    OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED;
  static constexpr RoiType PARKING =
    OpenSpaceRoiDeciderConfig_RoiType_PARKING;
  static constexpr RoiType PULL_OVER =
    OpenSpaceRoiDeciderConfig_RoiType_PULL_OVER;
  static constexpr RoiType NARROW_STREET_U_TURN =
    OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN;
  static inline bool RoiType_IsValid(int value) {
    return OpenSpaceRoiDeciderConfig_RoiType_IsValid(value);
  }
  static constexpr RoiType RoiType_MIN =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_MIN;
  static constexpr RoiType RoiType_MAX =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX;
  static constexpr int RoiType_ARRAYSIZE =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RoiType_descriptor() {
    return OpenSpaceRoiDeciderConfig_RoiType_descriptor();
  }
  template<typename T>
  static inline const std::string& RoiType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RoiType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RoiType_Name.");
    return OpenSpaceRoiDeciderConfig_RoiType_Name(enum_t_value);
  }
  static inline bool RoiType_Parse(const std::string& name,
      RoiType* value) {
    return OpenSpaceRoiDeciderConfig_RoiType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoiTypeFieldNumber = 1,
    kParkingInwardsFieldNumber = 4,
    kEnablePerceptionObstaclesFieldNumber = 5,
    kPerceptionObstacleBufferFieldNumber = 10,
    kRoiLongitudinalRangeFieldNumber = 2,
    kParkingStartRangeFieldNumber = 3,
    kParkingDepthBufferFieldNumber = 6,
    kRoiLinesegmentMinAngleFieldNumber = 7,
    kRoiLinesegmentLengthFieldNumber = 8,
    kPerceptionObstacleFilteringDistanceFieldNumber = 9,
    kBoundWidthChangeRatioUppperLimitFieldNumber = 11,
  };
  // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  bool has_roi_type() const;
  private:
  bool _internal_has_roi_type() const;
  public:
  void clear_roi_type();
  ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType roi_type() const;
  void set_roi_type(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType value);
  private:
  ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType _internal_roi_type() const;
  void _internal_set_roi_type(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType value);
  public:

  // optional bool parking_inwards = 4 [default = false];
  bool has_parking_inwards() const;
  private:
  bool _internal_has_parking_inwards() const;
  public:
  void clear_parking_inwards();
  bool parking_inwards() const;
  void set_parking_inwards(bool value);
  private:
  bool _internal_parking_inwards() const;
  void _internal_set_parking_inwards(bool value);
  public:

  // optional bool enable_perception_obstacles = 5;
  bool has_enable_perception_obstacles() const;
  private:
  bool _internal_has_enable_perception_obstacles() const;
  public:
  void clear_enable_perception_obstacles();
  bool enable_perception_obstacles() const;
  void set_enable_perception_obstacles(bool value);
  private:
  bool _internal_enable_perception_obstacles() const;
  void _internal_set_enable_perception_obstacles(bool value);
  public:

  // optional double perception_obstacle_buffer = 10;
  bool has_perception_obstacle_buffer() const;
  private:
  bool _internal_has_perception_obstacle_buffer() const;
  public:
  void clear_perception_obstacle_buffer();
  double perception_obstacle_buffer() const;
  void set_perception_obstacle_buffer(double value);
  private:
  double _internal_perception_obstacle_buffer() const;
  void _internal_set_perception_obstacle_buffer(double value);
  public:

  // optional double roi_longitudinal_range = 2 [default = 10];
  bool has_roi_longitudinal_range() const;
  private:
  bool _internal_has_roi_longitudinal_range() const;
  public:
  void clear_roi_longitudinal_range();
  double roi_longitudinal_range() const;
  void set_roi_longitudinal_range(double value);
  private:
  double _internal_roi_longitudinal_range() const;
  void _internal_set_roi_longitudinal_range(double value);
  public:

  // optional double parking_start_range = 3 [default = 7];
  bool has_parking_start_range() const;
  private:
  bool _internal_has_parking_start_range() const;
  public:
  void clear_parking_start_range();
  double parking_start_range() const;
  void set_parking_start_range(double value);
  private:
  double _internal_parking_start_range() const;
  void _internal_set_parking_start_range(double value);
  public:

  // optional double parking_depth_buffer = 6 [default = 0.1];
  bool has_parking_depth_buffer() const;
  private:
  bool _internal_has_parking_depth_buffer() const;
  public:
  void clear_parking_depth_buffer();
  double parking_depth_buffer() const;
  void set_parking_depth_buffer(double value);
  private:
  double _internal_parking_depth_buffer() const;
  void _internal_set_parking_depth_buffer(double value);
  public:

  // optional double roi_linesegment_min_angle = 7 [default = 0.3];
  bool has_roi_linesegment_min_angle() const;
  private:
  bool _internal_has_roi_linesegment_min_angle() const;
  public:
  void clear_roi_linesegment_min_angle();
  double roi_linesegment_min_angle() const;
  void set_roi_linesegment_min_angle(double value);
  private:
  double _internal_roi_linesegment_min_angle() const;
  void _internal_set_roi_linesegment_min_angle(double value);
  public:

  // optional double roi_linesegment_length = 8 [default = 1];
  bool has_roi_linesegment_length() const;
  private:
  bool _internal_has_roi_linesegment_length() const;
  public:
  void clear_roi_linesegment_length();
  double roi_linesegment_length() const;
  void set_roi_linesegment_length(double value);
  private:
  double _internal_roi_linesegment_length() const;
  void _internal_set_roi_linesegment_length(double value);
  public:

  // optional double perception_obstacle_filtering_distance = 9 [default = 1000];
  bool has_perception_obstacle_filtering_distance() const;
  private:
  bool _internal_has_perception_obstacle_filtering_distance() const;
  public:
  void clear_perception_obstacle_filtering_distance();
  double perception_obstacle_filtering_distance() const;
  void set_perception_obstacle_filtering_distance(double value);
  private:
  double _internal_perception_obstacle_filtering_distance() const;
  void _internal_set_perception_obstacle_filtering_distance(double value);
  public:

  // optional double bound_width_change_ratio_uppper_limit = 11 [default = 1];
  bool has_bound_width_change_ratio_uppper_limit() const;
  private:
  bool _internal_has_bound_width_change_ratio_uppper_limit() const;
  public:
  void clear_bound_width_change_ratio_uppper_limit();
  double bound_width_change_ratio_uppper_limit() const;
  void set_bound_width_change_ratio_uppper_limit(double value);
  private:
  double _internal_bound_width_change_ratio_uppper_limit() const;
  void _internal_set_bound_width_change_ratio_uppper_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceRoiDeciderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int roi_type_;
  bool parking_inwards_;
  bool enable_perception_obstacles_;
  double perception_obstacle_buffer_;
  double roi_longitudinal_range_;
  double parking_start_range_;
  double parking_depth_buffer_;
  double roi_linesegment_min_angle_;
  double roi_linesegment_length_;
  double perception_obstacle_filtering_distance_;
  double bound_width_change_ratio_uppper_limit_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSpaceRoiDeciderConfig

// optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
inline bool OpenSpaceRoiDeciderConfig::_internal_has_roi_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_roi_type() const {
  return _internal_has_roi_type();
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_type() {
  roi_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::_internal_roi_type() const {
  return static_cast< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType >(roi_type_);
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::roi_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_type)
  return _internal_roi_type();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_roi_type(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType value) {
  assert(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  roi_type_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_type(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType value) {
  _internal_set_roi_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_type)
}

// optional double roi_longitudinal_range = 2 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_roi_longitudinal_range() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_roi_longitudinal_range() const {
  return _internal_has_roi_longitudinal_range();
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_longitudinal_range() {
  roi_longitudinal_range_ = 10;
  _has_bits_[0] &= ~0x00000010u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_roi_longitudinal_range() const {
  return roi_longitudinal_range_;
}
inline double OpenSpaceRoiDeciderConfig::roi_longitudinal_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range)
  return _internal_roi_longitudinal_range();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_roi_longitudinal_range(double value) {
  _has_bits_[0] |= 0x00000010u;
  roi_longitudinal_range_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_longitudinal_range(double value) {
  _internal_set_roi_longitudinal_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range)
}

// optional double parking_start_range = 3 [default = 7];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_parking_start_range() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_parking_start_range() const {
  return _internal_has_parking_start_range();
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  _has_bits_[0] &= ~0x00000020u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_parking_start_range() const {
  return parking_start_range_;
}
inline double OpenSpaceRoiDeciderConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parking_start_range)
  return _internal_parking_start_range();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_parking_start_range(double value) {
  _has_bits_[0] |= 0x00000020u;
  parking_start_range_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_start_range(double value) {
  _internal_set_parking_start_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parking_start_range)
}

// optional bool parking_inwards = 4 [default = false];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_parking_inwards() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_parking_inwards() const {
  return _internal_has_parking_inwards();
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OpenSpaceRoiDeciderConfig::_internal_parking_inwards() const {
  return parking_inwards_;
}
inline bool OpenSpaceRoiDeciderConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parking_inwards)
  return _internal_parking_inwards();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_parking_inwards(bool value) {
  _has_bits_[0] |= 0x00000002u;
  parking_inwards_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_inwards(bool value) {
  _internal_set_parking_inwards(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parking_inwards)
}

// optional bool enable_perception_obstacles = 5;
inline bool OpenSpaceRoiDeciderConfig::_internal_has_enable_perception_obstacles() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_enable_perception_obstacles() const {
  return _internal_has_enable_perception_obstacles();
}
inline void OpenSpaceRoiDeciderConfig::clear_enable_perception_obstacles() {
  enable_perception_obstacles_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OpenSpaceRoiDeciderConfig::_internal_enable_perception_obstacles() const {
  return enable_perception_obstacles_;
}
inline bool OpenSpaceRoiDeciderConfig::enable_perception_obstacles() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.enable_perception_obstacles)
  return _internal_enable_perception_obstacles();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_enable_perception_obstacles(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_perception_obstacles_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_enable_perception_obstacles(bool value) {
  _internal_set_enable_perception_obstacles(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.enable_perception_obstacles)
}

// optional double parking_depth_buffer = 6 [default = 0.1];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_parking_depth_buffer() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_parking_depth_buffer() const {
  return _internal_has_parking_depth_buffer();
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_depth_buffer() {
  parking_depth_buffer_ = 0.1;
  _has_bits_[0] &= ~0x00000040u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_parking_depth_buffer() const {
  return parking_depth_buffer_;
}
inline double OpenSpaceRoiDeciderConfig::parking_depth_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parking_depth_buffer)
  return _internal_parking_depth_buffer();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_parking_depth_buffer(double value) {
  _has_bits_[0] |= 0x00000040u;
  parking_depth_buffer_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_depth_buffer(double value) {
  _internal_set_parking_depth_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parking_depth_buffer)
}

// optional double roi_linesegment_min_angle = 7 [default = 0.3];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_roi_linesegment_min_angle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_roi_linesegment_min_angle() const {
  return _internal_has_roi_linesegment_min_angle();
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_linesegment_min_angle() {
  roi_linesegment_min_angle_ = 0.3;
  _has_bits_[0] &= ~0x00000080u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_roi_linesegment_min_angle() const {
  return roi_linesegment_min_angle_;
}
inline double OpenSpaceRoiDeciderConfig::roi_linesegment_min_angle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_linesegment_min_angle)
  return _internal_roi_linesegment_min_angle();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_roi_linesegment_min_angle(double value) {
  _has_bits_[0] |= 0x00000080u;
  roi_linesegment_min_angle_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_linesegment_min_angle(double value) {
  _internal_set_roi_linesegment_min_angle(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_linesegment_min_angle)
}

// optional double roi_linesegment_length = 8 [default = 1];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_roi_linesegment_length() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_roi_linesegment_length() const {
  return _internal_has_roi_linesegment_length();
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_linesegment_length() {
  roi_linesegment_length_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_roi_linesegment_length() const {
  return roi_linesegment_length_;
}
inline double OpenSpaceRoiDeciderConfig::roi_linesegment_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_linesegment_length)
  return _internal_roi_linesegment_length();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_roi_linesegment_length(double value) {
  _has_bits_[0] |= 0x00000100u;
  roi_linesegment_length_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_linesegment_length(double value) {
  _internal_set_roi_linesegment_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_linesegment_length)
}

// optional double perception_obstacle_filtering_distance = 9 [default = 1000];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_perception_obstacle_filtering_distance() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_perception_obstacle_filtering_distance() const {
  return _internal_has_perception_obstacle_filtering_distance();
}
inline void OpenSpaceRoiDeciderConfig::clear_perception_obstacle_filtering_distance() {
  perception_obstacle_filtering_distance_ = 1000;
  _has_bits_[0] &= ~0x00000200u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_perception_obstacle_filtering_distance() const {
  return perception_obstacle_filtering_distance_;
}
inline double OpenSpaceRoiDeciderConfig::perception_obstacle_filtering_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_filtering_distance)
  return _internal_perception_obstacle_filtering_distance();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_perception_obstacle_filtering_distance(double value) {
  _has_bits_[0] |= 0x00000200u;
  perception_obstacle_filtering_distance_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_perception_obstacle_filtering_distance(double value) {
  _internal_set_perception_obstacle_filtering_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_filtering_distance)
}

// optional double perception_obstacle_buffer = 10;
inline bool OpenSpaceRoiDeciderConfig::_internal_has_perception_obstacle_buffer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_perception_obstacle_buffer() const {
  return _internal_has_perception_obstacle_buffer();
}
inline void OpenSpaceRoiDeciderConfig::clear_perception_obstacle_buffer() {
  perception_obstacle_buffer_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_perception_obstacle_buffer() const {
  return perception_obstacle_buffer_;
}
inline double OpenSpaceRoiDeciderConfig::perception_obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_buffer)
  return _internal_perception_obstacle_buffer();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_perception_obstacle_buffer(double value) {
  _has_bits_[0] |= 0x00000008u;
  perception_obstacle_buffer_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_perception_obstacle_buffer(double value) {
  _internal_set_perception_obstacle_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_buffer)
}

// optional double bound_width_change_ratio_uppper_limit = 11 [default = 1];
inline bool OpenSpaceRoiDeciderConfig::_internal_has_bound_width_change_ratio_uppper_limit() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OpenSpaceRoiDeciderConfig::has_bound_width_change_ratio_uppper_limit() const {
  return _internal_has_bound_width_change_ratio_uppper_limit();
}
inline void OpenSpaceRoiDeciderConfig::clear_bound_width_change_ratio_uppper_limit() {
  bound_width_change_ratio_uppper_limit_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline double OpenSpaceRoiDeciderConfig::_internal_bound_width_change_ratio_uppper_limit() const {
  return bound_width_change_ratio_uppper_limit_;
}
inline double OpenSpaceRoiDeciderConfig::bound_width_change_ratio_uppper_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.bound_width_change_ratio_uppper_limit)
  return _internal_bound_width_change_ratio_uppper_limit();
}
inline void OpenSpaceRoiDeciderConfig::_internal_set_bound_width_change_ratio_uppper_limit(double value) {
  _has_bits_[0] |= 0x00000400u;
  bound_width_change_ratio_uppper_limit_ = value;
}
inline void OpenSpaceRoiDeciderConfig::set_bound_width_change_ratio_uppper_limit(double value) {
  _internal_set_bound_width_change_ratio_uppper_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.bound_width_change_ratio_uppper_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType>() {
  return ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5froi_5fdecider_5fconfig_2eproto
