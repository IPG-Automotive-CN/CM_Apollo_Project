// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto

#include "modules/planning/proto/navi_path_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class NaviPathDeciderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NaviPathDeciderConfig> _instance;
} _NaviPathDeciderConfig_default_instance_;
class MoveDestLaneConfigTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveDestLaneConfigTable> _instance;
} _MoveDestLaneConfigTable_default_instance_;
class ShiftConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShiftConfig> _instance;
} _ShiftConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_MoveDestLaneConfigTable_default_instance_;
    new (ptr) ::apollo::planning::MoveDestLaneConfigTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::MoveDestLaneConfigTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto}, {
      &scc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NaviPathDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::NaviPathDeciderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NaviPathDeciderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto}, {
      &scc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ShiftConfig_default_instance_;
    new (ptr) ::apollo::planning::ShiftConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ShiftConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_look_forward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_keep_lane_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_keep_lane_shift_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, min_keep_lane_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, keep_lane_shift_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, move_dest_lane_config_talbe_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, move_dest_lane_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, max_kappa_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, kappa_move_dest_lane_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, start_plan_point_from_),
  5,
  4,
  6,
  7,
  8,
  9,
  0,
  10,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MoveDestLaneConfigTable, lateral_shift_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, max_move_dest_lane_shift_y_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::planning::NaviPathDeciderConfig)},
  { 27, 33, sizeof(::apollo::planning::MoveDestLaneConfigTable)},
  { 34, 41, sizeof(::apollo::planning::ShiftConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_NaviPathDeciderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_MoveDestLaneConfigTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ShiftConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5modules/planning/proto/navi_path_decid"
  "er_config.proto\022\017apollo.planning\"\325\003\n\025Nav"
  "iPathDeciderConfig\022\032\n\017min_path_length\030\001 "
  "\001(\001:\0015\022 \n\025min_look_forward_time\030\002 \001(\r:\0012"
  "\022#\n\026max_keep_lane_distance\030\003 \001(\001:\0030.8\022!\n"
  "\025max_keep_lane_shift_y\030\004 \001(\001:\00220\022 \n\024min_"
  "keep_lane_offset\030\005 \001(\001:\00215\022*\n\034keep_lane_"
  "shift_compensation\030\006 \001(\001:\0040.01\022M\n\033move_d"
  "est_lane_config_talbe\030\007 \001(\0132(.apollo.pla"
  "nning.MoveDestLaneConfigTable\022)\n\033move_de"
  "st_lane_compensation\030\010 \001(\001:\0040.35\022\036\n\023max_"
  "kappa_threshold\030\t \001(\001:\0010\022,\n!kappa_move_d"
  "est_lane_compensation\030\n \001(\001:\0010\022 \n\025start_"
  "plan_point_from\030\013 \001(\r:\0010\"N\n\027MoveDestLane"
  "ConfigTable\0223\n\rlateral_shift\030\001 \003(\0132\034.apo"
  "llo.planning.ShiftConfig\"O\n\013ShiftConfig\022"
  "\027\n\tmax_speed\030\001 \001(\001:\0044.16\022\'\n\032max_move_des"
  "t_lane_shift_y\030\003 \001(\001:\0030.4"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_sccs[3] = {
  &scc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base,
  &scc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base,
  &scc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto, "modules/planning/proto/navi_path_decider_config.proto", 705,
  &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto, 3, file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void NaviPathDeciderConfig::InitAsDefaultInstance() {
  ::apollo::planning::_NaviPathDeciderConfig_default_instance_._instance.get_mutable()->move_dest_lane_config_talbe_ = const_cast< ::apollo::planning::MoveDestLaneConfigTable*>(
      ::apollo::planning::MoveDestLaneConfigTable::internal_default_instance());
}
class NaviPathDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviPathDeciderConfig>()._has_bits_);
  static void set_has_min_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_look_forward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_keep_lane_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_keep_lane_shift_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_keep_lane_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_keep_lane_shift_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::planning::MoveDestLaneConfigTable& move_dest_lane_config_talbe(const NaviPathDeciderConfig* msg);
  static void set_has_move_dest_lane_config_talbe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_move_dest_lane_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_kappa_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kappa_move_dest_lane_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_plan_point_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning::MoveDestLaneConfigTable&
NaviPathDeciderConfig::_Internal::move_dest_lane_config_talbe(const NaviPathDeciderConfig* msg) {
  return *msg->move_dest_lane_config_talbe_;
}
NaviPathDeciderConfig::NaviPathDeciderConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NaviPathDeciderConfig)
}
NaviPathDeciderConfig::NaviPathDeciderConfig(const NaviPathDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_move_dest_lane_config_talbe()) {
    move_dest_lane_config_talbe_ = new ::apollo::planning::MoveDestLaneConfigTable(*from.move_dest_lane_config_talbe_);
  } else {
    move_dest_lane_config_talbe_ = nullptr;
  }
  ::memcpy(&max_kappa_threshold_, &from.max_kappa_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_dest_lane_compensation_) -
    reinterpret_cast<char*>(&max_kappa_threshold_)) + sizeof(move_dest_lane_compensation_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviPathDeciderConfig)
}

void NaviPathDeciderConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base);
  ::memset(&move_dest_lane_config_talbe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_plan_point_from_) -
      reinterpret_cast<char*>(&move_dest_lane_config_talbe_)) + sizeof(start_plan_point_from_));
  min_look_forward_time_ = 2u;
  min_path_length_ = 5;
  max_keep_lane_distance_ = 0.8;
  max_keep_lane_shift_y_ = 20;
  min_keep_lane_offset_ = 15;
  keep_lane_shift_compensation_ = 0.01;
  move_dest_lane_compensation_ = 0.35;
}

NaviPathDeciderConfig::~NaviPathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviPathDeciderConfig)
  SharedDtor();
}

void NaviPathDeciderConfig::SharedDtor() {
  if (this != internal_default_instance()) delete move_dest_lane_config_talbe_;
}

void NaviPathDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NaviPathDeciderConfig& NaviPathDeciderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NaviPathDeciderConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void NaviPathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviPathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(move_dest_lane_config_talbe_ != nullptr);
    move_dest_lane_config_talbe_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&max_kappa_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_plan_point_from_) -
        reinterpret_cast<char*>(&max_kappa_threshold_)) + sizeof(start_plan_point_from_));
    min_look_forward_time_ = 2u;
    min_path_length_ = 5;
    max_keep_lane_distance_ = 0.8;
    max_keep_lane_shift_y_ = 20;
  }
  if (cached_has_bits & 0x00000700u) {
    min_keep_lane_offset_ = 15;
    keep_lane_shift_compensation_ = 0.01;
    move_dest_lane_compensation_ = 0.35;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NaviPathDeciderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double min_path_length = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_min_path_length(&has_bits);
          min_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_look_forward_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_look_forward_time(&has_bits);
          min_look_forward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_keep_lane_distance = 3 [default = 0.8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_keep_lane_distance(&has_bits);
          max_keep_lane_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_keep_lane_shift_y = 4 [default = 20];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_keep_lane_shift_y(&has_bits);
          max_keep_lane_shift_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_keep_lane_offset = 5 [default = 15];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_min_keep_lane_offset(&has_bits);
          min_keep_lane_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double keep_lane_shift_compensation = 6 [default = 0.01];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_keep_lane_shift_compensation(&has_bits);
          keep_lane_shift_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_dest_lane_config_talbe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double move_dest_lane_compensation = 8 [default = 0.35];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_move_dest_lane_compensation(&has_bits);
          move_dest_lane_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_kappa_threshold = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_max_kappa_threshold(&has_bits);
          max_kappa_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_kappa_move_dest_lane_compensation(&has_bits);
          kappa_move_dest_lane_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_plan_point_from = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_start_plan_point_from(&has_bits);
          start_plan_point_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaviPathDeciderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviPathDeciderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_path_length(), target);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min_look_forward_time(), target);
  }

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_keep_lane_distance(), target);
  }

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_keep_lane_shift_y(), target);
  }

  // optional double min_keep_lane_offset = 5 [default = 15];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_keep_lane_offset(), target);
  }

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_keep_lane_shift_compensation(), target);
  }

  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::move_dest_lane_config_talbe(this), target, stream);
  }

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_move_dest_lane_compensation(), target);
  }

  // optional double max_kappa_threshold = 9 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_max_kappa_threshold(), target);
  }

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_kappa_move_dest_lane_compensation(), target);
  }

  // optional uint32 start_plan_point_from = 11 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_start_plan_point_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviPathDeciderConfig)
  return target;
}

size_t NaviPathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviPathDeciderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *move_dest_lane_config_talbe_);
    }

    // optional double max_kappa_threshold = 9 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 start_plan_point_from = 11 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_plan_point_from());
    }

    // optional uint32 min_look_forward_time = 2 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_look_forward_time());
    }

    // optional double min_path_length = 1 [default = 5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_distance = 3 [default = 0.8];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double max_keep_lane_shift_y = 4 [default = 20];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double min_keep_lane_offset = 5 [default = 15];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double keep_lane_shift_compensation = 6 [default = 0.01];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double move_dest_lane_compensation = 8 [default = 0.35];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaviPathDeciderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaviPathDeciderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NaviPathDeciderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NaviPathDeciderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NaviPathDeciderConfig)
    MergeFrom(*source);
  }
}

void NaviPathDeciderConfig::MergeFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_move_dest_lane_config_talbe()->::apollo::planning::MoveDestLaneConfigTable::MergeFrom(from._internal_move_dest_lane_config_talbe());
    }
    if (cached_has_bits & 0x00000002u) {
      max_kappa_threshold_ = from.max_kappa_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      kappa_move_dest_lane_compensation_ = from.kappa_move_dest_lane_compensation_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_plan_point_from_ = from.start_plan_point_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_look_forward_time_ = from.min_look_forward_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_path_length_ = from.min_path_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_keep_lane_distance_ = from.max_keep_lane_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_keep_lane_shift_y_ = from.max_keep_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      min_keep_lane_offset_ = from.min_keep_lane_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      keep_lane_shift_compensation_ = from.keep_lane_shift_compensation_;
    }
    if (cached_has_bits & 0x00000400u) {
      move_dest_lane_compensation_ = from.move_dest_lane_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NaviPathDeciderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NaviPathDeciderConfig::CopyFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPathDeciderConfig::IsInitialized() const {
  return true;
}

void NaviPathDeciderConfig::InternalSwap(NaviPathDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(move_dest_lane_config_talbe_, other->move_dest_lane_config_talbe_);
  swap(max_kappa_threshold_, other->max_kappa_threshold_);
  swap(kappa_move_dest_lane_compensation_, other->kappa_move_dest_lane_compensation_);
  swap(start_plan_point_from_, other->start_plan_point_from_);
  swap(min_look_forward_time_, other->min_look_forward_time_);
  swap(min_path_length_, other->min_path_length_);
  swap(max_keep_lane_distance_, other->max_keep_lane_distance_);
  swap(max_keep_lane_shift_y_, other->max_keep_lane_shift_y_);
  swap(min_keep_lane_offset_, other->min_keep_lane_offset_);
  swap(keep_lane_shift_compensation_, other->keep_lane_shift_compensation_);
  swap(move_dest_lane_compensation_, other->move_dest_lane_compensation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviPathDeciderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveDestLaneConfigTable::InitAsDefaultInstance() {
}
class MoveDestLaneConfigTable::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveDestLaneConfigTable>()._has_bits_);
};

MoveDestLaneConfigTable::MoveDestLaneConfigTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.MoveDestLaneConfigTable)
}
MoveDestLaneConfigTable::MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lateral_shift_(from.lateral_shift_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MoveDestLaneConfigTable)
}

void MoveDestLaneConfigTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base);
}

MoveDestLaneConfigTable::~MoveDestLaneConfigTable() {
  // @@protoc_insertion_point(destructor:apollo.planning.MoveDestLaneConfigTable)
  SharedDtor();
}

void MoveDestLaneConfigTable::SharedDtor() {
}

void MoveDestLaneConfigTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveDestLaneConfigTable& MoveDestLaneConfigTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveDestLaneConfigTable_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MoveDestLaneConfigTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MoveDestLaneConfigTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lateral_shift_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoveDestLaneConfigTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lateral_shift(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveDestLaneConfigTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MoveDestLaneConfigTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lateral_shift_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lateral_shift(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MoveDestLaneConfigTable)
  return target;
}

size_t MoveDestLaneConfigTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MoveDestLaneConfigTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  total_size += 1UL * this->_internal_lateral_shift_size();
  for (const auto& msg : this->lateral_shift_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveDestLaneConfigTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveDestLaneConfigTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveDestLaneConfigTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.MoveDestLaneConfigTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.MoveDestLaneConfigTable)
    MergeFrom(*source);
  }
}

void MoveDestLaneConfigTable::MergeFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MoveDestLaneConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lateral_shift_.MergeFrom(from.lateral_shift_);
}

void MoveDestLaneConfigTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveDestLaneConfigTable::CopyFrom(const MoveDestLaneConfigTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MoveDestLaneConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveDestLaneConfigTable::IsInitialized() const {
  return true;
}

void MoveDestLaneConfigTable::InternalSwap(MoveDestLaneConfigTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lateral_shift_.InternalSwap(&other->lateral_shift_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveDestLaneConfigTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShiftConfig::InitAsDefaultInstance() {
}
class ShiftConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ShiftConfig>()._has_bits_);
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_move_dest_lane_shift_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShiftConfig::ShiftConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ShiftConfig)
}
ShiftConfig::ShiftConfig(const ShiftConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_speed_, &from.max_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_move_dest_lane_shift_y_) -
    reinterpret_cast<char*>(&max_speed_)) + sizeof(max_move_dest_lane_shift_y_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ShiftConfig)
}

void ShiftConfig::SharedCtor() {
  max_speed_ = 4.16;
  max_move_dest_lane_shift_y_ = 0.4;
}

ShiftConfig::~ShiftConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ShiftConfig)
  SharedDtor();
}

void ShiftConfig::SharedDtor() {
}

void ShiftConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShiftConfig& ShiftConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShiftConfig_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ShiftConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    max_speed_ = 4.16;
    max_move_dest_lane_shift_y_ = 0.4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ShiftConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double max_speed = 1 [default = 4.16];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_speed(&has_bits);
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_move_dest_lane_shift_y(&has_bits);
          max_move_dest_lane_shift_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ShiftConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_speed(), target);
  }

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_move_dest_lane_shift_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ShiftConfig)
  return target;
}

size_t ShiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ShiftConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double max_speed = 1 [default = 4.16];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShiftConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ShiftConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShiftConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ShiftConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ShiftConfig)
    MergeFrom(*source);
  }
}

void ShiftConfig::MergeFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_move_dest_lane_shift_y_ = from.max_move_dest_lane_shift_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShiftConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftConfig::CopyFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftConfig::IsInitialized() const {
  return true;
}

void ShiftConfig::InternalSwap(ShiftConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_speed_, other->max_speed_);
  swap(max_move_dest_lane_shift_y_, other->max_move_dest_lane_shift_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::NaviPathDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NaviPathDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MoveDestLaneConfigTable* Arena::CreateMaybeMessage< ::apollo::planning::MoveDestLaneConfigTable >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::MoveDestLaneConfigTable >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage< ::apollo::planning::ShiftConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ShiftConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
