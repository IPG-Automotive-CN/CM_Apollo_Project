// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_st_speed_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto;
namespace apollo {
namespace planning {
class DpStSpeedConfig;
class DpStSpeedConfigDefaultTypeInternal;
extern DpStSpeedConfigDefaultTypeInternal _DpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::DpStSpeedConfig* Arena::CreateMaybeMessage<::apollo::planning::DpStSpeedConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class DpStSpeedConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DpStSpeedConfig) */ {
 public:
  DpStSpeedConfig();
  virtual ~DpStSpeedConfig();

  DpStSpeedConfig(const DpStSpeedConfig& from);
  DpStSpeedConfig(DpStSpeedConfig&& from) noexcept
    : DpStSpeedConfig() {
    *this = ::std::move(from);
  }

  inline DpStSpeedConfig& operator=(const DpStSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpStSpeedConfig& operator=(DpStSpeedConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DpStSpeedConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DpStSpeedConfig* internal_default_instance() {
    return reinterpret_cast<const DpStSpeedConfig*>(
               &_DpStSpeedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DpStSpeedConfig& a, DpStSpeedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DpStSpeedConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DpStSpeedConfig* New() const final {
    return CreateMaybeMessage<DpStSpeedConfig>(nullptr);
  }

  DpStSpeedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DpStSpeedConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DpStSpeedConfig& from);
  void MergeFrom(const DpStSpeedConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpStSpeedConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DpStSpeedConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedWeightFieldNumber = 10,
    kReferenceWeightFieldNumber = 14,
    kExceedSoftSpeedPenaltyFieldNumber = 34,
    kLowSoftSpeedPenaltyFieldNumber = 35,
    kMatrixDimensionSFieldNumber = 1,
    kMatrixDimensionTFieldNumber = 2,
    kAccelWeightFieldNumber = 11,
    kJerkWeightFieldNumber = 12,
    kObstacleWeightFieldNumber = 13,
    kGoDownBufferFieldNumber = 15,
    kGoUpBufferFieldNumber = 16,
    kDefaultObstacleCostFieldNumber = 20,
    kDefaultSpeedCostFieldNumber = 31,
    kExceedSpeedPenaltyFieldNumber = 32,
    kLowSpeedPenaltyFieldNumber = 33,
    kReferenceSpeedPenaltyFieldNumber = 36,
    kKeepClearLowSpeedPenaltyFieldNumber = 37,
    kAccelPenaltyFieldNumber = 40,
    kDecelPenaltyFieldNumber = 41,
    kPositiveJerkCoeffFieldNumber = 50,
    kNegativeJerkCoeffFieldNumber = 51,
    kMaxAccelerationFieldNumber = 60,
    kMaxDecelerationFieldNumber = 61,
    kSafeTimeBufferFieldNumber = 70,
    kSafeDistanceFieldNumber = 71,
  };
  // optional double speed_weight = 10 [default = 0];
  bool has_speed_weight() const;
  private:
  bool _internal_has_speed_weight() const;
  public:
  void clear_speed_weight();
  double speed_weight() const;
  void set_speed_weight(double value);
  private:
  double _internal_speed_weight() const;
  void _internal_set_speed_weight(double value);
  public:

  // optional double reference_weight = 14 [default = 0];
  bool has_reference_weight() const;
  private:
  bool _internal_has_reference_weight() const;
  public:
  void clear_reference_weight();
  double reference_weight() const;
  void set_reference_weight(double value);
  private:
  double _internal_reference_weight() const;
  void _internal_set_reference_weight(double value);
  public:

  // optional double exceed_soft_speed_penalty = 34 [default = 0];
  bool has_exceed_soft_speed_penalty() const;
  private:
  bool _internal_has_exceed_soft_speed_penalty() const;
  public:
  void clear_exceed_soft_speed_penalty();
  double exceed_soft_speed_penalty() const;
  void set_exceed_soft_speed_penalty(double value);
  private:
  double _internal_exceed_soft_speed_penalty() const;
  void _internal_set_exceed_soft_speed_penalty(double value);
  public:

  // optional double low_soft_speed_penalty = 35 [default = 0];
  bool has_low_soft_speed_penalty() const;
  private:
  bool _internal_has_low_soft_speed_penalty() const;
  public:
  void clear_low_soft_speed_penalty();
  double low_soft_speed_penalty() const;
  void set_low_soft_speed_penalty(double value);
  private:
  double _internal_low_soft_speed_penalty() const;
  void _internal_set_low_soft_speed_penalty(double value);
  public:

  // optional int32 matrix_dimension_s = 1 [default = 100];
  bool has_matrix_dimension_s() const;
  private:
  bool _internal_has_matrix_dimension_s() const;
  public:
  void clear_matrix_dimension_s();
  ::PROTOBUF_NAMESPACE_ID::int32 matrix_dimension_s() const;
  void set_matrix_dimension_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matrix_dimension_s() const;
  void _internal_set_matrix_dimension_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 matrix_dimension_t = 2 [default = 10];
  bool has_matrix_dimension_t() const;
  private:
  bool _internal_has_matrix_dimension_t() const;
  public:
  void clear_matrix_dimension_t();
  ::PROTOBUF_NAMESPACE_ID::int32 matrix_dimension_t() const;
  void set_matrix_dimension_t(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matrix_dimension_t() const;
  void _internal_set_matrix_dimension_t(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double accel_weight = 11 [default = 10];
  bool has_accel_weight() const;
  private:
  bool _internal_has_accel_weight() const;
  public:
  void clear_accel_weight();
  double accel_weight() const;
  void set_accel_weight(double value);
  private:
  double _internal_accel_weight() const;
  void _internal_set_accel_weight(double value);
  public:

  // optional double jerk_weight = 12 [default = 10];
  bool has_jerk_weight() const;
  private:
  bool _internal_has_jerk_weight() const;
  public:
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // optional double obstacle_weight = 13 [default = 1];
  bool has_obstacle_weight() const;
  private:
  bool _internal_has_obstacle_weight() const;
  public:
  void clear_obstacle_weight();
  double obstacle_weight() const;
  void set_obstacle_weight(double value);
  private:
  double _internal_obstacle_weight() const;
  void _internal_set_obstacle_weight(double value);
  public:

  // optional double go_down_buffer = 15 [default = 5];
  bool has_go_down_buffer() const;
  private:
  bool _internal_has_go_down_buffer() const;
  public:
  void clear_go_down_buffer();
  double go_down_buffer() const;
  void set_go_down_buffer(double value);
  private:
  double _internal_go_down_buffer() const;
  void _internal_set_go_down_buffer(double value);
  public:

  // optional double go_up_buffer = 16 [default = 5];
  bool has_go_up_buffer() const;
  private:
  bool _internal_has_go_up_buffer() const;
  public:
  void clear_go_up_buffer();
  double go_up_buffer() const;
  void set_go_up_buffer(double value);
  private:
  double _internal_go_up_buffer() const;
  void _internal_set_go_up_buffer(double value);
  public:

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  bool has_default_obstacle_cost() const;
  private:
  bool _internal_has_default_obstacle_cost() const;
  public:
  void clear_default_obstacle_cost();
  double default_obstacle_cost() const;
  void set_default_obstacle_cost(double value);
  private:
  double _internal_default_obstacle_cost() const;
  void _internal_set_default_obstacle_cost(double value);
  public:

  // optional double default_speed_cost = 31 [default = 1];
  bool has_default_speed_cost() const;
  private:
  bool _internal_has_default_speed_cost() const;
  public:
  void clear_default_speed_cost();
  double default_speed_cost() const;
  void set_default_speed_cost(double value);
  private:
  double _internal_default_speed_cost() const;
  void _internal_set_default_speed_cost(double value);
  public:

  // optional double exceed_speed_penalty = 32 [default = 10];
  bool has_exceed_speed_penalty() const;
  private:
  bool _internal_has_exceed_speed_penalty() const;
  public:
  void clear_exceed_speed_penalty();
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);
  private:
  double _internal_exceed_speed_penalty() const;
  void _internal_set_exceed_speed_penalty(double value);
  public:

  // optional double low_speed_penalty = 33 [default = 2.5];
  bool has_low_speed_penalty() const;
  private:
  bool _internal_has_low_speed_penalty() const;
  public:
  void clear_low_speed_penalty();
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);
  private:
  double _internal_low_speed_penalty() const;
  void _internal_set_low_speed_penalty(double value);
  public:

  // optional double reference_speed_penalty = 36 [default = 1];
  bool has_reference_speed_penalty() const;
  private:
  bool _internal_has_reference_speed_penalty() const;
  public:
  void clear_reference_speed_penalty();
  double reference_speed_penalty() const;
  void set_reference_speed_penalty(double value);
  private:
  double _internal_reference_speed_penalty() const;
  void _internal_set_reference_speed_penalty(double value);
  public:

  // optional double keep_clear_low_speed_penalty = 37 [default = 10];
  bool has_keep_clear_low_speed_penalty() const;
  private:
  bool _internal_has_keep_clear_low_speed_penalty() const;
  public:
  void clear_keep_clear_low_speed_penalty();
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);
  private:
  double _internal_keep_clear_low_speed_penalty() const;
  void _internal_set_keep_clear_low_speed_penalty(double value);
  public:

  // optional double accel_penalty = 40 [default = 2];
  bool has_accel_penalty() const;
  private:
  bool _internal_has_accel_penalty() const;
  public:
  void clear_accel_penalty();
  double accel_penalty() const;
  void set_accel_penalty(double value);
  private:
  double _internal_accel_penalty() const;
  void _internal_set_accel_penalty(double value);
  public:

  // optional double decel_penalty = 41 [default = 2];
  bool has_decel_penalty() const;
  private:
  bool _internal_has_decel_penalty() const;
  public:
  void clear_decel_penalty();
  double decel_penalty() const;
  void set_decel_penalty(double value);
  private:
  double _internal_decel_penalty() const;
  void _internal_set_decel_penalty(double value);
  public:

  // optional double positive_jerk_coeff = 50 [default = 1];
  bool has_positive_jerk_coeff() const;
  private:
  bool _internal_has_positive_jerk_coeff() const;
  public:
  void clear_positive_jerk_coeff();
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);
  private:
  double _internal_positive_jerk_coeff() const;
  void _internal_set_positive_jerk_coeff(double value);
  public:

  // optional double negative_jerk_coeff = 51 [default = 300];
  bool has_negative_jerk_coeff() const;
  private:
  bool _internal_has_negative_jerk_coeff() const;
  public:
  void clear_negative_jerk_coeff();
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);
  private:
  double _internal_negative_jerk_coeff() const;
  void _internal_set_negative_jerk_coeff(double value);
  public:

  // optional double max_acceleration = 60 [default = 4.5];
  bool has_max_acceleration() const;
  private:
  bool _internal_has_max_acceleration() const;
  public:
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // optional double max_deceleration = 61 [default = -4.5];
  bool has_max_deceleration() const;
  private:
  bool _internal_has_max_deceleration() const;
  public:
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // optional double safe_time_buffer = 70 [default = 3];
  bool has_safe_time_buffer() const;
  private:
  bool _internal_has_safe_time_buffer() const;
  public:
  void clear_safe_time_buffer();
  double safe_time_buffer() const;
  void set_safe_time_buffer(double value);
  private:
  double _internal_safe_time_buffer() const;
  void _internal_set_safe_time_buffer(double value);
  public:

  // optional double safe_distance = 71 [default = 20];
  bool has_safe_distance() const;
  private:
  bool _internal_has_safe_distance() const;
  public:
  void clear_safe_distance();
  double safe_distance() const;
  void set_safe_distance(double value);
  private:
  double _internal_safe_distance() const;
  void _internal_set_safe_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.DpStSpeedConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double speed_weight_;
  double reference_weight_;
  double exceed_soft_speed_penalty_;
  double low_soft_speed_penalty_;
  ::PROTOBUF_NAMESPACE_ID::int32 matrix_dimension_s_;
  ::PROTOBUF_NAMESPACE_ID::int32 matrix_dimension_t_;
  double accel_weight_;
  double jerk_weight_;
  double obstacle_weight_;
  double go_down_buffer_;
  double go_up_buffer_;
  double default_obstacle_cost_;
  double default_speed_cost_;
  double exceed_speed_penalty_;
  double low_speed_penalty_;
  double reference_speed_penalty_;
  double keep_clear_low_speed_penalty_;
  double accel_penalty_;
  double decel_penalty_;
  double positive_jerk_coeff_;
  double negative_jerk_coeff_;
  double max_acceleration_;
  double max_deceleration_;
  double safe_time_buffer_;
  double safe_distance_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DpStSpeedConfig

// optional int32 matrix_dimension_s = 1 [default = 100];
inline bool DpStSpeedConfig::_internal_has_matrix_dimension_s() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_matrix_dimension_s() const {
  return _internal_has_matrix_dimension_s();
}
inline void DpStSpeedConfig::clear_matrix_dimension_s() {
  matrix_dimension_s_ = 100;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DpStSpeedConfig::_internal_matrix_dimension_s() const {
  return matrix_dimension_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DpStSpeedConfig::matrix_dimension_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.matrix_dimension_s)
  return _internal_matrix_dimension_s();
}
inline void DpStSpeedConfig::_internal_set_matrix_dimension_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  matrix_dimension_s_ = value;
}
inline void DpStSpeedConfig::set_matrix_dimension_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matrix_dimension_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.matrix_dimension_s)
}

// optional int32 matrix_dimension_t = 2 [default = 10];
inline bool DpStSpeedConfig::_internal_has_matrix_dimension_t() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_matrix_dimension_t() const {
  return _internal_has_matrix_dimension_t();
}
inline void DpStSpeedConfig::clear_matrix_dimension_t() {
  matrix_dimension_t_ = 10;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DpStSpeedConfig::_internal_matrix_dimension_t() const {
  return matrix_dimension_t_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DpStSpeedConfig::matrix_dimension_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.matrix_dimension_t)
  return _internal_matrix_dimension_t();
}
inline void DpStSpeedConfig::_internal_set_matrix_dimension_t(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  matrix_dimension_t_ = value;
}
inline void DpStSpeedConfig::set_matrix_dimension_t(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matrix_dimension_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.matrix_dimension_t)
}

// optional double speed_weight = 10 [default = 0];
inline bool DpStSpeedConfig::_internal_has_speed_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_speed_weight() const {
  return _internal_has_speed_weight();
}
inline void DpStSpeedConfig::clear_speed_weight() {
  speed_weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DpStSpeedConfig::_internal_speed_weight() const {
  return speed_weight_;
}
inline double DpStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.speed_weight)
  return _internal_speed_weight();
}
inline void DpStSpeedConfig::_internal_set_speed_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  speed_weight_ = value;
}
inline void DpStSpeedConfig::set_speed_weight(double value) {
  _internal_set_speed_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.speed_weight)
}

// optional double accel_weight = 11 [default = 10];
inline bool DpStSpeedConfig::_internal_has_accel_weight() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_accel_weight() const {
  return _internal_has_accel_weight();
}
inline void DpStSpeedConfig::clear_accel_weight() {
  accel_weight_ = 10;
  _has_bits_[0] &= ~0x00000040u;
}
inline double DpStSpeedConfig::_internal_accel_weight() const {
  return accel_weight_;
}
inline double DpStSpeedConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.accel_weight)
  return _internal_accel_weight();
}
inline void DpStSpeedConfig::_internal_set_accel_weight(double value) {
  _has_bits_[0] |= 0x00000040u;
  accel_weight_ = value;
}
inline void DpStSpeedConfig::set_accel_weight(double value) {
  _internal_set_accel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.accel_weight)
}

// optional double jerk_weight = 12 [default = 10];
inline bool DpStSpeedConfig::_internal_has_jerk_weight() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_jerk_weight() const {
  return _internal_has_jerk_weight();
}
inline void DpStSpeedConfig::clear_jerk_weight() {
  jerk_weight_ = 10;
  _has_bits_[0] &= ~0x00000080u;
}
inline double DpStSpeedConfig::_internal_jerk_weight() const {
  return jerk_weight_;
}
inline double DpStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void DpStSpeedConfig::_internal_set_jerk_weight(double value) {
  _has_bits_[0] |= 0x00000080u;
  jerk_weight_ = value;
}
inline void DpStSpeedConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 13 [default = 1];
inline bool DpStSpeedConfig::_internal_has_obstacle_weight() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_obstacle_weight() const {
  return _internal_has_obstacle_weight();
}
inline void DpStSpeedConfig::clear_obstacle_weight() {
  obstacle_weight_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline double DpStSpeedConfig::_internal_obstacle_weight() const {
  return obstacle_weight_;
}
inline double DpStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.obstacle_weight)
  return _internal_obstacle_weight();
}
inline void DpStSpeedConfig::_internal_set_obstacle_weight(double value) {
  _has_bits_[0] |= 0x00000100u;
  obstacle_weight_ = value;
}
inline void DpStSpeedConfig::set_obstacle_weight(double value) {
  _internal_set_obstacle_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.obstacle_weight)
}

// optional double reference_weight = 14 [default = 0];
inline bool DpStSpeedConfig::_internal_has_reference_weight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_reference_weight() const {
  return _internal_has_reference_weight();
}
inline void DpStSpeedConfig::clear_reference_weight() {
  reference_weight_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DpStSpeedConfig::_internal_reference_weight() const {
  return reference_weight_;
}
inline double DpStSpeedConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.reference_weight)
  return _internal_reference_weight();
}
inline void DpStSpeedConfig::_internal_set_reference_weight(double value) {
  _has_bits_[0] |= 0x00000002u;
  reference_weight_ = value;
}
inline void DpStSpeedConfig::set_reference_weight(double value) {
  _internal_set_reference_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.reference_weight)
}

// optional double go_down_buffer = 15 [default = 5];
inline bool DpStSpeedConfig::_internal_has_go_down_buffer() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_go_down_buffer() const {
  return _internal_has_go_down_buffer();
}
inline void DpStSpeedConfig::clear_go_down_buffer() {
  go_down_buffer_ = 5;
  _has_bits_[0] &= ~0x00000200u;
}
inline double DpStSpeedConfig::_internal_go_down_buffer() const {
  return go_down_buffer_;
}
inline double DpStSpeedConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.go_down_buffer)
  return _internal_go_down_buffer();
}
inline void DpStSpeedConfig::_internal_set_go_down_buffer(double value) {
  _has_bits_[0] |= 0x00000200u;
  go_down_buffer_ = value;
}
inline void DpStSpeedConfig::set_go_down_buffer(double value) {
  _internal_set_go_down_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.go_down_buffer)
}

// optional double go_up_buffer = 16 [default = 5];
inline bool DpStSpeedConfig::_internal_has_go_up_buffer() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_go_up_buffer() const {
  return _internal_has_go_up_buffer();
}
inline void DpStSpeedConfig::clear_go_up_buffer() {
  go_up_buffer_ = 5;
  _has_bits_[0] &= ~0x00000400u;
}
inline double DpStSpeedConfig::_internal_go_up_buffer() const {
  return go_up_buffer_;
}
inline double DpStSpeedConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.go_up_buffer)
  return _internal_go_up_buffer();
}
inline void DpStSpeedConfig::_internal_set_go_up_buffer(double value) {
  _has_bits_[0] |= 0x00000400u;
  go_up_buffer_ = value;
}
inline void DpStSpeedConfig::set_go_up_buffer(double value) {
  _internal_set_go_up_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 20 [default = 10000000000];
inline bool DpStSpeedConfig::_internal_has_default_obstacle_cost() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_default_obstacle_cost() const {
  return _internal_has_default_obstacle_cost();
}
inline void DpStSpeedConfig::clear_default_obstacle_cost() {
  default_obstacle_cost_ = 10000000000;
  _has_bits_[0] &= ~0x00000800u;
}
inline double DpStSpeedConfig::_internal_default_obstacle_cost() const {
  return default_obstacle_cost_;
}
inline double DpStSpeedConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.default_obstacle_cost)
  return _internal_default_obstacle_cost();
}
inline void DpStSpeedConfig::_internal_set_default_obstacle_cost(double value) {
  _has_bits_[0] |= 0x00000800u;
  default_obstacle_cost_ = value;
}
inline void DpStSpeedConfig::set_default_obstacle_cost(double value) {
  _internal_set_default_obstacle_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 31 [default = 1];
inline bool DpStSpeedConfig::_internal_has_default_speed_cost() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_default_speed_cost() const {
  return _internal_has_default_speed_cost();
}
inline void DpStSpeedConfig::clear_default_speed_cost() {
  default_speed_cost_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline double DpStSpeedConfig::_internal_default_speed_cost() const {
  return default_speed_cost_;
}
inline double DpStSpeedConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.default_speed_cost)
  return _internal_default_speed_cost();
}
inline void DpStSpeedConfig::_internal_set_default_speed_cost(double value) {
  _has_bits_[0] |= 0x00001000u;
  default_speed_cost_ = value;
}
inline void DpStSpeedConfig::set_default_speed_cost(double value) {
  _internal_set_default_speed_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 32 [default = 10];
inline bool DpStSpeedConfig::_internal_has_exceed_speed_penalty() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_exceed_speed_penalty() const {
  return _internal_has_exceed_speed_penalty();
}
inline void DpStSpeedConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 10;
  _has_bits_[0] &= ~0x00002000u;
}
inline double DpStSpeedConfig::_internal_exceed_speed_penalty() const {
  return exceed_speed_penalty_;
}
inline double DpStSpeedConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.exceed_speed_penalty)
  return _internal_exceed_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_exceed_speed_penalty(double value) {
  _has_bits_[0] |= 0x00002000u;
  exceed_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_exceed_speed_penalty(double value) {
  _internal_set_exceed_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 33 [default = 2.5];
inline bool DpStSpeedConfig::_internal_has_low_speed_penalty() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_low_speed_penalty() const {
  return _internal_has_low_speed_penalty();
}
inline void DpStSpeedConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 2.5;
  _has_bits_[0] &= ~0x00004000u;
}
inline double DpStSpeedConfig::_internal_low_speed_penalty() const {
  return low_speed_penalty_;
}
inline double DpStSpeedConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.low_speed_penalty)
  return _internal_low_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_low_speed_penalty(double value) {
  _has_bits_[0] |= 0x00004000u;
  low_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_low_speed_penalty(double value) {
  _internal_set_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.low_speed_penalty)
}

// optional double exceed_soft_speed_penalty = 34 [default = 0];
inline bool DpStSpeedConfig::_internal_has_exceed_soft_speed_penalty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_exceed_soft_speed_penalty() const {
  return _internal_has_exceed_soft_speed_penalty();
}
inline void DpStSpeedConfig::clear_exceed_soft_speed_penalty() {
  exceed_soft_speed_penalty_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DpStSpeedConfig::_internal_exceed_soft_speed_penalty() const {
  return exceed_soft_speed_penalty_;
}
inline double DpStSpeedConfig::exceed_soft_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.exceed_soft_speed_penalty)
  return _internal_exceed_soft_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_exceed_soft_speed_penalty(double value) {
  _has_bits_[0] |= 0x00000004u;
  exceed_soft_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_exceed_soft_speed_penalty(double value) {
  _internal_set_exceed_soft_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.exceed_soft_speed_penalty)
}

// optional double low_soft_speed_penalty = 35 [default = 0];
inline bool DpStSpeedConfig::_internal_has_low_soft_speed_penalty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_low_soft_speed_penalty() const {
  return _internal_has_low_soft_speed_penalty();
}
inline void DpStSpeedConfig::clear_low_soft_speed_penalty() {
  low_soft_speed_penalty_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DpStSpeedConfig::_internal_low_soft_speed_penalty() const {
  return low_soft_speed_penalty_;
}
inline double DpStSpeedConfig::low_soft_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.low_soft_speed_penalty)
  return _internal_low_soft_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_low_soft_speed_penalty(double value) {
  _has_bits_[0] |= 0x00000008u;
  low_soft_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_low_soft_speed_penalty(double value) {
  _internal_set_low_soft_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.low_soft_speed_penalty)
}

// optional double reference_speed_penalty = 36 [default = 1];
inline bool DpStSpeedConfig::_internal_has_reference_speed_penalty() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_reference_speed_penalty() const {
  return _internal_has_reference_speed_penalty();
}
inline void DpStSpeedConfig::clear_reference_speed_penalty() {
  reference_speed_penalty_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline double DpStSpeedConfig::_internal_reference_speed_penalty() const {
  return reference_speed_penalty_;
}
inline double DpStSpeedConfig::reference_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.reference_speed_penalty)
  return _internal_reference_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_reference_speed_penalty(double value) {
  _has_bits_[0] |= 0x00008000u;
  reference_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_reference_speed_penalty(double value) {
  _internal_set_reference_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.reference_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 37 [default = 10];
inline bool DpStSpeedConfig::_internal_has_keep_clear_low_speed_penalty() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_keep_clear_low_speed_penalty() const {
  return _internal_has_keep_clear_low_speed_penalty();
}
inline void DpStSpeedConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 10;
  _has_bits_[0] &= ~0x00010000u;
}
inline double DpStSpeedConfig::_internal_keep_clear_low_speed_penalty() const {
  return keep_clear_low_speed_penalty_;
}
inline double DpStSpeedConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
  return _internal_keep_clear_low_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_keep_clear_low_speed_penalty(double value) {
  _has_bits_[0] |= 0x00010000u;
  keep_clear_low_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_keep_clear_low_speed_penalty(double value) {
  _internal_set_keep_clear_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 40 [default = 2];
inline bool DpStSpeedConfig::_internal_has_accel_penalty() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_accel_penalty() const {
  return _internal_has_accel_penalty();
}
inline void DpStSpeedConfig::clear_accel_penalty() {
  accel_penalty_ = 2;
  _has_bits_[0] &= ~0x00020000u;
}
inline double DpStSpeedConfig::_internal_accel_penalty() const {
  return accel_penalty_;
}
inline double DpStSpeedConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.accel_penalty)
  return _internal_accel_penalty();
}
inline void DpStSpeedConfig::_internal_set_accel_penalty(double value) {
  _has_bits_[0] |= 0x00020000u;
  accel_penalty_ = value;
}
inline void DpStSpeedConfig::set_accel_penalty(double value) {
  _internal_set_accel_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.accel_penalty)
}

// optional double decel_penalty = 41 [default = 2];
inline bool DpStSpeedConfig::_internal_has_decel_penalty() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_decel_penalty() const {
  return _internal_has_decel_penalty();
}
inline void DpStSpeedConfig::clear_decel_penalty() {
  decel_penalty_ = 2;
  _has_bits_[0] &= ~0x00040000u;
}
inline double DpStSpeedConfig::_internal_decel_penalty() const {
  return decel_penalty_;
}
inline double DpStSpeedConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.decel_penalty)
  return _internal_decel_penalty();
}
inline void DpStSpeedConfig::_internal_set_decel_penalty(double value) {
  _has_bits_[0] |= 0x00040000u;
  decel_penalty_ = value;
}
inline void DpStSpeedConfig::set_decel_penalty(double value) {
  _internal_set_decel_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 50 [default = 1];
inline bool DpStSpeedConfig::_internal_has_positive_jerk_coeff() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_positive_jerk_coeff() const {
  return _internal_has_positive_jerk_coeff();
}
inline void DpStSpeedConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 1;
  _has_bits_[0] &= ~0x00080000u;
}
inline double DpStSpeedConfig::_internal_positive_jerk_coeff() const {
  return positive_jerk_coeff_;
}
inline double DpStSpeedConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.positive_jerk_coeff)
  return _internal_positive_jerk_coeff();
}
inline void DpStSpeedConfig::_internal_set_positive_jerk_coeff(double value) {
  _has_bits_[0] |= 0x00080000u;
  positive_jerk_coeff_ = value;
}
inline void DpStSpeedConfig::set_positive_jerk_coeff(double value) {
  _internal_set_positive_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 51 [default = 300];
inline bool DpStSpeedConfig::_internal_has_negative_jerk_coeff() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_negative_jerk_coeff() const {
  return _internal_has_negative_jerk_coeff();
}
inline void DpStSpeedConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 300;
  _has_bits_[0] &= ~0x00100000u;
}
inline double DpStSpeedConfig::_internal_negative_jerk_coeff() const {
  return negative_jerk_coeff_;
}
inline double DpStSpeedConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.negative_jerk_coeff)
  return _internal_negative_jerk_coeff();
}
inline void DpStSpeedConfig::_internal_set_negative_jerk_coeff(double value) {
  _has_bits_[0] |= 0x00100000u;
  negative_jerk_coeff_ = value;
}
inline void DpStSpeedConfig::set_negative_jerk_coeff(double value) {
  _internal_set_negative_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 60 [default = 4.5];
inline bool DpStSpeedConfig::_internal_has_max_acceleration() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_max_acceleration() const {
  return _internal_has_max_acceleration();
}
inline void DpStSpeedConfig::clear_max_acceleration() {
  max_acceleration_ = 4.5;
  _has_bits_[0] &= ~0x00200000u;
}
inline double DpStSpeedConfig::_internal_max_acceleration() const {
  return max_acceleration_;
}
inline double DpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.max_acceleration)
  return _internal_max_acceleration();
}
inline void DpStSpeedConfig::_internal_set_max_acceleration(double value) {
  _has_bits_[0] |= 0x00200000u;
  max_acceleration_ = value;
}
inline void DpStSpeedConfig::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.max_acceleration)
}

// optional double max_deceleration = 61 [default = -4.5];
inline bool DpStSpeedConfig::_internal_has_max_deceleration() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_max_deceleration() const {
  return _internal_has_max_deceleration();
}
inline void DpStSpeedConfig::clear_max_deceleration() {
  max_deceleration_ = -4.5;
  _has_bits_[0] &= ~0x00400000u;
}
inline double DpStSpeedConfig::_internal_max_deceleration() const {
  return max_deceleration_;
}
inline double DpStSpeedConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.max_deceleration)
  return _internal_max_deceleration();
}
inline void DpStSpeedConfig::_internal_set_max_deceleration(double value) {
  _has_bits_[0] |= 0x00400000u;
  max_deceleration_ = value;
}
inline void DpStSpeedConfig::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.max_deceleration)
}

// optional double safe_time_buffer = 70 [default = 3];
inline bool DpStSpeedConfig::_internal_has_safe_time_buffer() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_safe_time_buffer() const {
  return _internal_has_safe_time_buffer();
}
inline void DpStSpeedConfig::clear_safe_time_buffer() {
  safe_time_buffer_ = 3;
  _has_bits_[0] &= ~0x00800000u;
}
inline double DpStSpeedConfig::_internal_safe_time_buffer() const {
  return safe_time_buffer_;
}
inline double DpStSpeedConfig::safe_time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.safe_time_buffer)
  return _internal_safe_time_buffer();
}
inline void DpStSpeedConfig::_internal_set_safe_time_buffer(double value) {
  _has_bits_[0] |= 0x00800000u;
  safe_time_buffer_ = value;
}
inline void DpStSpeedConfig::set_safe_time_buffer(double value) {
  _internal_set_safe_time_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.safe_time_buffer)
}

// optional double safe_distance = 71 [default = 20];
inline bool DpStSpeedConfig::_internal_has_safe_distance() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_safe_distance() const {
  return _internal_has_safe_distance();
}
inline void DpStSpeedConfig::clear_safe_distance() {
  safe_distance_ = 20;
  _has_bits_[0] &= ~0x01000000u;
}
inline double DpStSpeedConfig::_internal_safe_distance() const {
  return safe_distance_;
}
inline double DpStSpeedConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.safe_distance)
  return _internal_safe_distance();
}
inline void DpStSpeedConfig::_internal_set_safe_distance(double value) {
  _has_bits_[0] |= 0x01000000u;
  safe_distance_ = value;
}
inline void DpStSpeedConfig::set_safe_distance(double value) {
  _internal_set_safe_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.safe_distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto
