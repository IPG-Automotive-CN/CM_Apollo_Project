// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planner_open_space_config.proto

#include "modules/planning/proto/planner_open_space_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedConfig_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
namespace apollo {
namespace planning {
class PlannerOpenSpaceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlannerOpenSpaceConfig> _instance;
} _PlannerOpenSpaceConfig_default_instance_;
class ROIConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROIConfig> _instance;
} _ROIConfig_default_instance_;
class WarmStartConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WarmStartConfig> _instance;
} _WarmStartConfig_default_instance_;
class DualVariableWarmStartConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DualVariableWarmStartConfig> _instance;
} _DualVariableWarmStartConfig_default_instance_;
class DistanceApproachConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistanceApproachConfig> _instance;
} _DistanceApproachConfig_default_instance_;
class IpoptConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpoptConfig> _instance;
} _IpoptConfig_default_instance_;
class TrajectoryPartitionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPartitionConfig> _instance;
} _TrajectoryPartitionConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DistanceApproachConfig_default_instance_;
    new (ptr) ::apollo::planning::DistanceApproachConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DistanceApproachConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {
      &scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DualVariableWarmStartConfig_default_instance_;
    new (ptr) ::apollo::planning::DualVariableWarmStartConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DualVariableWarmStartConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {
      &scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_IpoptConfig_default_instance_;
    new (ptr) ::apollo::planning::IpoptConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::IpoptConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlannerOpenSpaceConfig_default_instance_;
    new (ptr) ::apollo::planning::PlannerOpenSpaceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlannerOpenSpaceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {
      &scc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
      &scc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
      &scc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
      &scc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
      &scc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ROIConfig_default_instance_;
    new (ptr) ::apollo::planning::ROIConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ROIConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrajectoryPartitionConfig_default_instance_;
    new (ptr) ::apollo::planning::TrajectoryPartitionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrajectoryPartitionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_WarmStartConfig_default_instance_;
    new (ptr) ::apollo::planning::WarmStartConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::WarmStartConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto}, {
      &scc_info_PiecewiseJerkSpeedConfig_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, roi_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, dual_variable_warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, distance_approach_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, trajectory_partition_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, max_position_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, max_theta_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, enable_check_parallel_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, enable_linear_interpolation_),
  0,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, roi_longitudinal_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, parking_start_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, parking_inwards_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, next_node_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, step_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_back_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, node_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, s_curve_config_),
  3,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, weight_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, qp_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, debug_osqp_),
  4,
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_steer_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_a_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_steer_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_a_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_first_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_second_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_speed_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_speed_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_acceleration_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_acceleration_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, min_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, max_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, use_fix_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_constraint_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_hand_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_derivative_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_initial_final_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, distance_approach_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_jacobian_ad_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, enable_check_initial_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, weight_end_state_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  23,
  24,
  25,
  26,
  27,
  28,
  14,
  0,
  15,
  16,
  17,
  20,
  18,
  21,
  22,
  19,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, mumps_mem_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, mumps_pivtol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_acceptable_constr_viol_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_min_hessian_perturbation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_jacobian_regularization_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_print_timing_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_alpha_for_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_recalc_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, interpolated_pieces_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, initial_gear_check_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, heading_searching_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, gear_shift_period_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, gear_shift_max_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, gear_shift_unit_t_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::planning::PlannerOpenSpaceConfig)},
  { 27, 35, sizeof(::apollo::planning::ROIConfig)},
  { 38, 55, sizeof(::apollo::planning::WarmStartConfig)},
  { 67, 77, sizeof(::apollo::planning::DualVariableWarmStartConfig)},
  { 82, 116, sizeof(::apollo::planning::DistanceApproachConfig)},
  { 145, 162, sizeof(::apollo::planning::IpoptConfig)},
  { 174, 185, sizeof(::apollo::planning::TrajectoryPartitionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_PlannerOpenSpaceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_ROIConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_WarmStartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DualVariableWarmStartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_DistanceApproachConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_IpoptConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TrajectoryPartitionConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/planning/proto/planner_open_sp"
  "ace_config.proto\022\017apollo.planning\0328modul"
  "es/planning/proto/piecewise_jerk_speed_c"
  "onfig.proto\"\360\004\n\026PlannerOpenSpaceConfig\022."
  "\n\nroi_config\030\001 \001(\0132\032.apollo.planning.ROI"
  "Config\022;\n\021warm_start_config\030\002 \001(\0132 .apol"
  "lo.planning.WarmStartConfig\022U\n\037dual_vari"
  "able_warm_start_config\030\003 \001(\0132,.apollo.pl"
  "anning.DualVariableWarmStartConfig\022I\n\030di"
  "stance_approach_config\030\004 \001(\0132\'.apollo.pl"
  "anning.DistanceApproachConfig\022O\n\033traject"
  "ory_partition_config\030\005 \001(\0132*.apollo.plan"
  "ning.TrajectoryPartitionConfig\022\022\n\007delta_"
  "t\030\006 \001(\002:\0011\022,\n\037max_position_error_to_end_"
  "point\030\007 \001(\001:\0030.5\022)\n\034max_theta_error_to_e"
  "nd_point\030\010 \001(\001:\0030.2\022,\n\035is_near_destinati"
  "on_threshold\030\t \001(\001:\0050.001\022/\n enable_chec"
  "k_parallel_trajectory\030\n \001(\010:\005false\022*\n\033en"
  "able_linear_interpolation\030\013 \001(\010:\005false\"o"
  "\n\tROIConfig\022\"\n\026roi_longitudinal_range\030\001 "
  "\001(\001:\00210\022\036\n\023parking_start_range\030\002 \001(\001:\0017\022"
  "\036\n\017parking_inwards\030\003 \001(\010:\005false\"\272\003\n\017Warm"
  "StartConfig\022\037\n\022xy_grid_resolution\030\001 \001(\001:"
  "\0030.2\022!\n\023phi_grid_resolution\030\002 \001(\001:\0040.05\022"
  "\031\n\rnext_node_num\030\003 \001(\004:\00210\022\026\n\tstep_size\030"
  "\004 \001(\001:\0030.5\022\037\n\024traj_forward_penalty\030\005 \001(\001"
  ":\0010\022\034\n\021traj_back_penalty\030\006 \001(\001:\0010\022$\n\030tra"
  "j_gear_switch_penalty\030\007 \001(\001:\00210\022\037\n\022traj_"
  "steer_penalty\030\010 \001(\001:\003100\022%\n\031traj_steer_c"
  "hange_penalty\030\t \001(\001:\00210\022&\n\031grid_a_star_x"
  "y_resolution\030\017 \001(\001:\0030.1\022\030\n\013node_radius\030\020"
  " \001(\001:\0030.5\022A\n\016s_curve_config\030\021 \001(\0132).apol"
  "lo.planning.PiecewiseJerkSpeedConfig\"\325\001\n"
  "\033DualVariableWarmStartConfig\022\023\n\010weight_d"
  "\030\001 \001(\001:\0011\0222\n\014ipopt_config\030\002 \001(\0132\034.apollo"
  ".planning.IpoptConfig\0222\n\tqp_format\030\003 \001(\016"
  "2\037.apollo.planning.DualWarmUpMode\022\036\n\023min"
  "_safety_distance\030\004 \001(\001:\0010\022\031\n\ndebug_osqp\030"
  "\005 \001(\010:\005false\"\274\007\n\026DistanceApproachConfig\022"
  "\024\n\014weight_steer\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001\022"
  "\031\n\021weight_steer_rate\030\003 \001(\001\022\025\n\rweight_a_r"
  "ate\030\004 \001(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n\010weight_y\030"
  "\006 \001(\001\022\022\n\nweight_phi\030\007 \001(\001\022\020\n\010weight_v\030\010 "
  "\001(\001\022\036\n\026weight_steer_stitching\030\t \001(\001\022\032\n\022w"
  "eight_a_stitching\030\n \001(\001\022\037\n\027weight_first_"
  "order_time\030\013 \001(\001\022 \n\030weight_second_order_"
  "time\030\014 \001(\001\022\036\n\023min_safety_distance\030\r \001(\001:"
  "\0010\022\034\n\021max_speed_forward\030\016 \001(\001:\0013\022\034\n\021max_"
  "speed_reverse\030\017 \001(\001:\0012\022#\n\030max_accelerati"
  "on_forward\030\020 \001(\001:\0012\022#\n\030max_acceleration_"
  "reverse\030\021 \001(\001:\0012\022$\n\027min_time_sample_scal"
  "ing\030\022 \001(\001:\0030.1\022#\n\027max_time_sample_scalin"
  "g\030\023 \001(\001:\00210\022\033\n\014use_fix_time\030\024 \001(\010:\005false"
  "\0222\n\014ipopt_config\030\025 \001(\0132\034.apollo.planning"
  ".IpoptConfig\022\037\n\027enable_constraint_check\030"
  "\026 \001(\010\022\036\n\026enable_hand_derivative\030\027 \001(\010\022\037\n"
  "\027enable_derivative_check\030\030 \001(\010\022)\n\032enable"
  "_initial_final_check\030\031 \001(\010:\005false\022E\n\026dis"
  "tance_approach_mode\030\032 \001(\0162%.apollo.plann"
  "ing.DistanceApproachMode\022!\n\022enable_jacob"
  "ian_ad\030\033 \001(\010:\005false\022)\n\032enable_check_init"
  "ial_state\030\034 \001(\010:\005false\022\033\n\020weight_end_sta"
  "te\030\035 \001(\001:\0010\"\371\002\n\013IpoptConfig\022\031\n\021ipopt_pri"
  "nt_level\030\001 \001(\005\022\031\n\021mumps_mem_percent\030\002 \001("
  "\005\022\024\n\014mumps_pivtol\030\003 \001(\001\022\026\n\016ipopt_max_ite"
  "r\030\004 \001(\005\022\021\n\tipopt_tol\030\005 \001(\001\022(\n ipopt_acce"
  "ptable_constr_viol_tol\030\006 \001(\001\022&\n\036ipopt_mi"
  "n_hessian_perturbation\030\007 \001(\001\022+\n#ipopt_ja"
  "cobian_regularization_value\030\010 \001(\001\022%\n\035ipo"
  "pt_print_timing_statistics\030\t \001(\t\022\031\n\021ipop"
  "t_alpha_for_y\030\n \001(\t\022\026\n\016ipopt_recalc_y\030\013 "
  "\001(\t\022\032\n\ripopt_mu_init\030\014 \001(\001:\0030.1\"\362\001\n\031Traj"
  "ectoryPartitionConfig\022#\n\027interpolated_pi"
  "eces_num\030\001 \001(\004:\00250\022%\n\032initial_gear_check"
  "_horizon\030\002 \001(\004:\0013\022$\n\027heading_searching_r"
  "ange\030\003 \001(\001:\0030.3\022%\n\032gear_shift_period_dur"
  "ation\030\004 \001(\001:\0012\022\033\n\020gear_shift_max_t\030\005 \001(\001"
  ":\0013\022\037\n\021gear_shift_unit_t\030\006 \001(\001:\0040.02*=\n\016"
  "DualWarmUpMode\022\t\n\005IPOPT\020\000\022\013\n\007IPOPTQP\020\001\022\010"
  "\n\004OSQP\020\002\022\t\n\005DEBUG\020\003*\312\001\n\024DistanceApproach"
  "Mode\022\033\n\027DISTANCE_APPROACH_IPOPT\020\000\022 \n\034DIS"
  "TANCE_APPROACH_IPOPT_CUDA\020\001\022$\n DISTANCE_"
  "APPROACH_IPOPT_FIXED_TS\020\002\022&\n\"DISTANCE_AP"
  "PROACH_IPOPT_FIXED_DUAL\020\003\022%\n!DISTANCE_AP"
  "PROACH_IPOPT_RELAX_END\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fpiecewise_5fjerk_5fspeed_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_sccs[7] = {
  &scc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
  &scc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
  &scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
  &scc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
  &scc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
  &scc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
  &scc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto, "modules/planning/proto/planner_open_space_config.proto", 3384,
  &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto, 7, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto), true);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualWarmUpMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[0];
}
bool DualWarmUpMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceApproachMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[1];
}
bool DistanceApproachMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PlannerOpenSpaceConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->roi_config_ = const_cast< ::apollo::planning::ROIConfig*>(
      ::apollo::planning::ROIConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->warm_start_config_ = const_cast< ::apollo::planning::WarmStartConfig*>(
      ::apollo::planning::WarmStartConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->dual_variable_warm_start_config_ = const_cast< ::apollo::planning::DualVariableWarmStartConfig*>(
      ::apollo::planning::DualVariableWarmStartConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->distance_approach_config_ = const_cast< ::apollo::planning::DistanceApproachConfig*>(
      ::apollo::planning::DistanceApproachConfig::internal_default_instance());
  ::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance.get_mutable()->trajectory_partition_config_ = const_cast< ::apollo::planning::TrajectoryPartitionConfig*>(
      ::apollo::planning::TrajectoryPartitionConfig::internal_default_instance());
}
class PlannerOpenSpaceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannerOpenSpaceConfig>()._has_bits_);
  static const ::apollo::planning::ROIConfig& roi_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_roi_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::WarmStartConfig& warm_start_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_warm_start_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::DualVariableWarmStartConfig& dual_variable_warm_start_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_dual_variable_warm_start_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::DistanceApproachConfig& distance_approach_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_distance_approach_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::TrajectoryPartitionConfig& trajectory_partition_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_trajectory_partition_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delta_t(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_position_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_theta_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_near_destination_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enable_check_parallel_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enable_linear_interpolation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::planning::ROIConfig&
PlannerOpenSpaceConfig::_Internal::roi_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->roi_config_;
}
const ::apollo::planning::WarmStartConfig&
PlannerOpenSpaceConfig::_Internal::warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->warm_start_config_;
}
const ::apollo::planning::DualVariableWarmStartConfig&
PlannerOpenSpaceConfig::_Internal::dual_variable_warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->dual_variable_warm_start_config_;
}
const ::apollo::planning::DistanceApproachConfig&
PlannerOpenSpaceConfig::_Internal::distance_approach_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->distance_approach_config_;
}
const ::apollo::planning::TrajectoryPartitionConfig&
PlannerOpenSpaceConfig::_Internal::trajectory_partition_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->trajectory_partition_config_;
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_roi_config()) {
    roi_config_ = new ::apollo::planning::ROIConfig(*from.roi_config_);
  } else {
    roi_config_ = nullptr;
  }
  if (from._internal_has_warm_start_config()) {
    warm_start_config_ = new ::apollo::planning::WarmStartConfig(*from.warm_start_config_);
  } else {
    warm_start_config_ = nullptr;
  }
  if (from._internal_has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableWarmStartConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = nullptr;
  }
  if (from._internal_has_distance_approach_config()) {
    distance_approach_config_ = new ::apollo::planning::DistanceApproachConfig(*from.distance_approach_config_);
  } else {
    distance_approach_config_ = nullptr;
  }
  if (from._internal_has_trajectory_partition_config()) {
    trajectory_partition_config_ = new ::apollo::planning::TrajectoryPartitionConfig(*from.trajectory_partition_config_);
  } else {
    trajectory_partition_config_ = nullptr;
  }
  ::memcpy(&enable_check_parallel_trajectory_, &from.enable_check_parallel_trajectory_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_threshold_) -
    reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(is_near_destination_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerOpenSpaceConfig)
}

void PlannerOpenSpaceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  ::memset(&roi_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&roi_config_)) + sizeof(enable_linear_interpolation_));
  delta_t_ = 1;
  max_position_error_to_end_point_ = 0.5;
  max_theta_error_to_end_point_ = 0.2;
  is_near_destination_threshold_ = 0.001;
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerOpenSpaceConfig)
  SharedDtor();
}

void PlannerOpenSpaceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete roi_config_;
  if (this != internal_default_instance()) delete warm_start_config_;
  if (this != internal_default_instance()) delete dual_variable_warm_start_config_;
  if (this != internal_default_instance()) delete distance_approach_config_;
  if (this != internal_default_instance()) delete trajectory_partition_config_;
}

void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannerOpenSpaceConfig& PlannerOpenSpaceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlannerOpenSpaceConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerOpenSpaceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(roi_config_ != nullptr);
      roi_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(warm_start_config_ != nullptr);
      warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != nullptr);
      dual_variable_warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(distance_approach_config_ != nullptr);
      distance_approach_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(trajectory_partition_config_ != nullptr);
      trajectory_partition_config_->Clear();
    }
  }
  ::memset(&enable_check_parallel_trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_linear_interpolation_) -
      reinterpret_cast<char*>(&enable_check_parallel_trajectory_)) + sizeof(enable_linear_interpolation_));
  delta_t_ = 1;
  if (cached_has_bits & 0x00000700u) {
    max_position_error_to_end_point_ = 0.5;
    max_theta_error_to_end_point_ = 0.2;
    is_near_destination_threshold_ = 0.001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlannerOpenSpaceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.ROIConfig roi_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_warm_start_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dual_variable_warm_start_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_approach_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_partition_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float delta_t = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_delta_t(&has_bits);
          delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double max_position_error_to_end_point = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_max_position_error_to_end_point(&has_bits);
          max_position_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_theta_error_to_end_point = 8 [default = 0.2];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_max_theta_error_to_end_point(&has_bits);
          max_theta_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double is_near_destination_threshold = 9 [default = 0.001];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_is_near_destination_threshold(&has_bits);
          is_near_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool enable_check_parallel_trajectory = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_enable_check_parallel_trajectory(&has_bits);
          enable_check_parallel_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_linear_interpolation = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_enable_linear_interpolation(&has_bits);
          enable_linear_interpolation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannerOpenSpaceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerOpenSpaceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ROIConfig roi_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roi_config(this), target, stream);
  }

  // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::warm_start_config(this), target, stream);
  }

  // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dual_variable_warm_start_config(this), target, stream);
  }

  // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::distance_approach_config(this), target, stream);
  }

  // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trajectory_partition_config(this), target, stream);
  }

  // optional float delta_t = 6 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_delta_t(), target);
  }

  // optional double max_position_error_to_end_point = 7 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_position_error_to_end_point(), target);
  }

  // optional double max_theta_error_to_end_point = 8 [default = 0.2];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_max_theta_error_to_end_point(), target);
  }

  // optional double is_near_destination_threshold = 9 [default = 0.001];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_is_near_destination_threshold(), target);
  }

  // optional bool enable_check_parallel_trajectory = 10 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_check_parallel_trajectory(), target);
  }

  // optional bool enable_linear_interpolation = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enable_linear_interpolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.ROIConfig roi_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roi_config_);
    }

    // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *warm_start_config_);
    }

    // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dual_variable_warm_start_config_);
    }

    // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distance_approach_config_);
    }

    // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_partition_config_);
    }

    // optional bool enable_check_parallel_trajectory = 10 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enable_linear_interpolation = 11 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional float delta_t = 6 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double max_position_error_to_end_point = 7 [default = 0.5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double max_theta_error_to_end_point = 8 [default = 0.2];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double is_near_destination_threshold = 9 [default = 0.001];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerOpenSpaceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerOpenSpaceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannerOpenSpaceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerOpenSpaceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerOpenSpaceConfig)
    MergeFrom(*source);
  }
}

void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roi_config()->::apollo::planning::ROIConfig::MergeFrom(from._internal_roi_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_warm_start_config()->::apollo::planning::WarmStartConfig::MergeFrom(from._internal_warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dual_variable_warm_start_config()->::apollo::planning::DualVariableWarmStartConfig::MergeFrom(from._internal_dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_distance_approach_config()->::apollo::planning::DistanceApproachConfig::MergeFrom(from._internal_distance_approach_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_trajectory_partition_config()->::apollo::planning::TrajectoryPartitionConfig::MergeFrom(from._internal_trajectory_partition_config());
    }
    if (cached_has_bits & 0x00000020u) {
      enable_check_parallel_trajectory_ = from.enable_check_parallel_trajectory_;
    }
    if (cached_has_bits & 0x00000040u) {
      enable_linear_interpolation_ = from.enable_linear_interpolation_;
    }
    if (cached_has_bits & 0x00000080u) {
      delta_t_ = from.delta_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      max_position_error_to_end_point_ = from.max_position_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_theta_error_to_end_point_ = from.max_theta_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlannerOpenSpaceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roi_config_, other->roi_config_);
  swap(warm_start_config_, other->warm_start_config_);
  swap(dual_variable_warm_start_config_, other->dual_variable_warm_start_config_);
  swap(distance_approach_config_, other->distance_approach_config_);
  swap(trajectory_partition_config_, other->trajectory_partition_config_);
  swap(enable_check_parallel_trajectory_, other->enable_check_parallel_trajectory_);
  swap(enable_linear_interpolation_, other->enable_linear_interpolation_);
  swap(delta_t_, other->delta_t_);
  swap(max_position_error_to_end_point_, other->max_position_error_to_end_point_);
  swap(max_theta_error_to_end_point_, other->max_theta_error_to_end_point_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROIConfig::InitAsDefaultInstance() {
}
class ROIConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ROIConfig>()._has_bits_);
  static void set_has_roi_longitudinal_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parking_start_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_inwards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ROIConfig::ROIConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ROIConfig)
}
ROIConfig::ROIConfig(const ROIConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_inwards_, &from.parking_inwards_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_start_range_) -
    reinterpret_cast<char*>(&parking_inwards_)) + sizeof(parking_start_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ROIConfig)
}

void ROIConfig::SharedCtor() {
  parking_inwards_ = false;
  roi_longitudinal_range_ = 10;
  parking_start_range_ = 7;
}

ROIConfig::~ROIConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ROIConfig)
  SharedDtor();
}

void ROIConfig::SharedDtor() {
}

void ROIConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROIConfig& ROIConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROIConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ROIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ROIConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    parking_inwards_ = false;
    roi_longitudinal_range_ = 10;
    parking_start_range_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROIConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double roi_longitudinal_range = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_roi_longitudinal_range(&has_bits);
          roi_longitudinal_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double parking_start_range = 2 [default = 7];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_parking_start_range(&has_bits);
          parking_start_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool parking_inwards = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_parking_inwards(&has_bits);
          parking_inwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROIConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ROIConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double roi_longitudinal_range = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_roi_longitudinal_range(), target);
  }

  // optional double parking_start_range = 2 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_parking_start_range(), target);
  }

  // optional bool parking_inwards = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_parking_inwards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ROIConfig)
  return target;
}

size_t ROIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ROIConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool parking_inwards = 3 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double roi_longitudinal_range = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double parking_start_range = 2 [default = 7];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROIConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ROIConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROIConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ROIConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ROIConfig)
    MergeFrom(*source);
  }
}

void ROIConfig::MergeFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      parking_inwards_ = from.parking_inwards_;
    }
    if (cached_has_bits & 0x00000002u) {
      roi_longitudinal_range_ = from.roi_longitudinal_range_;
    }
    if (cached_has_bits & 0x00000004u) {
      parking_start_range_ = from.parking_start_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROIConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIConfig::CopyFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIConfig::IsInitialized() const {
  return true;
}

void ROIConfig::InternalSwap(ROIConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parking_inwards_, other->parking_inwards_);
  swap(roi_longitudinal_range_, other->roi_longitudinal_range_);
  swap(parking_start_range_, other->parking_start_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WarmStartConfig::InitAsDefaultInstance() {
  ::apollo::planning::_WarmStartConfig_default_instance_._instance.get_mutable()->s_curve_config_ = const_cast< ::apollo::planning::PiecewiseJerkSpeedConfig*>(
      ::apollo::planning::PiecewiseJerkSpeedConfig::internal_default_instance());
}
class WarmStartConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<WarmStartConfig>()._has_bits_);
  static void set_has_xy_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_phi_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_next_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_traj_forward_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_traj_back_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_traj_gear_switch_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_traj_steer_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_traj_steer_change_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grid_a_star_xy_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_node_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::planning::PiecewiseJerkSpeedConfig& s_curve_config(const WarmStartConfig* msg);
  static void set_has_s_curve_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::PiecewiseJerkSpeedConfig&
WarmStartConfig::_Internal::s_curve_config(const WarmStartConfig* msg) {
  return *msg->s_curve_config_;
}
void WarmStartConfig::clear_s_curve_config() {
  if (s_curve_config_ != nullptr) s_curve_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
WarmStartConfig::WarmStartConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_s_curve_config()) {
    s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = nullptr;
  }
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.WarmStartConfig)
}

void WarmStartConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  ::memset(&s_curve_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traj_back_penalty_) -
      reinterpret_cast<char*>(&s_curve_config_)) + sizeof(traj_back_penalty_));
  xy_grid_resolution_ = 0.2;
  phi_grid_resolution_ = 0.05;
  next_node_num_ = PROTOBUF_ULONGLONG(10);
  step_size_ = 0.5;
  traj_gear_switch_penalty_ = 10;
  traj_steer_penalty_ = 100;
  traj_steer_change_penalty_ = 10;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.WarmStartConfig)
  SharedDtor();
}

void WarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) delete s_curve_config_;
}

void WarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WarmStartConfig& WarmStartConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.WarmStartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(s_curve_config_ != nullptr);
    s_curve_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traj_back_penalty_) -
        reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = PROTOBUF_ULONGLONG(10);
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
  }
  if (cached_has_bits & 0x00000f00u) {
    traj_steer_penalty_ = 100;
    traj_steer_change_penalty_ = 10;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WarmStartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_xy_grid_resolution(&has_bits);
          xy_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_phi_grid_resolution(&has_bits);
          phi_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 next_node_num = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_next_node_num(&has_bits);
          next_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double step_size = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_step_size(&has_bits);
          step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_forward_penalty = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_traj_forward_penalty(&has_bits);
          traj_forward_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_back_penalty = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_traj_back_penalty(&has_bits);
          traj_back_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_traj_gear_switch_penalty(&has_bits);
          traj_gear_switch_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_steer_penalty = 8 [default = 100];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_traj_steer_penalty(&has_bits);
          traj_steer_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_traj_steer_change_penalty(&has_bits);
          traj_steer_change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_grid_a_star_xy_resolution(&has_bits);
          grid_a_star_xy_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double node_radius = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_node_radius(&has_bits);
          node_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_s_curve_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarmStartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.WarmStartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_node_radius(), target);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::s_curve_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.WarmStartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.PiecewiseJerkSpeedConfig s_curve_config = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *s_curve_config_);
    }

    // optional double traj_forward_penalty = 5 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double traj_steer_penalty = 8 [default = 100];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WarmStartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WarmStartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WarmStartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.WarmStartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.WarmStartConfig)
    MergeFrom(*source);
  }
}

void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_s_curve_config()->::apollo::planning::PiecewiseJerkSpeedConfig::MergeFrom(from._internal_s_curve_config());
    }
    if (cached_has_bits & 0x00000002u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000400u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WarmStartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_curve_config_, other->s_curve_config_);
  swap(traj_forward_penalty_, other->traj_forward_penalty_);
  swap(traj_back_penalty_, other->traj_back_penalty_);
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarmStartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DualVariableWarmStartConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DualVariableWarmStartConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptConfig*>(
      ::apollo::planning::IpoptConfig::internal_default_instance());
}
class DualVariableWarmStartConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DualVariableWarmStartConfig>()._has_bits_);
  static void set_has_weight_d(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::IpoptConfig& ipopt_config(const DualVariableWarmStartConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qp_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug_osqp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning::IpoptConfig&
DualVariableWarmStartConfig::_Internal::ipopt_config(const DualVariableWarmStartConfig* msg) {
  return *msg->ipopt_config_;
}
DualVariableWarmStartConfig::DualVariableWarmStartConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DualVariableWarmStartConfig)
}
DualVariableWarmStartConfig::DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = nullptr;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_d_) -
    reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(weight_d_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DualVariableWarmStartConfig)
}

void DualVariableWarmStartConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_osqp_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(debug_osqp_));
  weight_d_ = 1;
}

DualVariableWarmStartConfig::~DualVariableWarmStartConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DualVariableWarmStartConfig)
  SharedDtor();
}

void DualVariableWarmStartConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DualVariableWarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DualVariableWarmStartConfig& DualVariableWarmStartConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DualVariableWarmStartConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DualVariableWarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DualVariableWarmStartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != nullptr);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&min_safety_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_osqp_) -
        reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(debug_osqp_));
    weight_d_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DualVariableWarmStartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_d = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_d(&has_bits);
          weight_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptConfig ipopt_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DualWarmUpMode qp_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DualWarmUpMode_IsValid(val))) {
            _internal_set_qp_format(static_cast<::apollo::planning::DualWarmUpMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double min_safety_distance = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool debug_osqp = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_debug_osqp(&has_bits);
          debug_osqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DualVariableWarmStartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DualVariableWarmStartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_d(), target);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ipopt_config(this), target, stream);
  }

  // optional .apollo.planning.DualWarmUpMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_debug_osqp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DualVariableWarmStartConfig)
  return target;
}

size_t DualVariableWarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DualVariableWarmStartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.planning.IpoptConfig ipopt_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.DualWarmUpMode qp_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DualVariableWarmStartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DualVariableWarmStartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DualVariableWarmStartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DualVariableWarmStartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DualVariableWarmStartConfig)
    MergeFrom(*source);
  }
}

void DualVariableWarmStartConfig::MergeFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_d_ = from.weight_d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DualVariableWarmStartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualVariableWarmStartConfig::CopyFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableWarmStartConfig::IsInitialized() const {
  return true;
}

void DualVariableWarmStartConfig::InternalSwap(DualVariableWarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ipopt_config_, other->ipopt_config_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(qp_format_, other->qp_format_);
  swap(debug_osqp_, other->debug_osqp_);
  swap(weight_d_, other->weight_d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DualVariableWarmStartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistanceApproachConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DistanceApproachConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptConfig*>(
      ::apollo::planning::IpoptConfig::internal_default_instance());
}
class DistanceApproachConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DistanceApproachConfig>()._has_bits_);
  static void set_has_weight_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_steer_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_a_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight_v(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_weight_steer_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight_a_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_weight_first_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weight_second_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_speed_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_max_speed_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_max_acceleration_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_acceleration_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_min_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_max_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_use_fix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::planning::IpoptConfig& ipopt_config(const DistanceApproachConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_constraint_check(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_hand_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enable_derivative_check(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_initial_final_check(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_distance_approach_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_jacobian_ad(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_enable_check_initial_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_weight_end_state(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::apollo::planning::IpoptConfig&
DistanceApproachConfig::_Internal::ipopt_config(const DistanceApproachConfig* msg) {
  return *msg->ipopt_config_;
}
DistanceApproachConfig::DistanceApproachConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DistanceApproachConfig)
}
DistanceApproachConfig::DistanceApproachConfig(const DistanceApproachConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = nullptr;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_)) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DistanceApproachConfig)
}

void DistanceApproachConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_check_initial_state_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(enable_check_initial_state_));
  max_speed_forward_ = 3;
  max_speed_reverse_ = 2;
  max_acceleration_forward_ = 2;
  max_acceleration_reverse_ = 2;
  min_time_sample_scaling_ = 0.1;
  max_time_sample_scaling_ = 10;
}

DistanceApproachConfig::~DistanceApproachConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DistanceApproachConfig)
  SharedDtor();
}

void DistanceApproachConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DistanceApproachConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceApproachConfig& DistanceApproachConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistanceApproachConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DistanceApproachConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DistanceApproachConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != nullptr);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&weight_steer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_phi_) -
        reinterpret_cast<char*>(&weight_steer_)) + sizeof(weight_phi_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&weight_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_constraint_check_) -
        reinterpret_cast<char*>(&weight_v_)) + sizeof(enable_constraint_check_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&enable_hand_derivative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_check_initial_state_) -
        reinterpret_cast<char*>(&enable_hand_derivative_)) + sizeof(enable_check_initial_state_));
    max_speed_forward_ = 3;
  }
  if (cached_has_bits & 0x1f000000u) {
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
    max_time_sample_scaling_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DistanceApproachConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double weight_steer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_weight_steer(&has_bits);
          weight_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_weight_a(&has_bits);
          weight_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_steer_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight_steer_rate(&has_bits);
          weight_steer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_a_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_weight_a_rate(&has_bits);
          weight_a_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_weight_x(&has_bits);
          weight_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_weight_y(&has_bits);
          weight_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_phi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_weight_phi(&has_bits);
          weight_phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_weight_v(&has_bits);
          weight_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_steer_stitching = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_weight_steer_stitching(&has_bits);
          weight_steer_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_a_stitching = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_weight_a_stitching(&has_bits);
          weight_a_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_first_order_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_weight_first_order_time(&has_bits);
          weight_first_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double weight_second_order_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_weight_second_order_time(&has_bits);
          weight_second_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_safety_distance = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed_forward = 14 [default = 3];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_max_speed_forward(&has_bits);
          max_speed_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_speed_reverse = 15 [default = 2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_max_speed_reverse(&has_bits);
          max_speed_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration_forward = 16 [default = 2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_max_acceleration_forward(&has_bits);
          max_acceleration_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_max_acceleration_reverse(&has_bits);
          max_acceleration_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_min_time_sample_scaling(&has_bits);
          min_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_max_time_sample_scaling(&has_bits);
          max_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_fix_time = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_use_fix_time(&has_bits);
          use_fix_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptConfig ipopt_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_constraint_check = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_enable_constraint_check(&has_bits);
          enable_constraint_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_hand_derivative = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enable_hand_derivative(&has_bits);
          enable_hand_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_derivative_check = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_enable_derivative_check(&has_bits);
          enable_derivative_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_initial_final_check = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_enable_initial_final_check(&has_bits);
          enable_initial_final_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DistanceApproachMode_IsValid(val))) {
            _internal_set_distance_approach_mode(static_cast<::apollo::planning::DistanceApproachMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool enable_jacobian_ad = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_enable_jacobian_ad(&has_bits);
          enable_jacobian_ad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_check_initial_state = 28 [default = false];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_enable_check_initial_state(&has_bits);
          enable_check_initial_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double weight_end_state = 29 [default = 0];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_weight_end_state(&has_bits);
          weight_end_state_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceApproachConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DistanceApproachConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_use_fix_time(), target);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::ipopt_config(this), target, stream);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_enable_initial_final_check(), target);
  }

  // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_distance_approach_mode(), target);
  }

  // optional bool enable_jacobian_ad = 27 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_enable_jacobian_ad(), target);
  }

  // optional bool enable_check_initial_state = 28 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_enable_check_initial_state(), target);
  }

  // optional double weight_end_state = 29 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_weight_end_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DistanceApproachConfig)
  return target;
}

size_t DistanceApproachConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DistanceApproachConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.IpoptConfig ipopt_config = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double weight_v = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_hand_derivative = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_distance_approach_mode());
    }

    // optional double weight_end_state = 29 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_jacobian_ad = 27 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_check_initial_state = 28 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional double max_speed_forward = 14 [default = 3];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional double max_speed_reverse = 15 [default = 2];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double max_time_sample_scaling = 19 [default = 10];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceApproachConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceApproachConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceApproachConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DistanceApproachConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DistanceApproachConfig)
    MergeFrom(*source);
  }
}

void DistanceApproachConfig::MergeFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      distance_approach_mode_ = from.distance_approach_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      weight_end_state_ = from.weight_end_state_;
    }
    if (cached_has_bits & 0x00100000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00200000u) {
      enable_jacobian_ad_ = from.enable_jacobian_ad_;
    }
    if (cached_has_bits & 0x00400000u) {
      enable_check_initial_state_ = from.enable_check_initial_state_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x08000000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    if (cached_has_bits & 0x10000000u) {
      max_time_sample_scaling_ = from.max_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DistanceApproachConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceApproachConfig::CopyFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachConfig::IsInitialized() const {
  return true;
}

void DistanceApproachConfig::InternalSwap(DistanceApproachConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ipopt_config_, other->ipopt_config_);
  swap(weight_steer_, other->weight_steer_);
  swap(weight_a_, other->weight_a_);
  swap(weight_steer_rate_, other->weight_steer_rate_);
  swap(weight_a_rate_, other->weight_a_rate_);
  swap(weight_x_, other->weight_x_);
  swap(weight_y_, other->weight_y_);
  swap(weight_phi_, other->weight_phi_);
  swap(weight_v_, other->weight_v_);
  swap(weight_steer_stitching_, other->weight_steer_stitching_);
  swap(weight_a_stitching_, other->weight_a_stitching_);
  swap(weight_first_order_time_, other->weight_first_order_time_);
  swap(weight_second_order_time_, other->weight_second_order_time_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(use_fix_time_, other->use_fix_time_);
  swap(enable_constraint_check_, other->enable_constraint_check_);
  swap(enable_hand_derivative_, other->enable_hand_derivative_);
  swap(enable_derivative_check_, other->enable_derivative_check_);
  swap(distance_approach_mode_, other->distance_approach_mode_);
  swap(weight_end_state_, other->weight_end_state_);
  swap(enable_initial_final_check_, other->enable_initial_final_check_);
  swap(enable_jacobian_ad_, other->enable_jacobian_ad_);
  swap(enable_check_initial_state_, other->enable_check_initial_state_);
  swap(max_speed_forward_, other->max_speed_forward_);
  swap(max_speed_reverse_, other->max_speed_reverse_);
  swap(max_acceleration_forward_, other->max_acceleration_forward_);
  swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceApproachConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpoptConfig::InitAsDefaultInstance() {
}
class IpoptConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IpoptConfig>()._has_bits_);
  static void set_has_ipopt_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mumps_mem_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mumps_pivtol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipopt_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ipopt_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipopt_acceptable_constr_viol_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipopt_min_hessian_perturbation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipopt_jacobian_regularization_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ipopt_print_timing_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipopt_alpha_for_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipopt_recalc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipopt_mu_init(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

IpoptConfig::IpoptConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.IpoptConfig)
}
IpoptConfig::IpoptConfig(const IpoptConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipopt_recalc_y()) {
    ipopt_recalc_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IpoptConfig)
}

void IpoptConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipopt_max_iter_) -
      reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_max_iter_));
  ipopt_mu_init_ = 0.1;
}

IpoptConfig::~IpoptConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IpoptConfig)
  SharedDtor();
}

void IpoptConfig::SharedDtor() {
  ipopt_print_timing_statistics_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpoptConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpoptConfig& IpoptConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpoptConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void IpoptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IpoptConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ipopt_print_timing_statistics_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_alpha_for_y_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipopt_recalc_y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
        reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_max_iter_) -
        reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_)) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IpoptConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ipopt_print_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ipopt_print_level(&has_bits);
          ipopt_print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mumps_mem_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mumps_mem_percent(&has_bits);
          mumps_mem_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mumps_pivtol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_mumps_pivtol(&has_bits);
          mumps_pivtol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 ipopt_max_iter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ipopt_max_iter(&has_bits);
          ipopt_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_tol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ipopt_tol(&has_bits);
          ipopt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ipopt_acceptable_constr_viol_tol(&has_bits);
          ipopt_acceptable_constr_viol_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_min_hessian_perturbation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ipopt_min_hessian_perturbation(&has_bits);
          ipopt_min_hessian_perturbation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_jacobian_regularization_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_ipopt_jacobian_regularization_value(&has_bits);
          ipopt_jacobian_regularization_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string ipopt_print_timing_statistics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ipopt_print_timing_statistics();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipopt_alpha_for_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ipopt_alpha_for_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipopt_recalc_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ipopt_recalc_y();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.IpoptConfig.ipopt_recalc_y");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_ipopt_mu_init(&has_bits);
          ipopt_mu_init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpoptConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IpoptConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_print_timing_statistics().data(), static_cast<int>(this->_internal_ipopt_print_timing_statistics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_alpha_for_y().data(), static_cast<int>(this->_internal_ipopt_alpha_for_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_recalc_y().data(), static_cast<int>(this->_internal_ipopt_recalc_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_recalc_y");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ipopt_mu_init(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IpoptConfig)
  return target;
}

size_t IpoptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IpoptConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ipopt_print_timing_statistics = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpoptConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IpoptConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpoptConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.IpoptConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.IpoptConfig)
    MergeFrom(*source);
  }
}

void IpoptConfig::MergeFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ipopt_print_timing_statistics_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ipopt_alpha_for_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ipopt_recalc_y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpoptConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpoptConfig::CopyFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptConfig::IsInitialized() const {
  return true;
}

void IpoptConfig::InternalSwap(IpoptConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipopt_print_timing_statistics_.Swap(&other->ipopt_print_timing_statistics_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_alpha_for_y_.Swap(&other->ipopt_alpha_for_y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_recalc_y_.Swap(&other->ipopt_recalc_y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ipopt_print_level_, other->ipopt_print_level_);
  swap(mumps_mem_percent_, other->mumps_mem_percent_);
  swap(mumps_pivtol_, other->mumps_pivtol_);
  swap(ipopt_tol_, other->ipopt_tol_);
  swap(ipopt_acceptable_constr_viol_tol_, other->ipopt_acceptable_constr_viol_tol_);
  swap(ipopt_min_hessian_perturbation_, other->ipopt_min_hessian_perturbation_);
  swap(ipopt_jacobian_regularization_value_, other->ipopt_jacobian_regularization_value_);
  swap(ipopt_max_iter_, other->ipopt_max_iter_);
  swap(ipopt_mu_init_, other->ipopt_mu_init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpoptConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPartitionConfig::InitAsDefaultInstance() {
}
class TrajectoryPartitionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPartitionConfig>()._has_bits_);
  static void set_has_interpolated_pieces_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_gear_check_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading_searching_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gear_shift_period_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gear_shift_max_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gear_shift_unit_t(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TrajectoryPartitionConfig::TrajectoryPartitionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrajectoryPartitionConfig)
}
TrajectoryPartitionConfig::TrajectoryPartitionConfig(const TrajectoryPartitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interpolated_pieces_num_, &from.interpolated_pieces_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_shift_unit_t_) -
    reinterpret_cast<char*>(&interpolated_pieces_num_)) + sizeof(gear_shift_unit_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrajectoryPartitionConfig)
}

void TrajectoryPartitionConfig::SharedCtor() {
  interpolated_pieces_num_ = PROTOBUF_ULONGLONG(50);
  initial_gear_check_horizon_ = PROTOBUF_ULONGLONG(3);
  heading_searching_range_ = 0.3;
  gear_shift_period_duration_ = 2;
  gear_shift_max_t_ = 3;
  gear_shift_unit_t_ = 0.02;
}

TrajectoryPartitionConfig::~TrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrajectoryPartitionConfig)
  SharedDtor();
}

void TrajectoryPartitionConfig::SharedDtor() {
}

void TrajectoryPartitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPartitionConfig& TrajectoryPartitionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPartitionConfig_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrajectoryPartitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    interpolated_pieces_num_ = PROTOBUF_ULONGLONG(50);
    initial_gear_check_horizon_ = PROTOBUF_ULONGLONG(3);
    heading_searching_range_ = 0.3;
    gear_shift_period_duration_ = 2;
    gear_shift_max_t_ = 3;
    gear_shift_unit_t_ = 0.02;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TrajectoryPartitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 interpolated_pieces_num = 1 [default = 50];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_interpolated_pieces_num(&has_bits);
          interpolated_pieces_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 initial_gear_check_horizon = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_initial_gear_check_horizon(&has_bits);
          initial_gear_check_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double heading_searching_range = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading_searching_range(&has_bits);
          heading_searching_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gear_shift_period_duration = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_gear_shift_period_duration(&has_bits);
          gear_shift_period_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gear_shift_max_t = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_gear_shift_max_t(&has_bits);
          gear_shift_max_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gear_shift_unit_t = 6 [default = 0.02];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_gear_shift_unit_t(&has_bits);
          gear_shift_unit_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPartitionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrajectoryPartitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_initial_gear_check_horizon(), target);
  }

  // optional double heading_searching_range = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading_searching_range(), target);
  }

  // optional double gear_shift_period_duration = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_gear_shift_period_duration(), target);
  }

  // optional double gear_shift_max_t = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_gear_shift_unit_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrajectoryPartitionConfig)
  return target;
}

size_t TrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrajectoryPartitionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 interpolated_pieces_num = 1 [default = 50];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_initial_gear_check_horizon());
    }

    // optional double heading_searching_range = 3 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 4 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_max_t = 5 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 6 [default = 0.02];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPartitionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPartitionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPartitionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrajectoryPartitionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrajectoryPartitionConfig)
    MergeFrom(*source);
  }
}

void TrajectoryPartitionConfig::MergeFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_searching_range_ = from.heading_searching_range_;
    }
    if (cached_has_bits & 0x00000008u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPartitionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPartitionConfig::CopyFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void TrajectoryPartitionConfig::InternalSwap(TrajectoryPartitionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interpolated_pieces_num_, other->interpolated_pieces_num_);
  swap(initial_gear_check_horizon_, other->initial_gear_check_horizon_);
  swap(heading_searching_range_, other->heading_searching_range_);
  swap(gear_shift_period_duration_, other->gear_shift_period_duration_);
  swap(gear_shift_max_t_, other->gear_shift_max_t_);
  swap(gear_shift_unit_t_, other->gear_shift_unit_t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPartitionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlannerOpenSpaceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlannerOpenSpaceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ROIConfig* Arena::CreateMaybeMessage< ::apollo::planning::ROIConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ROIConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::WarmStartConfig* Arena::CreateMaybeMessage< ::apollo::planning::WarmStartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::WarmStartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DualVariableWarmStartConfig* Arena::CreateMaybeMessage< ::apollo::planning::DualVariableWarmStartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DualVariableWarmStartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DistanceApproachConfig* Arena::CreateMaybeMessage< ::apollo::planning::DistanceApproachConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DistanceApproachConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::IpoptConfig* Arena::CreateMaybeMessage< ::apollo::planning::IpoptConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::IpoptConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrajectoryPartitionConfig* Arena::CreateMaybeMessage< ::apollo::planning::TrajectoryPartitionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrajectoryPartitionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
