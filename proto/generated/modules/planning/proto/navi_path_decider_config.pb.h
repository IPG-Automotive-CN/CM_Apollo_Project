// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class MoveDestLaneConfigTable;
class MoveDestLaneConfigTableDefaultTypeInternal;
extern MoveDestLaneConfigTableDefaultTypeInternal _MoveDestLaneConfigTable_default_instance_;
class NaviPathDeciderConfig;
class NaviPathDeciderConfigDefaultTypeInternal;
extern NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
class ShiftConfig;
class ShiftConfigDefaultTypeInternal;
extern ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::MoveDestLaneConfigTable* Arena::CreateMaybeMessage<::apollo::planning::MoveDestLaneConfigTable>(Arena*);
template<> ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviPathDeciderConfig>(Arena*);
template<> ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage<::apollo::planning::ShiftConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class NaviPathDeciderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviPathDeciderConfig) */ {
 public:
  NaviPathDeciderConfig();
  virtual ~NaviPathDeciderConfig();

  NaviPathDeciderConfig(const NaviPathDeciderConfig& from);
  NaviPathDeciderConfig(NaviPathDeciderConfig&& from) noexcept
    : NaviPathDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviPathDeciderConfig& operator=(const NaviPathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviPathDeciderConfig& operator=(NaviPathDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NaviPathDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaviPathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviPathDeciderConfig*>(
               &_NaviPathDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NaviPathDeciderConfig& a, NaviPathDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviPathDeciderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NaviPathDeciderConfig* New() const final {
    return CreateMaybeMessage<NaviPathDeciderConfig>(nullptr);
  }

  NaviPathDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NaviPathDeciderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NaviPathDeciderConfig& from);
  void MergeFrom(const NaviPathDeciderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviPathDeciderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviPathDeciderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveDestLaneConfigTalbeFieldNumber = 7,
    kMaxKappaThresholdFieldNumber = 9,
    kKappaMoveDestLaneCompensationFieldNumber = 10,
    kStartPlanPointFromFieldNumber = 11,
    kMinLookForwardTimeFieldNumber = 2,
    kMinPathLengthFieldNumber = 1,
    kMaxKeepLaneDistanceFieldNumber = 3,
    kMaxKeepLaneShiftYFieldNumber = 4,
    kMinKeepLaneOffsetFieldNumber = 5,
    kKeepLaneShiftCompensationFieldNumber = 6,
    kMoveDestLaneCompensationFieldNumber = 8,
  };
  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  bool has_move_dest_lane_config_talbe() const;
  private:
  bool _internal_has_move_dest_lane_config_talbe() const;
  public:
  void clear_move_dest_lane_config_talbe();
  const ::apollo::planning::MoveDestLaneConfigTable& move_dest_lane_config_talbe() const;
  ::apollo::planning::MoveDestLaneConfigTable* release_move_dest_lane_config_talbe();
  ::apollo::planning::MoveDestLaneConfigTable* mutable_move_dest_lane_config_talbe();
  void set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe);
  private:
  const ::apollo::planning::MoveDestLaneConfigTable& _internal_move_dest_lane_config_talbe() const;
  ::apollo::planning::MoveDestLaneConfigTable* _internal_mutable_move_dest_lane_config_talbe();
  public:

  // optional double max_kappa_threshold = 9 [default = 0];
  bool has_max_kappa_threshold() const;
  private:
  bool _internal_has_max_kappa_threshold() const;
  public:
  void clear_max_kappa_threshold();
  double max_kappa_threshold() const;
  void set_max_kappa_threshold(double value);
  private:
  double _internal_max_kappa_threshold() const;
  void _internal_set_max_kappa_threshold(double value);
  public:

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  bool has_kappa_move_dest_lane_compensation() const;
  private:
  bool _internal_has_kappa_move_dest_lane_compensation() const;
  public:
  void clear_kappa_move_dest_lane_compensation();
  double kappa_move_dest_lane_compensation() const;
  void set_kappa_move_dest_lane_compensation(double value);
  private:
  double _internal_kappa_move_dest_lane_compensation() const;
  void _internal_set_kappa_move_dest_lane_compensation(double value);
  public:

  // optional uint32 start_plan_point_from = 11 [default = 0];
  bool has_start_plan_point_from() const;
  private:
  bool _internal_has_start_plan_point_from() const;
  public:
  void clear_start_plan_point_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_plan_point_from() const;
  void set_start_plan_point_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_plan_point_from() const;
  void _internal_set_start_plan_point_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_look_forward_time = 2 [default = 2];
  bool has_min_look_forward_time() const;
  private:
  bool _internal_has_min_look_forward_time() const;
  public:
  void clear_min_look_forward_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_look_forward_time() const;
  void set_min_look_forward_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_look_forward_time() const;
  void _internal_set_min_look_forward_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double min_path_length = 1 [default = 5];
  bool has_min_path_length() const;
  private:
  bool _internal_has_min_path_length() const;
  public:
  void clear_min_path_length();
  double min_path_length() const;
  void set_min_path_length(double value);
  private:
  double _internal_min_path_length() const;
  void _internal_set_min_path_length(double value);
  public:

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  bool has_max_keep_lane_distance() const;
  private:
  bool _internal_has_max_keep_lane_distance() const;
  public:
  void clear_max_keep_lane_distance();
  double max_keep_lane_distance() const;
  void set_max_keep_lane_distance(double value);
  private:
  double _internal_max_keep_lane_distance() const;
  void _internal_set_max_keep_lane_distance(double value);
  public:

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  bool has_max_keep_lane_shift_y() const;
  private:
  bool _internal_has_max_keep_lane_shift_y() const;
  public:
  void clear_max_keep_lane_shift_y();
  double max_keep_lane_shift_y() const;
  void set_max_keep_lane_shift_y(double value);
  private:
  double _internal_max_keep_lane_shift_y() const;
  void _internal_set_max_keep_lane_shift_y(double value);
  public:

  // optional double min_keep_lane_offset = 5 [default = 15];
  bool has_min_keep_lane_offset() const;
  private:
  bool _internal_has_min_keep_lane_offset() const;
  public:
  void clear_min_keep_lane_offset();
  double min_keep_lane_offset() const;
  void set_min_keep_lane_offset(double value);
  private:
  double _internal_min_keep_lane_offset() const;
  void _internal_set_min_keep_lane_offset(double value);
  public:

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  bool has_keep_lane_shift_compensation() const;
  private:
  bool _internal_has_keep_lane_shift_compensation() const;
  public:
  void clear_keep_lane_shift_compensation();
  double keep_lane_shift_compensation() const;
  void set_keep_lane_shift_compensation(double value);
  private:
  double _internal_keep_lane_shift_compensation() const;
  void _internal_set_keep_lane_shift_compensation(double value);
  public:

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  bool has_move_dest_lane_compensation() const;
  private:
  bool _internal_has_move_dest_lane_compensation() const;
  public:
  void clear_move_dest_lane_compensation();
  double move_dest_lane_compensation() const;
  void set_move_dest_lane_compensation(double value);
  private:
  double _internal_move_dest_lane_compensation() const;
  void _internal_set_move_dest_lane_compensation(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviPathDeciderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe_;
  double max_kappa_threshold_;
  double kappa_move_dest_lane_compensation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_plan_point_from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_look_forward_time_;
  double min_path_length_;
  double max_keep_lane_distance_;
  double max_keep_lane_shift_y_;
  double min_keep_lane_offset_;
  double keep_lane_shift_compensation_;
  double move_dest_lane_compensation_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MoveDestLaneConfigTable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MoveDestLaneConfigTable) */ {
 public:
  MoveDestLaneConfigTable();
  virtual ~MoveDestLaneConfigTable();

  MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from);
  MoveDestLaneConfigTable(MoveDestLaneConfigTable&& from) noexcept
    : MoveDestLaneConfigTable() {
    *this = ::std::move(from);
  }

  inline MoveDestLaneConfigTable& operator=(const MoveDestLaneConfigTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDestLaneConfigTable& operator=(MoveDestLaneConfigTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveDestLaneConfigTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveDestLaneConfigTable* internal_default_instance() {
    return reinterpret_cast<const MoveDestLaneConfigTable*>(
               &_MoveDestLaneConfigTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveDestLaneConfigTable& a, MoveDestLaneConfigTable& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDestLaneConfigTable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveDestLaneConfigTable* New() const final {
    return CreateMaybeMessage<MoveDestLaneConfigTable>(nullptr);
  }

  MoveDestLaneConfigTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveDestLaneConfigTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveDestLaneConfigTable& from);
  void MergeFrom(const MoveDestLaneConfigTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDestLaneConfigTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MoveDestLaneConfigTable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLateralShiftFieldNumber = 1,
  };
  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  int lateral_shift_size() const;
  private:
  int _internal_lateral_shift_size() const;
  public:
  void clear_lateral_shift();
  ::apollo::planning::ShiftConfig* mutable_lateral_shift(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
      mutable_lateral_shift();
  private:
  const ::apollo::planning::ShiftConfig& _internal_lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* _internal_add_lateral_shift();
  public:
  const ::apollo::planning::ShiftConfig& lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* add_lateral_shift();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
      lateral_shift() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.MoveDestLaneConfigTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig > lateral_shift_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ShiftConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ShiftConfig) */ {
 public:
  ShiftConfig();
  virtual ~ShiftConfig();

  ShiftConfig(const ShiftConfig& from);
  ShiftConfig(ShiftConfig&& from) noexcept
    : ShiftConfig() {
    *this = ::std::move(from);
  }

  inline ShiftConfig& operator=(const ShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftConfig& operator=(ShiftConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShiftConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShiftConfig* internal_default_instance() {
    return reinterpret_cast<const ShiftConfig*>(
               &_ShiftConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShiftConfig& a, ShiftConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ShiftConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShiftConfig* New() const final {
    return CreateMaybeMessage<ShiftConfig>(nullptr);
  }

  ShiftConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShiftConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShiftConfig& from);
  void MergeFrom(const ShiftConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ShiftConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSpeedFieldNumber = 1,
    kMaxMoveDestLaneShiftYFieldNumber = 3,
  };
  // optional double max_speed = 1 [default = 4.16];
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  bool has_max_move_dest_lane_shift_y() const;
  private:
  bool _internal_has_max_move_dest_lane_shift_y() const;
  public:
  void clear_max_move_dest_lane_shift_y();
  double max_move_dest_lane_shift_y() const;
  void set_max_move_dest_lane_shift_y(double value);
  private:
  double _internal_max_move_dest_lane_shift_y() const;
  void _internal_set_max_move_dest_lane_shift_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ShiftConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double max_speed_;
  double max_move_dest_lane_shift_y_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NaviPathDeciderConfig

// optional double min_path_length = 1 [default = 5];
inline bool NaviPathDeciderConfig::_internal_has_min_path_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_path_length() const {
  return _internal_has_min_path_length();
}
inline void NaviPathDeciderConfig::clear_min_path_length() {
  min_path_length_ = 5;
  _has_bits_[0] &= ~0x00000020u;
}
inline double NaviPathDeciderConfig::_internal_min_path_length() const {
  return min_path_length_;
}
inline double NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_path_length)
  return _internal_min_path_length();
}
inline void NaviPathDeciderConfig::_internal_set_min_path_length(double value) {
  _has_bits_[0] |= 0x00000020u;
  min_path_length_ = value;
}
inline void NaviPathDeciderConfig::set_min_path_length(double value) {
  _internal_set_min_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
inline bool NaviPathDeciderConfig::_internal_has_min_look_forward_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return _internal_has_min_look_forward_time();
}
inline void NaviPathDeciderConfig::clear_min_look_forward_time() {
  min_look_forward_time_ = 2u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NaviPathDeciderConfig::_internal_min_look_forward_time() const {
  return min_look_forward_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
  return _internal_min_look_forward_time();
}
inline void NaviPathDeciderConfig::_internal_set_min_look_forward_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  min_look_forward_time_ = value;
}
inline void NaviPathDeciderConfig::set_min_look_forward_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_look_forward_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double max_keep_lane_distance = 3 [default = 0.8];
inline bool NaviPathDeciderConfig::_internal_has_max_keep_lane_distance() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_keep_lane_distance() const {
  return _internal_has_max_keep_lane_distance();
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_distance() {
  max_keep_lane_distance_ = 0.8;
  _has_bits_[0] &= ~0x00000040u;
}
inline double NaviPathDeciderConfig::_internal_max_keep_lane_distance() const {
  return max_keep_lane_distance_;
}
inline double NaviPathDeciderConfig::max_keep_lane_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
  return _internal_max_keep_lane_distance();
}
inline void NaviPathDeciderConfig::_internal_set_max_keep_lane_distance(double value) {
  _has_bits_[0] |= 0x00000040u;
  max_keep_lane_distance_ = value;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_distance(double value) {
  _internal_set_max_keep_lane_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
}

// optional double max_keep_lane_shift_y = 4 [default = 20];
inline bool NaviPathDeciderConfig::_internal_has_max_keep_lane_shift_y() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_keep_lane_shift_y() const {
  return _internal_has_max_keep_lane_shift_y();
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_shift_y() {
  max_keep_lane_shift_y_ = 20;
  _has_bits_[0] &= ~0x00000080u;
}
inline double NaviPathDeciderConfig::_internal_max_keep_lane_shift_y() const {
  return max_keep_lane_shift_y_;
}
inline double NaviPathDeciderConfig::max_keep_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
  return _internal_max_keep_lane_shift_y();
}
inline void NaviPathDeciderConfig::_internal_set_max_keep_lane_shift_y(double value) {
  _has_bits_[0] |= 0x00000080u;
  max_keep_lane_shift_y_ = value;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_shift_y(double value) {
  _internal_set_max_keep_lane_shift_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
}

// optional double min_keep_lane_offset = 5 [default = 15];
inline bool NaviPathDeciderConfig::_internal_has_min_keep_lane_offset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_keep_lane_offset() const {
  return _internal_has_min_keep_lane_offset();
}
inline void NaviPathDeciderConfig::clear_min_keep_lane_offset() {
  min_keep_lane_offset_ = 15;
  _has_bits_[0] &= ~0x00000100u;
}
inline double NaviPathDeciderConfig::_internal_min_keep_lane_offset() const {
  return min_keep_lane_offset_;
}
inline double NaviPathDeciderConfig::min_keep_lane_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
  return _internal_min_keep_lane_offset();
}
inline void NaviPathDeciderConfig::_internal_set_min_keep_lane_offset(double value) {
  _has_bits_[0] |= 0x00000100u;
  min_keep_lane_offset_ = value;
}
inline void NaviPathDeciderConfig::set_min_keep_lane_offset(double value) {
  _internal_set_min_keep_lane_offset(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
}

// optional double keep_lane_shift_compensation = 6 [default = 0.01];
inline bool NaviPathDeciderConfig::_internal_has_keep_lane_shift_compensation() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_keep_lane_shift_compensation() const {
  return _internal_has_keep_lane_shift_compensation();
}
inline void NaviPathDeciderConfig::clear_keep_lane_shift_compensation() {
  keep_lane_shift_compensation_ = 0.01;
  _has_bits_[0] &= ~0x00000200u;
}
inline double NaviPathDeciderConfig::_internal_keep_lane_shift_compensation() const {
  return keep_lane_shift_compensation_;
}
inline double NaviPathDeciderConfig::keep_lane_shift_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
  return _internal_keep_lane_shift_compensation();
}
inline void NaviPathDeciderConfig::_internal_set_keep_lane_shift_compensation(double value) {
  _has_bits_[0] |= 0x00000200u;
  keep_lane_shift_compensation_ = value;
}
inline void NaviPathDeciderConfig::set_keep_lane_shift_compensation(double value) {
  _internal_set_keep_lane_shift_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
}

// optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
inline bool NaviPathDeciderConfig::_internal_has_move_dest_lane_config_talbe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || move_dest_lane_config_talbe_ != nullptr);
  return value;
}
inline bool NaviPathDeciderConfig::has_move_dest_lane_config_talbe() const {
  return _internal_has_move_dest_lane_config_talbe();
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_config_talbe() {
  if (move_dest_lane_config_talbe_ != nullptr) move_dest_lane_config_talbe_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::_internal_move_dest_lane_config_talbe() const {
  const ::apollo::planning::MoveDestLaneConfigTable* p = move_dest_lane_config_talbe_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::MoveDestLaneConfigTable*>(
      &::apollo::planning::_MoveDestLaneConfigTable_default_instance_);
}
inline const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::move_dest_lane_config_talbe() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return _internal_move_dest_lane_config_talbe();
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::release_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MoveDestLaneConfigTable* temp = move_dest_lane_config_talbe_;
  move_dest_lane_config_talbe_ = nullptr;
  return temp;
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::_internal_mutable_move_dest_lane_config_talbe() {
  _has_bits_[0] |= 0x00000001u;
  if (move_dest_lane_config_talbe_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::MoveDestLaneConfigTable>(GetArenaNoVirtual());
    move_dest_lane_config_talbe_ = p;
  }
  return move_dest_lane_config_talbe_;
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::mutable_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return _internal_mutable_move_dest_lane_config_talbe();
}
inline void NaviPathDeciderConfig::set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete move_dest_lane_config_talbe_;
  }
  if (move_dest_lane_config_talbe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      move_dest_lane_config_talbe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_dest_lane_config_talbe, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}

// optional double move_dest_lane_compensation = 8 [default = 0.35];
inline bool NaviPathDeciderConfig::_internal_has_move_dest_lane_compensation() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_move_dest_lane_compensation() const {
  return _internal_has_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_compensation() {
  move_dest_lane_compensation_ = 0.35;
  _has_bits_[0] &= ~0x00000400u;
}
inline double NaviPathDeciderConfig::_internal_move_dest_lane_compensation() const {
  return move_dest_lane_compensation_;
}
inline double NaviPathDeciderConfig::move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
  return _internal_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::_internal_set_move_dest_lane_compensation(double value) {
  _has_bits_[0] |= 0x00000400u;
  move_dest_lane_compensation_ = value;
}
inline void NaviPathDeciderConfig::set_move_dest_lane_compensation(double value) {
  _internal_set_move_dest_lane_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
}

// optional double max_kappa_threshold = 9 [default = 0];
inline bool NaviPathDeciderConfig::_internal_has_max_kappa_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_kappa_threshold() const {
  return _internal_has_max_kappa_threshold();
}
inline void NaviPathDeciderConfig::clear_max_kappa_threshold() {
  max_kappa_threshold_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double NaviPathDeciderConfig::_internal_max_kappa_threshold() const {
  return max_kappa_threshold_;
}
inline double NaviPathDeciderConfig::max_kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
  return _internal_max_kappa_threshold();
}
inline void NaviPathDeciderConfig::_internal_set_max_kappa_threshold(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_kappa_threshold_ = value;
}
inline void NaviPathDeciderConfig::set_max_kappa_threshold(double value) {
  _internal_set_max_kappa_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
}

// optional double kappa_move_dest_lane_compensation = 10 [default = 0];
inline bool NaviPathDeciderConfig::_internal_has_kappa_move_dest_lane_compensation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_kappa_move_dest_lane_compensation() const {
  return _internal_has_kappa_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::clear_kappa_move_dest_lane_compensation() {
  kappa_move_dest_lane_compensation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double NaviPathDeciderConfig::_internal_kappa_move_dest_lane_compensation() const {
  return kappa_move_dest_lane_compensation_;
}
inline double NaviPathDeciderConfig::kappa_move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
  return _internal_kappa_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::_internal_set_kappa_move_dest_lane_compensation(double value) {
  _has_bits_[0] |= 0x00000004u;
  kappa_move_dest_lane_compensation_ = value;
}
inline void NaviPathDeciderConfig::set_kappa_move_dest_lane_compensation(double value) {
  _internal_set_kappa_move_dest_lane_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
}

// optional uint32 start_plan_point_from = 11 [default = 0];
inline bool NaviPathDeciderConfig::_internal_has_start_plan_point_from() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_start_plan_point_from() const {
  return _internal_has_start_plan_point_from();
}
inline void NaviPathDeciderConfig::clear_start_plan_point_from() {
  start_plan_point_from_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NaviPathDeciderConfig::_internal_start_plan_point_from() const {
  return start_plan_point_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NaviPathDeciderConfig::start_plan_point_from() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
  return _internal_start_plan_point_from();
}
inline void NaviPathDeciderConfig::_internal_set_start_plan_point_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_plan_point_from_ = value;
}
inline void NaviPathDeciderConfig::set_start_plan_point_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_plan_point_from(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
}

// -------------------------------------------------------------------

// MoveDestLaneConfigTable

// repeated .apollo.planning.ShiftConfig lateral_shift = 1;
inline int MoveDestLaneConfigTable::_internal_lateral_shift_size() const {
  return lateral_shift_.size();
}
inline int MoveDestLaneConfigTable::lateral_shift_size() const {
  return _internal_lateral_shift_size();
}
inline void MoveDestLaneConfigTable::clear_lateral_shift() {
  lateral_shift_.Clear();
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
MoveDestLaneConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return &lateral_shift_;
}
inline const ::apollo::planning::ShiftConfig& MoveDestLaneConfigTable::_internal_lateral_shift(int index) const {
  return lateral_shift_.Get(index);
}
inline const ::apollo::planning::ShiftConfig& MoveDestLaneConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return _internal_lateral_shift(index);
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::_internal_add_lateral_shift() {
  return lateral_shift_.Add();
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::add_lateral_shift() {
  // @@protoc_insertion_point(field_add:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return _internal_add_lateral_shift();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
MoveDestLaneConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return lateral_shift_;
}

// -------------------------------------------------------------------

// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
inline bool ShiftConfig::_internal_has_max_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShiftConfig::has_max_speed() const {
  return _internal_has_max_speed();
}
inline void ShiftConfig::clear_max_speed() {
  max_speed_ = 4.16;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ShiftConfig::_internal_max_speed() const {
  return max_speed_;
}
inline double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_speed)
  return _internal_max_speed();
}
inline void ShiftConfig::_internal_set_max_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  max_speed_ = value;
}
inline void ShiftConfig::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_speed)
}

// optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
inline bool ShiftConfig::_internal_has_max_move_dest_lane_shift_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShiftConfig::has_max_move_dest_lane_shift_y() const {
  return _internal_has_max_move_dest_lane_shift_y();
}
inline void ShiftConfig::clear_max_move_dest_lane_shift_y() {
  max_move_dest_lane_shift_y_ = 0.4;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ShiftConfig::_internal_max_move_dest_lane_shift_y() const {
  return max_move_dest_lane_shift_y_;
}
inline double ShiftConfig::max_move_dest_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
  return _internal_max_move_dest_lane_shift_y();
}
inline void ShiftConfig::_internal_set_max_move_dest_lane_shift_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_move_dest_lane_shift_y_ = value;
}
inline void ShiftConfig::set_max_move_dest_lane_shift_y(double value) {
  _internal_set_max_move_dest_lane_shift_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto
