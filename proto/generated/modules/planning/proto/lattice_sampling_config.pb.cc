// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_sampling_config.proto

#include "modules/planning/proto/lattice_sampling_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
namespace apollo {
namespace planning {
class LonConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LonCondition> _instance;
} _LonCondition_default_instance_;
class LatConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatCondition> _instance;
} _LatCondition_default_instance_;
class TStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStrategy> _instance;
} _TStrategy_default_instance_;
class SStrategyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SStrategy> _instance;
} _SStrategy_default_instance_;
class LonSampleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LonSampleConfig> _instance;
} _LonSampleConfig_default_instance_;
class LatSampleConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatSampleConfig> _instance;
} _LatSampleConfig_default_instance_;
class LatticeSamplingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatticeSamplingConfig> _instance;
} _LatticeSamplingConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static void InitDefaultsscc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LatCondition_default_instance_;
    new (ptr) ::apollo::planning::LatCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LatCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LatSampleConfig_default_instance_;
    new (ptr) ::apollo::planning::LatSampleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LatSampleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {
      &scc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
      &scc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_LatticeSamplingConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LatticeSamplingConfig_default_instance_;
    new (ptr) ::apollo::planning::LatticeSamplingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LatticeSamplingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatticeSamplingConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LatticeSamplingConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {
      &scc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
      &scc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LonCondition_default_instance_;
    new (ptr) ::apollo::planning::LonCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LonCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LonSampleConfig_default_instance_;
    new (ptr) ::apollo::planning::LonSampleConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LonSampleConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {
      &scc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
      &scc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_SStrategy_default_instance_;
    new (ptr) ::apollo::planning::SStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::SStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TStrategy_default_instance_;
    new (ptr) ::apollo::planning::TStrategy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TStrategy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, ds_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, dds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, dl_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, ddl_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, t_markers_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, t_step_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, strategy_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, s_markers_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, s_step_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, strategy_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, lon_end_condition_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, t_strategy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, lat_end_condition_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, s_strategy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, lon_sample_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, lat_sample_config_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::planning::LonCondition)},
  { 11, 19, sizeof(::apollo::planning::LatCondition)},
  { 22, 30, sizeof(::apollo::planning::TStrategy)},
  { 33, 41, sizeof(::apollo::planning::SStrategy)},
  { 44, 51, sizeof(::apollo::planning::LonSampleConfig)},
  { 53, 60, sizeof(::apollo::planning::LatSampleConfig)},
  { 62, 69, sizeof(::apollo::planning::LatticeSamplingConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LonCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LatCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_TStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_SStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LonSampleConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LatSampleConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::planning::_LatticeSamplingConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/planning/proto/lattice_samplin"
  "g_config.proto\022\017apollo.planning\";\n\014LonCo"
  "ndition\022\014\n\001s\030\001 \001(\001:\0010\022\r\n\002ds\030\002 \001(\001:\0010\022\016\n\003"
  "dds\030\003 \001(\001:\0010\";\n\014LatCondition\022\014\n\001l\030\001 \001(\001:"
  "\0010\022\r\n\002dl\030\002 \001(\001:\0010\022\016\n\003ddl\030\003 \001(\001:\0010\"E\n\tTSt"
  "rategy\022\021\n\tt_markers\030\001 \003(\001\022\023\n\006t_step\030\002 \001("
  "\001:\0030.5\022\020\n\010strategy\030\003 \001(\t\"E\n\tSStrategy\022\021\n"
  "\ts_markers\030\001 \003(\001\022\023\n\006s_step\030\002 \001(\001:\0030.5\022\020\n"
  "\010strategy\030\003 \001(\t\"{\n\017LonSampleConfig\0228\n\021lo"
  "n_end_condition\030\001 \001(\0132\035.apollo.planning."
  "LonCondition\022.\n\nt_strategy\030\002 \001(\0132\032.apoll"
  "o.planning.TStrategy\"{\n\017LatSampleConfig\022"
  "8\n\021lat_end_condition\030\001 \001(\0132\035.apollo.plan"
  "ning.LatCondition\022.\n\ns_strategy\030\002 \001(\0132\032."
  "apollo.planning.SStrategy\"\221\001\n\025LatticeSam"
  "plingConfig\022;\n\021lon_sample_config\030\001 \001(\0132 "
  ".apollo.planning.LonSampleConfig\022;\n\021lat_"
  "sample_config\030\002 \001(\0132 .apollo.planning.La"
  "tSampleConfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_sccs[7] = {
  &scc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
  &scc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
  &scc_info_LatticeSamplingConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
  &scc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
  &scc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
  &scc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
  &scc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = {
  &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto, "modules/planning/proto/lattice_sampling_config.proto", 733,
  &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_sccs, descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto, 7, file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto, file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto), true);
namespace apollo {
namespace planning {

// ===================================================================

void LonCondition::InitAsDefaultInstance() {
}
class LonCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<LonCondition>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LonCondition::LonCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LonCondition)
}
LonCondition::LonCondition(const LonCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&dds_) -
    reinterpret_cast<char*>(&s_)) + sizeof(dds_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LonCondition)
}

void LonCondition::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dds_) -
      reinterpret_cast<char*>(&s_)) + sizeof(dds_));
}

LonCondition::~LonCondition() {
  // @@protoc_insertion_point(destructor:apollo.planning.LonCondition)
  SharedDtor();
}

void LonCondition::SharedDtor() {
}

void LonCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LonCondition& LonCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LonCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LonCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LonCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dds_) -
        reinterpret_cast<char*>(&s_)) + sizeof(dds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LonCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double s = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ds = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ds(&has_bits);
          ds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dds = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_dds(&has_bits);
          dds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LonCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LonCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double ds = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ds(), target);
  }

  // optional double dds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LonCondition)
  return target;
}

size_t LonCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LonCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double s = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ds = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double dds = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LonCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const LonCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LonCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LonCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LonCondition)
    MergeFrom(*source);
  }
}

void LonCondition::MergeFrom(const LonCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LonCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      ds_ = from.ds_;
    }
    if (cached_has_bits & 0x00000004u) {
      dds_ = from.dds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LonCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LonCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonCondition::CopyFrom(const LonCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LonCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonCondition::IsInitialized() const {
  return true;
}

void LonCondition::InternalSwap(LonCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_, other->s_);
  swap(ds_, other->ds_);
  swap(dds_, other->dds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LonCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatCondition::InitAsDefaultInstance() {
}
class LatCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<LatCondition>()._has_bits_);
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ddl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LatCondition::LatCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LatCondition)
}
LatCondition::LatCondition(const LatCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_, &from.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddl_) -
    reinterpret_cast<char*>(&l_)) + sizeof(ddl_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatCondition)
}

void LatCondition::SharedCtor() {
  ::memset(&l_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddl_) -
      reinterpret_cast<char*>(&l_)) + sizeof(ddl_));
}

LatCondition::~LatCondition() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatCondition)
  SharedDtor();
}

void LatCondition::SharedDtor() {
}

void LatCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatCondition& LatCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatCondition_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&l_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ddl_) -
        reinterpret_cast<char*>(&l_)) + sizeof(ddl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double l = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dl = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_dl(&has_bits);
          dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ddl = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_ddl(&has_bits);
          ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_l(), target);
  }

  // optional double dl = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dl(), target);
  }

  // optional double ddl = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ddl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatCondition)
  return target;
}

size_t LatCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double l = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dl = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ddl = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LatCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const LatCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LatCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LatCondition)
    MergeFrom(*source);
  }
}

void LatCondition::MergeFrom(const LatCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_ = from.dl_;
    }
    if (cached_has_bits & 0x00000004u) {
      ddl_ = from.ddl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LatCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatCondition::CopyFrom(const LatCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatCondition::IsInitialized() const {
  return true;
}

void LatCondition::InternalSwap(LatCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(l_, other->l_);
  swap(dl_, other->dl_);
  swap(ddl_, other->ddl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TStrategy::InitAsDefaultInstance() {
}
class TStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<TStrategy>()._has_bits_);
  static void set_has_t_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TStrategy::TStrategy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TStrategy)
}
TStrategy::TStrategy(const TStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      t_markers_(from.t_markers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strategy()) {
    strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  t_step_ = from.t_step_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TStrategy)
}

void TStrategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  t_step_ = 0.5;
}

TStrategy::~TStrategy() {
  // @@protoc_insertion_point(destructor:apollo.planning.TStrategy)
  SharedDtor();
}

void TStrategy::SharedDtor() {
  strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TStrategy& TStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void TStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t_markers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strategy_.ClearNonDefaultToEmptyNoArena();
    }
    t_step_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double t_markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t_markers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t_markers(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double t_step = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_t_step(&has_bits);
          t_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.TStrategy.strategy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t_markers = 1;
  for (int i = 0, n = this->_internal_t_markers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t_markers(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double t_step = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t_step(), target);
  }

  // optional string strategy = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TStrategy.strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TStrategy)
  return target;
}

size_t TStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t_markers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_markers_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_t_markers_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strategy = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strategy());
    }

    // optional double t_step = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const TStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TStrategy)
    MergeFrom(*source);
  }
}

void TStrategy::MergeFrom(const TStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t_markers_.MergeFrom(from.t_markers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
    }
    if (cached_has_bits & 0x00000002u) {
      t_step_ = from.t_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStrategy::CopyFrom(const TStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TStrategy::IsInitialized() const {
  return true;
}

void TStrategy::InternalSwap(TStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  t_markers_.InternalSwap(&other->t_markers_);
  strategy_.Swap(&other->strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(t_step_, other->t_step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SStrategy::InitAsDefaultInstance() {
}
class SStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<SStrategy>()._has_bits_);
  static void set_has_s_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SStrategy::SStrategy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.SStrategy)
}
SStrategy::SStrategy(const SStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      s_markers_(from.s_markers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strategy()) {
    strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
  }
  s_step_ = from.s_step_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SStrategy)
}

void SStrategy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  strategy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_step_ = 0.5;
}

SStrategy::~SStrategy() {
  // @@protoc_insertion_point(destructor:apollo.planning.SStrategy)
  SharedDtor();
}

void SStrategy::SharedDtor() {
  strategy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SStrategy& SStrategy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SStrategy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_markers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strategy_.ClearNonDefaultToEmptyNoArena();
    }
    s_step_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double s_markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_s_markers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_s_markers(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double s_step = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_s_step(&has_bits);
          s_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strategy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.planning.SStrategy.strategy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SStrategy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SStrategy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double s_markers = 1;
  for (int i = 0, n = this->_internal_s_markers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_s_markers(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double s_step = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_step(), target);
  }

  // optional string strategy = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.SStrategy.strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SStrategy)
  return target;
}

size_t SStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SStrategy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double s_markers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_s_markers_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_s_markers_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strategy = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strategy());
    }

    // optional double s_step = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SStrategy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.SStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  const SStrategy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SStrategy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.SStrategy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.SStrategy)
    MergeFrom(*source);
  }
}

void SStrategy::MergeFrom(const SStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  s_markers_.MergeFrom(from.s_markers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      strategy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strategy_);
    }
    if (cached_has_bits & 0x00000002u) {
      s_step_ = from.s_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SStrategy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.SStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SStrategy::CopyFrom(const SStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStrategy::IsInitialized() const {
  return true;
}

void SStrategy::InternalSwap(SStrategy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  s_markers_.InternalSwap(&other->s_markers_);
  strategy_.Swap(&other->strategy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(s_step_, other->s_step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SStrategy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LonSampleConfig::InitAsDefaultInstance() {
  ::apollo::planning::_LonSampleConfig_default_instance_._instance.get_mutable()->lon_end_condition_ = const_cast< ::apollo::planning::LonCondition*>(
      ::apollo::planning::LonCondition::internal_default_instance());
  ::apollo::planning::_LonSampleConfig_default_instance_._instance.get_mutable()->t_strategy_ = const_cast< ::apollo::planning::TStrategy*>(
      ::apollo::planning::TStrategy::internal_default_instance());
}
class LonSampleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LonSampleConfig>()._has_bits_);
  static const ::apollo::planning::LonCondition& lon_end_condition(const LonSampleConfig* msg);
  static void set_has_lon_end_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::TStrategy& t_strategy(const LonSampleConfig* msg);
  static void set_has_t_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::LonCondition&
LonSampleConfig::_Internal::lon_end_condition(const LonSampleConfig* msg) {
  return *msg->lon_end_condition_;
}
const ::apollo::planning::TStrategy&
LonSampleConfig::_Internal::t_strategy(const LonSampleConfig* msg) {
  return *msg->t_strategy_;
}
LonSampleConfig::LonSampleConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LonSampleConfig)
}
LonSampleConfig::LonSampleConfig(const LonSampleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lon_end_condition()) {
    lon_end_condition_ = new ::apollo::planning::LonCondition(*from.lon_end_condition_);
  } else {
    lon_end_condition_ = nullptr;
  }
  if (from._internal_has_t_strategy()) {
    t_strategy_ = new ::apollo::planning::TStrategy(*from.t_strategy_);
  } else {
    t_strategy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LonSampleConfig)
}

void LonSampleConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  ::memset(&lon_end_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_strategy_) -
      reinterpret_cast<char*>(&lon_end_condition_)) + sizeof(t_strategy_));
}

LonSampleConfig::~LonSampleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LonSampleConfig)
  SharedDtor();
}

void LonSampleConfig::SharedDtor() {
  if (this != internal_default_instance()) delete lon_end_condition_;
  if (this != internal_default_instance()) delete t_strategy_;
}

void LonSampleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LonSampleConfig& LonSampleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LonSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LonSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LonSampleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lon_end_condition_ != nullptr);
      lon_end_condition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(t_strategy_ != nullptr);
      t_strategy_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LonSampleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.LonCondition lon_end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_end_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.TStrategy t_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LonSampleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LonSampleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.LonCondition lon_end_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lon_end_condition(this), target, stream);
  }

  // optional .apollo.planning.TStrategy t_strategy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::t_strategy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LonSampleConfig)
  return target;
}

size_t LonSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LonSampleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.LonCondition lon_end_condition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lon_end_condition_);
    }

    // optional .apollo.planning.TStrategy t_strategy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t_strategy_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonSampleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LonSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LonSampleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LonSampleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LonSampleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LonSampleConfig)
    MergeFrom(*source);
  }
}

void LonSampleConfig::MergeFrom(const LonSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LonSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lon_end_condition()->::apollo::planning::LonCondition::MergeFrom(from._internal_lon_end_condition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_t_strategy()->::apollo::planning::TStrategy::MergeFrom(from._internal_t_strategy());
    }
  }
}

void LonSampleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LonSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonSampleConfig::CopyFrom(const LonSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LonSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonSampleConfig::IsInitialized() const {
  return true;
}

void LonSampleConfig::InternalSwap(LonSampleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lon_end_condition_, other->lon_end_condition_);
  swap(t_strategy_, other->t_strategy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LonSampleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatSampleConfig::InitAsDefaultInstance() {
  ::apollo::planning::_LatSampleConfig_default_instance_._instance.get_mutable()->lat_end_condition_ = const_cast< ::apollo::planning::LatCondition*>(
      ::apollo::planning::LatCondition::internal_default_instance());
  ::apollo::planning::_LatSampleConfig_default_instance_._instance.get_mutable()->s_strategy_ = const_cast< ::apollo::planning::SStrategy*>(
      ::apollo::planning::SStrategy::internal_default_instance());
}
class LatSampleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LatSampleConfig>()._has_bits_);
  static const ::apollo::planning::LatCondition& lat_end_condition(const LatSampleConfig* msg);
  static void set_has_lat_end_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::SStrategy& s_strategy(const LatSampleConfig* msg);
  static void set_has_s_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::LatCondition&
LatSampleConfig::_Internal::lat_end_condition(const LatSampleConfig* msg) {
  return *msg->lat_end_condition_;
}
const ::apollo::planning::SStrategy&
LatSampleConfig::_Internal::s_strategy(const LatSampleConfig* msg) {
  return *msg->s_strategy_;
}
LatSampleConfig::LatSampleConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LatSampleConfig)
}
LatSampleConfig::LatSampleConfig(const LatSampleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lat_end_condition()) {
    lat_end_condition_ = new ::apollo::planning::LatCondition(*from.lat_end_condition_);
  } else {
    lat_end_condition_ = nullptr;
  }
  if (from._internal_has_s_strategy()) {
    s_strategy_ = new ::apollo::planning::SStrategy(*from.s_strategy_);
  } else {
    s_strategy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatSampleConfig)
}

void LatSampleConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  ::memset(&lat_end_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_strategy_) -
      reinterpret_cast<char*>(&lat_end_condition_)) + sizeof(s_strategy_));
}

LatSampleConfig::~LatSampleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatSampleConfig)
  SharedDtor();
}

void LatSampleConfig::SharedDtor() {
  if (this != internal_default_instance()) delete lat_end_condition_;
  if (this != internal_default_instance()) delete s_strategy_;
}

void LatSampleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatSampleConfig& LatSampleConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatSampleConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatSampleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_end_condition_ != nullptr);
      lat_end_condition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s_strategy_ != nullptr);
      s_strategy_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatSampleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.LatCondition lat_end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_end_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.SStrategy s_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_s_strategy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatSampleConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatSampleConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.LatCondition lat_end_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lat_end_condition(this), target, stream);
  }

  // optional .apollo.planning.SStrategy s_strategy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::s_strategy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatSampleConfig)
  return target;
}

size_t LatSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatSampleConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.LatCondition lat_end_condition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_end_condition_);
    }

    // optional .apollo.planning.SStrategy s_strategy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *s_strategy_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatSampleConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LatSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LatSampleConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatSampleConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LatSampleConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LatSampleConfig)
    MergeFrom(*source);
  }
}

void LatSampleConfig::MergeFrom(const LatSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lat_end_condition()->::apollo::planning::LatCondition::MergeFrom(from._internal_lat_end_condition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_s_strategy()->::apollo::planning::SStrategy::MergeFrom(from._internal_s_strategy());
    }
  }
}

void LatSampleConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LatSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatSampleConfig::CopyFrom(const LatSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatSampleConfig::IsInitialized() const {
  return true;
}

void LatSampleConfig::InternalSwap(LatSampleConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lat_end_condition_, other->lat_end_condition_);
  swap(s_strategy_, other->s_strategy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatSampleConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatticeSamplingConfig::InitAsDefaultInstance() {
  ::apollo::planning::_LatticeSamplingConfig_default_instance_._instance.get_mutable()->lon_sample_config_ = const_cast< ::apollo::planning::LonSampleConfig*>(
      ::apollo::planning::LonSampleConfig::internal_default_instance());
  ::apollo::planning::_LatticeSamplingConfig_default_instance_._instance.get_mutable()->lat_sample_config_ = const_cast< ::apollo::planning::LatSampleConfig*>(
      ::apollo::planning::LatSampleConfig::internal_default_instance());
}
class LatticeSamplingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LatticeSamplingConfig>()._has_bits_);
  static const ::apollo::planning::LonSampleConfig& lon_sample_config(const LatticeSamplingConfig* msg);
  static void set_has_lon_sample_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::LatSampleConfig& lat_sample_config(const LatticeSamplingConfig* msg);
  static void set_has_lat_sample_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::LonSampleConfig&
LatticeSamplingConfig::_Internal::lon_sample_config(const LatticeSamplingConfig* msg) {
  return *msg->lon_sample_config_;
}
const ::apollo::planning::LatSampleConfig&
LatticeSamplingConfig::_Internal::lat_sample_config(const LatticeSamplingConfig* msg) {
  return *msg->lat_sample_config_;
}
LatticeSamplingConfig::LatticeSamplingConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LatticeSamplingConfig)
}
LatticeSamplingConfig::LatticeSamplingConfig(const LatticeSamplingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lon_sample_config()) {
    lon_sample_config_ = new ::apollo::planning::LonSampleConfig(*from.lon_sample_config_);
  } else {
    lon_sample_config_ = nullptr;
  }
  if (from._internal_has_lat_sample_config()) {
    lat_sample_config_ = new ::apollo::planning::LatSampleConfig(*from.lat_sample_config_);
  } else {
    lat_sample_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatticeSamplingConfig)
}

void LatticeSamplingConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatticeSamplingConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  ::memset(&lon_sample_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_sample_config_) -
      reinterpret_cast<char*>(&lon_sample_config_)) + sizeof(lat_sample_config_));
}

LatticeSamplingConfig::~LatticeSamplingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatticeSamplingConfig)
  SharedDtor();
}

void LatticeSamplingConfig::SharedDtor() {
  if (this != internal_default_instance()) delete lon_sample_config_;
  if (this != internal_default_instance()) delete lat_sample_config_;
}

void LatticeSamplingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatticeSamplingConfig& LatticeSamplingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatticeSamplingConfig_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LatticeSamplingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatticeSamplingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lon_sample_config_ != nullptr);
      lon_sample_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lat_sample_config_ != nullptr);
      lat_sample_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatticeSamplingConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_sample_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_sample_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatticeSamplingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatticeSamplingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lon_sample_config(this), target, stream);
  }

  // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lat_sample_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatticeSamplingConfig)
  return target;
}

size_t LatticeSamplingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatticeSamplingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lon_sample_config_);
    }

    // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_sample_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatticeSamplingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LatticeSamplingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeSamplingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatticeSamplingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LatticeSamplingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LatticeSamplingConfig)
    MergeFrom(*source);
  }
}

void LatticeSamplingConfig::MergeFrom(const LatticeSamplingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatticeSamplingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lon_sample_config()->::apollo::planning::LonSampleConfig::MergeFrom(from._internal_lon_sample_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lat_sample_config()->::apollo::planning::LatSampleConfig::MergeFrom(from._internal_lat_sample_config());
    }
  }
}

void LatticeSamplingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LatticeSamplingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeSamplingConfig::CopyFrom(const LatticeSamplingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatticeSamplingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeSamplingConfig::IsInitialized() const {
  return true;
}

void LatticeSamplingConfig::InternalSwap(LatticeSamplingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lon_sample_config_, other->lon_sample_config_);
  swap(lat_sample_config_, other->lat_sample_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeSamplingConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::LonCondition* Arena::CreateMaybeMessage< ::apollo::planning::LonCondition >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LonCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatCondition* Arena::CreateMaybeMessage< ::apollo::planning::LatCondition >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LatCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TStrategy* Arena::CreateMaybeMessage< ::apollo::planning::TStrategy >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SStrategy* Arena::CreateMaybeMessage< ::apollo::planning::SStrategy >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::SStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LonSampleConfig* Arena::CreateMaybeMessage< ::apollo::planning::LonSampleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LonSampleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatSampleConfig* Arena::CreateMaybeMessage< ::apollo::planning::LatSampleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LatSampleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatticeSamplingConfig* Arena::CreateMaybeMessage< ::apollo::planning::LatticeSamplingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LatticeSamplingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
