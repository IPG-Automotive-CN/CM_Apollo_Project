// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_speed_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class NaviSpeedDeciderConfig;
class NaviSpeedDeciderConfigDefaultTypeInternal;
extern NaviSpeedDeciderConfigDefaultTypeInternal _NaviSpeedDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviSpeedDeciderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class NaviSpeedDeciderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviSpeedDeciderConfig) */ {
 public:
  NaviSpeedDeciderConfig();
  virtual ~NaviSpeedDeciderConfig();

  NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from);
  NaviSpeedDeciderConfig(NaviSpeedDeciderConfig&& from) noexcept
    : NaviSpeedDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviSpeedDeciderConfig& operator=(const NaviSpeedDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviSpeedDeciderConfig& operator=(NaviSpeedDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NaviSpeedDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaviSpeedDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviSpeedDeciderConfig*>(
               &_NaviSpeedDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NaviSpeedDeciderConfig& a, NaviSpeedDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviSpeedDeciderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NaviSpeedDeciderConfig* New() const final {
    return CreateMaybeMessage<NaviSpeedDeciderConfig>(nullptr);
  }

  NaviSpeedDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NaviSpeedDeciderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NaviSpeedDeciderConfig& from);
  void MergeFrom(const NaviSpeedDeciderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviSpeedDeciderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviSpeedDeciderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKappaPreviewFieldNumber = 17,
    kKappaThresholdFieldNumber = 18,
    kEnableSafePathFieldNumber = 14,
    kEnablePlanningStartPointFieldNumber = 15,
    kEnableAccelAutoCompensationFieldNumber = 16,
    kPreferredAccelFieldNumber = 1,
    kPreferredDecelFieldNumber = 2,
    kPreferredJerkFieldNumber = 3,
    kMaxAccelFieldNumber = 4,
    kMaxDecelFieldNumber = 5,
    kObstacleBufferFieldNumber = 6,
    kSafeDistanceBaseFieldNumber = 7,
    kSafeDistanceRatioFieldNumber = 8,
    kFollowingAccelRatioFieldNumber = 9,
    kSoftCentricAccelLimitFieldNumber = 10,
    kHardCentricAccelLimitFieldNumber = 11,
    kHardSpeedLimitFieldNumber = 12,
    kHardAccelLimitFieldNumber = 13,
  };
  // optional double kappa_preview = 17 [default = 0];
  bool has_kappa_preview() const;
  private:
  bool _internal_has_kappa_preview() const;
  public:
  void clear_kappa_preview();
  double kappa_preview() const;
  void set_kappa_preview(double value);
  private:
  double _internal_kappa_preview() const;
  void _internal_set_kappa_preview(double value);
  public:

  // optional double kappa_threshold = 18 [default = 0];
  bool has_kappa_threshold() const;
  private:
  bool _internal_has_kappa_threshold() const;
  public:
  void clear_kappa_threshold();
  double kappa_threshold() const;
  void set_kappa_threshold(double value);
  private:
  double _internal_kappa_threshold() const;
  void _internal_set_kappa_threshold(double value);
  public:

  // optional bool enable_safe_path = 14 [default = true];
  bool has_enable_safe_path() const;
  private:
  bool _internal_has_enable_safe_path() const;
  public:
  void clear_enable_safe_path();
  bool enable_safe_path() const;
  void set_enable_safe_path(bool value);
  private:
  bool _internal_enable_safe_path() const;
  void _internal_set_enable_safe_path(bool value);
  public:

  // optional bool enable_planning_start_point = 15 [default = true];
  bool has_enable_planning_start_point() const;
  private:
  bool _internal_has_enable_planning_start_point() const;
  public:
  void clear_enable_planning_start_point();
  bool enable_planning_start_point() const;
  void set_enable_planning_start_point(bool value);
  private:
  bool _internal_enable_planning_start_point() const;
  void _internal_set_enable_planning_start_point(bool value);
  public:

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  bool has_enable_accel_auto_compensation() const;
  private:
  bool _internal_has_enable_accel_auto_compensation() const;
  public:
  void clear_enable_accel_auto_compensation();
  bool enable_accel_auto_compensation() const;
  void set_enable_accel_auto_compensation(bool value);
  private:
  bool _internal_enable_accel_auto_compensation() const;
  void _internal_set_enable_accel_auto_compensation(bool value);
  public:

  // optional double preferred_accel = 1 [default = 2];
  bool has_preferred_accel() const;
  private:
  bool _internal_has_preferred_accel() const;
  public:
  void clear_preferred_accel();
  double preferred_accel() const;
  void set_preferred_accel(double value);
  private:
  double _internal_preferred_accel() const;
  void _internal_set_preferred_accel(double value);
  public:

  // optional double preferred_decel = 2 [default = 2];
  bool has_preferred_decel() const;
  private:
  bool _internal_has_preferred_decel() const;
  public:
  void clear_preferred_decel();
  double preferred_decel() const;
  void set_preferred_decel(double value);
  private:
  double _internal_preferred_decel() const;
  void _internal_set_preferred_decel(double value);
  public:

  // optional double preferred_jerk = 3 [default = 2];
  bool has_preferred_jerk() const;
  private:
  bool _internal_has_preferred_jerk() const;
  public:
  void clear_preferred_jerk();
  double preferred_jerk() const;
  void set_preferred_jerk(double value);
  private:
  double _internal_preferred_jerk() const;
  void _internal_set_preferred_jerk(double value);
  public:

  // optional double max_accel = 4 [default = 4];
  bool has_max_accel() const;
  private:
  bool _internal_has_max_accel() const;
  public:
  void clear_max_accel();
  double max_accel() const;
  void set_max_accel(double value);
  private:
  double _internal_max_accel() const;
  void _internal_set_max_accel(double value);
  public:

  // optional double max_decel = 5 [default = 5];
  bool has_max_decel() const;
  private:
  bool _internal_has_max_decel() const;
  public:
  void clear_max_decel();
  double max_decel() const;
  void set_max_decel(double value);
  private:
  double _internal_max_decel() const;
  void _internal_set_max_decel(double value);
  public:

  // optional double obstacle_buffer = 6 [default = 0.5];
  bool has_obstacle_buffer() const;
  private:
  bool _internal_has_obstacle_buffer() const;
  public:
  void clear_obstacle_buffer();
  double obstacle_buffer() const;
  void set_obstacle_buffer(double value);
  private:
  double _internal_obstacle_buffer() const;
  void _internal_set_obstacle_buffer(double value);
  public:

  // optional double safe_distance_base = 7 [default = 2];
  bool has_safe_distance_base() const;
  private:
  bool _internal_has_safe_distance_base() const;
  public:
  void clear_safe_distance_base();
  double safe_distance_base() const;
  void set_safe_distance_base(double value);
  private:
  double _internal_safe_distance_base() const;
  void _internal_set_safe_distance_base(double value);
  public:

  // optional double safe_distance_ratio = 8 [default = 1];
  bool has_safe_distance_ratio() const;
  private:
  bool _internal_has_safe_distance_ratio() const;
  public:
  void clear_safe_distance_ratio();
  double safe_distance_ratio() const;
  void set_safe_distance_ratio(double value);
  private:
  double _internal_safe_distance_ratio() const;
  void _internal_set_safe_distance_ratio(double value);
  public:

  // optional double following_accel_ratio = 9 [default = 0.5];
  bool has_following_accel_ratio() const;
  private:
  bool _internal_has_following_accel_ratio() const;
  public:
  void clear_following_accel_ratio();
  double following_accel_ratio() const;
  void set_following_accel_ratio(double value);
  private:
  double _internal_following_accel_ratio() const;
  void _internal_set_following_accel_ratio(double value);
  public:

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  bool has_soft_centric_accel_limit() const;
  private:
  bool _internal_has_soft_centric_accel_limit() const;
  public:
  void clear_soft_centric_accel_limit();
  double soft_centric_accel_limit() const;
  void set_soft_centric_accel_limit(double value);
  private:
  double _internal_soft_centric_accel_limit() const;
  void _internal_set_soft_centric_accel_limit(double value);
  public:

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  bool has_hard_centric_accel_limit() const;
  private:
  bool _internal_has_hard_centric_accel_limit() const;
  public:
  void clear_hard_centric_accel_limit();
  double hard_centric_accel_limit() const;
  void set_hard_centric_accel_limit(double value);
  private:
  double _internal_hard_centric_accel_limit() const;
  void _internal_set_hard_centric_accel_limit(double value);
  public:

  // optional double hard_speed_limit = 12 [default = 100];
  bool has_hard_speed_limit() const;
  private:
  bool _internal_has_hard_speed_limit() const;
  public:
  void clear_hard_speed_limit();
  double hard_speed_limit() const;
  void set_hard_speed_limit(double value);
  private:
  double _internal_hard_speed_limit() const;
  void _internal_set_hard_speed_limit(double value);
  public:

  // optional double hard_accel_limit = 13 [default = 10];
  bool has_hard_accel_limit() const;
  private:
  bool _internal_has_hard_accel_limit() const;
  public:
  void clear_hard_accel_limit();
  double hard_accel_limit() const;
  void set_hard_accel_limit(double value);
  private:
  double _internal_hard_accel_limit() const;
  void _internal_set_hard_accel_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviSpeedDeciderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double kappa_preview_;
  double kappa_threshold_;
  bool enable_safe_path_;
  bool enable_planning_start_point_;
  bool enable_accel_auto_compensation_;
  double preferred_accel_;
  double preferred_decel_;
  double preferred_jerk_;
  double max_accel_;
  double max_decel_;
  double obstacle_buffer_;
  double safe_distance_base_;
  double safe_distance_ratio_;
  double following_accel_ratio_;
  double soft_centric_accel_limit_;
  double hard_centric_accel_limit_;
  double hard_speed_limit_;
  double hard_accel_limit_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NaviSpeedDeciderConfig

// optional double preferred_accel = 1 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_accel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_accel() const {
  return _internal_has_preferred_accel();
}
inline void NaviSpeedDeciderConfig::clear_preferred_accel() {
  preferred_accel_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_accel() const {
  return preferred_accel_;
}
inline double NaviSpeedDeciderConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
  return _internal_preferred_accel();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_accel(double value) {
  _has_bits_[0] |= 0x00000020u;
  preferred_accel_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_accel(double value) {
  _internal_set_preferred_accel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
}

// optional double preferred_decel = 2 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_decel() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_decel() const {
  return _internal_has_preferred_decel();
}
inline void NaviSpeedDeciderConfig::clear_preferred_decel() {
  preferred_decel_ = 2;
  _has_bits_[0] &= ~0x00000040u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_decel() const {
  return preferred_decel_;
}
inline double NaviSpeedDeciderConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
  return _internal_preferred_decel();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_decel(double value) {
  _has_bits_[0] |= 0x00000040u;
  preferred_decel_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_decel(double value) {
  _internal_set_preferred_decel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
}

// optional double preferred_jerk = 3 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_jerk() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_jerk() const {
  return _internal_has_preferred_jerk();
}
inline void NaviSpeedDeciderConfig::clear_preferred_jerk() {
  preferred_jerk_ = 2;
  _has_bits_[0] &= ~0x00000080u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_jerk() const {
  return preferred_jerk_;
}
inline double NaviSpeedDeciderConfig::preferred_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_jerk)
  return _internal_preferred_jerk();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_jerk(double value) {
  _has_bits_[0] |= 0x00000080u;
  preferred_jerk_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_jerk(double value) {
  _internal_set_preferred_jerk(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_jerk)
}

// optional double max_accel = 4 [default = 4];
inline bool NaviSpeedDeciderConfig::_internal_has_max_accel() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_max_accel() const {
  return _internal_has_max_accel();
}
inline void NaviSpeedDeciderConfig::clear_max_accel() {
  max_accel_ = 4;
  _has_bits_[0] &= ~0x00000100u;
}
inline double NaviSpeedDeciderConfig::_internal_max_accel() const {
  return max_accel_;
}
inline double NaviSpeedDeciderConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_accel)
  return _internal_max_accel();
}
inline void NaviSpeedDeciderConfig::_internal_set_max_accel(double value) {
  _has_bits_[0] |= 0x00000100u;
  max_accel_ = value;
}
inline void NaviSpeedDeciderConfig::set_max_accel(double value) {
  _internal_set_max_accel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_accel)
}

// optional double max_decel = 5 [default = 5];
inline bool NaviSpeedDeciderConfig::_internal_has_max_decel() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_max_decel() const {
  return _internal_has_max_decel();
}
inline void NaviSpeedDeciderConfig::clear_max_decel() {
  max_decel_ = 5;
  _has_bits_[0] &= ~0x00000200u;
}
inline double NaviSpeedDeciderConfig::_internal_max_decel() const {
  return max_decel_;
}
inline double NaviSpeedDeciderConfig::max_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_decel)
  return _internal_max_decel();
}
inline void NaviSpeedDeciderConfig::_internal_set_max_decel(double value) {
  _has_bits_[0] |= 0x00000200u;
  max_decel_ = value;
}
inline void NaviSpeedDeciderConfig::set_max_decel(double value) {
  _internal_set_max_decel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_decel)
}

// optional double obstacle_buffer = 6 [default = 0.5];
inline bool NaviSpeedDeciderConfig::_internal_has_obstacle_buffer() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_obstacle_buffer() const {
  return _internal_has_obstacle_buffer();
}
inline void NaviSpeedDeciderConfig::clear_obstacle_buffer() {
  obstacle_buffer_ = 0.5;
  _has_bits_[0] &= ~0x00000400u;
}
inline double NaviSpeedDeciderConfig::_internal_obstacle_buffer() const {
  return obstacle_buffer_;
}
inline double NaviSpeedDeciderConfig::obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
  return _internal_obstacle_buffer();
}
inline void NaviSpeedDeciderConfig::_internal_set_obstacle_buffer(double value) {
  _has_bits_[0] |= 0x00000400u;
  obstacle_buffer_ = value;
}
inline void NaviSpeedDeciderConfig::set_obstacle_buffer(double value) {
  _internal_set_obstacle_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
}

// optional double safe_distance_base = 7 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_safe_distance_base() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_safe_distance_base() const {
  return _internal_has_safe_distance_base();
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_base() {
  safe_distance_base_ = 2;
  _has_bits_[0] &= ~0x00000800u;
}
inline double NaviSpeedDeciderConfig::_internal_safe_distance_base() const {
  return safe_distance_base_;
}
inline double NaviSpeedDeciderConfig::safe_distance_base() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
  return _internal_safe_distance_base();
}
inline void NaviSpeedDeciderConfig::_internal_set_safe_distance_base(double value) {
  _has_bits_[0] |= 0x00000800u;
  safe_distance_base_ = value;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_base(double value) {
  _internal_set_safe_distance_base(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
}

// optional double safe_distance_ratio = 8 [default = 1];
inline bool NaviSpeedDeciderConfig::_internal_has_safe_distance_ratio() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_safe_distance_ratio() const {
  return _internal_has_safe_distance_ratio();
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_ratio() {
  safe_distance_ratio_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline double NaviSpeedDeciderConfig::_internal_safe_distance_ratio() const {
  return safe_distance_ratio_;
}
inline double NaviSpeedDeciderConfig::safe_distance_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
  return _internal_safe_distance_ratio();
}
inline void NaviSpeedDeciderConfig::_internal_set_safe_distance_ratio(double value) {
  _has_bits_[0] |= 0x00001000u;
  safe_distance_ratio_ = value;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_ratio(double value) {
  _internal_set_safe_distance_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
}

// optional double following_accel_ratio = 9 [default = 0.5];
inline bool NaviSpeedDeciderConfig::_internal_has_following_accel_ratio() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_following_accel_ratio() const {
  return _internal_has_following_accel_ratio();
}
inline void NaviSpeedDeciderConfig::clear_following_accel_ratio() {
  following_accel_ratio_ = 0.5;
  _has_bits_[0] &= ~0x00002000u;
}
inline double NaviSpeedDeciderConfig::_internal_following_accel_ratio() const {
  return following_accel_ratio_;
}
inline double NaviSpeedDeciderConfig::following_accel_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.following_accel_ratio)
  return _internal_following_accel_ratio();
}
inline void NaviSpeedDeciderConfig::_internal_set_following_accel_ratio(double value) {
  _has_bits_[0] |= 0x00002000u;
  following_accel_ratio_ = value;
}
inline void NaviSpeedDeciderConfig::set_following_accel_ratio(double value) {
  _internal_set_following_accel_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.following_accel_ratio)
}

// optional double soft_centric_accel_limit = 10 [default = 1.2];
inline bool NaviSpeedDeciderConfig::_internal_has_soft_centric_accel_limit() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_soft_centric_accel_limit() const {
  return _internal_has_soft_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::clear_soft_centric_accel_limit() {
  soft_centric_accel_limit_ = 1.2;
  _has_bits_[0] &= ~0x00004000u;
}
inline double NaviSpeedDeciderConfig::_internal_soft_centric_accel_limit() const {
  return soft_centric_accel_limit_;
}
inline double NaviSpeedDeciderConfig::soft_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
  return _internal_soft_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_soft_centric_accel_limit(double value) {
  _has_bits_[0] |= 0x00004000u;
  soft_centric_accel_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_soft_centric_accel_limit(double value) {
  _internal_set_soft_centric_accel_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
}

// optional double hard_centric_accel_limit = 11 [default = 1.5];
inline bool NaviSpeedDeciderConfig::_internal_has_hard_centric_accel_limit() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_hard_centric_accel_limit() const {
  return _internal_has_hard_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::clear_hard_centric_accel_limit() {
  hard_centric_accel_limit_ = 1.5;
  _has_bits_[0] &= ~0x00008000u;
}
inline double NaviSpeedDeciderConfig::_internal_hard_centric_accel_limit() const {
  return hard_centric_accel_limit_;
}
inline double NaviSpeedDeciderConfig::hard_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
  return _internal_hard_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_hard_centric_accel_limit(double value) {
  _has_bits_[0] |= 0x00008000u;
  hard_centric_accel_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_hard_centric_accel_limit(double value) {
  _internal_set_hard_centric_accel_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
}

// optional double hard_speed_limit = 12 [default = 100];
inline bool NaviSpeedDeciderConfig::_internal_has_hard_speed_limit() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_hard_speed_limit() const {
  return _internal_has_hard_speed_limit();
}
inline void NaviSpeedDeciderConfig::clear_hard_speed_limit() {
  hard_speed_limit_ = 100;
  _has_bits_[0] &= ~0x00010000u;
}
inline double NaviSpeedDeciderConfig::_internal_hard_speed_limit() const {
  return hard_speed_limit_;
}
inline double NaviSpeedDeciderConfig::hard_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_speed_limit)
  return _internal_hard_speed_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_hard_speed_limit(double value) {
  _has_bits_[0] |= 0x00010000u;
  hard_speed_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_hard_speed_limit(double value) {
  _internal_set_hard_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_speed_limit)
}

// optional double hard_accel_limit = 13 [default = 10];
inline bool NaviSpeedDeciderConfig::_internal_has_hard_accel_limit() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_hard_accel_limit() const {
  return _internal_has_hard_accel_limit();
}
inline void NaviSpeedDeciderConfig::clear_hard_accel_limit() {
  hard_accel_limit_ = 10;
  _has_bits_[0] &= ~0x00020000u;
}
inline double NaviSpeedDeciderConfig::_internal_hard_accel_limit() const {
  return hard_accel_limit_;
}
inline double NaviSpeedDeciderConfig::hard_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_accel_limit)
  return _internal_hard_accel_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_hard_accel_limit(double value) {
  _has_bits_[0] |= 0x00020000u;
  hard_accel_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_hard_accel_limit(double value) {
  _internal_set_hard_accel_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_accel_limit)
}

// optional bool enable_safe_path = 14 [default = true];
inline bool NaviSpeedDeciderConfig::_internal_has_enable_safe_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_enable_safe_path() const {
  return _internal_has_enable_safe_path();
}
inline void NaviSpeedDeciderConfig::clear_enable_safe_path() {
  enable_safe_path_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool NaviSpeedDeciderConfig::_internal_enable_safe_path() const {
  return enable_safe_path_;
}
inline bool NaviSpeedDeciderConfig::enable_safe_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_safe_path)
  return _internal_enable_safe_path();
}
inline void NaviSpeedDeciderConfig::_internal_set_enable_safe_path(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_safe_path_ = value;
}
inline void NaviSpeedDeciderConfig::set_enable_safe_path(bool value) {
  _internal_set_enable_safe_path(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_safe_path)
}

// optional bool enable_planning_start_point = 15 [default = true];
inline bool NaviSpeedDeciderConfig::_internal_has_enable_planning_start_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_enable_planning_start_point() const {
  return _internal_has_enable_planning_start_point();
}
inline void NaviSpeedDeciderConfig::clear_enable_planning_start_point() {
  enable_planning_start_point_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool NaviSpeedDeciderConfig::_internal_enable_planning_start_point() const {
  return enable_planning_start_point_;
}
inline bool NaviSpeedDeciderConfig::enable_planning_start_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
  return _internal_enable_planning_start_point();
}
inline void NaviSpeedDeciderConfig::_internal_set_enable_planning_start_point(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_planning_start_point_ = value;
}
inline void NaviSpeedDeciderConfig::set_enable_planning_start_point(bool value) {
  _internal_set_enable_planning_start_point(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
}

// optional bool enable_accel_auto_compensation = 16 [default = true];
inline bool NaviSpeedDeciderConfig::_internal_has_enable_accel_auto_compensation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_enable_accel_auto_compensation() const {
  return _internal_has_enable_accel_auto_compensation();
}
inline void NaviSpeedDeciderConfig::clear_enable_accel_auto_compensation() {
  enable_accel_auto_compensation_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool NaviSpeedDeciderConfig::_internal_enable_accel_auto_compensation() const {
  return enable_accel_auto_compensation_;
}
inline bool NaviSpeedDeciderConfig::enable_accel_auto_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
  return _internal_enable_accel_auto_compensation();
}
inline void NaviSpeedDeciderConfig::_internal_set_enable_accel_auto_compensation(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_accel_auto_compensation_ = value;
}
inline void NaviSpeedDeciderConfig::set_enable_accel_auto_compensation(bool value) {
  _internal_set_enable_accel_auto_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
}

// optional double kappa_preview = 17 [default = 0];
inline bool NaviSpeedDeciderConfig::_internal_has_kappa_preview() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_kappa_preview() const {
  return _internal_has_kappa_preview();
}
inline void NaviSpeedDeciderConfig::clear_kappa_preview() {
  kappa_preview_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double NaviSpeedDeciderConfig::_internal_kappa_preview() const {
  return kappa_preview_;
}
inline double NaviSpeedDeciderConfig::kappa_preview() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.kappa_preview)
  return _internal_kappa_preview();
}
inline void NaviSpeedDeciderConfig::_internal_set_kappa_preview(double value) {
  _has_bits_[0] |= 0x00000001u;
  kappa_preview_ = value;
}
inline void NaviSpeedDeciderConfig::set_kappa_preview(double value) {
  _internal_set_kappa_preview(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.kappa_preview)
}

// optional double kappa_threshold = 18 [default = 0];
inline bool NaviSpeedDeciderConfig::_internal_has_kappa_threshold() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_kappa_threshold() const {
  return _internal_has_kappa_threshold();
}
inline void NaviSpeedDeciderConfig::clear_kappa_threshold() {
  kappa_threshold_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double NaviSpeedDeciderConfig::_internal_kappa_threshold() const {
  return kappa_threshold_;
}
inline double NaviSpeedDeciderConfig::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.kappa_threshold)
  return _internal_kappa_threshold();
}
inline void NaviSpeedDeciderConfig::_internal_set_kappa_threshold(double value) {
  _has_bits_[0] |= 0x00000002u;
  kappa_threshold_ = value;
}
inline void NaviSpeedDeciderConfig::set_kappa_threshold(double value) {
  _internal_set_kappa_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.kappa_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto
