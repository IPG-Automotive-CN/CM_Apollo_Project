// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_trajectory_provider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/planner_open_space_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class DistanceApproachTrajectorySmootherConfig;
class DistanceApproachTrajectorySmootherConfigDefaultTypeInternal;
extern DistanceApproachTrajectorySmootherConfigDefaultTypeInternal _DistanceApproachTrajectorySmootherConfig_default_instance_;
class DualVariableConfig;
class DualVariableConfigDefaultTypeInternal;
extern DualVariableConfigDefaultTypeInternal _DualVariableConfig_default_instance_;
class HybridAStarConfig;
class HybridAStarConfigDefaultTypeInternal;
extern HybridAStarConfigDefaultTypeInternal _HybridAStarConfig_default_instance_;
class IpoptSolverConfig;
class IpoptSolverConfigDefaultTypeInternal;
extern IpoptSolverConfigDefaultTypeInternal _IpoptSolverConfig_default_instance_;
class OpenSpaceTrajectoryOptimizerConfig;
class OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
class OpenSpaceTrajectoryProviderConfig;
class OpenSpaceTrajectoryProviderConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryProviderConfigDefaultTypeInternal _OpenSpaceTrajectoryProviderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::DistanceApproachTrajectorySmootherConfig* Arena::CreateMaybeMessage<::apollo::planning::DistanceApproachTrajectorySmootherConfig>(Arena*);
template<> ::apollo::planning::DualVariableConfig* Arena::CreateMaybeMessage<::apollo::planning::DualVariableConfig>(Arena*);
template<> ::apollo::planning::HybridAStarConfig* Arena::CreateMaybeMessage<::apollo::planning::HybridAStarConfig>(Arena*);
template<> ::apollo::planning::IpoptSolverConfig* Arena::CreateMaybeMessage<::apollo::planning::IpoptSolverConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryOptimizerConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceTrajectoryProviderConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryProviderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum DualVariableMode : int {
  DUAL_VARIABLE_IPOPT = 0,
  DUAL_VARIABLE_IPOPTQP = 1,
  DUAL_VARIABLE_OSQP = 2,
  DUAL_VARIABLE_DEBUG = 3
};
bool DualVariableMode_IsValid(int value);
constexpr DualVariableMode DualVariableMode_MIN = DUAL_VARIABLE_IPOPT;
constexpr DualVariableMode DualVariableMode_MAX = DUAL_VARIABLE_DEBUG;
constexpr int DualVariableMode_ARRAYSIZE = DualVariableMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualVariableMode_descriptor();
template<typename T>
inline const std::string& DualVariableMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DualVariableMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DualVariableMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DualVariableMode_descriptor(), enum_t_value);
}
inline bool DualVariableMode_Parse(
    const std::string& name, DualVariableMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DualVariableMode>(
    DualVariableMode_descriptor(), name, value);
}
// ===================================================================

class OpenSpaceTrajectoryProviderConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceTrajectoryProviderConfig) */ {
 public:
  OpenSpaceTrajectoryProviderConfig();
  virtual ~OpenSpaceTrajectoryProviderConfig();

  OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from);
  OpenSpaceTrajectoryProviderConfig(OpenSpaceTrajectoryProviderConfig&& from) noexcept
    : OpenSpaceTrajectoryProviderConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceTrajectoryProviderConfig& operator=(const OpenSpaceTrajectoryProviderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSpaceTrajectoryProviderConfig& operator=(OpenSpaceTrajectoryProviderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenSpaceTrajectoryProviderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceTrajectoryProviderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryProviderConfig*>(
               &_OpenSpaceTrajectoryProviderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpenSpaceTrajectoryProviderConfig& a, OpenSpaceTrajectoryProviderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSpaceTrajectoryProviderConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryProviderConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryProviderConfig>(nullptr);
  }

  OpenSpaceTrajectoryProviderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryProviderConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenSpaceTrajectoryProviderConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryProviderConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceTrajectoryProviderConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.OpenSpaceTrajectoryProviderConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenSpaceTrajectoryOptimizerConfigFieldNumber = 1,
  };
  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  bool has_open_space_trajectory_optimizer_config() const;
  private:
  bool _internal_has_open_space_trajectory_optimizer_config() const;
  public:
  void clear_open_space_trajectory_optimizer_config();
  const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& open_space_trajectory_optimizer_config() const;
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* release_open_space_trajectory_optimizer_config();
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* mutable_open_space_trajectory_optimizer_config();
  void set_allocated_open_space_trajectory_optimizer_config(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config);
  private:
  const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& _internal_open_space_trajectory_optimizer_config() const;
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* _internal_mutable_open_space_trajectory_optimizer_config();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceTrajectoryProviderConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class OpenSpaceTrajectoryOptimizerConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceTrajectoryOptimizerConfig) */ {
 public:
  OpenSpaceTrajectoryOptimizerConfig();
  virtual ~OpenSpaceTrajectoryOptimizerConfig();

  OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from);
  OpenSpaceTrajectoryOptimizerConfig(OpenSpaceTrajectoryOptimizerConfig&& from) noexcept
    : OpenSpaceTrajectoryOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceTrajectoryOptimizerConfig& operator=(const OpenSpaceTrajectoryOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenSpaceTrajectoryOptimizerConfig& operator=(OpenSpaceTrajectoryOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenSpaceTrajectoryOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceTrajectoryOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryOptimizerConfig*>(
               &_OpenSpaceTrajectoryOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpenSpaceTrajectoryOptimizerConfig& a, OpenSpaceTrajectoryOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenSpaceTrajectoryOptimizerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryOptimizerConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryOptimizerConfig>(nullptr);
  }

  OpenSpaceTrajectoryOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryOptimizerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.OpenSpaceTrajectoryOptimizerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHybridAStarConfigFieldNumber = 1,
    kDualVariableWarmStartConfigFieldNumber = 2,
    kDistanceApproachTrajectorySmootherConfigFieldNumber = 3,
    kPlannerOpenSpaceConfigFieldNumber = 6,
    kDeltaTFieldNumber = 4,
    kIsNearDestinationThresholdFieldNumber = 5,
  };
  // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
  bool has_hybrid_a_star_config() const;
  private:
  bool _internal_has_hybrid_a_star_config() const;
  public:
  void clear_hybrid_a_star_config();
  const ::apollo::planning::HybridAStarConfig& hybrid_a_star_config() const;
  ::apollo::planning::HybridAStarConfig* release_hybrid_a_star_config();
  ::apollo::planning::HybridAStarConfig* mutable_hybrid_a_star_config();
  void set_allocated_hybrid_a_star_config(::apollo::planning::HybridAStarConfig* hybrid_a_star_config);
  private:
  const ::apollo::planning::HybridAStarConfig& _internal_hybrid_a_star_config() const;
  ::apollo::planning::HybridAStarConfig* _internal_mutable_hybrid_a_star_config();
  public:

  // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  bool has_dual_variable_warm_start_config() const;
  private:
  bool _internal_has_dual_variable_warm_start_config() const;
  public:
  void clear_dual_variable_warm_start_config();
  const ::apollo::planning::DualVariableConfig& dual_variable_warm_start_config() const;
  ::apollo::planning::DualVariableConfig* release_dual_variable_warm_start_config();
  ::apollo::planning::DualVariableConfig* mutable_dual_variable_warm_start_config();
  void set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableConfig* dual_variable_warm_start_config);
  private:
  const ::apollo::planning::DualVariableConfig& _internal_dual_variable_warm_start_config() const;
  ::apollo::planning::DualVariableConfig* _internal_mutable_dual_variable_warm_start_config();
  public:

  // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  bool has_distance_approach_trajectory_smoother_config() const;
  private:
  bool _internal_has_distance_approach_trajectory_smoother_config() const;
  public:
  void clear_distance_approach_trajectory_smoother_config();
  const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& distance_approach_trajectory_smoother_config() const;
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* release_distance_approach_trajectory_smoother_config();
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* mutable_distance_approach_trajectory_smoother_config();
  void set_allocated_distance_approach_trajectory_smoother_config(::apollo::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config);
  private:
  const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& _internal_distance_approach_trajectory_smoother_config() const;
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* _internal_mutable_distance_approach_trajectory_smoother_config();
  public:

  // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  bool has_planner_open_space_config() const;
  private:
  bool _internal_has_planner_open_space_config() const;
  public:
  void clear_planner_open_space_config();
  const ::apollo::planning::PlannerOpenSpaceConfig& planner_open_space_config() const;
  ::apollo::planning::PlannerOpenSpaceConfig* release_planner_open_space_config();
  ::apollo::planning::PlannerOpenSpaceConfig* mutable_planner_open_space_config();
  void set_allocated_planner_open_space_config(::apollo::planning::PlannerOpenSpaceConfig* planner_open_space_config);
  private:
  const ::apollo::planning::PlannerOpenSpaceConfig& _internal_planner_open_space_config() const;
  ::apollo::planning::PlannerOpenSpaceConfig* _internal_mutable_planner_open_space_config();
  public:

  // optional float delta_t = 4 [default = 0.5];
  bool has_delta_t() const;
  private:
  bool _internal_has_delta_t() const;
  public:
  void clear_delta_t();
  float delta_t() const;
  void set_delta_t(float value);
  private:
  float _internal_delta_t() const;
  void _internal_set_delta_t(float value);
  public:

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  bool has_is_near_destination_threshold() const;
  private:
  bool _internal_has_is_near_destination_threshold() const;
  public:
  void clear_is_near_destination_threshold();
  double is_near_destination_threshold() const;
  void set_is_near_destination_threshold(double value);
  private:
  double _internal_is_near_destination_threshold() const;
  void _internal_set_is_near_destination_threshold(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::HybridAStarConfig* hybrid_a_star_config_;
  ::apollo::planning::DualVariableConfig* dual_variable_warm_start_config_;
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config_;
  ::apollo::planning::PlannerOpenSpaceConfig* planner_open_space_config_;
  float delta_t_;
  double is_near_destination_threshold_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class HybridAStarConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.HybridAStarConfig) */ {
 public:
  HybridAStarConfig();
  virtual ~HybridAStarConfig();

  HybridAStarConfig(const HybridAStarConfig& from);
  HybridAStarConfig(HybridAStarConfig&& from) noexcept
    : HybridAStarConfig() {
    *this = ::std::move(from);
  }

  inline HybridAStarConfig& operator=(const HybridAStarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HybridAStarConfig& operator=(HybridAStarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HybridAStarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HybridAStarConfig* internal_default_instance() {
    return reinterpret_cast<const HybridAStarConfig*>(
               &_HybridAStarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HybridAStarConfig& a, HybridAStarConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HybridAStarConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HybridAStarConfig* New() const final {
    return CreateMaybeMessage<HybridAStarConfig>(nullptr);
  }

  HybridAStarConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HybridAStarConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HybridAStarConfig& from);
  void MergeFrom(const HybridAStarConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HybridAStarConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.HybridAStarConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajForwardPenaltyFieldNumber = 5,
    kTrajBackPenaltyFieldNumber = 6,
    kXyGridResolutionFieldNumber = 1,
    kPhiGridResolutionFieldNumber = 2,
    kNextNodeNumFieldNumber = 3,
    kStepSizeFieldNumber = 4,
    kTrajGearSwitchPenaltyFieldNumber = 7,
    kTrajSteerPenaltyFieldNumber = 8,
    kTrajSteerChangePenaltyFieldNumber = 9,
    kGridAStarXyResolutionFieldNumber = 15,
    kNodeRadiusFieldNumber = 16,
  };
  // optional double traj_forward_penalty = 5 [default = 0];
  bool has_traj_forward_penalty() const;
  private:
  bool _internal_has_traj_forward_penalty() const;
  public:
  void clear_traj_forward_penalty();
  double traj_forward_penalty() const;
  void set_traj_forward_penalty(double value);
  private:
  double _internal_traj_forward_penalty() const;
  void _internal_set_traj_forward_penalty(double value);
  public:

  // optional double traj_back_penalty = 6 [default = 0];
  bool has_traj_back_penalty() const;
  private:
  bool _internal_has_traj_back_penalty() const;
  public:
  void clear_traj_back_penalty();
  double traj_back_penalty() const;
  void set_traj_back_penalty(double value);
  private:
  double _internal_traj_back_penalty() const;
  void _internal_set_traj_back_penalty(double value);
  public:

  // optional double xy_grid_resolution = 1 [default = 0.2];
  bool has_xy_grid_resolution() const;
  private:
  bool _internal_has_xy_grid_resolution() const;
  public:
  void clear_xy_grid_resolution();
  double xy_grid_resolution() const;
  void set_xy_grid_resolution(double value);
  private:
  double _internal_xy_grid_resolution() const;
  void _internal_set_xy_grid_resolution(double value);
  public:

  // optional double phi_grid_resolution = 2 [default = 0.05];
  bool has_phi_grid_resolution() const;
  private:
  bool _internal_has_phi_grid_resolution() const;
  public:
  void clear_phi_grid_resolution();
  double phi_grid_resolution() const;
  void set_phi_grid_resolution(double value);
  private:
  double _internal_phi_grid_resolution() const;
  void _internal_set_phi_grid_resolution(double value);
  public:

  // optional uint64 next_node_num = 3 [default = 10];
  bool has_next_node_num() const;
  private:
  bool _internal_has_next_node_num() const;
  public:
  void clear_next_node_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_node_num() const;
  void set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_node_num() const;
  void _internal_set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double step_size = 4 [default = 0.5];
  bool has_step_size() const;
  private:
  bool _internal_has_step_size() const;
  public:
  void clear_step_size();
  double step_size() const;
  void set_step_size(double value);
  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);
  public:

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  bool has_traj_gear_switch_penalty() const;
  private:
  bool _internal_has_traj_gear_switch_penalty() const;
  public:
  void clear_traj_gear_switch_penalty();
  double traj_gear_switch_penalty() const;
  void set_traj_gear_switch_penalty(double value);
  private:
  double _internal_traj_gear_switch_penalty() const;
  void _internal_set_traj_gear_switch_penalty(double value);
  public:

  // optional double traj_steer_penalty = 8 [default = 100];
  bool has_traj_steer_penalty() const;
  private:
  bool _internal_has_traj_steer_penalty() const;
  public:
  void clear_traj_steer_penalty();
  double traj_steer_penalty() const;
  void set_traj_steer_penalty(double value);
  private:
  double _internal_traj_steer_penalty() const;
  void _internal_set_traj_steer_penalty(double value);
  public:

  // optional double traj_steer_change_penalty = 9 [default = 10];
  bool has_traj_steer_change_penalty() const;
  private:
  bool _internal_has_traj_steer_change_penalty() const;
  public:
  void clear_traj_steer_change_penalty();
  double traj_steer_change_penalty() const;
  void set_traj_steer_change_penalty(double value);
  private:
  double _internal_traj_steer_change_penalty() const;
  void _internal_set_traj_steer_change_penalty(double value);
  public:

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  bool has_grid_a_star_xy_resolution() const;
  private:
  bool _internal_has_grid_a_star_xy_resolution() const;
  public:
  void clear_grid_a_star_xy_resolution();
  double grid_a_star_xy_resolution() const;
  void set_grid_a_star_xy_resolution(double value);
  private:
  double _internal_grid_a_star_xy_resolution() const;
  void _internal_set_grid_a_star_xy_resolution(double value);
  public:

  // optional double node_radius = 16 [default = 0.5];
  bool has_node_radius() const;
  private:
  bool _internal_has_node_radius() const;
  public:
  void clear_node_radius();
  double node_radius() const;
  void set_node_radius(double value);
  private:
  double _internal_node_radius() const;
  void _internal_set_node_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.HybridAStarConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double traj_forward_penalty_;
  double traj_back_penalty_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_node_num_;
  double step_size_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DualVariableConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DualVariableConfig) */ {
 public:
  DualVariableConfig();
  virtual ~DualVariableConfig();

  DualVariableConfig(const DualVariableConfig& from);
  DualVariableConfig(DualVariableConfig&& from) noexcept
    : DualVariableConfig() {
    *this = ::std::move(from);
  }

  inline DualVariableConfig& operator=(const DualVariableConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualVariableConfig& operator=(DualVariableConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DualVariableConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DualVariableConfig* internal_default_instance() {
    return reinterpret_cast<const DualVariableConfig*>(
               &_DualVariableConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DualVariableConfig& a, DualVariableConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DualVariableConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DualVariableConfig* New() const final {
    return CreateMaybeMessage<DualVariableConfig>(nullptr);
  }

  DualVariableConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DualVariableConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DualVariableConfig& from);
  void MergeFrom(const DualVariableConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualVariableConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DualVariableConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptConfigFieldNumber = 2,
    kMinSafetyDistanceFieldNumber = 4,
    kQpFormatFieldNumber = 3,
    kDebugOsqpFieldNumber = 5,
    kWeightDFieldNumber = 1,
  };
  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
  bool has_ipopt_config() const;
  private:
  bool _internal_has_ipopt_config() const;
  public:
  void clear_ipopt_config();
  const ::apollo::planning::IpoptSolverConfig& ipopt_config() const;
  ::apollo::planning::IpoptSolverConfig* release_ipopt_config();
  ::apollo::planning::IpoptSolverConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config);
  private:
  const ::apollo::planning::IpoptSolverConfig& _internal_ipopt_config() const;
  ::apollo::planning::IpoptSolverConfig* _internal_mutable_ipopt_config();
  public:

  // optional double min_safety_distance = 4 [default = 0];
  bool has_min_safety_distance() const;
  private:
  bool _internal_has_min_safety_distance() const;
  public:
  void clear_min_safety_distance();
  double min_safety_distance() const;
  void set_min_safety_distance(double value);
  private:
  double _internal_min_safety_distance() const;
  void _internal_set_min_safety_distance(double value);
  public:

  // optional .apollo.planning.DualVariableMode qp_format = 3;
  bool has_qp_format() const;
  private:
  bool _internal_has_qp_format() const;
  public:
  void clear_qp_format();
  ::apollo::planning::DualVariableMode qp_format() const;
  void set_qp_format(::apollo::planning::DualVariableMode value);
  private:
  ::apollo::planning::DualVariableMode _internal_qp_format() const;
  void _internal_set_qp_format(::apollo::planning::DualVariableMode value);
  public:

  // optional bool debug_osqp = 5 [default = false];
  bool has_debug_osqp() const;
  private:
  bool _internal_has_debug_osqp() const;
  public:
  void clear_debug_osqp();
  bool debug_osqp() const;
  void set_debug_osqp(bool value);
  private:
  bool _internal_debug_osqp() const;
  void _internal_set_debug_osqp(bool value);
  public:

  // optional double weight_d = 1 [default = 1];
  bool has_weight_d() const;
  private:
  bool _internal_has_weight_d() const;
  public:
  void clear_weight_d();
  double weight_d() const;
  void set_weight_d(double value);
  private:
  double _internal_weight_d() const;
  void _internal_set_weight_d(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.DualVariableConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::IpoptSolverConfig* ipopt_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double weight_d_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DistanceApproachTrajectorySmootherConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DistanceApproachTrajectorySmootherConfig) */ {
 public:
  DistanceApproachTrajectorySmootherConfig();
  virtual ~DistanceApproachTrajectorySmootherConfig();

  DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from);
  DistanceApproachTrajectorySmootherConfig(DistanceApproachTrajectorySmootherConfig&& from) noexcept
    : DistanceApproachTrajectorySmootherConfig() {
    *this = ::std::move(from);
  }

  inline DistanceApproachTrajectorySmootherConfig& operator=(const DistanceApproachTrajectorySmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceApproachTrajectorySmootherConfig& operator=(DistanceApproachTrajectorySmootherConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistanceApproachTrajectorySmootherConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceApproachTrajectorySmootherConfig* internal_default_instance() {
    return reinterpret_cast<const DistanceApproachTrajectorySmootherConfig*>(
               &_DistanceApproachTrajectorySmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DistanceApproachTrajectorySmootherConfig& a, DistanceApproachTrajectorySmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceApproachTrajectorySmootherConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistanceApproachTrajectorySmootherConfig* New() const final {
    return CreateMaybeMessage<DistanceApproachTrajectorySmootherConfig>(nullptr);
  }

  DistanceApproachTrajectorySmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistanceApproachTrajectorySmootherConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistanceApproachTrajectorySmootherConfig& from);
  void MergeFrom(const DistanceApproachTrajectorySmootherConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceApproachTrajectorySmootherConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DistanceApproachTrajectorySmootherConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptConfigFieldNumber = 21,
    kWeightSteerFieldNumber = 1,
    kWeightAFieldNumber = 2,
    kWeightSteerRateFieldNumber = 3,
    kWeightARateFieldNumber = 4,
    kWeightXFieldNumber = 5,
    kWeightYFieldNumber = 6,
    kWeightPhiFieldNumber = 7,
    kWeightVFieldNumber = 8,
    kWeightSteerStitchingFieldNumber = 9,
    kWeightAStitchingFieldNumber = 10,
    kWeightFirstOrderTimeFieldNumber = 11,
    kWeightSecondOrderTimeFieldNumber = 12,
    kMinSafetyDistanceFieldNumber = 13,
    kUseFixTimeFieldNumber = 20,
    kEnableConstraintCheckFieldNumber = 22,
    kEnableHandDerivativeFieldNumber = 23,
    kEnableDerivativeCheckFieldNumber = 24,
    kEnableInitialFinalCheckFieldNumber = 25,
    kMaxSpeedForwardFieldNumber = 14,
    kMaxSpeedReverseFieldNumber = 15,
    kMaxAccelerationForwardFieldNumber = 16,
    kMaxAccelerationReverseFieldNumber = 17,
    kMinTimeSampleScalingFieldNumber = 18,
    kMaxTimeSampleScalingFieldNumber = 19,
  };
  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
  bool has_ipopt_config() const;
  private:
  bool _internal_has_ipopt_config() const;
  public:
  void clear_ipopt_config();
  const ::apollo::planning::IpoptSolverConfig& ipopt_config() const;
  ::apollo::planning::IpoptSolverConfig* release_ipopt_config();
  ::apollo::planning::IpoptSolverConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config);
  private:
  const ::apollo::planning::IpoptSolverConfig& _internal_ipopt_config() const;
  ::apollo::planning::IpoptSolverConfig* _internal_mutable_ipopt_config();
  public:

  // optional double weight_steer = 1;
  bool has_weight_steer() const;
  private:
  bool _internal_has_weight_steer() const;
  public:
  void clear_weight_steer();
  double weight_steer() const;
  void set_weight_steer(double value);
  private:
  double _internal_weight_steer() const;
  void _internal_set_weight_steer(double value);
  public:

  // optional double weight_a = 2;
  bool has_weight_a() const;
  private:
  bool _internal_has_weight_a() const;
  public:
  void clear_weight_a();
  double weight_a() const;
  void set_weight_a(double value);
  private:
  double _internal_weight_a() const;
  void _internal_set_weight_a(double value);
  public:

  // optional double weight_steer_rate = 3;
  bool has_weight_steer_rate() const;
  private:
  bool _internal_has_weight_steer_rate() const;
  public:
  void clear_weight_steer_rate();
  double weight_steer_rate() const;
  void set_weight_steer_rate(double value);
  private:
  double _internal_weight_steer_rate() const;
  void _internal_set_weight_steer_rate(double value);
  public:

  // optional double weight_a_rate = 4;
  bool has_weight_a_rate() const;
  private:
  bool _internal_has_weight_a_rate() const;
  public:
  void clear_weight_a_rate();
  double weight_a_rate() const;
  void set_weight_a_rate(double value);
  private:
  double _internal_weight_a_rate() const;
  void _internal_set_weight_a_rate(double value);
  public:

  // optional double weight_x = 5;
  bool has_weight_x() const;
  private:
  bool _internal_has_weight_x() const;
  public:
  void clear_weight_x();
  double weight_x() const;
  void set_weight_x(double value);
  private:
  double _internal_weight_x() const;
  void _internal_set_weight_x(double value);
  public:

  // optional double weight_y = 6;
  bool has_weight_y() const;
  private:
  bool _internal_has_weight_y() const;
  public:
  void clear_weight_y();
  double weight_y() const;
  void set_weight_y(double value);
  private:
  double _internal_weight_y() const;
  void _internal_set_weight_y(double value);
  public:

  // optional double weight_phi = 7;
  bool has_weight_phi() const;
  private:
  bool _internal_has_weight_phi() const;
  public:
  void clear_weight_phi();
  double weight_phi() const;
  void set_weight_phi(double value);
  private:
  double _internal_weight_phi() const;
  void _internal_set_weight_phi(double value);
  public:

  // optional double weight_v = 8;
  bool has_weight_v() const;
  private:
  bool _internal_has_weight_v() const;
  public:
  void clear_weight_v();
  double weight_v() const;
  void set_weight_v(double value);
  private:
  double _internal_weight_v() const;
  void _internal_set_weight_v(double value);
  public:

  // optional double weight_steer_stitching = 9;
  bool has_weight_steer_stitching() const;
  private:
  bool _internal_has_weight_steer_stitching() const;
  public:
  void clear_weight_steer_stitching();
  double weight_steer_stitching() const;
  void set_weight_steer_stitching(double value);
  private:
  double _internal_weight_steer_stitching() const;
  void _internal_set_weight_steer_stitching(double value);
  public:

  // optional double weight_a_stitching = 10;
  bool has_weight_a_stitching() const;
  private:
  bool _internal_has_weight_a_stitching() const;
  public:
  void clear_weight_a_stitching();
  double weight_a_stitching() const;
  void set_weight_a_stitching(double value);
  private:
  double _internal_weight_a_stitching() const;
  void _internal_set_weight_a_stitching(double value);
  public:

  // optional double weight_first_order_time = 11;
  bool has_weight_first_order_time() const;
  private:
  bool _internal_has_weight_first_order_time() const;
  public:
  void clear_weight_first_order_time();
  double weight_first_order_time() const;
  void set_weight_first_order_time(double value);
  private:
  double _internal_weight_first_order_time() const;
  void _internal_set_weight_first_order_time(double value);
  public:

  // optional double weight_second_order_time = 12;
  bool has_weight_second_order_time() const;
  private:
  bool _internal_has_weight_second_order_time() const;
  public:
  void clear_weight_second_order_time();
  double weight_second_order_time() const;
  void set_weight_second_order_time(double value);
  private:
  double _internal_weight_second_order_time() const;
  void _internal_set_weight_second_order_time(double value);
  public:

  // optional double min_safety_distance = 13 [default = 0];
  bool has_min_safety_distance() const;
  private:
  bool _internal_has_min_safety_distance() const;
  public:
  void clear_min_safety_distance();
  double min_safety_distance() const;
  void set_min_safety_distance(double value);
  private:
  double _internal_min_safety_distance() const;
  void _internal_set_min_safety_distance(double value);
  public:

  // optional bool use_fix_time = 20 [default = false];
  bool has_use_fix_time() const;
  private:
  bool _internal_has_use_fix_time() const;
  public:
  void clear_use_fix_time();
  bool use_fix_time() const;
  void set_use_fix_time(bool value);
  private:
  bool _internal_use_fix_time() const;
  void _internal_set_use_fix_time(bool value);
  public:

  // optional bool enable_constraint_check = 22;
  bool has_enable_constraint_check() const;
  private:
  bool _internal_has_enable_constraint_check() const;
  public:
  void clear_enable_constraint_check();
  bool enable_constraint_check() const;
  void set_enable_constraint_check(bool value);
  private:
  bool _internal_enable_constraint_check() const;
  void _internal_set_enable_constraint_check(bool value);
  public:

  // optional bool enable_hand_derivative = 23;
  bool has_enable_hand_derivative() const;
  private:
  bool _internal_has_enable_hand_derivative() const;
  public:
  void clear_enable_hand_derivative();
  bool enable_hand_derivative() const;
  void set_enable_hand_derivative(bool value);
  private:
  bool _internal_enable_hand_derivative() const;
  void _internal_set_enable_hand_derivative(bool value);
  public:

  // optional bool enable_derivative_check = 24;
  bool has_enable_derivative_check() const;
  private:
  bool _internal_has_enable_derivative_check() const;
  public:
  void clear_enable_derivative_check();
  bool enable_derivative_check() const;
  void set_enable_derivative_check(bool value);
  private:
  bool _internal_enable_derivative_check() const;
  void _internal_set_enable_derivative_check(bool value);
  public:

  // optional bool enable_initial_final_check = 25 [default = false];
  bool has_enable_initial_final_check() const;
  private:
  bool _internal_has_enable_initial_final_check() const;
  public:
  void clear_enable_initial_final_check();
  bool enable_initial_final_check() const;
  void set_enable_initial_final_check(bool value);
  private:
  bool _internal_enable_initial_final_check() const;
  void _internal_set_enable_initial_final_check(bool value);
  public:

  // optional double max_speed_forward = 14 [default = 3];
  bool has_max_speed_forward() const;
  private:
  bool _internal_has_max_speed_forward() const;
  public:
  void clear_max_speed_forward();
  double max_speed_forward() const;
  void set_max_speed_forward(double value);
  private:
  double _internal_max_speed_forward() const;
  void _internal_set_max_speed_forward(double value);
  public:

  // optional double max_speed_reverse = 15 [default = 2];
  bool has_max_speed_reverse() const;
  private:
  bool _internal_has_max_speed_reverse() const;
  public:
  void clear_max_speed_reverse();
  double max_speed_reverse() const;
  void set_max_speed_reverse(double value);
  private:
  double _internal_max_speed_reverse() const;
  void _internal_set_max_speed_reverse(double value);
  public:

  // optional double max_acceleration_forward = 16 [default = 2];
  bool has_max_acceleration_forward() const;
  private:
  bool _internal_has_max_acceleration_forward() const;
  public:
  void clear_max_acceleration_forward();
  double max_acceleration_forward() const;
  void set_max_acceleration_forward(double value);
  private:
  double _internal_max_acceleration_forward() const;
  void _internal_set_max_acceleration_forward(double value);
  public:

  // optional double max_acceleration_reverse = 17 [default = 2];
  bool has_max_acceleration_reverse() const;
  private:
  bool _internal_has_max_acceleration_reverse() const;
  public:
  void clear_max_acceleration_reverse();
  double max_acceleration_reverse() const;
  void set_max_acceleration_reverse(double value);
  private:
  double _internal_max_acceleration_reverse() const;
  void _internal_set_max_acceleration_reverse(double value);
  public:

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  bool has_min_time_sample_scaling() const;
  private:
  bool _internal_has_min_time_sample_scaling() const;
  public:
  void clear_min_time_sample_scaling();
  double min_time_sample_scaling() const;
  void set_min_time_sample_scaling(double value);
  private:
  double _internal_min_time_sample_scaling() const;
  void _internal_set_min_time_sample_scaling(double value);
  public:

  // optional double max_time_sample_scaling = 19 [default = 10];
  bool has_max_time_sample_scaling() const;
  private:
  bool _internal_has_max_time_sample_scaling() const;
  public:
  void clear_max_time_sample_scaling();
  double max_time_sample_scaling() const;
  void set_max_time_sample_scaling(double value);
  private:
  double _internal_max_time_sample_scaling() const;
  void _internal_set_max_time_sample_scaling(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.DistanceApproachTrajectorySmootherConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::planning::IpoptSolverConfig* ipopt_config_;
  double weight_steer_;
  double weight_a_;
  double weight_steer_rate_;
  double weight_a_rate_;
  double weight_x_;
  double weight_y_;
  double weight_phi_;
  double weight_v_;
  double weight_steer_stitching_;
  double weight_a_stitching_;
  double weight_first_order_time_;
  double weight_second_order_time_;
  double min_safety_distance_;
  bool use_fix_time_;
  bool enable_constraint_check_;
  bool enable_hand_derivative_;
  bool enable_derivative_check_;
  bool enable_initial_final_check_;
  double max_speed_forward_;
  double max_speed_reverse_;
  double max_acceleration_forward_;
  double max_acceleration_reverse_;
  double min_time_sample_scaling_;
  double max_time_sample_scaling_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class IpoptSolverConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.IpoptSolverConfig) */ {
 public:
  IpoptSolverConfig();
  virtual ~IpoptSolverConfig();

  IpoptSolverConfig(const IpoptSolverConfig& from);
  IpoptSolverConfig(IpoptSolverConfig&& from) noexcept
    : IpoptSolverConfig() {
    *this = ::std::move(from);
  }

  inline IpoptSolverConfig& operator=(const IpoptSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpoptSolverConfig& operator=(IpoptSolverConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpoptSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpoptSolverConfig* internal_default_instance() {
    return reinterpret_cast<const IpoptSolverConfig*>(
               &_IpoptSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IpoptSolverConfig& a, IpoptSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IpoptSolverConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpoptSolverConfig* New() const final {
    return CreateMaybeMessage<IpoptSolverConfig>(nullptr);
  }

  IpoptSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpoptSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpoptSolverConfig& from);
  void MergeFrom(const IpoptSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpoptSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.IpoptSolverConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto);
    return ::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpoptPrintTimingStatisticsFieldNumber = 9,
    kIpoptAlphaForYFieldNumber = 10,
    kIpoptRecalcYFieldNumber = 11,
    kIpoptPrintLevelFieldNumber = 1,
    kMumpsMemPercentFieldNumber = 2,
    kMumpsPivtolFieldNumber = 3,
    kIpoptTolFieldNumber = 5,
    kIpoptAcceptableConstrViolTolFieldNumber = 6,
    kIpoptMinHessianPerturbationFieldNumber = 7,
    kIpoptJacobianRegularizationValueFieldNumber = 8,
    kIpoptMaxIterFieldNumber = 4,
    kIpoptMuInitFieldNumber = 12,
  };
  // optional string ipopt_print_timing_statistics = 9;
  bool has_ipopt_print_timing_statistics() const;
  private:
  bool _internal_has_ipopt_print_timing_statistics() const;
  public:
  void clear_ipopt_print_timing_statistics();
  const std::string& ipopt_print_timing_statistics() const;
  void set_ipopt_print_timing_statistics(const std::string& value);
  void set_ipopt_print_timing_statistics(std::string&& value);
  void set_ipopt_print_timing_statistics(const char* value);
  void set_ipopt_print_timing_statistics(const char* value, size_t size);
  std::string* mutable_ipopt_print_timing_statistics();
  std::string* release_ipopt_print_timing_statistics();
  void set_allocated_ipopt_print_timing_statistics(std::string* ipopt_print_timing_statistics);
  private:
  const std::string& _internal_ipopt_print_timing_statistics() const;
  void _internal_set_ipopt_print_timing_statistics(const std::string& value);
  std::string* _internal_mutable_ipopt_print_timing_statistics();
  public:

  // optional string ipopt_alpha_for_y = 10;
  bool has_ipopt_alpha_for_y() const;
  private:
  bool _internal_has_ipopt_alpha_for_y() const;
  public:
  void clear_ipopt_alpha_for_y();
  const std::string& ipopt_alpha_for_y() const;
  void set_ipopt_alpha_for_y(const std::string& value);
  void set_ipopt_alpha_for_y(std::string&& value);
  void set_ipopt_alpha_for_y(const char* value);
  void set_ipopt_alpha_for_y(const char* value, size_t size);
  std::string* mutable_ipopt_alpha_for_y();
  std::string* release_ipopt_alpha_for_y();
  void set_allocated_ipopt_alpha_for_y(std::string* ipopt_alpha_for_y);
  private:
  const std::string& _internal_ipopt_alpha_for_y() const;
  void _internal_set_ipopt_alpha_for_y(const std::string& value);
  std::string* _internal_mutable_ipopt_alpha_for_y();
  public:

  // optional string ipopt_recalc_y = 11;
  bool has_ipopt_recalc_y() const;
  private:
  bool _internal_has_ipopt_recalc_y() const;
  public:
  void clear_ipopt_recalc_y();
  const std::string& ipopt_recalc_y() const;
  void set_ipopt_recalc_y(const std::string& value);
  void set_ipopt_recalc_y(std::string&& value);
  void set_ipopt_recalc_y(const char* value);
  void set_ipopt_recalc_y(const char* value, size_t size);
  std::string* mutable_ipopt_recalc_y();
  std::string* release_ipopt_recalc_y();
  void set_allocated_ipopt_recalc_y(std::string* ipopt_recalc_y);
  private:
  const std::string& _internal_ipopt_recalc_y() const;
  void _internal_set_ipopt_recalc_y(const std::string& value);
  std::string* _internal_mutable_ipopt_recalc_y();
  public:

  // optional int32 ipopt_print_level = 1;
  bool has_ipopt_print_level() const;
  private:
  bool _internal_has_ipopt_print_level() const;
  public:
  void clear_ipopt_print_level();
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_print_level() const;
  void set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipopt_print_level() const;
  void _internal_set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mumps_mem_percent = 2;
  bool has_mumps_mem_percent() const;
  private:
  bool _internal_has_mumps_mem_percent() const;
  public:
  void clear_mumps_mem_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 mumps_mem_percent() const;
  void set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mumps_mem_percent() const;
  void _internal_set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double mumps_pivtol = 3;
  bool has_mumps_pivtol() const;
  private:
  bool _internal_has_mumps_pivtol() const;
  public:
  void clear_mumps_pivtol();
  double mumps_pivtol() const;
  void set_mumps_pivtol(double value);
  private:
  double _internal_mumps_pivtol() const;
  void _internal_set_mumps_pivtol(double value);
  public:

  // optional double ipopt_tol = 5;
  bool has_ipopt_tol() const;
  private:
  bool _internal_has_ipopt_tol() const;
  public:
  void clear_ipopt_tol();
  double ipopt_tol() const;
  void set_ipopt_tol(double value);
  private:
  double _internal_ipopt_tol() const;
  void _internal_set_ipopt_tol(double value);
  public:

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  bool has_ipopt_acceptable_constr_viol_tol() const;
  private:
  bool _internal_has_ipopt_acceptable_constr_viol_tol() const;
  public:
  void clear_ipopt_acceptable_constr_viol_tol();
  double ipopt_acceptable_constr_viol_tol() const;
  void set_ipopt_acceptable_constr_viol_tol(double value);
  private:
  double _internal_ipopt_acceptable_constr_viol_tol() const;
  void _internal_set_ipopt_acceptable_constr_viol_tol(double value);
  public:

  // optional double ipopt_min_hessian_perturbation = 7;
  bool has_ipopt_min_hessian_perturbation() const;
  private:
  bool _internal_has_ipopt_min_hessian_perturbation() const;
  public:
  void clear_ipopt_min_hessian_perturbation();
  double ipopt_min_hessian_perturbation() const;
  void set_ipopt_min_hessian_perturbation(double value);
  private:
  double _internal_ipopt_min_hessian_perturbation() const;
  void _internal_set_ipopt_min_hessian_perturbation(double value);
  public:

  // optional double ipopt_jacobian_regularization_value = 8;
  bool has_ipopt_jacobian_regularization_value() const;
  private:
  bool _internal_has_ipopt_jacobian_regularization_value() const;
  public:
  void clear_ipopt_jacobian_regularization_value();
  double ipopt_jacobian_regularization_value() const;
  void set_ipopt_jacobian_regularization_value(double value);
  private:
  double _internal_ipopt_jacobian_regularization_value() const;
  void _internal_set_ipopt_jacobian_regularization_value(double value);
  public:

  // optional int32 ipopt_max_iter = 4;
  bool has_ipopt_max_iter() const;
  private:
  bool _internal_has_ipopt_max_iter() const;
  public:
  void clear_ipopt_max_iter();
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_max_iter() const;
  void set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ipopt_max_iter() const;
  void _internal_set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double ipopt_mu_init = 12 [default = 0.1];
  bool has_ipopt_mu_init() const;
  private:
  bool _internal_has_ipopt_mu_init() const;
  public:
  void clear_ipopt_mu_init();
  double ipopt_mu_init() const;
  void set_ipopt_mu_init(double value);
  private:
  double _internal_ipopt_mu_init() const;
  void _internal_set_ipopt_mu_init(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.IpoptSolverConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_print_timing_statistics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_alpha_for_y_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_recalc_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_print_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 ipopt_max_iter_;
  double ipopt_mu_init_;
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSpaceTrajectoryProviderConfig

// optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
inline bool OpenSpaceTrajectoryProviderConfig::_internal_has_open_space_trajectory_optimizer_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || open_space_trajectory_optimizer_config_ != nullptr);
  return value;
}
inline bool OpenSpaceTrajectoryProviderConfig::has_open_space_trajectory_optimizer_config() const {
  return _internal_has_open_space_trajectory_optimizer_config();
}
inline void OpenSpaceTrajectoryProviderConfig::clear_open_space_trajectory_optimizer_config() {
  if (open_space_trajectory_optimizer_config_ != nullptr) open_space_trajectory_optimizer_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryProviderConfig::_internal_open_space_trajectory_optimizer_config() const {
  const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* p = open_space_trajectory_optimizer_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig*>(
      &::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryProviderConfig::open_space_trajectory_optimizer_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return _internal_open_space_trajectory_optimizer_config();
}
inline ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::release_open_space_trajectory_optimizer_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* temp = open_space_trajectory_optimizer_config_;
  open_space_trajectory_optimizer_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::_internal_mutable_open_space_trajectory_optimizer_config() {
  _has_bits_[0] |= 0x00000001u;
  if (open_space_trajectory_optimizer_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryOptimizerConfig>(GetArenaNoVirtual());
    open_space_trajectory_optimizer_config_ = p;
  }
  return open_space_trajectory_optimizer_config_;
}
inline ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::mutable_open_space_trajectory_optimizer_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return _internal_mutable_open_space_trajectory_optimizer_config();
}
inline void OpenSpaceTrajectoryProviderConfig::set_allocated_open_space_trajectory_optimizer_config(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete open_space_trajectory_optimizer_config_;
  }
  if (open_space_trajectory_optimizer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_space_trajectory_optimizer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_optimizer_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  open_space_trajectory_optimizer_config_ = open_space_trajectory_optimizer_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
}

// -------------------------------------------------------------------

// OpenSpaceTrajectoryOptimizerConfig

// optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
inline bool OpenSpaceTrajectoryOptimizerConfig::_internal_has_hybrid_a_star_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hybrid_a_star_config_ != nullptr);
  return value;
}
inline bool OpenSpaceTrajectoryOptimizerConfig::has_hybrid_a_star_config() const {
  return _internal_has_hybrid_a_star_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_hybrid_a_star_config() {
  if (hybrid_a_star_config_ != nullptr) hybrid_a_star_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::HybridAStarConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_hybrid_a_star_config() const {
  const ::apollo::planning::HybridAStarConfig* p = hybrid_a_star_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::HybridAStarConfig*>(
      &::apollo::planning::_HybridAStarConfig_default_instance_);
}
inline const ::apollo::planning::HybridAStarConfig& OpenSpaceTrajectoryOptimizerConfig::hybrid_a_star_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return _internal_hybrid_a_star_config();
}
inline ::apollo::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::release_hybrid_a_star_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::HybridAStarConfig* temp = hybrid_a_star_config_;
  hybrid_a_star_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::_internal_mutable_hybrid_a_star_config() {
  _has_bits_[0] |= 0x00000001u;
  if (hybrid_a_star_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::HybridAStarConfig>(GetArenaNoVirtual());
    hybrid_a_star_config_ = p;
  }
  return hybrid_a_star_config_;
}
inline ::apollo::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_hybrid_a_star_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return _internal_mutable_hybrid_a_star_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_hybrid_a_star_config(::apollo::planning::HybridAStarConfig* hybrid_a_star_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hybrid_a_star_config_;
  }
  if (hybrid_a_star_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hybrid_a_star_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hybrid_a_star_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hybrid_a_star_config_ = hybrid_a_star_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
}

// optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
inline bool OpenSpaceTrajectoryOptimizerConfig::_internal_has_dual_variable_warm_start_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dual_variable_warm_start_config_ != nullptr);
  return value;
}
inline bool OpenSpaceTrajectoryOptimizerConfig::has_dual_variable_warm_start_config() const {
  return _internal_has_dual_variable_warm_start_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != nullptr) dual_variable_warm_start_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::DualVariableConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_dual_variable_warm_start_config() const {
  const ::apollo::planning::DualVariableConfig* p = dual_variable_warm_start_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::DualVariableConfig*>(
      &::apollo::planning::_DualVariableConfig_default_instance_);
}
inline const ::apollo::planning::DualVariableConfig& OpenSpaceTrajectoryOptimizerConfig::dual_variable_warm_start_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return _internal_dual_variable_warm_start_config();
}
inline ::apollo::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::DualVariableConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::_internal_mutable_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
  if (dual_variable_warm_start_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DualVariableConfig>(GetArenaNoVirtual());
    dual_variable_warm_start_config_ = p;
  }
  return dual_variable_warm_start_config_;
}
inline ::apollo::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return _internal_mutable_dual_variable_warm_start_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableConfig* dual_variable_warm_start_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dual_variable_warm_start_config_;
  }
  if (dual_variable_warm_start_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dual_variable_warm_start_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dual_variable_warm_start_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
}

// optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
inline bool OpenSpaceTrajectoryOptimizerConfig::_internal_has_distance_approach_trajectory_smoother_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || distance_approach_trajectory_smoother_config_ != nullptr);
  return value;
}
inline bool OpenSpaceTrajectoryOptimizerConfig::has_distance_approach_trajectory_smoother_config() const {
  return _internal_has_distance_approach_trajectory_smoother_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_distance_approach_trajectory_smoother_config() {
  if (distance_approach_trajectory_smoother_config_ != nullptr) distance_approach_trajectory_smoother_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_distance_approach_trajectory_smoother_config() const {
  const ::apollo::planning::DistanceApproachTrajectorySmootherConfig* p = distance_approach_trajectory_smoother_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::DistanceApproachTrajectorySmootherConfig*>(
      &::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_);
}
inline const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& OpenSpaceTrajectoryOptimizerConfig::distance_approach_trajectory_smoother_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return _internal_distance_approach_trajectory_smoother_config();
}
inline ::apollo::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::release_distance_approach_trajectory_smoother_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* temp = distance_approach_trajectory_smoother_config_;
  distance_approach_trajectory_smoother_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::_internal_mutable_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] |= 0x00000004u;
  if (distance_approach_trajectory_smoother_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DistanceApproachTrajectorySmootherConfig>(GetArenaNoVirtual());
    distance_approach_trajectory_smoother_config_ = p;
  }
  return distance_approach_trajectory_smoother_config_;
}
inline ::apollo::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_distance_approach_trajectory_smoother_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return _internal_mutable_distance_approach_trajectory_smoother_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_distance_approach_trajectory_smoother_config(::apollo::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete distance_approach_trajectory_smoother_config_;
  }
  if (distance_approach_trajectory_smoother_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distance_approach_trajectory_smoother_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance_approach_trajectory_smoother_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  distance_approach_trajectory_smoother_config_ = distance_approach_trajectory_smoother_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
}

// optional float delta_t = 4 [default = 0.5];
inline bool OpenSpaceTrajectoryOptimizerConfig::_internal_has_delta_t() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryOptimizerConfig::has_delta_t() const {
  return _internal_has_delta_t();
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_delta_t() {
  delta_t_ = 0.5f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float OpenSpaceTrajectoryOptimizerConfig::_internal_delta_t() const {
  return delta_t_;
}
inline float OpenSpaceTrajectoryOptimizerConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
  return _internal_delta_t();
}
inline void OpenSpaceTrajectoryOptimizerConfig::_internal_set_delta_t(float value) {
  _has_bits_[0] |= 0x00000010u;
  delta_t_ = value;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_delta_t(float value) {
  _internal_set_delta_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
}

// optional double is_near_destination_threshold = 5 [default = 0.001];
inline bool OpenSpaceTrajectoryOptimizerConfig::_internal_has_is_near_destination_threshold() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OpenSpaceTrajectoryOptimizerConfig::has_is_near_destination_threshold() const {
  return _internal_has_is_near_destination_threshold();
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  _has_bits_[0] &= ~0x00000020u;
}
inline double OpenSpaceTrajectoryOptimizerConfig::_internal_is_near_destination_threshold() const {
  return is_near_destination_threshold_;
}
inline double OpenSpaceTrajectoryOptimizerConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
  return _internal_is_near_destination_threshold();
}
inline void OpenSpaceTrajectoryOptimizerConfig::_internal_set_is_near_destination_threshold(double value) {
  _has_bits_[0] |= 0x00000020u;
  is_near_destination_threshold_ = value;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_is_near_destination_threshold(double value) {
  _internal_set_is_near_destination_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
}

// optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
inline bool OpenSpaceTrajectoryOptimizerConfig::_internal_has_planner_open_space_config() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || planner_open_space_config_ != nullptr);
  return value;
}
inline bool OpenSpaceTrajectoryOptimizerConfig::has_planner_open_space_config() const {
  return _internal_has_planner_open_space_config();
}
inline const ::apollo::planning::PlannerOpenSpaceConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_planner_open_space_config() const {
  const ::apollo::planning::PlannerOpenSpaceConfig* p = planner_open_space_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::PlannerOpenSpaceConfig*>(
      &::apollo::planning::_PlannerOpenSpaceConfig_default_instance_);
}
inline const ::apollo::planning::PlannerOpenSpaceConfig& OpenSpaceTrajectoryOptimizerConfig::planner_open_space_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return _internal_planner_open_space_config();
}
inline ::apollo::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::release_planner_open_space_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::PlannerOpenSpaceConfig* temp = planner_open_space_config_;
  planner_open_space_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::_internal_mutable_planner_open_space_config() {
  _has_bits_[0] |= 0x00000008u;
  if (planner_open_space_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PlannerOpenSpaceConfig>(GetArenaNoVirtual());
    planner_open_space_config_ = p;
  }
  return planner_open_space_config_;
}
inline ::apollo::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_planner_open_space_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return _internal_mutable_planner_open_space_config();
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_planner_open_space_config(::apollo::planning::PlannerOpenSpaceConfig* planner_open_space_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(planner_open_space_config_);
  }
  if (planner_open_space_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      planner_open_space_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planner_open_space_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  planner_open_space_config_ = planner_open_space_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
}

// -------------------------------------------------------------------

// HybridAStarConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
inline bool HybridAStarConfig::_internal_has_xy_grid_resolution() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_xy_grid_resolution() const {
  return _internal_has_xy_grid_resolution();
}
inline void HybridAStarConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  _has_bits_[0] &= ~0x00000004u;
}
inline double HybridAStarConfig::_internal_xy_grid_resolution() const {
  return xy_grid_resolution_;
}
inline double HybridAStarConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.xy_grid_resolution)
  return _internal_xy_grid_resolution();
}
inline void HybridAStarConfig::_internal_set_xy_grid_resolution(double value) {
  _has_bits_[0] |= 0x00000004u;
  xy_grid_resolution_ = value;
}
inline void HybridAStarConfig::set_xy_grid_resolution(double value) {
  _internal_set_xy_grid_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
inline bool HybridAStarConfig::_internal_has_phi_grid_resolution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_phi_grid_resolution() const {
  return _internal_has_phi_grid_resolution();
}
inline void HybridAStarConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  _has_bits_[0] &= ~0x00000008u;
}
inline double HybridAStarConfig::_internal_phi_grid_resolution() const {
  return phi_grid_resolution_;
}
inline double HybridAStarConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.phi_grid_resolution)
  return _internal_phi_grid_resolution();
}
inline void HybridAStarConfig::_internal_set_phi_grid_resolution(double value) {
  _has_bits_[0] |= 0x00000008u;
  phi_grid_resolution_ = value;
}
inline void HybridAStarConfig::set_phi_grid_resolution(double value) {
  _internal_set_phi_grid_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
inline bool HybridAStarConfig::_internal_has_next_node_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_next_node_num() const {
  return _internal_has_next_node_num();
}
inline void HybridAStarConfig::clear_next_node_num() {
  next_node_num_ = PROTOBUF_ULONGLONG(10);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HybridAStarConfig::_internal_next_node_num() const {
  return next_node_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HybridAStarConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.next_node_num)
  return _internal_next_node_num();
}
inline void HybridAStarConfig::_internal_set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  next_node_num_ = value;
}
inline void HybridAStarConfig::set_next_node_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_node_num(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
inline bool HybridAStarConfig::_internal_has_step_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_step_size() const {
  return _internal_has_step_size();
}
inline void HybridAStarConfig::clear_step_size() {
  step_size_ = 0.5;
  _has_bits_[0] &= ~0x00000020u;
}
inline double HybridAStarConfig::_internal_step_size() const {
  return step_size_;
}
inline double HybridAStarConfig::step_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.step_size)
  return _internal_step_size();
}
inline void HybridAStarConfig::_internal_set_step_size(double value) {
  _has_bits_[0] |= 0x00000020u;
  step_size_ = value;
}
inline void HybridAStarConfig::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
inline bool HybridAStarConfig::_internal_has_traj_forward_penalty() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_traj_forward_penalty() const {
  return _internal_has_traj_forward_penalty();
}
inline void HybridAStarConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HybridAStarConfig::_internal_traj_forward_penalty() const {
  return traj_forward_penalty_;
}
inline double HybridAStarConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_forward_penalty)
  return _internal_traj_forward_penalty();
}
inline void HybridAStarConfig::_internal_set_traj_forward_penalty(double value) {
  _has_bits_[0] |= 0x00000001u;
  traj_forward_penalty_ = value;
}
inline void HybridAStarConfig::set_traj_forward_penalty(double value) {
  _internal_set_traj_forward_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
inline bool HybridAStarConfig::_internal_has_traj_back_penalty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_traj_back_penalty() const {
  return _internal_has_traj_back_penalty();
}
inline void HybridAStarConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double HybridAStarConfig::_internal_traj_back_penalty() const {
  return traj_back_penalty_;
}
inline double HybridAStarConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_back_penalty)
  return _internal_traj_back_penalty();
}
inline void HybridAStarConfig::_internal_set_traj_back_penalty(double value) {
  _has_bits_[0] |= 0x00000002u;
  traj_back_penalty_ = value;
}
inline void HybridAStarConfig::set_traj_back_penalty(double value) {
  _internal_set_traj_back_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
inline bool HybridAStarConfig::_internal_has_traj_gear_switch_penalty() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_traj_gear_switch_penalty() const {
  return _internal_has_traj_gear_switch_penalty();
}
inline void HybridAStarConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  _has_bits_[0] &= ~0x00000040u;
}
inline double HybridAStarConfig::_internal_traj_gear_switch_penalty() const {
  return traj_gear_switch_penalty_;
}
inline double HybridAStarConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_gear_switch_penalty)
  return _internal_traj_gear_switch_penalty();
}
inline void HybridAStarConfig::_internal_set_traj_gear_switch_penalty(double value) {
  _has_bits_[0] |= 0x00000040u;
  traj_gear_switch_penalty_ = value;
}
inline void HybridAStarConfig::set_traj_gear_switch_penalty(double value) {
  _internal_set_traj_gear_switch_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
inline bool HybridAStarConfig::_internal_has_traj_steer_penalty() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_traj_steer_penalty() const {
  return _internal_has_traj_steer_penalty();
}
inline void HybridAStarConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  _has_bits_[0] &= ~0x00000080u;
}
inline double HybridAStarConfig::_internal_traj_steer_penalty() const {
  return traj_steer_penalty_;
}
inline double HybridAStarConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_steer_penalty)
  return _internal_traj_steer_penalty();
}
inline void HybridAStarConfig::_internal_set_traj_steer_penalty(double value) {
  _has_bits_[0] |= 0x00000080u;
  traj_steer_penalty_ = value;
}
inline void HybridAStarConfig::set_traj_steer_penalty(double value) {
  _internal_set_traj_steer_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
inline bool HybridAStarConfig::_internal_has_traj_steer_change_penalty() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_traj_steer_change_penalty() const {
  return _internal_has_traj_steer_change_penalty();
}
inline void HybridAStarConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  _has_bits_[0] &= ~0x00000100u;
}
inline double HybridAStarConfig::_internal_traj_steer_change_penalty() const {
  return traj_steer_change_penalty_;
}
inline double HybridAStarConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_steer_change_penalty)
  return _internal_traj_steer_change_penalty();
}
inline void HybridAStarConfig::_internal_set_traj_steer_change_penalty(double value) {
  _has_bits_[0] |= 0x00000100u;
  traj_steer_change_penalty_ = value;
}
inline void HybridAStarConfig::set_traj_steer_change_penalty(double value) {
  _internal_set_traj_steer_change_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
inline bool HybridAStarConfig::_internal_has_grid_a_star_xy_resolution() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_grid_a_star_xy_resolution() const {
  return _internal_has_grid_a_star_xy_resolution();
}
inline void HybridAStarConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  _has_bits_[0] &= ~0x00000200u;
}
inline double HybridAStarConfig::_internal_grid_a_star_xy_resolution() const {
  return grid_a_star_xy_resolution_;
}
inline double HybridAStarConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.grid_a_star_xy_resolution)
  return _internal_grid_a_star_xy_resolution();
}
inline void HybridAStarConfig::_internal_set_grid_a_star_xy_resolution(double value) {
  _has_bits_[0] |= 0x00000200u;
  grid_a_star_xy_resolution_ = value;
}
inline void HybridAStarConfig::set_grid_a_star_xy_resolution(double value) {
  _internal_set_grid_a_star_xy_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
inline bool HybridAStarConfig::_internal_has_node_radius() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool HybridAStarConfig::has_node_radius() const {
  return _internal_has_node_radius();
}
inline void HybridAStarConfig::clear_node_radius() {
  node_radius_ = 0.5;
  _has_bits_[0] &= ~0x00000400u;
}
inline double HybridAStarConfig::_internal_node_radius() const {
  return node_radius_;
}
inline double HybridAStarConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.node_radius)
  return _internal_node_radius();
}
inline void HybridAStarConfig::_internal_set_node_radius(double value) {
  _has_bits_[0] |= 0x00000400u;
  node_radius_ = value;
}
inline void HybridAStarConfig::set_node_radius(double value) {
  _internal_set_node_radius(value);
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.node_radius)
}

// -------------------------------------------------------------------

// DualVariableConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableConfig::_internal_has_weight_d() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DualVariableConfig::has_weight_d() const {
  return _internal_has_weight_d();
}
inline void DualVariableConfig::clear_weight_d() {
  weight_d_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DualVariableConfig::_internal_weight_d() const {
  return weight_d_;
}
inline double DualVariableConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.weight_d)
  return _internal_weight_d();
}
inline void DualVariableConfig::_internal_set_weight_d(double value) {
  _has_bits_[0] |= 0x00000010u;
  weight_d_ = value;
}
inline void DualVariableConfig::set_weight_d(double value) {
  _internal_set_weight_d(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.weight_d)
}

// optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
inline bool DualVariableConfig::_internal_has_ipopt_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ipopt_config_ != nullptr);
  return value;
}
inline bool DualVariableConfig::has_ipopt_config() const {
  return _internal_has_ipopt_config();
}
inline void DualVariableConfig::clear_ipopt_config() {
  if (ipopt_config_ != nullptr) ipopt_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::IpoptSolverConfig& DualVariableConfig::_internal_ipopt_config() const {
  const ::apollo::planning::IpoptSolverConfig* p = ipopt_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::IpoptSolverConfig*>(
      &::apollo::planning::_IpoptSolverConfig_default_instance_);
}
inline const ::apollo::planning::IpoptSolverConfig& DualVariableConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.ipopt_config)
  return _internal_ipopt_config();
}
inline ::apollo::planning::IpoptSolverConfig* DualVariableConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DualVariableConfig.ipopt_config)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::IpoptSolverConfig* DualVariableConfig::_internal_mutable_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
  if (ipopt_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::IpoptSolverConfig>(GetArenaNoVirtual());
    ipopt_config_ = p;
  }
  return ipopt_config_;
}
inline ::apollo::planning::IpoptSolverConfig* DualVariableConfig::mutable_ipopt_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.DualVariableConfig.ipopt_config)
  return _internal_mutable_ipopt_config();
}
inline void DualVariableConfig::set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ipopt_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DualVariableConfig.ipopt_config)
}

// optional .apollo.planning.DualVariableMode qp_format = 3;
inline bool DualVariableConfig::_internal_has_qp_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DualVariableConfig::has_qp_format() const {
  return _internal_has_qp_format();
}
inline void DualVariableConfig::clear_qp_format() {
  qp_format_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::planning::DualVariableMode DualVariableConfig::_internal_qp_format() const {
  return static_cast< ::apollo::planning::DualVariableMode >(qp_format_);
}
inline ::apollo::planning::DualVariableMode DualVariableConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.qp_format)
  return _internal_qp_format();
}
inline void DualVariableConfig::_internal_set_qp_format(::apollo::planning::DualVariableMode value) {
  assert(::apollo::planning::DualVariableMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  qp_format_ = value;
}
inline void DualVariableConfig::set_qp_format(::apollo::planning::DualVariableMode value) {
  _internal_set_qp_format(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableConfig::_internal_has_min_safety_distance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DualVariableConfig::has_min_safety_distance() const {
  return _internal_has_min_safety_distance();
}
inline void DualVariableConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DualVariableConfig::_internal_min_safety_distance() const {
  return min_safety_distance_;
}
inline double DualVariableConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.min_safety_distance)
  return _internal_min_safety_distance();
}
inline void DualVariableConfig::_internal_set_min_safety_distance(double value) {
  _has_bits_[0] |= 0x00000002u;
  min_safety_distance_ = value;
}
inline void DualVariableConfig::set_min_safety_distance(double value) {
  _internal_set_min_safety_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableConfig::_internal_has_debug_osqp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DualVariableConfig::has_debug_osqp() const {
  return _internal_has_debug_osqp();
}
inline void DualVariableConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DualVariableConfig::_internal_debug_osqp() const {
  return debug_osqp_;
}
inline bool DualVariableConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.debug_osqp)
  return _internal_debug_osqp();
}
inline void DualVariableConfig::_internal_set_debug_osqp(bool value) {
  _has_bits_[0] |= 0x00000008u;
  debug_osqp_ = value;
}
inline void DualVariableConfig::set_debug_osqp(bool value) {
  _internal_set_debug_osqp(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.debug_osqp)
}

// -------------------------------------------------------------------

// DistanceApproachTrajectorySmootherConfig

// optional double weight_steer = 1;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_steer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer() const {
  return _internal_has_weight_steer();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer() {
  weight_steer_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_steer() const {
  return weight_steer_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
  return _internal_weight_steer();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_steer(double value) {
  _has_bits_[0] |= 0x00000002u;
  weight_steer_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer(double value) {
  _internal_set_weight_steer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
}

// optional double weight_a = 2;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a() const {
  return _internal_has_weight_a();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a() {
  weight_a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_a() const {
  return weight_a_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
  return _internal_weight_a();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_a(double value) {
  _has_bits_[0] |= 0x00000004u;
  weight_a_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a(double value) {
  _internal_set_weight_a(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
}

// optional double weight_steer_rate = 3;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_steer_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_rate() const {
  return _internal_has_weight_steer_rate();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_steer_rate() const {
  return weight_steer_rate_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
  return _internal_weight_steer_rate();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_steer_rate(double value) {
  _has_bits_[0] |= 0x00000008u;
  weight_steer_rate_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer_rate(double value) {
  _internal_set_weight_steer_rate(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_a_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a_rate() const {
  return _internal_has_weight_a_rate();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_a_rate() const {
  return weight_a_rate_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
  return _internal_weight_a_rate();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_a_rate(double value) {
  _has_bits_[0] |= 0x00000010u;
  weight_a_rate_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a_rate(double value) {
  _internal_set_weight_a_rate(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
}

// optional double weight_x = 5;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_x() const {
  return _internal_has_weight_x();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_x() {
  weight_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_x() const {
  return weight_x_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
  return _internal_weight_x();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_x(double value) {
  _has_bits_[0] |= 0x00000020u;
  weight_x_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_x(double value) {
  _internal_set_weight_x(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
}

// optional double weight_y = 6;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_y() const {
  return _internal_has_weight_y();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_y() {
  weight_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_y() const {
  return weight_y_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
  return _internal_weight_y();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_y(double value) {
  _has_bits_[0] |= 0x00000040u;
  weight_y_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_y(double value) {
  _internal_set_weight_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
}

// optional double weight_phi = 7;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_phi() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_phi() const {
  return _internal_has_weight_phi();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_phi() {
  weight_phi_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_phi() const {
  return weight_phi_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
  return _internal_weight_phi();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_phi(double value) {
  _has_bits_[0] |= 0x00000080u;
  weight_phi_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_phi(double value) {
  _internal_set_weight_phi(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
}

// optional double weight_v = 8;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_v() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_v() const {
  return _internal_has_weight_v();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_v() {
  weight_v_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_v() const {
  return weight_v_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
  return _internal_weight_v();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_v(double value) {
  _has_bits_[0] |= 0x00000100u;
  weight_v_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_v(double value) {
  _internal_set_weight_v(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_steer_stitching() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_stitching() const {
  return _internal_has_weight_steer_stitching();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_steer_stitching() const {
  return weight_steer_stitching_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
  return _internal_weight_steer_stitching();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_steer_stitching(double value) {
  _has_bits_[0] |= 0x00000200u;
  weight_steer_stitching_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer_stitching(double value) {
  _internal_set_weight_steer_stitching(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_a_stitching() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a_stitching() const {
  return _internal_has_weight_a_stitching();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_a_stitching() const {
  return weight_a_stitching_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
  return _internal_weight_a_stitching();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_a_stitching(double value) {
  _has_bits_[0] |= 0x00000400u;
  weight_a_stitching_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a_stitching(double value) {
  _internal_set_weight_a_stitching(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_first_order_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_first_order_time() const {
  return _internal_has_weight_first_order_time();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_first_order_time() const {
  return weight_first_order_time_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
  return _internal_weight_first_order_time();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_first_order_time(double value) {
  _has_bits_[0] |= 0x00000800u;
  weight_first_order_time_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_first_order_time(double value) {
  _internal_set_weight_first_order_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_weight_second_order_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_second_order_time() const {
  return _internal_has_weight_second_order_time();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_weight_second_order_time() const {
  return weight_second_order_time_;
}
inline double DistanceApproachTrajectorySmootherConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
  return _internal_weight_second_order_time();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_weight_second_order_time(double value) {
  _has_bits_[0] |= 0x00001000u;
  weight_second_order_time_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_second_order_time(double value) {
  _internal_set_weight_second_order_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_min_safety_distance() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_min_safety_distance() const {
  return _internal_has_min_safety_distance();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_min_safety_distance() const {
  return min_safety_distance_;
}
inline double DistanceApproachTrajectorySmootherConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
  return _internal_min_safety_distance();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_min_safety_distance(double value) {
  _has_bits_[0] |= 0x00002000u;
  min_safety_distance_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_min_safety_distance(double value) {
  _internal_set_min_safety_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_max_speed_forward() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_max_speed_forward() const {
  return _internal_has_max_speed_forward();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  _has_bits_[0] &= ~0x00080000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_max_speed_forward() const {
  return max_speed_forward_;
}
inline double DistanceApproachTrajectorySmootherConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
  return _internal_max_speed_forward();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_max_speed_forward(double value) {
  _has_bits_[0] |= 0x00080000u;
  max_speed_forward_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_speed_forward(double value) {
  _internal_set_max_speed_forward(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_max_speed_reverse() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_max_speed_reverse() const {
  return _internal_has_max_speed_reverse();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  _has_bits_[0] &= ~0x00100000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_max_speed_reverse() const {
  return max_speed_reverse_;
}
inline double DistanceApproachTrajectorySmootherConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
  return _internal_max_speed_reverse();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_max_speed_reverse(double value) {
  _has_bits_[0] |= 0x00100000u;
  max_speed_reverse_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_speed_reverse(double value) {
  _internal_set_max_speed_reverse(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_max_acceleration_forward() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_forward() const {
  return _internal_has_max_acceleration_forward();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  _has_bits_[0] &= ~0x00200000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_max_acceleration_forward() const {
  return max_acceleration_forward_;
}
inline double DistanceApproachTrajectorySmootherConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
  return _internal_max_acceleration_forward();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_max_acceleration_forward(double value) {
  _has_bits_[0] |= 0x00200000u;
  max_acceleration_forward_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_forward(double value) {
  _internal_set_max_acceleration_forward(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_max_acceleration_reverse() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_reverse() const {
  return _internal_has_max_acceleration_reverse();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  _has_bits_[0] &= ~0x00400000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_max_acceleration_reverse() const {
  return max_acceleration_reverse_;
}
inline double DistanceApproachTrajectorySmootherConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
  return _internal_max_acceleration_reverse();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_max_acceleration_reverse(double value) {
  _has_bits_[0] |= 0x00400000u;
  max_acceleration_reverse_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_reverse(double value) {
  _internal_set_max_acceleration_reverse(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_min_time_sample_scaling() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_min_time_sample_scaling() const {
  return _internal_has_min_time_sample_scaling();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  _has_bits_[0] &= ~0x00800000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_min_time_sample_scaling() const {
  return min_time_sample_scaling_;
}
inline double DistanceApproachTrajectorySmootherConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
  return _internal_min_time_sample_scaling();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_min_time_sample_scaling(double value) {
  _has_bits_[0] |= 0x00800000u;
  min_time_sample_scaling_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_min_time_sample_scaling(double value) {
  _internal_set_min_time_sample_scaling(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_max_time_sample_scaling() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_max_time_sample_scaling() const {
  return _internal_has_max_time_sample_scaling();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  _has_bits_[0] &= ~0x01000000u;
}
inline double DistanceApproachTrajectorySmootherConfig::_internal_max_time_sample_scaling() const {
  return max_time_sample_scaling_;
}
inline double DistanceApproachTrajectorySmootherConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
  return _internal_max_time_sample_scaling();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_max_time_sample_scaling(double value) {
  _has_bits_[0] |= 0x01000000u;
  max_time_sample_scaling_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_time_sample_scaling(double value) {
  _internal_set_max_time_sample_scaling(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_use_fix_time() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_use_fix_time() const {
  return _internal_has_use_fix_time();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool DistanceApproachTrajectorySmootherConfig::_internal_use_fix_time() const {
  return use_fix_time_;
}
inline bool DistanceApproachTrajectorySmootherConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
  return _internal_use_fix_time();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_use_fix_time(bool value) {
  _has_bits_[0] |= 0x00004000u;
  use_fix_time_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_use_fix_time(bool value) {
  _internal_set_use_fix_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
}

// optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_ipopt_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ipopt_config_ != nullptr);
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_ipopt_config() const {
  return _internal_has_ipopt_config();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_ipopt_config() {
  if (ipopt_config_ != nullptr) ipopt_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::IpoptSolverConfig& DistanceApproachTrajectorySmootherConfig::_internal_ipopt_config() const {
  const ::apollo::planning::IpoptSolverConfig* p = ipopt_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning::IpoptSolverConfig*>(
      &::apollo::planning::_IpoptSolverConfig_default_instance_);
}
inline const ::apollo::planning::IpoptSolverConfig& DistanceApproachTrajectorySmootherConfig::ipopt_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return _internal_ipopt_config();
}
inline ::apollo::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::_internal_mutable_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
  if (ipopt_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::IpoptSolverConfig>(GetArenaNoVirtual());
    ipopt_config_ = p;
  }
  return ipopt_config_;
}
inline ::apollo::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::mutable_ipopt_config() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return _internal_mutable_ipopt_config();
}
inline void DistanceApproachTrajectorySmootherConfig::set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ipopt_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_enable_constraint_check() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_constraint_check() const {
  return _internal_has_enable_constraint_check();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool DistanceApproachTrajectorySmootherConfig::_internal_enable_constraint_check() const {
  return enable_constraint_check_;
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
  return _internal_enable_constraint_check();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_enable_constraint_check(bool value) {
  _has_bits_[0] |= 0x00008000u;
  enable_constraint_check_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_constraint_check(bool value) {
  _internal_set_enable_constraint_check(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_enable_hand_derivative() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_hand_derivative() const {
  return _internal_has_enable_hand_derivative();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool DistanceApproachTrajectorySmootherConfig::_internal_enable_hand_derivative() const {
  return enable_hand_derivative_;
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
  return _internal_enable_hand_derivative();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_enable_hand_derivative(bool value) {
  _has_bits_[0] |= 0x00010000u;
  enable_hand_derivative_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_hand_derivative(bool value) {
  _internal_set_enable_hand_derivative(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_enable_derivative_check() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_derivative_check() const {
  return _internal_has_enable_derivative_check();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool DistanceApproachTrajectorySmootherConfig::_internal_enable_derivative_check() const {
  return enable_derivative_check_;
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
  return _internal_enable_derivative_check();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_enable_derivative_check(bool value) {
  _has_bits_[0] |= 0x00020000u;
  enable_derivative_check_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_derivative_check(bool value) {
  _internal_set_enable_derivative_check(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
inline bool DistanceApproachTrajectorySmootherConfig::_internal_has_enable_initial_final_check() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_initial_final_check() const {
  return _internal_has_enable_initial_final_check();
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool DistanceApproachTrajectorySmootherConfig::_internal_enable_initial_final_check() const {
  return enable_initial_final_check_;
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
  return _internal_enable_initial_final_check();
}
inline void DistanceApproachTrajectorySmootherConfig::_internal_set_enable_initial_final_check(bool value) {
  _has_bits_[0] |= 0x00040000u;
  enable_initial_final_check_ = value;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_initial_final_check(bool value) {
  _internal_set_enable_initial_final_check(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
}

// -------------------------------------------------------------------

// IpoptSolverConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptSolverConfig::_internal_has_ipopt_print_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_print_level() const {
  return _internal_has_ipopt_print_level();
}
inline void IpoptSolverConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::_internal_ipopt_print_level() const {
  return ipopt_print_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_print_level)
  return _internal_ipopt_print_level();
}
inline void IpoptSolverConfig::_internal_set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ipopt_print_level_ = value;
}
inline void IpoptSolverConfig::set_ipopt_print_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipopt_print_level(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptSolverConfig::_internal_has_mumps_mem_percent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_mumps_mem_percent() const {
  return _internal_has_mumps_mem_percent();
}
inline void IpoptSolverConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::_internal_mumps_mem_percent() const {
  return mumps_mem_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.mumps_mem_percent)
  return _internal_mumps_mem_percent();
}
inline void IpoptSolverConfig::_internal_set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mumps_mem_percent_ = value;
}
inline void IpoptSolverConfig::set_mumps_mem_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mumps_mem_percent(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptSolverConfig::_internal_has_mumps_pivtol() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_mumps_pivtol() const {
  return _internal_has_mumps_pivtol();
}
inline void IpoptSolverConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double IpoptSolverConfig::_internal_mumps_pivtol() const {
  return mumps_pivtol_;
}
inline double IpoptSolverConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.mumps_pivtol)
  return _internal_mumps_pivtol();
}
inline void IpoptSolverConfig::_internal_set_mumps_pivtol(double value) {
  _has_bits_[0] |= 0x00000020u;
  mumps_pivtol_ = value;
}
inline void IpoptSolverConfig::set_mumps_pivtol(double value) {
  _internal_set_mumps_pivtol(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptSolverConfig::_internal_has_ipopt_max_iter() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_max_iter() const {
  return _internal_has_ipopt_max_iter();
}
inline void IpoptSolverConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::_internal_ipopt_max_iter() const {
  return ipopt_max_iter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IpoptSolverConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_max_iter)
  return _internal_ipopt_max_iter();
}
inline void IpoptSolverConfig::_internal_set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  ipopt_max_iter_ = value;
}
inline void IpoptSolverConfig::set_ipopt_max_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ipopt_max_iter(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptSolverConfig::_internal_has_ipopt_tol() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_tol() const {
  return _internal_has_ipopt_tol();
}
inline void IpoptSolverConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double IpoptSolverConfig::_internal_ipopt_tol() const {
  return ipopt_tol_;
}
inline double IpoptSolverConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_tol)
  return _internal_ipopt_tol();
}
inline void IpoptSolverConfig::_internal_set_ipopt_tol(double value) {
  _has_bits_[0] |= 0x00000040u;
  ipopt_tol_ = value;
}
inline void IpoptSolverConfig::set_ipopt_tol(double value) {
  _internal_set_ipopt_tol(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptSolverConfig::_internal_has_ipopt_acceptable_constr_viol_tol() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return _internal_has_ipopt_acceptable_constr_viol_tol();
}
inline void IpoptSolverConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double IpoptSolverConfig::_internal_ipopt_acceptable_constr_viol_tol() const {
  return ipopt_acceptable_constr_viol_tol_;
}
inline double IpoptSolverConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
  return _internal_ipopt_acceptable_constr_viol_tol();
}
inline void IpoptSolverConfig::_internal_set_ipopt_acceptable_constr_viol_tol(double value) {
  _has_bits_[0] |= 0x00000080u;
  ipopt_acceptable_constr_viol_tol_ = value;
}
inline void IpoptSolverConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  _internal_set_ipopt_acceptable_constr_viol_tol(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptSolverConfig::_internal_has_ipopt_min_hessian_perturbation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_min_hessian_perturbation() const {
  return _internal_has_ipopt_min_hessian_perturbation();
}
inline void IpoptSolverConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double IpoptSolverConfig::_internal_ipopt_min_hessian_perturbation() const {
  return ipopt_min_hessian_perturbation_;
}
inline double IpoptSolverConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
  return _internal_ipopt_min_hessian_perturbation();
}
inline void IpoptSolverConfig::_internal_set_ipopt_min_hessian_perturbation(double value) {
  _has_bits_[0] |= 0x00000100u;
  ipopt_min_hessian_perturbation_ = value;
}
inline void IpoptSolverConfig::set_ipopt_min_hessian_perturbation(double value) {
  _internal_set_ipopt_min_hessian_perturbation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptSolverConfig::_internal_has_ipopt_jacobian_regularization_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_jacobian_regularization_value() const {
  return _internal_has_ipopt_jacobian_regularization_value();
}
inline void IpoptSolverConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double IpoptSolverConfig::_internal_ipopt_jacobian_regularization_value() const {
  return ipopt_jacobian_regularization_value_;
}
inline double IpoptSolverConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
  return _internal_ipopt_jacobian_regularization_value();
}
inline void IpoptSolverConfig::_internal_set_ipopt_jacobian_regularization_value(double value) {
  _has_bits_[0] |= 0x00000200u;
  ipopt_jacobian_regularization_value_ = value;
}
inline void IpoptSolverConfig::set_ipopt_jacobian_regularization_value(double value) {
  _internal_set_ipopt_jacobian_regularization_value(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptSolverConfig::_internal_has_ipopt_print_timing_statistics() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_print_timing_statistics() const {
  return _internal_has_ipopt_print_timing_statistics();
}
inline void IpoptSolverConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpoptSolverConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return _internal_ipopt_print_timing_statistics();
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const std::string& value) {
  _internal_set_ipopt_print_timing_statistics(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptSolverConfig::mutable_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return _internal_mutable_ipopt_print_timing_statistics();
}
inline const std::string& IpoptSolverConfig::_internal_ipopt_print_timing_statistics() const {
  return ipopt_print_timing_statistics_.GetNoArena();
}
inline void IpoptSolverConfig::_internal_set_ipopt_print_timing_statistics(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ipopt_print_timing_statistics_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline std::string* IpoptSolverConfig::_internal_mutable_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
  return ipopt_print_timing_statistics_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpoptSolverConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  if (!_internal_has_ipopt_print_timing_statistics()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ipopt_print_timing_statistics_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_print_timing_statistics(std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipopt_print_timing_statistics_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptSolverConfig::_internal_has_ipopt_alpha_for_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_alpha_for_y() const {
  return _internal_has_ipopt_alpha_for_y();
}
inline void IpoptSolverConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IpoptSolverConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return _internal_ipopt_alpha_for_y();
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const std::string& value) {
  _internal_set_ipopt_alpha_for_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptSolverConfig::mutable_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return _internal_mutable_ipopt_alpha_for_y();
}
inline const std::string& IpoptSolverConfig::_internal_ipopt_alpha_for_y() const {
  return ipopt_alpha_for_y_.GetNoArena();
}
inline void IpoptSolverConfig::_internal_set_ipopt_alpha_for_y(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ipopt_alpha_for_y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline std::string* IpoptSolverConfig::_internal_mutable_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
  return ipopt_alpha_for_y_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpoptSolverConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  if (!_internal_has_ipopt_alpha_for_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ipopt_alpha_for_y_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_alpha_for_y(std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ipopt_alpha_for_y_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptSolverConfig::_internal_has_ipopt_recalc_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_recalc_y() const {
  return _internal_has_ipopt_recalc_y();
}
inline void IpoptSolverConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IpoptSolverConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
  return _internal_ipopt_recalc_y();
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const std::string& value) {
  _internal_set_ipopt_recalc_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline std::string* IpoptSolverConfig::mutable_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
  return _internal_mutable_ipopt_recalc_y();
}
inline const std::string& IpoptSolverConfig::_internal_ipopt_recalc_y() const {
  return ipopt_recalc_y_.GetNoArena();
}
inline void IpoptSolverConfig::_internal_set_ipopt_recalc_y(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ipopt_recalc_y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline std::string* IpoptSolverConfig::_internal_mutable_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
  return ipopt_recalc_y_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IpoptSolverConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
  if (!_internal_has_ipopt_recalc_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ipopt_recalc_y_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_recalc_y(std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ipopt_recalc_y_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptSolverConfig::_internal_has_ipopt_mu_init() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool IpoptSolverConfig::has_ipopt_mu_init() const {
  return _internal_has_ipopt_mu_init();
}
inline void IpoptSolverConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  _has_bits_[0] &= ~0x00000800u;
}
inline double IpoptSolverConfig::_internal_ipopt_mu_init() const {
  return ipopt_mu_init_;
}
inline double IpoptSolverConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_mu_init)
  return _internal_ipopt_mu_init();
}
inline void IpoptSolverConfig::_internal_set_ipopt_mu_init(double value) {
  _has_bits_[0] |= 0x00000800u;
  ipopt_mu_init_ = value;
}
inline void IpoptSolverConfig::set_ipopt_mu_init(double value) {
  _internal_set_ipopt_mu_init(value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_mu_init)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::DualVariableMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DualVariableMode>() {
  return ::apollo::planning::DualVariableMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftrajectory_5fprovider_5fconfig_2eproto
