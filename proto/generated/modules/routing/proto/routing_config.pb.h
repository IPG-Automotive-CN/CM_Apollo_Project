// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2frouting_2fproto_2frouting_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto;
namespace apollo {
namespace routing {
class RoutingConfig;
class RoutingConfigDefaultTypeInternal;
extern RoutingConfigDefaultTypeInternal _RoutingConfig_default_instance_;
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::routing::RoutingConfig* Arena::CreateMaybeMessage<::apollo::routing::RoutingConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace routing {

// ===================================================================

class RoutingConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoutingConfig) */ {
 public:
  RoutingConfig();
  virtual ~RoutingConfig();

  RoutingConfig(const RoutingConfig& from);
  RoutingConfig(RoutingConfig&& from) noexcept
    : RoutingConfig() {
    *this = ::std::move(from);
  }

  inline RoutingConfig& operator=(const RoutingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingConfig& operator=(RoutingConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingConfig* internal_default_instance() {
    return reinterpret_cast<const RoutingConfig*>(
               &_RoutingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingConfig& a, RoutingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingConfig* New() const final {
    return CreateMaybeMessage<RoutingConfig>(nullptr);
  }

  RoutingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingConfig& from);
  void MergeFrom(const RoutingConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.routing.RoutingConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto);
    return ::descriptor_table_modules_2frouting_2fproto_2frouting_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseSpeedFieldNumber = 1,
    kLeftTurnPenaltyFieldNumber = 2,
    kRightTurnPenaltyFieldNumber = 3,
    kUturnPenaltyFieldNumber = 4,
    kChangePenaltyFieldNumber = 5,
    kBaseChangingLengthFieldNumber = 6,
  };
  // optional double base_speed = 1;
  bool has_base_speed() const;
  private:
  bool _internal_has_base_speed() const;
  public:
  void clear_base_speed();
  double base_speed() const;
  void set_base_speed(double value);
  private:
  double _internal_base_speed() const;
  void _internal_set_base_speed(double value);
  public:

  // optional double left_turn_penalty = 2;
  bool has_left_turn_penalty() const;
  private:
  bool _internal_has_left_turn_penalty() const;
  public:
  void clear_left_turn_penalty();
  double left_turn_penalty() const;
  void set_left_turn_penalty(double value);
  private:
  double _internal_left_turn_penalty() const;
  void _internal_set_left_turn_penalty(double value);
  public:

  // optional double right_turn_penalty = 3;
  bool has_right_turn_penalty() const;
  private:
  bool _internal_has_right_turn_penalty() const;
  public:
  void clear_right_turn_penalty();
  double right_turn_penalty() const;
  void set_right_turn_penalty(double value);
  private:
  double _internal_right_turn_penalty() const;
  void _internal_set_right_turn_penalty(double value);
  public:

  // optional double uturn_penalty = 4;
  bool has_uturn_penalty() const;
  private:
  bool _internal_has_uturn_penalty() const;
  public:
  void clear_uturn_penalty();
  double uturn_penalty() const;
  void set_uturn_penalty(double value);
  private:
  double _internal_uturn_penalty() const;
  void _internal_set_uturn_penalty(double value);
  public:

  // optional double change_penalty = 5;
  bool has_change_penalty() const;
  private:
  bool _internal_has_change_penalty() const;
  public:
  void clear_change_penalty();
  double change_penalty() const;
  void set_change_penalty(double value);
  private:
  double _internal_change_penalty() const;
  void _internal_set_change_penalty(double value);
  public:

  // optional double base_changing_length = 6;
  bool has_base_changing_length() const;
  private:
  bool _internal_has_base_changing_length() const;
  public:
  void clear_base_changing_length();
  double base_changing_length() const;
  void set_base_changing_length(double value);
  private:
  double _internal_base_changing_length() const;
  void _internal_set_base_changing_length(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.routing.RoutingConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double base_speed_;
  double left_turn_penalty_;
  double right_turn_penalty_;
  double uturn_penalty_;
  double change_penalty_;
  double base_changing_length_;
  friend struct ::TableStruct_modules_2frouting_2fproto_2frouting_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingConfig

// optional double base_speed = 1;
inline bool RoutingConfig::_internal_has_base_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoutingConfig::has_base_speed() const {
  return _internal_has_base_speed();
}
inline void RoutingConfig::clear_base_speed() {
  base_speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RoutingConfig::_internal_base_speed() const {
  return base_speed_;
}
inline double RoutingConfig::base_speed() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.base_speed)
  return _internal_base_speed();
}
inline void RoutingConfig::_internal_set_base_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  base_speed_ = value;
}
inline void RoutingConfig::set_base_speed(double value) {
  _internal_set_base_speed(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.base_speed)
}

// optional double left_turn_penalty = 2;
inline bool RoutingConfig::_internal_has_left_turn_penalty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoutingConfig::has_left_turn_penalty() const {
  return _internal_has_left_turn_penalty();
}
inline void RoutingConfig::clear_left_turn_penalty() {
  left_turn_penalty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RoutingConfig::_internal_left_turn_penalty() const {
  return left_turn_penalty_;
}
inline double RoutingConfig::left_turn_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.left_turn_penalty)
  return _internal_left_turn_penalty();
}
inline void RoutingConfig::_internal_set_left_turn_penalty(double value) {
  _has_bits_[0] |= 0x00000002u;
  left_turn_penalty_ = value;
}
inline void RoutingConfig::set_left_turn_penalty(double value) {
  _internal_set_left_turn_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.left_turn_penalty)
}

// optional double right_turn_penalty = 3;
inline bool RoutingConfig::_internal_has_right_turn_penalty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoutingConfig::has_right_turn_penalty() const {
  return _internal_has_right_turn_penalty();
}
inline void RoutingConfig::clear_right_turn_penalty() {
  right_turn_penalty_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RoutingConfig::_internal_right_turn_penalty() const {
  return right_turn_penalty_;
}
inline double RoutingConfig::right_turn_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.right_turn_penalty)
  return _internal_right_turn_penalty();
}
inline void RoutingConfig::_internal_set_right_turn_penalty(double value) {
  _has_bits_[0] |= 0x00000004u;
  right_turn_penalty_ = value;
}
inline void RoutingConfig::set_right_turn_penalty(double value) {
  _internal_set_right_turn_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.right_turn_penalty)
}

// optional double uturn_penalty = 4;
inline bool RoutingConfig::_internal_has_uturn_penalty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoutingConfig::has_uturn_penalty() const {
  return _internal_has_uturn_penalty();
}
inline void RoutingConfig::clear_uturn_penalty() {
  uturn_penalty_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RoutingConfig::_internal_uturn_penalty() const {
  return uturn_penalty_;
}
inline double RoutingConfig::uturn_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.uturn_penalty)
  return _internal_uturn_penalty();
}
inline void RoutingConfig::_internal_set_uturn_penalty(double value) {
  _has_bits_[0] |= 0x00000008u;
  uturn_penalty_ = value;
}
inline void RoutingConfig::set_uturn_penalty(double value) {
  _internal_set_uturn_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.uturn_penalty)
}

// optional double change_penalty = 5;
inline bool RoutingConfig::_internal_has_change_penalty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoutingConfig::has_change_penalty() const {
  return _internal_has_change_penalty();
}
inline void RoutingConfig::clear_change_penalty() {
  change_penalty_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RoutingConfig::_internal_change_penalty() const {
  return change_penalty_;
}
inline double RoutingConfig::change_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.change_penalty)
  return _internal_change_penalty();
}
inline void RoutingConfig::_internal_set_change_penalty(double value) {
  _has_bits_[0] |= 0x00000010u;
  change_penalty_ = value;
}
inline void RoutingConfig::set_change_penalty(double value) {
  _internal_set_change_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.change_penalty)
}

// optional double base_changing_length = 6;
inline bool RoutingConfig::_internal_has_base_changing_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoutingConfig::has_base_changing_length() const {
  return _internal_has_base_changing_length();
}
inline void RoutingConfig::clear_base_changing_length() {
  base_changing_length_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RoutingConfig::_internal_base_changing_length() const {
  return base_changing_length_;
}
inline double RoutingConfig::base_changing_length() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingConfig.base_changing_length)
  return _internal_base_changing_length();
}
inline void RoutingConfig::_internal_set_base_changing_length(double value) {
  _has_bits_[0] |= 0x00000020u;
  base_changing_length_ = value;
}
inline void RoutingConfig::set_base_changing_length(double value) {
  _internal_set_base_changing_length(value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingConfig.base_changing_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_5fconfig_2eproto
