// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto

#include "modules/routing/proto/routing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2ferror_5fcode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusPb_modules_2fcommon_2fproto_2ferror_5fcode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParkingSpace_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2frouting_2fproto_2frouting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto;
namespace apollo {
namespace routing {
class LaneWaypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneWaypoint> _instance;
} _LaneWaypoint_default_instance_;
class LaneSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneSegment> _instance;
} _LaneSegment_default_instance_;
class RoutingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingRequest> _instance;
} _RoutingRequest_default_instance_;
class MeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Measurement> _instance;
} _Measurement_default_instance_;
class PassageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Passage> _instance;
} _Passage_default_instance_;
class RoadSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSegment> _instance;
} _RoadSegment_default_instance_;
class RoutingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingResponse> _instance;
} _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace apollo
static void InitDefaultsscc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_LaneSegment_default_instance_;
    new (ptr) ::apollo::routing::LaneSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::LaneSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto}, {}};

static void InitDefaultsscc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_LaneWaypoint_default_instance_;
    new (ptr) ::apollo::routing::LaneWaypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::LaneWaypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_PointENU_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Measurement_default_instance_;
    new (ptr) ::apollo::routing::Measurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Measurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto}, {}};

static void InitDefaultsscc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Passage_default_instance_;
    new (ptr) ::apollo::routing::Passage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Passage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoadSegment_default_instance_;
    new (ptr) ::apollo::routing::RoadSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoadSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto.base,}};

static void InitDefaultsscc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoutingRequest_default_instance_;
    new (ptr) ::apollo::routing::RoutingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoutingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_ParkingSpace_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto.base,}};

static void InitDefaultsscc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoutingResponse_default_instance_;
    new (ptr) ::apollo::routing::RoutingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoutingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto.base,
      &scc_info_StatusPb_modules_2fcommon_2fproto_2ferror_5fcode_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2frouting_2fproto_2frouting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2frouting_2fproto_2frouting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneWaypoint, pose_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::LaneSegment, end_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, waypoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, blacklisted_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, blacklisted_road_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, broadcast_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingRequest, parking_space_),
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Measurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Measurement, distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, can_exit_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::Passage, change_lane_type_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoadSegment, passage_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, road_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, measurement_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, routing_request_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, map_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::routing::RoutingResponse, status_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::routing::LaneWaypoint)},
  { 11, 19, sizeof(::apollo::routing::LaneSegment)},
  { 22, 33, sizeof(::apollo::routing::RoutingRequest)},
  { 39, 45, sizeof(::apollo::routing::Measurement)},
  { 46, 54, sizeof(::apollo::routing::Passage)},
  { 57, 64, sizeof(::apollo::routing::RoadSegment)},
  { 66, 77, sizeof(::apollo::routing::RoutingResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_LaneWaypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_LaneSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_RoutingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_Measurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_Passage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_RoadSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::routing::_RoutingResponse_default_instance_),
};

const char descriptor_table_protodef_modules_2frouting_2fproto_2frouting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#modules/routing/proto/routing.proto\022\016a"
  "pollo.routing\032!modules/common/proto/head"
  "er.proto\032#modules/common/proto/geometry."
  "proto\032%modules/common/proto/error_code.p"
  "roto\032)modules/map/proto/map_parking_spac"
  "e.proto\"L\n\014LaneWaypoint\022\n\n\002id\030\001 \001(\t\022\t\n\001s"
  "\030\002 \001(\001\022%\n\004pose\030\003 \001(\0132\027.apollo.common.Poi"
  "ntENU\"9\n\013LaneSegment\022\n\n\002id\030\001 \001(\t\022\017\n\007star"
  "t_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\"\204\002\n\016RoutingRequ"
  "est\022%\n\006header\030\001 \001(\0132\025.apollo.common.Head"
  "er\022.\n\010waypoint\030\002 \003(\0132\034.apollo.routing.La"
  "neWaypoint\0225\n\020blacklisted_lane\030\003 \003(\0132\033.a"
  "pollo.routing.LaneSegment\022\030\n\020blacklisted"
  "_road\030\004 \003(\t\022\027\n\tbroadcast\030\005 \001(\010:\004true\0221\n\r"
  "parking_space\030\006 \001(\0132\032.apollo.hdmap.Parki"
  "ngSpace\"\037\n\013Measurement\022\020\n\010distance\030\001 \001(\001"
  "\"\214\001\n\007Passage\022,\n\007segment\030\001 \003(\0132\033.apollo.r"
  "outing.LaneSegment\022\020\n\010can_exit\030\002 \001(\010\022A\n\020"
  "change_lane_type\030\003 \001(\0162\036.apollo.routing."
  "ChangeLaneType:\007FORWARD\"C\n\013RoadSegment\022\n"
  "\n\002id\030\001 \001(\t\022(\n\007passage\030\002 \003(\0132\027.apollo.rou"
  "ting.Passage\"\214\002\n\017RoutingResponse\022%\n\006head"
  "er\030\001 \001(\0132\025.apollo.common.Header\022)\n\004road\030"
  "\002 \003(\0132\033.apollo.routing.RoadSegment\0220\n\013me"
  "asurement\030\003 \001(\0132\033.apollo.routing.Measure"
  "ment\0227\n\017routing_request\030\004 \001(\0132\036.apollo.r"
  "outing.RoutingRequest\022\023\n\013map_version\030\005 \001"
  "(\014\022\'\n\006status\030\006 \001(\0132\027.apollo.common.Statu"
  "sPb*2\n\016ChangeLaneType\022\013\n\007FORWARD\020\000\022\010\n\004LE"
  "FT\020\001\022\t\n\005RIGHT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_deps[4] = {
  &::descriptor_table_modules_2fcommon_2fproto_2ferror_5fcode_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_sccs[7] = {
  &scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto.base,
  &scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once;
static bool descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2frouting_2fproto_2frouting_2eproto = {
  &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_initialized, descriptor_table_protodef_modules_2frouting_2fproto_2frouting_2eproto, "modules/routing/proto/routing.proto", 1175,
  &descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_once, descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_sccs, descriptor_table_modules_2frouting_2fproto_2frouting_2eproto_deps, 7, 4,
  schemas, file_default_instances, TableStruct_modules_2frouting_2fproto_2frouting_2eproto::offsets,
  file_level_metadata_modules_2frouting_2fproto_2frouting_2eproto, 7, file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_2eproto, file_level_service_descriptors_modules_2frouting_2fproto_2frouting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2frouting_2fproto_2frouting_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2frouting_2fproto_2frouting_2eproto), true);
namespace apollo {
namespace routing {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLaneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2frouting_2fproto_2frouting_2eproto);
  return file_level_enum_descriptors_modules_2frouting_2fproto_2frouting_2eproto[0];
}
bool ChangeLaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaneWaypoint::InitAsDefaultInstance() {
  ::apollo::routing::_LaneWaypoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
class LaneWaypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneWaypoint>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::PointENU& pose(const LaneWaypoint* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PointENU&
LaneWaypoint::_Internal::pose(const LaneWaypoint* msg) {
  return *msg->pose_;
}
void LaneWaypoint::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
LaneWaypoint::LaneWaypoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.LaneWaypoint)
}
LaneWaypoint::LaneWaypoint(const LaneWaypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_pose()) {
    pose_ = new ::apollo::common::PointENU(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneWaypoint)
}

void LaneWaypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(s_));
}

LaneWaypoint::~LaneWaypoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneWaypoint)
  SharedDtor();
}

void LaneWaypoint::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void LaneWaypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneWaypoint& LaneWaypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneWaypoint_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void LaneWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneWaypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
  }
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaneWaypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.routing.LaneWaypoint.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneWaypoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneWaypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneWaypoint.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  // optional .apollo.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneWaypoint)
  return target;
}

size_t LaneWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneWaypoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.common.PointENU pose = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional double s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneWaypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneWaypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneWaypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.LaneWaypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.LaneWaypoint)
    MergeFrom(*source);
  }
}

void LaneWaypoint::MergeFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::apollo::common::PointENU::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneWaypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneWaypoint::CopyFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWaypoint::IsInitialized() const {
  return true;
}

void LaneWaypoint::InternalSwap(LaneWaypoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(s_, other->s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneWaypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneSegment::InitAsDefaultInstance() {
}
class LaneSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSegment>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LaneSegment::LaneSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneSegment)
}

void LaneSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneSegment& LaneSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneSegment_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaneSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.routing.LaneSegment.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.LaneSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::InternalSwap(LaneSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingRequest::InitAsDefaultInstance() {
  ::apollo::routing::_RoutingRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::routing::_RoutingRequest_default_instance_._instance.get_mutable()->parking_space_ = const_cast< ::apollo::hdmap::ParkingSpace*>(
      ::apollo::hdmap::ParkingSpace::internal_default_instance());
}
class RoutingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingRequest>()._has_bits_);
  static const ::apollo::common::Header& header(const RoutingRequest* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::hdmap::ParkingSpace& parking_space(const RoutingRequest* msg);
  static void set_has_parking_space(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
RoutingRequest::_Internal::header(const RoutingRequest* msg) {
  return *msg->header_;
}
const ::apollo::hdmap::ParkingSpace&
RoutingRequest::_Internal::parking_space(const RoutingRequest* msg) {
  return *msg->parking_space_;
}
void RoutingRequest::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingRequest::clear_parking_space() {
  if (parking_space_ != nullptr) parking_space_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RoutingRequest::RoutingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingRequest)
}
RoutingRequest::RoutingRequest(const RoutingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      waypoint_(from.waypoint_),
      blacklisted_lane_(from.blacklisted_lane_),
      blacklisted_road_(from.blacklisted_road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_parking_space()) {
    parking_space_ = new ::apollo::hdmap::ParkingSpace(*from.parking_space_);
  } else {
    parking_space_ = nullptr;
  }
  broadcast_ = from.broadcast_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingRequest)
}

void RoutingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_space_) -
      reinterpret_cast<char*>(&header_)) + sizeof(parking_space_));
  broadcast_ = true;
}

RoutingRequest::~RoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingRequest)
  SharedDtor();
}

void RoutingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete parking_space_;
}

void RoutingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingRequest& RoutingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingRequest_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void RoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_.Clear();
  blacklisted_lane_.Clear();
  blacklisted_road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parking_space_ != nullptr);
      parking_space_->Clear();
    }
    broadcast_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RoutingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.routing.LaneWaypoint waypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blacklisted_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string blacklisted_road = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blacklisted_road();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.routing.RoutingRequest.blacklisted_road");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool broadcast = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_broadcast(&has_bits);
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.ParkingSpace parking_space = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_waypoint(i), target, stream);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blacklisted_lane_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_blacklisted_lane(i), target, stream);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->_internal_blacklisted_road_size(); i < n; i++) {
    const auto& s = this->_internal_blacklisted_road(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoutingRequest.blacklisted_road");
    target = stream->WriteString(4, s, target);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_broadcast(), target);
  }

  // optional .apollo.hdmap.ParkingSpace parking_space = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::parking_space(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingRequest)
  return target;
}

size_t RoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  total_size += 1UL * this->_internal_waypoint_size();
  for (const auto& msg : this->waypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  total_size += 1UL * this->_internal_blacklisted_lane_size();
  for (const auto& msg : this->blacklisted_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string blacklisted_road = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blacklisted_road_.size());
  for (int i = 0, n = blacklisted_road_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blacklisted_road_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.hdmap.ParkingSpace parking_space = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_space_);
    }

    // optional bool broadcast = 5 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingRequest)
    MergeFrom(*source);
  }
}

void RoutingRequest::MergeFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
  blacklisted_lane_.MergeFrom(from.blacklisted_lane_);
  blacklisted_road_.MergeFrom(from.blacklisted_road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parking_space()->::apollo::hdmap::ParkingSpace::MergeFrom(from._internal_parking_space());
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRequest::CopyFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRequest::IsInitialized() const {
  return true;
}

void RoutingRequest::InternalSwap(RoutingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  waypoint_.InternalSwap(&other->waypoint_);
  blacklisted_lane_.InternalSwap(&other->blacklisted_lane_);
  blacklisted_road_.InternalSwap(&other->blacklisted_road_);
  swap(header_, other->header_);
  swap(parking_space_, other->parking_space_);
  swap(broadcast_, other->broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Measurement::InitAsDefaultInstance() {
}
class Measurement::_Internal {
 public:
  using HasBits = decltype(std::declval<Measurement>()._has_bits_);
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Measurement::Measurement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Measurement)
}

void Measurement::SharedCtor() {
  distance_ = 0;
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:apollo.routing.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
}

void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Measurement& Measurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Measurement_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Measurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Measurement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Measurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Measurement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double distance = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Measurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Measurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distance()) {
    _internal_set_distance(from._internal_distance());
  }
}

void Measurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Measurement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Passage::InitAsDefaultInstance() {
}
class Passage::_Internal {
 public:
  using HasBits = decltype(std::declval<Passage>()._has_bits_);
  static void set_has_can_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Passage::Passage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Passage)
}
Passage::Passage(const Passage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_exit_, &from.can_exit_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_lane_type_) -
    reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Passage)
}

void Passage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto.base);
  ::memset(&can_exit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_lane_type_) -
      reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:apollo.routing.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
}

void Passage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Passage& Passage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Passage_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Passage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&can_exit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_lane_type_) -
        reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Passage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.routing.LaneSegment segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool can_exit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_exit(&has_bits);
          can_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Passage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Passage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_exit(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Passage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool can_exit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Passage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  const Passage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Passage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Passage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      can_exit_ = from.can_exit_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_lane_type_ = from.change_lane_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Passage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::InternalSwap(Passage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_.InternalSwap(&other->segment_);
  swap(can_exit_, other->can_exit_);
  swap(change_lane_type_, other->change_lane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Passage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadSegment::InitAsDefaultInstance() {
}
class RoadSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSegment>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadSegment::RoadSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoadSegment)
}
RoadSegment::RoadSegment(const RoadSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      passage_(from.passage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoadSegment)
}

void RoadSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoadSegment::~RoadSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoadSegment)
  SharedDtor();
}

void RoadSegment::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoadSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSegment& RoadSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSegment_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void RoadSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoadSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RoadSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.routing.RoadSegment.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.routing.Passage passage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoadSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoadSegment.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.routing.Passage passage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_passage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_passage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoadSegment)
  return target;
}

size_t RoadSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoadSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.Passage passage = 2;
  total_size += 1UL * this->_internal_passage_size();
  for (const auto& msg : this->passage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoadSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoadSegment)
    MergeFrom(*source);
  }
}

void RoadSegment::MergeFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passage_.MergeFrom(from.passage_);
  if (from._internal_has_id()) {
    _has_bits_[0] |= 0x00000001u;
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RoadSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSegment::CopyFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegment::IsInitialized() const {
  return true;
}

void RoadSegment::InternalSwap(RoadSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  passage_.InternalSwap(&other->passage_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingResponse::InitAsDefaultInstance() {
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->measurement_ = const_cast< ::apollo::routing::Measurement*>(
      ::apollo::routing::Measurement::internal_default_instance());
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->routing_request_ = const_cast< ::apollo::routing::RoutingRequest*>(
      ::apollo::routing::RoutingRequest::internal_default_instance());
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::apollo::common::StatusPb*>(
      ::apollo::common::StatusPb::internal_default_instance());
}
class RoutingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingResponse>()._has_bits_);
  static const ::apollo::common::Header& header(const RoutingResponse* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::Measurement& measurement(const RoutingResponse* msg);
  static void set_has_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::routing::RoutingRequest& routing_request(const RoutingResponse* msg);
  static void set_has_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_map_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::StatusPb& status(const RoutingResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Header&
RoutingResponse::_Internal::header(const RoutingResponse* msg) {
  return *msg->header_;
}
const ::apollo::routing::Measurement&
RoutingResponse::_Internal::measurement(const RoutingResponse* msg) {
  return *msg->measurement_;
}
const ::apollo::routing::RoutingRequest&
RoutingResponse::_Internal::routing_request(const RoutingResponse* msg) {
  return *msg->routing_request_;
}
const ::apollo::common::StatusPb&
RoutingResponse::_Internal::status(const RoutingResponse* msg) {
  return *msg->status_;
}
void RoutingResponse::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RoutingResponse::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
RoutingResponse::RoutingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingResponse)
}
RoutingResponse::RoutingResponse(const RoutingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      road_(from.road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_version()) {
    map_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_version_);
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_measurement()) {
    measurement_ = new ::apollo::routing::Measurement(*from.measurement_);
  } else {
    measurement_ = nullptr;
  }
  if (from._internal_has_routing_request()) {
    routing_request_ = new ::apollo::routing::RoutingRequest(*from.routing_request_);
  } else {
    routing_request_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::apollo::common::StatusPb(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingResponse)
}

void RoutingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto.base);
  map_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

RoutingResponse::~RoutingResponse() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingResponse)
  SharedDtor();
}

void RoutingResponse::SharedDtor() {
  map_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete measurement_;
  if (this != internal_default_instance()) delete routing_request_;
  if (this != internal_default_instance()) delete status_;
}

void RoutingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingResponse& RoutingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingResponse_modules_2frouting_2fproto_2frouting_2eproto.base);
  return *internal_default_instance();
}


void RoutingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      map_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(measurement_ != nullptr);
      measurement_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(routing_request_ != nullptr);
      routing_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RoutingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.routing.RoadSegment road = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.Measurement measurement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest routing_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes map_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_map_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.StatusPb status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.routing.RoadSegment road = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_road(i), target, stream);
  }

  // optional .apollo.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::measurement(this), target, stream);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::routing_request(this), target, stream);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_map_version(), target);
  }

  // optional .apollo.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingResponse)
  return target;
}

size_t RoutingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 2;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes map_version = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_map_version());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.routing.Measurement measurement = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *measurement_);
    }

    // optional .apollo.routing.RoutingRequest routing_request = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_request_);
    }

    // optional .apollo.common.StatusPb status = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingResponse)
    MergeFrom(*source);
  }
}

void RoutingResponse::MergeFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      map_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from._internal_measurement());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_status()->::apollo::common::StatusPb::MergeFrom(from._internal_status());
    }
  }
}

void RoutingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingResponse::CopyFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponse::IsInitialized() const {
  return true;
}

void RoutingResponse::InternalSwap(RoutingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  road_.InternalSwap(&other->road_);
  map_version_.Swap(&other->map_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_, other->measurement_);
  swap(routing_request_, other->routing_request_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::routing::LaneWaypoint* Arena::CreateMaybeMessage< ::apollo::routing::LaneWaypoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::LaneWaypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::LaneSegment* Arena::CreateMaybeMessage< ::apollo::routing::LaneSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::LaneSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoutingRequest* Arena::CreateMaybeMessage< ::apollo::routing::RoutingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoutingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Measurement* Arena::CreateMaybeMessage< ::apollo::routing::Measurement >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Measurement >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::Passage* Arena::CreateMaybeMessage< ::apollo::routing::Passage >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Passage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoadSegment* Arena::CreateMaybeMessage< ::apollo::routing::RoadSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoadSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::routing::RoutingResponse* Arena::CreateMaybeMessage< ::apollo::routing::RoutingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoutingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
